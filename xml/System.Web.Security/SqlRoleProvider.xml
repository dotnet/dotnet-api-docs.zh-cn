<Type Name="SqlRoleProvider" FullName="System.Web.Security.SqlRoleProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="72cbb11902b875795a72370861794dd6f1adf81c" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89990818" /></Metadata><TypeSignature Language="C#" Value="public class SqlRoleProvider : System.Web.Security.RoleProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SqlRoleProvider extends System.Web.Security.RoleProvider" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.SqlRoleProvider" />
  <TypeSignature Language="VB.NET" Value="Public Class SqlRoleProvider&#xA;Inherits RoleProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlRoleProvider : System::Web::Security::RoleProvider" />
  <TypeSignature Language="F#" Value="type SqlRoleProvider = class&#xA;    inherit RoleProvider" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Security.RoleProvider</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>对 ASP.NET 应用程序的角色成员资格信息在 SQL Server 数据库中的存储进行管理。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 和类使用此类 <xref:System.Web.Security.Roles> <xref:System.Web.Security.RolePrincipal> 为使用 SQL Server 数据库的 ASP.NET 应用程序提供角色管理服务。 你可以使用角色管理为应用程序指定不同的授权级别。

 若要使用 <xref:System.Web.Security.SqlRoleProvider> 类，必须先创建所使用的 SQL Server 数据库 <xref:System.Web.Security.SqlRoleProvider> 。 若要创建类使用的数据库 <xref:System.Web.Security.SqlRoleProvider> ，请运行 `aspnet_regsql.exe` 在 C:\WINDOWS\Microsoft.NET\Framework\ 文件夹中找到的可执行文件， `versionNumber` 并指定 `-Ar` 选项 (例如 `aspnet_regsql.exe -Ar`) 。 创建的数据库名为 Aspnetdb.mdf。 或者，运行 aspnet_regsql.exe 以获取 GUI 配置模式并选择配置所有 ASP.NET 功能。

 如果为角色提供程序配置了使用集成安全性的连接字符串，则 ASP.NET 应用程序的进程帐户必须具有连接到 SQL Server 数据库的权限。

 使用 <xref:System.Web.Security.SqlRoleProvider> 名为 AspNetSqlProvider 的实例配置 Machine.config 文件，该实例连接到本地计算机上的 SQL Server。 您可以使用此提供程序的实例，或在 ASP.NET 应用程序的 Web.config 文件中指定自己的实例。 若要使用 AspNetSqlProvider 实例，请在配置中将 AspNetSqlProvider 指定为 `defaultProvider` 。

 你可以将配置 <xref:System.Web.Security.SqlRoleProvider> 为使用与相同的数据库和用户信息，以便 <xref:System.Web.Security.SqlMembershipProvider> 将单个数据库用于身份验证和授权信息。 若要将同一数据库用于成员身份和角色信息，请运行 aspnet_regsql.exe 可执行文件并安装成员身份功能。 然后，在配置中为和实例指定相同的连接字符串 <xref:System.Web.Security.SqlRoleProvider> <xref:System.Web.Security.SqlMembershipProvider> 。 还要确保两个提供程序实例都配置相同 <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> 。



## Examples
 下面的示例演示了配置为使用对象和的 ASP.NET 应用程序的 Web.config 文件 <xref:System.Web.Security.SqlRoleProvider> <xref:System.Web.Security.SqlMembershipProvider> 。 元素配置为仅允许访问管理员角色中经过身份验证的用户。

```
<configuration>
  <connectionStrings>
    <add name="SqlServices" connectionString="Data Source=localhost;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />
  </connectionStrings>
  <system.web>
    <authentication mode="Forms" >
      <forms loginUrl="logincs.aspx"
      name=".ASPXFORMSAUTH" />
    </authentication>
    <authorization>
      <deny users="?" />
         <allow roles="Administrators" />
         <deny users="*" />
    </authorization>
    <membership defaultProvider="SqlProvider" userIsOnlineTimeWindow="15">
      <providers>
        <add
          name="SqlProvider"
          type="System.Web.Security.SqlMembershipProvider"
          connectionStringName="SqlServices"
          enablePasswordRetrieval="false"
          enablePasswordReset="false"
          requiresQuestionAndAnswer="false"
          passwordFormat="Hashed"
          applicationName="SampleApplication" />
      </providers>
    </membership>
    <roleManager defaultProvider="SqlProvider"
      enabled="true"
      cacheRolesInCookie="true"
      cookieName=".ASPROLES"
      cookieTimeout="30"
      cookiePath="/"
      cookieRequireSSL="true"
      cookieSlidingExpiration="true"
      cookieProtection="All" >
      <providers>
        <add
          name="SqlProvider"
          type="System.Web.Security.SqlRoleProvider"
          connectionStringName="SqlServices"
          applicationName="SampleApplication" />
      </providers>
    </roleManager>
  </system.web>
</configuration>
```

 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlRoleProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlRoleProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Web.Security.SqlRoleProvider" /> 类的实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.SqlRoleProvider.%23ctor%2A>构造函数由 ASP.NET 调用，以创建 <xref:System.Web.Security.SqlRoleProvider> 在应用程序的配置中指定的类的实例。 不应在代码中使用此构造函数。

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="AddUsersToRoles">
      <MemberSignature Language="C#" Value="public override void AddUsersToRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void AddUsersToRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.AddUsersToRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub AddUsersToRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void AddUsersToRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="override this.AddUsersToRoles : string[] * string[] -&gt; unit" Usage="sqlRoleProvider.AddUsersToRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">要添加到指定的角色的用户名的字符串数组。</param>
        <param name="roleNames">一个字符串数组，其中包含要将指定用户名添加到的角色的名称。</param>
        <summary>将指定用户名添加到每个指定的角色。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A>方法由 <xref:System.Web.Security.Roles> 类调用，以将一个或多个用户与 ASP.NET 应用程序的配置文件中指定的 SQL Server 数据库中的一个或多个角色关联 ( # A0) 。 此方法由 <xref:System.Web.Security.Roles.AddUserToRole%2A> 类的、 <xref:System.Web.Security.Roles.AddUserToRoles%2A> 、 <xref:System.Web.Security.Roles.AddUsersToRole%2A> 和方法调用 <xref:System.Web.Security.Roles.AddUsersToRoles%2A> <xref:System.Web.Security.Roles> 。

 在对方法的调用过程中执行的数据库更新在 <xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> 事务中进行。 如果遇到错误（如已在指定角色中的用户名），则将回滚该事务，并且不执行任何更新。

 如果 <xref:System.Web.Security.SqlRoleProvider> 与一起使用 <xref:System.Web.Security.SqlMembershipProvider> ，并且数据库中不存在指定的用户名之一，则会自动将用户名添加到数据库中。

 用户名和角色名称不能包含逗号。



## Examples
 下面的代码示例将一个或多个用户添加到角色或从角色中删除用户。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.SqlRoleProvider> 。

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleNames" /> 中的一个角色为 <see langword="null" />。

- 或 -

<paramref name="usernames" /> 中的一个用户为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleNames" /> 中的一个角色是空字符串或包含逗号。

- 或 -

<paramref name="usernames" /> 中的一个用户是空字符串或包含逗号。

- 或 -

<paramref name="roleNames" /> 中的一个角色的长度超过 256 个字符。

- 或 -

<paramref name="usernames" /> 中的一个用户的长度超过 256 个字符。

- 或 -

 <paramref name="roleNames" /> 包含重复的元素。

- 或 -

 <paramref name="usernames" /> 包含重复的元素。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未找到指定的一个或多个角色名。

 - 或 -

 未找到指定的一个或多个用户名。

 - 或 -

 一个或多个指定的用户名已与一个或多个指定的角色名相关联。

 - 或 -

 与数据库进行通信时发生未知错误。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public override string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.SqlRoleProvider.ApplicationName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ApplicationName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ApplicationName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationName : string with get, set" Usage="System.Web.Security.SqlRoleProvider.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要存储和检索其角色信息的应用程序的名称。</summary>
        <value>要存储和检索其角色信息的应用程序的名称。 默认值为当前 <see cref="P:System.Web.HttpRequest.ApplicationPath" /> 的 <see cref="P:System.Web.HttpContext.Request" /> 属性值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>使用 <xref:System.Web.Security.SqlRoleProvider> 可将用户和角色与不同的应用程序相关联。 这使多个应用程序能够使用同一个数据库来存储用户和角色信息，而不会在重复用户名或角色名称之间发生冲突。 多个 ASP.NET 应用程序可以通过在属性中指定相同的值来使用相同的数据库 <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> 。 <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>可以通过编程方式设置该属性，也可以使用属性在 Web 应用程序的配置文件中以声明方式设置该属性 `applicationName` 。

 如果没有为 `applicationName` Web 应用程序的配置文件中的属性指定值，则 <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=nameWithType> 使用当前对象的属性值 <xref:System.Web.HttpContext.Request%2A?displayProperty=nameWithType> 。

> [!CAUTION]
>  由于单个默认角色提供程序实例用于对象所提供的所有请求 <xref:System.Web.HttpApplication> ，因此您可以同时执行多个请求并尝试设置 <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> 属性值。 <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A>对于多个写入，属性不是线程安全的，并且更改 <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> 属性值可能会导致应用程序的多个用户产生意外行为。 建议你避免编写允许用户设置属性的代码， <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> 除非你必须这样做。 可能需要设置属性的应用程序的一个示例 <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> 是管理多个应用程序的角色数据的管理应用程序。 此类应用程序应为单用户应用程序，而不是 Web 应用程序。



## Examples
 下面的示例演示 `system.web` ASP.NET 应用程序的 Web.config 文件部分中的元素。 它指定应用程序的 <xref:System.Web.Security.SqlRoleProvider> 实例，并将 <xref:System.Web.Security.SqlRoleProvider.ApplicationName%2A> 属性设置为 `MyApplication` 。

```
<roleManager defaultProvider="SqlProvider"
  enabled="true"
  cacheRolesInCookie="true"
  cookieName=".ASPROLES"
  cookieTimeout="30"
  cookiePath="/"
  cookieRequireSSL="false"
  cookieSlidingExpiration="true"
  cookieProtection="All" >
  <providers>
    <add
      name="SqlProvider"
      type="System.Web.Security.SqlRoleProvider"
      connectionStringName="SqlServices"
      applicationName="MyApplication" />
  </providers>
</roleManager>
```

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">不具有 <see cref="P:System.Web.Security.SqlRoleProvider.ApplicationName" /> ASP.NET 承载权限的调用方尝试设置 <see cref="F:System.Web.AspNetHostingPermissionLevel.High" /> 属性。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">尝试将 <see cref="P:System.Web.Security.SqlRoleProvider.ApplicationName" /> 设置为长于 256 个字符的字符串。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="CreateRole">
      <MemberSignature Language="C#" Value="public override void CreateRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CreateRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.CreateRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CreateRole (roleName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CreateRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.CreateRole : string -&gt; unit" Usage="sqlRoleProvider.CreateRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要创建的角色的名称。</param>
        <summary>将新的角色添加到角色数据库。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此 <xref:System.Web.Security.SqlRoleProvider.CreateRole%2A> 方法由 <xref:System.Web.Security.Roles> 类调用，以在 ASP.NET 应用程序的配置文件 ( # A0) 中指定的 SQL Server 数据库中创建角色。

 角色名称的最大长度为256个字符。 角色名称不区分大小写。 角色名称中不允许使用逗号。



## Examples
 下面的代码示例在数据库中创建一个新的角色。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.SqlRoleProvider> 。

> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号。

- 或 -

 <paramref name="roleName" /> 的长度超过 256 个字符。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" /> 已在数据库中存在。

- 或 -

与数据库进行通信时发生未知错误。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public override bool DeleteRole (string roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool DeleteRole(string roleName, bool throwOnPopulatedRole) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.DeleteRole(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function DeleteRole (roleName As String, throwOnPopulatedRole As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool DeleteRole(System::String ^ roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="F#" Value="override this.DeleteRole : string * bool -&gt; bool" Usage="sqlRoleProvider.DeleteRole (roleName, throwOnPopulatedRole)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="throwOnPopulatedRole" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="roleName">要删除的角色的名称。</param>
        <param name="throwOnPopulatedRole">如果为 <see langword="true" />，则当 <paramref name="roleName" /> 包含一个或多个成员时将引发异常。</param>
        <summary>从角色数据库移除一个角色。</summary>
        <returns>若已成功删除此角色，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.SqlRoleProvider.DeleteRole%2A>类调用方法， <xref:System.Web.Security.Roles> 以从 ASP.NET 应用程序的配置文件中指定的 SQL Server 数据库中删除角色 ( # A0) 。 删除角色时，也会从数据库中删除与该角色关联的用户列表。 数据库中的用户信息不受影响。

 如果 `throwOnPopulatedRole` 为 `true` ，则将引发异常，并且如果由参数标识的角色 `roleName` 具有一个或多个成员，则不会删除该角色。 如果 `throwOnPopulatedRole` 为 `false` ，则无论角色是否为空，都将被删除。



## Examples
 下面的示例从数据库中删除角色。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.SqlRoleProvider> 。

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号。

- 或 -

 <paramref name="roleName" /> 的长度超过 256 个字符。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><paramref name="roleName" /> 具有一个或多个成员且 <paramref name="throwOnPopulatedRole" /> 为 <see langword="true" />。

- 或 -

与数据库进行通信时发生未知错误。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="FindUsersInRole">
      <MemberSignature Language="C#" Value="public override string[] FindUsersInRole (string roleName, string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] FindUsersInRole(string roleName, string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.FindUsersInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function FindUsersInRole (roleName As String, usernameToMatch As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ FindUsersInRole(System::String ^ roleName, System::String ^ usernameToMatch);" />
      <MemberSignature Language="F#" Value="override this.FindUsersInRole : string * string -&gt; string[]" Usage="sqlRoleProvider.FindUsersInRole (roleName, usernameToMatch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">作为搜索范围的角色。</param>
        <param name="usernameToMatch">要搜索的用户名。</param>
        <summary>获取属于某个角色且与指定的用户名相匹配的用户名的数组。</summary>
        <returns>一个字符串数组，包含用户名与 <paramref name="usernameToMatch" /> 匹配且用户是指定角色的成员的所有用户的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.SqlRoleProvider.FindUsersInRole%2A>方法由 <xref:System.Web.Security.Roles> 类调用，并返回一个角色中用户的列表，其中用户名包含为配置的提供的的匹配项 `usernameToMatch` `applicationName` 。 <xref:System.Web.Security.SqlRoleProvider>使用 LIKE 关键字搜索与参数值匹配的用户名， `usernameToMatch` 并支持 SQL Server 通配符。 例如，如果将 `usernameToMatch` 参数设置为 "user1"，则将返回用户名为 "user1" 的用户的成员身份信息（如果存在）。 如果 `usernameToMatch` 参数设置为 "user%"，则将返回用户名为 "user1"、"用户 2"、"user_admin" 等的用户的成员身份信息。



## Examples
 下面的代码示例使用 <xref:System.Web.Security.Roles.FindUsersInRole%2A> 方法基于用户输入显示角色成员身份。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.Roles> 。

> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[System.Web.Security.Roles#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/FindUsersInRolecs.aspx#11)]
 [!code-aspx-vb[System.Web.Security.Roles#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/FindUsersInRolevb.aspx#11)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。

- 或 -

 <paramref name="usernameToMatch" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号。

- 或 -

 <paramref name="usernameToMatch" /> 是一个空字符串。

- 或 -

 <paramref name="roleName" /> 的长度超过 256 个字符。

- 或 -

 <paramref name="usernameToMatch" /> 的长度超过 256 个字符。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">在数据库中找不到 <paramref name="roleName" />。

- 或 -

与数据库进行通信时发生未知错误。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="GetAllRoles">
      <MemberSignature Language="C#" Value="public override string[] GetAllRoles ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetAllRoles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.GetAllRoles" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAllRoles () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetAllRoles();" />
      <MemberSignature Language="F#" Value="override this.GetAllRoles : unit -&gt; string[]" Usage="sqlRoleProvider.GetAllRoles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取应用程序的所有角色的列表。</summary>
        <returns>一个字符串数组，包含在特定应用程序的数据库中存储的所有角色的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.SqlRoleProvider.GetAllRoles%2A>类调用方法 <xref:System.Web.Security.Roles> 来检索 ASP.NET 应用程序的配置文件中指定的 SQL Server 数据库中的所有角色的列表 ( # A0) 。



## Examples
 下面的代码示例使用 <xref:System.Web.Security.Roles.GetAllRoles%2A> 方法获取应用程序的角色列表，并将结果绑定到 <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> 控件。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.SqlRoleProvider> 。

> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">与数据库进行通信时发生未知错误。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public override string[] GetRolesForUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetRolesForUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.GetRolesForUser(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetRolesForUser (username As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetRolesForUser(System::String ^ username);" />
      <MemberSignature Language="F#" Value="override this.GetRolesForUser : string -&gt; string[]" Usage="sqlRoleProvider.GetRolesForUser username" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要为其返回角色列表的用户。</param>
        <summary>获取一个用户所属角色的列表。</summary>
        <returns>一个字符串数组，其中包含指定用户所属的所有角色的名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此 <xref:System.Web.Security.SqlRoleProvider.GetRolesForUser%2A> 方法由 <xref:System.Web.Security.Roles> 类调用，以从 ASP.NET 应用程序的配置文件中指定的 SQL Server 数据库中检索指定用户的角色的列表 ( # A0) 。



## Examples
 下面的代码示例使用 <xref:System.Web.Security.Roles.GetRolesForUser%2A> 方法检索指定用户的角色列表，并将其绑定到 <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> 控件。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.SqlRoleProvider> 。

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="username" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="username" /> 包含一个逗号。

- 或 -

 <paramref name="username" /> 的长度超过 256 个字符。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">与数据库进行通信时发生未知错误。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRole">
      <MemberSignature Language="C#" Value="public override string[] GetUsersInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string[] GetUsersInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.GetUsersInRole(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetUsersInRole (roleName As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override cli::array &lt;System::String ^&gt; ^ GetUsersInRole(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.GetUsersInRole : string -&gt; string[]" Usage="sqlRoleProvider.GetUsersInRole roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要获取其用户列表的角色的名称。</param>
        <summary>获取属于指定角色的用户的列表。</summary>
        <returns>一个字符串数组，其中包含指定角色拥有的所有成员的用户名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.SqlRoleProvider.GetUsersInRole%2A>类调用方法 <xref:System.Web.Security.Roles> 来检索与 ASP.NET 应用程序的配置文件中指定的 SQL Server 角色关联的用户列表 ( # A0) 。



## Examples
 下面的代码示例使用 <xref:System.Web.Security.Roles.GetUsersInRole%2A> 方法获取特定角色中的用户列表，并将结果绑定到 <xref:System.Web.UI.WebControls.GridView?displayProperty=nameWithType> 控件。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.SqlRoleProvider> 。

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号。

- 或 -

 <paramref name="roleName" /> 的长度超过 256 个字符。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">在数据库中找不到 <paramref name="rolename" />。

- 或 -

与数据库进行通信时发生未知错误。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public override void Initialize (string name, System.Collections.Specialized.NameValueCollection config);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Initialize(string name, class System.Collections.Specialized.NameValueCollection config) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Initialize (name As String, config As NameValueCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Initialize(System::String ^ name, System::Collections::Specialized::NameValueCollection ^ config);" />
      <MemberSignature Language="F#" Value="override this.Initialize : string * System.Collections.Specialized.NameValueCollection -&gt; unit" Usage="sqlRoleProvider.Initialize (name, config)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="config" Type="System.Collections.Specialized.NameValueCollection" />
      </Parameters>
      <Docs>
        <param name="name">要初始化的 <see cref="T:System.Web.Security.SqlRoleProvider" /> 实例的名称。</param>
        <param name="config">一个 <see cref="T:System.Collections.Specialized.NameValueCollection" />，包含角色提供程序的配置选项的名称和值。</param>
        <summary>利用在 ASP.NET 应用程序的配置文件中指定的属性值初始化 SQL Server 角色提供程序。 此方法不能直接在代码中使用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此方法 <xref:System.Web.Security.SqlRoleProvider> 使用 ASP.NET 应用程序配置文件中指定的属性值初始化， ( # A0) ，不应在代码中直接使用。

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">ASP.NET 应用程序未在 <see cref="F:System.Web.AspNetHostingPermissionLevel.Medium" /> 信任级别或更高级别下运行。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="config" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException"><see langword="connectionStringName" /> 特性为空，或者在此 <see cref="T:System.Web.Security.SqlRoleProvider" /> 实例的应用程序配置文件中不存在。

- 或 -

<see langword="applicationName" /> 特性长度超过了 256 个字符。

- 或 -

该 <see cref="T:System.Web.Security.SqlRoleProvider" /> 实例的应用程序配置文件包含无法识别的特性。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public override bool IsUserInRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsUserInRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.IsUserInRole(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsUserInRole (username As String, roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsUserInRole(System::String ^ username, System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.IsUserInRole : string * string -&gt; bool" Usage="sqlRoleProvider.IsUserInRole (username, roleName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">要搜索的用户名。</param>
        <param name="roleName">作为搜索范围的角色。</param>
        <summary>获取一个指示指定用户是否属于指定角色的值。</summary>
        <returns>如果指定的用户名属于指定角色，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Web.Security.SqlRoleProvider.IsUserInRole%2A>方法由 <xref:System.Web.Security.Roles> 类和属性的方法调用， <xref:System.Security.Principal.IPrincipal.IsInRole%2A> <xref:System.Web.UI.Page.User%2A?displayProperty=nameWithType> 以确定用户是否与 ASP.NET 应用程序配置文件中指定的 SQL Server 数据库中的角色关联 ( # A0) 。



## Examples
 下面的代码示例以编程方式进行检查，以查看登录的用户是否属于管理员角色，然后才允许用户查看用户角色。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.SqlRoleProvider> 。

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。

- 或 -

 <paramref name="username" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号。

- 或 -

 <paramref name="username" /> 包含一个逗号。

- 或 -

 <paramref name="roleName" /> 的长度超过 256 个字符。

- 或 -

 <paramref name="username" /> 的长度超过 256 个字符。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">与数据库进行通信时发生未知错误。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRoles">
      <MemberSignature Language="C#" Value="public override void RemoveUsersFromRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveUsersFromRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub RemoveUsersFromRoles (usernames As String(), roleNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void RemoveUsersFromRoles(cli::array &lt;System::String ^&gt; ^ usernames, cli::array &lt;System::String ^&gt; ^ roleNames);" />
      <MemberSignature Language="F#" Value="override this.RemoveUsersFromRoles : string[] * string[] -&gt; unit" Usage="sqlRoleProvider.RemoveUsersFromRoles (usernames, roleNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">一个字符串数组，其中包含要从指定的角色移除的用户名。</param>
        <param name="roleNames">一个字符串数组，其中包含要将指定的用户名从中移除的角色的名称。</param>
        <summary>移除指定角色中的指定用户名。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此 <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> 方法由 <xref:System.Web.Security.Roles> 类调用，以从 ASP.NET 应用程序的配置文件中指定的 SQL Server 数据库中的一个或多个角色中删除一个或多个用户 ( # A0) 。 此方法由 <xref:System.Web.Security.Roles.RemoveUserFromRole%2A> 类的、 <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> 、 <xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> 和方法调用 <xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> <xref:System.Web.Security.Roles> 。

 在对的调用过程中执行的数据库更新在 <xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> 事务中进行。 如果遇到错误（例如，不存在的用户名或指定角色中的用户名），则将回滚该事务，并且不执行任何更新。

 用户名和角色名称不能包含逗号。



## Examples
 下面的代码示例将一个或多个用户添加到角色或从角色中删除用户。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.SqlRoleProvider> 。

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleNames" /> 中的一个角色为 <see langword="null" />。

- 或 -

<paramref name="usernames" /> 中的一个用户为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleNames" /> 中的一个角色是空字符串或包含逗号。

- 或 -

<paramref name="usernames" /> 中的一个用户是空字符串或包含逗号。

- 或 -

<paramref name="roleNames" /> 中的一个角色的长度超过 256 个字符。

- 或 -

<paramref name="usernames" /> 中的一个用户的长度超过 256 个字符。

- 或 -

 <paramref name="roleNames" /> 包含重复的元素。

- 或 -

 <paramref name="usernames" /> 包含重复的元素。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">未找到指定的一个或多个用户名。

 - 或 -

 未找到指定的一个或多个角色名。

 - 或 -

 一个或多个指定的用户名未与一个或多个指定的角色名相关联。

 - 或 -

 与数据库进行通信时发生未知错误。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
    <Member MemberName="RoleExists">
      <MemberSignature Language="C#" Value="public override bool RoleExists (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool RoleExists(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.SqlRoleProvider.RoleExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function RoleExists (roleName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool RoleExists(System::String ^ roleName);" />
      <MemberSignature Language="F#" Value="override this.RoleExists : string -&gt; bool" Usage="sqlRoleProvider.RoleExists roleName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">要在数据库中搜索的角色的名称。</param>
        <summary>获取一个值，该值指示指定的角色名称是否已存在于角色数据库中。</summary>
        <returns>如果角色名称已存在于数据库中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此 <xref:System.Web.Security.SqlRoleProvider.RoleExists%2A> 方法由 <xref:System.Web.Security.Roles> 类调用，以确定在 ASP.NET 应用程序的配置文件中指定的 SQL Server 数据库中是否存在角色名称 ( # A0) 。



## Examples
 下面的代码示例使用 <xref:System.Web.Security.Roles.RoleExists%2A> 方法来确定角色名称是否已存在，然后再创建角色。 有关启用角色管理的 Web.config 文件的示例，请参阅 <xref:System.Web.Security.SqlRoleProvider> 。

> [!IMPORTANT]
>  此示例包含一个文本框，该文本框接受用户输入，这是一个潜在的安全威胁。 默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。 有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。

 [!code-aspx-csharp[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-aspx-vb[System.Web.Security.SqlRoleProvider#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="roleName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="roleName" /> 为空字符串或者包含逗号。

- 或 -

 <paramref name="roleName" /> 的长度超过 256 个字符。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">与数据库进行通信时发生未知错误。</exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/5k850zwb(v=vs.100)">了解 ASP.NET 角色管理</related>
      </Docs>
    </Member>
  </Members>
</Type>
