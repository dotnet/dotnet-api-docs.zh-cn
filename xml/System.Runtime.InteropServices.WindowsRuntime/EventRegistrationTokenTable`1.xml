<Type Name="EventRegistrationTokenTable&lt;T&gt;" FullName="System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1cc30ada3265856518cdfcad4cba6ae3df71a093" /><Meta Name="ms.sourcegitcommit" Value="943c8cdbe5b47c6c296a6f4b73038bbd43da0dd2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/12/2021" /><Meta Name="ms.locfileid" Value="100325443" /></Metadata><TypeSignature Language="C#" Value="public sealed class EventRegistrationTokenTable&lt;T&gt; where T : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventRegistrationTokenTable`1&lt;class T&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventRegistrationTokenTable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA; where T : classpublic ref class EventRegistrationTokenTable sealed" />
  <TypeSignature Language="F#" Value="type EventRegistrationTokenTable&lt;'T (requires 'T : null)&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices.WindowsRuntime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime.InteropServices.WindowsRuntime" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T"><span data-ttu-id="1a3e3-101">一个特殊事件的事件处理程序委托的类型。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-101">The type of the event handler delegate for a particular event.</span></span></typeparam>
    <summary><span data-ttu-id="1a3e3-102">存储委托与事件标记之间的映射，以支持在托管代码中实现 Windows 运行时事件。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-102">Stores mappings between delegates and event tokens, to support the implementation of a Windows Runtime event in managed code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a3e3-103">如果需要手动管理和删除事件，请使用此类型。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-103">Use this type when you need to manage the addition and removal of events manually.</span></span>  
  
 <span data-ttu-id="1a3e3-104">此表的实例存储表示已添加到事件的事件处理程序的委托。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-104">An instance of this table stores the delegates that represent the event handlers that have been added to an event.</span></span> <span data-ttu-id="1a3e3-105">若要引发事件，请调用属性返回的委托 <xref:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable%601.InvocationList%2A> （如果不存在） `null` 。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-105">To raise the event, invoke the delegate that is returned by the <xref:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable%601.InvocationList%2A> property, if it is not `null`.</span></span> <span data-ttu-id="1a3e3-106">每个事件都需要此表的实例。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-106">An instance of this table is required for each event.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventRegistrationTokenTable ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventRegistrationTokenTable();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1a3e3-107">初始化 <see cref="T:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-107">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1a3e3-108"><paramref name="T" /> 不是委托类型。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-108"><paramref name="T" /> is not a delegate type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AddEventHandler">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken AddEventHandler (T handler);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken AddEventHandler(!T handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.AddEventHandler(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddEventHandler (handler As T) As EventRegistrationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Runtime::InteropServices::WindowsRuntime::EventRegistrationToken AddEventHandler(T handler);" />
      <MemberSignature Language="F#" Value="member this.AddEventHandler : 'T -&gt; System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken" Usage="eventRegistrationTokenTable.AddEventHandler handler" />
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken AddEventHandler (T? handler);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="T" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="1a3e3-109">要添加的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-109">The event handler to add.</span></span></param>
        <summary><span data-ttu-id="1a3e3-110">添加指定的事件处理程序到该表和调用列表，并返回可用于移除该事件处理程序的标志。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-110">Adds the specified event handler to the table and to the invocation list, and returns a token that can be used to remove the event handler.</span></span></summary>
        <returns><span data-ttu-id="1a3e3-111">可用于将事件处理程序从表和调用列表中移除的标志。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-111">A token that can be used to remove the event handler from the table and the invocation list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrCreateEventRegistrationTokenTable">
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable&lt;T&gt; GetOrCreateEventRegistrationTokenTable (ref System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable&lt;T&gt; refEventTable);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1&lt;!T&gt; GetOrCreateEventRegistrationTokenTable(class System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1&lt;!T&gt;&amp; refEventTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.GetOrCreateEventRegistrationTokenTable(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetOrCreateEventRegistrationTokenTable (ByRef refEventTable As EventRegistrationTokenTable(Of T)) As EventRegistrationTokenTable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Runtime::InteropServices::WindowsRuntime::EventRegistrationTokenTable&lt;T&gt; ^ GetOrCreateEventRegistrationTokenTable(System::Runtime::InteropServices::WindowsRuntime::EventRegistrationTokenTable&lt;T&gt; ^ % refEventTable);" />
      <MemberSignature Language="F#" Value="static member GetOrCreateEventRegistrationTokenTable : EventRegistrationTokenTable -&gt; System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable&lt;'T (requires 'T : null)&gt;" Usage="System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable&lt;'T (requires 'T : null)&gt;.GetOrCreateEventRegistrationTokenTable refEventTable" />
      <MemberSignature Language="C#" Value="public static System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable&lt;T&gt; GetOrCreateEventRegistrationTokenTable (ref System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable&lt;T&gt;? refEventTable);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refEventTable" Type="System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable&lt;T&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="refEventTable"><span data-ttu-id="1a3e3-112">事件注册标记表，由引用传递。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-112">An event registration token table, passed by reference.</span></span></param>
        <summary><span data-ttu-id="1a3e3-113">如果不是 <see langword="null" /> 则返回指定的事件注册标记表；否则返回新的事件注册标记表。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-113">Returns the specified event registration token table, if it is not <see langword="null" />; otherwise, returns a new event registration token table.</span></span></summary>
        <returns><span data-ttu-id="1a3e3-114">如果不为 <see langword="null" />，则是由 <paramref name="refEventTable" />指定的事件注册标记表；否则为新的事件注册标记表。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-114">The event registration token table that is specified by <paramref name="refEventTable" />, if it is not <see langword="null" />; otherwise, a new event registration token table.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a3e3-115"><xref:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable%601.GetOrCreateEventRegistrationTokenTable%2A>在多个线程都可以创建表的情况下，使用方法初始化事件注册标记表。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-115">Use the <xref:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable%601.GetOrCreateEventRegistrationTokenTable%2A> method to initialize an event registration token table in scenarios where any of several threads can create the table.</span></span> <span data-ttu-id="1a3e3-116">如果在多个线程上同时调用此方法，则会在所有线程上返回相同的事件注册标记表。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-116">If this method is called on multiple threads at the same time, the same event registration token table is returned on all threads.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvocationList">
      <MemberSignature Language="C#" Value="public T InvocationList { get; set; }" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance !T InvocationList" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.InvocationList" />
      <MemberSignature Language="VB.NET" Value="Public Property InvocationList As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T InvocationList { T get(); void set(T value); };" />
      <MemberSignature Language="F#" Value="member this.InvocationList : 'T with get, set" Usage="System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable&lt;'T (requires 'T : null)&gt;.InvocationList" />
      <MemberSignature Language="C#" Value="public T? InvocationList { get; set; }" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1a3e3-117">获取或设置类型 <paramref name="T" /> 的委托，它的调用列表包括所有已被添加而尚未删除的事件处理程序委托。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-117">Gets or sets a delegate of type <paramref name="T" /> whose invocation list includes all the event handler delegates that have been added, and that have not yet been removed.</span></span> <span data-ttu-id="1a3e3-118">调用委托调用所有的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-118">Invoking this delegate invokes all the event handlers.</span></span></summary>
        <value><span data-ttu-id="1a3e3-119">表示所有当前注册事件的事件处理程序的类型 <paramref name="T" /> 的委托。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-119">A delegate of type <paramref name="T" /> that represents all the event handler delegates that are currently registered for an event.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveEventHandler">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="1a3e3-120">从表格和调用列表移除事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-120">Removes an event handler from the table and the invocation list.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveEventHandler">
      <MemberSignature Language="C#" Value="public void RemoveEventHandler (System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveEventHandler(valuetype System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveEventHandler (token As EventRegistrationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveEventHandler(System::Runtime::InteropServices::WindowsRuntime::EventRegistrationToken token);" />
      <MemberSignature Language="F#" Value="member this.RemoveEventHandler : System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken -&gt; unit" Usage="eventRegistrationTokenTable.RemoveEventHandler token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken" />
      </Parameters>
      <Docs>
        <param name="token"><span data-ttu-id="1a3e3-121">添加了事件处理程序，返回标记。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-121">The token that was returned when the event handler was added.</span></span></param>
        <summary><span data-ttu-id="1a3e3-122">移除事件处理程序，其与表中和调用表中指定标记关联。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-122">Removes the event handler that is associated with the specified token from the table and the invocation list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a3e3-123">如果未注册该标记，则不会修改该表和调用列表。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-123">If the token is not registered, the table and the invocation list are not modified.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventHandler">
      <MemberSignature Language="C#" Value="public void RemoveEventHandler (T handler);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveEventHandler(!T handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.WindowsRuntime.EventRegistrationTokenTable`1.RemoveEventHandler(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveEventHandler (handler As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveEventHandler(T handler);" />
      <MemberSignature Language="F#" Value="member this.RemoveEventHandler : 'T -&gt; unit" Usage="eventRegistrationTokenTable.RemoveEventHandler handler" />
      <MemberSignature Language="C#" Value="public void RemoveEventHandler (T? handler);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices.WindowsRuntime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="T" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="1a3e3-124">要移除的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-124">The event handler to remove.</span></span></param>
        <summary><span data-ttu-id="1a3e3-125">从表格和调用列表移除指定的事件处理程序委托。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-125">Removes the specified event handler delegate from the table and the invocation list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1a3e3-126">如果未注册该处理程序，则不修改该表和调用列表。</span><span class="sxs-lookup"><span data-stu-id="1a3e3-126">If the handler is not registered, the table and the invocation list are not modified.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
