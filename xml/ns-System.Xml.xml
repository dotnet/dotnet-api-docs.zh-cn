<Namespace Name="System.Xml">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3684eea60557b4111b167685ed6ae94a8c750912" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89710033" /></Metadata><Docs>
    <summary><see cref="N:System.Xml" /> 命名空间为处理 XML 提供基于标准的支持。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="std"></a>   
## <a name="supported-standards"></a>支持的标准  
 <xref:System.Xml>命名空间支持以下标准：  
  
- [XML 1.0，包括 DTD 支持](https://www.w3.org/TR/2006/REC-xml-20060816/)  
  
- [XML 命名空间](https://www.w3.org/TR/REC-xml-names/)，流级别和 DOM  
  
- [XML 架构](https://www.w3.org/2001/XMLSchema)  
  
- [XPath 表达式](https://www.w3.org/TR/xpath)  
  
- [XSLT 转换](https://www.w3.org/TR/xslt)  
  
- [DOM 级别1核心](https://www.w3.org/TR/REC-DOM-Level-1/)  
  
- [DOM 级别2核心](https://www.w3.org/TR/DOM-Level-2/)  
  
 请参阅 [w3c 规范与 w3c 规范的区别](#diff) 部分，其中的两种情况下的 XML 类不同于 w3c 建议。  
  
<a name="related"></a>   
## <a name="related-namespaces"></a>相关命名空间  
 .NET Framework 还为 XML 相关操作提供了其他命名空间。 有关列表、说明和链接，请参阅 " [System.Xml 命名空间](https://msdn.microsoft.com/library/gg145036.aspx) " 网页。  
  
<a name="async"></a>   
## <a name="processing-xml-asynchronously"></a>异步处理 XML  
 <xref:System.Xml.XmlReader?displayProperty=nameWithType>和 <xref:System.Xml.XmlWriter?displayProperty=nameWithType> 类包括许多基于异步编程模型的异步方法。 这些方法可以通过其名称末尾的字符串 "Async" 进行标识。 利用这些方法，你可以编写类似于同步代码的异步代码，并可以轻松地将现有同步代码迁移到异步代码。  
  
-   在具有大量网络流延迟的应用程序中使用异步方法。 避免使用异步 Api 进行内存流或本地文件流读/写操作。 输入流、 <xref:System.Xml.XmlTextReader> 和 <xref:System.Xml.XmlTextWriter> 应该也支持异步操作。 否则，i/o 操作仍将阻止线程。  
  
-   我们不建议混合使用同步和异步函数调用，因为你可能会忘记使用 `await` 关键字或使用同步 API （在这种情况下需要使用异步的）。  
  
-   <xref:System.Xml.XmlReaderSettings.Async%2A?displayProperty=nameWithType> <xref:System.Xml.XmlWriterSettings.Async%2A?displayProperty=nameWithType> `true` 如果不打算使用异步方法，请不要将或标记设置为。  
  
-   如果在 `await` 调用异步方法时忘记指定关键字，则结果是不确定的：你可能会收到预期结果或异常。  
  
-   当 <xref:System.Xml.XmlReader> 对象读取大文本节点时，它可能仅缓存部分文本值并且返回文本节点，因此，在检索 <xref:System.Xml.XmlReader.Value%2A?displayProperty=nameWithType> 属性时，可能会被 i/o 操作阻止。 使用 <xref:System.Xml.XmlReader.GetValueAsync%2A?displayProperty=nameWithType> 方法可获取异步模式下的文本值，或使用 <xref:System.Xml.XmlReader.ReadValueChunkAsync%2A?displayProperty=nameWithType> 方法读取块区中的大型文本块。  
  
-   使用 <xref:System.Xml.XmlWriter> 对象时，请在 <xref:System.Xml.XmlWriter.FlushAsync%2A?displayProperty=nameWithType> 调用之前调用方法， <xref:System.Xml.XmlWriter.Close%2A?displayProperty=nameWithType> 以避免阻塞 i/o 操作。  
  
<a name="diff"></a>   
## <a name="differences-from-the-w3c-specs"></a>与 W3C 规范的区别  
 在两个涉及模型组架构组件的约束的情况下， <xref:System.Xml> 命名空间不同于 W3C 建议。  
  
 **元素声明中的一致性：**  
  
 在某些情况下，当使用替代组时， <xref:System.Xml> 实现不满足 "架构组件约束：元素声明的一致性" 这一点，详见 W3C 规范的 " [模型组架构组件约束](https://go.microsoft.com/fwlink/?LinkId=137029) " 部分。  
  
 例如，下面的架构包含名称相同但在同一内容模型中具有不同类型的元素，并且使用了替换组。 这应该会导致错误，但是 <xref:System.Xml> 能够正确编译和验证该架构，而不会出错。  
  
```xml  
<?xml version="1.0" encoding="utf-8" ?>   
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
  
   <xs:element name="e1" type="t1"/>  
   <xs:complexType name="t1"/>  
  
   <xs:element name="e2" type="t2" substitutionGroup="e1"/>  
      <xs:complexType name="t2">  
         <xs:complexContent>  
            <xs:extension base="t1">  
         </xs:extension>  
      </xs:complexContent>  
   </xs:complexType>  
  
   <xs:complexType name="t3">  
      <xs:sequence>  
         <xs:element ref="e1"/>  
         <xs:element name="e2" type="xs:int"/>  
      </xs:sequence>  
   </xs:complexType>  
</xs:schema>  
```  
  
 在此架构中，`t3` 类型包含一个元素序列。 由于使用了替换，从序列中对元素 `e1` 的引用会导致类型为 `e1` 的元素 `t1` 或类型为 `e2` 的元素 `t2`。 后一种情况会产生两个元素的序列 `e2` ，其中一个元素的类型为 `t2` ，另一个的类型为 `xs:int` 。  
  
 **唯一粒子归属：**  
  
 在以下条件下， <xref:System.Xml> 实现不满足 "架构组件约束：唯一粒子归属"，这在 W3C 规范的 " [模型组架构组件的约束](https://go.microsoft.com/fwlink/?LinkId=137029) " 部分中进行了介绍。  
  
-   组中的某个元素引用另一个元素。  
  
-   被引用的元素是替换组的头元素。  
  
-   替换组包含与组中的一个元素同名的元素。  
  
-   引用替换组头元素的元素基数与替换组元素同名的元素不会固定 (minOccurs < maxOccurs) 。  
  
-   引用替换组的元素的定义位于与替换组元素同名的元素的定义之前。  
  
 例如，在下面的架构中，内容模型有歧义，应该会导致编译错误，但是 <xref:System.Xml> 能够正确编译该架构，而不会出错。  
  
```xml  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
  
  <xs:element name="e1" type="xs:int"/>  
  <xs:element name="e2" type="xs:int" substitutionGroup="e1"/>  
  
  <xs:complexType name="t3">  
    <xs:sequence>  
      <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
      <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
    </xs:sequence>  
  </xs:complexType>  
  
  <xs:element name="e3" type="t3"/>  
</xs:schema>  
```  
  
 如果尝试针对上述架构验证以下 XML，验证将失败，并出现以下消息： "元素 ' e3 ' 具有无效的子元素 ' e2 '。"， <xref:System.Xml.Schema.XmlSchemaValidationException> 将引发异常。  
  
```xml  
<e3>  
  <e2>1</e2>  
  <e2>2</e2>  
</e3>  
```  
  
 若要解决此问题，可以在 XSD 文档中交换元素声明。 例如：  
  
```xml  
<xs:sequence>  
  <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
  <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
</xs:sequence>  
```  
  
 变为：  
  
```xml  
<xs:sequence>  
  <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
  <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
</xs:sequence>  
```  
  
 下面是同一问题的另一个示例：  
  
```xml  
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">  
   <xs:element name="e1" type="xs:string"/>  
   <xs:element name="e2" type="xs:string" substitutionGroup="e1"/>  
  
   <xs:complexType name="t3">  
      <xs:sequence>  
         <xs:element ref="e1" minOccurs="0" maxOccurs="1"/>  
         <xs:element name="e2" type="xs:int" minOccurs="0" maxOccurs="1"/>  
      </xs:sequence>  
   </xs:complexType>  
   <xs:element name="e3" type="t3"/>  
</xs:schema>  
```  
  
 如果尝试针对上述架构验证以下 XML，验证将失败，并出现以下异常： "未经处理的异常： System.Xml.Schema.XmlSchemaValidationException：" e2 "el 元素无效-根据其数据类型，值" abc "无效， `'http://www.w3.org/2001/XMLSchema:int'` 字符串" abc "不是有效的 Int32 值。
  
```xml  
<e3><e2>abc</e2></e3>  
```  
  
<a name="security"></a>   
## <a name="security-considerations"></a>安全注意事项  
 命名空间中的类型和成员 <xref:System.Xml> 依赖于 [.net 安全系统](/dotnet/standard/security/)。 以下部分介绍了特定于 XML 技术的安全问题。
  
 另请注意，当你使用 <xref:System.Xml> 类型和成员时，如果 XML 包含有潜在的隐私隐患的数据，则需要以一种与最终用户的隐私相关的方式实现应用。
  
 **外部访问**  
  
 多项 XML 技术可以在处理期间检索其他文档。 例如，文档类型定义 (DTD) 可以驻留在正在分析的文档中。 DTD 还可以驻留在正在分析的文档所引用的外部文档中。 XML 架构定义语言 (XSD) 和 XSLT 技术还可以包括其他文件中的信息。 这些外部资源可能存在一些安全问题。 例如，你将需要确保你的应用只从受信任的站点检索文件，并且该应用程序检索的文件不包含恶意数据。  
  
 <xref:System.Xml.XmlUrlResolver>类用于加载 XML 文档和解析外部资源（如实体、dtd 或架构）以及导入或包含指令。  
  
 您可以重写此类并指定 <xref:System.Xml.XmlResolver> 要使用的对象。 如果需要打开自己无法控制的或不可信的资源，请使用 <xref:System.Xml.XmlSecureResolver> 类。 <xref:System.Xml.XmlSecureResolver> 包装 <xref:System.Xml.XmlResolver> 并允许您限制基础 <xref:System.Xml.XmlResolver> 有权访问的资源。  
  
 **拒绝服务**  
  
 下列方案被认为不太容易受到拒绝服务攻击，原因是 <xref:System.Xml> 类可以防止受到此类攻击。  
  
-   分析文本 XML 数据。  
  
-   分析二进制 XML 数据（如果二进制 XML 数据由 Microsoft SQL Server 生成）。  
  
-   将数据源中的 XML 文档和片断写入文件系统、流、<xref:System.IO.TextWriter> 或 <xref:System.Text.StringBuilder>。  
  
-   如果使用的是 <xref:System.Xml.XmlReader> 对象，并且 <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A?displayProperty=nameWithType> 设置为 <xref:System.Xml.DtdProcessing.Prohibit?displayProperty=nameWithType>，则将文档加载到文档对象模型 (DOM) 对象。  
  
-   浏览 DOM 对象。  
  
 如果担心受到拒绝服务攻击，或处于不可信的环境下，建议不要使用下列方案。  
  
-   DTD 处理。  
  
-   架构处理。 这涉及到将不可信架构添加到架构集合中、编译不可信架构以及使用不可信架构进行验证。  
  
-   XSLT 处理。  
  
-   分析用户提供的二进制 XML 数据的任意流。  
  
-   DOM 操作，例如查询、编辑、在文档之间移动子树以及保存 DOM 对象。  
  
 如果你担心拒绝服务问题，或者如果你正在处理不受信任的源，则不要启用 DTD 处理。 默认情况下，此方法在该 <xref:System.Xml.XmlReader> 方法创建的对象上处于禁用状态 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> 。  
  
> [!NOTE]
>  默认情况下，<xref:System.Xml.XmlTextReader> 允许进行 DTD 处理。 可以使用 <xref:System.Xml.XmlTextReader.DtdProcessing%2A?displayProperty=nameWithType> 属性禁用此功能。  
  
 如果已启用 DTD 处理，则可以使用 <xref:System.Xml.XmlSecureResolver> 类来限制 <xref:System.Xml.XmlReader> 可以访问的资源。 你还可以设计应用程序，以便 XML 处理的内存和时间受到限制。 例如，可以在 ASP.NET 应用程序中配置超时限制。  
  
 **处理注意事项**  
  
 由于 XML 文档可以包含对其他文件的引用，因此，很难确定分析 XML 文档所需的处理能力。 例如，XML 文档可以包括 DTD。 如果 DTD 包含嵌套实体或复杂内容模型，可能需要大量时间来分析文档。  
  
 使用 <xref:System.Xml.XmlReader> 时，通过设置 <xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A?displayProperty=nameWithType> 属性，您可以限制能够分析的文档大小。 通过设置 <xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A?displayProperty=nameWithType> 属性，您可以限制从扩展实体中生成的字符数。 有关设置这些属性的示例，请参见相应的参考主题。  
  
 XSD 和 XSLT 技术具有其他一些可能影响处理性能的功能。 例如，在计算相对较小的文档时，构造的 XML 架构可能需要大量的时间来处理。 还可能会在 XSLT 样式表中嵌入脚本块。 这两种情况都会给应用带来潜在的安全威胁。  
  
 创建使用类的应用时 <xref:System.Xml.Xsl.XslCompiledTransform> ，应注意以下各项及其含义：  
  
-   默认情况下禁用 XSLT 脚本。 只有要求脚本支持并且处于完全可信的环境下时，才应启用 XSLT 脚本。  
  
-   默认情况下禁用 XSLT `document()` 函数。 如果启用 `document()` 函数，通过将 <xref:System.Xml.XmlSecureResolver> 对象传递给 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType> 方法，限制可以访问的资源。  
  
-   默认情况下启用扩展对象。 如果包含扩展对象的 <xref:System.Xml.Xsl.XsltArgumentList> 对象传递给 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType> 方法，将使用这些扩展对象。  
  
-   XSLT 样式表可以包括对其他文件的引用以及嵌入式脚本块。 恶意用户可能会利用这一点，方法是为您提供数据或样式表，在执行时，可能会使您的系统不断进行处理，直到计算机资源不足。  
  
-   在混合信任环境中运行的 XSLT 应用可能导致样式表欺骗。 例如，恶意用户可能会为对象加载有害的样式表，并将其交给另一个用户，而后者会继续调用 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A?displayProperty=nameWithType> 方法并执行转换。  
  
 如果不启用脚本或 `document()` 函数（除非样式表来自可信的源），或不接受来自不可信的源的 <xref:System.Xml.Xsl.XslCompiledTransform> 对象、XSLT 样式表或 XML 源数据，可以缓解这些安全问题。  
  
 **异常处理**  
  
 由较低级别的组件引发的异常可能会泄露您不希望公开给应用程序的路径信息。 应用必须捕获异常并对其进行相应处理。  
  
 ]]></format>
    </remarks>
    <altmember cref="N:System.Xml.Xsl" />
    <altmember cref="N:System.Xml.Schema" />
    <altmember cref="N:System.Xml.Linq" />
    <related type="Article" href="/dotnet/standard/data/xml/">XML 文档和数据</related>
  </Docs>
</Namespace>
