<Type Name="ApplicationActivator" FullName="System.Runtime.Hosting.ApplicationActivator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e9af3e3d1c546476fc680d1f59f96a3085de2e20" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86767965" /></Metadata><TypeSignature Language="C#" Value="public class ApplicationActivator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ApplicationActivator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Hosting.ApplicationActivator" />
  <TypeSignature Language="VB.NET" Value="Public Class ApplicationActivator" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationActivator" />
  <TypeSignature Language="F#" Value="type ApplicationActivator = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供用于激活基于清单的程序集的基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Hosting.ApplicationActivator> <xref:System.AppDomain> 所有激活调用都路由到其中的类的单个指定实例。 <xref:System.AppDomainManager>对于，当前 <xref:System.AppDomain> 可以为此目的提供自己的自定义 <xref:System.Runtime.Hosting.ApplicationActivator> 。 如果 <xref:System.Runtime.Hosting.ApplicationActivator> 未提供自定义，则会创建默认的实例 <xref:System.Runtime.Hosting.ApplicationActivator> 。  
  
 以下步骤描述了默认方法实现的行为 <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A> ：  
  
1.  检查 <xref:System.ActivationContext> 要激活的外接程序的是否与 <xref:System.ActivationContext> 当前域的匹配; 如果不是，则继续执行步骤2。 否则，执行程序集并返回包装在对象句柄中的结果。  
  
2.  在新的中激活外接程序 <xref:System.AppDomain> 。 执行以下步骤以 <xref:System.AppDomain> 使用外接程序的初始化新的 <xref:System.Runtime.Hosting.ActivationArguments> 。  
  
    1.  <xref:System.AppDomainSetup>使用 <xref:System.Runtime.Hosting.ActivationArguments> 包含外接程序激活上下文的对象创建一个新的对象。  
  
    2.  调用 <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> 方法以使用对象创建新域 <xref:System.AppDomainSetup> 。  
  
    3.  <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>方法调用 <xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=nameWithType> 方法获取外接程序的 <xref:System.Security.Policy.ApplicationTrust> 对象。 如果 <xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A> 属性返回 `true` ，则执行外接程序。 如果不是，则 <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> 引发， <xref:System.Security.Policy.PolicyException> 指示无法获取执行权限。  
  
    4.  如果外接程序受信任，可以运行，则 <xref:System.AppDomain> 将为外接程序创建和配置一个新的，并 <xref:System.ActivationContext> 加载并执行外接程序。  
  
    5.  将返回外接程序的激活结果，并将其包装在对象句柄中。  
  
 自定义激活器可以将外接程序的激活定制为特定的一组环境。 例如，自定义激活器可以找到一个现有的 <xref:System.AppDomain> 来激活此外接程序，而不是每次都创建一个新域。  
  
 以下步骤描述了 <xref:System.Runtime.Hosting.ApplicationActivator> 在现有中激活外接程序的自定义的行为 <xref:System.AppDomain> ：  
  
1.  自定义激活器将查找 <xref:System.ActivationContext> 与正在激活的外接程序相同的域。  
  
2.  如果 <xref:System.ActivationContext> 之前从未见过，自定义激活器会 <xref:System.AppDomain> 通过直接调用方法为此创建新的 <xref:System.ActivationContext> <xref:System.AppDomain.CreateDomain%2A> ，或者将此活动委托给 <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> 基类中的。  
  
3.  如果存在具有相同的现有域，则 <xref:System.ActivationContext> 激活器可以将 <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A> 方法调用委托给 <xref:System.Runtime.Hosting.ApplicationActivator> 目标域中的。 请注意，这将是对位于目标中的的跨域调用 <xref:System.Runtime.Hosting.ApplicationActivator> <xref:System.AppDomain> 。  
  
   
  
## Examples  
 下面的代码示例演示如何 <xref:System.Runtime.Hosting.ApplicationActivator> 从 <xref:System.AppDomain.DomainManager%2A> 基于清单的应用程序的当前获取对象。  
  
 [!code-csharp[System.Runtime.Hosting.ApplicationActivator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.Hosting.ApplicationActivator/cs/program.cs#1)]
 [!code-vb[System.Runtime.Hosting.ApplicationActivator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.Hosting.ApplicationActivator/vb/program.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ApplicationActivator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ApplicationActivator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Runtime.Hosting.ApplicationActivator" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateInstance">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用标识应用程序的激活上下文创建要激活的应用程序的实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.ActivationContext activationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (activationContext As ActivationContext) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(ActivationContext ^ activationContext);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : ActivationContext -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstance : ActivationContext -&gt; System.Runtime.Remoting.ObjectHandle" Usage="applicationActivator.CreateInstance activationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activationContext" Type="System.ActivationContext" />
      </Parameters>
      <Docs>
        <param name="activationContext">标识要激活的应用程序的 <see cref="T:System.ActivationContext" />。</param>
        <summary>使用指定的激活上下文创建要激活的应用程序的实例。</summary>
        <returns>一个 <see cref="T:System.Runtime.Remoting.ObjectHandle" />，是应用程序执行操作的返回值的包装。 返回值需要打开包装才能访问真实对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于基于清单的应用程序激活。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="activationContext" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstance">
      <MemberSignature Language="C#" Value="public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext, string[] activationCustomData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Remoting.ObjectHandle CreateInstance(class System.ActivationContext activationContext, string[] activationCustomData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateInstance (activationContext As ActivationContext, activationCustomData As String()) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Runtime::Remoting::ObjectHandle ^ CreateInstance(ActivationContext ^ activationContext, cli::array &lt;System::String ^&gt; ^ activationCustomData);" />
      <MemberSignature Language="F#" Value="abstract member CreateInstance : ActivationContext * string[] -&gt; System.Runtime.Remoting.ObjectHandle&#xA;override this.CreateInstance : ActivationContext * string[] -&gt; System.Runtime.Remoting.ObjectHandle" Usage="applicationActivator.CreateInstance (activationContext, activationCustomData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activationContext" Type="System.ActivationContext" />
        <Parameter Name="activationCustomData" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="activationContext">标识要激活的应用程序的 <see cref="T:System.ActivationContext" />。</param>
        <param name="activationCustomData">自定义激活数据。</param>
        <summary>使用指定的激活上下文和自定义激活数据创建要激活的应用程序的实例。</summary>
        <returns>一个 <see cref="T:System.Runtime.Remoting.ObjectHandle" />，是应用程序执行操作的返回值的包装。 返回值需要打开包装才能访问真实对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于基于清单的应用程序激活。 激活数据包含 URL 的查询字符串部分等信息。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="activationContext" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceHelper">
      <MemberSignature Language="C#" Value="protected static System.Runtime.Remoting.ObjectHandle CreateInstanceHelper (AppDomainSetup adSetup);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Runtime.Remoting.ObjectHandle CreateInstanceHelper(class System.AppDomainSetup adSetup) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function CreateInstanceHelper (adSetup As AppDomainSetup) As ObjectHandle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Runtime::Remoting::ObjectHandle ^ CreateInstanceHelper(AppDomainSetup ^ adSetup);" />
      <MemberSignature Language="F#" Value="static member CreateInstanceHelper : AppDomainSetup -&gt; System.Runtime.Remoting.ObjectHandle" Usage="System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper adSetup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ObjectHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="adSetup" Type="System.AppDomainSetup" />
      </Parameters>
      <Docs>
        <param name="adSetup">一个 <see cref="T:System.AppDomainSetup" /> 对象，它的 <see cref="P:System.AppDomainSetup.ActivationArguments" /> 属性标识要激活的应用程序。</param>
        <summary>使用指定的 <see cref="T:System.AppDomainSetup" /> 对象创建应用程序的实例。</summary>
        <returns>一个 <see cref="T:System.Runtime.Remoting.ObjectHandle" />，是应用程序执行操作的返回值的包装。 返回值需要打开包装才能访问真实对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法用于基于清单的应用程序激活。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="adSetup" /> 的 <see cref="P:System.AppDomainSetup.ActivationArguments" /> 属性为 <see langword="null" />。</exception>
        <exception cref="T:System.Security.Policy.PolicyException">未能执行应用程序实例，因为当前应用程序域上的策略设置没有提供运行该应用程序的权限。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
