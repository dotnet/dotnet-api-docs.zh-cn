<Type Name="ISerializable" FullName="System.Runtime.Serialization.ISerializable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="63e72d61e2c034b9e8ba187862077b8b55cc6411" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83979265" /></Metadata><TypeSignature Language="C#" Value="public interface ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISerializable" />
  <TypeSignature Language="F#" Value="type ISerializable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Runtime.Serialization.Formatters" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Runtime.Serialization.Formatters" FromVersion="4.0.2.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Runtime.Serialization.Formatters" FromVersion="4.0.3.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Runtime.Serialization.Formatters" FromVersion="4.0.4.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>允许对象控制其自己的序列化和反序列化过程。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可能会序列化的任何类都必须标记为 <xref:System.SerializableAttribute>。 如果某个类需要控制其序列化过程，则它可以实现 <xref:System.Runtime.Serialization.ISerializable> 接口。 <xref:System.Runtime.Serialization.Formatter> 在序列化时调用 <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>，并用所需的所有数据填充所提供的 <xref:System.Runtime.Serialization.SerializationInfo> 来表示对象。 <xref:System.Runtime.Serialization.Formatter> 使用图形中对象的类型创建 <xref:System.Runtime.Serialization.SerializationInfo>。 需要为自身发送代理的对象可以使用 <xref:System.Runtime.Serialization.SerializationInfo> 上的 <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> 和 <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> 方法来更改传输的信息。  
  
 对于类继承，可以序列化派生自实现 <xref:System.Runtime.Serialization.ISerializable>的基类的类。 在这种情况下，派生类应在其 <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>实现中调用 <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> 的基类实现。 否则，基类中的数据将不会序列化。  
  
 <xref:System.Runtime.Serialization.ISerializable> 接口表示具有签名构造函数的构造函数（<xref:System.Runtime.Serialization.SerializationInfo> 信息、<xref:System.Runtime.Serialization.StreamingContext> 上下文）。 在反序列化时，仅在格式化程序对 <xref:System.Runtime.Serialization.SerializationInfo> 中的数据进行反序列化时调用当前构造函数。 通常，如果类未密封，应保护此构造函数。  
  
 无法保证反序列化对象的顺序。 例如，如果一种类型引用尚未反序列化的类型，则将发生异常。 如果要创建具有此类依赖项的类型，则可以通过实现 `IDeserializationCallback` 接口和 `OnDeserialization` 方法来解决该问题。  
  
 序列化体系结构处理扩展 <xref:System.MarshalByRefObject> 与扩展 <xref:System.Object>的类型相同的对象类型。 这些类型可以用 <xref:System.SerializableAttribute> 进行标记，并将 <xref:System.Runtime.Serialization.ISerializable> 接口实现为任何其他对象类型。 将捕获其对象状态并将其保存到流中。  
  
 当通过 <xref:System.Runtime.Remoting>使用这些类型时，远程处理基础结构将提供抢先于典型序列化并改为将代理序列化为 <xref:System.MarshalByRefObject>的代理项。 代理项是了解如何序列化和反序列化特定类型的对象的帮助器。 在大多数情况下，该代理对用户不可见，将为 <xref:System.Runtime.Remoting.ObjRef>类型。  
  
 作为一种常规设计模式，将类标记为可序列化特性并将 <xref:System.MarshalByRefObject>扩展的情况很常见。 组合这两个特征时，开发人员应仔细考虑可能的序列化和远程处理方案。 这种情况可能适用的一个示例是使用 <xref:System.IO.MemoryStream>。 尽管 <xref:System.IO.MemoryStream> （<xref:System.IO.Stream>）的基类从 <xref:System.MarshalByRefObject>进行扩展，但也可以捕获 <xref:System.IO.MemoryStream> 的状态并将其还原到。 因此，它可能有意义，可以将此流的状态序列化为数据库，并在以后的某个时间点还原。 但是，当通过远程处理使用时，将对此类型的对象进行代理。  
  
 有关扩展 <xref:System.MarshalByRefObject>的类的序列化的详细信息，请参阅 <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>。 有关实现 <xref:System.Runtime.Serialization.ISerializable>的详细信息，请参阅[自定义序列化](/dotnet/standard/serialization/custom-serialization)。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Runtime.Serialization.ISerializable> 接口为类定义自定义序列化行为。  
  
 [!code-cpp[ISerializable Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ISerializable Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[ISerializable Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[ISerializable Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>实现此接口可使对象参与其自己的序列化和反序列化。</para></block>
    <altmember cref="T:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector" />
    <related type="Article" href="/dotnet/standard/serialization/xml-and-soap-serialization">XML 和 SOAP 序列化</related>
    <related type="Article" href="/dotnet/standard/serialization/custom-serialization">自定义序列化</related>
  </Docs>
  <Members>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="iSerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="context">此序列化的目标（请参阅 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。</param>
        <summary>使用序列化目标对象所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 格式化程序将自动跟踪和序列化 <xref:System.Runtime.Serialization.SerializationInfo> 中包含的所有对象。  
  
 调用 <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> 的代码需要用于提供序列化服务的 <xref:System.Security.Permissions.SecurityPermission>。 关联的枚举：<xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType>。  
  
> [!NOTE]
>  不保证在序列化过程中每个对象实例只调用一次此方法。 因此，方法应以这样一种方式实现：无论调用多少次，方法的行为都是相同的。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> 方法为序列化对象设置替代值。 序列化对象时，该代码使用 <xref:System.Runtime.Serialization.SerializationInfo> 类的 <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> 方法来存储替换值。 相反，在反序列化期间调用 `Person` 类的构造函数时，将使用 <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> 方法检索 alternatve 值并将其重新分配给对象的字段。  
  
 [!code-csharp[ISerializable_GetObjectData#0](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable_GetObjectData/cs/ISerializable_GetObjectData.cs#0)]
 [!code-vb[ISerializable_GetObjectData#0](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable_GetObjectData/vb/ISerializable_GetObjectData.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">调用方没有所要求的权限。</exception>
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <related type="Article" href="/dotnet/standard/serialization/custom-serialization">自定义序列化</related>
      </Docs>
    </Member>
  </Members>
</Type>
