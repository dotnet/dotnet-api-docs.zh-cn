<Type Name="ISerializable" FullName="System.Runtime.Serialization.ISerializable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="63e72d61e2c034b9e8ba187862077b8b55cc6411" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83979265" /></Metadata><TypeSignature Language="C#" Value="public interface ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISerializable" />
  <TypeSignature Language="F#" Value="type ISerializable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Runtime.Serialization.Formatters" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Runtime.Serialization.Formatters" FromVersion="4.0.2.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Runtime.Serialization.Formatters" FromVersion="4.0.3.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Runtime.Serialization.Formatters" FromVersion="4.0.4.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="64ac2-101">允许对象控制其自己的序列化和反序列化过程。</span><span class="sxs-lookup"><span data-stu-id="64ac2-101">Allows an object to control its own serialization and deserialization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ac2-102">可能会序列化的任何类都必须标记为 <xref:System.SerializableAttribute>。</span><span class="sxs-lookup"><span data-stu-id="64ac2-102">Any class that might be serialized must be marked with the <xref:System.SerializableAttribute>.</span></span> <span data-ttu-id="64ac2-103">如果某个类需要控制其序列化过程，则它可以实现 <xref:System.Runtime.Serialization.ISerializable> 接口。</span><span class="sxs-lookup"><span data-stu-id="64ac2-103">If a class needs to control its serialization process, it can implement the <xref:System.Runtime.Serialization.ISerializable> interface.</span></span> <span data-ttu-id="64ac2-104"><xref:System.Runtime.Serialization.Formatter> 在序列化时调用 <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>，并用所需的所有数据填充所提供的 <xref:System.Runtime.Serialization.SerializationInfo> 来表示对象。</span><span class="sxs-lookup"><span data-stu-id="64ac2-104">The <xref:System.Runtime.Serialization.Formatter> calls the <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> at serialization time and populates the supplied <xref:System.Runtime.Serialization.SerializationInfo> with all the data required to represent the object.</span></span> <span data-ttu-id="64ac2-105"><xref:System.Runtime.Serialization.Formatter> 使用图形中对象的类型创建 <xref:System.Runtime.Serialization.SerializationInfo>。</span><span class="sxs-lookup"><span data-stu-id="64ac2-105">The <xref:System.Runtime.Serialization.Formatter> creates a <xref:System.Runtime.Serialization.SerializationInfo> with the type of the object in the graph.</span></span> <span data-ttu-id="64ac2-106">需要为自身发送代理的对象可以使用 <xref:System.Runtime.Serialization.SerializationInfo> 上的 <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> 和 <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> 方法来更改传输的信息。</span><span class="sxs-lookup"><span data-stu-id="64ac2-106">Objects that need to send proxies for themselves can use the <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> and <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> methods on <xref:System.Runtime.Serialization.SerializationInfo> to change the transmitted information.</span></span>  
  
 <span data-ttu-id="64ac2-107">对于类继承，可以序列化派生自实现 <xref:System.Runtime.Serialization.ISerializable>的基类的类。</span><span class="sxs-lookup"><span data-stu-id="64ac2-107">In the case of class inheritance, it is possible to serialize a class that derives from a base class that implements <xref:System.Runtime.Serialization.ISerializable>.</span></span> <span data-ttu-id="64ac2-108">在这种情况下，派生类应在其 <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>实现中调用 <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> 的基类实现。</span><span class="sxs-lookup"><span data-stu-id="64ac2-108">In this case, the derived class should call the base class implementation of <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> inside its implementation of <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>.</span></span> <span data-ttu-id="64ac2-109">否则，基类中的数据将不会序列化。</span><span class="sxs-lookup"><span data-stu-id="64ac2-109">Otherwise, the data from the base class will not be serialized.</span></span>  
  
 <span data-ttu-id="64ac2-110"><xref:System.Runtime.Serialization.ISerializable> 接口表示具有签名构造函数的构造函数（<xref:System.Runtime.Serialization.SerializationInfo> 信息、<xref:System.Runtime.Serialization.StreamingContext> 上下文）。</span><span class="sxs-lookup"><span data-stu-id="64ac2-110">The <xref:System.Runtime.Serialization.ISerializable> interface implies a constructor with the signature constructor (<xref:System.Runtime.Serialization.SerializationInfo> information, <xref:System.Runtime.Serialization.StreamingContext> context).</span></span> <span data-ttu-id="64ac2-111">在反序列化时，仅在格式化程序对 <xref:System.Runtime.Serialization.SerializationInfo> 中的数据进行反序列化时调用当前构造函数。</span><span class="sxs-lookup"><span data-stu-id="64ac2-111">At deserialization time, the current constructor is called only after the data in the <xref:System.Runtime.Serialization.SerializationInfo> has been deserialized by the formatter.</span></span> <span data-ttu-id="64ac2-112">通常，如果类未密封，应保护此构造函数。</span><span class="sxs-lookup"><span data-stu-id="64ac2-112">In general, this constructor should be protected if the class is not sealed.</span></span>  
  
 <span data-ttu-id="64ac2-113">无法保证反序列化对象的顺序。</span><span class="sxs-lookup"><span data-stu-id="64ac2-113">The order in which objects are deserialized cannot be guaranteed.</span></span> <span data-ttu-id="64ac2-114">例如，如果一种类型引用尚未反序列化的类型，则将发生异常。</span><span class="sxs-lookup"><span data-stu-id="64ac2-114">For example, if one type references a type that has not been deserialized yet, an exception will occur.</span></span> <span data-ttu-id="64ac2-115">如果要创建具有此类依赖项的类型，则可以通过实现 `IDeserializationCallback` 接口和 `OnDeserialization` 方法来解决该问题。</span><span class="sxs-lookup"><span data-stu-id="64ac2-115">If you are creating types that have such dependencies, you can work around the problem by implementing the `IDeserializationCallback` interface and the `OnDeserialization` method.</span></span>  
  
 <span data-ttu-id="64ac2-116">序列化体系结构处理扩展 <xref:System.MarshalByRefObject> 与扩展 <xref:System.Object>的类型相同的对象类型。</span><span class="sxs-lookup"><span data-stu-id="64ac2-116">The serialization architecture handles object types that extend <xref:System.MarshalByRefObject> the same as types that extend <xref:System.Object>.</span></span> <span data-ttu-id="64ac2-117">这些类型可以用 <xref:System.SerializableAttribute> 进行标记，并将 <xref:System.Runtime.Serialization.ISerializable> 接口实现为任何其他对象类型。</span><span class="sxs-lookup"><span data-stu-id="64ac2-117">These types can be marked with the <xref:System.SerializableAttribute> and implement the <xref:System.Runtime.Serialization.ISerializable> interface as any other object type.</span></span> <span data-ttu-id="64ac2-118">将捕获其对象状态并将其保存到流中。</span><span class="sxs-lookup"><span data-stu-id="64ac2-118">Their object state will be captured and persisted onto the stream.</span></span>  
  
 <span data-ttu-id="64ac2-119">当通过 <xref:System.Runtime.Remoting>使用这些类型时，远程处理基础结构将提供抢先于典型序列化并改为将代理序列化为 <xref:System.MarshalByRefObject>的代理项。</span><span class="sxs-lookup"><span data-stu-id="64ac2-119">When these types are being used through <xref:System.Runtime.Remoting>, the remoting infrastructure provides a surrogate that preempts typical serialization and instead serializes a proxy to the <xref:System.MarshalByRefObject>.</span></span> <span data-ttu-id="64ac2-120">代理项是了解如何序列化和反序列化特定类型的对象的帮助器。</span><span class="sxs-lookup"><span data-stu-id="64ac2-120">A surrogate is a helper that knows how to serialize and deserialize objects of a particular type.</span></span> <span data-ttu-id="64ac2-121">在大多数情况下，该代理对用户不可见，将为 <xref:System.Runtime.Remoting.ObjRef>类型。</span><span class="sxs-lookup"><span data-stu-id="64ac2-121">The proxy, invisible to the user in most cases, will be of type <xref:System.Runtime.Remoting.ObjRef>.</span></span>  
  
 <span data-ttu-id="64ac2-122">作为一种常规设计模式，将类标记为可序列化特性并将 <xref:System.MarshalByRefObject>扩展的情况很常见。</span><span class="sxs-lookup"><span data-stu-id="64ac2-122">As a general design pattern, it would be unusual for a class to be both marked with the serializable attribute and extend <xref:System.MarshalByRefObject>.</span></span> <span data-ttu-id="64ac2-123">组合这两个特征时，开发人员应仔细考虑可能的序列化和远程处理方案。</span><span class="sxs-lookup"><span data-stu-id="64ac2-123">Developers should think carefully about the possible serialization and remoting scenarios when combining these two characteristics.</span></span> <span data-ttu-id="64ac2-124">这种情况可能适用的一个示例是使用 <xref:System.IO.MemoryStream>。</span><span class="sxs-lookup"><span data-stu-id="64ac2-124">One example where this might be applicable is with a <xref:System.IO.MemoryStream>.</span></span> <span data-ttu-id="64ac2-125">尽管 <xref:System.IO.MemoryStream> （<xref:System.IO.Stream>）的基类从 <xref:System.MarshalByRefObject>进行扩展，但也可以捕获 <xref:System.IO.MemoryStream> 的状态并将其还原到。</span><span class="sxs-lookup"><span data-stu-id="64ac2-125">While the base class of <xref:System.IO.MemoryStream> (<xref:System.IO.Stream>) extends from <xref:System.MarshalByRefObject>, it is possible to capture the state of a <xref:System.IO.MemoryStream> and restore it at will.</span></span> <span data-ttu-id="64ac2-126">因此，它可能有意义，可以将此流的状态序列化为数据库，并在以后的某个时间点还原。</span><span class="sxs-lookup"><span data-stu-id="64ac2-126">It might, therefore, be meaningful to serialize the state of this stream into a database and restore it at some later point in time.</span></span> <span data-ttu-id="64ac2-127">但是，当通过远程处理使用时，将对此类型的对象进行代理。</span><span class="sxs-lookup"><span data-stu-id="64ac2-127">However, when used through remoting, an object of this type would be proxied.</span></span>  
  
 <span data-ttu-id="64ac2-128">有关扩展 <xref:System.MarshalByRefObject>的类的序列化的详细信息，请参阅 <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>。</span><span class="sxs-lookup"><span data-stu-id="64ac2-128">For more information about serialization of classes that extend <xref:System.MarshalByRefObject>, see <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>.</span></span> <span data-ttu-id="64ac2-129">有关实现 <xref:System.Runtime.Serialization.ISerializable>的详细信息，请参阅[自定义序列化](/dotnet/standard/serialization/custom-serialization)。</span><span class="sxs-lookup"><span data-stu-id="64ac2-129">For more information about implementing <xref:System.Runtime.Serialization.ISerializable>, see [Custom Serialization](/dotnet/standard/serialization/custom-serialization).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="64ac2-130">下面的代码示例演示如何使用 <xref:System.Runtime.Serialization.ISerializable> 接口为类定义自定义序列化行为。</span><span class="sxs-lookup"><span data-stu-id="64ac2-130">The following code example demonstrates the use of the <xref:System.Runtime.Serialization.ISerializable> interface to define custom serialization behavior for a class.</span></span>  
  
 [!code-cpp[ISerializable Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ISerializable Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[ISerializable Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[ISerializable Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="64ac2-131">实现此接口可使对象参与其自己的序列化和反序列化。</span><span class="sxs-lookup"><span data-stu-id="64ac2-131">Implement this interface to allow an object to take part in its own serialization and deserialization.</span></span></para></block>
    <altmember cref="T:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector" />
    <related type="Article" href="/dotnet/standard/serialization/xml-and-soap-serialization"><span data-ttu-id="64ac2-132">XML 和 SOAP 序列化</span><span class="sxs-lookup"><span data-stu-id="64ac2-132">XML and SOAP Serialization</span></span></related>
    <related type="Article" href="/dotnet/standard/serialization/custom-serialization"><span data-ttu-id="64ac2-133">自定义序列化</span><span class="sxs-lookup"><span data-stu-id="64ac2-133">Custom serialization</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="iSerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="64ac2-134">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span><span class="sxs-lookup"><span data-stu-id="64ac2-134">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</span></span></param>
        <param name="context"><span data-ttu-id="64ac2-135">此序列化的目标（请参阅 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。</span><span class="sxs-lookup"><span data-stu-id="64ac2-135">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</span></span></param>
        <summary><span data-ttu-id="64ac2-136">使用序列化目标对象所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span><span class="sxs-lookup"><span data-stu-id="64ac2-136">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data needed to serialize the target object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="64ac2-137">格式化程序将自动跟踪和序列化 <xref:System.Runtime.Serialization.SerializationInfo> 中包含的所有对象。</span><span class="sxs-lookup"><span data-stu-id="64ac2-137">Any objects that are included in the <xref:System.Runtime.Serialization.SerializationInfo> are automatically tracked and serialized by the formatter.</span></span>  
  
 <span data-ttu-id="64ac2-138">调用 <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> 的代码需要用于提供序列化服务的 <xref:System.Security.Permissions.SecurityPermission>。</span><span class="sxs-lookup"><span data-stu-id="64ac2-138">Code that calls <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> requires the <xref:System.Security.Permissions.SecurityPermission> for providing serialization services.</span></span> <span data-ttu-id="64ac2-139">关联的枚举：<xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="64ac2-139">Associated enumeration: <xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="64ac2-140">不保证在序列化过程中每个对象实例只调用一次此方法。</span><span class="sxs-lookup"><span data-stu-id="64ac2-140">It is not guaranteed that this method will be called only once per object instance during serialization.</span></span> <span data-ttu-id="64ac2-141">因此，方法应以这样一种方式实现：无论调用多少次，方法的行为都是相同的。</span><span class="sxs-lookup"><span data-stu-id="64ac2-141">Therefore, the method should be implemented in such a way that its behavior will be the same regardless of the number of times it is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="64ac2-142">下面的示例使用 <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> 方法为序列化对象设置替代值。</span><span class="sxs-lookup"><span data-stu-id="64ac2-142">The following example uses the <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> method to set alternate values for a serialized object.</span></span> <span data-ttu-id="64ac2-143">序列化对象时，该代码使用 <xref:System.Runtime.Serialization.SerializationInfo> 类的 <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> 方法来存储替换值。</span><span class="sxs-lookup"><span data-stu-id="64ac2-143">The code uses the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> method of the <xref:System.Runtime.Serialization.SerializationInfo> class to store the alternate values when the object is serialized.</span></span> <span data-ttu-id="64ac2-144">相反，在反序列化期间调用 `Person` 类的构造函数时，将使用 <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> 方法检索 alternatve 值并将其重新分配给对象的字段。</span><span class="sxs-lookup"><span data-stu-id="64ac2-144">Conversely, when the constructor of the `Person` class is called during deserialization, the alternatve values are retrieved using the <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> method and reassigned to the object's fields.</span></span>  
  
 [!code-csharp[ISerializable_GetObjectData#0](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable_GetObjectData/cs/ISerializable_GetObjectData.cs#0)]
 [!code-vb[ISerializable_GetObjectData#0](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable_GetObjectData/vb/ISerializable_GetObjectData.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="64ac2-145">调用方没有所要求的权限。</span><span class="sxs-lookup"><span data-stu-id="64ac2-145">The caller does not have the required permission.</span></span></exception>
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <related type="Article" href="/dotnet/standard/serialization/custom-serialization"><span data-ttu-id="64ac2-146">自定义序列化</span><span class="sxs-lookup"><span data-stu-id="64ac2-146">Custom serialization</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
