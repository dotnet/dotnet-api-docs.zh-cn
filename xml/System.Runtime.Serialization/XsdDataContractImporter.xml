<Type Name="XsdDataContractImporter" FullName="System.Runtime.Serialization.XsdDataContractImporter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a549c6fe6287e9fd56e22b85a70e1d1d446a379c" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="86328196" /></Metadata><TypeSignature Language="C#" Value="public class XsdDataContractImporter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XsdDataContractImporter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.XsdDataContractImporter" />
  <TypeSignature Language="VB.NET" Value="Public Class XsdDataContractImporter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XsdDataContractImporter" />
  <TypeSignature Language="F#" Value="type XsdDataContractImporter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>用于将一组 XML 架构文件 (.xsd) 转换为公共语言运行库 (CLR) 类型。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果所创建的 Web 服务必须与现有 Web 服务交互操作，或者要从 XML 架构创建数据协定类型，请使用 <xref:System.Runtime.Serialization.XsdDataContractImporter>。 <xref:System.Runtime.Serialization.XsdDataContractImporter> 能够转换一组 XML 架构，并且创建用所选编程语言表示数据协定的 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 类型。 若要创建代码，请使用 <xref:System.CodeDom> 命名空间中的类。  
  
 反过来，在已创建的 Web 服务包含由 CLR 类型表示的数据时，以及在需要为其他 Web 服务将使用的每个数据类型导出 XML 架构时，请使用 <xref:System.Runtime.Serialization.XsdDataContractExporter> 类。 也就是说，<xref:System.Runtime.Serialization.XsdDataContractExporter> 能够将一组 CLR 类型转换成一组 XML 架构。  
  
> [!NOTE]
>  若要在设计时从 XML 架构生成 CLR 类型，请使用 " [)  ( ](/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe)"。 若要从 XSD 文件生成代码，请使用 `/dataContractOnly` 工具的开关。 此外，如果需要对进程进行更多控制或者需要以编程方式执行此操作，还可以使用 <xref:System.Runtime.Serialization.XsdDataContractImporter>。  
  
   
  
## Examples  
 下面的示例创建了一个 <xref:System.Xml.Schema.XmlSchemaSet>，并调用 <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> 方法来创建一个 <xref:System.CodeDom.CodeCompileUnit>。 然后，使用 <xref:System.CodeDom.CodeCompileUnit> 来创建 Visual C# 和 Visual Basic 代码文件。  
  
 [!code-csharp[XsdDataContractImporter#0](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#0)]
 [!code-vb[XsdDataContractImporter#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#0)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
    <related type="Article" href="/dotnet/framework/wcf/feature-details/using-data-contracts">使用数据协定</related>
    <related type="Article" href="/dotnet/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer">数据协定序列化程序支持的类型</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractImporter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractImporter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XsdDataContractImporter (System.CodeDom.CodeCompileUnit codeCompileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.CodeDom.CodeCompileUnit codeCompileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (codeCompileUnit As CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XsdDataContractImporter(System::CodeDom::CodeCompileUnit ^ codeCompileUnit);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Serialization.XsdDataContractImporter : System.CodeDom.CodeCompileUnit -&gt; System.Runtime.Serialization.XsdDataContractImporter" Usage="new System.Runtime.Serialization.XsdDataContractImporter codeCompileUnit" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="codeCompileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="codeCompileUnit">将用于存储代码的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
        <summary>使用将用于生成 CLR 代码的 <see cref="T:System.Runtime.Serialization.XsdDataContractImporter" /> 初始化 <see cref="T:System.CodeDom.CodeCompileUnit" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此构造函数将更多代码添加到已生成的 <xref:System.CodeDom.CodeCompileUnit> 中。  
  
   
  
## Examples  
 下面的示例创建了一个 <xref:System.Xml.Schema.XmlSchemaSet>，并调用 <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> 方法来创建一个 <xref:System.CodeDom.CodeCompileUnit>。 然后，使用 <xref:System.CodeDom.CodeCompileUnit> 来创建 Visual C# 和 Visual Basic 代码文件。  
  
 [!code-csharp[XsdDataContractImporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#1)]
 [!code-vb[XsdDataContractImporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CanImport">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取一个值，该值指示架构是否可以转换为 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关可导入的类型的详细信息，请参阅 [数据协定序列化程序支持的类型](/dotnet/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet -&gt; bool" Usage="xsdDataContractImporter.CanImport schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，它包含要转换的架构。</param>
        <summary>获取一个值，该值指示 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所包含的架构是否可以转换为 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
        <returns>如果架构可以转换为数据协定类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例调用 <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> 方法来确定是否可以生成 <xref:System.CodeDom.CodeCompileUnit>。  
  
 [!code-csharp[XsdDataContractImporter#2](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#2)]
 [!code-vb[XsdDataContractImporter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="schemas" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">导入操作所涉及的数据协定无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Collections.Generic.ICollection`1&lt;class System.Xml.XmlQualifiedName&gt; typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, typeNames As ICollection(Of XmlQualifiedName)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Collections::Generic::ICollection&lt;System::Xml::XmlQualifiedName ^&gt; ^ typeNames);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, typeNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeNames" Type="System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt;" />
      </Parameters>
      <Docs>
        <param name="schemas">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，它包含要转换的架构。</param>
        <param name="typeNames">一个类型为 <see cref="T:System.Collections.Generic.ICollection`1" /> 的 <see cref="T:System.Xml.XmlQualifiedName" />，它表示要导入的一组架构类型。</param>
        <summary>获取一个值，该值指示 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中包含的一组指定类型是否可以转换为生成到 <see cref="T:System.CodeDom.CodeCompileUnit" /> 中的 CLR 类型。</summary>
        <returns>如果架构可以转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="schemas" /> 或 <paramref name="typeNames" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">导入操作所涉及的数据协定无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, element As XmlSchemaElement) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.XmlSchemaElement -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="schemas">一个要导入的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />。</param>
        <param name="element">一个要在架构集中选中的特定 <see cref="T:System.Xml.Schema.XmlSchemaElement" />。</param>
        <summary>获取一个值，该值指示 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中包含的特定架构元素是否可以导入。</summary>
        <returns>如果该元素可以导入，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法检查类型以及从该类型中引用的所有架构类型。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="schemas" /> 或 <paramref name="element" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">导入操作所涉及的数据协定无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanImport">
      <MemberSignature Language="C#" Value="public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanImport(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanImport (schemas As XmlSchemaSet, typeName As XmlQualifiedName) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanImport(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.CanImport : System.Xml.Schema.XmlSchemaSet * System.Xml.XmlQualifiedName -&gt; bool" Usage="xsdDataContractImporter.CanImport (schemas, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="schemas">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，它包含架构表示。</param>
        <param name="typeName">一个类型为 <see cref="T:System.Collections.IList" /> 的 <see cref="T:System.Xml.XmlQualifiedName" />，它指定需要从 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 导入的架构类型的名称。</param>
        <summary>获取一个值，该值指示 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中所包含的架构是否可以转换为 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
        <returns>如果架构可以转换为数据协定类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关可导入的类型的详细信息，请参阅 [数据协定序列化程序支持的类型](/dotnet/framework/wcf/feature-details/types-supported-by-the-data-contract-serializer)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="schemas" /> 或 <paramref name="typeName" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">导入操作所涉及的数据协定无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="CodeCompileUnit">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeCompileUnit CodeCompileUnit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeCompileUnit CodeCompileUnit" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeCompileUnit As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeCompileUnit ^ CodeCompileUnit { System::CodeDom::CodeCompileUnit ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeCompileUnit : System.CodeDom.CodeCompileUnit" Usage="System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个用于存储已生成的 CLR 类型的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
        <value>一个 <see cref="T:System.CodeDom.CodeCompileUnit" />，用于存储已生成的 CLR 类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在使用 <xref:System.Runtime.Serialization.XsdDataContractImporter> 导入架构后，调用此属性来访问存储了所有已生成代码的 <xref:System.CodeDom.CodeCompileUnit>。  
  
   
  
## Examples  
 下面的示例创建了一个 <xref:System.CodeDom.CodeCompileUnit>。 然后，使用 <xref:System.CodeDom.CodeCompileUnit> 来创建 Visual C# 和 Visual Basic 代码文件。  
  
 [!code-csharp[XsdDataContractImporter#1](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#1)]
 [!code-vb[XsdDataContractImporter#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.Runtime.Serialization.XsdDataContractImporter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCodeTypeReference">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回指定元素的 <see cref="T:System.CodeDom.CodeTypeReference" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCodeTypeReference">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.CodeTypeReference GetCodeTypeReference(class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCodeTypeReference (typeName As XmlQualifiedName) As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeReference ^ GetCodeTypeReference(System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetCodeTypeReference : System.Xml.XmlQualifiedName -&gt; System.CodeDom.CodeTypeReference" Usage="xsdDataContractImporter.GetCodeTypeReference typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="typeName">指定要查找的架构类型的 <see cref="T:System.Xml.XmlQualifiedName" />。</param>
        <summary>返回对 CLR 类型的 <see cref="T:System.CodeDom.CodeTypeReference" /> 引用，该 CLR 类型是为具有指定 <see cref="T:System.Xml.XmlQualifiedName" /> 的架构类型生成的。</summary>
        <returns>对 CLR 类型的 <see cref="T:System.CodeDom.CodeTypeReference" /> 引用，该 CLR 类型是为具有指定 <paramref name="typeName" /> 的架构类型生成的。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在调用 <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> 方法后，请使用此方法查找对已生成的 CLR 类型的引用。 <xref:System.CodeDom.CodeTypeReference> 包含已生成的类型的名称，并可用于在 <xref:System.CodeDom.CodeTypeDeclaration> 中查找相应的 <xref:System.CodeDom.CodeCompileUnit>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCodeTypeReference">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.CodeDom.CodeTypeReference GetCodeTypeReference(class System.Xml.XmlQualifiedName typeName, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCodeTypeReference (typeName As XmlQualifiedName, element As XmlSchemaElement) As CodeTypeReference" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::CodeDom::CodeTypeReference ^ GetCodeTypeReference(System::Xml::XmlQualifiedName ^ typeName, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.GetCodeTypeReference : System.Xml.XmlQualifiedName * System.Xml.Schema.XmlSchemaElement -&gt; System.CodeDom.CodeTypeReference" Usage="xsdDataContractImporter.GetCodeTypeReference (typeName, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReference</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="typeName">一个 <see cref="T:System.Xml.XmlQualifiedName" />，它指定要查找的架构类型的 XML 限定名称。</param>
        <param name="element">一个 <see cref="T:System.Xml.Schema.XmlSchemaElement" />，它指定 XML 架构中的元素。</param>
        <summary>返回指定的 XML 限定元素和架构元素的 <see cref="T:System.CodeDom.CodeTypeReference" />。</summary>
        <returns>一个 <see cref="T:System.CodeDom.CodeTypeReference" />，它表示为指定的架构类型生成的类型。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于有关在元素范围指定的类型的数据，需要使用架构元素。 这些数据的一个主要示例是 XSD 属性 `nillable`。 在架构中，将 `nillable` 设置为 `true` 是在包含架构元素上指定的，而 null 的概念则是在 CLR 类型 <xref:System.Nullable%601> 中表示的。 传入该元素的目的是使此导入程序可以查找元素级信息并相应地返回正确的类型引用。  
  
 导入 WSDL 时，每个参数都会分别导入，因此需要分别传入参数元素。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownTypeReferences">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt; GetKnownTypeReferences (System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.CodeDom.CodeTypeReference&gt; GetKnownTypeReferences(class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetKnownTypeReferences (typeName As XmlQualifiedName) As ICollection(Of CodeTypeReference)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::CodeDom::CodeTypeReference ^&gt; ^ GetKnownTypeReferences(System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GetKnownTypeReferences : System.Xml.XmlQualifiedName -&gt; System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt;" Usage="xsdDataContractImporter.GetKnownTypeReferences typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.CodeDom.CodeTypeReference&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="typeName">一个 <see cref="T:System.Xml.XmlQualifiedName" />，它表示要为其查找已知类型的架构类型。</param>
        <summary>返回一个 <see cref="T:System.CodeDom.CodeTypeReference" /> 对象列表，这些对象表示在为指定架构类型生成代码时生成的已知类型。</summary>
        <returns>一个 <see cref="T:System.Collections.Generic.IList`1" /> 类型的 <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在为架构类型生成 CLR 类型时，还会为存在于架构中的所有派生类型生成已知类型。 在许多情况下，使用属性将这些已知类型添加到生成的代码中。  (示例，请参阅 <xref:System.Runtime.Serialization.KnownTypeAttribute> 类。 ) 但是，对于顶级类型，需要有一种方法来返回所生成的已知类型集。 此方法返回为特定架构类型生成的已知类型的 <xref:System.CodeDom.CodeTypeReference>。  
  
 有关详细信息，请参阅 [数据协定已知类型](/dotnet/framework/wcf/feature-details/data-contract-known-types)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.KnownTypeAttribute" />
        <related type="Article" href="/dotnet/framework/wcf/feature-details/data-contract-known-types">数据协定已知类型</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Import">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将一组 XML 架构转换为用于生成 CLR 代码的 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet -&gt; unit" Usage="xsdDataContractImporter.Import schemas" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
      </Parameters>
      <Docs>
        <param name="schemas">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，它包含要为其生成 CLR 类型的架构表示。</param>
        <summary>将 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中包含的一组指定 XML 架构转换为 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例使用 <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> 方法测试是否可以导入一组架构。 如果 <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> 方法返回 `true`，则这些代码会调用 <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> 方法。  
  
 [!code-csharp[XsdDataContractImporter#2](~/samples/snippets/csharp/VS_Snippets_CFX/xsddatacontractimporter/cs/xsddatacontractimporterexample.cs#2)]
 [!code-vb[XsdDataContractImporter#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/xsddatacontractimporter/vb/xsddatacontractimporterexample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="schemas" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; typeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Collections.Generic.ICollection`1&lt;class System.Xml.XmlQualifiedName&gt; typeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet, typeNames As ICollection(Of XmlQualifiedName))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Collections::Generic::ICollection&lt;System::Xml::XmlQualifiedName ^&gt; ^ typeNames);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt; -&gt; unit" Usage="xsdDataContractImporter.Import (schemas, typeNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeNames" Type="System.Collections.Generic.ICollection&lt;System.Xml.XmlQualifiedName&gt;" />
      </Parameters>
      <Docs>
        <param name="schemas">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，它包含架构表示。</param>
        <param name="typeNames">表示要导入的一组架构类型的类型为 <see cref="T:System.Xml.XmlQualifiedName" /> 的 <see cref="T:System.Collections.Generic.ICollection`1" />。</param>
        <summary>将 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中包含的一组指定架构类型转换为生成到 <see cref="T:System.CodeDom.CodeCompileUnit" /> 中的 CLR 类型。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public System.Xml.XmlQualifiedName Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlQualifiedName Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.Schema.XmlSchemaElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)" />
      <MemberSignature Language="VB.NET" Value="Public Function Import (schemas As XmlSchemaSet, element As XmlSchemaElement) As XmlQualifiedName" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlQualifiedName ^ Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::Schema::XmlSchemaElement ^ element);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Xml.Schema.XmlSchemaElement -&gt; System.Xml.XmlQualifiedName" Usage="xsdDataContractImporter.Import (schemas, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlQualifiedName</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="element" Type="System.Xml.Schema.XmlSchemaElement" />
      </Parameters>
      <Docs>
        <param name="schemas">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，它包含要转换的架构。</param>
        <param name="element">一个 <see cref="T:System.Xml.Schema.XmlSchemaElement" />，它表示要转换的特定架构元素。</param>
        <summary>将指定的 XML 架构集中的指定架构元素转换为 <see cref="T:System.CodeDom.CodeCompileUnit" />，并返回用于表示指定元素的数据协定名称的 <see cref="T:System.Xml.XmlQualifiedName" />。</summary>
        <returns>一个 <see cref="T:System.Xml.XmlQualifiedName" />，它表示指定的元素。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="schemas" /> 或 <paramref name="element" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Import(class System.Xml.Schema.XmlSchemaSet schemas, class System.Xml.XmlQualifiedName typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Import (schemas As XmlSchemaSet, typeName As XmlQualifiedName)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Import(System::Xml::Schema::XmlSchemaSet ^ schemas, System::Xml::XmlQualifiedName ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.Import : System.Xml.Schema.XmlSchemaSet * System.Xml.XmlQualifiedName -&gt; unit" Usage="xsdDataContractImporter.Import (schemas, typeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemas" Type="System.Xml.Schema.XmlSchemaSet" />
        <Parameter Name="typeName" Type="System.Xml.XmlQualifiedName" />
      </Parameters>
      <Docs>
        <param name="schemas">一个 <see cref="T:System.Xml.Schema.XmlSchemaSet" />，它包含架构表示。</param>
        <param name="typeName">一个 <see cref="T:System.Xml.XmlQualifiedName" />，它表示要导入的特定架构类型。</param>
        <summary>将 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 中包含的指定 XML 架构类型转换为 <see cref="T:System.CodeDom.CodeCompileUnit" />。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="schemas" /> 或 <paramref name="typeName" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Runtime.Serialization.ImportOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.Serialization.ImportOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.XsdDataContractImporter.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As ImportOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::Serialization::ImportOptions ^ Options { System::Runtime::Serialization::ImportOptions ^ get(); void set(System::Runtime::Serialization::ImportOptions ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Runtime.Serialization.ImportOptions with get, set" Usage="System.Runtime.Serialization.XsdDataContractImporter.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Serialization.ImportOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个 <see cref="T:System.Runtime.Serialization.ImportOptions" />，它包含导入操作的可设置选项。</summary>
        <value>一个 <see cref="T:System.Runtime.Serialization.ImportOptions" />，它包含可设置的选项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Runtime.Serialization.ImportOptions> 类自定义在架构导入期间生成 CLR 类型的方式。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.XsdDataContractExporter" />
        <altmember cref="T:System.Runtime.Serialization.ImportOptions" />
      </Docs>
    </Member>
  </Members>
</Type>
