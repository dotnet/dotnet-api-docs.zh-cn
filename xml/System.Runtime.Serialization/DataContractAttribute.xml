<Type Name="DataContractAttribute" FullName="System.Runtime.Serialization.DataContractAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4e21ba926656b719c3412cc2e0b180b7352d691d" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86754945" /></Metadata><TypeSignature Language="C#" Value="public sealed class DataContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.DataContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DataContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataContractAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type DataContractAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Runtime.Serialization" FromVersion="4.0.0.0" To="System.Runtime.Serialization.Primitives" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime.Serialization.Primitives" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Enum | System.AttributeTargets.Struct, AllowMultiple=false, Inherited=false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Enum | System.AttributeTargets.Struct, AllowMultiple=false, Inherited=false)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指定该类型要定义或实现一个数据协定，并可由序列化程序（如 <see cref="T:System.Runtime.Serialization.DataContractSerializer" />）进行序列化。 若要使其类型可序列化，类型作者必须为其类型定义数据协定。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将 <xref:System.Runtime.Serialization.DataContractAttribute> 属性应用于由 <xref:System.Runtime.Serialization.DataContractSerializer> 执行的序列化和反序列化操作中所使用的类型（类、结构或枚举）。 如果使用 Windows Communication Foundation (WCF) 基础结构发送或接收消息，还应将应用于 <xref:System.Runtime.Serialization.DataContractAttribute> 任何保存和操作在消息中发送的数据的类。 有关数据协定的详细信息，请参阅 [使用数据协定](/dotnet/framework/wcf/feature-details/using-data-contracts)。  
  
 此外，还必须将 <xref:System.Runtime.Serialization.DataMemberAttribute> 应用于任何保存您要序列化的值的字段、属性或事件。 通过应用 <xref:System.Runtime.Serialization.DataContractAttribute>，可以显式启用 <xref:System.Runtime.Serialization.DataContractSerializer> 来序列化和反序列化数据。  
  
> [!CAUTION]
>  可将 <xref:System.Runtime.Serialization.DataMemberAttribute> 应用于私有字段。 请注意，字段（即使是私有字段）所返回的数据将被序列化和反序列化，因此恶意用户或进程可以查看或截获这些数据。  
  
 有关数据协定的详细信息，请参阅 [使用数据协定](/dotnet/framework/wcf/feature-details/using-data-contracts)中列出的主题。  
  
## <a name="data-contracts"></a>数据协定  
 *数据协定*是一组字段的抽象说明，其中每个字段都具有名称和数据类型。 数据协定存在于任何单个实现的外部，以使不同平台上的服务可以交互操作。 只要在服务之间传递的数据符合同一协定，这些数据就可以由所有服务进行处理。 此处理也称为 *松耦合系统*。 此外，数据协定还与接口类似，因为它指定了为使数据可由应用程序进行处理而必须使用的传送方式。 例如，数据协定可以定义一个名为“Person”的数据类型，它有两个文本字段，分别名为“FirstName”和“LastName”。 若要创建数据协定，请将 <xref:System.Runtime.Serialization.DataContractAttribute> 应用于类并将 <xref:System.Runtime.Serialization.DataMemberAttribute> 应用于所有必须序列化的字段或属性。 序列化后，数据将符合隐式内置到类型中的数据协定。  
  
> [!NOTE]
>  在其继承行为方面，数据协定明显不同于实际接口。 接口由任何派生类型继承。 在将 <xref:System.Runtime.Serialization.DataContractAttribute> 应用于基类时，派生类型不会继承属性或行为。 但是，如果派生类型具有数据协定，则基类的数据成员将被序列化。 不过，若要使派生类中的新成员可序列化，必须向这些成员应用 <xref:System.Runtime.Serialization.DataMemberAttribute>。  
  
## <a name="xml-schema-documents-and-the-svcutil-tool"></a>XML 架构文档和 SvcUtil 工具  
 如果要与其他服务交换数据，则必须描述数据协定。 对于 <xref:System.Runtime.Serialization.DataContractSerializer> 的当前版本，可使用 XML 架构来定义数据协定。  (可以使用其他形式的元数据/说明来实现相同的目的。 ) 若要从应用程序创建 XML 架构，请使用 **/dconly**命令行选项[ ( # A0) ](/dotnet/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe) 。 如果该工具的输入为程序集，则默认情况下该工具会生成一组 XML 架构，这些架构定义了该程序集中包含的所有数据协定类型。 反过来，还可使用 Svcutil.exe 工具创建符合以下 XML 架构的需求的 Visual Basic 或 C# 类定义：XML 架构使用可由数据协定表示的构造。 在这种情况下，不需要 **/dconly** 命令行选项。  
  
 如果 Svcutil.exe 工具的输入为 XML 架构，则默认情况下该工具会创建一组类。 如果对这些类进行检查，您会发现 <xref:System.Runtime.Serialization.DataContractAttribute> 已经应用。 可以使用这些类创建一个新的应用程序，用来处理必须与其他服务交换的数据。  
  
 你还可以针对返回 Web Services 描述语言 (WSDL) 文档的终结点运行该工具，以自动生成用于创建 Windows Communication Foundation (WCF) 客户端的代码和配置。 所生成的代码包含带有 <xref:System.Runtime.Serialization.DataContractAttribute> 标记的类型。  
  
## <a name="reusing-existing-types"></a>重用现有类型  
 数据协定具有两个基本要求：一个稳定的名称和一个成员列表。 该稳定名称由该协定的命名空间统一资源标识符 (URI) 和本地名称组成。 默认情况下，当你将应用 <xref:System.Runtime.Serialization.DataContractAttribute> 到类时，它会将类名用作本地名称，类的命名空间 (以 `"http://schemas.datacontract.org/2004/07/"`) 作为命名空间 URI 的前缀。 可通过设置 <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> 和 <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> 属性来重写这些默认值。 此外，还可通过将 <xref:System.Runtime.Serialization.ContractNamespaceAttribute> 应用于命名空间来更改命名空间。 当现有类型能够完全根据您的需要处理数据，但其命名空间和类名与数据协定不同时，请使用此功能。 通过重写默认值，可以重用现有类型并使序列化数据符合数据协定。  
  
> [!NOTE]
>  在任意代码中，都可以用 `DataContract` 一词来代替较长的 <xref:System.Runtime.Serialization.DataContractAttribute>。  
  
## <a name="versioning"></a>版本控制  
 数据协定还可以与其自身的后续版本兼容。 也就是说，当协定的后续版本包含额外数据时，已存储并返回给发送方的数据将保持不变。 为此，应实现 <xref:System.Runtime.Serialization.IExtensibleDataObject> 接口。  
  
 有关版本控制的详细信息，请参阅 [数据协定版本控制](/dotnet/framework/wcf/feature-details/data-contract-versioning)。  
  
   
  
## Examples  
 下面的示例序列化和反序列化了一个名为 `Person` 的类，该类已应用 <xref:System.Runtime.Serialization.DataContractAttribute>。 请注意，<xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> 和 <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> 属性已设置为对默认设置进行重写的值。  
  
 [!code-csharp[DataContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/datacontractattribute/cs/overview.cs#1)]
 [!code-vb[DataContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/datacontractattribute/vb/overview.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.Serialization.IExtensibleDataObject" />
    <altmember cref="T:System.Runtime.Serialization.ExtensionDataObject" />
    <altmember cref="T:System.Runtime.Serialization.DataContractSerializer" />
    <altmember cref="T:System.Runtime.Serialization.DataMemberAttribute" />
    <altmember cref="T:System.Runtime.Serialization.ISerializable" />
    <altmember cref="T:System.Runtime.Serialization.KnownTypeAttribute" />
    <related type="Article" href="/dotnet/framework/wcf/feature-details/using-data-contracts">使用数据协定</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataContractAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.DataContractAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataContractAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameSetExplicitly">
      <MemberSignature Language="C#" Value="public bool IsNameSetExplicitly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameSetExplicitly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsNameSetExplicitly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNameSetExplicitly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNameSetExplicitly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNameSetExplicitly : bool" Usage="System.Runtime.Serialization.DataContractAttribute.IsNameSetExplicitly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="P:System.Runtime.Serialization.DataContractAttribute.Name" /> 是否已显式设置。</summary>
        <value><see langword="true" /> 如果已显式设置名称，则为;否则为 <see langword="false" /> 。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNamespaceSetExplicitly">
      <MemberSignature Language="C#" Value="public bool IsNamespaceSetExplicitly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNamespaceSetExplicitly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsNamespaceSetExplicitly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNamespaceSetExplicitly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNamespaceSetExplicitly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNamespaceSetExplicitly : bool" Usage="System.Runtime.Serialization.DataContractAttribute.IsNamespaceSetExplicitly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="P:System.Runtime.Serialization.DataContractAttribute.Namespace" /> 是否已显式设置。</summary>
        <value><see langword="true" /> 如果已显式设置命名空间，则为; 否则为。否则为 <see langword="false" /> 。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public bool IsReference { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReference" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsReference" />
      <MemberSignature Language="VB.NET" Value="Public Property IsReference As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReference { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsReference : bool with get, set" Usage="System.Runtime.Serialization.DataContractAttribute.IsReference" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否保留对象引用数据。</summary>
        <value>如果使用标准 XML 保留对象引用数据，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 `IsReference` 属性来指示 <xref:System.Runtime.Serialization.DataContractSerializer> 插入保留对象引用信息的 XML 构造。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences" />
      </Docs>
    </Member>
    <Member MemberName="IsReferenceSetExplicitly">
      <MemberSignature Language="C#" Value="public bool IsReferenceSetExplicitly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReferenceSetExplicitly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.IsReferenceSetExplicitly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReferenceSetExplicitly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReferenceSetExplicitly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReferenceSetExplicitly : bool" Usage="System.Runtime.Serialization.DataContractAttribute.IsReferenceSetExplicitly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="P:System.Runtime.Serialization.DataContractAttribute.IsReference" /> 是否已显式设置。</summary>
        <value>如果已显式设置引用，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Runtime.Serialization.DataContractAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置类型的数据协定的名称。</summary>
        <value>数据协定的本地名称。 默认值是应用了该属性的类的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> 属性用于为数据协定指定名称，该名称也将成为 XML 架构中类型的名称。 有关详细信息，请参阅 [数据协定名称](/dotnet/framework/wcf/feature-details/data-contract-names)。  
  
 默认情况下，数据协定的名称是应用了 <xref:System.Runtime.Serialization.DataContractAttribute> 的类型的名称。 不过，可能出于某些原因更改此默认名称。 其中一个原因就是使现有类型可以处理必须符合现有数据协定的数据。 例如，有一个名为 `Person` 的类型，但包含在某个 XML 架构中的数据协定要求该名称为 `Customer`。 可通过将该属性值设置为 `Customer` 来满足该协定。  
  
 另一个原因是允许生成不能作为类型名的名称。 例如，如果数据协定需要一个不允许作为类型名的名称，则将该属性值设置为这一不允许使用的名称。 例如，不允许使用字符串“$value”作为类型名，但允许使用它作为 <xref:System.Runtime.Serialization.DataContractAttribute.Name%2A> 属性值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Serialization.DataContractAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Runtime.Serialization.DataContractAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置类型的数据协定的命名空间。</summary>
        <value>协定的命名空间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果类型返回的数据必须符合特定数据协定，请使用此属性来指定特定的命名空间。  
  
> [!TIP]
>  为了成功传送数据，数据协定中的数据名必须与客户端和服务器中的数据名保持一致。 默认情况下，Visual Basic 项目将前缀添加到 (名为 "根命名空间" 的每个文件中定义的命名空间，该命名空间按项目) 命名。 添加此前缀会造成相同类型的客户端命名空间和服务器命名空间不相同。 解决方法是将属性设置 <xref:System.Runtime.Serialization.DataContractAttribute.Namespace%2A> 为 ""，或在此属性中显式设置数据协定命名空间。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
