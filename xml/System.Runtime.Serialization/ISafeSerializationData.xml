<Type Name="ISafeSerializationData" FullName="System.Runtime.Serialization.ISafeSerializationData">
  <Metadata><Meta Name="ms.openlocfilehash" Value="35a5d1b0f546558f5bcf1e33775c20cb1ba76bbc" /><Meta Name="ms.sourcegitcommit" Value="a8ca33e500a87229bed50d12e09b1347df519648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/09/2020" /><Meta Name="ms.locfileid" Value="91921559" /></Metadata><TypeSignature Language="C#" Value="public interface ISafeSerializationData" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISafeSerializationData" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.ISafeSerializationData" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISafeSerializationData" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISafeSerializationData" />
  <TypeSignature Language="F#" Value="type ISafeSerializationData = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Docs>
    <summary>启用安全透明的代码中的自定义异常数据的序列化。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在以前的版本 to.NET Framework 4.0 中，使用方法完成了安全透明代码中的自定义用户数据序列化 <xref:System.Exception.GetObjectData%2A> 。 从 .NET Framework 4.0 开始，该方法用特性标记， <xref:System.Security.SecurityCriticalAttribute> 这会阻止在安全透明代码中执行。 若要解决此问题，请实现 <xref:System.Runtime.Serialization.ISafeSerializationData> 接口并添加自定义数据，如以下示例中所示。  
  
 <xref:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization%2A>序列化后调用方法，并使用 <xref:System.Runtime.Serialization.SafeSerializationEventArgs> 来还原自定义数据。  
  
   
  
## Examples  
 下面的示例包含 <xref:System.Runtime.Serialization.ISafeSerializationData> 用于存储序列化的自定义数据的接口的实现。  
  
 [!code-csharp[ISafeSerializationData#1](~/samples/snippets/csharp/VS_Snippets_CFX/isafeserializationdata/cs/source.cs#1)]
 [!code-vb[ISafeSerializationData#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/isafeserializationdata/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
  </Docs>
  <Members>
    <Member MemberName="CompleteDeserialization">
      <MemberSignature Language="C#" Value="public void CompleteDeserialization (object deserialized);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CompleteDeserialization(object deserialized) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.ISafeSerializationData.CompleteDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CompleteDeserialization (deserialized As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CompleteDeserialization(System::Object ^ deserialized);" />
      <MemberSignature Language="F#" Value="abstract member CompleteDeserialization : obj -&gt; unit" Usage="iSafeSerializationData.CompleteDeserialization deserialized" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deserialized" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="deserialized">包含实例状态的对象。</param>
        <summary>方法在取消序列化实例之前被调用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 状态对象存储在类的实现中定义的私有变量中 <xref:System.Runtime.Serialization.ISafeSerializationData> 。  
  
   
  
## Examples  
 下面的示例将在反序列化后还原异常的状态。  
  
 [!code-csharp[ISafeSerializationData#2](~/samples/snippets/csharp/VS_Snippets_CFX/isafeserializationdata/cs/source.cs#2)]
 [!code-vb[ISafeSerializationData#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/isafeserializationdata/vb/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
