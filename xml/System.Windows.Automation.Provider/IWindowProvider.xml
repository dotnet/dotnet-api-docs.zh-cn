<Type Name="IWindowProvider" FullName="System.Windows.Automation.Provider.IWindowProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c4a6f6d1650a5e60cb25c64dc1d5d1c039372b9a" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89970028" /></Metadata><TypeSignature Language="C#" Value="public interface IWindowProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWindowProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IWindowProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWindowProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWindowProvider" />
  <TypeSignature Language="F#" Value="type IWindowProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.InteropServices.Guid("987df77b-db06-4d77-8f8a-86a9c3bb90b9")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.Guid("987df77b-db06-4d77-8f8a-86a9c3bb90b9")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ad80d-101">公开方法和属性，以支持 UI 自动化客户端访问控件，这些控件在传统的图形用户界面 (GUI) 中提供基于窗口的重要功能。</span><span class="sxs-lookup"><span data-stu-id="ad80d-101">Exposes methods and properties to support UI Automation client access to controls that provide fundamental window-based functionality within a traditional graphical user interface (GUI).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80d-102">在必须支持控件模式的 UI 自动化提供程序上实现 <xref:System.Windows.Automation.WindowPattern> 。</span><span class="sxs-lookup"><span data-stu-id="ad80d-102">Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.WindowPattern> control pattern.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.WindowPattern" />
    <related type="Article" href="/dotnet/framework/ui-automation/ui-automation-control-patterns-overview"><span data-ttu-id="ad80d-103">UI 自动化控件模式概述</span><span class="sxs-lookup"><span data-stu-id="ad80d-103">UI Automation Control Patterns Overview</span></span></related>
    <related type="Article" href="/dotnet/framework/ui-automation/server-side-ui-automation-provider-implementation"><span data-ttu-id="ad80d-104">服务器端 UI 自动化提供程序实现</span><span class="sxs-lookup"><span data-stu-id="ad80d-104">Server-side UI Automation Provider Implementation</span></span></related>
    <related type="Article" href="/dotnet/framework/ui-automation/client-side-ui-automation-provider-implementation"><span data-ttu-id="ad80d-105">客户端 UI 自动化提供程序实现</span><span class="sxs-lookup"><span data-stu-id="ad80d-105">Client-side UI Automation Provider Implementation</span></span></related>
    <related type="Article" href="/dotnet/framework/ui-automation/support-control-patterns-in-a-ui-automation-provider"><span data-ttu-id="ad80d-106">在 UI 自动化提供程序中支持控件模式</span><span class="sxs-lookup"><span data-stu-id="ad80d-106">Support Control Patterns in a UI Automation Provider</span></span></related>
    <related type="Article" href="/dotnet/framework/ui-automation/implementing-the-ui-automation-window-control-pattern"><span data-ttu-id="ad80d-107">实现 UI 自动化 Window 控件模式</span><span class="sxs-lookup"><span data-stu-id="ad80d-107">Implementing the UI Automation Window Control Pattern</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="abstract member Close : unit -&gt; unit" Usage="iWindowProvider.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ad80d-108">尝试关闭窗口。</span><span class="sxs-lookup"><span data-stu-id="ad80d-108">Attempts to close the window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80d-109"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> 必须立即返回而不阻塞。</span><span class="sxs-lookup"><span data-stu-id="ad80d-109"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> must return immediately without blocking.</span></span>  
  
 <span data-ttu-id="ad80d-110"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> 引发 <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> 事件。</span><span class="sxs-lookup"><span data-stu-id="ad80d-110"><xref:System.Windows.Automation.Provider.IWindowProvider.Close%2A> raises the <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent> event.</span></span> <span data-ttu-id="ad80d-111">如果可能，应在控件完成其关联的操作后引发事件。</span><span class="sxs-lookup"><span data-stu-id="ad80d-111">If possible, the event should be raised after the control has completed its associated action.</span></span>  
  
 <span data-ttu-id="ad80d-112">在拆分窗格控件上调用时，此方法将关闭窗格并删除关联的拆分。</span><span class="sxs-lookup"><span data-stu-id="ad80d-112">When called on a split pane control, this method will close the pane and remove the associated split.</span></span> <span data-ttu-id="ad80d-113">此方法还可能会关闭所有其他窗格，具体取决于实现。</span><span class="sxs-lookup"><span data-stu-id="ad80d-113">This method might also close all other panes, depending on implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ad80d-114">当控件无法执行请求的操作时。</span><span class="sxs-lookup"><span data-stu-id="ad80d-114">When the control is unable to perform the requested action.</span></span></exception>
        <exception cref="T:System.Windows.Automation.ElementNotAvailableException"><span data-ttu-id="ad80d-115">当目标元素不再可用时（例如窗口已关闭）。</span><span class="sxs-lookup"><span data-stu-id="ad80d-115">When the target element is no longer available (for example, the window has closed).</span></span></exception>
        <related type="Article" href="/dotnet/framework/ui-automation/implementing-the-ui-automation-window-control-pattern"><span data-ttu-id="ad80d-116">实现 UI 自动化 Window 控件模式</span><span class="sxs-lookup"><span data-stu-id="ad80d-116">Implementing the UI Automation Window Control Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InteractionState">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.WindowInteractionState InteractionState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.WindowInteractionState InteractionState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.InteractionState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InteractionState As WindowInteractionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::WindowInteractionState InteractionState { System::Windows::Automation::WindowInteractionState get(); };" />
      <MemberSignature Language="F#" Value="member this.InteractionState : System.Windows.Automation.WindowInteractionState" Usage="System.Windows.Automation.Provider.IWindowProvider.InteractionState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.WindowInteractionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80d-117">获取窗口的交互状态。</span><span class="sxs-lookup"><span data-stu-id="ad80d-117">Gets the interaction state of the window.</span></span></summary>
        <value><span data-ttu-id="ad80d-118">控件的 <see cref="T:System.Windows.Automation.WindowInteractionState" />。</span><span class="sxs-lookup"><span data-stu-id="ad80d-118">The <see cref="T:System.Windows.Automation.WindowInteractionState" /> of the control.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/ui-automation/implementing-the-ui-automation-window-control-pattern"><span data-ttu-id="ad80d-119">实现 UI 自动化 Window 控件模式</span><span class="sxs-lookup"><span data-stu-id="ad80d-119">Implementing the UI Automation Window Control Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsModal">
      <MemberSignature Language="C#" Value="public bool IsModal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsModal" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.IsModal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsModal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsModal { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsModal : bool" Usage="System.Windows.Automation.Provider.IWindowProvider.IsModal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80d-120">获取一个值，该值指定窗口是否为模式窗口。</span><span class="sxs-lookup"><span data-stu-id="ad80d-120">Gets a value that specifies whether the window is modal.</span></span></summary>
        <value><span data-ttu-id="ad80d-121">如果窗口为模式窗口，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad80d-121"><see langword="true" /> if the window is modal; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/ui-automation/implementing-the-ui-automation-window-control-pattern"><span data-ttu-id="ad80d-122">实现 UI 自动化 Window 控件模式</span><span class="sxs-lookup"><span data-stu-id="ad80d-122">Implementing the UI Automation Window Control Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsTopmost">
      <MemberSignature Language="C#" Value="public bool IsTopmost { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTopmost" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.IsTopmost" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTopmost As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTopmost { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTopmost : bool" Usage="System.Windows.Automation.Provider.IWindowProvider.IsTopmost" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80d-123">获取一个值，该值指定该窗口是否是按 z 顺序的最顶端元素。</span><span class="sxs-lookup"><span data-stu-id="ad80d-123">Gets a value that specifies whether the window is the topmost element in the z-order.</span></span></summary>
        <value><span data-ttu-id="ad80d-124">如果该窗口为最顶端元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad80d-124"><see langword="true" /> if the window is topmost; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/ui-automation/implementing-the-ui-automation-window-control-pattern"><span data-ttu-id="ad80d-125">实现 UI 自动化 Window 控件模式</span><span class="sxs-lookup"><span data-stu-id="ad80d-125">Implementing the UI Automation Window Control Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Maximizable">
      <MemberSignature Language="C#" Value="public bool Maximizable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Maximizable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.Maximizable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Maximizable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Maximizable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Maximizable : bool" Usage="System.Windows.Automation.Provider.IWindowProvider.Maximizable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80d-126">获取一个值，该值指定窗口是否可以最大化。</span><span class="sxs-lookup"><span data-stu-id="ad80d-126">Gets a value that specifies whether the window can be maximized.</span></span></summary>
        <value><span data-ttu-id="ad80d-127">如果窗口可以最大化，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad80d-127"><see langword="true" /> if the window can be maximized; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/ui-automation/implementing-the-ui-automation-window-control-pattern"><span data-ttu-id="ad80d-128">实现 UI 自动化 Window 控件模式</span><span class="sxs-lookup"><span data-stu-id="ad80d-128">Implementing the UI Automation Window Control Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Minimizable">
      <MemberSignature Language="C#" Value="public bool Minimizable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Minimizable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.Minimizable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Minimizable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Minimizable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Minimizable : bool" Usage="System.Windows.Automation.Provider.IWindowProvider.Minimizable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80d-129">获取一个值，该值指定窗口是否可以最小化。</span><span class="sxs-lookup"><span data-stu-id="ad80d-129">Gets a value that specifies whether the window can be minimized.</span></span></summary>
        <value><span data-ttu-id="ad80d-130">如果窗口可以最小化，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad80d-130"><see langword="true" /> if the window can be minimized; otherwise <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/ui-automation/implementing-the-ui-automation-window-control-pattern"><span data-ttu-id="ad80d-131">实现 UI 自动化 Window 控件模式</span><span class="sxs-lookup"><span data-stu-id="ad80d-131">Implementing the UI Automation Window Control Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetVisualState">
      <MemberSignature Language="C#" Value="public void SetVisualState (System.Windows.Automation.WindowVisualState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVisualState(valuetype System.Windows.Automation.WindowVisualState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetVisualState (state As WindowVisualState)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetVisualState(System::Windows::Automation::WindowVisualState state);" />
      <MemberSignature Language="F#" Value="abstract member SetVisualState : System.Windows.Automation.WindowVisualState -&gt; unit" Usage="iWindowProvider.SetVisualState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Windows.Automation.WindowVisualState" />
      </Parameters>
      <Docs>
        <param name="state"><span data-ttu-id="ad80d-132">请求的窗口可视状态。</span><span class="sxs-lookup"><span data-stu-id="ad80d-132">The requested visual state of the window.</span></span></param>
        <summary><span data-ttu-id="ad80d-133">更改窗口的可视状态。</span><span class="sxs-lookup"><span data-stu-id="ad80d-133">Changes the visual state of the window.</span></span> <span data-ttu-id="ad80d-134">例如，将其最小化或最大化。</span><span class="sxs-lookup"><span data-stu-id="ad80d-134">For example, minimizes or maximizes it.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="ad80d-135">当控件不支持请求的行为时。</span><span class="sxs-lookup"><span data-stu-id="ad80d-135">When the control does not support the requested behavior.</span></span></exception>
        <related type="Article" href="/dotnet/framework/ui-automation/implementing-the-ui-automation-window-control-pattern"><span data-ttu-id="ad80d-136">实现 UI 自动化 Window 控件模式</span><span class="sxs-lookup"><span data-stu-id="ad80d-136">Implementing the UI Automation Window Control Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="VisualState">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.WindowVisualState VisualState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.WindowVisualState VisualState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IWindowProvider.VisualState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property VisualState As WindowVisualState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::WindowVisualState VisualState { System::Windows::Automation::WindowVisualState get(); };" />
      <MemberSignature Language="F#" Value="member this.VisualState : System.Windows.Automation.WindowVisualState" Usage="System.Windows.Automation.Provider.IWindowProvider.VisualState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.WindowVisualState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ad80d-137">获取窗口的可视状态。</span><span class="sxs-lookup"><span data-stu-id="ad80d-137">Gets the visual state of the window.</span></span></summary>
        <value><span data-ttu-id="ad80d-138">窗口的可视状态。</span><span class="sxs-lookup"><span data-stu-id="ad80d-138">The visual state of the window.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/ui-automation/implementing-the-ui-automation-window-control-pattern"><span data-ttu-id="ad80d-139">实现 UI 自动化 Window 控件模式</span><span class="sxs-lookup"><span data-stu-id="ad80d-139">Implementing the UI Automation Window Control Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WaitForInputIdle">
      <MemberSignature Language="C#" Value="public bool WaitForInputIdle (int milliseconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WaitForInputIdle(int32 milliseconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function WaitForInputIdle (milliseconds As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool WaitForInputIdle(int milliseconds);" />
      <MemberSignature Language="F#" Value="abstract member WaitForInputIdle : int -&gt; bool" Usage="iWindowProvider.WaitForInputIdle milliseconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="milliseconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="milliseconds"><span data-ttu-id="ad80d-140">等待关联进程变为空闲状态的时间（以毫秒为单位）。</span><span class="sxs-lookup"><span data-stu-id="ad80d-140">The amount of time, in milliseconds, to wait for the associated process to become idle.</span></span> <span data-ttu-id="ad80d-141">最大值为 <see cref="F:System.Int32.MaxValue" />。</span><span class="sxs-lookup"><span data-stu-id="ad80d-141">The maximum is <see cref="F:System.Int32.MaxValue" />.</span></span></param>
        <summary><span data-ttu-id="ad80d-142">在指定时间阻止或在关联进程进入空闲状态之前持续阻止调用代码。</span><span class="sxs-lookup"><span data-stu-id="ad80d-142">Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first.</span></span></summary>
        <returns><span data-ttu-id="ad80d-143">如果窗口已进入空闲状态，则为 <see langword="true" />；如果发生超时，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ad80d-143"><see langword="true" /> if the window has entered the idle state; <see langword="false" /> if the timeout occurred.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ad80d-144">此方法通常与的处理结合使用 <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent> 。</span><span class="sxs-lookup"><span data-stu-id="ad80d-144">This method is typically used in conjunction with the handling of a <xref:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent>.</span></span>  
  
 <span data-ttu-id="ad80d-145">实现依赖于基础应用程序框架;因此，此方法可能会在窗口准备好进入用户输入后返回一段时间。</span><span class="sxs-lookup"><span data-stu-id="ad80d-145">The implementation is dependent on the underlying application framework; therefore this method might return some time after the window is ready for user input.</span></span> <span data-ttu-id="ad80d-146">调用代码不应依赖此方法来确定窗口何时进入空闲状态。</span><span class="sxs-lookup"><span data-stu-id="ad80d-146">The calling code should not rely on this method to ascertain exactly when the window has become idle.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ad80d-147">当传递的参数不是有效的数字时。</span><span class="sxs-lookup"><span data-stu-id="ad80d-147">When the parameter passed in is not a valid number.</span></span></exception>
        <related type="Article" href="/dotnet/framework/ui-automation/implementing-the-ui-automation-window-control-pattern"><span data-ttu-id="ad80d-148">实现 UI 自动化 Window 控件模式</span><span class="sxs-lookup"><span data-stu-id="ad80d-148">Implementing the UI Automation Window Control Pattern</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
