<Type Name="IGridProvider" FullName="System.Windows.Automation.Provider.IGridProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d99174ef13651eb0fbb6aa60a91e8ad8f3dea0f8" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102081681" /></Metadata><TypeSignature Language="C#" Value="public interface IGridProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IGridProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IGridProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IGridProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IGridProvider" />
  <TypeSignature Language="F#" Value="type IGridProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.InteropServices.Guid("b17d6187-0907-464b-a168-0ef17a1572b1")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.Guid("b17d6187-0907-464b-a168-0ef17a1572b1")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>公开一些方法和属性，UI 自动化客户端可通过这些方法和属性访问充当某个子元素集合的容器的控件。 此元素的子级必须实现 <see cref="T:System.Windows.Automation.Provider.IGridItemProvider" />，而且必须使用键盘在可以进行遍历的一个二维逻辑坐标系统中组织（即，UI 自动化客户端可以移动到相邻控件）。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在必须支持控件模式的 UI 自动化提供程序上实现 <xref:System.Windows.Automation.GridPattern> 。  
  
 <xref:System.Windows.Automation.Provider.IGridProvider> 不会启用网格的主动操作；必须实现 <xref:System.Windows.Automation.Provider.ITransformProvider> 以启用此功能。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.GridPattern" />
    <related type="Article" href="/dotnet/framework/ui-automation/ui-automation-control-patterns-overview">UI 自动化控件模式概述</related>
    <related type="Article" href="/dotnet/framework/ui-automation/server-side-ui-automation-provider-implementation">服务器端 UI 自动化提供程序实现</related>
    <related type="Article" href="/dotnet/framework/ui-automation/client-side-ui-automation-provider-implementation">客户端 UI 自动化提供程序实现</related>
    <related type="Article" href="/dotnet/framework/ui-automation/support-control-patterns-in-a-ui-automation-provider">在 UI 自动化提供程序中支持控件模式</related>
    <related type="Article" href="/dotnet/framework/ui-automation/implementing-the-ui-automation-grid-control-pattern">实现 UI 自动化 Grid 控件模式</related>
  </Docs>
  <Members>
    <Member MemberName="ColumnCount">
      <MemberSignature Language="C#" Value="public int ColumnCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IGridProvider.ColumnCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ColumnCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ColumnCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ColumnCount : int" Usage="System.Windows.Automation.Provider.IGridProvider.ColumnCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取网格中的总列数。</summary>
        <value>网格中的总列数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 隐藏的行和列（具体取决于提供程序实现）可以在 UI 自动化树中加载，因此将反映在 <xref:System.Windows.Automation.GridPattern.GridPatternInformation.RowCount%2A> 和 <xref:System.Windows.Automation.GridPattern.GridPatternInformation.ColumnCount%2A> 属性中。 如果尚未加载隐藏的行和列，则不会对其进行计数。  
  
   
  
## Examples  
 下面的示例代码返回属性值。  
  
 [!code-csharp[UIAMiscPatternProviders_snip#102](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAMiscPatternProviders_snip/CSharp/CustomGrid.cs#102)]
 [!code-vb[UIAMiscPatternProviders_snip#102](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAMiscPatternProviders_snip/visualbasic/customgrid.vb#102)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/ui-automation/implementing-the-ui-automation-grid-control-pattern">实现 UI 自动化 Grid 控件模式</related>
      </Docs>
    </Member>
    <Member MemberName="GetItem">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Provider.IRawElementProviderSimple GetItem (int row, int column);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Automation.Provider.IRawElementProviderSimple GetItem(int32 row, int32 column) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IGridProvider.GetItem(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItem (row As Integer, column As Integer) As IRawElementProviderSimple" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Automation::Provider::IRawElementProviderSimple ^ GetItem(int row, int column);" />
      <MemberSignature Language="F#" Value="abstract member GetItem : int * int -&gt; System.Windows.Automation.Provider.IRawElementProviderSimple" Usage="iGridProvider.GetItem (row, column)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Provider.IRawElementProviderSimple</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="row" Type="System.Int32" />
        <Parameter Name="column" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="row">相关行的序号。</param>
        <param name="column">相关列的序号。</param>
        <summary>检索指定单元格的 UI 自动化提供程序。</summary>
        <returns>指定单元格的 UI 自动化提供程序。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   网格坐标从零开始，其中包含左上角 (或右上角单元格，具体取决于) 具有坐标 (0，0) 的区域设置。  
  
-   如果单元格为空，则必须仍返回 UI 自动化提供程序，以便支持 <xref:System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid%2A> 该单元格的属性。 当网格中的子元素的布局类似于未对齐的数组时，可能会出现这种情况。  
  
 ![显示未对齐布局的 Windows 资源管理器视图。](~/add/media/uia-gridpattern-ragged-array.PNG "显示未对齐布局的 Windows 资源管理器视图。")  
坐标为空的 Grid 控件的示例  
  
-   隐藏的行和列（具体取决于提供程序实现）可以在 UI 自动化树中加载，因此将反映在 <xref:System.Windows.Automation.Provider.IGridProvider.RowCount%2A> 和 <xref:System.Windows.Automation.Provider.IGridProvider.ColumnCount%2A> 属性中。 如果尚未加载隐藏的行和列，则不应对它们进行计数。  
  
   
  
## Examples  
 下面的代码是此方法的一个示例实现，该实现返回一个表示指定位置的项的对象。  
  
 [!code-csharp[UIAMiscPatternProviders_snip#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAMiscPatternProviders_snip/CSharp/CustomGrid.cs#101)]
 [!code-vb[UIAMiscPatternProviders_snip#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAMiscPatternProviders_snip/visualbasic/customgrid.vb#101)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/ui-automation/implementing-the-ui-automation-grid-control-pattern">实现 UI 自动化 Grid 控件模式</related>
      </Docs>
    </Member>
    <Member MemberName="RowCount">
      <MemberSignature Language="C#" Value="public int RowCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RowCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IGridProvider.RowCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RowCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int RowCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.RowCount : int" Usage="System.Windows.Automation.Provider.IGridProvider.RowCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取网格中的总行数。</summary>
        <value>网格中的总行数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 隐藏的行和列（具体取决于提供程序实现）可以在逻辑树中加载，因此将反映在 <xref:System.Windows.Automation.GridPattern.GridPatternInformation.RowCount%2A> 和 <xref:System.Windows.Automation.GridPattern.GridPatternInformation.ColumnCount%2A> 属性中。 如果尚未加载隐藏的行和列，则不会对其进行计数。  
  
   
  
## Examples  
 下面的示例代码返回属性值。  
  
 [!code-csharp[UIAMiscPatternProviders_snip#103](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAMiscPatternProviders_snip/CSharp/CustomGrid.cs#103)]
 [!code-vb[UIAMiscPatternProviders_snip#103](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAMiscPatternProviders_snip/visualbasic/customgrid.vb#103)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/ui-automation/implementing-the-ui-automation-grid-control-pattern">实现 UI 自动化 Grid 控件模式</related>
      </Docs>
    </Member>
  </Members>
</Type>
