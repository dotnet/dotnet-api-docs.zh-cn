<Type Name="IInvokeProvider" FullName="System.Windows.Automation.Provider.IInvokeProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="05aa1dafb944b7a4daff42f84884fc84a9eee90c" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83957601" /></Metadata><TypeSignature Language="C#" Value="public interface IInvokeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInvokeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IInvokeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInvokeProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInvokeProvider" />
  <TypeSignature Language="F#" Value="type IInvokeProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.Guid("54fcb24b-e18e-47a2-b4d3-eccbe77599a2")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>公开一些方法和属性，UI 自动化客户端可通过这些方法和属性访问启动或执行一项明确操作并且在激活后不维护状态的控件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在必须支持 <xref:System.Windows.Automation.InvokePattern> 控件模式的 UI 自动化提供程序上实现。  
  
 如果不通过另一个控件模式提供程序公开同一行为，则控件实现 <xref:System.Windows.Automation.Provider.IInvokeProvider> 。 例如，如果控件上的 <xref:System.Windows.Automation.InvokePattern.Invoke%2A> 方法与 <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> 方法或 <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> 方法执行同一操作，则控件不应实现 <xref:System.Windows.Automation.Provider.IInvokeProvider>。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.InvokePattern" />
    <related type="Article" href="/dotnet/framework/ui-automation/ui-automation-control-patterns-overview">UI 自动化控件模式概述</related>
    <related type="Article" href="/dotnet/framework/ui-automation/server-side-ui-automation-provider-implementation">服务器端 UI 自动化提供程序实现</related>
    <related type="Article" href="/dotnet/framework/ui-automation/client-side-ui-automation-provider-implementation">客户端 UI 自动化提供程序实现</related>
    <related type="Article" href="/dotnet/framework/ui-automation/support-control-patterns-in-a-ui-automation-provider">在 UI 自动化提供程序中支持控件模式</related>
    <related type="Article" href="https://msdn.microsoft.com/library/e5b1e239-49f8-468e-bfec-1fba02ec9ac4">实现 UI 自动化 Invoke 控件模式</related>
  </Docs>
  <Members>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IInvokeProvider.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke();" />
      <MemberSignature Language="F#" Value="abstract member Invoke : unit -&gt; unit" Usage="iInvokeProvider.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>发送请求以激活控件并启动其单一、明确的操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> 是一个异步调用且必须立即返回而不阻塞。  
  
> [!NOTE]
>  此行为对于被调用时直接或间接启动模式对话框的控件而言尤其重要。 引发该事件的任何 UI 自动化客户端将保持被阻止的状态，直到模式对话框关闭为止。  
  
 <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> 引发 <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> 事件。 如果可能，应在控件完成其关联的操作后引发事件。  
  
 在以下情况下，应在处理 <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> 请求之前引发 <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent>：  
  
-   不可能等至操作完成，或这一做法不实际。  
  
-   该操作需要用户交互。  
  
-   此操作非常耗时，将导致调用客户端的阻塞时间很长。  
  
   
  
## Examples  
 下面的示例在控件的 MouseDown 事件处理程序上实现 <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> 方法。 假定 `providerControl` 是构造类时初始化的成员变量。  
  
 [!code-csharp[UIAProvider_snip#106](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAProvider_snip/CSharp/Invoker.cs#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.Automation.ElementNotEnabledException">如果未启用该控件。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/e5b1e239-49f8-468e-bfec-1fba02ec9ac4">实现 UI 自动化 Invoke 控件模式</related>
      </Docs>
    </Member>
  </Members>
</Type>
