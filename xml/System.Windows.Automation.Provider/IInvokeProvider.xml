<Type Name="IInvokeProvider" FullName="System.Windows.Automation.Provider.IInvokeProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="31d87d89c22101930a4fd34ef874caf1239948a6" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86704754" /></Metadata><TypeSignature Language="C#" Value="public interface IInvokeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IInvokeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IInvokeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IInvokeProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IInvokeProvider" />
  <TypeSignature Language="F#" Value="type IInvokeProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.InteropServices.Guid("54fcb24b-e18e-47a2-b4d3-eccbe77599a2")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.Guid("54fcb24b-e18e-47a2-b4d3-eccbe77599a2")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="1fb88-101">公开一些方法和属性，UI 自动化客户端可通过这些方法和属性访问启动或执行一项明确操作并且在激活后不维护状态的控件。</span><span class="sxs-lookup"><span data-stu-id="1fb88-101">Exposes methods and properties to support UI Automation client access to controls that initiate or perform a single, unambiguous action and do not maintain state when activated.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fb88-102">在必须支持控件模式的 UI 自动化提供程序上实现 <xref:System.Windows.Automation.InvokePattern> 。</span><span class="sxs-lookup"><span data-stu-id="1fb88-102">Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.InvokePattern> control pattern.</span></span>  
  
 <span data-ttu-id="1fb88-103">如果不通过另一个控件模式提供程序公开同一行为，则控件实现 <xref:System.Windows.Automation.Provider.IInvokeProvider> 。</span><span class="sxs-lookup"><span data-stu-id="1fb88-103">Controls implement <xref:System.Windows.Automation.Provider.IInvokeProvider> if the same behavior is not exposed through another control pattern provider.</span></span> <span data-ttu-id="1fb88-104">例如，如果控件上的 <xref:System.Windows.Automation.InvokePattern.Invoke%2A> 方法与 <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> 方法或 <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> 方法执行同一操作，则控件不应实现 <xref:System.Windows.Automation.Provider.IInvokeProvider>。</span><span class="sxs-lookup"><span data-stu-id="1fb88-104">For example, if the <xref:System.Windows.Automation.InvokePattern.Invoke%2A> method on a control performs the same action as the <xref:System.Windows.Automation.ExpandCollapsePattern.Expand%2A> or <xref:System.Windows.Automation.ExpandCollapsePattern.Collapse%2A> method, the control should not implement <xref:System.Windows.Automation.Provider.IInvokeProvider>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.InvokePattern" />
    <related type="Article" href="/dotnet/framework/ui-automation/ui-automation-control-patterns-overview"><span data-ttu-id="1fb88-105">UI 自动化控件模式概述</span><span class="sxs-lookup"><span data-stu-id="1fb88-105">UI Automation Control Patterns Overview</span></span></related>
    <related type="Article" href="/dotnet/framework/ui-automation/server-side-ui-automation-provider-implementation"><span data-ttu-id="1fb88-106">服务器端 UI 自动化提供程序实现</span><span class="sxs-lookup"><span data-stu-id="1fb88-106">Server-side UI Automation Provider Implementation</span></span></related>
    <related type="Article" href="/dotnet/framework/ui-automation/client-side-ui-automation-provider-implementation"><span data-ttu-id="1fb88-107">客户端 UI 自动化提供程序实现</span><span class="sxs-lookup"><span data-stu-id="1fb88-107">Client-side UI Automation Provider Implementation</span></span></related>
    <related type="Article" href="/dotnet/framework/ui-automation/support-control-patterns-in-a-ui-automation-provider"><span data-ttu-id="1fb88-108">在 UI 自动化提供程序中支持控件模式</span><span class="sxs-lookup"><span data-stu-id="1fb88-108">Support Control Patterns in a UI Automation Provider</span></span></related>
    <related type="Article" href="/dotnet/framework/ui-automation/implementing-the-ui-automation-invoke-control-pattern"><span data-ttu-id="1fb88-109">实现 UI 自动化 Invoke 控件模式</span><span class="sxs-lookup"><span data-stu-id="1fb88-109">Implementing the UI Automation Invoke Control Pattern</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IInvokeProvider.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke();" />
      <MemberSignature Language="F#" Value="abstract member Invoke : unit -&gt; unit" Usage="iInvokeProvider.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1fb88-110">发送请求以激活控件并启动其单一、明确的操作。</span><span class="sxs-lookup"><span data-stu-id="1fb88-110">Sends a request to activate a control and initiate its single, unambiguous action.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1fb88-111"><xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> 是一个异步调用且必须立即返回而不阻塞。</span><span class="sxs-lookup"><span data-stu-id="1fb88-111"><xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> is an asynchronous call and must return immediately without blocking.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1fb88-112">此行为对于被调用时直接或间接启动模式对话框的控件而言尤其重要。</span><span class="sxs-lookup"><span data-stu-id="1fb88-112">This behavior is particularly critical for controls that, directly or indirectly, launch a modal dialog when invoked.</span></span> <span data-ttu-id="1fb88-113">引发该事件的任何 UI 自动化客户端将保持被阻止的状态，直到模式对话框关闭为止。</span><span class="sxs-lookup"><span data-stu-id="1fb88-113">Any UI Automation client that instigated the event will remain blocked until the modal dialog is closed.</span></span>  
  
 <span data-ttu-id="1fb88-114"><xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> 引发 <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> 事件。</span><span class="sxs-lookup"><span data-stu-id="1fb88-114"><xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> raises the <xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> event.</span></span> <span data-ttu-id="1fb88-115">如果可能，应在控件完成其关联的操作后引发事件。</span><span class="sxs-lookup"><span data-stu-id="1fb88-115">If possible, the event should be raised after the control has completed its associated action.</span></span>  
  
 <span data-ttu-id="1fb88-116"><xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> 在以下情况下，应 <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> 在处理请求之前引发：</span><span class="sxs-lookup"><span data-stu-id="1fb88-116"><xref:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent> should be raised before servicing the <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> request in the following scenarios:</span></span>  
  
-   <span data-ttu-id="1fb88-117">不可能等至操作完成，或这一做法不实际。</span><span class="sxs-lookup"><span data-stu-id="1fb88-117">It is not possible or practical to wait until the action is complete.</span></span>  
  
-   <span data-ttu-id="1fb88-118">该操作需要用户交互。</span><span class="sxs-lookup"><span data-stu-id="1fb88-118">The action requires user interaction.</span></span>  
  
-   <span data-ttu-id="1fb88-119">此操作非常耗时，将导致调用客户端的阻塞时间很长。</span><span class="sxs-lookup"><span data-stu-id="1fb88-119">The action is time-consuming and will cause the calling client to block for a significant length of time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1fb88-120">下面的示例在 <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> 控件的 MouseDown 事件处理程序中实现方法。</span><span class="sxs-lookup"><span data-stu-id="1fb88-120">The following example implements the <xref:System.Windows.Automation.Provider.IInvokeProvider.Invoke%2A> method on the MouseDown event handler of a control.</span></span> <span data-ttu-id="1fb88-121">假设 `providerControl` 是构造类时初始化的成员变量。</span><span class="sxs-lookup"><span data-stu-id="1fb88-121">Assume that `providerControl` is a member variable that was initialized when the class was constructed.</span></span>  
  
 [!code-csharp[UIAProvider_snip#106](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAProvider_snip/CSharp/Invoker.cs#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.Automation.ElementNotEnabledException"><span data-ttu-id="1fb88-122">如果未启用该控件。</span><span class="sxs-lookup"><span data-stu-id="1fb88-122">If the control is not enabled.</span></span></exception>
        <related type="Article" href="/dotnet/framework/ui-automation/implementing-the-ui-automation-invoke-control-pattern"><span data-ttu-id="1fb88-123">实现 UI 自动化 Invoke 控件模式</span><span class="sxs-lookup"><span data-stu-id="1fb88-123">Implementing the UI Automation Invoke Control Pattern</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
