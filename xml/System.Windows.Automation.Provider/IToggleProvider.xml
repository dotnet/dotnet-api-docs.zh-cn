<Type Name="IToggleProvider" FullName="System.Windows.Automation.Provider.IToggleProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b893e6a69db4bf04fe36704e1ac3b503eb29b4d2" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86704338" /></Metadata><TypeSignature Language="C#" Value="public interface IToggleProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IToggleProvider" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.Provider.IToggleProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IToggleProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IToggleProvider" />
  <TypeSignature Language="F#" Value="type IToggleProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationProvider</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.InteropServices.Guid("56d00bd0-c4f4-433c-a836-1a52a57e0892")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.Guid("56d00bd0-c4f4-433c-a836-1a52a57e0892")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="87ba2-101">公开一些方法和属性，以支持 UI 自动化客户端访问可遍历一组状态并可在设置后维持状态的控件。</span><span class="sxs-lookup"><span data-stu-id="87ba2-101">Exposes methods and properties to support UI Automation client access to controls that can cycle through a set of states and maintain a state once set.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87ba2-102">在必须支持控件模式的 UI 自动化提供程序上实现 <xref:System.Windows.Automation.TogglePattern> 。</span><span class="sxs-lookup"><span data-stu-id="87ba2-102">Implemented on a UI Automation provider that must support the <xref:System.Windows.Automation.TogglePattern> control pattern.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Automation.TogglePattern" />
    <related type="Article" href="/dotnet/framework/ui-automation/ui-automation-control-patterns-overview"><span data-ttu-id="87ba2-103">UI 自动化控件模式概述</span><span class="sxs-lookup"><span data-stu-id="87ba2-103">UI Automation Control Patterns Overview</span></span></related>
    <related type="Article" href="/dotnet/framework/ui-automation/server-side-ui-automation-provider-implementation"><span data-ttu-id="87ba2-104">服务器端 UI 自动化提供程序实现</span><span class="sxs-lookup"><span data-stu-id="87ba2-104">Server-side UI Automation Provider Implementation</span></span></related>
    <related type="Article" href="/dotnet/framework/ui-automation/client-side-ui-automation-provider-implementation"><span data-ttu-id="87ba2-105">客户端 UI 自动化提供程序实现</span><span class="sxs-lookup"><span data-stu-id="87ba2-105">Client-side UI Automation Provider Implementation</span></span></related>
    <related type="Article" href="/dotnet/framework/ui-automation/support-control-patterns-in-a-ui-automation-provider"><span data-ttu-id="87ba2-106">在 UI 自动化提供程序中支持控件模式</span><span class="sxs-lookup"><span data-stu-id="87ba2-106">Support Control Patterns in a UI Automation Provider</span></span></related>
    <related type="Article" href="/dotnet/framework/ui-automation/implementing-the-ui-automation-toggle-control-pattern"><span data-ttu-id="87ba2-107">实现 UI 自动化 Toggle 控件模式</span><span class="sxs-lookup"><span data-stu-id="87ba2-107">Implementing the UI Automation Toggle Control Pattern</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Toggle">
      <MemberSignature Language="C#" Value="public void Toggle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Toggle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.Provider.IToggleProvider.Toggle" />
      <MemberSignature Language="VB.NET" Value="Public Sub Toggle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Toggle();" />
      <MemberSignature Language="F#" Value="abstract member Toggle : unit -&gt; unit" Usage="iToggleProvider.Toggle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="87ba2-108">循环通过控件的切换状态。</span><span class="sxs-lookup"><span data-stu-id="87ba2-108">Cycles through the toggle states of a control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87ba2-109">控件必须按以下顺序循环切换状态： <xref:System.Windows.Automation.ToggleState.On> 、 <xref:System.Windows.Automation.ToggleState.Off> 和 (（如果支持) ） <xref:System.Windows.Automation.ToggleState.Indeterminate> 。</span><span class="sxs-lookup"><span data-stu-id="87ba2-109">A control must cycle through its toggle states in this order: <xref:System.Windows.Automation.ToggleState.On>, <xref:System.Windows.Automation.ToggleState.Off>, and (if supported) <xref:System.Windows.Automation.ToggleState.Indeterminate>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87ba2-110">下面的示例演示了此方法对于可以切换的自定义控件的一种可能实现。</span><span class="sxs-lookup"><span data-stu-id="87ba2-110">The following example shows one possible implementation of this method for a custom control that can be toggled.</span></span>  
  
 [!code-csharp[UIAIToggleProvider_snip#Toggle](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIToggleProvider_snip/CSharp/ToggleFragment.cs#toggle)]
 [!code-vb[UIAIToggleProvider_snip#Toggle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIToggleProvider_snip/visualbasic/togglefragment.vb#toggle)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/ui-automation/implementing-the-ui-automation-toggle-control-pattern"><span data-ttu-id="87ba2-111">实现 UI 自动化 Toggle 控件模式</span><span class="sxs-lookup"><span data-stu-id="87ba2-111">Implementing the UI Automation Toggle Control Pattern</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ToggleState">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.ToggleState ToggleState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.ToggleState ToggleState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.Provider.IToggleProvider.ToggleState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ToggleState As ToggleState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Automation::ToggleState ToggleState { System::Windows::Automation::ToggleState get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleState : System.Windows.Automation.ToggleState" Usage="System.Windows.Automation.Provider.IToggleProvider.ToggleState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationProvider</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ToggleState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="87ba2-112">获取控件的切换状态。</span><span class="sxs-lookup"><span data-stu-id="87ba2-112">Gets the toggle state of the control.</span></span></summary>
        <value><span data-ttu-id="87ba2-113">控件的 <see cref="T:System.Windows.Automation.ToggleState" />。</span><span class="sxs-lookup"><span data-stu-id="87ba2-113">The <see cref="T:System.Windows.Automation.ToggleState" /> of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="87ba2-114">控件必须 <xref:System.Windows.Automation.ToggleState> 按以下顺序循环切换： <xref:System.Windows.Automation.ToggleState.On> 、 <xref:System.Windows.Automation.ToggleState.Off> 和 (（如果支持) ） <xref:System.Windows.Automation.ToggleState.Indeterminate> 。</span><span class="sxs-lookup"><span data-stu-id="87ba2-114">A control must cycle through its <xref:System.Windows.Automation.ToggleState> in this order: <xref:System.Windows.Automation.ToggleState.On>, <xref:System.Windows.Automation.ToggleState.Off>, and (if supported) <xref:System.Windows.Automation.ToggleState.Indeterminate>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="87ba2-115">下面的示例演示了此方法对于可以切换的控件的实现。</span><span class="sxs-lookup"><span data-stu-id="87ba2-115">The following example shows an implementation of this method for a control that can be toggled.</span></span> <span data-ttu-id="87ba2-116">返回的 ToggleState 基于控件的颜色;这类似于 <xref:System.Windows.Controls.Primitives.ToggleButton.IsChecked%2A> CheckBox 控件的属性。</span><span class="sxs-lookup"><span data-stu-id="87ba2-116">The ToggleState returned is based on the color of the control; this is analogous to the <xref:System.Windows.Controls.Primitives.ToggleButton.IsChecked%2A> property of a CheckBox control.</span></span>  
  
 [!code-csharp[UIAIToggleProvider_snip#ToggleState](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAIToggleProvider_snip/CSharp/ToggleFragment.cs#togglestate)]
 [!code-vb[UIAIToggleProvider_snip#ToggleState](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAIToggleProvider_snip/visualbasic/togglefragment.vb#togglestate)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/ui-automation/implementing-the-ui-automation-toggle-control-pattern"><span data-ttu-id="87ba2-117">实现 UI 自动化 Toggle 控件模式</span><span class="sxs-lookup"><span data-stu-id="87ba2-117">Implementing the UI Automation Toggle Control Pattern</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
