<Type Name="MetadataReaderProvider" FullName="System.Reflection.Metadata.MetadataReaderProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9e358378d5b3d54f7ebe90270da985c046cfc5ee" /><Meta Name="ms.sourcegitcommit" Value="943c8cdbe5b47c6c296a6f4b73038bbd43da0dd2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/12/2021" /><Meta Name="ms.locfileid" Value="100332137" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataReaderProvider : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataReaderProvider extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Metadata.MetadataReaderProvider" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataReaderProvider&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataReaderProvider sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataReaderProvider = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.3.0.0</AssemblyVersion>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
    <AssemblyVersion>1.4.5.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="45354-101">为存储在字节数组、内存块或流中的元数据提供 <see cref="T:System.Reflection.Metadata.MetadataReader" />。</span><span class="sxs-lookup"><span data-stu-id="45354-101">Provides a <see cref="T:System.Reflection.Metadata.MetadataReader" /> for metadata stored in an array of bytes, a memory block, or a stream.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="45354-102">`MetadataReaderProvider` 支持以下格式：</span><span class="sxs-lookup"><span data-stu-id="45354-102">`MetadataReaderProvider` supports the following formats:</span></span>

 - <span data-ttu-id="45354-103">ECMA-335 CLI (公共语言基础结构) 元数据 (<xref:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Byte*,System.Int32)>) 。</span><span class="sxs-lookup"><span data-stu-id="45354-103">ECMA-335 CLI (Common Language Infrastructure) metadata (<xref:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Byte*,System.Int32)>).</span></span>
 - <span data-ttu-id="45354-104">编辑并继续 () 的元数据增量 <xref:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Byte*,System.Int32)> 。</span><span class="sxs-lookup"><span data-stu-id="45354-104">Edit and Continue metadata delta (<xref:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Byte*,System.Int32)>).</span></span>
 - <span data-ttu-id="45354-105">可移植 PDB 元数据 (<xref:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage(System.Byte*,System.Int32)>) 。</span><span class="sxs-lookup"><span data-stu-id="45354-105">Portable PDB metadata (<xref:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage(System.Byte*,System.Int32)>).</span></span>

          ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataReaderProvider.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45354-106">释放由读取器分配的所有内存。</span><span class="sxs-lookup"><span data-stu-id="45354-106">Disposes all memory allocated by the reader.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="45354-107"><xref:System.Reflection.Metadata.MetadataReaderProvider.Dispose> 可以多次调用 (但不能并行) 。</span><span class="sxs-lookup"><span data-stu-id="45354-107"><xref:System.Reflection.Metadata.MetadataReaderProvider.Dispose> can be called multiple times (but not in parallel).</span></span>

<span data-ttu-id="45354-108"><xref:System.Reflection.Metadata.MetadataReaderProvider.Dispose>与上的任何其他操作并行调用 <xref:System.Reflection.Metadata.MetadataReaderProvider> 或者从基础内存中读取时，不安全地调用。</span><span class="sxs-lookup"><span data-stu-id="45354-108">It is not safe to call <xref:System.Reflection.Metadata.MetadataReaderProvider.Dispose> in parallel with any other operation on the <xref:System.Reflection.Metadata.MetadataReaderProvider> or when reading from the underlying memory.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromMetadataImage">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromMetadataImage (System.Collections.Immutable.ImmutableArray&lt;byte&gt; image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromMetadataImage(valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; image) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Collections.Immutable.ImmutableArray{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromMetadataImage (image As ImmutableArray(Of Byte)) As MetadataReaderProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Metadata::MetadataReaderProvider ^ FromMetadataImage(System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; image);" />
      <MemberSignature Language="F#" Value="static member FromMetadataImage : System.Collections.Immutable.ImmutableArray&lt;byte&gt; -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="image"><span data-ttu-id="45354-109">元数据映像。</span><span class="sxs-lookup"><span data-stu-id="45354-109">Metadata image.</span></span></param>
        <summary><span data-ttu-id="45354-110">基于字节数组创建提供程序。</span><span class="sxs-lookup"><span data-stu-id="45354-110">Creates a provider over a byte array.</span></span></summary>
        <returns><span data-ttu-id="45354-111">新的提供程序。</span><span class="sxs-lookup"><span data-stu-id="45354-111">The new provider.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="45354-112">在构造过程中，不会读取图像的内容 <xref:System.Reflection.Metadata.MetadataReaderProvider> 。</span><span class="sxs-lookup"><span data-stu-id="45354-112">The content of the image is not read during the construction of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="45354-113"><paramref name="image" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="45354-113"><paramref name="image" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromMetadataImage">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromMetadataImage (byte* start, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromMetadataImage(unsigned int8* start, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Metadata::MetadataReaderProvider ^ FromMetadataImage(System::Byte* start, int size);" />
      <MemberSignature Language="F#" Value="static member FromMetadataImage : nativeptr&lt;byte&gt; * int -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromMetadataImage (start, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Byte*" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="45354-114">指向元数据 blob 开头的指针。</span><span class="sxs-lookup"><span data-stu-id="45354-114">Pointer to the start of the metadata blob.</span></span></param>
        <param name="size"><span data-ttu-id="45354-115">元数据 blob 的大小。</span><span class="sxs-lookup"><span data-stu-id="45354-115">The size of the metadata blob.</span></span></param>
        <summary><span data-ttu-id="45354-116">基于内存中存储的映像创建元数据提供程序。</span><span class="sxs-lookup"><span data-stu-id="45354-116">Creates a metadata provider over an image stored in memory.</span></span></summary>
        <returns><span data-ttu-id="45354-117">新的元数据提供程序。</span><span class="sxs-lookup"><span data-stu-id="45354-117">The new metadata provider.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="45354-118">内存由调用方拥有，不会在释放时释放 <xref:System.Reflection.Metadata.MetadataReaderProvider> 。</span><span class="sxs-lookup"><span data-stu-id="45354-118">The memory is owned by the caller and is not released on disposal of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

<span data-ttu-id="45354-119">调用方负责使内存保持活动状态，并在整个生存期内不进行修改 <xref:System.Reflection.Metadata.MetadataReaderProvider> 。</span><span class="sxs-lookup"><span data-stu-id="45354-119">The caller is responsible for keeping the memory alive and unmodified throughout the lifetime of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

<span data-ttu-id="45354-120">在构造期间，不会读取 blob 的内容 <xref:System.Reflection.Metadata.MetadataReaderProvider> 。</span><span class="sxs-lookup"><span data-stu-id="45354-120">The content of the blob is not read during the construction of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="45354-121"><paramref name="start" /> 为 <see cref="F:System.IntPtr.Zero" />。</span><span class="sxs-lookup"><span data-stu-id="45354-121"><paramref name="start" /> is <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="45354-122"><paramref name="size" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="45354-122"><paramref name="size" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromMetadataStream">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromMetadataStream (System.IO.Stream stream, System.Reflection.Metadata.MetadataStreamOptions options = System.Reflection.Metadata.MetadataStreamOptions.Default, int size = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromMetadataStream(class System.IO.Stream stream, valuetype System.Reflection.Metadata.MetadataStreamOptions options, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromMetadataStream(System.IO.Stream,System.Reflection.Metadata.MetadataStreamOptions,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromMetadataStream (stream As Stream, Optional options As MetadataStreamOptions = System.Reflection.Metadata.MetadataStreamOptions.Default, Optional size As Integer = 0) As MetadataReaderProvider" />
      <MemberSignature Language="F#" Value="static member FromMetadataStream : System.IO.Stream * System.Reflection.Metadata.MetadataStreamOptions * int -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromMetadataStream (stream, options, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.Metadata.MetadataStreamOptions" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="45354-123">一个 <see cref="T:System.IO.Stream" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="45354-123">A <see cref="T:System.IO.Stream" /> instance.</span></span></param>
        <param name="options"><span data-ttu-id="45354-124">用于指定如何从流中读取映像分区的选项。</span><span class="sxs-lookup"><span data-stu-id="45354-124">Options specifying how sections of the image are read from the stream.</span></span></param>
        <param name="size"><span data-ttu-id="45354-125">流中的元数据 blob 大小。</span><span class="sxs-lookup"><span data-stu-id="45354-125">Size of the metadata blob in the stream.</span></span> <span data-ttu-id="45354-126">如果未指定，则假定元数据 blob 横跨到流的结尾。</span><span class="sxs-lookup"><span data-stu-id="45354-126">If not specified, the metadata blob is assumed to span to the end of the stream.</span></span></param>
        <summary><span data-ttu-id="45354-127">为具有指定大小且从其当前位置开头的流创建提供程序。</span><span class="sxs-lookup"><span data-stu-id="45354-127">Creates a provider for a stream of the specified size beginning at its current position.</span></span></summary>
        <returns><span data-ttu-id="45354-128">新的提供程序。</span><span class="sxs-lookup"><span data-stu-id="45354-128">The new provider.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="45354-129">除非 <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType> 指定，否则流的所有权将传输到成功的 <xref:System.Reflection.Metadata.MetadataReaderProvider> 参数验证。</span><span class="sxs-lookup"><span data-stu-id="45354-129">Unless <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType> is specified, ownership of the stream is transferred to the <xref:System.Reflection.Metadata.MetadataReaderProvider> upon successful argument validation.</span></span> <span data-ttu-id="45354-130">它将由释放 <xref:System.Reflection.Metadata.MetadataReaderProvider> ，并且调用方不能对其进行操作。</span><span class="sxs-lookup"><span data-stu-id="45354-130">It will be disposed by the <xref:System.Reflection.Metadata.MetadataReaderProvider>, and the caller must not manipulate it.</span></span>
            
<span data-ttu-id="45354-131">除非 <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType> 指定，否则在构造过程中不会从流中读取任何数据 <xref:System.Reflection.Metadata.MetadataReaderProvider> 。</span><span class="sxs-lookup"><span data-stu-id="45354-131">Unless <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType> is specified, no data is read from the stream during construction of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span> <span data-ttu-id="45354-132">此外，当 <xref:System.Reflection.Metadata.MetadataReaderProvider> 为活动和未释放时，不能由调用方对流进行操作。</span><span class="sxs-lookup"><span data-stu-id="45354-132">Furthermore, the stream must not be manipulated by caller while the <xref:System.Reflection.Metadata.MetadataReaderProvider> is alive and undisposed.</span></span>
            
<span data-ttu-id="45354-133">如果 <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType> 为，则 <xref:System.Reflection.Metadata.MetadataReaderProvider> 将读取在构造过程中请求的所有数据。</span><span class="sxs-lookup"><span data-stu-id="45354-133">If <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType>, the <xref:System.Reflection.Metadata.MetadataReaderProvider> will have read all of the data requested during construction.</span></span> <span data-ttu-id="45354-134">同样，如果 <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType> 指定了，则调用方将保留流的完全所有权，并确保在构造后不会对其进行操作 <xref:System.Reflection.Metadata.MetadataReaderProvider> 。</span><span class="sxs-lookup"><span data-stu-id="45354-134">As such, if <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType> is also specified, the caller retains full ownership of the stream and is assured that it will not be manipulated by the <xref:System.Reflection.Metadata.MetadataReaderProvider> after construction.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="45354-135"><paramref name="stream" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="45354-135"><paramref name="stream" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="45354-136"><paramref name="stream" /> 不支持读取和查找操作。</span><span class="sxs-lookup"><span data-stu-id="45354-136"><paramref name="stream" /> doesn't support read and seek operations.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="45354-137">大小为负，或者扩展超出了流的末尾。</span><span class="sxs-lookup"><span data-stu-id="45354-137">Size is negative or extends past the end of the stream.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="45354-138">从流中读取时出错（仅在指定 <see cref="F:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata" /> 时读取）。</span><span class="sxs-lookup"><span data-stu-id="45354-138">Error reading from the stream (only when <see cref="F:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata" /> is specified).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromPortablePdbImage">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbImage (System.Collections.Immutable.ImmutableArray&lt;byte&gt; image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbImage(valuetype System.Collections.Immutable.ImmutableArray`1&lt;unsigned int8&gt; image) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage(System.Collections.Immutable.ImmutableArray{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromPortablePdbImage (image As ImmutableArray(Of Byte)) As MetadataReaderProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Metadata::MetadataReaderProvider ^ FromPortablePdbImage(System::Collections::Immutable::ImmutableArray&lt;System::Byte&gt; image);" />
      <MemberSignature Language="F#" Value="static member FromPortablePdbImage : System.Collections.Immutable.ImmutableArray&lt;byte&gt; -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="System.Collections.Immutable.ImmutableArray&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="image"><span data-ttu-id="45354-139">可移植的 PDB 映像。</span><span class="sxs-lookup"><span data-stu-id="45354-139">A portable PDB image.</span></span></param>
        <summary><span data-ttu-id="45354-140">基于字节数组创建可移植的 PDB 元数据提供程序。</span><span class="sxs-lookup"><span data-stu-id="45354-140">Creates a portable PDB metadata provider over a byte array.</span></span></summary>
        <returns><span data-ttu-id="45354-141">新的可移植的 PDB 元数据提供程序。</span><span class="sxs-lookup"><span data-stu-id="45354-141">The new portable PDB metadata provider .</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="45354-142">在构造过程中，不会读取图像的内容 <xref:System.Reflection.Metadata.MetadataReaderProvider> 。</span><span class="sxs-lookup"><span data-stu-id="45354-142">The content of the image is not read during the construction of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="45354-143"><paramref name="image" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="45354-143"><paramref name="image" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromPortablePdbImage">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbImage (byte* start, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbImage(unsigned int8* start, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage(System.Byte*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Reflection::Metadata::MetadataReaderProvider ^ FromPortablePdbImage(System::Byte* start, int size);" />
      <MemberSignature Language="F#" Value="static member FromPortablePdbImage : nativeptr&lt;byte&gt; * int -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbImage (start, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Byte*" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="45354-144">指向可移植的 PDB blob 开头的指针。</span><span class="sxs-lookup"><span data-stu-id="45354-144">Pointer to the start of the portable PDB blob.</span></span></param>
        <param name="size"><span data-ttu-id="45354-145">可移植的 PDB blob 的大小。</span><span class="sxs-lookup"><span data-stu-id="45354-145">The size of the portable PDB blob.</span></span></param>
        <summary><span data-ttu-id="45354-146">基于内存中存储的 blob 创建可移植的 PDB 元数据提供程序。</span><span class="sxs-lookup"><span data-stu-id="45354-146">Creates a portable PDB metadata provider over a blob stored in memory.</span></span></summary>
        <returns><span data-ttu-id="45354-147">新的可移植的 PDB 元数据提供程序。</span><span class="sxs-lookup"><span data-stu-id="45354-147">The new portable PDB metadata provider.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="45354-148">内存由调用方拥有，不会在释放时释放 <xref:System.Reflection.Metadata.MetadataReaderProvider> 。</span><span class="sxs-lookup"><span data-stu-id="45354-148">The memory is owned by the caller and not released on disposal of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

<span data-ttu-id="45354-149">调用方负责使内存保持活动状态，并在整个生存期内不进行修改 <xref:System.Reflection.Metadata.MetadataReaderProvider> 。</span><span class="sxs-lookup"><span data-stu-id="45354-149">The caller is responsible for keeping the memory alive and unmodified throughout the lifetime of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

<span data-ttu-id="45354-150">在构造期间，不会读取 blob 的内容 <xref:System.Reflection.Metadata.MetadataReaderProvider> 。</span><span class="sxs-lookup"><span data-stu-id="45354-150">The content of the blob is not read during the construction of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="45354-151"><paramref name="start" /> 为 <see cref="F:System.IntPtr.Zero" />。</span><span class="sxs-lookup"><span data-stu-id="45354-151"><paramref name="start" /> is <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="45354-152"><paramref name="size" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="45354-152"><paramref name="size" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FromPortablePdbStream">
      <MemberSignature Language="C#" Value="public static System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbStream (System.IO.Stream stream, System.Reflection.Metadata.MetadataStreamOptions options = System.Reflection.Metadata.MetadataStreamOptions.Default, int size = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.Metadata.MetadataReaderProvider FromPortablePdbStream(class System.IO.Stream stream, valuetype System.Reflection.Metadata.MetadataStreamOptions options, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbStream(System.IO.Stream,System.Reflection.Metadata.MetadataStreamOptions,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromPortablePdbStream (stream As Stream, Optional options As MetadataStreamOptions = System.Reflection.Metadata.MetadataStreamOptions.Default, Optional size As Integer = 0) As MetadataReaderProvider" />
      <MemberSignature Language="F#" Value="static member FromPortablePdbStream : System.IO.Stream * System.Reflection.Metadata.MetadataStreamOptions * int -&gt; System.Reflection.Metadata.MetadataReaderProvider" Usage="System.Reflection.Metadata.MetadataReaderProvider.FromPortablePdbStream (stream, options, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReaderProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="options" Type="System.Reflection.Metadata.MetadataStreamOptions" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="45354-153">流。</span><span class="sxs-lookup"><span data-stu-id="45354-153">The stream.</span></span></param>
        <param name="options"><span data-ttu-id="45354-154">用于指定如何从流中读取映像分区的选项。</span><span class="sxs-lookup"><span data-stu-id="45354-154">Options specifying how sections of the image are read from the stream.</span></span></param>
        <param name="size"><span data-ttu-id="45354-155">流中的元数据 blob 大小。</span><span class="sxs-lookup"><span data-stu-id="45354-155">Size of the metadata blob in the stream.</span></span> <span data-ttu-id="45354-156">如果未指定，则假定元数据 blob 横跨到流的结尾。</span><span class="sxs-lookup"><span data-stu-id="45354-156">If not specified, the metadata blob is assumed to span to the end of the stream.</span></span></param>
        <summary><span data-ttu-id="45354-157">为具有指定大小且从其当前位置开头的流创建提供程序。</span><span class="sxs-lookup"><span data-stu-id="45354-157">Creates a provider for a stream of the specified size beginning at its current position.</span></span></summary>
        <returns><span data-ttu-id="45354-158">一个 <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="45354-158">A <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
            
<span data-ttu-id="45354-159">除非 <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType> 指定，否则流的所有权将传输到成功的 <xref:System.Reflection.Metadata.MetadataReaderProvider> 参数验证。</span><span class="sxs-lookup"><span data-stu-id="45354-159">Unless <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType> is specified, ownership of the stream is transferred to the <xref:System.Reflection.Metadata.MetadataReaderProvider> upon successful argument validation.</span></span> <span data-ttu-id="45354-160">它将由释放 <xref:System.Reflection.Metadata.MetadataReaderProvider> ，并且调用方不能对其进行操作。</span><span class="sxs-lookup"><span data-stu-id="45354-160">It will be disposed by the <xref:System.Reflection.Metadata.MetadataReaderProvider>, and the caller must not manipulate it.</span></span>
            
<span data-ttu-id="45354-161">除非 <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType> 指定，否则在构造过程中不会从流中读取任何数据 <xref:System.Reflection.Metadata.MetadataReaderProvider> 。</span><span class="sxs-lookup"><span data-stu-id="45354-161">Unless <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType> is specified, no data is read from the stream during the construction of the <xref:System.Reflection.Metadata.MetadataReaderProvider>.</span></span> <span data-ttu-id="45354-162">此外，当 <xref:System.Reflection.Metadata.MetadataReaderProvider> 为活动和未释放时，不能由调用方对流进行操作。</span><span class="sxs-lookup"><span data-stu-id="45354-162">Furthermore, the stream must not be manipulated by caller while the <xref:System.Reflection.Metadata.MetadataReaderProvider> is alive and undisposed.</span></span>
            
<span data-ttu-id="45354-163">如果 <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType> 为，则 <xref:System.Reflection.Metadata.MetadataReaderProvider> 将读取在构造过程中请求的所有数据。</span><span class="sxs-lookup"><span data-stu-id="45354-163">If <xref:System.Reflection.Metadata.MetadataStreamOptions.PrefetchMetadata?displayProperty=nameWithType>, the <xref:System.Reflection.Metadata.MetadataReaderProvider> will have read all of the data requested during construction.</span></span> <span data-ttu-id="45354-164">同样，如果 <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType> 指定了，则调用方将保留流的完全所有权，并确保在构造后不会对其进行操作 <xref:System.Reflection.Metadata.MetadataReaderProvider> 。</span><span class="sxs-lookup"><span data-stu-id="45354-164">As such, if <xref:System.Reflection.Metadata.MetadataStreamOptions.LeaveOpen?displayProperty=nameWithType> is also specified, the caller retains full ownership of the stream and is assured that it will not be manipulated by the <xref:System.Reflection.Metadata.MetadataReaderProvider> after construction.</span></span>

            ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="45354-165"><paramref name="stream" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="45354-165"><paramref name="stream" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="45354-166"><paramref name="stream" /> 不支持读取和查找操作。</span><span class="sxs-lookup"><span data-stu-id="45354-166"><paramref name="stream" /> doesn't support read and seek operations.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="45354-167">大小为负，或者扩展超出了流的末尾。</span><span class="sxs-lookup"><span data-stu-id="45354-167">Size is negative or extends past the end of the stream.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetMetadataReader">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.MetadataReader GetMetadataReader (System.Reflection.Metadata.MetadataReaderOptions options = System.Reflection.Metadata.MetadataReaderOptions.Default, System.Reflection.Metadata.MetadataStringDecoder? utf8Decoder = default);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Metadata.MetadataReader GetMetadataReader(valuetype System.Reflection.Metadata.MetadataReaderOptions options, class System.Reflection.Metadata.MetadataStringDecoder utf8Decoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.MetadataReaderProvider.GetMetadataReader(System.Reflection.Metadata.MetadataReaderOptions,System.Reflection.Metadata.MetadataStringDecoder)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadataReader (Optional options As MetadataReaderOptions = System.Reflection.Metadata.MetadataReaderOptions.Default, Optional utf8Decoder As MetadataStringDecoder = Nothing) As MetadataReader" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="F#" Value="member this.GetMetadataReader : System.Reflection.Metadata.MetadataReaderOptions * System.Reflection.Metadata.MetadataStringDecoder -&gt; System.Reflection.Metadata.MetadataReader" Usage="metadataReaderProvider.GetMetadataReader (options, utf8Decoder)" />
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.MetadataReader GetMetadataReader (System.Reflection.Metadata.MetadataReaderOptions options = System.Reflection.Metadata.MetadataReaderOptions.ApplyWindowsRuntimeProjections, System.Reflection.Metadata.MetadataStringDecoder utf8Decoder = default);" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadataReader (Optional options As MetadataReaderOptions = System.Reflection.Metadata.MetadataReaderOptions.ApplyWindowsRuntimeProjections, Optional utf8Decoder As MetadataStringDecoder = Nothing) As MetadataReader" FrameworkAlternate="netcore-1.0;netcore-1.1" />
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.MetadataReader GetMetadataReader (System.Reflection.Metadata.MetadataReaderOptions options = System.Reflection.Metadata.MetadataReaderOptions.Default, System.Reflection.Metadata.MetadataStringDecoder utf8Decoder = default);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.3.0.0</AssemblyVersion>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.MetadataReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Reflection.Metadata.MetadataReaderOptions" />
        <Parameter Name="utf8Decoder" Type="System.Reflection.Metadata.MetadataStringDecoder" />
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="45354-168">枚举值的按位组合，这些值表示读取元数据时的配置。</span><span class="sxs-lookup"><span data-stu-id="45354-168">A bitwise combination of the enumeration values that represent the configuration when reading the metadata.</span></span></param>
        <param name="utf8Decoder"><span data-ttu-id="45354-169">要使用的编码。</span><span class="sxs-lookup"><span data-stu-id="45354-169">The encoding to use.</span></span></param>
        <summary><span data-ttu-id="45354-170">从 <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" /> 中获取一个 <see cref="T:System.Reflection.Metadata.MetadataReader" />。</span><span class="sxs-lookup"><span data-stu-id="45354-170">Gets a <see cref="T:System.Reflection.Metadata.MetadataReader" /> from a <see cref="T:System.Reflection.Metadata.MetadataReaderProvider" />.</span></span></summary>
        <returns><span data-ttu-id="45354-171">一个 <see cref="T:System.Reflection.Metadata.MetadataReader" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="45354-171">A <see cref="T:System.Reflection.Metadata.MetadataReader" /> instance..</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="45354-172">调用方必须在 <xref:System.Reflection.Metadata.MetadataReaderProvider> 元数据读取器的整个生存期内保持未释放。</span><span class="sxs-lookup"><span data-stu-id="45354-172">The caller must keep the <xref:System.Reflection.Metadata.MetadataReaderProvider> undisposed throughout the lifetime of the metadata reader.</span></span>

<span data-ttu-id="45354-173">如果多次调用此方法，则每个具有与传递到上一个成功调用的参数相等的参数的调用将返回与 <xref:System.Reflection.Metadata.MetadataReader> 上一个调用相同的实例。</span><span class="sxs-lookup"><span data-stu-id="45354-173">If this method is called multiple times, each call with arguments equal to the arguments passed to the previous successful call returns the same instance of <xref:System.Reflection.Metadata.MetadataReader> as the previous call.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="45354-174"><paramref name="utf8Decoder" /> 的编码不是 <see cref="T:System.Text.UTF8Encoding" />。</span><span class="sxs-lookup"><span data-stu-id="45354-174">The encoding of <paramref name="utf8Decoder" /> is not <see cref="T:System.Text.UTF8Encoding" />.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="45354-175">当前平台是大端。</span><span class="sxs-lookup"><span data-stu-id="45354-175">The current platform is big-endian.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="45354-176">从基础流中读取时出现 IO 错误。</span><span class="sxs-lookup"><span data-stu-id="45354-176">IO error while reading from the underlying stream.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="45354-177">已释放提供程序。</span><span class="sxs-lookup"><span data-stu-id="45354-177">Provider has been disposed.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
