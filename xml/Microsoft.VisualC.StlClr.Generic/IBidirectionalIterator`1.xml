<Type Name="IBidirectionalIterator&lt;TValue&gt;" FullName="Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;TValue&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="75dc5af0f4a067a2f4b01db456fa09aecfc3a885" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102088649" /></Metadata><TypeSignature Language="C#" Value="public interface IBidirectionalIterator&lt;TValue&gt; : Microsoft.VisualC.StlClr.Generic.IForwardIterator&lt;TValue&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IBidirectionalIterator`1&lt;TValue&gt; implements class Microsoft.VisualC.StlClr.Generic.IForwardIterator`1&lt;!TValue&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBidirectionalIterator(Of TValue)&#xA;Implements IForwardIterator(Of TValue)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TValue&gt;&#xA;public interface class IBidirectionalIterator : Microsoft::VisualC::StlClr::Generic::IForwardIterator&lt;TValue&gt;" />
  <TypeSignature Language="F#" Value="type IBidirectionalIterator&lt;'Value&gt; = interface&#xA;    interface IForwardIterator&lt;'Value&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IBaseIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IForwardIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IOutputIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TValue"><span data-ttu-id="a36f4-101">受控序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="a36f4-101">The type of an element in the controlled sequence.</span></span></typeparam>
    <summary><span data-ttu-id="a36f4-102">迭代器的接口，该迭代器可以向前（通过使用递增运算符）或向后（通过使用递减运算符）访问容器中的元素。</span><span class="sxs-lookup"><span data-stu-id="a36f4-102">Interface for an iterator that can access elements in a container in the forward direction by using the increment operator and in the backward direction by using the decrement operator.</span></span> <span data-ttu-id="a36f4-103">迭代器指向的元素可以写入和读出任意多次。</span><span class="sxs-lookup"><span data-stu-id="a36f4-103">The element that the iterator points to can be both written to and read from any number of times.</span></span> <span data-ttu-id="a36f4-104">无论是需要输入迭代器还是输出迭代器，均可以使用双向迭代器。</span><span class="sxs-lookup"><span data-stu-id="a36f4-104">Bidirectional iterators can be used anywhere an input or output iterator is required.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="prev">
      <MemberSignature Language="C#" Value="public void prev ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void prev() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1.prev" />
      <MemberSignature Language="VB.NET" Value="Public Sub prev ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void prev();" />
      <MemberSignature Language="F#" Value="abstract member prev : unit -&gt; unit" Usage="iBidirectionalIterator.prev " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a36f4-105">将迭代器定位到紧靠当前元素之前的元素。</span><span class="sxs-lookup"><span data-stu-id="a36f4-105">Positions the iterator to the element immediately before the current element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
