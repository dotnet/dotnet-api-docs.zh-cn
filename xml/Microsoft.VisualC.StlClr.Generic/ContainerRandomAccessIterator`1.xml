<Type Name="ContainerRandomAccessIterator&lt;TValue&gt;" FullName="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d409d21723d34dfc6a0456a74a0b822c2c82bb1f" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102059048" /></Metadata><TypeSignature Language="C#" Value="public class ContainerRandomAccessIterator&lt;TValue&gt; : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ContainerRandomAccessIterator`1&lt;TValue&gt; extends System.Object implements class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ContainerRandomAccessIterator(Of TValue)&#xA;Implements IRandomAccessIterator(Of TValue)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TValue&gt;&#xA;public ref class ContainerRandomAccessIterator : Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt;" />
  <TypeSignature Language="F#" Value="type ContainerRandomAccessIterator&lt;'Value&gt; = class&#xA;    interface IRandomAccessIterator&lt;'Value&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IBaseIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IForwardIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IOutputIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TValue"><span data-ttu-id="45ce6-101">受控序列中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="45ce6-101">The type of an element in the controlled sequence.</span></span></typeparam>
    <summary><span data-ttu-id="45ce6-102">提供支持以下操作的迭代器：通过调用 <c>operator++</c> 向前移动一个位置、通过调用 <c>operator--</c> 向后移动一个位置、通过使用 <c>operator[]</c> 访问元素以及通过使用指针算法访问元素。</span><span class="sxs-lookup"><span data-stu-id="45ce6-102">Provides an iterator that supports the following operations: moving forward one position by calling <c>operator++</c>, moving backward one position by calling <c>operator--</c>, accessing an element by using <c>operator[]</c>, and accessing an element by using pointer arithmetic.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[unnamed_parm](~/includes/unnamed-parm-md.md)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45ce6-103">分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="45ce6-103">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContainerRandomAccessIterator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContainerRandomAccessIterator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45ce6-104">分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="45ce6-104">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContainerRandomAccessIterator (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (_Right As ContainerRandomAccessIterator(Of TValue))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContainerRandomAccessIterator(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt;" Usage="new Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; _Right" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="45ce6-105">要复制到当前容器的现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="45ce6-105">An existing <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object to be copied to the current container.</span></span></param>
        <summary><span data-ttu-id="45ce6-106">从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="45ce6-106">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object from an existing <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContainerRandomAccessIterator (Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer&lt;TValue&gt; _Cont, int _Offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1&lt;!TValue&gt; _Cont, int32 _Offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.#ctor(Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer{`0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (_Cont As IRandomAccessContainer(Of TValue), _Offset As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContainerRandomAccessIterator(Microsoft::VisualC::StlClr::Generic::IRandomAccessContainer&lt;TValue&gt; ^ _Cont, int _Offset);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; : Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer&lt;'Value&gt; * int -&gt; Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt;" Usage="new Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; (_Cont, _Offset)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="_Cont" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer&lt;TValue&gt;" />
        <Parameter Name="_Offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Cont"><span data-ttu-id="45ce6-107">要复制到当前容器的现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="45ce6-107">An existing <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /> object to be copied to the current container.</span></span></param>
        <param name="_Offset"><span data-ttu-id="45ce6-108">创建后迭代器将指向的元素的偏移量。</span><span class="sxs-lookup"><span data-stu-id="45ce6-108">The offset of the element that the iterator will point to after creation.</span></span></param>
        <summary><span data-ttu-id="45ce6-109">从现有 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象分配并初始化新的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="45ce6-109">Allocates and initializes a new <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object from an existing <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessContainer`1" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="containerRandomAccessIterator.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45ce6-110">创建当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象的副本。</span><span class="sxs-lookup"><span data-stu-id="45ce6-110">Creates a copy of the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="45ce6-111">当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象的副本。</span><span class="sxs-lookup"><span data-stu-id="45ce6-111">A copy of the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="container">
      <MemberSignature Language="C#" Value="public virtual object container ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object container() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.container" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function container () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ container();" />
      <MemberSignature Language="F#" Value="abstract member container : unit -&gt; obj&#xA;override this.container : unit -&gt; obj" Usage="containerRandomAccessIterator.container " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45ce6-112">获取迭代器正在遍历的容器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-112">Gets the container that the iterator is traversing.</span></span></summary>
        <returns><span data-ttu-id="45ce6-113">迭代器正在遍历的容器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-113">The container that the iterator is traversing.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="distance">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45ce6-114">确定当前迭代器指向的元素与给定迭代器指向的元素之间的距离。</span><span class="sxs-lookup"><span data-stu-id="45ce6-114">Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="distance">
      <MemberSignature Language="C#" Value="public int distance (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 distance(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Function distance (_Right As ContainerRandomAccessIterator(Of TValue)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int distance(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.distance : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; int" Usage="containerRandomAccessIterator.distance _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="45ce6-115">一个有效迭代器，与当前迭代器指向同一个容器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-115">A valid iterator that points to the same container as the current iterator.</span></span></param>
        <summary><span data-ttu-id="45ce6-116">确定当前迭代器指向的元素与给定迭代器指向的元素之间的距离。</span><span class="sxs-lookup"><span data-stu-id="45ce6-116">Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</span></span></summary>
        <returns><span data-ttu-id="45ce6-117">当前迭代器指向的元素与 <paramref name="_Right" /> 指向的元素之间的距离，以元素数为单位。</span><span class="sxs-lookup"><span data-stu-id="45ce6-117">The distance, in number of elements, between the element that the current iterator is pointing to and the element that <paramref name="_Right" /> is pointing to.</span></span> <span data-ttu-id="45ce6-118">如果 <paramref name="_Right" /> 指向的元素位于当前迭代器指向的元素之前，则此数字为负数。</span><span class="sxs-lookup"><span data-stu-id="45ce6-118">This number will be negative if <paramref name="_Right" /> points to an element that is before the element that the current iterator points to.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="distance">
      <MemberSignature Language="C#" Value="public virtual int distance (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 distance(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function distance (_Right As IRandomAccessIterator(Of TValue)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int distance(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member distance : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; int&#xA;override this.distance : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; int" Usage="containerRandomAccessIterator.distance _Right" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="45ce6-119">一个有效迭代器，与当前迭代器指向同一个容器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-119">A valid iterator that points to the same container as the current iterator.</span></span></param>
        <summary><span data-ttu-id="45ce6-120">确定当前迭代器指向的元素与给定迭代器指向的元素之间的距离。</span><span class="sxs-lookup"><span data-stu-id="45ce6-120">Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</span></span></summary>
        <returns><span data-ttu-id="45ce6-121">当前迭代器指向的元素与 <paramref name="_Right" /> 指向的元素之间的距离，以元素数为单位。</span><span class="sxs-lookup"><span data-stu-id="45ce6-121">The distance, in number of elements, between the element that the current iterator is pointing to and the element that <paramref name="_Right" /> is pointing to.</span></span> <span data-ttu-id="45ce6-122">如果 <paramref name="_Right" /> 指向的元素位于当前迭代器指向的元素之前，则此数字为负数。</span><span class="sxs-lookup"><span data-stu-id="45ce6-122">This number will be negative if <paramref name="_Right" /> points to an element that is before the element that the current iterator points to.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="equal_to">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45ce6-123">确定两个迭代器是否为同一对象。</span><span class="sxs-lookup"><span data-stu-id="45ce6-123">Determines whether two iterators are the same object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="equal_to">
      <MemberSignature Language="C#" Value="public bool equal_to (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool equal_to(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Function equal_to (_Right As ContainerRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool equal_to(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.equal_to : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="containerRandomAccessIterator.equal_to _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="45ce6-124">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="45ce6-124">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object.</span></span></param>
        <summary><span data-ttu-id="45ce6-125">确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象相同。</span><span class="sxs-lookup"><span data-stu-id="45ce6-125">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object is the same as the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="45ce6-126">如果两个 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象为同一对象，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45ce6-126"><see langword="true" /> if the two <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> objects are the same object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="equal_to">
      <MemberSignature Language="C#" Value="public virtual bool equal_to (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool equal_to(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.equal_to(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function equal_to (_Right As IInputIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool equal_to(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member equal_to : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; bool&#xA;override this.equal_to : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; bool" Usage="containerRandomAccessIterator.equal_to _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="45ce6-127">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="45ce6-127">The <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object.</span></span></param>
        <summary><span data-ttu-id="45ce6-128">确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象相同。</span><span class="sxs-lookup"><span data-stu-id="45ce6-128">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object is the same as the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="45ce6-129">如果两个迭代器为同一对象，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45ce6-129"><see langword="true" /> if the two iterators are the same object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_bias">
      <MemberSignature Language="C#" Value="public virtual int get_bias ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 get_bias() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_bias" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function get_bias () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int get_bias();" />
      <MemberSignature Language="F#" Value="abstract member get_bias : unit -&gt; int&#xA;override this.get_bias : unit -&gt; int" Usage="containerRandomAccessIterator.get_bias " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45ce6-130">获取迭代器的偏移。</span><span class="sxs-lookup"><span data-stu-id="45ce6-130">Gets the bias of the iterator.</span></span> <span data-ttu-id="45ce6-131">偏移是迭代器相对于元素零的偏移量。</span><span class="sxs-lookup"><span data-stu-id="45ce6-131">The bias is the offset of the iterator from element zero.</span></span></summary>
        <returns><span data-ttu-id="45ce6-132">迭代器的偏移。</span><span class="sxs-lookup"><span data-stu-id="45ce6-132">The bias of the iterator.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_cref">
      <MemberSignature Language="C#" Value="public virtual ref TValue get_cref ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue get_cref() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_cref" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function get_cref () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TValue % get_cref();" />
      <MemberSignature Language="F#" Value="abstract member get_cref : unit -&gt; 'Value&#xA;override this.get_cref : unit -&gt; 'Value" Usage="containerRandomAccessIterator.get_cref " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45ce6-133">返回对迭代器当前指向的元素的常量引用。</span><span class="sxs-lookup"><span data-stu-id="45ce6-133">Returns a constant reference to the element that the iterator is currently pointing to.</span></span></summary>
        <returns><span data-ttu-id="45ce6-134">对迭代器当前指向的元素的常量引用。</span><span class="sxs-lookup"><span data-stu-id="45ce6-134">A constant reference to the element that the iterator is currently pointing to.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_node">
      <MemberSignature Language="C#" Value="public virtual object get_node ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object get_node() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_node" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function get_node () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ get_node();" />
      <MemberSignature Language="F#" Value="abstract member get_node : unit -&gt; obj&#xA;override this.get_node : unit -&gt; obj" Usage="containerRandomAccessIterator.get_node " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45ce6-135">获取迭代器指向的节点或元素。</span><span class="sxs-lookup"><span data-stu-id="45ce6-135">Gets the node, or element, that the iterator is pointing to.</span></span></summary>
        <returns><span data-ttu-id="45ce6-136">迭代器指向的节点。</span><span class="sxs-lookup"><span data-stu-id="45ce6-136">The node that the iterator is pointing to.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="get_ref">
      <MemberSignature Language="C#" Value="public virtual ref TValue get_ref ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !TValue get_ref() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.get_ref" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function get_ref () As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual TValue % get_ref();" />
      <MemberSignature Language="F#" Value="abstract member get_ref : unit -&gt; 'Value&#xA;override this.get_ref : unit -&gt; 'Value" Usage="containerRandomAccessIterator.get_ref " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45ce6-137">返回对迭代器当前指向的元素的引用。</span><span class="sxs-lookup"><span data-stu-id="45ce6-137">Returns a reference to the element that the iterator is currently pointing to.</span></span></summary>
        <returns><span data-ttu-id="45ce6-138">对迭代器当前指向的元素的引用。</span><span class="sxs-lookup"><span data-stu-id="45ce6-138">A reference to the element that the iterator is currently pointing to.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TValue this[int _Pos] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TValue Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Property Item(_Pos As Integer) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TValue default[int] { TValue get(int _Pos); void set(int _Pos, TValue value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : 'Value with get, set" Usage="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt;.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Pos" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Pos"><span data-ttu-id="45ce6-139">要访问的元素的位置。</span><span class="sxs-lookup"><span data-stu-id="45ce6-139">The position of the element to access.</span></span></param>
        <summary><span data-ttu-id="45ce6-140">访问容器中给定位置的元素。</span><span class="sxs-lookup"><span data-stu-id="45ce6-140">Accesses the element at the given position in the container.</span></span></summary>
        <value><span data-ttu-id="45ce6-141">容器中给定位置的元素。</span><span class="sxs-lookup"><span data-stu-id="45ce6-141">The element at the given position in the container.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="less_than">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45ce6-142">确定容器中当前迭代器指向的元素是否位于给定迭代器指向的元素之前。</span><span class="sxs-lookup"><span data-stu-id="45ce6-142">Determines whether the current iterator is pointing to an element in the container that is before the element that a given iterator points to.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="less_than">
      <MemberSignature Language="C#" Value="public bool less_than (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool less_than(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Function less_than (_Right As ContainerRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool less_than(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.less_than : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="containerRandomAccessIterator.less_than _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="45ce6-143">一个有效迭代器，与当前迭代器指向同一个容器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-143">A valid iterator pointing to the same container as the current iterator.</span></span></param>
        <summary><span data-ttu-id="45ce6-144">确定容器中当前迭代器指向的元素是否位于给定迭代器指向的元素之前。</span><span class="sxs-lookup"><span data-stu-id="45ce6-144">Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.</span></span></summary>
        <returns><span data-ttu-id="45ce6-145">如果当前迭代器指向的元素位于 <paramref name="_Right" /> 指向的元素之前，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45ce6-145"><see langword="true" /> if the current iterator is pointing to an element that comes before the element that <paramref name="_Right" /> is pointing to; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="less_than">
      <MemberSignature Language="C#" Value="public virtual bool less_than (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool less_than(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function less_than (_Right As IRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool less_than(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member less_than : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; bool&#xA;override this.less_than : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="containerRandomAccessIterator.less_than _Right" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="45ce6-146">一个有效迭代器，与当前迭代器指向同一个容器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-146">A valid iterator that points to the same container as the current iterator.</span></span></param>
        <summary><span data-ttu-id="45ce6-147">确定容器中当前迭代器指向的元素是否位于给定迭代器指向的元素之前。</span><span class="sxs-lookup"><span data-stu-id="45ce6-147">Determines whether the current iterator is pointing to an element in the container that is before the element that the given iterator points to.</span></span></summary>
        <returns><span data-ttu-id="45ce6-148">如果当前迭代器指向的元素位于 <paramref name="_Right" /> 指向的元素之前，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45ce6-148"><see langword="true" /> if the current iterator is pointing to an element that comes before the element that <paramref name="_Right" /> is pointing to; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="move">
      <MemberSignature Language="C#" Value="public virtual int move (int _Offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 move(int32 _Offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.move(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function move (_Offset As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int move(int _Offset);" />
      <MemberSignature Language="F#" Value="abstract member move : int -&gt; int&#xA;override this.move : int -&gt; int" Usage="containerRandomAccessIterator.move _Offset" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Offset"><span data-ttu-id="45ce6-149">要遍历的元素数。</span><span class="sxs-lookup"><span data-stu-id="45ce6-149">The number of elements to traverse.</span></span> <span data-ttu-id="45ce6-150">若要向前移动迭代器，请指定一个正数。</span><span class="sxs-lookup"><span data-stu-id="45ce6-150">To move the iterator forward, specify a positive number.</span></span> <span data-ttu-id="45ce6-151">若要向后移动迭代器，请使用一个负数。</span><span class="sxs-lookup"><span data-stu-id="45ce6-151">To move the iterator backward, use a negative number.</span></span></param>
        <summary><span data-ttu-id="45ce6-152">按给定的元素数移动迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-152">Moves the iterator by the given number of elements.</span></span></summary>
        <returns><span data-ttu-id="45ce6-153">遍历的实际元素数。</span><span class="sxs-lookup"><span data-stu-id="45ce6-153">The actual number of elements traversed.</span></span> <span data-ttu-id="45ce6-154">如果在迭代所需的元素数之前到达了容器的开始或末尾位置，则此数字将与 <paramref name="_Offset" /> 不同。</span><span class="sxs-lookup"><span data-stu-id="45ce6-154">This number will differ from <paramref name="_Offset" /> if the beginning or end of the container is reached before iterating the desired number of elements.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="next">
      <MemberSignature Language="C#" Value="public virtual void next ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void next() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.next" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub next ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void next();" />
      <MemberSignature Language="F#" Value="abstract member next : unit -&gt; unit&#xA;override this.next : unit -&gt; unit" Usage="containerRandomAccessIterator.next " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45ce6-155">将迭代器递增到基础容器中的下一个位置，如果已完全遍历该容器，则递增到容器末尾以外的第一个位置。</span><span class="sxs-lookup"><span data-stu-id="45ce6-155">Increments the iterator to the next position in the underlying container, or to the first position beyond the end of container if the container has been completely traversed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45ce6-156">按给定的元素数递增迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-156">Increments the iterator by the given number of elements.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public void operator + (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; , int _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance void op_Addition(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; , int32 _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Operator + (ByRef  As ContainerRandomAccessIterator(Of TValue), _Right As Integer) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator +(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ % , int _Right);" />
      <MemberSignature Language="F#" Value="member this.( + ) : ContainerRandomAccessIterator * int -&gt; unit" Usage=" + _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Right" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="45ce6-157">当前迭代器的引用。</span><span class="sxs-lookup"><span data-stu-id="45ce6-157">A reference to the current iterator.</span></span></param>
        <param name="_Right"><span data-ttu-id="45ce6-158">要增加的元素的数目。</span><span class="sxs-lookup"><span data-stu-id="45ce6-158">The number of elements to increment.</span></span></param>
        <summary><span data-ttu-id="45ce6-159">按给定的元素数递增迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-159">Increments the iterator by the given number of elements.</span></span> <span data-ttu-id="45ce6-160">在加法运算符的右侧指定该整数参数。</span><span class="sxs-lookup"><span data-stu-id="45ce6-160">The integer parameter is specified on the right side of the addition operator.</span></span></summary>
        <returns><span data-ttu-id="45ce6-161">迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-161">An iterator.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static void operator + (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; , int _Left, Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname void op_Addition(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; , int32 _Left, class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Addition(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32,Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (ByRef  As ContainerRandomAccessIterator(Of TValue), _Left As Integer, _Right As ContainerRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ^ operator +(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ % , int _Left, Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="static member ( + ) : ContainerRandomAccessIterator * int * Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; unit" Usage=" + _Left _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Left" Type="System.Int32" />
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="45ce6-162">当前迭代器的引用。</span><span class="sxs-lookup"><span data-stu-id="45ce6-162">A reference to the current iterator.</span></span></param>
        <param name="_Left"><span data-ttu-id="45ce6-163">要增加的元素的数目。</span><span class="sxs-lookup"><span data-stu-id="45ce6-163">The number of elements to increment.</span></span></param>
        <param name="_Right"><span data-ttu-id="45ce6-164">要递增的迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-164">The iterator to increment.</span></span></param>
        <summary><span data-ttu-id="45ce6-165">按给定的元素数递增迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-165">Increments the iterator by the given number of elements.</span></span> <span data-ttu-id="45ce6-166">在加法运算符的左侧指定该整数参数。</span><span class="sxs-lookup"><span data-stu-id="45ce6-166">The integer parameter is specified on the left side of the addition operator.</span></span></summary>
        <returns><span data-ttu-id="45ce6-167">迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-167">An iterator.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Assign">
      <MemberSignature Language="C#" Value="public Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; op_Assign (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; op_Assign(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Assign(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public op_Assign (_Right As ContainerRandomAccessIterator(Of TValue)) As ContainerRandomAccessIterator(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ op_Assign(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.op_Assign : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt;" Usage="containerRandomAccessIterator.op_Assign _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="45ce6-168">要分配给当前对象的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="45ce6-168">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object to assign to the current object.</span></span></param>
        <summary><span data-ttu-id="45ce6-169">将给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象分配给当前对象。</span><span class="sxs-lookup"><span data-stu-id="45ce6-169">Assigns the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object to the current object.</span></span></summary>
        <returns><span data-ttu-id="45ce6-170">当前对象 (\*this)。</span><span class="sxs-lookup"><span data-stu-id="45ce6-170">The current object (\*this).</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Decrement">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45ce6-171">迭代器递减一个元素。</span><span class="sxs-lookup"><span data-stu-id="45ce6-171">Decrements the iterator by one element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public void operator -- (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance void op_Decrement(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public op_Decrement (ByRef  As ContainerRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator --(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="member this.op_Decrement : ContainerRandomAccessIterator -&gt; unit" Usage="containerRandomAccessIterator.op_Decrement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="45ce6-172">当前迭代器的引用。</span><span class="sxs-lookup"><span data-stu-id="45ce6-172">A reference to the current iterator.</span></span></param>
        <summary><span data-ttu-id="45ce6-173">迭代器递减一个元素。</span><span class="sxs-lookup"><span data-stu-id="45ce6-173">Decrements the iterator by one element.</span></span> <span data-ttu-id="45ce6-174">这是减量运算符的前缀版本。</span><span class="sxs-lookup"><span data-stu-id="45ce6-174">This is the prefix version of the decrement operator.</span></span></summary>
        <returns><span data-ttu-id="45ce6-175">迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-175">An iterator.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Decrement">
      <MemberSignature Language="C#" Value="public void operator -- (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; , int );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.void op_Decrement(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; , int32 ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Decrement(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public op_Decrement (ByRef  As ContainerRandomAccessIterator(Of TValue),  As Integer) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator --(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ % , int );" />
      <MemberSignature Language="F#" Value="member this.op_Decrement :  * int -&gt; unit" Usage="containerRandomAccessIterator.op_Decrement (, )" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="System.Int32" RefType="ref" />
        <Parameter Name="A_0" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="45ce6-176">当前迭代器的引用。</span><span class="sxs-lookup"><span data-stu-id="45ce6-176">A reference to the current iterator.</span></span></param>
        <param name="A_0"><span data-ttu-id="45ce6-177">未使用的参数，用于指示这是运算符的后缀版本。</span><span class="sxs-lookup"><span data-stu-id="45ce6-177">An unused parameter that indicates this is the postfix version of the operator.</span></span></param>
        <summary><span data-ttu-id="45ce6-178">迭代器递减一个元素。</span><span class="sxs-lookup"><span data-stu-id="45ce6-178">Decrements the iterator by one element.</span></span> <span data-ttu-id="45ce6-179">这是减量运算符的后缀版本。</span><span class="sxs-lookup"><span data-stu-id="45ce6-179">This is the postfix version of the decrement operator.</span></span></summary>
        <returns><span data-ttu-id="45ce6-180">迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-180">An iterator.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Equality">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45ce6-181">确定两个迭代器是否为同一对象。</span><span class="sxs-lookup"><span data-stu-id="45ce6-181">Determines whether two iterators are the same object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public bool operator == (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_Equality(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator == (_Right As ContainerRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator ==(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( = ) : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="= _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="45ce6-182">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="45ce6-182">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object.</span></span></param>
        <summary><span data-ttu-id="45ce6-183">确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象相同。</span><span class="sxs-lookup"><span data-stu-id="45ce6-183">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object is the same as the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="45ce6-184">如果两个迭代器为同一对象，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45ce6-184"><see langword="true" /> if the two iterators are the same object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public bool operator == (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_Equality(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Equality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Operator == (_Right As IInputIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator ==(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( = ) : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; bool" Usage="= _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="45ce6-185">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="45ce6-185">The <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object.</span></span></param>
        <summary><span data-ttu-id="45ce6-186">确定给定 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象相同。</span><span class="sxs-lookup"><span data-stu-id="45ce6-186">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object is the same as the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="45ce6-187">如果两个迭代器为同一对象，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45ce6-187"><see langword="true" /> if the two iterators are the same object; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_GreaterThan">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45ce6-188">确定迭代器的位置是否大于另一个迭代器的位置。</span><span class="sxs-lookup"><span data-stu-id="45ce6-188">Determines whether the position of an iterator is greater than the position of another iterator.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public bool operator &gt; (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_GreaterThan(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator &gt; (_Right As ContainerRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator &gt;(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( &gt; ) : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="&gt; _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="45ce6-189">要与左侧迭代器进行比较的迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-189">The iterator to compare with the left-side iterator.</span></span></param>
        <summary><span data-ttu-id="45ce6-190">确定左侧迭代器的位置是否大于给定的右侧迭代器的位置。</span><span class="sxs-lookup"><span data-stu-id="45ce6-190">Determines whether the position of the left-side iterator is greater than the position of the given right-side iterator.</span></span></summary>
        <returns><span data-ttu-id="45ce6-191">如果左侧迭代器大于给定的右侧迭代器，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45ce6-191"><see langword="true" /> if the left-side iterator is greater than the given right-side iterator; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool operator &gt; (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Left, Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_GreaterThan(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Left, class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &gt; (_Left As IRandomAccessIterator(Of TValue), _Right As ContainerRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &gt;(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Left, Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="static member ( &gt; ) : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="_Left &gt; _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Left" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Left"><span data-ttu-id="45ce6-192">要与右侧迭代器进行比较的迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-192">The iterator to compare with the right-side iterator.</span></span></param>
        <param name="_Right"><span data-ttu-id="45ce6-193">要与左侧迭代器进行比较的迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-193">The iterator to compare with the left-side iterator.</span></span></param>
        <summary><span data-ttu-id="45ce6-194">确定给定的左侧迭代器的位置是否大于给定的右侧迭代器的位置。</span><span class="sxs-lookup"><span data-stu-id="45ce6-194">Determines whether the position of the given left-side iterator is greater than the position of the given right-side iterator.</span></span></summary>
        <returns><span data-ttu-id="45ce6-195">如果给定的左侧迭代器大于给定的右侧迭代器，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45ce6-195"><see langword="true" /> if the given left-side iterator is greater than the given right-side iterator; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_GreaterThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45ce6-196">确定迭代器的位置是否大于或等于另一个迭代器的位置。</span><span class="sxs-lookup"><span data-stu-id="45ce6-196">Determines whether the position of an iterator is greater than or equal to the position of another iterator.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public bool operator &gt;= (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_GreaterThanOrEqual(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator &gt;= (_Right As ContainerRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator &gt;=(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( &gt;= ) : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="&gt;= _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="45ce6-197">要与左侧迭代器进行比较的迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-197">The iterator to compare with the left-side iterator.</span></span></param>
        <summary><span data-ttu-id="45ce6-198">确定左侧迭代器的位置是否大于或等于给定的右侧迭代器的位置。</span><span class="sxs-lookup"><span data-stu-id="45ce6-198">Determines whether the position of the left-side iterator is greater than or equal to the position of the given right-side iterator.</span></span></summary>
        <returns><span data-ttu-id="45ce6-199">如果左侧迭代器大于或等于给定的右侧迭代器，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45ce6-199"><see langword="true" /> if the left-side iterator is greater than or equal to the given right-side iterator; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public bool operator &gt;= (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_GreaterThanOrEqual(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_GreaterThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Operator &gt;= (_Right As IRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator &gt;=(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( &gt;= ) : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="&gt;= _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="45ce6-200">要与左侧迭代器进行比较的迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-200">The iterator to compare with the left-side iterator.</span></span></param>
        <summary><span data-ttu-id="45ce6-201">确定左侧迭代器的位置是否大于或等于给定的右侧迭代器的位置。</span><span class="sxs-lookup"><span data-stu-id="45ce6-201">Determines whether the position of the left-side iterator is greater than or equal to the position of the given right-side iterator.</span></span></summary>
        <returns><span data-ttu-id="45ce6-202">如果左侧迭代器大于或等于给定的右侧迭代器，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45ce6-202"><see langword="true" /> if the left-side iterator is greater than or equal to the given right-side iterator; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public implicit operator Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; op_Implicit() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Implicit~Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Widening Operator CType () As IRandomAccessIterator(Of TValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; operator Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^();" />
      <MemberSignature Language="F#" Value="member this.op_Implicit : unit -&gt; Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt;" Usage="containerRandomAccessIterator.op_Implicit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45ce6-203">将 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 转换为 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />。</span><span class="sxs-lookup"><span data-stu-id="45ce6-203">Converts a <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> to an <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</span></span></summary>
        <returns><span data-ttu-id="45ce6-204">当前迭代器，作为一个 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />。</span><span class="sxs-lookup"><span data-stu-id="45ce6-204">The current iterator as an <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Increment">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45ce6-205">迭代器递增一个元素。</span><span class="sxs-lookup"><span data-stu-id="45ce6-205">Increments the iterator by one element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public void operator ++ (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance void op_Increment(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@)" />
      <MemberSignature Language="VB.NET" Value="Public op_Increment (ByRef  As ContainerRandomAccessIterator(Of TValue)) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator ++(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ % );" />
      <MemberSignature Language="F#" Value="member this.op_Increment : ContainerRandomAccessIterator -&gt; unit" Usage="containerRandomAccessIterator.op_Increment " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="45ce6-206">当前迭代器的引用。</span><span class="sxs-lookup"><span data-stu-id="45ce6-206">A reference to the current iterator.</span></span></param>
        <summary><span data-ttu-id="45ce6-207">迭代器递增一个元素。</span><span class="sxs-lookup"><span data-stu-id="45ce6-207">Increments the iterator by one element.</span></span> <span data-ttu-id="45ce6-208">这是递增运算符的前缀版本。</span><span class="sxs-lookup"><span data-stu-id="45ce6-208">This is the prefix version of the increment operator.</span></span></summary>
        <returns><span data-ttu-id="45ce6-209">迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-209">An iterator.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Increment">
      <MemberSignature Language="C#" Value="public void operator ++ (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; , int );" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance class System.void op_Increment(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; , int32 ) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Increment(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public op_Increment (ByRef  As ContainerRandomAccessIterator(Of TValue),  As Integer) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator ++(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ % , int );" />
      <MemberSignature Language="F#" Value="member this.op_Increment :  * int -&gt; unit" Usage="containerRandomAccessIterator.op_Increment (, )" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="System.Int32" RefType="ref" />
        <Parameter Name="A_0" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="45ce6-210">当前迭代器的引用。</span><span class="sxs-lookup"><span data-stu-id="45ce6-210">A reference to the current iterator.</span></span></param>
        <param name="A_0"><span data-ttu-id="45ce6-211">未使用的参数，用于指示这是运算符的后缀版本。</span><span class="sxs-lookup"><span data-stu-id="45ce6-211">An unused parameter that indicates this is the postfix version of the operator.</span></span></param>
        <summary><span data-ttu-id="45ce6-212">迭代器递增一个元素。</span><span class="sxs-lookup"><span data-stu-id="45ce6-212">Increments the iterator by one element.</span></span> <span data-ttu-id="45ce6-213">这是增量运算符的后缀版本。</span><span class="sxs-lookup"><span data-stu-id="45ce6-213">This is the postfix version of the increment operator.</span></span></summary>
        <returns><span data-ttu-id="45ce6-214">迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-214">An iterator.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Inequality">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45ce6-215">确定两个迭代器是否为不同的对象。</span><span class="sxs-lookup"><span data-stu-id="45ce6-215">Determines whether two iterators are not the same object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public bool operator != (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_Inequality(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator != (_Right As ContainerRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator !=(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.op_Inequality : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="containerRandomAccessIterator.op_Inequality _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="45ce6-216">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="45ce6-216">The <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object.</span></span></param>
        <summary><span data-ttu-id="45ce6-217">确定给定的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象是否与当前的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象不同。</span><span class="sxs-lookup"><span data-stu-id="45ce6-217">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object differs from the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="45ce6-218">如果两个迭代器是不同的对象，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45ce6-218"><see langword="true" /> if the two iterators are different objects; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public bool operator != (Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_Inequality(class Microsoft.VisualC.StlClr.Generic.IInputIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Inequality(Microsoft.VisualC.StlClr.Generic.IInputIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Operator != (_Right As IInputIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator !=(Microsoft::VisualC::StlClr::Generic::IInputIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.op_Inequality : Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;'Value&gt; -&gt; bool" Usage="containerRandomAccessIterator.op_Inequality _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="45ce6-219">要与当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象进行比较的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="45ce6-219">The <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object to compare with the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object.</span></span></param>
        <summary><span data-ttu-id="45ce6-220">确定给定的 <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> 对象是否与当前的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> 对象不同。</span><span class="sxs-lookup"><span data-stu-id="45ce6-220">Determines whether the given <see cref="T:Microsoft.VisualC.StlClr.Generic.IInputIterator`1" /> object differs from the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object.</span></span></summary>
        <returns><span data-ttu-id="45ce6-221">如果两个迭代器是不同的对象，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45ce6-221"><see langword="true" /> if the two iterators are different objects; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_LessThan">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45ce6-222">确定迭代器的位置是否小于另一个迭代器的位置。</span><span class="sxs-lookup"><span data-stu-id="45ce6-222">Determines whether the position of an iterator is less than the position of another iterator.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public bool operator &lt; (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_LessThan(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator &lt; (_Right As ContainerRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator &lt;(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( &lt; ) : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="&lt; _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="45ce6-223">要与左侧迭代器进行比较的迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-223">The iterator to compare with the left-side iterator.</span></span></param>
        <summary><span data-ttu-id="45ce6-224">确定左侧迭代器的位置是否小于给定的右侧迭代器的位置。</span><span class="sxs-lookup"><span data-stu-id="45ce6-224">Determines whether the position of the left-side iterator is less than the position of the given right-side iterator.</span></span></summary>
        <returns><span data-ttu-id="45ce6-225">如果左侧迭代器小于给定的右侧迭代器，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45ce6-225"><see langword="true" /> if the left-side iterator is less than the given right-side iterator; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public bool operator &lt; (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_LessThan(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThan(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Operator &lt; (_Right As IRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator &lt;(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( &lt; ) : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="&lt; _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="45ce6-226">要与左侧迭代器进行比较的迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-226">The iterator to compare with the left-side iterator.</span></span></param>
        <summary><span data-ttu-id="45ce6-227">确定左侧迭代器的位置是否小于给定的右侧迭代器的位置。</span><span class="sxs-lookup"><span data-stu-id="45ce6-227">Determines whether the position of the left-side iterator is less than the position of the given right-side iterator.</span></span></summary>
        <returns><span data-ttu-id="45ce6-228">如果左侧迭代器小于给定的右侧迭代器，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45ce6-228"><see langword="true" /> if the left-side iterator is less than the given right-side iterator; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_LessThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45ce6-229">确定迭代器的位置是否小于或等于另一个迭代器的位置。</span><span class="sxs-lookup"><span data-stu-id="45ce6-229">Determines whether the position of an iterator is less than or equal to the position of another iterator.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public bool operator &lt;= (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance bool op_LessThanOrEqual(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Operator &lt;= (_Right As ContainerRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool operator &lt;=(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( &lt;= ) : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="&lt;= _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="45ce6-230">要与左侧迭代器进行比较的迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-230">The iterator to compare with the left-side iterator.</span></span></param>
        <summary><span data-ttu-id="45ce6-231">确定左侧迭代器的位置是否小于或等于给定的右侧迭代器的位置。</span><span class="sxs-lookup"><span data-stu-id="45ce6-231">Determines whether the position of the left-side iterator is less than or equal to the position of the given right-side iterator.</span></span></summary>
        <returns><span data-ttu-id="45ce6-232">如果左侧迭代器小于或等于给定的右侧迭代器，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45ce6-232"><see langword="true" /> if the left-side iterator is less than or equal to the given right-side iterator; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool operator &lt;= (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Left, Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_LessThanOrEqual(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Left, class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_LessThanOrEqual(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0},Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator &lt;= (_Left As IRandomAccessIterator(Of TValue), _Right As ContainerRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator &lt;=(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Left, Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="static member ( &lt;= ) : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; * Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="_Left &lt;= _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Left" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Left"><span data-ttu-id="45ce6-233">要与右侧迭代器进行比较的迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-233">The iterator to compare with the right-side iterator.</span></span></param>
        <param name="_Right"><span data-ttu-id="45ce6-234">要与左侧迭代器进行比较的迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-234">The iterator to compare with the left-side iterator.</span></span></param>
        <summary><span data-ttu-id="45ce6-235">确定给定的左侧迭代器的位置是否小于给定的右侧迭代器的位置。</span><span class="sxs-lookup"><span data-stu-id="45ce6-235">Determines whether the position of the given left-side iterator is less than the position of the given right-side iterator.</span></span></summary>
        <returns><span data-ttu-id="45ce6-236">如果给定的左侧迭代器小于或等于给定的右侧迭代器，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45ce6-236"><see langword="true" /> if the given left-side iterator is less than or equal to the given right-side iterator; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_MemberSelection">
      <MemberSignature Language="C#" Value="public static ref TValue op_MemberSelection (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Left);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname !TValue op_MemberSelection(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Left) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_MemberSelection(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_MemberSelection (_Left As ContainerRandomAccessIterator(Of TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TValue % op_MemberSelection(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Left);" />
      <MemberSignature Language="F#" Value="static member op_MemberSelection : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; 'Value" Usage="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt;.op_MemberSelection _Left" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Left" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Left"><span data-ttu-id="45ce6-237">应用该运算符的迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-237">The iterator that the operator is applied to.</span></span></param>
        <summary><span data-ttu-id="45ce6-238">返回迭代器当前指向的元素。</span><span class="sxs-lookup"><span data-stu-id="45ce6-238">Returns the element that the iterator is currently pointing to.</span></span></summary>
        <returns><span data-ttu-id="45ce6-239">迭代器当前指向的元素。</span><span class="sxs-lookup"><span data-stu-id="45ce6-239">The element that the iterator is currently pointing to.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_PointerDereference">
      <MemberSignature Language="C#" Value="public static ref TValue op_PointerDereference (Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; _Left);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname !TValue op_PointerDereference(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt; _Left) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_PointerDereference(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}|System.Runtime.CompilerServices.IsImplicitlyDereferenced)" />
      <MemberSignature Language="VB.NET" Value="Public Shared op_PointerDereference (_Left As ContainerRandomAccessIterator(Of TValue)) As TValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TValue % op_PointerDereference(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ _Left);" />
      <MemberSignature Language="F#" Value="static member op_PointerDereference : Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt; -&gt; 'Value" Usage="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;'Value&gt;.op_PointerDereference _Left" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1000")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue RefType="Ref">
        <ReturnType>TValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Left" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Left"><span data-ttu-id="45ce6-240">应用该运算符的迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-240">The iterator that the operator is applied to.</span></span></param>
        <summary><span data-ttu-id="45ce6-241">返回迭代器当前指向的元素。</span><span class="sxs-lookup"><span data-stu-id="45ce6-241">Returns the element that the iterator is currently pointing to.</span></span></summary>
        <returns><span data-ttu-id="45ce6-242">迭代器当前指向的元素。</span><span class="sxs-lookup"><span data-stu-id="45ce6-242">The element that the iterator is currently pointing to.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Subtraction">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="45ce6-243">按给定的元素数递减迭代器，或确定两个迭代器之间的差值。</span><span class="sxs-lookup"><span data-stu-id="45ce6-243">Decrements the iterator by the given number of elements, or determines the difference between two iterators.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public int operator - (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance int32 op_Subtraction(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Operator - (_Right As IRandomAccessIterator(Of TValue)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int operator -(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="member this.( - ) : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; int" Usage="- _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="45ce6-244">要从当前 <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> 对象中减去的 <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" />。</span><span class="sxs-lookup"><span data-stu-id="45ce6-244">The <see cref="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" /> to be subtracted from the current <see cref="T:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1" /> object.</span></span></param>
        <summary><span data-ttu-id="45ce6-245">确定两个迭代器之间的差值。</span><span class="sxs-lookup"><span data-stu-id="45ce6-245">Determines the difference between two iterators.</span></span></summary>
        <returns><span data-ttu-id="45ce6-246">两个迭代器之间差值（元素数）。</span><span class="sxs-lookup"><span data-stu-id="45ce6-246">The difference (number of elements) between the two iterators.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public void operator - (ref Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt; , int _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname instance void op_Subtraction(class Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1&lt;!TValue&gt;&amp; , int32 _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.op_Subtraction(Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator{`0}@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Operator - (ByRef  As ContainerRandomAccessIterator(Of TValue), _Right As Integer) As Void" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ^ operator -(Microsoft::VisualC::StlClr::Generic::ContainerRandomAccessIterator&lt;TValue&gt; ^ % , int _Right);" />
      <MemberSignature Language="F#" Value="member this.( - ) : ContainerRandomAccessIterator * int -&gt; unit" Usage=" - _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="" Type="Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator&lt;TValue&gt;" RefType="ref" />
        <Parameter Name="_Right" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name=""><span data-ttu-id="45ce6-247">当前迭代器的引用。</span><span class="sxs-lookup"><span data-stu-id="45ce6-247">A reference to the current iterator.</span></span></param>
        <param name="_Right"><span data-ttu-id="45ce6-248">要减少的元素的数目。</span><span class="sxs-lookup"><span data-stu-id="45ce6-248">The number of elements to decrement.</span></span></param>
        <summary><span data-ttu-id="45ce6-249">按给定的元素数递减迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-249">Decrements the iterator by the given number of elements.</span></span> <span data-ttu-id="45ce6-250">在减法运算符的右侧指定该整数参数。</span><span class="sxs-lookup"><span data-stu-id="45ce6-250">The integer parameter is specified on the right side of the subtraction operator.</span></span></summary>
        <returns><span data-ttu-id="45ce6-251">迭代器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-251">An iterator.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="prev">
      <MemberSignature Language="C#" Value="public virtual void prev ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void prev() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.prev" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub prev ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void prev();" />
      <MemberSignature Language="F#" Value="abstract member prev : unit -&gt; unit&#xA;override this.prev : unit -&gt; unit" Usage="containerRandomAccessIterator.prev " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45ce6-252">将迭代器定位到紧靠当前元素之前的元素。</span><span class="sxs-lookup"><span data-stu-id="45ce6-252">Positions the iterator to the element immediately before the current element.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="valid">
      <MemberSignature Language="C#" Value="public virtual bool valid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool valid() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.ContainerRandomAccessIterator`1.valid" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function valid () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool valid();" />
      <MemberSignature Language="F#" Value="abstract member valid : unit -&gt; bool&#xA;override this.valid : unit -&gt; bool" Usage="containerRandomAccessIterator.valid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="45ce6-253">确定迭代器是否有效并可安全用于遍历基础容器。</span><span class="sxs-lookup"><span data-stu-id="45ce6-253">Determines whether the iterator is valid and can be safely used to traverse the underlying container.</span></span></summary>
        <returns><span data-ttu-id="45ce6-254">如果迭代器有效并可安全使用，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="45ce6-254"><see langword="true" /> if the iterator is valid and safe to use; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
