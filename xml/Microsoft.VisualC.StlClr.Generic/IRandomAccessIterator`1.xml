<Type Name="IRandomAccessIterator&lt;TValue&gt;" FullName="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bf2f971e458ecec6a6dd362a98a92dbd949bc796" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="69316679" /></Metadata><TypeSignature Language="C#" Value="public interface IRandomAccessIterator&lt;TValue&gt; : Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;TValue&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IRandomAccessIterator`1&lt;TValue&gt; implements class Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator`1&lt;!TValue&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRandomAccessIterator(Of TValue)&#xA;Implements IBidirectionalIterator(Of TValue)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TValue&gt;&#xA;public interface class IRandomAccessIterator : Microsoft::VisualC::StlClr::Generic::IBidirectionalIterator&lt;TValue&gt;" />
  <TypeSignature Language="F#" Value="type IRandomAccessIterator&lt;'Value&gt; = interface&#xA;    interface IBidirectionalIterator&lt;'Value&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TValue" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IBaseIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IBidirectionalIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IForwardIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IInputIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Microsoft.VisualC.StlClr.Generic.IOutputIterator&lt;TValue&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TValue">[!INCLUDE[cpp_iter_arg](~/includes/cpp-iter-arg-md.md)]</typeparam>
    <summary><span data-ttu-id="8975f-101">定义随机访问迭代器的接口。</span><span class="sxs-lookup"><span data-stu-id="8975f-101">Defines the interface for a random access iterator.</span></span> <span data-ttu-id="8975f-102">随机访问迭代器支持以下操作：通过调用 <c>operator++</c> 向前移动一个位置、通过调用 <c>operator--</c> 向后移动一个位置、通过使用 <c>operator[]</c> 访问元素以及通过使用指针算法访问元素。</span><span class="sxs-lookup"><span data-stu-id="8975f-102">Random access iterators support the following operations: moving forward one position by calling <c>operator++</c>, moving backward one position by calling <c>operator--</c>, accessing an element by using <c>operator[]</c>, and accessing an element by using pointer arithmetic.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="distance">
      <MemberSignature Language="C#" Value="public int distance (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 distance(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.distance(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function distance (_Right As IRandomAccessIterator(Of TValue)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int distance(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member distance : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; int" Usage="iRandomAccessIterator.distance _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="8975f-103">一个有效迭代器，与当前迭代器指向同一个容器。</span><span class="sxs-lookup"><span data-stu-id="8975f-103">A valid iterator that points to the same container as the current iterator.</span></span></param>
        <summary><span data-ttu-id="8975f-104">确定当前迭代器指向的元素与给定迭代器指向的元素之间的距离。</span><span class="sxs-lookup"><span data-stu-id="8975f-104">Determines the distance between the element that the current iterator is pointing to and the element that the given iterator is pointing to.</span></span></summary>
        <returns><span data-ttu-id="8975f-105">当前迭代器指向的元素与 <paramref name="_Right" /> 指向的元素之间的距离，以元素数为单位。</span><span class="sxs-lookup"><span data-stu-id="8975f-105">The distance, in number of elements, between the element that the current iterator is pointing to and the element that <paramref name="_Right" /> is pointing to.</span></span> <span data-ttu-id="8975f-106">如果 <paramref name="_Right" /> 指向的元素位于当前迭代器指向的元素之前，则此数字为负数。</span><span class="sxs-lookup"><span data-stu-id="8975f-106">This number is negative if <paramref name="_Right" /> points to an element that is before the element that the current iterator points to.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="less_than">
      <MemberSignature Language="C#" Value="public bool less_than (Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt; _Right);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool less_than(class Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1&lt;!TValue&gt; _Right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.less_than(Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function less_than (_Right As IRandomAccessIterator(Of TValue)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool less_than(Microsoft::VisualC::StlClr::Generic::IRandomAccessIterator&lt;TValue&gt; ^ _Right);" />
      <MemberSignature Language="F#" Value="abstract member less_than : Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;'Value&gt; -&gt; bool" Usage="iRandomAccessIterator.less_than _Right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Right" Type="Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator&lt;TValue&gt;" />
      </Parameters>
      <Docs>
        <param name="_Right"><span data-ttu-id="8975f-107">一个有效迭代器，与当前迭代器指向同一个容器。</span><span class="sxs-lookup"><span data-stu-id="8975f-107">A valid iterator that points to the same container as the current iterator.</span></span></param>
        <summary><span data-ttu-id="8975f-108">确定容器中当前迭代器指向的元素是否位于给定迭代器指向的元素之前。</span><span class="sxs-lookup"><span data-stu-id="8975f-108">Determines whether the current iterator is pointing to an element in the container that precedes the element that the given iterator points to.</span></span></summary>
        <returns><span data-ttu-id="8975f-109">如果当前迭代器指向的元素位于 <paramref name="_Right" /> 指向的元素之前，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8975f-109"><see langword="true" /> if the current iterator is pointing to an element that comes before the element that <paramref name="_Right" /> is pointing to; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="move">
      <MemberSignature Language="C#" Value="public int move (int _Offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 move(int32 _Offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualC.StlClr.Generic.IRandomAccessIterator`1.move(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function move (_Offset As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int move(int _Offset);" />
      <MemberSignature Language="F#" Value="abstract member move : int -&gt; int" Usage="iRandomAccessIterator.move _Offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualC.STLCLR</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="_Offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="_Offset"><span data-ttu-id="8975f-110">要遍历的元素数。</span><span class="sxs-lookup"><span data-stu-id="8975f-110">The number of elements to traverse.</span></span> <span data-ttu-id="8975f-111">若要向前移动迭代器，请指定一个正数。</span><span class="sxs-lookup"><span data-stu-id="8975f-111">To move the iterator forward, specify a positive number.</span></span> <span data-ttu-id="8975f-112">若要向后移动迭代器，请使用一个负数。</span><span class="sxs-lookup"><span data-stu-id="8975f-112">To move the iterator backward, use a negative number.</span></span></param>
        <summary><span data-ttu-id="8975f-113">按给定的元素数移动迭代器。</span><span class="sxs-lookup"><span data-stu-id="8975f-113">Moves the iterator by the given number of elements.</span></span></summary>
        <returns><span data-ttu-id="8975f-114">遍历的实际元素数。</span><span class="sxs-lookup"><span data-stu-id="8975f-114">The actual number of elements traversed.</span></span> <span data-ttu-id="8975f-115">如果在迭代所需的元素数之前到达了容器的开始或末尾位置，则此数字将与 <paramref name="_Offset" /> 不同。</span><span class="sxs-lookup"><span data-stu-id="8975f-115">This number will differ from <paramref name="_Offset" /> if the beginning or end of the container is reached before iterating the desired number of elements.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
