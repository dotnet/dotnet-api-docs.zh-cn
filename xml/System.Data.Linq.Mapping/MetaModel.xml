<Type Name="MetaModel" FullName="System.Data.Linq.Mapping.MetaModel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0d04f680198c284d7ac42e3be494c57b5f6bf19f" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102088454" /></Metadata><TypeSignature Language="C#" Value="public abstract class MetaModel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MetaModel extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Mapping.MetaModel" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MetaModel" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetaModel abstract" />
  <TypeSignature Language="F#" Value="type MetaModel = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>一个表示数据库和域对象之间的映射的抽象。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MetaModel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Mapping.MetaModel.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MetaModel();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Data.Linq.Mapping.MetaModel" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextType">
      <MemberSignature Language="C#" Value="public abstract Type ContextType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ContextType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.MetaModel.ContextType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ContextType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ ContextType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContextType : Type" Usage="System.Data.Linq.Mapping.MetaModel.ContextType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在派生类中重写时，获取此模型描述的 <see cref="T:System.Data.Linq.DataContext" /> 类型。</summary>
        <value>数据上下文类型。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DatabaseName">
      <MemberSignature Language="C#" Value="public abstract string DatabaseName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DatabaseName" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.MetaModel.DatabaseName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DatabaseName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ DatabaseName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DatabaseName : string" Usage="System.Data.Linq.Mapping.MetaModel.DatabaseName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在派生类中重写时，获取数据库的名称。</summary>
        <value>用字符串表示的数据库名。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFunction">
      <MemberSignature Language="C#" Value="public abstract System.Data.Linq.Mapping.MetaFunction GetFunction (System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Linq.Mapping.MetaFunction GetFunction(class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Mapping.MetaModel.GetFunction(System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetFunction (method As MethodInfo) As MetaFunction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Data::Linq::Mapping::MetaFunction ^ GetFunction(System::Reflection::MethodInfo ^ method);" />
      <MemberSignature Language="F#" Value="abstract member GetFunction : System.Reflection.MethodInfo -&gt; System.Data.Linq.Mapping.MetaFunction" Usage="metaModel.GetFunction method" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.Mapping.MetaFunction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="method">对 <see cref="T:System.Data.Linq.DataContext" /> 或表示数据库函数的从属类定义的方法。</param>
        <summary>在派生类中重写时，获取与数据库函数对应的 <see cref="T:System.Data.Linq.Mapping.MetaFunction" />。</summary>
        <returns>与数据库函数相对应的元函数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数据库函数包括用户定义函数、表值函数和存储过程。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFunctions">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;System.Data.Linq.Mapping.MetaFunction&gt; GetFunctions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Linq.Mapping.MetaFunction&gt; GetFunctions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Mapping.MetaModel.GetFunctions" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetFunctions () As IEnumerable(Of MetaFunction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IEnumerable&lt;System::Data::Linq::Mapping::MetaFunction ^&gt; ^ GetFunctions();" />
      <MemberSignature Language="F#" Value="abstract member GetFunctions : unit -&gt; seq&lt;System.Data.Linq.Mapping.MetaFunction&gt;" Usage="metaModel.GetFunctions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Data.Linq.Mapping.MetaFunction&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中重写时，获取所有函数的枚举。</summary>
        <returns>一个可用于循环访问所有函数的枚举。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetaType">
      <MemberSignature Language="C#" Value="public abstract System.Data.Linq.Mapping.MetaType GetMetaType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Linq.Mapping.MetaType GetMetaType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Mapping.MetaModel.GetMetaType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetMetaType (type As Type) As MetaType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Data::Linq::Mapping::MetaType ^ GetMetaType(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetMetaType : Type -&gt; System.Data.Linq.Mapping.MetaType" Usage="metaModel.GetMetaType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.Mapping.MetaType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">为其查找 <see cref="T:System.Data.Linq.Mapping.MetaType" /> 的类型。</param>
        <summary>在派生类中重写时，发现指定 <see cref="T:System.Type" /> 的 <see cref="T:System.Data.Linq.Mapping.MetaType" />。</summary>
        <returns>一个与指定的类型相对应的元数据类型。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTable">
      <MemberSignature Language="C#" Value="public abstract System.Data.Linq.Mapping.MetaTable GetTable (Type rowType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.Linq.Mapping.MetaTable GetTable(class System.Type rowType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Mapping.MetaModel.GetTable(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetTable (rowType As Type) As MetaTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Data::Linq::Mapping::MetaTable ^ GetTable(Type ^ rowType);" />
      <MemberSignature Language="F#" Value="abstract member GetTable : Type -&gt; System.Data.Linq.Mapping.MetaTable" Usage="metaModel.GetTable rowType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.Mapping.MetaTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="rowType">公共语言运行时 (CLR) 行类型。</param>
        <summary>在派生类中重写时，获取与指定的 <see cref="T:System.Type" /> 关联的 <see cref="T:System.Data.Linq.Mapping.MetaTable" />。</summary>
        <returns>一个与指定的行类型关联的元表。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTables">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IEnumerable&lt;System.Data.Linq.Mapping.MetaTable&gt; GetTables ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Linq.Mapping.MetaTable&gt; GetTables() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Mapping.MetaModel.GetTables" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetTables () As IEnumerable(Of MetaTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IEnumerable&lt;System::Data::Linq::Mapping::MetaTable ^&gt; ^ GetTables();" />
      <MemberSignature Language="F#" Value="abstract member GetTables : unit -&gt; seq&lt;System.Data.Linq.Mapping.MetaTable&gt;" Usage="metaModel.GetTables " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Data.Linq.Mapping.MetaTable&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在派生类中重写时，获取所有表的枚举。</summary>
        <returns>一个可用于循环访问表的枚举器。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MappingSource">
      <MemberSignature Language="C#" Value="public abstract System.Data.Linq.Mapping.MappingSource MappingSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.Mapping.MappingSource MappingSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.MetaModel.MappingSource" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property MappingSource As MappingSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Data::Linq::Mapping::MappingSource ^ MappingSource { System::Data::Linq::Mapping::MappingSource ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MappingSource : System.Data.Linq.Mapping.MappingSource" Usage="System.Data.Linq.Mapping.MetaModel.MappingSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.Mapping.MappingSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在派生类中重写时，获取源自此模型的映射源。</summary>
        <value>原始的映射源。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProviderType">
      <MemberSignature Language="C#" Value="public abstract Type ProviderType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ProviderType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.MetaModel.ProviderType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ProviderType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ ProviderType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProviderType : Type" Usage="System.Data.Linq.Mapping.MetaModel.ProviderType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在派生类中重写时，获取或设置提供程序的类别。</summary>
        <value>提供程序类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指定此属性，则可以使用现有的提供程序类型。 这将消除与服务器之间的往返以获取此信息。 LINQ to SQL 必须知道提供程序类型才能建立适当的查询转换规则。 LINQ to SQL 支持 <xref:System.Data.Linq.SqlClient.Sql2000Provider> 和 <xref:System.Data.Linq.SqlClient.Sql2005Provider> 提供程序。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
