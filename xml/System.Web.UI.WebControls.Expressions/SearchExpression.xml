<Type Name="SearchExpression" FullName="System.Web.UI.WebControls.Expressions.SearchExpression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9041cca960b619ddce386dd72f4cf9774e7cc382" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89935865" /></Metadata><TypeSignature Language="C#" Value="public class SearchExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SearchExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.SearchExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class SearchExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class SearchExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <TypeSignature Language="F#" Value="type SearchExpression = class&#xA;    inherit ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供了在一个或多个字段中搜索字符串值，并将其与指定字符串值进行比较的一种方式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.QueryExtender>控件提供了使用类筛选网页中的数据的功能 <xref:System.Web.UI.WebControls.Expressions.SearchExpression> 。 类将一个 <xref:System.Web.UI.WebControls.Expressions.SearchExpression> 或多个字段中的指定字符串与您提供的值进行比较。 表达式执行 "开头为"、"包含" 或 "结束于" 搜索。 必须为和属性指定值， <xref:System.Web.UI.WebControls.Expressions.SearchExpression.SearchType%2A> <xref:System.Web.UI.WebControls.Expressions.SearchExpression.DataFields%2A> 以指示要执行的搜索的类型以及要搜索的数据字段。 如果在控件中使用的 LINQ 提供程序 <xref:System.Web.UI.WebControls.QueryExtender> 支持区分大小写，则可以使用 <xref:System.Web.UI.WebControls.Expressions.SearchExpression.ComparisonType%2A> 属性启用或忽略区分大小写。  
  
 要搜索的值可以由 [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] 控件提供。 若要指定此属性，请将 <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> 对象中的类的属性设置 <xref:System.Web.UI.WebControls.ControlParameter> <xref:System.Web.UI.WebControls.Expressions.SearchExpression> 为控件的 ID [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] 。 例如，如果在文本框中输入要搜索的值，则 <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> 必须将属性设置为文本框控件的 ID。 可以将 <xref:System.Web.UI.WebControls.Expressions.SearchExpression> 类与支持的其他表达式结合使用 <xref:System.Web.UI.WebControls.QueryExtender> ，例如 <xref:System.Web.UI.WebControls.Expressions.RangeExpression> 筛选器。 例如，您可以搜索包含字符串 "茶" 的产品名称以及介于100和200之间的定价。  
  
   
  
## Examples  
 下面的示例演示如何搜索 AdventureWorks 数据库的 Products 表中的 "名称" 列，以获取以该控件中指定的字符串开头的产品 `SearchTextBox` 。 从控件返回的结果 <xref:System.Web.UI.WebControls.LinqDataSource> 显示在 <xref:System.Web.UI.WebControls.GridView> 控件中。  
  
 此代码示例是在 [演练：使用声明性语法筛选网页中的数据中](https://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f)提供的一个更大示例的一部分。  
  
  
  
 ]]></format>
    </remarks>
    <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.WebControls.Expressions.SearchExpression.DataFields" /> 属性为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）</exception>
    <altmember cref="T:System.Web.UI.WebControls.QueryExtender" />
    <related type="Article" href="https://msdn.microsoft.com/library/b93e32b9-af41-4539-a009-6cbbe809c702">QueryExtender Web 服务器控件概述</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SearchExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.SearchExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SearchExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.UI.WebControls.Expressions.SearchExpression" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComparisonType">
      <MemberSignature Language="C#" Value="public StringComparison ComparisonType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.StringComparison ComparisonType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.SearchExpression.ComparisonType" />
      <MemberSignature Language="VB.NET" Value="Public Property ComparisonType As StringComparison" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property StringComparison ComparisonType { StringComparison get(); void set(StringComparison value); };" />
      <MemberSignature Language="F#" Value="member this.ComparisonType : StringComparison with get, set" Usage="System.Web.UI.WebControls.Expressions.SearchExpression.ComparisonType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.StringComparison</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要执行的字符串比较的类型。</summary>
        <value>要执行的字符串比较的类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性使您可以使用 <xref:System.StringComparison> 枚举来指定执行搜索的方式。 <xref:System.StringComparison>枚举用于指定字符串比较是使用当前区域性还是使用固定区域性，以及它是使用文本排序规则还是序号排序规则。 如果使用的数据提供程序 <xref:System.Web.UI.WebControls.QueryExtender> 支持区分大小写，则可以使用其中一个比较类型属性来启用或忽略区分大小写。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.WebControls.Expressions.SearchExpression.DataFields" /> 属性为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="DataFields">
      <MemberSignature Language="C#" Value="public string DataFields { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataFields" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.SearchExpression.DataFields" />
      <MemberSignature Language="VB.NET" Value="Public Property DataFields As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataFields { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataFields : string with get, set" Usage="System.Web.UI.WebControls.Expressions.SearchExpression.DataFields" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要搜索的单个字段或以逗号分隔的字段列表。</summary>
        <value>要搜索的一个或多个字段。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Expressions.SearchExpression>类在指定表中的一个或多个数据字段中执行搜索。 实例中必须至少指定一个数据字段 <xref:System.Web.UI.WebControls.Expressions.SearchExpression> 。 如果指定多个数据字段，请使用逗号分隔字段。  
  
   
  
## Examples  
 下面的示例演示如何在 AdventureWorks 数据库的 Products 表中搜索名称以指定字符串开头的产品的名称和 ProductNumber 数据字段。 此代码示例摘自 [演练：使用声明性语法筛选网页中的数据中](https://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f)提供的一个更大的示例。  
  
```  
<asp:SearchExpression SearchType="StartsWith"   
      DataFields="Name","ProductNumber" >  
  <asp:ControlParameter ControlID="SearchTextBox" />  
</asp:SearchExpression>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.WebControls.Expressions.SearchExpression.DataFields" /> 属性为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.SearchExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="override this.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="searchExpression.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source">要使用的对象。</param>
        <summary>基于 <see cref="T:System.Web.UI.WebControls.Expressions.SearchExpression" /> 对象将 <see cref="T:System.Linq.IQueryable" /> 对象应用于指定的 <see cref="T:System.Web.UI.WebControls.Expressions.SearchType" /> 对象。</summary>
        <returns>应用了 <see cref="T:System.Linq.IQueryable" /> 的 <see cref="T:System.Web.UI.WebControls.Expressions.SearchExpression" /> 对象的实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性计算对象中使用的参数的集合 <xref:System.Web.UI.WebControls.Expressions.SearchExpression> ，并将表达式应用于 <xref:System.Linq.IQueryable> 对象。 如果指定了多个数据字段，则 `AND` 运算符将应用于数据字段。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Web.UI.WebControls.Expressions.SearchExpression.DataFields" /> 属性为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SearchType">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.Expressions.SearchType SearchType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.UI.WebControls.Expressions.SearchType SearchType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.Expressions.SearchExpression.SearchType" />
      <MemberSignature Language="VB.NET" Value="Public Property SearchType As SearchType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::Expressions::SearchType SearchType { System::Web::UI::WebControls::Expressions::SearchType get(); void set(System::Web::UI::WebControls::Expressions::SearchType value); };" />
      <MemberSignature Language="F#" Value="member this.SearchType : System.Web.UI.WebControls.Expressions.SearchType with get, set" Usage="System.Web.UI.WebControls.Expressions.SearchExpression.SearchType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.Expressions.SearchType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Web.UI.WebControls.Expressions.SearchType" /> 值，该值确定在字符串中的何处进行搜索。</summary>
        <value>要执行的搜索的类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.Expressions.SearchType>属性使用 <xref:System.Web.UI.WebControls.Expressions.SearchType> 枚举，其中包含要在类的实例中使用的搜索类型 <xref:System.Web.UI.WebControls.Expressions.SearchExpression> 。  
  
 下表列出了可能的枚举值。  
  
|枚举|描述|  
|-----------------|-----------------|  
|<xref:System.Web.UI.WebControls.Expressions.SearchType.StartsWith>|指示在字段中的任意位置开始的搜索。|  
|<xref:System.Web.UI.WebControls.Expressions.SearchType.Contains>|指示从字段开头开始搜索。|  
|<xref:System.Web.UI.WebControls.Expressions.SearchType.EndsWith>|指示在字段末尾搜索。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
