<Type Name="PropertyExpression" FullName="System.Web.UI.WebControls.Expressions.PropertyExpression">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9b655f9829bade17631a94faeb3b6ed55406dc15" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86628743" /></Metadata><TypeSignature Language="C#" Value="public class PropertyExpression : System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PropertyExpression extends System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.Expressions.PropertyExpression" />
  <TypeSignature Language="VB.NET" Value="Public Class PropertyExpression&#xA;Inherits ParameterDataSourceExpression" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyExpression : System::Web::UI::WebControls::Expressions::ParameterDataSourceExpression" />
  <TypeSignature Language="F#" Value="type PropertyExpression = class&#xA;    inherit ParameterDataSourceExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.Expressions.ParameterDataSourceExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="0864b-101">提供一种方法，用于使用 <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> 集合中的参数创建 <see langword="Where" /> 子句。</span><span class="sxs-lookup"><span data-stu-id="0864b-101">Provides a way to create a <see langword="Where" /> clause from parameters in a <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" /> collection.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0864b-102"><xref:System.Web.UI.WebControls.Expressions.PropertyExpression>类与控件一起用于 <xref:System.Web.UI.WebControls.QueryExtender> 筛选数据字段中的数据。</span><span class="sxs-lookup"><span data-stu-id="0864b-102">The <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> class is used with the <xref:System.Web.UI.WebControls.QueryExtender> control to filter data in data fields.</span></span> <span data-ttu-id="0864b-103"><xref:System.Web.UI.WebControls.Expressions.PropertyExpression>类将列的属性值与指定的值进行比较。</span><span class="sxs-lookup"><span data-stu-id="0864b-103">The <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> class compares a property value of a column to a specified value.</span></span> <span data-ttu-id="0864b-104">例如，可以将一个布尔值与数据库中 Products 表的 "中止" 列中的值进行比较。</span><span class="sxs-lookup"><span data-stu-id="0864b-104">For example, you can compare a Boolean value to the value in the discontinued column of a Products table in a database.</span></span>  
  
 <span data-ttu-id="0864b-105"><xref:System.Web.UI.WebControls.Expressions.PropertyExpression>类为每个参数的值和数据对象的相应属性创建一个等于 (= =) 比较 <xref:System.Linq.IQueryable> 。</span><span class="sxs-lookup"><span data-stu-id="0864b-105">The <xref:System.Web.UI.WebControls.Expressions.PropertyExpression> class creates an equals (==) comparison for the value of each parameter and the corresponding property of the <xref:System.Linq.IQueryable> data object.</span></span> <span data-ttu-id="0864b-106">如果提供多个参数，则使用逻辑运算符组合参数 `AND` 。</span><span class="sxs-lookup"><span data-stu-id="0864b-106">If you provide more than one parameter, the parameters are combined using the logical `AND` operator.</span></span> <span data-ttu-id="0864b-107">包含空值的参数不会添加到子句中 `Where` 。</span><span class="sxs-lookup"><span data-stu-id="0864b-107">Parameters that contain an empty value are not added to the `Where` clause.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0864b-108">下面的示例演示如何在 AdventureWorks 数据库的 Products 表中搜索其 `MakeFlag` 属性 (布尔值列设置为) 的产品 `true` 。</span><span class="sxs-lookup"><span data-stu-id="0864b-108">The following example shows how to search the Products table of the AdventureWorks database for products whose `MakeFlag` property (a Boolean column) is set to `true`.</span></span> <span data-ttu-id="0864b-109">布尔值参数在复选框中设置。</span><span class="sxs-lookup"><span data-stu-id="0864b-109">The Boolean value parameter is set in a check box.</span></span> <span data-ttu-id="0864b-110">从控件返回的查询的结果 <xref:System.Web.UI.WebControls.LinqDataSource> 显示在 <xref:System.Web.UI.WebControls.GridView> 控件中。</span><span class="sxs-lookup"><span data-stu-id="0864b-110">The result of the query that is returned from the <xref:System.Web.UI.WebControls.LinqDataSource> control is displayed in a <xref:System.Web.UI.WebControls.GridView> control.</span></span>  
  
 <span data-ttu-id="0864b-111">此代码示例是在 [演练：使用声明性语法筛选网页中的数据中](https://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f)提供的一个更大示例的一部分。</span><span class="sxs-lookup"><span data-stu-id="0864b-111">This code example is part of a larger example that is provided in [Walkthrough: Filtering Data in a Web Page Using Declarative Syntax](https://msdn.microsoft.com/library/b305ae31-1a1b-4d07-a678-51457c17614f).</span></span>  
  
  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/b93e32b9-af41-4539-a009-6cbbe809c702"><span data-ttu-id="0864b-112">QueryExtender Web 服务器控件概述</span><span class="sxs-lookup"><span data-stu-id="0864b-112">QueryExtender Web Server Control Overview</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyExpression ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.PropertyExpression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyExpression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0864b-113">初始化 <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0864b-113">Initializes a new instance of the <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetQueryable">
      <MemberSignature Language="C#" Value="public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Linq.IQueryable GetQueryable(class System.Linq.IQueryable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.Expressions.PropertyExpression.GetQueryable(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetQueryable (source As IQueryable) As IQueryable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Linq::IQueryable ^ GetQueryable(System::Linq::IQueryable ^ source);" />
      <MemberSignature Language="F#" Value="override this.GetQueryable : System.Linq.IQueryable -&gt; System.Linq.IQueryable" Usage="propertyExpression.GetQueryable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="0864b-114">要用于查询的对象。</span><span class="sxs-lookup"><span data-stu-id="0864b-114">The object to use for the query.</span></span></param>
        <summary><span data-ttu-id="0864b-115">使用指定的 <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" /> 数据源对象应用一个 <see cref="T:System.Linq.IQueryable" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="0864b-115">Applies a <see cref="T:System.Web.UI.WebControls.Expressions.PropertyExpression" /> object by using the specified <see cref="T:System.Linq.IQueryable" /> data source object.</span></span></summary>
        <returns><span data-ttu-id="0864b-116">应用了表达式的对象的实例。</span><span class="sxs-lookup"><span data-stu-id="0864b-116">An instance of the object that the expressions were applied to.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0864b-117">此方法 <xref:System.Linq.IQueryable> <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 通过使用逻辑运算符将指定对象与集合中的表达式组合在一起 `AND` 。</span><span class="sxs-lookup"><span data-stu-id="0864b-117">This method combines the specified <xref:System.Linq.IQueryable> object with the expressions in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection by using the logical `AND` operator.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
