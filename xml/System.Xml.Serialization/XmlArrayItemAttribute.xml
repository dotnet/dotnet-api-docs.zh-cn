<Type Name="XmlArrayItemAttribute" FullName="System.Xml.Serialization.XmlArrayItemAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="35b9f683aeba8dd86e6e5906c6e66900cc30b5fc" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83968300" /></Metadata><TypeSignature Language="C#" Value="public class XmlArrayItemAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlArrayItemAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.XmlArrayItemAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlArrayItemAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlArrayItemAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type XmlArrayItemAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.Serialization</AssemblyName>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Xml" FromVersion="4.0.0.0" To="System.Xml.XmlSerializer" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="System.Xml.Serialization" FromVersion="4.0.0.0" To="System.Xml.XmlSerializer" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Xml.XmlSerializer" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Xml.Serialization" FromVersion="4.0.0.0" To="System.Xml" ToVersion="4.0.0.0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;netcore-2.2;dotnet-uwp-10.0;netstandard-2.1;netcore-1.0;netcore-1.1;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.1;net-5.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Parameter | System.AttributeTargets.Property | System.AttributeTargets.ReturnValue, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示指定 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 可以放置在序列化数组中的派生类型的特性。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 属于控制 <xref:System.Xml.Serialization.XmlSerializer> 如何序列化或反序列化对象的一系列属性。 有关类似属性的完整列表，请参阅[控制 XML 序列化的属性](/dotnet/standard/serialization/attributes-that-control-xml-serialization)。  
  
 您可以将 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 应用到任何返回数组的公共读/写成员，或提供对一个数组的访问。 例如，返回对象数组的字段、集合、<xref:System.Collections.ArrayList>或实现 <xref:System.Collections.IEnumerable> 接口的任何类。  
  
 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 支持多态性，换言之，它允许 <xref:System.Xml.Serialization.XmlSerializer> 将派生对象添加到数组中。 例如，假设名为 `Mammal` 的类派生自名为 `Animal`的基类。 进一步假设名为 `MyAnimals` 的类包含一个返回 `Animal` 对象的数组的字段。 若要允许 <xref:System.Xml.Serialization.XmlSerializer> 对 `Animal` 和 `Mammal` 类型进行序列化，请将 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 应用于字段两次，每次指定两个可接受的类型之一。  
  
> [!NOTE]
>  您可以应用 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 或 <xref:System.Xml.Serialization.XmlElementAttribute> 的多个实例，以指定可插入到数组中的对象的类型。  
  
> [!NOTE]
>  不支持对返回接口或接口数组的字段或属性进行序列化。  
  
 有关使用特性的详细信息，请参阅[特性](/dotnet/standard/attributes/)。  
  
> [!NOTE]
>  您可以在代码中使用 word `XmlArrayItem` 而不是更长的 <xref:System.Xml.Serialization.XmlArrayItemAttribute>。  
  
   
  
## Examples  
 下面的示例序列化一个名为 `Group` 的类，该类包含一个名为 `Employees` 的字段，该字段返回 `Employee` 对象的数组。 该示例将 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 应用到字段，从而指示 <xref:System.Xml.Serialization.XmlSerializer> 它可以将基类（`Employee`）类型和派生类类型（`Manager`）的对象插入到序列化的数组中。  
  
 [!code-cpp[Classic XmlArrayItemAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xml.Serialization.XmlArrayAttribute" />
    <altmember cref="T:System.Xml.Serialization.XmlSerializer" />
    <altmember cref="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    <altmember cref="T:System.Xml.Serialization.XmlAttributes" />
    <related type="Article" href="/dotnet/standard/serialization/introducing-xml-serialization">XML 序列化简介</related>
    <related type="Article" href="/dotnet/standard/serialization/how-to-specify-an-alternate-element-name-for-an-xml-stream">如何：指定 XML 流的替代元素名称</related>
    <related type="Article" href="/dotnet/standard/serialization/controlling-xml-serialization-using-attributes">使用属性控制 XML 序列化</related>
    <related type="Article" href="/dotnet/standard/serialization/examples-of-xml-serialization">XML 序列化示例</related>
    <related type="Article" href="/dotnet/standard/serialization/xml-schema-definition-tool-xsd-exe">XML Schema Definition Tool (Xsd.exe)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlArrayItemAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlArrayItemAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例序列化一个名为 `Transportation` 的类，该类包含一个名为 `MyVehicles` 的字段，该字段返回 `Vehicle` 对象的数组。 该示例将 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 应用到字段，这允许 <xref:System.Xml.Serialization.XmlSerializer> 将派生自 `Vehicle` 类的 `Car` 类的实例插入到数组中。  
  
 [!code-cpp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.XmlArrayItemAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlArrayItemAttribute (string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (elementName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlArrayItemAttribute(System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlArrayItemAttribute : string -&gt; System.Xml.Serialization.XmlArrayItemAttribute" Usage="new System.Xml.Serialization.XmlArrayItemAttribute elementName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">XML 元素的名称。</param>
        <summary>初始化 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 类的新实例，并指定在 XML 文档中生成的 XML 元素的名称。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载设置 <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> 属性。  
  
 如果希望生成的 XML 元素的名称与成员的标识符不同，请使用此重载。  
  
 包含命名空间的 XML 文档可以包含一个或多个元素名称版本。 有关详细信息，请参见 <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> 属性。  
  
   
  
## Examples  
 下面的示例序列化一个名为 `Transportation` 的类，该类包含一个名为 `MyVehicles` 的字段，该字段返回 `Vehicle` 对象的数组。 该示例将 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 应用到字段，这允许 <xref:System.Xml.Serialization.XmlSerializer> 将派生自 `Vehicle` 类的 `Car` 类的实例插入到数组中。 应用特性时，该示例使用 `elementName` 参数设置 <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> 属性。  
  
 [!code-cpp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute1 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute1 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute1 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.XmlArrayItemAttribute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlArrayItemAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlArrayItemAttribute(Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlArrayItemAttribute : Type -&gt; System.Xml.Serialization.XmlArrayItemAttribute" Usage="new System.Xml.Serialization.XmlArrayItemAttribute type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">要序列化的对象的 <see cref="T:System.Type" />。</param>
        <summary>初始化 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 类的新实例，并指定可插入到序列化数组中的 <see cref="T:System.Type" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例序列化一个名为 `Transportation` 的类，该类包含一个名为 `MyVehicles` 的字段，该字段返回 `Vehicle` 对象的数组。 该示例将 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 应用到字段，这允许 <xref:System.Xml.Serialization.XmlSerializer> 将派生自 `Vehicle` 类的 `Car` 类的实例插入到数组中。 应用特性时，该示例使用 `type` 参数设置 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Type%2A> 属性。  
  
 [!code-cpp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute2 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute2 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute2 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.XmlArrayItemAttribute2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlArrayItemAttribute (string elementName, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string elementName, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.XmlArrayItemAttribute.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (elementName As String, type As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlArrayItemAttribute(System::String ^ elementName, Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.XmlArrayItemAttribute : string * Type -&gt; System.Xml.Serialization.XmlArrayItemAttribute" Usage="new System.Xml.Serialization.XmlArrayItemAttribute (elementName, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="elementName">XML 元素的名称。</param>
        <param name="type">要序列化的对象的 <see cref="T:System.Type" />。</param>
        <summary>初始化 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 类的新实例，并指定在 XML 文档中生成的 XML 元素的名称，以及可插入到所生成的 XML 文档中的 <see cref="T:System.Type" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载设置 "<xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A>" 和 "<xref:System.Xml.Serialization.XmlArrayItemAttribute.Type%2A>" 属性。  
  
 如果希望生成的 XML 元素的名称与成员的标识符不同，请使用此重载。  
  
 包含命名空间的 XML 文档可以包含一个或多个元素名称版本。 有关详细信息，请参见 <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> 属性。  
  
   
  
## Examples  
 下面的示例序列化一个名为 `Transportation` 的类，该类包含一个名为 `MyVehicles` 的字段，该字段返回 `Vehicle` 对象的数组。 该示例将 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 应用到字段，这允许 <xref:System.Xml.Serialization.XmlSerializer> 将派生自 `Vehicle` 类的 `Car` 类的实例插入到数组中。 应用特性时，此示例使用 `elementName` 参数设置 <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> 属性，并使用 `type` 参数设置 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Type%2A> 属性。  
  
 [!code-cpp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute3 Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.XmlArrayItemAttribute3 Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute3 Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.XmlArrayItemAttribute3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.XmlArrayItemAttribute3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public string DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataType : string with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.DataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置生成的 XML 元素的 XML 数据类型。</summary>
        <value>XML 架构定义（XSD）数据类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表列出了具有 .NET 等效项的 XML 架构简单数据类型。  
  
 对于 XML 架构 `base64Binary` 和 `hexBinary` 数据类型，请使用 <xref:System.Byte> 对象的数组，并根据需要将 <xref:System.Xml.Serialization.XmlArrayItemAttribute.DataType%2A> 属性设置为 "base64Binary" 或 "hexBinary" 的 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 应用。 对于 XML 架构 `time` 和 `date` 数据类型，请使用 <xref:System.DateTime> 类型，<xref:System.Xml.Serialization.XmlArrayItemAttribute> 并将 "<xref:System.Xml.Serialization.XmlArrayItemAttribute.DataType%2A>" 设置为 "日期" 或 "时间"。  
  
 对于映射到字符串的每个 XML 架构类型，应用 <xref:System.Xml.Serialization.XmlArrayItemAttribute>，并将其 <xref:System.Xml.Serialization.XmlArrayItemAttribute.DataType%2A> 属性设置为 XML 架构类型。 但是，这不会更改序列化格式，而只会更改成员的架构。  
  
> [!NOTE]
>  属性区分大小写，因此必须将其精确设置为 XML 架构数据类型之一。  
  
> [!NOTE]
>  以 XML 元素的形式传递二进制数据更高效，然后将其作为 XML 特性传递。  
  
 有关 XML 架构数据类型的详细信息，请参阅万维网联合会文档[XML 架构第2部分：数据](https://www.w3.org/TR/xmlschema-2/)类型。  
  
|XSD 数据类型|.NET 数据类型|  
|-------------------|--------------------|  
|anyURI|<xref:System.String>|  
|base64Binary|<xref:System.Byte> 对象的数组|  
|boolean|<xref:System.Boolean>|  
|字节|<xref:System.SByte>|  
|date|<xref:System.DateTime>|  
|dateTime|<xref:System.DateTime>|  
|decimal|<xref:System.Decimal>|  
|double|<xref:System.Double>|  
|ENTITY|<xref:System.String>|  
|条目|<xref:System.String>|  
|float|<xref:System.Single>|  
|gDay|<xref:System.String>|  
|gMonth|<xref:System.String>|  
|gMonthDay|<xref:System.String>|  
|gYear|<xref:System.String>|  
|gYearMonth|<xref:System.String>|  
|hexBinary|<xref:System.Byte> 对象的数组|  
|ID|<xref:System.String>|  
|IDREF|<xref:System.String>|  
|IDREFS|<xref:System.String>|  
|int|<xref:System.Int32>|  
|integer|<xref:System.String>|  
|language|<xref:System.String>|  
|long|<xref:System.Int64>|  
|名称|<xref:System.String>|  
|NCName|<xref:System.String>|  
|negativeInteger|<xref:System.String>|  
|NMTOKEN|<xref:System.String>|  
|NMTOKENS|<xref:System.String>|  
|normalizedString|<xref:System.String>|  
|nonNegativeInteger|<xref:System.String>|  
|nonPositiveInteger|<xref:System.String>|  
|NOTATION|<xref:System.String>|  
|positiveInteger|<xref:System.String>|  
|QName|<xref:System.Xml.XmlQualifiedName>|  
|duration|<xref:System.String>|  
|string|<xref:System.String>|  
|short|<xref:System.Int16>|  
|time|<xref:System.DateTime>|  
|token|<xref:System.String>|  
|unsignedByte|<xref:System.Byte>|  
|unsignedInt|<xref:System.UInt32>|  
|unsignedLong|<xref:System.UInt64>|  
|unsignedShort|<xref:System.UInt16>|  
  
   
  
## Examples  
 下面的示例将名为 `PurchaseOrder`的类进行序列化。 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 类的多个实例应用于三个成员，且每个实例的 <xref:System.Xml.Serialization.XmlArrayItemAttribute.DataType%2A> 属性都设置为数组中允许的类型。  
  
 [!code-cpp[XmlArrayItemAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/XmlArrayItemAttribute Example/CPP/arrayitem.cpp#1)]
 [!code-csharp[XmlArrayItemAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/XmlArrayItemAttribute Example/CS/arrayitem.cs#1)]
 [!code-vb[XmlArrayItemAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/XmlArrayItemAttribute Example/VB/arrayitem.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementName">
      <MemberSignature Language="C#" Value="public string ElementName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ElementName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.ElementName" />
      <MemberSignature Language="VB.NET" Value="Public Property ElementName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ElementName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ElementName : string with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.ElementName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置生成的 XML 元素的名称。</summary>
        <value>生成的 XML 元素的名称。 默认值为成员标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果希望生成的 XML 元素的名称与成员的标识符不同，请指定 <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A>。  
  
 如果生成的 XML 文档使用 XML 命名空间来区分名称相同的成员，则可以将相同的 <xref:System.Xml.Serialization.XmlArrayAttribute.ElementName%2A> 值设置为多个类成员。 有关如何在 XML 文档中使用命名空间和带前缀名称的详细信息，请参阅 <xref:System.Xml.Serialization.XmlSerializerNamespaces> 类。  
  
   
  
## Examples  
 下面的示例设置 `Vehicle` 和 `Car` 类的 <xref:System.Xml.Serialization.XmlArrayItemAttribute.ElementName%2A> 属性，从而更改 <xref:System.Xml.Serialization.XmlSerializer> 为这些类生成的 XML 元素的名称。  
  
 [!code-cpp[Classic XmlArrayItemAttribute.ElementName Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.ElementName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.ElementName Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.ElementName Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.ElementName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.ElementName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Form">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaForm Form { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaForm Form" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.Form" />
      <MemberSignature Language="VB.NET" Value="Public Property Form As XmlSchemaForm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaForm Form { System::Xml::Schema::XmlSchemaForm get(); void set(System::Xml::Schema::XmlSchemaForm value); };" />
      <MemberSignature Language="F#" Value="member this.Form : System.Xml.Schema.XmlSchemaForm with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.Form" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaForm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示生成的 XML 元素的名称是否是限定的。</summary>
        <value><see cref="T:System.Xml.Schema.XmlSchemaForm" /> 值之一。 默认为 <see langword="XmlSchemaForm.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlAttributeAttribute.Form%2A> 属性根据[xml 中万维网联合会规范命名空间](https://www.w3.org/TR/xml-names/)，确定 xml 元素名称是否是限定的。  
  
 如果 <xref:System.Xml.Serialization.XmlAttributeAttribute.Namespace%2A> 属性设置为任何值，尝试将 <xref:System.Xml.Serialization.XmlElementAttribute.Form%2A> 属性设置为 `XmlSchemaForm.Unqualified` 会引发异常。  
  
 `XmlSchemaForm.None`的默认值指示 <xref:System.Xml.Serialization.XmlSerializer> 检查 XML 文档的架构，以确定该命名空间是否是限定的。 对于元素，<xref:System.Xml.Serialization.XmlSerializer> 会检查 schema 元素特性 `elementFormDefault`的值。 对于属性，它将检查架构元素属性 `attributeFormDefault`的值。 例如，下面的 XML 架构指示 `Name` 元素是限定的，而 `Number` 元素是非限定的。  
  
```  
<schema elementFormDefault="qualified"   
attributeFormDefault="unqualified">  
   <element name="Name"/>  
   <attribute name="Number"/>  
</schema>  
```  
  
   
  
## Examples  
 下面的示例将 `Vehicle` 类的 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Form%2A> 属性设置为 `XmlSchemaForm.Unqualified`，并将 `Car` 类的 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Form%2A> 属性设置为 `XmlSchemaForm.Qualified`。  
  
 [!code-cpp[Classic XmlArrayItemAttribute.Form Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Form Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.Form Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Form Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.Form Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Form Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Form" /> 属性设置为 <see langword="XmlSchemaForm.Unqualified" />，并且指定 <see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public Property IsNullable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 是否必须将成员序列化为 <see langword="xsi:nil" /> 属性设置为 <see langword="true" /> 的 XML 空标记。</summary>
        <value>如果 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 生成 <see langword="true" /> 特性，则为 <see langword="xsi:nil" />；否则为 <see langword="false" />，且不生成实例。 默认为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 结构的 XML 架构规范允许 XML 文档显式通知缺少某个元素的内容。 此类元素包含 `xsi:nil` 设置为 `true`的属性。 有关详细信息，请参阅名为[XML 架构第1部分：结构](https://www.w3.org/TR/xmlschema-1/)的万维网联合会规范。  
  
 如果 `true`<xref:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable%2A> 属性，则为已设置为 `null`的类成员生成 `xsi:nil` 特性。 例如，如果将名为 `MyStringArray` 的字段设置为 `null`，则 <xref:System.Xml.Serialization.XmlSerializer> 生成以下 XML 代码。  
  
```  
<MyStringArray xsi:nil = "true" />  
```  
  
 如果 `false`<xref:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable%2A> 属性，则不会生成 XML 元素。  
  
> [!NOTE]
>  由于值类型不能包含 `null`，因此无法将 <xref:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable%2A> 属性应用于类型为值类型的成员。  
  
   
  
## Examples  
 下面的示例对名为 `Group`的类进行序列化，该类包含一个名为 `Employees` 的字段，该字段返回 `Employee` 对象的数组。 名为 `Manager` 的第二个类派生自 `Employee`。 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 指定 <xref:System.Xml.Serialization.XmlSerializer> 可以将 `Employee` 和 `Manager` 对象插入到数组中。 该示例设置 <xref:System.Xml.Serialization.XmlArrayItemAttribute.IsNullable%2A> 属性，因此，通知 <xref:System.Xml.Serialization.XmlSerializer> 不要在设置为 `null`的数组中生成 `xsi:nil` 特性对象。  
  
 [!code-cpp[Classic XmlArrayItemAttribute.IsNullable Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.IsNullable Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.IsNullable Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.IsNullable Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.IsNullable Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.IsNullable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置生成的 XML 元素的命名空间。</summary>
        <value>生成的 XML 元素的命名空间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Namespace%2A> 属性符合[XML 中万维网联合会规范命名空间](https://www.w3.org/TR/xml-names/)。  
  
 若要创建要在 XML 文档中使用的命名空间和关联的前缀，必须创建包含所有前缀和命名空间对的 <xref:System.Xml.Serialization.XmlSerializerNamespaces>。 为每个 <xref:System.Xml.Serialization.XmlArrayAttribute> 设置的命名空间必须包含在 <xref:System.Xml.Serialization.XmlSerializerNamespaces>中。 当 <xref:System.Xml.Serialization.XmlSerializer> 生成文档时，它会为每个数组项的元素名称提供正确的前缀。  
  
   
  
## Examples  
 下面的示例将应用 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 并设置 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Namespace%2A> 属性。  
  
 [!code-cpp[Classic XmlArrayItemAttribute.Namespace Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Namespace Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NestingLevel">
      <MemberSignature Language="C#" Value="public int NestingLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NestingLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property NestingLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int NestingLevel { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.NestingLevel : int with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置受 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> 影响的 XML 元素的层次结构中的级别。</summary>
        <value>数组的数组中的索引集从零开始的索引。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XML 文档可以包含 XML 元素的层次结构。 若要表示此类层次结构，请使用数组的数组。 在此类数组中，每个索引表示层次结构中的一个级别。 因此，仅当向返回数组数组的字段应用 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 时，才使用 <xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A> 属性。  
  
 应用属性时，通过设置 <xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A>来指定属性影响的层次结构级别。 第一个索引的值始终为 0;因此，可以选择设置其 <xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A>--<xref:System.Xml.Serialization.XmlArrayItemAttribute> 不将 <xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A> 值应用于第一个数组索引。 只有后续 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 对象需要指定 <xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A> 值（如1、2、3等等）。  
  
   
  
## Examples  
 下面的示例将三个 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 特性应用到数组的数组。 若要指定每个属性应用于哪个数组，<xref:System.Xml.Serialization.XmlArrayItemAttribute.NestingLevel%2A> 属性设置为数组的索引。  
  
 [!code-cpp[NestingLevel#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NestingLevel/cpp/nestinglevel.cpp#1)]
 [!code-csharp[NestingLevel#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NestingLevel/CS/nestinglevel.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.XmlArrayItemAttribute.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Type : Type with get, set" Usage="System.Xml.Serialization.XmlArrayItemAttribute.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.Serialization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置数组中允许的类型。</summary>
        <value>数组中允许的 <see cref="T:System.Type" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> 属性为公共字段或公共读/写属性值指定一个重写的类型。  
  
 如果字段或属性返回 <xref:System.Object>类型的数组，请将 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 的多个实例应用于字段或属性。 对于每个实例，将 <xref:System.Xml.Serialization.XmlElementAttribute.Type%2A> 属性设置为可插入到数组中的对象的类型。  
  
 如果数组仅包含基元类型，则不需要应用 <xref:System.Xml.Serialization.XmlArrayItemAttribute>。 默认情况下，<xref:System.Xml.Serialization.XmlSerializer> 生成一系列元素，每个元素都具有相同的元素名称，每个值对应于每个值，但每个元素的类型都设置为 XML 架构数据类型。 例如，以下代码：  
  
```  
' Visual Basic code  
Public Class Arrays  
   Public XSDTypes ()As Object= New Object(){"one", 2, 3.0}  
End Class  
// C# code  
public class MyArray{  
   // No XmlArrayItemAttribute is applied.  
   public object[] XSDTypes= new object[]{"one", 2, 3.2};  
}  
```  
  
 此 XML 中的结果：  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
<Arrays xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">  
  <XSDTypes>  
    <Object xsi:type="xsd:string">one</Object>  
    <Object xsi:type="xsd:int">2</Object>  
    <Object xsi:type="xsd:double">3</Object>  
  </XSDTypes>  
</Arrays>  
```  
  
 但是，如果为每个基元类型指定 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Type%2A> 属性，则每个值的元素名称都是使用 .NET 类型名称生成的。 例如，以下代码：  
  
```  
' Visual Basic code  
Public Class Arrays  
   <XmlArrayItem(GetType(String)), _  
   XmlArrayItem(GetType(Integer)), _  
   XmlArrayItem(GetType(Double))> _  
   Public PrimitiveTypes () As Object = New Object(){"one", 2, 3.0}  
End Class  
// C# code  
public class Arrays{  
   [XmlArrayItem(typeof(string))]  
   [XmlArrayItem(typeof(int))]  
   [XmlArrayItem(typeof(double))]  
   public object [] PrimitiveTypes = new object[]{"one", 2, 3.0};  
}  
```  
  
 此 XML 中的结果：  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
<Arrays xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">  
  <PrimitiveTypes>  
    <string>one</string>  
    <int>2</int>  
    <double>3</double>  
  </PrimitiveTypes>  
</Arrays>  
```  
  
   
  
## Examples  
 下面的示例序列化对象的数组。 返回数组的字段具有两个 <xref:System.Xml.Serialization.XmlArrayItemAttribute> 实例。 每个实例都指示 <xref:System.Xml.Serialization.XmlSerializer> 接受数组中的指定 <xref:System.Xml.Serialization.XmlArrayItemAttribute.Type%2A>。  
  
 [!code-cpp[Classic XmlArrayItemAttribute.Type Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Type Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlArrayItemAttribute.Type Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Type Example/CS/source.cs#1)]
 [!code-vb[Classic XmlArrayItemAttribute.Type Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlArrayItemAttribute.Type Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
