<Type Name="SoapIncludeAttribute" FullName="System.Xml.Serialization.SoapIncludeAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8bd983e7a0f9ec161eadcd823f4b5d1bea1c489a" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89829227" /></Metadata><TypeSignature Language="C#" Value="public class SoapIncludeAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SoapIncludeAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.SoapIncludeAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class SoapIncludeAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class SoapIncludeAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type SoapIncludeAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Xml.XmlSerializer" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface | System.AttributeTargets.Method | System.AttributeTargets.Struct, AllowMultiple=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface | System.AttributeTargets.Method | System.AttributeTargets.Struct, AllowMultiple=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.Struct, AllowMultiple=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.Struct, AllowMultiple=true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>允许 <see cref="T:System.Xml.Serialization.XmlSerializer" /> 在将对象序列化或反序列化为编码的 SOAP XML 时识别类型。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Serialization.SoapIncludeAttribute>类属于一系列属性，这些属性控制如何将 <xref:System.Xml.Serialization.XmlSerializer> 对象序列化或反序列化为编码的 SOAP XML。 生成的 XML 符合万维网联合会文档的第5节， [简单的对象访问协议 (SOAP) 1.1](https://www.w3.org/TR/2000/NOTE-SOAP-20000508/)。 有关类似属性的完整列表，请参阅 [控制编码的 SOAP 序列化的属性](/dotnet/standard/serialization/attributes-that-control-encoded-soap-serialization)。  
  
 若要将对象序列化为编码的 SOAP 消息，必须 <xref:System.Xml.Serialization.XmlSerializer> 使用 <xref:System.Xml.Serialization.XmlTypeMapping> 通过类的方法创建的构造 <xref:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping%2A> <xref:System.Xml.Serialization.SoapReflectionImporter> 。  
  
 在应用时 <xref:System.Xml.Serialization.SoapIncludeAttribute> ，指定 <xref:System.Type> 派生类的。 当 <xref:System.Xml.Serialization.XmlSerializer> 序列化同时包含基类和派生类的对象时，它可以识别这两种对象类型。  
  
 你可以使用在 <xref:System.Xml.Serialization.SoapIncludeAttribute> 服务说明文档中包括派生类，这些文档是用 Web 服务描述语言 (WSDL) 编写的。 例如，如果方法返回 <xref:System.Object> ，则将应用 <xref:System.Xml.Serialization.SoapIncludeAttribute> 到方法，并指定应返回的实际类型。  
  
 有关 WSDL 的详细信息，请参阅万维网联合会规范， [Web 服务描述语言 (WSDL) 1.1](https://www.w3.org/TR/2001/NOTE-wsdl-20010315)。  
  
 有关使用特性的详细信息，请参阅 [特性](/dotnet/standard/attributes/)。  
  
   
  
## Examples  
 下面的示例将 <xref:System.Xml.Serialization.SoapIncludeAttribute> 两次应用于 XML Web service 方法。 方法返回 `Vehicle` (基类) 类型的对象。 <xref:System.Xml.Serialization.SoapIncludeAttribute>允许方法返回派生自类的类的实例 `Vehicle` 。  
  
  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SoapIncludeAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.SoapIncludeAttribute.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (type As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SoapIncludeAttribute(Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Xml.Serialization.SoapIncludeAttribute : Type -&gt; System.Xml.Serialization.SoapIncludeAttribute" Usage="new System.Xml.Serialization.SoapIncludeAttribute type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">要包含的对象的类型。</param>
        <summary>使用指定的类型初始化 <see cref="T:System.Xml.Serialization.SoapIncludeAttribute" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将的多个实例应用于 <xref:System.Xml.Serialization.SoapIncludeAttribute> 一个字段或属性，该字段或属性返回一个对象数组、一个 <xref:System.Collections.ArrayList> 包含对象集合的对象或一个可以返回多个类型的对象。 设置 <xref:System.Xml.Serialization.SoapIncludeAttribute.Type%2A> 希望字段或属性包含的每种类型的属性。  
  
   
  
## Examples  
 下面的示例将 <xref:System.Xml.Serialization.SoapIncludeAttribute> 两次应用于 XML Web services 方法。 方法返回 `Vehicle` (基类) 类型的对象。 <xref:System.Xml.Serialization.SoapIncludeAttribute>允许方法返回派生自类的类的实例 `Vehicle` 。  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Serialization.SoapIncludeAttribute.Type" />
      <MemberSignature Language="VB.NET" Value="Public Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Type { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Type : Type with get, set" Usage="System.Xml.Serialization.SoapIncludeAttribute.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlSerializer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在序列化或反序列化对象时应使用的对象的类型。</summary>
        <value>要包含的对象的类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将的多个实例应用于 <xref:System.Xml.Serialization.SoapIncludeAttribute> 一个字段或属性，该字段或属性返回一个对象数组、一个 <xref:System.Collections.ArrayList> 包含对象集合的对象或一个可以返回多个类型的对象。 设置 <xref:System.Xml.Serialization.SoapIncludeAttribute.Type%2A> 希望字段或属性包含的每种类型的属性。  
  
   
  
## Examples  
 下面的示例将 <xref:System.Xml.Serialization.SoapIncludeAttribute> 两次应用于 XML Web services 方法。 方法返回 `Vehicle` (基类) 类型的对象。 <xref:System.Xml.Serialization.SoapIncludeAttribute>允许方法返回派生自类的类的实例 `Vehicle` 。  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
