<Type Name="EventWaitHandleAccessRule" FullName="System.Security.AccessControl.EventWaitHandleAccessRule">
  <Metadata><Meta Name="ms.openlocfilehash" Value="222c8f5982f811502e9180d2088099b36ef4717a" /><Meta Name="ms.sourcegitcommit" Value="a8ca33e500a87229bed50d12e09b1347df519648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/09/2020" /><Meta Name="ms.locfileid" Value="91923169" /></Metadata><TypeSignature Language="C#" Value="public sealed class EventWaitHandleAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EventWaitHandleAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.EventWaitHandleAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EventWaitHandleAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventWaitHandleAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type EventWaitHandleAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.2.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
    <AssemblyVersion>4.0.4.0</AssemblyVersion>
    <AssemblyVersion>4.0.5.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Threading.AccessControl" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示一组允许或拒绝用户或组进行访问的权限。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule>类是 .NET Framework 为管理已命名的系统事件的 Windows 访问控制安全性而提供的一组类中的一种。 有关这些类的概述及其与基础 Windows 访问控制结构的关系，请参阅 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 。  
  
> [!NOTE]
>  Windows 访问控制安全性仅适用于已命名的系统事件。 如果 <xref:System.Threading.EventWaitHandle> 对象表示本地事件，则访问控制是不相关的。  
  
 若要获取当前应用于命名事件的规则的列表，请使用 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> 方法获取 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 对象，然后使用其 <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> 方法来获取对象的集合 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 。  
  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 对象不会将一对一映射到基础自由访问控制列表中的访问控制项 (DACL) 。 当你获取某个事件的所有访问规则集时，该集包含表示所有访问控制项所需的最小规则数。  
  
> [!NOTE]
>  在应用和删除规则时，基础访问控制项会更改。 如果可能，将合并规则中的信息以保持最小数量的访问控制项。 因此，当你获取当前的规则列表时，它可能与你已添加的所有规则的列表看起来不完全相同。  
  
 使用 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 对象指定对用户或组允许或拒绝的访问权限。 <xref:System.Security.AccessControl.EventWaitHandleAccessRule>对象始终表示允许的访问权限或拒绝访问，这两种方法都不会。  
  
 若要将规则应用于已命名的系统事件，请使用 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> 方法来获取 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 对象。 <xref:System.Security.AccessControl.EventWaitHandleSecurity>通过使用对象的方法添加规则来修改对象，然后使用 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> 方法重新附加安全对象。  
  
> [!IMPORTANT]
>  对对象所做 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 的更改不会影响命名事件的访问级别，直到调用方法将已 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> 更改的安全对象分配给已命名的事件为止。  
  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 对象是不可变的。 使用类的方法来修改事件的安全性， <xref:System.Security.AccessControl.EventWaitHandleSecurity> 以添加或删除规则; 执行此操作时，将修改基础访问控制项。  
  
> [!NOTE]
>  Windows 98 或 Windows Millennium Edition 不支持同步对象的安全性。  
  
   
  
## Examples  
 下面的代码示例演示如何创建和使用 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 对象。 该示例创建一个 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 对象，添加允许和拒绝当前用户的各种权限的规则，并显示生成的规则对。 然后，该示例允许当前用户具有新权限，并显示结果，并显示新权限与现有 <xref:System.Security.AccessControl.AccessControlType.Allow> 规则合并。  
  
> [!NOTE]
>  此示例不会将安全对象附加到 <xref:System.Threading.EventWaitHandle> 对象。 可在和中找到附加安全对象的 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> 示例 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> 。  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Security.AccessControl.EventWaitHandleSecurity" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandleAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.EventWaitHandleRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IdentityReference, eventRights As EventWaitHandleRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandleAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::EventWaitHandleRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.EventWaitHandleAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.EventWaitHandleRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.EventWaitHandleAccessRule" Usage="new System.Security.AccessControl.EventWaitHandleAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.EventWaitHandleRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">此规则应用到的用户或组。 必须为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型，或可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型，如 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</param>
        <param name="eventRights"><see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> 值的按位组合，它指定允许或拒绝的权限。</param>
        <param name="type"><see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指定是允许还是拒绝相应权限。</param>
        <summary>初始化 <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> 类的新实例，指定此规则应用到的用户或组、访问权限以及是否允许或拒绝指定的访问权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要 <xref:System.Threading.EventWaitHandle> 通过调用 <xref:System.Threading.WaitHandle.WaitOne%2A> 或方法)  (等待 <xref:System.Threading.WaitHandle.WaitAny%2A> ， <xref:System.Threading.WaitHandle.WaitAll%2A> 用户必须具有 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> 访问权限。 若要通过调用方法向事件发出信号 <xref:System.Threading.EventWaitHandle.Set%2A> ，或通过调用方法将其重置为信号状态 <xref:System.Threading.EventWaitHandle.Reset%2A> ，用户必须具有 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> 访问权限。 若要向 <xref:System.Threading.EventWaitHandle> 对象发出信号，然后通过调用方法来等待 <xref:System.Threading.WaitHandle.SignalAndWait%2A> ，用户必须具有 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> 和 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> 访问权限。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventRights" /> 指定了一个无效值。  
  
- 或 - 
 <paramref name="type" /> 指定了一个无效值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identity" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="eventRights" /> 为零。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />，也不属于可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型（如 <see cref="T:System.Security.Principal.SecurityIdentifier" />）。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventWaitHandleAccessRule (string identity, System.Security.AccessControl.EventWaitHandleRights eventRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.EventWaitHandleRights eventRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.EventWaitHandleAccessRule.#ctor(System.String,System.Security.AccessControl.EventWaitHandleRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As String, eventRights As EventWaitHandleRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventWaitHandleAccessRule(System::String ^ identity, System::Security::AccessControl::EventWaitHandleRights eventRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.EventWaitHandleAccessRule : string * System.Security.AccessControl.EventWaitHandleRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.EventWaitHandleAccessRule" Usage="new System.Security.AccessControl.EventWaitHandleAccessRule (identity, eventRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="eventRights" Type="System.Security.AccessControl.EventWaitHandleRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">应用此规则的用户或组的名称。</param>
        <param name="eventRights"><see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> 值的按位组合，它指定允许或拒绝的权限。</param>
        <param name="type"><see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指定是允许还是拒绝相应权限。</param>
        <summary>初始化 <see cref="T:System.Security.AccessControl.EventWaitHandleAccessRule" /> 类的新实例，指定应用此规则的用户或组的名称、访问权限以及是否允许或拒绝指定的访问权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要 <xref:System.Threading.EventWaitHandle> 通过调用 <xref:System.Threading.WaitHandle.WaitOne%2A> 或方法)  (等待 <xref:System.Threading.WaitHandle.WaitAny%2A> ， <xref:System.Threading.WaitHandle.WaitAll%2A> 用户必须具有 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize?displayProperty=nameWithType> 访问权限。 若要通过调用方法向事件发出信号 <xref:System.Threading.EventWaitHandle.Set%2A> ，或通过调用方法将其重置为信号状态 <xref:System.Threading.EventWaitHandle.Reset%2A> ，用户必须具有 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify?displayProperty=nameWithType> 访问权限。 若要向 <xref:System.Threading.EventWaitHandle> 对象发出信号，然后通过调用方法来等待 <xref:System.Threading.WaitHandle.SignalAndWait%2A> ，用户必须具有 <xref:System.Security.AccessControl.EventWaitHandleRights.Synchronize> 和 <xref:System.Security.AccessControl.EventWaitHandleRights.Modify> 访问权限。  
  
 此构造函数等效于 <xref:System.Security.Principal.NTAccount> 通过传递 `identity` 到 <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> 构造函数并将新创建的 <xref:System.Security.Principal.NTAccount> 对象传递给 <xref:System.Security.AccessControl.EventWaitHandleAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.EventWaitHandleRights%2CSystem.Security.AccessControl.AccessControlType%29> 构造函数来创建对象。  
  
   
  
## Examples  
 下面的代码示例演示如何使用此构造函数创建 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 对象。 该示例创建一个 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 对象，添加允许和拒绝当前用户的各种权限的规则，并显示生成的规则对。 然后，该示例允许当前用户具有新权限，并显示结果，并显示新权限与现有 <xref:System.Security.AccessControl.AccessControlType.Allow> 规则合并。  
  
> [!NOTE]
>  此示例不会将安全对象附加到 <xref:System.Threading.EventWaitHandle> 对象。 可在和中找到附加安全对象的 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> 示例 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> 。  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="eventRights" /> 指定了一个无效值。  
  
- 或 - 
 <paramref name="type" /> 指定了一个无效值。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="eventRights" /> 为零。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="identity" /> 是一个长度为零的字符串。  
  
- 或 - 
 <paramref name="identity" /> 的长度超过 512 个字符。</exception>
      </Docs>
    </Member>
    <Member MemberName="EventWaitHandleRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.EventWaitHandleRights EventWaitHandleRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EventWaitHandleRights As EventWaitHandleRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::EventWaitHandleRights EventWaitHandleRights { System::Security::AccessControl::EventWaitHandleRights get(); };" />
      <MemberSignature Language="F#" Value="member this.EventWaitHandleRights : System.Security.AccessControl.EventWaitHandleRights" Usage="System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.2.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
        <AssemblyVersion>4.0.4.0</AssemblyVersion>
        <AssemblyVersion>4.0.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.EventWaitHandleRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取访问规则允许或拒绝的权限。</summary>
        <value><see cref="T:System.Security.AccessControl.EventWaitHandleRights" /> 值的按位组合，它指示访问规则允许或拒绝的权限。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.EventWaitHandleAccessRule> 对象是不可变的。 您可以创建表示不同用户、不同权限或不同的新访问规则 <xref:System.Security.AccessControl.AccessControlType> ，但不能修改现有的访问规则。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleRights%2A> 属性来显示对象中包含的规则集中的权限 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 。 该示例创建一个 <xref:System.Security.AccessControl.EventWaitHandleSecurity> 对象，添加允许和拒绝当前用户的各种权限的规则，并显示生成的规则对。 然后，该示例允许当前用户具有新权限，并显示结果，并显示新权限与现有 <xref:System.Security.AccessControl.AccessControlType.Allow> 规则合并。  
  
> [!NOTE]
>  此示例不会将安全对象附加到 <xref:System.Threading.EventWaitHandle> 对象。 可在和中找到附加安全对象的 <xref:System.Threading.EventWaitHandle.GetAccessControl%2A?displayProperty=nameWithType> 示例 <xref:System.Threading.EventWaitHandle.SetAccessControl%2A?displayProperty=nameWithType> 。  
  
 [!code-csharp[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
