<Type Name="NativeObjectSecurity" FullName="System.Security.AccessControl.NativeObjectSecurity">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9fd6565f3d90e2a757ccb59c61397b0e8915f2b3" /><Meta Name="ms.sourcegitcommit" Value="a40c6a601bd45917c35e255d860c96b8b3853a79" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="01/05/2021" /><Meta Name="ms.locfileid" Value="97891318" /></Metadata><TypeSignature Language="C#" Value="public abstract class NativeObjectSecurity : System.Security.AccessControl.CommonObjectSecurity" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit NativeObjectSecurity extends System.Security.AccessControl.CommonObjectSecurity" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.NativeObjectSecurity" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class NativeObjectSecurity&#xA;Inherits CommonObjectSecurity" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeObjectSecurity abstract : System::Security::AccessControl::CommonObjectSecurity" />
  <TypeSignature Language="F#" Value="type NativeObjectSecurity = class&#xA;    inherit CommonObjectSecurity" />
  <AssemblyInfo>
    <AssemblyName>System.Security.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Security.AccessControl" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Security.AccessControl.CommonObjectSecurity</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供无需直接操作访问控制列表 (ACL) 而控制对本机对象的访问的能力。 本机对象类型由 <see cref="T:System.Security.AccessControl.ResourceType" /> 枚举定义。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NativeObjectSecurity (bool isContainer, System.Security.AccessControl.ResourceType resourceType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(bool isContainer, valuetype System.Security.AccessControl.ResourceType resourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.NativeObjectSecurity.#ctor(System.Boolean,System.Security.AccessControl.ResourceType)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (isContainer As Boolean, resourceType As ResourceType)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; NativeObjectSecurity(bool isContainer, System::Security::AccessControl::ResourceType resourceType);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.NativeObjectSecurity : bool * System.Security.AccessControl.ResourceType -&gt; System.Security.AccessControl.NativeObjectSecurity" Usage="new System.Security.AccessControl.NativeObjectSecurity (isContainer, resourceType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="isContainer" Type="System.Boolean" />
        <Parameter Name="resourceType" Type="System.Security.AccessControl.ResourceType" />
      </Parameters>
      <Docs>
        <param name="isContainer">如果新<see langword="true" /> 对象是容器对象，则为 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 。</param>
        <param name="resourceType">新 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象与之关联的安全对象的类型。</param>
        <summary>用指定的值初始化 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NativeObjectSecurity (bool isContainer, System.Security.AccessControl.ResourceType resourceType, System.Runtime.InteropServices.SafeHandle handle, System.Security.AccessControl.AccessControlSections includeSections);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(bool isContainer, valuetype System.Security.AccessControl.ResourceType resourceType, class System.Runtime.InteropServices.SafeHandle handle, valuetype System.Security.AccessControl.AccessControlSections includeSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.NativeObjectSecurity.#ctor(System.Boolean,System.Security.AccessControl.ResourceType,System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (isContainer As Boolean, resourceType As ResourceType, handle As SafeHandle, includeSections As AccessControlSections)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; NativeObjectSecurity(bool isContainer, System::Security::AccessControl::ResourceType resourceType, System::Runtime::InteropServices::SafeHandle ^ handle, System::Security::AccessControl::AccessControlSections includeSections);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.NativeObjectSecurity : bool * System.Security.AccessControl.ResourceType * System.Runtime.InteropServices.SafeHandle * System.Security.AccessControl.AccessControlSections -&gt; System.Security.AccessControl.NativeObjectSecurity" Usage="new System.Security.AccessControl.NativeObjectSecurity (isContainer, resourceType, handle, includeSections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="isContainer" Type="System.Boolean" />
        <Parameter Name="resourceType" Type="System.Security.AccessControl.ResourceType" />
        <Parameter Name="handle" Type="System.Runtime.InteropServices.SafeHandle" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" />
      </Parameters>
      <Docs>
        <param name="isContainer">如果新<see langword="true" /> 对象是容器对象，则为 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 。</param>
        <param name="resourceType">新 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象与之关联的安全对象的类型。</param>
        <param name="handle">新 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象与之关联的安全对象的句柄。</param>
        <param name="includeSections"><see cref="T:System.Security.AccessControl.AccessControlSections" /> 枚举值之一，该值指定要包含在此 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象中的安全对象的安全描述符（访问规则、审核规则、所有者和主要组）的部分。</param>
        <summary>用指定的值初始化 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 类的新实例。 我们建议传递给构造函数和 persist 方法的 <paramref name="includeSections" /> 参数的值应完全相同。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 保持对象时 <xref:System.Security.AccessControl.NativeObjectSecurity> ，如果传递给方法的参数的值与 `includeSections` <xref:System.Security.AccessControl.NativeObjectSecurity.Persist%2A> `includeSections` 传递到用于创建该对象的构造函数的参数的值不完全相同 <xref:System.Security.AccessControl.NativeObjectSecurity> ，则持久化对象的部分 <xref:System.Security.AccessControl.NativeObjectSecurity> 可能包含不可预测的值。 例如，如果调用的构造函数的值为 `includeSections` ，则将 <xref:System.Security.AccessControl.AccessControlSections.Access> <xref:System.Security.AccessControl.NativeObjectSecurity.Persist%2A> 对值为的对象调用方法 `includeSections` <xref:System.Security.AccessControl.AccessControlSections.All> ，生成的持久 <xref:System.Security.AccessControl.NativeObjectSecurity> 对象将包含其审核规则、组和所有者的不可预测值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NativeObjectSecurity (bool isContainer, System.Security.AccessControl.ResourceType resourceType, System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(bool isContainer, valuetype System.Security.AccessControl.ResourceType resourceType, class System.Security.AccessControl.NativeObjectSecurity/ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.NativeObjectSecurity.#ctor(System.Boolean,System.Security.AccessControl.ResourceType,System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (isContainer As Boolean, resourceType As ResourceType, exceptionFromErrorCode As NativeObjectSecurity.ExceptionFromErrorCode, exceptionContext As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; NativeObjectSecurity(bool isContainer, System::Security::AccessControl::ResourceType resourceType, System::Security::AccessControl::NativeObjectSecurity::ExceptionFromErrorCode ^ exceptionFromErrorCode, System::Object ^ exceptionContext);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.NativeObjectSecurity : bool * System.Security.AccessControl.ResourceType * System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode * obj -&gt; System.Security.AccessControl.NativeObjectSecurity" Usage="new System.Security.AccessControl.NativeObjectSecurity (isContainer, resourceType, exceptionFromErrorCode, exceptionContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="isContainer" Type="System.Boolean" />
        <Parameter Name="resourceType" Type="System.Security.AccessControl.ResourceType" />
        <Parameter Name="exceptionFromErrorCode" Type="System.Security.AccessControl.NativeObjectSecurity+ExceptionFromErrorCode" />
        <Parameter Name="exceptionContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="isContainer">如果新<see langword="true" /> 对象是容器对象，则为 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 。</param>
        <param name="resourceType">新 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象与之关联的安全对象的类型。</param>
        <param name="exceptionFromErrorCode">由提供自定义异常的集成者实现的委托。</param>
        <param name="exceptionContext">包含有关异常的源或目标的上下文信息的对象。</param>
        <summary>通过使用指定的值初始化 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NativeObjectSecurity (bool isContainer, System.Security.AccessControl.ResourceType resourceType, string name, System.Security.AccessControl.AccessControlSections includeSections);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(bool isContainer, valuetype System.Security.AccessControl.ResourceType resourceType, string name, valuetype System.Security.AccessControl.AccessControlSections includeSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.NativeObjectSecurity.#ctor(System.Boolean,System.Security.AccessControl.ResourceType,System.String,System.Security.AccessControl.AccessControlSections)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (isContainer As Boolean, resourceType As ResourceType, name As String, includeSections As AccessControlSections)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; NativeObjectSecurity(bool isContainer, System::Security::AccessControl::ResourceType resourceType, System::String ^ name, System::Security::AccessControl::AccessControlSections includeSections);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.NativeObjectSecurity : bool * System.Security.AccessControl.ResourceType * string * System.Security.AccessControl.AccessControlSections -&gt; System.Security.AccessControl.NativeObjectSecurity" Usage="new System.Security.AccessControl.NativeObjectSecurity (isContainer, resourceType, name, includeSections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="isContainer" Type="System.Boolean" />
        <Parameter Name="resourceType" Type="System.Security.AccessControl.ResourceType" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" />
      </Parameters>
      <Docs>
        <param name="isContainer">如果新<see langword="true" /> 对象是容器对象，则为 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 。</param>
        <param name="resourceType">新 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象与之关联的安全对象的类型。</param>
        <param name="name">与新 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象所关联的安全对象的名称。</param>
        <param name="includeSections"><see cref="T:System.Security.AccessControl.AccessControlSections" /> 枚举值之一，该值指定要包含在此 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象中的安全对象的安全描述符（访问规则、审核规则、所有者和主要组）的部分。</param>
        <summary>用指定的值初始化 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 类的新实例。 我们建议传递给构造函数和 persist 方法的 <paramref name="includeSections" /> 参数的值应完全相同。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 保持对象时 <xref:System.Security.AccessControl.NativeObjectSecurity> ，如果传递给方法的参数的值与 `includeSections` <xref:System.Security.AccessControl.NativeObjectSecurity.Persist%2A> `includeSections` 传递到用于创建该对象的构造函数的参数的值不完全相同 <xref:System.Security.AccessControl.NativeObjectSecurity> ，则持久化对象的部分 <xref:System.Security.AccessControl.NativeObjectSecurity> 可能包含不可预测的值。 例如，如果调用的构造函数的值为 `includeSections` ，则将 <xref:System.Security.AccessControl.AccessControlSections.Access> <xref:System.Security.AccessControl.NativeObjectSecurity.Persist%2A> 对值为的对象调用方法 `includeSections` <xref:System.Security.AccessControl.AccessControlSections.All> ，生成的持久 <xref:System.Security.AccessControl.NativeObjectSecurity> 对象将包含其审核规则、组和所有者的不可预测值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NativeObjectSecurity (bool isContainer, System.Security.AccessControl.ResourceType resourceType, System.Runtime.InteropServices.SafeHandle handle, System.Security.AccessControl.AccessControlSections includeSections, System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(bool isContainer, valuetype System.Security.AccessControl.ResourceType resourceType, class System.Runtime.InteropServices.SafeHandle handle, valuetype System.Security.AccessControl.AccessControlSections includeSections, class System.Security.AccessControl.NativeObjectSecurity/ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.NativeObjectSecurity.#ctor(System.Boolean,System.Security.AccessControl.ResourceType,System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (isContainer As Boolean, resourceType As ResourceType, handle As SafeHandle, includeSections As AccessControlSections, exceptionFromErrorCode As NativeObjectSecurity.ExceptionFromErrorCode, exceptionContext As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; NativeObjectSecurity(bool isContainer, System::Security::AccessControl::ResourceType resourceType, System::Runtime::InteropServices::SafeHandle ^ handle, System::Security::AccessControl::AccessControlSections includeSections, System::Security::AccessControl::NativeObjectSecurity::ExceptionFromErrorCode ^ exceptionFromErrorCode, System::Object ^ exceptionContext);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.NativeObjectSecurity : bool * System.Security.AccessControl.ResourceType * System.Runtime.InteropServices.SafeHandle * System.Security.AccessControl.AccessControlSections * System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode * obj -&gt; System.Security.AccessControl.NativeObjectSecurity" Usage="new System.Security.AccessControl.NativeObjectSecurity (isContainer, resourceType, handle, includeSections, exceptionFromErrorCode, exceptionContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="isContainer" Type="System.Boolean" />
        <Parameter Name="resourceType" Type="System.Security.AccessControl.ResourceType" />
        <Parameter Name="handle" Type="System.Runtime.InteropServices.SafeHandle" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" />
        <Parameter Name="exceptionFromErrorCode" Type="System.Security.AccessControl.NativeObjectSecurity+ExceptionFromErrorCode" />
        <Parameter Name="exceptionContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="isContainer">如果新<see langword="true" /> 对象是容器对象，则为 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 。</param>
        <param name="resourceType">新 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象与之关联的安全对象的类型。</param>
        <param name="handle">新 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象与之关联的安全对象的句柄。</param>
        <param name="includeSections"><see cref="T:System.Security.AccessControl.AccessControlSections" /> 枚举值之一，该值指定要包含在此 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象中的安全对象的安全描述符（访问规则、审核规则、所有者和主要组）的部分。</param>
        <param name="exceptionFromErrorCode">由提供自定义异常的集成者实现的委托。</param>
        <param name="exceptionContext">包含有关异常的源或目标的上下文信息的对象。</param>
        <summary>用指定的值初始化 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 类的新实例。 我们建议传递给构造函数和 persist 方法的 <paramref name="includeSections" /> 参数的值应完全相同。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 保持对象时 <xref:System.Security.AccessControl.NativeObjectSecurity> ，如果传递给方法的参数的值与 `includeSections` <xref:System.Security.AccessControl.NativeObjectSecurity.Persist%2A> `includeSections` 传递到用于创建该对象的构造函数的参数的值不完全相同 <xref:System.Security.AccessControl.NativeObjectSecurity> ，则持久化对象的部分 <xref:System.Security.AccessControl.NativeObjectSecurity> 可能包含不可预测的值。 例如，如果调用的构造函数的值为 `includeSections` ，则将 <xref:System.Security.AccessControl.AccessControlSections.Access> <xref:System.Security.AccessControl.NativeObjectSecurity.Persist%2A> 对值为的对象调用方法 `includeSections` <xref:System.Security.AccessControl.AccessControlSections.All> ，生成的持久 <xref:System.Security.AccessControl.NativeObjectSecurity> 对象将包含其审核规则、组和所有者的不可预测值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NativeObjectSecurity (bool isContainer, System.Security.AccessControl.ResourceType resourceType, string name, System.Security.AccessControl.AccessControlSections includeSections, System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(bool isContainer, valuetype System.Security.AccessControl.ResourceType resourceType, string name, valuetype System.Security.AccessControl.AccessControlSections includeSections, class System.Security.AccessControl.NativeObjectSecurity/ExceptionFromErrorCode exceptionFromErrorCode, object exceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.NativeObjectSecurity.#ctor(System.Boolean,System.Security.AccessControl.ResourceType,System.String,System.Security.AccessControl.AccessControlSections,System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (isContainer As Boolean, resourceType As ResourceType, name As String, includeSections As AccessControlSections, exceptionFromErrorCode As NativeObjectSecurity.ExceptionFromErrorCode, exceptionContext As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; NativeObjectSecurity(bool isContainer, System::Security::AccessControl::ResourceType resourceType, System::String ^ name, System::Security::AccessControl::AccessControlSections includeSections, System::Security::AccessControl::NativeObjectSecurity::ExceptionFromErrorCode ^ exceptionFromErrorCode, System::Object ^ exceptionContext);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.NativeObjectSecurity : bool * System.Security.AccessControl.ResourceType * string * System.Security.AccessControl.AccessControlSections * System.Security.AccessControl.NativeObjectSecurity.ExceptionFromErrorCode * obj -&gt; System.Security.AccessControl.NativeObjectSecurity" Usage="new System.Security.AccessControl.NativeObjectSecurity (isContainer, resourceType, name, includeSections, exceptionFromErrorCode, exceptionContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="isContainer" Type="System.Boolean" />
        <Parameter Name="resourceType" Type="System.Security.AccessControl.ResourceType" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" />
        <Parameter Name="exceptionFromErrorCode" Type="System.Security.AccessControl.NativeObjectSecurity+ExceptionFromErrorCode" />
        <Parameter Name="exceptionContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="isContainer">如果新<see langword="true" /> 对象是容器对象，则为 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 。</param>
        <param name="resourceType">新 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象与之关联的安全对象的类型。</param>
        <param name="name">与新 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象所关联的安全对象的名称。</param>
        <param name="includeSections"><see cref="T:System.Security.AccessControl.AccessControlSections" /> 枚举值之一，该值指定要包含在此 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象中的安全对象的安全描述符（访问规则、审核规则、所有者和主要组）的部分。</param>
        <param name="exceptionFromErrorCode">由提供自定义异常的集成者实现的委托。</param>
        <param name="exceptionContext">包含有关异常的源或目标的上下文信息的对象。</param>
        <summary>用指定的值初始化 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 类的新实例。 我们建议传递给构造函数和 persist 方法的 <paramref name="includeSections" /> 参数的值应完全相同。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 保持对象时 <xref:System.Security.AccessControl.NativeObjectSecurity> ，如果传递给方法的参数的值与 `includeSections` <xref:System.Security.AccessControl.NativeObjectSecurity.Persist%2A> `includeSections` 传递到用于创建该对象的构造函数的参数的值不完全相同 <xref:System.Security.AccessControl.NativeObjectSecurity> ，则持久化对象的部分 <xref:System.Security.AccessControl.NativeObjectSecurity> 可能包含不可预测的值。 例如，如果调用的构造函数的值为 `includeSections` ，则将 <xref:System.Security.AccessControl.AccessControlSections.Access> <xref:System.Security.AccessControl.NativeObjectSecurity.Persist%2A> 对值为的对象调用方法 `includeSections` <xref:System.Security.AccessControl.AccessControlSections.All> ，生成的持久 <xref:System.Security.AccessControl.NativeObjectSecurity> 对象将包含其审核规则、组和所有者的不可预测值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Persist">
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将与此 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象关联的安全描述符的指定部分保存到永久存储中。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Persist">
      <MemberSignature Language="C#" Value="protected override sealed void Persist (System.Runtime.InteropServices.SafeHandle handle, System.Security.AccessControl.AccessControlSections includeSections);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Persist(class System.Runtime.InteropServices.SafeHandle handle, valuetype System.Security.AccessControl.AccessControlSections includeSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub Persist (handle As SafeHandle, includeSections As AccessControlSections)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Persist(System::Runtime::InteropServices::SafeHandle ^ handle, System::Security::AccessControl::AccessControlSections includeSections);" />
      <MemberSignature Language="F#" Value="override this.Persist : System.Runtime.InteropServices.SafeHandle * System.Security.AccessControl.AccessControlSections -&gt; unit" Usage="nativeObjectSecurity.Persist (handle, includeSections)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.Runtime.InteropServices.SafeHandle" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" />
      </Parameters>
      <Docs>
        <param name="handle">此 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象关联的安全对象的句柄。</param>
        <param name="includeSections"><see cref="T:System.Security.AccessControl.AccessControlSections" /> 枚举值之一，该值指定要保存的安全对象的安全描述符（访问规则、审核规则、所有者和主要组）的部分。</param>
        <summary>将与此 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象关联的安全描述符的指定部分保存到永久存储中。 我们建议保持传递给构造函数和 persist 方法的 <paramref name="includeSections" /> 参数的值完全相同。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 保持对象时 <xref:System.Security.AccessControl.NativeObjectSecurity> ，如果传递给方法的参数的值与 `includeSections` <xref:System.Security.AccessControl.NativeObjectSecurity.Persist%2A> `includeSections` 传递到用于创建该对象的构造函数的参数的值不完全相同 <xref:System.Security.AccessControl.NativeObjectSecurity> ，则持久化对象的部分 <xref:System.Security.AccessControl.NativeObjectSecurity> 可能包含不可预测的值。 例如，如果调用的构造函数的值为 `includeSections` ，则将 <xref:System.Security.AccessControl.AccessControlSections.Access> <xref:System.Security.AccessControl.NativeObjectSecurity.Persist%2A> 对值为的对象调用方法 `includeSections` <xref:System.Security.AccessControl.AccessControlSections.All> ，生成的持久 <xref:System.Security.AccessControl.NativeObjectSecurity> 对象将包含其审核规则、组和所有者的不可预测值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">与此 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象关联的安全对象是目录或文件，并且找不到该目录或文件。</exception>
      </Docs>
    </Member>
    <Member MemberName="Persist">
      <MemberSignature Language="C#" Value="protected override sealed void Persist (string name, System.Security.AccessControl.AccessControlSections includeSections);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Persist(string name, valuetype System.Security.AccessControl.AccessControlSections includeSections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub Persist (name As String, includeSections As AccessControlSections)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Persist(System::String ^ name, System::Security::AccessControl::AccessControlSections includeSections);" />
      <MemberSignature Language="F#" Value="override this.Persist : string * System.Security.AccessControl.AccessControlSections -&gt; unit" Usage="nativeObjectSecurity.Persist (name, includeSections)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" />
      </Parameters>
      <Docs>
        <param name="name">与此 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象关联的安全对象的名称。</param>
        <param name="includeSections"><see cref="T:System.Security.AccessControl.AccessControlSections" /> 枚举值之一，该值指定要保存的安全对象的安全描述符（访问规则、审核规则、所有者和主要组）的部分。</param>
        <summary>将与此 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象关联的安全描述符的指定部分保存到永久存储中。 我们建议传递给构造函数和 persist 方法的 <paramref name="includeSections" /> 参数的值应完全相同。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 保持对象时 <xref:System.Security.AccessControl.NativeObjectSecurity> ，如果传递给方法的参数的值与 `includeSections` <xref:System.Security.AccessControl.NativeObjectSecurity.Persist%2A> `includeSections` 传递到用于创建该对象的构造函数的参数的值不完全相同 <xref:System.Security.AccessControl.NativeObjectSecurity> ，则持久化对象的部分 <xref:System.Security.AccessControl.NativeObjectSecurity> 可能包含不可预测的值。 例如，如果调用的构造函数的值为 `includeSections` ，则将 <xref:System.Security.AccessControl.AccessControlSections.Access> <xref:System.Security.AccessControl.NativeObjectSecurity.Persist%2A> 对值为的对象调用方法 `includeSections` <xref:System.Security.AccessControl.AccessControlSections.All> ，生成的持久 <xref:System.Security.AccessControl.NativeObjectSecurity> 对象将包含其审核规则、组和所有者的不可预测值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">与此 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象关联的安全对象是目录或文件，并且找不到该目录或文件。</exception>
      </Docs>
    </Member>
    <Member MemberName="Persist">
      <MemberSignature Language="C#" Value="protected void Persist (System.Runtime.InteropServices.SafeHandle handle, System.Security.AccessControl.AccessControlSections includeSections, object exceptionContext);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Persist(class System.Runtime.InteropServices.SafeHandle handle, valuetype System.Security.AccessControl.AccessControlSections includeSections, object exceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Persist (handle As SafeHandle, includeSections As AccessControlSections, exceptionContext As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Persist(System::Runtime::InteropServices::SafeHandle ^ handle, System::Security::AccessControl::AccessControlSections includeSections, System::Object ^ exceptionContext);" />
      <MemberSignature Language="F#" Value="override this.Persist : System.Runtime.InteropServices.SafeHandle * System.Security.AccessControl.AccessControlSections * obj -&gt; unit" Usage="nativeObjectSecurity.Persist (handle, includeSections, exceptionContext)" />
      <MemberSignature Language="C#" Value="protected void Persist (System.Runtime.InteropServices.SafeHandle handle, System.Security.AccessControl.AccessControlSections includeSections, object? exceptionContext);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.Runtime.InteropServices.SafeHandle" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" />
        <Parameter Name="exceptionContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="handle">此 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象关联的安全对象的句柄。</param>
        <param name="includeSections"><see cref="T:System.Security.AccessControl.AccessControlSections" /> 枚举值之一，该值指定要保存的安全对象的安全描述符（访问规则、审核规则、所有者和主要组）的部分。</param>
        <param name="exceptionContext">包含有关异常的源或目标的上下文信息的对象。</param>
        <summary>将与此 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象关联的安全描述符的指定部分保存到永久存储中。 我们建议传递给构造函数和 persist 方法的 <paramref name="includeSections" /> 参数的值应完全相同。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 保持对象时 <xref:System.Security.AccessControl.NativeObjectSecurity> ，如果传递给方法的参数的值与 `includeSections` <xref:System.Security.AccessControl.NativeObjectSecurity.Persist%2A> `includeSections` 传递到用于创建该对象的构造函数的参数的值不完全相同 <xref:System.Security.AccessControl.NativeObjectSecurity> ，则持久化对象的部分 <xref:System.Security.AccessControl.NativeObjectSecurity> 可能包含不可预测的值。 例如，如果调用的构造函数的值为 `includeSections` ，则将 <xref:System.Security.AccessControl.AccessControlSections.Access> <xref:System.Security.AccessControl.NativeObjectSecurity.Persist%2A> 对值为的对象调用方法 `includeSections` <xref:System.Security.AccessControl.AccessControlSections.All> ，生成的持久 <xref:System.Security.AccessControl.NativeObjectSecurity> 对象将包含其审核规则、组和所有者的不可预测值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">与此 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象关联的安全对象是目录或文件，并且找不到该目录或文件。</exception>
      </Docs>
    </Member>
    <Member MemberName="Persist">
      <MemberSignature Language="C#" Value="protected void Persist (string name, System.Security.AccessControl.AccessControlSections includeSections, object exceptionContext);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-plat-ext-3.0;dotnet-plat-ext-3.1;netcore-1.0;netcore-1.1;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Persist(string name, valuetype System.Security.AccessControl.AccessControlSections includeSections, object exceptionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Persist (name As String, includeSections As AccessControlSections, exceptionContext As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Persist(System::String ^ name, System::Security::AccessControl::AccessControlSections includeSections, System::Object ^ exceptionContext);" />
      <MemberSignature Language="F#" Value="override this.Persist : string * System.Security.AccessControl.AccessControlSections * obj -&gt; unit" Usage="nativeObjectSecurity.Persist (name, includeSections, exceptionContext)" />
      <MemberSignature Language="C#" Value="protected void Persist (string name, System.Security.AccessControl.AccessControlSections includeSections, object? exceptionContext);" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="includeSections" Type="System.Security.AccessControl.AccessControlSections" />
        <Parameter Name="exceptionContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">与此 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象关联的安全对象的名称。</param>
        <param name="includeSections"><see cref="T:System.Security.AccessControl.AccessControlSections" /> 枚举值之一，该值指定要保存的安全对象的安全描述符（访问规则、审核规则、所有者和主要组）的部分。</param>
        <param name="exceptionContext">包含有关异常的源或目标的上下文信息的对象。</param>
        <summary>将与此 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象关联的安全描述符的指定部分保存到永久存储中。 我们建议传递给构造函数和 persist 方法的 <paramref name="includeSections" /> 参数的值应完全相同。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 保持对象时 <xref:System.Security.AccessControl.NativeObjectSecurity> ，如果传递给方法的参数的值与 `includeSections` <xref:System.Security.AccessControl.NativeObjectSecurity.Persist%2A> `includeSections` 传递到用于创建该对象的构造函数的参数的值不完全相同 <xref:System.Security.AccessControl.NativeObjectSecurity> ，则持久化对象的部分 <xref:System.Security.AccessControl.NativeObjectSecurity> 可能包含不可预测的值。 例如，如果调用的构造函数的值为 `includeSections` ，则将 <xref:System.Security.AccessControl.AccessControlSections.Access> <xref:System.Security.AccessControl.NativeObjectSecurity.Persist%2A> 对值为的对象调用方法 `includeSections` <xref:System.Security.AccessControl.AccessControlSections.All> ，生成的持久 <xref:System.Security.AccessControl.NativeObjectSecurity> 对象将包含其审核规则、组和所有者的不可预测值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">与此 <see cref="T:System.Security.AccessControl.NativeObjectSecurity" /> 对象关联的安全对象是目录或文件，并且找不到该目录或文件。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
