<Type Name="RegistryAccessRule" FullName="System.Security.AccessControl.RegistryAccessRule">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4a8e468f28367bb3c624af10f77dff896707100d" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86582036" /></Metadata><TypeSignature Language="C#" Value="public sealed class RegistryAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistryAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistryAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistryAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistryAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type RegistryAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
    <AssemblyVersion>4.1.3.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="Microsoft.Win32.Registry.AccessControl" FromVersion="4.0.3.0" To="Microsoft.Win32.Registry" ToVersion="4.1.1.0" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2" />
    <TypeForwarding From="Microsoft.Win32.Registry.AccessControl" FromVersion="4.0.4.0" To="Microsoft.Win32.Registry" ToVersion="4.1.2.0" FrameworkAlternate="dotnet-plat-ext-3.0;net-5.0;netcore-3.0" />
    <TypeForwarding From="Microsoft.Win32.Registry.AccessControl" FromVersion="4.0.5.0" To="Microsoft.Win32.Registry" ToVersion="4.1.3.0" FrameworkAlternate="dotnet-plat-ext-3.1;netcore-3.1" />
    <TypeForwarding From="Microsoft.Win32.Registry.AccessControl" FromVersion="5.0.0.0" To="Microsoft.Win32.Registry" ToVersion="5.0.0.0" FrameworkAlternate="dotnet-plat-ext-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="570a1-101">表示一组允许或拒绝用户或组进行访问的权限。</span><span class="sxs-lookup"><span data-stu-id="570a1-101">Represents a set of access rights allowed or denied for a user or group.</span></span> <span data-ttu-id="570a1-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="570a1-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="570a1-103"><xref:System.Security.AccessControl.RegistryAccessRule>类是 .NET Framework 提供的一组类中的一组，用于管理注册表项的 Windows 访问控制安全性。</span><span class="sxs-lookup"><span data-stu-id="570a1-103">The <xref:System.Security.AccessControl.RegistryAccessRule> class is one of a set of classes that the .NET Framework provides for managing Windows access control security on registry keys.</span></span> <span data-ttu-id="570a1-104">有关这些类的概述及其与基础 Windows 访问控制结构的关系，请参阅 <xref:System.Security.AccessControl.RegistrySecurity> 。</span><span class="sxs-lookup"><span data-stu-id="570a1-104">For an overview of these classes, and their relationship to the underlying Windows access control structures, see <xref:System.Security.AccessControl.RegistrySecurity>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="570a1-105">Windows 访问控制安全性只能应用于注册表项。</span><span class="sxs-lookup"><span data-stu-id="570a1-105">Windows access control security can only be applied to registry keys.</span></span> <span data-ttu-id="570a1-106">它不能应用于存储在键中的各个键/值对。</span><span class="sxs-lookup"><span data-stu-id="570a1-106">It cannot be applied to individual key/value pairs stored in a key.</span></span>  
  
 <span data-ttu-id="570a1-107">若要获取当前应用于注册表项的规则列表，请使用 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> 方法获取 <xref:System.Security.AccessControl.RegistrySecurity> 对象，然后使用其 <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> 方法来获取对象的集合 <xref:System.Security.AccessControl.RegistryAccessRule> 。</span><span class="sxs-lookup"><span data-stu-id="570a1-107">To get a list of the rules currently applied to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method to get a <xref:System.Security.AccessControl.RegistrySecurity> object, and then use its <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> method to obtain a collection of <xref:System.Security.AccessControl.RegistryAccessRule> objects.</span></span>  
  
 <span data-ttu-id="570a1-108"><xref:System.Security.AccessControl.RegistryAccessRule> 对象不会将一对一映射到基本自由控制访问列表中的访问控制项 (DACL) 。</span><span class="sxs-lookup"><span data-stu-id="570a1-108"><xref:System.Security.AccessControl.RegistryAccessRule> objects do not map one-to-one with access control entries in the underlying discretionary control access list (DACL).</span></span> <span data-ttu-id="570a1-109">获取注册表项的所有访问规则集时，该集包含当前用于表示所有访问控制项所需的最小规则数。</span><span class="sxs-lookup"><span data-stu-id="570a1-109">When you get the set of all access rules for a registry key, the set contains the minimum number of rules currently required to express all the access control entries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="570a1-110">在应用和删除规则时，基础访问控制项会更改。</span><span class="sxs-lookup"><span data-stu-id="570a1-110">The underlying access control entries change as you apply and remove rules.</span></span> <span data-ttu-id="570a1-111">如果可能，将合并规则中的信息以保持最小数量的访问控制项。</span><span class="sxs-lookup"><span data-stu-id="570a1-111">The information in rules is merged if possible, to maintain the smallest number of access control entries.</span></span> <span data-ttu-id="570a1-112">因此，当您阅读当前的规则列表时，它可能看起来与您添加的所有规则的列表并不完全相同。</span><span class="sxs-lookup"><span data-stu-id="570a1-112">Thus, when you read the current list of rules, it might not look exactly like the list of all the rules you have added.</span></span>  
  
 <span data-ttu-id="570a1-113">使用 <xref:System.Security.AccessControl.RegistryAccessRule> 对象指定对用户或组允许或拒绝的访问权限。</span><span class="sxs-lookup"><span data-stu-id="570a1-113">Use <xref:System.Security.AccessControl.RegistryAccessRule> objects to specify access rights to allow or deny to a user or group.</span></span> <span data-ttu-id="570a1-114"><xref:System.Security.AccessControl.RegistryAccessRule>对象始终表示允许的访问权限或拒绝访问，这两种方法都不会。</span><span class="sxs-lookup"><span data-stu-id="570a1-114">A <xref:System.Security.AccessControl.RegistryAccessRule> object always represents either allowed access or denied access, never both.</span></span>  
  
 <span data-ttu-id="570a1-115">若要将规则应用于注册表项，请使用 <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> 方法来获取 <xref:System.Security.AccessControl.RegistrySecurity> 对象。</span><span class="sxs-lookup"><span data-stu-id="570a1-115">To apply a rule to a registry key, use the <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> method to get the <xref:System.Security.AccessControl.RegistrySecurity> object.</span></span> <span data-ttu-id="570a1-116"><xref:System.Security.AccessControl.RegistrySecurity>通过使用对象的方法添加规则来修改对象，然后使用 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> 方法重新附加安全对象。</span><span class="sxs-lookup"><span data-stu-id="570a1-116">Modify the <xref:System.Security.AccessControl.RegistrySecurity> object by using its methods to add the rule, and then use the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method to reattach the security object.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="570a1-117">对对象所做 <xref:System.Security.AccessControl.RegistrySecurity> 的更改不会影响注册表项的访问级别，直到调用方法将已 <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> 更改的安全对象分配给注册表项。</span><span class="sxs-lookup"><span data-stu-id="570a1-117">Changes you make to a <xref:System.Security.AccessControl.RegistrySecurity> object do not affect the access levels of the registry key until you call the <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> method to assign the altered security object to the registry key.</span></span>  
  
 <span data-ttu-id="570a1-118"><xref:System.Security.AccessControl.RegistryAccessRule> 对象是不可变的。</span><span class="sxs-lookup"><span data-stu-id="570a1-118"><xref:System.Security.AccessControl.RegistryAccessRule> objects are immutable.</span></span> <span data-ttu-id="570a1-119">使用类的方法来修改注册表项的安全性， <xref:System.Security.AccessControl.RegistrySecurity> 以添加或删除规则; 执行此操作时，将修改基础访问控制项。</span><span class="sxs-lookup"><span data-stu-id="570a1-119">Security for a registry key is modified using the methods of the <xref:System.Security.AccessControl.RegistrySecurity> class to add or remove rules; as you do this, the underlying access control entries are modified.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="570a1-120">下面的代码示例演示使用继承和传播的访问规则。</span><span class="sxs-lookup"><span data-stu-id="570a1-120">The following code example demonstrates access rules with inheritance and propagation.</span></span> <span data-ttu-id="570a1-121">该示例创建一个 <xref:System.Security.AccessControl.RegistrySecurity> 对象，然后创建并添加两个具有标志的规则 <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> 。</span><span class="sxs-lookup"><span data-stu-id="570a1-121">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object, then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flag.</span></span> <span data-ttu-id="570a1-122">第一个规则没有传播标志，而第二条具有 <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> 和 <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> 。</span><span class="sxs-lookup"><span data-stu-id="570a1-122">The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> and <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>.</span></span>  
  
 <span data-ttu-id="570a1-123">该程序将在对象中显示规则 <xref:System.Security.AccessControl.RegistrySecurity> ，然后使用对象创建子项。</span><span class="sxs-lookup"><span data-stu-id="570a1-123">The program displays the rules in the <xref:System.Security.AccessControl.RegistrySecurity> object, and then uses the object to create a subkey.</span></span> <span data-ttu-id="570a1-124">该程序创建一个子子项和一个孙级子项，然后显示每个子项的安全性。</span><span class="sxs-lookup"><span data-stu-id="570a1-124">The program creates a child subkey and a grandchild subkey, and then displays the security for each subkey.</span></span> <span data-ttu-id="570a1-125">最后，程序删除测试密钥。</span><span class="sxs-lookup"><span data-stu-id="570a1-125">Finally, the program deletes the test keys.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="570a1-126">初始化 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="570a1-126">Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IdentityReference, registryRights As RegistryRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity"><span data-ttu-id="570a1-127">此规则应用到的用户或组。</span><span class="sxs-lookup"><span data-stu-id="570a1-127">The user or group the rule applies to.</span></span> <span data-ttu-id="570a1-128">必须为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型，或可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型，如 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</span><span class="sxs-lookup"><span data-stu-id="570a1-128">Must be of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> or a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</span></span></param>
        <param name="registryRights"><span data-ttu-id="570a1-129"><see cref="T:System.Security.AccessControl.RegistryRights" /> 值的按位组合，它指示允许或拒绝的权限。</span><span class="sxs-lookup"><span data-stu-id="570a1-129">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values indicating the rights allowed or denied.</span></span></param>
        <param name="type"><span data-ttu-id="570a1-130"><see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指示是允许还是拒绝相应权限。</span><span class="sxs-lookup"><span data-stu-id="570a1-130">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values indicating whether the rights are allowed or denied.</span></span></param>
        <summary><span data-ttu-id="570a1-131">初始化 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 类的新实例，指定此规则应用到的用户或组、访问权限以及是否允许或拒绝指定的访问权限。</span><span class="sxs-lookup"><span data-stu-id="570a1-131">Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> class, specifying the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="570a1-132">此构造函数指定默认的传播和继承。</span><span class="sxs-lookup"><span data-stu-id="570a1-132">This constructor specifies default propagation and inheritance.</span></span> <span data-ttu-id="570a1-133">即 <xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> 和 <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="570a1-133">That is, <xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> and <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="570a1-134"><paramref name="registryRights" /> 指定了一个无效值。</span><span class="sxs-lookup"><span data-stu-id="570a1-134"><paramref name="registryRights" /> specifies an invalid value.</span></span>  
  
<span data-ttu-id="570a1-135">- 或 -</span><span class="sxs-lookup"><span data-stu-id="570a1-135">-or-</span></span> 
 <span data-ttu-id="570a1-136"><paramref name="type" /> 指定了一个无效值。</span><span class="sxs-lookup"><span data-stu-id="570a1-136"><paramref name="type" /> specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="570a1-137"><paramref name="identity" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="570a1-137"><paramref name="identity" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="570a1-138">- 或 -</span><span class="sxs-lookup"><span data-stu-id="570a1-138">-or-</span></span> 
 <span data-ttu-id="570a1-139"><paramref name="eventRights" /> 为零。</span><span class="sxs-lookup"><span data-stu-id="570a1-139"><paramref name="eventRights" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="570a1-140"><paramref name="identity" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />，也不属于可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型（如 <see cref="T:System.Security.Principal.SecurityIdentifier" />）。</span><span class="sxs-lookup"><span data-stu-id="570a1-140"><paramref name="identity" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As String, registryRights As RegistryRights, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity"><span data-ttu-id="570a1-141">应用此规则的用户或组的名称。</span><span class="sxs-lookup"><span data-stu-id="570a1-141">The name of the user or group the rule applies to.</span></span></param>
        <param name="registryRights"><span data-ttu-id="570a1-142"><see cref="T:System.Security.AccessControl.RegistryRights" /> 值的按位组合，它指示允许或拒绝的权限。</span><span class="sxs-lookup"><span data-stu-id="570a1-142">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values indicating the rights allowed or denied.</span></span></param>
        <param name="type"><span data-ttu-id="570a1-143"><see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指示是允许还是拒绝相应权限。</span><span class="sxs-lookup"><span data-stu-id="570a1-143">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values indicating whether the rights are allowed or denied.</span></span></param>
        <summary><span data-ttu-id="570a1-144">初始化 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 类的新实例，指定应用此规则的用户或组的名称、访问权限以及是否允许或拒绝指定的访问权限。</span><span class="sxs-lookup"><span data-stu-id="570a1-144">Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> class, specifying the name of the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="570a1-145">此构造函数指定默认的传播和继承。</span><span class="sxs-lookup"><span data-stu-id="570a1-145">This constructor specifies default propagation and inheritance.</span></span> <span data-ttu-id="570a1-146">即 <xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> 和 <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="570a1-146">That is, <xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> and <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="570a1-147">此构造函数等效于 <xref:System.Security.Principal.NTAccount> 通过传递 `identity` 到 <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> 构造函数并将新创建的 <xref:System.Security.Principal.NTAccount> 对象传递给 <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29> 构造函数来创建对象。</span><span class="sxs-lookup"><span data-stu-id="570a1-147">This constructor is equivalent to creating an <xref:System.Security.Principal.NTAccount> object, by passing `identity` to the <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> constructor, and passing the newly created <xref:System.Security.Principal.NTAccount> object to the <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="570a1-148">下面的代码示例创建了注册表访问规则并将其添加到了一个 <xref:System.Security.AccessControl.RegistrySecurity> 对象中，其中显示了允许和拒绝权限的规则如何保持独立，同时合并了相同类型的兼容规则。</span><span class="sxs-lookup"><span data-stu-id="570a1-148">The following code example creates registry access rules and adds them to a <xref:System.Security.AccessControl.RegistrySecurity> object, showing how rules that allow and deny rights remain separate, while compatible rules of the same kind are merged.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="570a1-149"><paramref name="registryRights" /> 指定了一个无效值。</span><span class="sxs-lookup"><span data-stu-id="570a1-149"><paramref name="registryRights" /> specifies an invalid value.</span></span>  
  
<span data-ttu-id="570a1-150">- 或 -</span><span class="sxs-lookup"><span data-stu-id="570a1-150">-or-</span></span> 
 <span data-ttu-id="570a1-151"><paramref name="type" /> 指定了一个无效值。</span><span class="sxs-lookup"><span data-stu-id="570a1-151"><paramref name="type" /> specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="570a1-152"><paramref name="registryRights" /> 为零。</span><span class="sxs-lookup"><span data-stu-id="570a1-152"><paramref name="registryRights" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="570a1-153"><paramref name="identity" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="570a1-153"><paramref name="identity" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="570a1-154">- 或 -</span><span class="sxs-lookup"><span data-stu-id="570a1-154">-or-</span></span> 
 <span data-ttu-id="570a1-155"><paramref name="identity" /> 是一个长度为零的字符串。</span><span class="sxs-lookup"><span data-stu-id="570a1-155"><paramref name="identity" /> is a zero-length string.</span></span>  
  
<span data-ttu-id="570a1-156">- 或 -</span><span class="sxs-lookup"><span data-stu-id="570a1-156">-or-</span></span> 
 <span data-ttu-id="570a1-157"><paramref name="identity" /> 的长度超过 512 个字符。</span><span class="sxs-lookup"><span data-stu-id="570a1-157"><paramref name="identity" /> is longer than 512 characters.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As IdentityReference, registryRights As RegistryRights, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity"><span data-ttu-id="570a1-158">此规则应用到的用户或组。</span><span class="sxs-lookup"><span data-stu-id="570a1-158">The user or group the rule applies to.</span></span> <span data-ttu-id="570a1-159">必须为 <see cref="T:System.Security.Principal.SecurityIdentifier" /> 类型，或可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型，如 <see cref="T:System.Security.Principal.SecurityIdentifier" />。</span><span class="sxs-lookup"><span data-stu-id="570a1-159">Must be of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> or a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</span></span></param>
        <param name="registryRights"><span data-ttu-id="570a1-160"><see cref="T:System.Security.AccessControl.RegistryRights" /> 值的按位组合，它指定允许或拒绝的权限。</span><span class="sxs-lookup"><span data-stu-id="570a1-160">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values specifying the rights allowed or denied.</span></span></param>
        <param name="inheritanceFlags"><span data-ttu-id="570a1-161"><see cref="T:System.Security.AccessControl.InheritanceFlags" /> 标志的按位组合，指定如何从其他对象继承访问权限。</span><span class="sxs-lookup"><span data-stu-id="570a1-161">A bitwise combination of <see cref="T:System.Security.AccessControl.InheritanceFlags" /> flags specifying how access rights are inherited from other objects.</span></span></param>
        <param name="propagationFlags"><span data-ttu-id="570a1-162"><see cref="T:System.Security.AccessControl.PropagationFlags" /> 标志的按位组合，指定如何将访问权限传播到其他对象。</span><span class="sxs-lookup"><span data-stu-id="570a1-162">A bitwise combination of <see cref="T:System.Security.AccessControl.PropagationFlags" /> flags specifying how access rights are propagated to other objects.</span></span></param>
        <param name="type"><span data-ttu-id="570a1-163"><see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指定是允许还是拒绝相应权限。</span><span class="sxs-lookup"><span data-stu-id="570a1-163">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values specifying whether the rights are allowed or denied.</span></span></param>
        <summary><span data-ttu-id="570a1-164">初始化 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 类的新实例，指定此规则应用到的用户或组、访问权限、传播标志以及是否允许或拒绝指定的访问权限。</span><span class="sxs-lookup"><span data-stu-id="570a1-164">Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> class, specifying the user or group the rule applies to, the access rights, the inheritance flags, the propagation flags, and whether the specified access rights are allowed or denied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="570a1-165">所有注册表项都是容器，因此对于注册表项有意义的唯一继承标志是 <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> 标志。</span><span class="sxs-lookup"><span data-stu-id="570a1-165">All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="570a1-166">如果未指定此标志，则会忽略传播标志，并且仅影响直接密钥。</span><span class="sxs-lookup"><span data-stu-id="570a1-166">If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected.</span></span> <span data-ttu-id="570a1-167">如果该标志存在，则将按下表所示传播规则。</span><span class="sxs-lookup"><span data-stu-id="570a1-167">If the flag is present, the rule is propagated as shown in the following table.</span></span> <span data-ttu-id="570a1-168">该表假设有一个具有子子项 CS 和孙子项 GS 的子项。</span><span class="sxs-lookup"><span data-stu-id="570a1-168">The table assumes there is a subkey S with child subkey CS and grandchild subkey GS.</span></span> <span data-ttu-id="570a1-169">也就是说，孙级子项的路径为 S\CS\GS。</span><span class="sxs-lookup"><span data-stu-id="570a1-169">That is, the path for the grandchild subkey is S\CS\GS.</span></span>  
  
|<span data-ttu-id="570a1-170">传播标志</span><span class="sxs-lookup"><span data-stu-id="570a1-170">Propagation flags</span></span>|<span data-ttu-id="570a1-171">S</span><span class="sxs-lookup"><span data-stu-id="570a1-171">S</span></span>|<span data-ttu-id="570a1-172">CS</span><span class="sxs-lookup"><span data-stu-id="570a1-172">CS</span></span>|<span data-ttu-id="570a1-173">GS</span><span class="sxs-lookup"><span data-stu-id="570a1-173">GS</span></span>|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|<span data-ttu-id="570a1-174">X</span><span class="sxs-lookup"><span data-stu-id="570a1-174">X</span></span>|<span data-ttu-id="570a1-175">X</span><span class="sxs-lookup"><span data-stu-id="570a1-175">X</span></span>|<span data-ttu-id="570a1-176">X</span><span class="sxs-lookup"><span data-stu-id="570a1-176">X</span></span>|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|<span data-ttu-id="570a1-177">X</span><span class="sxs-lookup"><span data-stu-id="570a1-177">X</span></span>|<span data-ttu-id="570a1-178">X</span><span class="sxs-lookup"><span data-stu-id="570a1-178">X</span></span>||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||<span data-ttu-id="570a1-179">X</span><span class="sxs-lookup"><span data-stu-id="570a1-179">X</span></span>|<span data-ttu-id="570a1-180">X</span><span class="sxs-lookup"><span data-stu-id="570a1-180">X</span></span>|  
|<span data-ttu-id="570a1-181"><xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly></span><span class="sxs-lookup"><span data-stu-id="570a1-181"><xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly></span></span>||<span data-ttu-id="570a1-182">X</span><span class="sxs-lookup"><span data-stu-id="570a1-182">X</span></span>||  
  
 <span data-ttu-id="570a1-183">孙子项的模式控制孙级子项包含的所有子项。</span><span class="sxs-lookup"><span data-stu-id="570a1-183">The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.</span></span>  
  
 <span data-ttu-id="570a1-184">例如，如果为 <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> 指定了标志并且为 `inheritanceFlags` 指定了 <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> 传播标志 `propagationFlags` ，则此规则不会应用于直接子项，而是应用于其所有直接子子项及其包含的所有子项。</span><span class="sxs-lookup"><span data-stu-id="570a1-184">For example, if the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="570a1-185">尽管可以 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> 为指定标志，但 `inheritanceFlags` 没有任何一点要这样做。</span><span class="sxs-lookup"><span data-stu-id="570a1-185">Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> flag for `inheritanceFlags`, there is no point in doing so.</span></span> <span data-ttu-id="570a1-186">出于访问控制的目的，子项中的名称/值对不是单独的对象。</span><span class="sxs-lookup"><span data-stu-id="570a1-186">For the purposes of access control, the name/value pairs in a subkey are not separate objects.</span></span> <span data-ttu-id="570a1-187">对名称/值对的访问权限由子项的权限控制。</span><span class="sxs-lookup"><span data-stu-id="570a1-187">The access rights to name/value pairs are controlled by the rights of the subkey.</span></span> <span data-ttu-id="570a1-188">此外，由于所有子项都是容器 (也就是说，它们可以包含其他子项) ，它们不受标志的影响 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> 。</span><span class="sxs-lookup"><span data-stu-id="570a1-188">Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag.</span></span> <span data-ttu-id="570a1-189">最后，指定 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> 标志不必要地使规则维护复杂化，因为它会干扰其他兼容规则的组合。</span><span class="sxs-lookup"><span data-stu-id="570a1-189">Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the combination of otherwise compatible rules.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="570a1-190"><paramref name="registryRights" /> 指定了一个无效值。</span><span class="sxs-lookup"><span data-stu-id="570a1-190"><paramref name="registryRights" /> specifies an invalid value.</span></span>  
  
<span data-ttu-id="570a1-191">- 或 -</span><span class="sxs-lookup"><span data-stu-id="570a1-191">-or-</span></span> 
 <span data-ttu-id="570a1-192"><paramref name="type" /> 指定了一个无效值。</span><span class="sxs-lookup"><span data-stu-id="570a1-192"><paramref name="type" /> specifies an invalid value.</span></span>  
  
<span data-ttu-id="570a1-193">- 或 -</span><span class="sxs-lookup"><span data-stu-id="570a1-193">-or-</span></span> 
 <span data-ttu-id="570a1-194"><paramref name="inheritanceFlags" /> 指定了一个无效值。</span><span class="sxs-lookup"><span data-stu-id="570a1-194"><paramref name="inheritanceFlags" /> specifies an invalid value.</span></span>  
  
<span data-ttu-id="570a1-195">- 或 -</span><span class="sxs-lookup"><span data-stu-id="570a1-195">-or-</span></span> 
 <span data-ttu-id="570a1-196"><paramref name="propagationFlags" /> 指定了一个无效值。</span><span class="sxs-lookup"><span data-stu-id="570a1-196"><paramref name="propagationFlags" /> specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="570a1-197"><paramref name="identity" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="570a1-197"><paramref name="identity" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="570a1-198">- 或 -</span><span class="sxs-lookup"><span data-stu-id="570a1-198">-or-</span></span> 
 <span data-ttu-id="570a1-199"><paramref name="registryRights" /> 为零。</span><span class="sxs-lookup"><span data-stu-id="570a1-199"><paramref name="registryRights" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="570a1-200"><paramref name="identity" /> 既不属于类型 <see cref="T:System.Security.Principal.SecurityIdentifier" />，也不属于可以转换为 <see cref="T:System.Security.Principal.NTAccount" /> 类型的类型（如 <see cref="T:System.Security.Principal.SecurityIdentifier" />）。</span><span class="sxs-lookup"><span data-stu-id="570a1-200"><paramref name="identity" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" />, nor of a type such as <see cref="T:System.Security.Principal.NTAccount" /> that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (identity As String, registryRights As RegistryRights, inheritanceFlags As InheritanceFlags, propagationFlags As PropagationFlags, type As AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity"><span data-ttu-id="570a1-201">应用此规则的用户或组的名称。</span><span class="sxs-lookup"><span data-stu-id="570a1-201">The name of the user or group the rule applies to.</span></span></param>
        <param name="registryRights"><span data-ttu-id="570a1-202"><see cref="T:System.Security.AccessControl.RegistryRights" /> 值的按位组合，它指示允许或拒绝的权限。</span><span class="sxs-lookup"><span data-stu-id="570a1-202">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values indicating the rights allowed or denied.</span></span></param>
        <param name="inheritanceFlags"><span data-ttu-id="570a1-203"><see cref="T:System.Security.AccessControl.InheritanceFlags" /> 标志的按位组合，指定如何从其他对象继承访问权限。</span><span class="sxs-lookup"><span data-stu-id="570a1-203">A bitwise combination of <see cref="T:System.Security.AccessControl.InheritanceFlags" /> flags specifying how access rights are inherited from other objects.</span></span></param>
        <param name="propagationFlags"><span data-ttu-id="570a1-204"><see cref="T:System.Security.AccessControl.PropagationFlags" /> 标志的按位组合，指定如何将访问权限传播到其他对象。</span><span class="sxs-lookup"><span data-stu-id="570a1-204">A bitwise combination of <see cref="T:System.Security.AccessControl.PropagationFlags" /> flags specifying how access rights are propagated to other objects.</span></span></param>
        <param name="type"><span data-ttu-id="570a1-205"><see cref="T:System.Security.AccessControl.AccessControlType" /> 值之一，用于指定是允许还是拒绝相应权限。</span><span class="sxs-lookup"><span data-stu-id="570a1-205">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values specifying whether the rights are allowed or denied.</span></span></param>
        <summary><span data-ttu-id="570a1-206">初始化 <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> 类的新实例，指定应用此规则的用户或组的名称、访问权限、传播标志以及是否允许或拒绝指定的访问权限。</span><span class="sxs-lookup"><span data-stu-id="570a1-206">Initializes a new instance of the <see cref="T:System.Security.AccessControl.RegistryAccessRule" /> class, specifying the name of the user or group the rule applies to, the access rights, the inheritance flags, the propagation flags, and whether the specified access rights are allowed or denied.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="570a1-207">所有注册表项都是容器，因此对于注册表项有意义的唯一继承标志是 <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> 标志。</span><span class="sxs-lookup"><span data-stu-id="570a1-207">All registry keys are containers, so the only inheritance flag that is meaningful for registry keys is the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> flag.</span></span> <span data-ttu-id="570a1-208">如果未指定此标志，则会忽略传播标志，并且仅影响直接密钥。</span><span class="sxs-lookup"><span data-stu-id="570a1-208">If this flag is not specified, the propagation flags are ignored, and only the immediate key is affected.</span></span> <span data-ttu-id="570a1-209">如果该标志存在，则将按下表所示传播规则。</span><span class="sxs-lookup"><span data-stu-id="570a1-209">If the flag is present, the rule is propagated as shown in the following table.</span></span> <span data-ttu-id="570a1-210">该表假设有一个具有子子项 CS 和孙子项 GS 的子项。</span><span class="sxs-lookup"><span data-stu-id="570a1-210">The table assumes there is a subkey S with child subkey CS and grandchild subkey GS.</span></span> <span data-ttu-id="570a1-211">也就是说，孙级子项的路径为 S\CS\GS。</span><span class="sxs-lookup"><span data-stu-id="570a1-211">That is, the path for the grandchild subkey is S\CS\GS.</span></span>  
  
|<span data-ttu-id="570a1-212">传播标志</span><span class="sxs-lookup"><span data-stu-id="570a1-212">Propagation flags</span></span>|<span data-ttu-id="570a1-213">S</span><span class="sxs-lookup"><span data-stu-id="570a1-213">S</span></span>|<span data-ttu-id="570a1-214">CS</span><span class="sxs-lookup"><span data-stu-id="570a1-214">CS</span></span>|<span data-ttu-id="570a1-215">GS</span><span class="sxs-lookup"><span data-stu-id="570a1-215">GS</span></span>|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|<span data-ttu-id="570a1-216">X</span><span class="sxs-lookup"><span data-stu-id="570a1-216">X</span></span>|<span data-ttu-id="570a1-217">X</span><span class="sxs-lookup"><span data-stu-id="570a1-217">X</span></span>|<span data-ttu-id="570a1-218">X</span><span class="sxs-lookup"><span data-stu-id="570a1-218">X</span></span>|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|<span data-ttu-id="570a1-219">X</span><span class="sxs-lookup"><span data-stu-id="570a1-219">X</span></span>|<span data-ttu-id="570a1-220">X</span><span class="sxs-lookup"><span data-stu-id="570a1-220">X</span></span>||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||<span data-ttu-id="570a1-221">X</span><span class="sxs-lookup"><span data-stu-id="570a1-221">X</span></span>|<span data-ttu-id="570a1-222">X</span><span class="sxs-lookup"><span data-stu-id="570a1-222">X</span></span>|  
|<span data-ttu-id="570a1-223"><xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly></span><span class="sxs-lookup"><span data-stu-id="570a1-223"><xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly></span></span>||<span data-ttu-id="570a1-224">X</span><span class="sxs-lookup"><span data-stu-id="570a1-224">X</span></span>||  
  
 <span data-ttu-id="570a1-225">孙子项的模式控制孙级子项包含的所有子项。</span><span class="sxs-lookup"><span data-stu-id="570a1-225">The pattern for the grandchild subkey governs all subkeys contained by the grandchild subkey.</span></span>  
  
 <span data-ttu-id="570a1-226">例如，如果为 <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> 指定了标志并且为 `inheritanceFlags` 指定了 <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> 传播标志 `propagationFlags` ，则此规则不会应用于直接子项，而是应用于其所有直接子子项及其包含的所有子项。</span><span class="sxs-lookup"><span data-stu-id="570a1-226">For example, if the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flag is specified for `inheritanceFlags` and the <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> propagation flag is specified for `propagationFlags`, this rule does not apply to the immediate subkey, but does apply to all its immediate child subkeys and to all subkeys they contain.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="570a1-227">尽管可以 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> 为指定标志，但 `inheritanceFlags` 没有任何一点要这样做。</span><span class="sxs-lookup"><span data-stu-id="570a1-227">Although you can specify the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> flag for `inheritanceFlags`, there is no point in doing so.</span></span> <span data-ttu-id="570a1-228">出于访问控制的目的，子项中的名称/值对不是单独的对象。</span><span class="sxs-lookup"><span data-stu-id="570a1-228">For the purposes of access control, the name/value pairs in a subkey are not separate objects.</span></span> <span data-ttu-id="570a1-229">对名称/值对的访问权限由子项的权限控制。</span><span class="sxs-lookup"><span data-stu-id="570a1-229">The access rights to name/value pairs are controlled by the rights of the subkey.</span></span> <span data-ttu-id="570a1-230">此外，由于所有子项都是容器 (也就是说，它们可以包含其他子项) ，它们不受标志的影响 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> 。</span><span class="sxs-lookup"><span data-stu-id="570a1-230">Furthermore, since all subkeys are containers (that is, they can contain other subkeys), they are not affected by the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag.</span></span> <span data-ttu-id="570a1-231">最后，指定 <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> 标志不必要地使规则维护复杂化，因为它会干扰其他兼容规则的组合。</span><span class="sxs-lookup"><span data-stu-id="570a1-231">Finally, specifying the <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> flag needlessly complicates the maintenance of rules, because it interferes with the combination of otherwise compatible rules.</span></span>  
  
 <span data-ttu-id="570a1-232">此构造函数等效于 <xref:System.Security.Principal.NTAccount> 通过传递 `identity` 到 <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> 构造函数并将新创建的 <xref:System.Security.Principal.NTAccount> 对象传递给 <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29> 构造函数来创建对象。</span><span class="sxs-lookup"><span data-stu-id="570a1-232">This constructor is equivalent to creating an <xref:System.Security.Principal.NTAccount> object, by passing `identity` to the <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> constructor, and passing the newly created <xref:System.Security.Principal.NTAccount> object to the <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="570a1-233">下面的代码示例演示使用继承和传播的访问规则。</span><span class="sxs-lookup"><span data-stu-id="570a1-233">The following code example demonstrates access rules with inheritance and propagation.</span></span> <span data-ttu-id="570a1-234">该示例创建一个 <xref:System.Security.AccessControl.RegistrySecurity> 对象，然后创建并添加两个具有标志的规则 <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> 。</span><span class="sxs-lookup"><span data-stu-id="570a1-234">The example creates a <xref:System.Security.AccessControl.RegistrySecurity> object, and then creates and adds two rules that have the <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> flag.</span></span> <span data-ttu-id="570a1-235">第一个规则没有传播标志，而第二条具有 <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> 和 <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> 。</span><span class="sxs-lookup"><span data-stu-id="570a1-235">The first rule has no propagation flags, while the second has <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> and <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>.</span></span>  
  
 <span data-ttu-id="570a1-236">该程序将在对象中显示规则 <xref:System.Security.AccessControl.RegistrySecurity> ，然后使用 <xref:System.Security.AccessControl.RegistrySecurity> 对象创建子项。</span><span class="sxs-lookup"><span data-stu-id="570a1-236">The program displays the rules in the <xref:System.Security.AccessControl.RegistrySecurity> object, and then uses the <xref:System.Security.AccessControl.RegistrySecurity> object to create a subkey.</span></span> <span data-ttu-id="570a1-237">该程序创建一个子子项和一个孙级子项，然后显示每个子项的规则。</span><span class="sxs-lookup"><span data-stu-id="570a1-237">The program creates a child subkey and a grandchild subkey, and then displays the rules for each subkey.</span></span> <span data-ttu-id="570a1-238">最后，程序删除测试密钥。</span><span class="sxs-lookup"><span data-stu-id="570a1-238">Finally, the program deletes the test keys.</span></span>  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="570a1-239"><paramref name="registryRights" /> 指定了一个无效值。</span><span class="sxs-lookup"><span data-stu-id="570a1-239"><paramref name="registryRights" /> specifies an invalid value.</span></span>  
  
<span data-ttu-id="570a1-240">- 或 -</span><span class="sxs-lookup"><span data-stu-id="570a1-240">-or-</span></span> 
 <span data-ttu-id="570a1-241"><paramref name="type" /> 指定了一个无效值。</span><span class="sxs-lookup"><span data-stu-id="570a1-241"><paramref name="type" /> specifies an invalid value.</span></span>  
  
<span data-ttu-id="570a1-242">- 或 -</span><span class="sxs-lookup"><span data-stu-id="570a1-242">-or-</span></span> 
 <span data-ttu-id="570a1-243"><paramref name="inheritanceFlags" /> 指定了一个无效值。</span><span class="sxs-lookup"><span data-stu-id="570a1-243"><paramref name="inheritanceFlags" /> specifies an invalid value.</span></span>  
  
<span data-ttu-id="570a1-244">- 或 -</span><span class="sxs-lookup"><span data-stu-id="570a1-244">-or-</span></span> 
 <span data-ttu-id="570a1-245"><paramref name="propagationFlags" /> 指定了一个无效值。</span><span class="sxs-lookup"><span data-stu-id="570a1-245"><paramref name="propagationFlags" /> specifies an invalid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="570a1-246"><paramref name="eventRights" /> 为零。</span><span class="sxs-lookup"><span data-stu-id="570a1-246"><paramref name="eventRights" /> is zero.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="570a1-247"><paramref name="identity" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="570a1-247"><paramref name="identity" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="570a1-248">- 或 -</span><span class="sxs-lookup"><span data-stu-id="570a1-248">-or-</span></span> 
 <span data-ttu-id="570a1-249"><paramref name="identity" /> 是一个长度为零的字符串。</span><span class="sxs-lookup"><span data-stu-id="570a1-249"><paramref name="identity" /> is a zero-length string.</span></span>  
  
<span data-ttu-id="570a1-250">- 或 -</span><span class="sxs-lookup"><span data-stu-id="570a1-250">-or-</span></span> 
 <span data-ttu-id="570a1-251"><paramref name="identity" /> 的长度超过 512 个字符。</span><span class="sxs-lookup"><span data-stu-id="570a1-251"><paramref name="identity" /> is longer than 512 characters.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RegistryRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.RegistryRights RegistryRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.RegistryRights RegistryRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegistryRights As RegistryRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::RegistryRights RegistryRights { System::Security::AccessControl::RegistryRights get(); };" />
      <MemberSignature Language="F#" Value="member this.RegistryRights : System.Security.AccessControl.RegistryRights" Usage="System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
        <AssemblyVersion>4.1.3.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.RegistryRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="570a1-252">获取访问规则允许或拒绝的权限。</span><span class="sxs-lookup"><span data-stu-id="570a1-252">Gets the rights allowed or denied by the access rule.</span></span></summary>
        <value><span data-ttu-id="570a1-253"><see cref="T:System.Security.AccessControl.RegistryRights" /> 值的按位组合，它指示访问规则允许或拒绝的权限。</span><span class="sxs-lookup"><span data-stu-id="570a1-253">A bitwise combination of <see cref="T:System.Security.AccessControl.RegistryRights" /> values indicating the rights allowed or denied by the access rule.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="570a1-254"><xref:System.Security.AccessControl.RegistryAccessRule> 对象是不可变的。</span><span class="sxs-lookup"><span data-stu-id="570a1-254"><xref:System.Security.AccessControl.RegistryAccessRule> objects are immutable.</span></span> <span data-ttu-id="570a1-255">您可以创建表示不同用户、不同权限或不同的新访问规则 <xref:System.Security.AccessControl.AccessControlType> ，但不能修改现有的访问规则。</span><span class="sxs-lookup"><span data-stu-id="570a1-255">You can create a new access rule representing a different user, different rights, or a different <xref:System.Security.AccessControl.AccessControlType>, but you cannot modify an existing access rule.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
