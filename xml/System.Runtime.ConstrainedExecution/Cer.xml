<Type Name="Cer" FullName="System.Runtime.ConstrainedExecution.Cer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4b52c8c908be38822cb55d8cb808f0d1e64676ed" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86768849" /></Metadata><TypeSignature Language="C#" Value="public enum Cer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Cer extends System.Enum" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.ConstrainedExecution.Cer" />
  <TypeSignature Language="VB.NET" Value="Public Enum Cer" />
  <TypeSignature Language="C++ CLI" Value="public enum class Cer" />
  <TypeSignature Language="F#" Value="type Cer = " />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed Cer extends System.Enum" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e8993-101">在受约束的执行区域内调用时指定方法的行为。</span><span class="sxs-lookup"><span data-stu-id="e8993-101">Specifies a method's behavior when called within a constrained execution region.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks
 
<span data-ttu-id="e8993-102"><xref:System.Runtime.ConstrainedExecution.Cer>枚举指定 (CER) 在受约束的执行区域内的方法、类型或程序集的行为。</span><span class="sxs-lookup"><span data-stu-id="e8993-102">The <xref:System.Runtime.ConstrainedExecution.Cer> enumeration specifies the behavior of a method, type, or assembly within a constrained execution region (CER).</span></span> <span data-ttu-id="e8993-103">使用三个可用值中的一个来指示实体将成功、不能识别 CER 或可能 (确定) 能够报告成功或失败。</span><span class="sxs-lookup"><span data-stu-id="e8993-103">Use one of the three available values to indicate that the entity will succeed, has no knowledge of a CER, or might (deterministically) be able to report success or failure.</span></span>  
  
<span data-ttu-id="e8993-104">CER 提供保证，即使在发生异步异常（如中止的线程内存不足异常或引发堆栈溢出）时，代码区域也不会中断执行。</span><span class="sxs-lookup"><span data-stu-id="e8993-104">A CER provides guarantees that the region of code will execute uninterrupted even if an asynchronous exception such as an aborted thread out-of-memory exception, or stack overflow is raised.</span></span>  
  
<span data-ttu-id="e8993-105">但是， `Cer.None` 枚举值指示方法、类型或程序集没有 CER 的概念。</span><span class="sxs-lookup"><span data-stu-id="e8993-105">However, the `Cer.None` enumeration value indicates that the method, type, or assembly has no concept of a CER.</span></span> <span data-ttu-id="e8993-106">它不利用 CER 保证。</span><span class="sxs-lookup"><span data-stu-id="e8993-106">It does not take advantage of CER guarantees.</span></span> <span data-ttu-id="e8993-107">这意味着：</span><span class="sxs-lookup"><span data-stu-id="e8993-107">This implies the following:</span></span>

- <span data-ttu-id="e8993-108">在遇到异常情况时，方法可能会失败。</span><span class="sxs-lookup"><span data-stu-id="e8993-108">In the face of exceptional conditions the method might fail.</span></span>  
  
- <span data-ttu-id="e8993-109">此方法可能会报告失败，也可能不报告 (不确定) 的情况。</span><span class="sxs-lookup"><span data-stu-id="e8993-109">The method might or might not report that it failed (it is non-deterministic).</span></span>  
  
- <span data-ttu-id="e8993-110">方法不是用 Cer 编写的 (这是最可能) 的方案。</span><span class="sxs-lookup"><span data-stu-id="e8993-110">The method is not written with CERs in mind (which is the most likely scenario).</span></span>  
  
<span data-ttu-id="e8993-111">如果方法、类型或程序集没有显式标记为成功，则它将隐式标记为 `Cer.None` 。</span><span class="sxs-lookup"><span data-stu-id="e8993-111">If a method, type, or assembly is not explicitly marked to succeed, it is implicitly marked as `Cer.None`.</span></span>  

## Examples

<span data-ttu-id="e8993-112">下面的代码示例演示了如何在 <xref:System.Runtime.ConstrainedExecution.Cer> 为方法指定受约束的执行区域时使用枚举。</span><span class="sxs-lookup"><span data-stu-id="e8993-112">The following code example demonstrates the use of the <xref:System.Runtime.ConstrainedExecution.Cer> enumeration when specifying a constrained execution region for a method.</span></span> <span data-ttu-id="e8993-113">此代码示例是为构造函数提供的更大示例的一部分 <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.%23ctor%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e8993-113">This code example is part of a larger example provided for the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute.%23ctor%2A> constructor.</span></span>  
  
[!code-csharp[System.Runtime.ConstrainedExecution#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.ConstrainedExecution/cs/program.cs#3)]
[!code-vb[System.Runtime.ConstrainedExecution#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.ConstrainedExecution/vb/program.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions" />
    <altmember cref="M:System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(System.RuntimeMethodHandle)" />
    <related type="Article" href="/dotnet/framework/performance/constrained-execution-regions"><span data-ttu-id="e8993-114">受约束的执行区域</span><span class="sxs-lookup"><span data-stu-id="e8993-114">Constrained Execution Regions</span></span></related>
    <related type="Article" href="/dotnet/framework/performance/reliability-best-practices"><span data-ttu-id="e8993-115">可靠性最佳做法</span><span class="sxs-lookup"><span data-stu-id="e8993-115">Reliability Best Practices</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="MayFail">
      <MemberSignature Language="C#" Value="MayFail" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.ConstrainedExecution.Cer MayFail = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.ConstrainedExecution.Cer.MayFail" />
      <MemberSignature Language="VB.NET" Value="MayFail" />
      <MemberSignature Language="C++ CLI" Value="MayFail" />
      <MemberSignature Language="F#" Value="MayFail = 1" Usage="System.Runtime.ConstrainedExecution.Cer.MayFail" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.ConstrainedExecution.Cer</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="e8993-116">在遇到异常情况时，此方法可能会失败。</span><span class="sxs-lookup"><span data-stu-id="e8993-116">In the face of exceptional conditions, the method might fail.</span></span> <span data-ttu-id="e8993-117">在这种情况下，此方法将向调用方法报告它是否成功。</span><span class="sxs-lookup"><span data-stu-id="e8993-117">In this case, the method will report back to the calling method whether it succeeded or failed.</span></span> <span data-ttu-id="e8993-118">该方法的方法体周围必须有 CER 以确保它可以报告返回值。</span><span class="sxs-lookup"><span data-stu-id="e8993-118">The method must have a CER around the method body to ensure that it can report the return value.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.ConstrainedExecution.Cer None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.ConstrainedExecution.Cer.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Runtime.ConstrainedExecution.Cer.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.ConstrainedExecution.Cer</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary><span data-ttu-id="e8993-119">方法、类型或程序集没有 CER 的概念。</span><span class="sxs-lookup"><span data-stu-id="e8993-119">The method, type, or assembly has no concept of a CER.</span></span> <span data-ttu-id="e8993-120">它不利用 CER 保证。</span><span class="sxs-lookup"><span data-stu-id="e8993-120">It does not take advantage of CER guarantees.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Success">
      <MemberSignature Language="C#" Value="Success" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Runtime.ConstrainedExecution.Cer Success = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.ConstrainedExecution.Cer.Success" />
      <MemberSignature Language="VB.NET" Value="Success" />
      <MemberSignature Language="C++ CLI" Value="Success" />
      <MemberSignature Language="F#" Value="Success = 2" Usage="System.Runtime.ConstrainedExecution.Cer.Success" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.ConstrainedExecution.Cer</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary><span data-ttu-id="e8993-121">在遇到异常情况时，保证此方法获得成功。</span><span class="sxs-lookup"><span data-stu-id="e8993-121">In the face of exceptional conditions, the method is guaranteed to succeed.</span></span> <span data-ttu-id="e8993-122">应始终在调用的方法周围构造 CER，即使是在非 CER 区域内调用该方法。</span><span class="sxs-lookup"><span data-stu-id="e8993-122">You should always construct a CER around the method that is called, even when it is called from within a non-CER region.</span></span> <span data-ttu-id="e8993-123">如果方法完成了其任务，则该方法成功。</span><span class="sxs-lookup"><span data-stu-id="e8993-123">A method is successful if it accomplishes what is intended.</span></span> <span data-ttu-id="e8993-124">例如，用 ReliabilityContractAttribute(Cer.Success)<c></c> 标记 <see cref="P:System.Collections.ArrayList.Count" /> 意味着当它在 CER 下运行时，它始终返回 <see cref="T:System.Collections.ArrayList" /> 中的元素的数目计数，并且它永远不能将内部的字段保留为不确定状态。</span><span class="sxs-lookup"><span data-stu-id="e8993-124">For example, marking <see cref="P:System.Collections.ArrayList.Count" /> with <c>ReliabilityContractAttribute(Cer.Success)</c> implies that when it is run under a CER, it always returns a count of the number of elements in the <see cref="T:System.Collections.ArrayList" /> and it can never leave the internal fields in an undetermined state.</span></span></summary>
      </Docs>
    </Member>
  </Members>
</Type>
