<Type Name="ServiceHostFactory" FullName="System.ServiceModel.Activation.ServiceHostFactory">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d03ff8b9af99b7c36d3e1b5edfd025091475357d" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86749084" /></Metadata><TypeSignature Language="C#" Value="public class ServiceHostFactory : System.ServiceModel.Activation.ServiceHostFactoryBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceHostFactory extends System.ServiceModel.Activation.ServiceHostFactoryBase" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Activation.ServiceHostFactory" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceHostFactory&#xA;Inherits ServiceHostFactoryBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceHostFactory : System::ServiceModel::Activation::ServiceHostFactoryBase" />
  <TypeSignature Language="F#" Value="type ServiceHostFactory = class&#xA;    inherit ServiceHostFactoryBase" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Activation</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.ServiceModel" FromVersion="4.0.0.0" To="System.ServiceModel.Activation" ToVersion="4.0.0.0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ServiceModel.Activation.ServiceHostFactoryBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.TypeForwardedFrom("System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TypeForwardedFrom("System.ServiceModel, Version=3.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="dbe3e-101">在托管宿主环境中提供 <see cref="T:System.ServiceModel.ServiceHost" /> 的实例的工厂，在此环境中为响应传入消息而动态创建宿主实例。</span><span class="sxs-lookup"><span data-stu-id="dbe3e-101">Factory that provides instances of <see cref="T:System.ServiceModel.ServiceHost" /> in managed hosting environments where the host instance is created dynamically in response to incoming messages.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="dbe3e-102">支持动态激活的托管宿主环境包括 Internet 信息服务 (IIS) 和 Windows 进程激活服务 (WAS)。</span><span class="sxs-lookup"><span data-stu-id="dbe3e-102">The managed hosting environments that support dynamic activation are Internet Information Services (IIS) and Windows Process Activation Service (WAS).</span></span>  
  
 <span data-ttu-id="dbe3e-103">如果已实现 <xref:System.ServiceModel.ServiceHost> 的自定义派生，还应考虑实现派生自 <xref:System.ServiceModel.Activation.ServiceHostFactory> 类的工厂。</span><span class="sxs-lookup"><span data-stu-id="dbe3e-103">If you have implemented a custom derivative of <xref:System.ServiceModel.ServiceHost>, consider also implementing a factory that derives from the <xref:System.ServiceModel.Activation.ServiceHostFactory> class.</span></span>  
  
 <span data-ttu-id="dbe3e-104">如果已实现 <xref:System.ServiceModel.ServiceHostBase> 的自定义派生，还应考虑实现可直接从 <xref:System.ServiceModel.Activation.ServiceHostFactoryBase> 派生工厂的工厂。</span><span class="sxs-lookup"><span data-stu-id="dbe3e-104">If you have implemented a custom derivative of <xref:System.ServiceModel.ServiceHostBase> instead, then consider also implementing a factory that derives your factory from <xref:System.ServiceModel.Activation.ServiceHostFactoryBase> directly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="dbe3e-105">下面的示例演示如何使用 <xref:System.ServiceModel.Activation.ServiceHostFactory> 类：</span><span class="sxs-lookup"><span data-stu-id="dbe3e-105">This examples show how to use the <xref:System.ServiceModel.Activation.ServiceHostFactory> class:</span></span>  
  
 [!code-csharp[ServiceHostFactory#0](~/samples/snippets/csharp/VS_Snippets_CFX/servicehostfactory/cs/program.cs#0)]
 [!code-vb[ServiceHostFactory#0](~/samples/snippets/visualbasic/VS_Snippets_CFX/servicehostfactory/vb/program.vb#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceHostFactory ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Activation.ServiceHostFactory.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceHostFactory();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="dbe3e-106">初始化 <see cref="T:System.ServiceModel.Activation.ServiceHostFactory" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="dbe3e-106">Initializes a new instance of the <see cref="T:System.ServiceModel.Activation.ServiceHostFactory" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dbe3e-107">下面的示例演示如何使用 <xref:System.ServiceModel.Activation.ServiceHostFactory.%23ctor%2A> 类：</span><span class="sxs-lookup"><span data-stu-id="dbe3e-107">This examples show how to use the <xref:System.ServiceModel.Activation.ServiceHostFactory.%23ctor%2A>:</span></span>  
  
 [!code-csharp[ServiceHostFactory#1](~/samples/snippets/csharp/VS_Snippets_CFX/servicehostfactory/cs/program.cs#1)]
 [!code-vb[ServiceHostFactory#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/servicehostfactory/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateServiceHost">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="dbe3e-108">创建一个 <see cref="T:System.ServiceModel.ServiceHost" />。</span><span class="sxs-lookup"><span data-stu-id="dbe3e-108">Creates a <see cref="T:System.ServiceModel.ServiceHost" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateServiceHost">
      <MemberSignature Language="C#" Value="public override System.ServiceModel.ServiceHostBase CreateServiceHost (string constructorString, Uri[] baseAddresses);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ServiceModel.ServiceHostBase CreateServiceHost(string constructorString, class System.Uri[] baseAddresses) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Activation.ServiceHostFactory.CreateServiceHost(System.String,System.Uri[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CreateServiceHost (constructorString As String, baseAddresses As Uri()) As ServiceHostBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::ServiceModel::ServiceHostBase ^ CreateServiceHost(System::String ^ constructorString, cli::array &lt;Uri ^&gt; ^ baseAddresses);" />
      <MemberSignature Language="F#" Value="override this.CreateServiceHost : string * Uri[] -&gt; System.ServiceModel.ServiceHostBase" Usage="serviceHostFactory.CreateServiceHost (constructorString, baseAddresses)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ServiceHostBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructorString" Type="System.String" />
        <Parameter Name="baseAddresses" Type="System.Uri[]" />
      </Parameters>
      <Docs>
        <param name="constructorString"><span data-ttu-id="dbe3e-109">传递给 <see cref="T:System.ServiceModel.ServiceHostBase" /> 实例的由该工厂构建的初始化数据。</span><span class="sxs-lookup"><span data-stu-id="dbe3e-109">The initialization data passed to the <see cref="T:System.ServiceModel.ServiceHostBase" /> instance being constructed by the factory.</span></span></param>
        <param name="baseAddresses"><span data-ttu-id="dbe3e-110">类型为 <see cref="T:System.Array" /> 且包含所承载服务的基址的 <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="dbe3e-110">The <see cref="T:System.Array" /> of type <see cref="T:System.Uri" /> that contains the base addresses for the service hosted.</span></span></param>
        <summary><span data-ttu-id="dbe3e-111">创建具有特定基址的 <see cref="T:System.ServiceModel.ServiceHost" />，并使用指定数据对其进行初始化。</span><span class="sxs-lookup"><span data-stu-id="dbe3e-111">Creates a <see cref="T:System.ServiceModel.ServiceHost" /> with specific base addresses and initializes it with specified data.</span></span></summary>
        <returns><span data-ttu-id="dbe3e-112">具有特定基址的 <see cref="T:System.ServiceModel.ServiceHost" />。</span><span class="sxs-lookup"><span data-stu-id="dbe3e-112">A <see cref="T:System.ServiceModel.ServiceHost" /> with specific base addresses.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dbe3e-113">下面的示例演示如何使用 <xref:System.ServiceModel.Activation.ServiceHostFactory.CreateServiceHost%28System.String%2CSystem.Uri%5B%5D%29> 方法：</span><span class="sxs-lookup"><span data-stu-id="dbe3e-113">This example shows how to use the <xref:System.ServiceModel.Activation.ServiceHostFactory.CreateServiceHost%28System.String%2CSystem.Uri%5B%5D%29> method:</span></span>  
  
 [!code-csharp[ServiceHostFactory#3](~/samples/snippets/csharp/VS_Snippets_CFX/servicehostfactory/cs/program.cs#3)]
 [!code-vb[ServiceHostFactory#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/servicehostfactory/vb/program.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="dbe3e-114"><paramref name="baseAddress" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="dbe3e-114"><paramref name="baseAddress" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="dbe3e-115">未提供宿主上下文，或者 <paramref name="constructorString" /> 为 <see langword="null" /> 或为空。</span><span class="sxs-lookup"><span data-stu-id="dbe3e-115">There is no hosting context provided or <paramref name="constructorString" /> is <see langword="null" /> or empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateServiceHost">
      <MemberSignature Language="C#" Value="protected virtual System.ServiceModel.ServiceHost CreateServiceHost (Type serviceType, Uri[] baseAddresses);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.ServiceModel.ServiceHost CreateServiceHost(class System.Type serviceType, class System.Uri[] baseAddresses) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Activation.ServiceHostFactory.CreateServiceHost(System.Type,System.Uri[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateServiceHost (serviceType As Type, baseAddresses As Uri()) As ServiceHost" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::ServiceModel::ServiceHost ^ CreateServiceHost(Type ^ serviceType, cli::array &lt;Uri ^&gt; ^ baseAddresses);" />
      <MemberSignature Language="F#" Value="override this.CreateServiceHost : Type * Uri[] -&gt; System.ServiceModel.ServiceHost" Usage="serviceHostFactory.CreateServiceHost (serviceType, baseAddresses)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activation</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ServiceHost</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="System.Type" />
        <Parameter Name="baseAddresses" Type="System.Uri[]" />
      </Parameters>
      <Docs>
        <param name="serviceType"><span data-ttu-id="dbe3e-116">指定要承载的服务的类型。</span><span class="sxs-lookup"><span data-stu-id="dbe3e-116">Specifies the type of service to host.</span></span></param>
        <param name="baseAddresses"><span data-ttu-id="dbe3e-117">类型为 <see cref="T:System.Array" /> 且包含所承载服务的基址的 <see cref="T:System.Uri" />。</span><span class="sxs-lookup"><span data-stu-id="dbe3e-117">The <see cref="T:System.Array" /> of type <see cref="T:System.Uri" /> that contains the base addresses for the service hosted.</span></span></param>
        <summary><span data-ttu-id="dbe3e-118">为具有特定基址的指定类型的服务创建 <see cref="T:System.ServiceModel.ServiceHost" />。</span><span class="sxs-lookup"><span data-stu-id="dbe3e-118">Creates a <see cref="T:System.ServiceModel.ServiceHost" /> for a specified type of service with a specific base address.</span></span></summary>
        <returns><span data-ttu-id="dbe3e-119">使用特定基址指定的该类型服务的 <see cref="T:System.ServiceModel.ServiceHost" />。</span><span class="sxs-lookup"><span data-stu-id="dbe3e-119">A <see cref="T:System.ServiceModel.ServiceHost" /> for the type of service specified with a specific base address.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="dbe3e-120">下面的示例演示如何创建 <xref:System.ServiceModel.Activation.ServiceHostFactory.CreateServiceHost%28System.Type%2CSystem.Uri%5B%5D%29> 方法的重写实现：</span><span class="sxs-lookup"><span data-stu-id="dbe3e-120">This example shows how to create an override implementation of the <xref:System.ServiceModel.Activation.ServiceHostFactory.CreateServiceHost%28System.Type%2CSystem.Uri%5B%5D%29> method:</span></span>  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
