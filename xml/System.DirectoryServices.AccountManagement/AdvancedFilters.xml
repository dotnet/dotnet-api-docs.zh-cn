<Type Name="AdvancedFilters" FullName="System.DirectoryServices.AccountManagement.AdvancedFilters">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7f4d0883445c10ab3804bab5b11949744be0ee83" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86631018" /></Metadata><TypeSignature Language="C#" Value="public class AdvancedFilters" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AdvancedFilters extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.DirectoryServices.AccountManagement.AdvancedFilters" />
  <TypeSignature Language="VB.NET" Value="Public Class AdvancedFilters" />
  <TypeSignature Language="C++ CLI" Value="public ref class AdvancedFilters" />
  <TypeSignature Language="F#" Value="type AdvancedFilters = class" />
  <AssemblyInfo>
    <AssemblyName>System.DirectoryServices.AccountManagement</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>此类提供对某些属性的可写访问，以便用户能够在使用[按示例查询](https://msdn.microsoft.com/library/84ac40bb-04c4-4d0b-adaf-0ddb9253599e)时，修改传递给 <see cref="T:System.DirectoryServices.AccountManagement.PrincipalSearcher" /> 对象的“虚拟”主体对象的只读属性。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.DirectoryServices.AccountManagement.AdvancedFilters>通过属性从对象访问类 <xref:System.DirectoryServices.AccountManagement.UserPrincipal> <xref:System.DirectoryServices.AccountManagement.UserPrincipal.AdvancedSearchFilter%2A> ，effectually 将其视为对象的一个属性， <xref:System.DirectoryServices.AccountManagement.UserPrincipal> 而不能单独使用。  
  
   
  
## Examples  
 有关代码示例，请参阅 [查询示例](https://msdn.microsoft.com/library/84ac40bb-04c4-4d0b-adaf-0ddb9253599e) 主题。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.DirectoryServices.AccountManagement.PrincipalSearcher" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal AdvancedFilters (System.DirectoryServices.AccountManagement.Principal p);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(class System.DirectoryServices.AccountManagement.Principal p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.AccountManagement.AdvancedFilters.#ctor(System.DirectoryServices.AccountManagement.Principal)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (p As Principal)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; AdvancedFilters(System::DirectoryServices::AccountManagement::Principal ^ p);" />
      <MemberSignature Language="F#" Value="new System.DirectoryServices.AccountManagement.AdvancedFilters : System.DirectoryServices.AccountManagement.Principal -&gt; System.DirectoryServices.AccountManagement.AdvancedFilters" Usage="new System.DirectoryServices.AccountManagement.AdvancedFilters p" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.AccountManagement</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="p" Type="System.DirectoryServices.AccountManagement.Principal" />
      </Parameters>
      <Docs>
        <param name="p"><see cref="T:System.DirectoryServices.AccountManagement.Principal" /> 对象。</param>
        <summary>实例化一个新的 <see cref="T:System.DirectoryServices.AccountManagement.AdvancedFilters" /> 对象。 请不要直接调用。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序应 <xref:System.DirectoryServices.AccountManagement.AdvancedFilters> 通过 <xref:System.DirectoryServices.AccountManagement.UserPrincipal.AdvancedSearchFilter%2A> 用户对象的属性进行访问。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DirectoryServices.AccountManagement.PrincipalSearcher" />
      </Docs>
    </Member>
    <Member MemberName="AccountExpirationDate">
      <MemberSignature Language="C#" Value="public void AccountExpirationDate (DateTime expirationTime, System.DirectoryServices.AccountManagement.MatchType match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AccountExpirationDate(valuetype System.DateTime expirationTime, valuetype System.DirectoryServices.AccountManagement.MatchType match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.AccountManagement.AdvancedFilters.AccountExpirationDate(System.DateTime,System.DirectoryServices.AccountManagement.MatchType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AccountExpirationDate (expirationTime As DateTime, match As MatchType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AccountExpirationDate(DateTime expirationTime, System::DirectoryServices::AccountManagement::MatchType match);" />
      <MemberSignature Language="F#" Value="member this.AccountExpirationDate : DateTime * System.DirectoryServices.AccountManagement.MatchType -&gt; unit" Usage="advancedFilters.AccountExpirationDate (expirationTime, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.AccountManagement</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expirationTime" Type="System.DateTime" />
        <Parameter Name="match" Type="System.DirectoryServices.AccountManagement.MatchType" />
      </Parameters>
      <Docs>
        <param name="expirationTime"><see cref="T:System.DateTime" /> 对象。</param>
        <param name="match">一个 <see cref="T:System.DirectoryServices.AccountManagement.MatchType" />，它指定在比较中应如何使用 <paramref name="expirationTime" />。</param>
        <summary>将 <see cref="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountExpirationDate" /> 属性的查询筛选器设置为指定的时间和比较类型。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此时间将默认为 UTC。 如果要以本地时间指定时间，请将对象的属性指定 <xref:System.DateTime.Kind%2A> <xref:System.DateTime> 为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。  
  
   
  
## Examples  
  
```csharp  
  
// Create the principal context for the usr object.  
PrincipalContext ctx = new PrincipalContext(ContextType.Domain, "fabrikam.com", "CN=Users,DC=fabrikam,DC=com", "administrator", "SecurelyStoredPassword");  
  
// Create the principal user object from the context  
UserPrincipal usr = new UserPrincipal(ctx);  
  
// Set the advanced query filter  
usr.AdvancedSearchFilter.AccountExpirationDate(DateTime.Now, MatchType.LessThan);  
  
// Create a PrincipalSearcher object.  
PrincipalSearcher ps = new PrincipalSearcher(usr);  
  
PrincipalSearchResult<Principal> results = ps.FindAll();  
  
Console.WriteLine("The following users' accounts have expired:");  
  
foreach (UserPrincipal u in results)  
{  
  Console.WriteLine(u.Name);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DirectoryServices.AccountManagement.PrincipalSearcher" />
      </Docs>
    </Member>
    <Member MemberName="AccountLockoutTime">
      <MemberSignature Language="C#" Value="public void AccountLockoutTime (DateTime lockoutTime, System.DirectoryServices.AccountManagement.MatchType match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AccountLockoutTime(valuetype System.DateTime lockoutTime, valuetype System.DirectoryServices.AccountManagement.MatchType match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.AccountManagement.AdvancedFilters.AccountLockoutTime(System.DateTime,System.DirectoryServices.AccountManagement.MatchType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AccountLockoutTime (lockoutTime As DateTime, match As MatchType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AccountLockoutTime(DateTime lockoutTime, System::DirectoryServices::AccountManagement::MatchType match);" />
      <MemberSignature Language="F#" Value="member this.AccountLockoutTime : DateTime * System.DirectoryServices.AccountManagement.MatchType -&gt; unit" Usage="advancedFilters.AccountLockoutTime (lockoutTime, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.AccountManagement</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lockoutTime" Type="System.DateTime" />
        <Parameter Name="match" Type="System.DirectoryServices.AccountManagement.MatchType" />
      </Parameters>
      <Docs>
        <param name="lockoutTime"><see cref="T:System.DateTime" /> 对象。</param>
        <param name="match">一个 <see cref="T:System.DirectoryServices.AccountManagement.MatchType" />，它指定在比较中应如何使用 <paramref name="lockoutTime" />。</param>
        <summary>将 <see cref="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.AccountLockoutTime" /> 查询筛选器设置为指定的时间和比较类型。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此时间将默认为 UTC。 如果要以本地时间指定时间，请将对象的属性指定 <xref:System.DateTime.Kind%2A> <xref:System.DateTime> 为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。  
  
   
  
## Examples  
  
```csharp  
  
// Create the principal context for the usr object.  
PrincipalContext ctx = new PrincipalContext(ContextType.Domain, "fabrikam.com", "CN=Users,DC=fabrikam,DC=com", "administrator", "SecurelyStoredPassword");  
  
// Create the principal user object from the context  
UserPrincipal usr = new UserPrincipal(ctx);  
  
// Set the advanced query filter  
usr.AdvancedSearchFilter.AccountLockoutTime(DateTime.Now.AddDays(-1), MatchType.GreaterThan);  
  
// Create a PrincipalSearcher object.  
PrincipalSearcher ps = new PrincipalSearcher(usr);  
  
PrincipalSearchResult<Principal> results = ps.FindAll();  
  
//Print user names of all accounts locked within the last 24 hours.  
  
foreach (UserPrincipal u in results)  
{  
  Console.WriteLine(u.Name);  
 }  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DirectoryServices.AccountManagement.PrincipalSearcher" />
      </Docs>
    </Member>
    <Member MemberName="AdvancedFilterSet">
      <MemberSignature Language="C#" Value="protected void AdvancedFilterSet (string attribute, object value, Type objectType, System.DirectoryServices.AccountManagement.MatchType mt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AdvancedFilterSet(string attribute, object value, class System.Type objectType, valuetype System.DirectoryServices.AccountManagement.MatchType mt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.AccountManagement.AdvancedFilters.AdvancedFilterSet(System.String,System.Object,System.Type,System.DirectoryServices.AccountManagement.MatchType)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub AdvancedFilterSet (attribute As String, value As Object, objectType As Type, mt As MatchType)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void AdvancedFilterSet(System::String ^ attribute, System::Object ^ value, Type ^ objectType, System::DirectoryServices::AccountManagement::MatchType mt);" />
      <MemberSignature Language="F#" Value="member this.AdvancedFilterSet : string * obj * Type * System.DirectoryServices.AccountManagement.MatchType -&gt; unit" Usage="advancedFilters.AdvancedFilterSet (attribute, value, objectType, mt)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.AccountManagement</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="mt" Type="System.DirectoryServices.AccountManagement.MatchType" />
      </Parameters>
      <Docs>
        <param name="attribute">特性的名称</param>
        <param name="value">一个对象。</param>
        <param name="objectType"><paramref name="value" /> 的对象类型。</param>
        <param name="mt">一个 <see cref="T:System.DirectoryServices.AccountManagement.MatchType" />，它指定应如何将 <paramref name="value" /> 与属性的值进行比较。</param>
        <summary>为扩展类中的属性创建一个查询筛选器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 在扩展类中，你可以实现的高级搜索筛选器 `LogonCount` ：  
  
```csharp  
  
public class InetOrgPersonSearchFilter : AdvancedFilters  
{  
    public InetOrgPersonSearchFilter(Principal p) : base(p) { }  
  
    public void LogonCount(int value, MatchType mt)  
    {  
        this.AdvancedFilterSet("LogonCount", value, typeof(int), mt);  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DirectoryServices.AccountManagement.PrincipalSearcher" />
      </Docs>
    </Member>
    <Member MemberName="BadLogonCount">
      <MemberSignature Language="C#" Value="public void BadLogonCount (int badLogonCount, System.DirectoryServices.AccountManagement.MatchType match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BadLogonCount(int32 badLogonCount, valuetype System.DirectoryServices.AccountManagement.MatchType match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.AccountManagement.AdvancedFilters.BadLogonCount(System.Int32,System.DirectoryServices.AccountManagement.MatchType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BadLogonCount (badLogonCount As Integer, match As MatchType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BadLogonCount(int badLogonCount, System::DirectoryServices::AccountManagement::MatchType match);" />
      <MemberSignature Language="F#" Value="member this.BadLogonCount : int * System.DirectoryServices.AccountManagement.MatchType -&gt; unit" Usage="advancedFilters.BadLogonCount (badLogonCount, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.AccountManagement</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="badLogonCount" Type="System.Int32" />
        <Parameter Name="match" Type="System.DirectoryServices.AccountManagement.MatchType" />
      </Parameters>
      <Docs>
        <param name="badLogonCount">一个整数。</param>
        <param name="match">一个 <see cref="T:System.DirectoryServices.AccountManagement.MatchType" />，它指定应如何将 <paramref name="badLogonCount" /> 与属性的值进行比较。</param>
        <summary>将 <see cref="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.BadLogonCount" /> 属性的查询筛选器设置为指定的值和比较类型。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```csharp  
  
// Create the principal context for the usr object.  
PrincipalContext ctx = new PrincipalContext(ContextType.Domain, "fabrikam.com", "CN=Users,DC=fabrikam,DC=com", "administrator", "SecurelyStoredPassword");  
  
// Create the principal user object from the context  
UserPrincipal usr = new UserPrincipal(ctx);  
  
// Set the advanced query filter  
int badLogonThreshold = 3;  
usr.AdvancedSearchFilter.BadLogonCount(badLogonThreshold, MatchType.GreaterThan);  
  
// Create a PrincipalSearcher object.  
PrincipalSearcher ps = new PrincipalSearcher(usr);  
PrincipalSearchResult<Principal> results = ps.FindAll();  
Console.WriteLine("The following users have logged on unsuccessfully at more than " + badLogonThreshold.toString + " times:");  
foreach (UserPrincipal u in results)  
{  
  Console.WriteLine(u.Name);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DirectoryServices.AccountManagement.PrincipalSearcher" />
      </Docs>
    </Member>
    <Member MemberName="LastBadPasswordAttempt">
      <MemberSignature Language="C#" Value="public void LastBadPasswordAttempt (DateTime lastAttempt, System.DirectoryServices.AccountManagement.MatchType match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LastBadPasswordAttempt(valuetype System.DateTime lastAttempt, valuetype System.DirectoryServices.AccountManagement.MatchType match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.AccountManagement.AdvancedFilters.LastBadPasswordAttempt(System.DateTime,System.DirectoryServices.AccountManagement.MatchType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LastBadPasswordAttempt (lastAttempt As DateTime, match As MatchType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LastBadPasswordAttempt(DateTime lastAttempt, System::DirectoryServices::AccountManagement::MatchType match);" />
      <MemberSignature Language="F#" Value="member this.LastBadPasswordAttempt : DateTime * System.DirectoryServices.AccountManagement.MatchType -&gt; unit" Usage="advancedFilters.LastBadPasswordAttempt (lastAttempt, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.AccountManagement</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lastAttempt" Type="System.DateTime" />
        <Parameter Name="match" Type="System.DirectoryServices.AccountManagement.MatchType" />
      </Parameters>
      <Docs>
        <param name="lastAttempt"><see cref="T:System.DateTime" /> 对象。</param>
        <param name="match">一个 <see cref="T:System.DirectoryServices.AccountManagement.MatchType" />，它指定在比较中应如何使用 <paramref name="lastAttempt" />。</param>
        <summary>将 <see cref="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastBadPasswordAttempt" /> 属性的查询筛选器设置为指定的 <see cref="T:System.DateTime" /> 和指定的比较值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此时间将默认为 UTC。 如果要以本地时间指定时间，请将对象的属性指定 <xref:System.DateTime.Kind%2A> <xref:System.DateTime> 为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。  
  
   
  
## Examples  
  
```csharp  
  
// Create the principal context for the usr object.  
PrincipalContext ctx = new PrincipalContext(ContextType.Domain, "fabrikam.com", "CN=Users,DC=fabrikam,DC=com", "administrator", "SecurelyStoredPassword");  
  
// Create the principal user object from the context  
UserPrincipal usr = new UserPrincipal(ctx);  
  
// Set the advanced query filter  
usr.AdvancedSearchFilter.LastBadPasswordAttempt(DateTime.Now.AddDays(-1), MatchType.GreaterThan);  
  
// Create a PrincipalSearcher object.  
PrincipalSearcher ps = new PrincipalSearcher(usr);  
PrincipalSearchResult<Principal> results = ps.FindAll();  
  
//Write the name of all users whose most recent incorrect  
//password entry was within the last day  
  
foreach (UserPrincipal u in results)  
{  
    Console.WriteLine(u.Name);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DirectoryServices.AccountManagement.PrincipalSearcher" />
      </Docs>
    </Member>
    <Member MemberName="LastLogonTime">
      <MemberSignature Language="C#" Value="public void LastLogonTime (DateTime logonTime, System.DirectoryServices.AccountManagement.MatchType match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LastLogonTime(valuetype System.DateTime logonTime, valuetype System.DirectoryServices.AccountManagement.MatchType match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.AccountManagement.AdvancedFilters.LastLogonTime(System.DateTime,System.DirectoryServices.AccountManagement.MatchType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LastLogonTime (logonTime As DateTime, match As MatchType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LastLogonTime(DateTime logonTime, System::DirectoryServices::AccountManagement::MatchType match);" />
      <MemberSignature Language="F#" Value="member this.LastLogonTime : DateTime * System.DirectoryServices.AccountManagement.MatchType -&gt; unit" Usage="advancedFilters.LastLogonTime (logonTime, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.AccountManagement</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logonTime" Type="System.DateTime" />
        <Parameter Name="match" Type="System.DirectoryServices.AccountManagement.MatchType" />
      </Parameters>
      <Docs>
        <param name="logonTime"><see cref="T:System.DateTime" /> 对象。</param>
        <param name="match">一个 <see cref="T:System.DirectoryServices.AccountManagement.MatchType" />，它指定在比较中应如何使用 <paramref name="logonTime" />。</param>
        <summary>将 <see cref="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastLogon" /> 属性的查询筛选器设置为指定的 <see cref="T:System.DateTime" /> 和指定的比较值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此时间将默认为 UTC。 如果要以本地时间指定时间，请将对象的属性指定 <xref:System.DateTime.Kind%2A> <xref:System.DateTime> 为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。  
  
   
  
## Examples  
  
```csharp  
  
// Create the principal context for the usr object.  
PrincipalContext ctx = new PrincipalContext(ContextType.Domain, "fabrikam.com", "CN=Users,DC=fabrikam,DC=com", "administrator", "SecurelyStoredPassword");  
  
// Create the principal user object from the context  
UserPrincipal usr = new UserPrincipal(ctx);  
  
// Set the advanced query filter  
usr.AdvancedSearchFilter.LastLogonTime(DateTime.Now.AddDays(-1), MatchType.GreaterThan);  
  
// Create a PrincipalSearcher object.  
PrincipalSearcher ps = new PrincipalSearcher(usr);  
PrincipalSearchResult<Principal> results = ps.FindAll();  
  
//Write the names of all users who have logged on since yesterday  
foreach (UserPrincipal u in results)  
{  
    Console.WriteLine(u.Name);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DirectoryServices.AccountManagement.PrincipalSearcher" />
      </Docs>
    </Member>
    <Member MemberName="LastPasswordSetTime">
      <MemberSignature Language="C#" Value="public void LastPasswordSetTime (DateTime passwordSetTime, System.DirectoryServices.AccountManagement.MatchType match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LastPasswordSetTime(valuetype System.DateTime passwordSetTime, valuetype System.DirectoryServices.AccountManagement.MatchType match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.AccountManagement.AdvancedFilters.LastPasswordSetTime(System.DateTime,System.DirectoryServices.AccountManagement.MatchType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LastPasswordSetTime (passwordSetTime As DateTime, match As MatchType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LastPasswordSetTime(DateTime passwordSetTime, System::DirectoryServices::AccountManagement::MatchType match);" />
      <MemberSignature Language="F#" Value="member this.LastPasswordSetTime : DateTime * System.DirectoryServices.AccountManagement.MatchType -&gt; unit" Usage="advancedFilters.LastPasswordSetTime (passwordSetTime, match)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.AccountManagement</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="passwordSetTime" Type="System.DateTime" />
        <Parameter Name="match" Type="System.DirectoryServices.AccountManagement.MatchType" />
      </Parameters>
      <Docs>
        <param name="passwordSetTime"><see cref="T:System.DateTime" /> 对象。</param>
        <param name="match">一个 <see cref="T:System.DirectoryServices.AccountManagement.MatchType" />，它指定在比较中应如何使用 <paramref name="passwordSetTime" />。</param>
        <summary>将 <see cref="P:System.DirectoryServices.AccountManagement.AuthenticablePrincipal.LastPasswordSet" /> 属性的查询筛选器设置为指定的 <see cref="T:System.DateTime" /> 和指定的比较值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此时间将默认为 UTC。 如果要以本地时间指定时间，请将对象的属性指定 <xref:System.DateTime.Kind%2A> <xref:System.DateTime> 为 <xref:System.DateTimeKind.Local?displayProperty=nameWithType> 。  
  
   
  
## Examples  
  
```csharp  
  
// Create the principal context for the usr object.  
PrincipalContext ctx = new PrincipalContext(ContextType.Domain, "fabrikam.com", "CN=Users,DC=fabrikam,DC=com", "administrator", "SecurelyStoredPassword");  
  
// Create the principal user object from the context  
UserPrincipal usr = new UserPrincipal(ctx);  
  
// Set the advanced query filter  
usr.AdvancedSearchFilter.LastPasswordSetTime(DateTime.Now.AddDays(-30), MatchType.LessThan);  
  
// Create a PrincipalSearcher object.  
PrincipalSearcher ps = new PrincipalSearcher(usr);  
PrincipalSearchResult<Principal> results = ps.FindAll();  
  
//Force users who have not changed their password in the last  
//30 days to do so at next logon  
foreach (UserPrincipal u in results)  
{  
    u.ExpirePasswordNow();  
    u.Save();  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.DirectoryServices.AccountManagement.PrincipalSearcher" />
      </Docs>
    </Member>
  </Members>
</Type>
