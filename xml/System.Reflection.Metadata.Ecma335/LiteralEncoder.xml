<Type Name="LiteralEncoder" FullName="System.Reflection.Metadata.Ecma335.LiteralEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8bbc7d11173f467abbb6454bfdb9c1b47030c436" /><Meta Name="ms.sourcegitcommit" Value="99247877c0ae3f6b8619b55f52be0419280a6aa5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/27/2020" /><Meta Name="ms.locfileid" Value="88952350" /></Metadata><TypeSignature Language="C#" Value="public struct LiteralEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit LiteralEncoder extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Metadata.Ecma335.LiteralEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Structure LiteralEncoder" />
  <TypeSignature Language="C++ CLI" Value="public value class LiteralEncoder" />
  <TypeSignature Language="F#" Value="type LiteralEncoder = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
    <AssemblyVersion>1.4.5.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供用于对文本进行编码的方法。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LiteralEncoder (System.Reflection.Metadata.BlobBuilder builder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.Metadata.BlobBuilder builder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.#ctor(System.Reflection.Metadata.BlobBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As BlobBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LiteralEncoder(System::Reflection::Metadata::BlobBuilder ^ builder);" />
      <MemberSignature Language="F#" Value="new System.Reflection.Metadata.Ecma335.LiteralEncoder : System.Reflection.Metadata.BlobBuilder -&gt; System.Reflection.Metadata.Ecma335.LiteralEncoder" Usage="new System.Reflection.Metadata.Ecma335.LiteralEncoder builder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Reflection.Metadata.BlobBuilder" />
      </Parameters>
      <Docs>
        <param name="builder">使用指定的 blob 生成器创建 <see cref="T:System.Reflection.Metadata.Ecma335.LiteralEncoder" /> 类的新实例。</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Builder">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.BlobBuilder Builder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Metadata.BlobBuilder Builder" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.Ecma335.LiteralEncoder.Builder" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Builder As BlobBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Metadata::BlobBuilder ^ Builder { System::Reflection::Metadata::BlobBuilder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Builder : System.Reflection.Metadata.BlobBuilder" Usage="System.Reflection.Metadata.Ecma335.LiteralEncoder.Builder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.BlobBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scalar">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.Ecma335.ScalarEncoder Scalar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.Metadata.Ecma335.ScalarEncoder Scalar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.Scalar" />
      <MemberSignature Language="VB.NET" Value="Public Function Scalar () As ScalarEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::Ecma335::ScalarEncoder Scalar();" />
      <MemberSignature Language="F#" Value="member this.Scalar : unit -&gt; System.Reflection.Metadata.Ecma335.ScalarEncoder" Usage="literalEncoder.Scalar " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.Ecma335.ScalarEncoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回用于对文本值进行编码的编码器。</summary>
        <returns>文本值的编码器。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TaggedScalar">
      <MemberSignature Language="C#" Value="public void TaggedScalar (Action&lt;System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder&gt; type, Action&lt;System.Reflection.Metadata.Ecma335.ScalarEncoder&gt; scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TaggedScalar(class System.Action`1&lt;valuetype System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder&gt; type, class System.Action`1&lt;valuetype System.Reflection.Metadata.Ecma335.ScalarEncoder&gt; scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.TaggedScalar(System.Action{System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder},System.Action{System.Reflection.Metadata.Ecma335.ScalarEncoder})" />
      <MemberSignature Language="VB.NET" Value="Public Sub TaggedScalar (type As Action(Of CustomAttributeElementTypeEncoder), scalar As Action(Of ScalarEncoder))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TaggedScalar(Action&lt;System::Reflection::Metadata::Ecma335::CustomAttributeElementTypeEncoder&gt; ^ type, Action&lt;System::Reflection::Metadata::Ecma335::ScalarEncoder&gt; ^ scalar);" />
      <MemberSignature Language="F#" Value="member this.TaggedScalar : Action&lt;System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder&gt; * Action&lt;System.Reflection.Metadata.Ecma335.ScalarEncoder&gt; -&gt; unit" Usage="literalEncoder.TaggedScalar (type, scalar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Action&lt;System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder&gt;" />
        <Parameter Name="scalar" Type="System.Action&lt;System.Reflection.Metadata.Ecma335.ScalarEncoder&gt;" />
      </Parameters>
      <Docs>
        <param name="type">用于对文本类型进行编码的委托。 通过此方法进行第一次调用。</param>
        <param name="scalar">用于对文本值进行编码的委托。 通过此方法进行第二次调用。</param>
        <summary>使用指定的委托对文本的类型和值进行编码。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> 或 <paramref name="scalar" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TaggedScalar">
      <MemberSignature Language="C#" Value="public void TaggedScalar (out System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder type, out System.Reflection.Metadata.Ecma335.ScalarEncoder scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TaggedScalar([out] valuetype System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder&amp; type, [out] valuetype System.Reflection.Metadata.Ecma335.ScalarEncoder&amp; scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.TaggedScalar(System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder@,System.Reflection.Metadata.Ecma335.ScalarEncoder@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TaggedScalar (ByRef type As CustomAttributeElementTypeEncoder, ByRef scalar As ScalarEncoder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TaggedScalar([Runtime::InteropServices::Out] System::Reflection::Metadata::Ecma335::CustomAttributeElementTypeEncoder % type, [Runtime::InteropServices::Out] System::Reflection::Metadata::Ecma335::ScalarEncoder % scalar);" />
      <MemberSignature Language="F#" Value="member this.TaggedScalar : CustomAttributeElementTypeEncoder * ScalarEncoder -&gt; unit" Usage="literalEncoder.TaggedScalar (type, scalar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Reflection.Metadata.Ecma335.CustomAttributeElementTypeEncoder" RefType="out" />
        <Parameter Name="scalar" Type="System.Reflection.Metadata.Ecma335.ScalarEncoder" RefType="out" />
      </Parameters>
      <Docs>
        <param name="type">此方法返回时，为一个自定义特性元素类型编码器，用于对文本类型进行编码。</param>
        <param name="scalar">此方法返回时，为一个标量编码，用于对文本值进行编码。</param>
        <summary>返回一对编码器，必须使用它们按文本在参数列表中出现的顺序来对其类型和值进行编码。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TaggedVector">
      <MemberSignature Language="C#" Value="public void TaggedVector (Action&lt;System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder&gt; arrayType, Action&lt;System.Reflection.Metadata.Ecma335.VectorEncoder&gt; vector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TaggedVector(class System.Action`1&lt;valuetype System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder&gt; arrayType, class System.Action`1&lt;valuetype System.Reflection.Metadata.Ecma335.VectorEncoder&gt; vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.TaggedVector(System.Action{System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder},System.Action{System.Reflection.Metadata.Ecma335.VectorEncoder})" />
      <MemberSignature Language="VB.NET" Value="Public Sub TaggedVector (arrayType As Action(Of CustomAttributeArrayTypeEncoder), vector As Action(Of VectorEncoder))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TaggedVector(Action&lt;System::Reflection::Metadata::Ecma335::CustomAttributeArrayTypeEncoder&gt; ^ arrayType, Action&lt;System::Reflection::Metadata::Ecma335::VectorEncoder&gt; ^ vector);" />
      <MemberSignature Language="F#" Value="member this.TaggedVector : Action&lt;System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder&gt; * Action&lt;System.Reflection.Metadata.Ecma335.VectorEncoder&gt; -&gt; unit" Usage="literalEncoder.TaggedVector (arrayType, vector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrayType" Type="System.Action&lt;System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder&gt;" />
        <Parameter Name="vector" Type="System.Action&lt;System.Reflection.Metadata.Ecma335.VectorEncoder&gt;" />
      </Parameters>
      <Docs>
        <param name="arrayType">用于对矢量类型进行编码的委托。 通过此方法进行第一次调用。</param>
        <param name="vector">用于对矢量项进行编码的委托。 通过此方法进行第二次调用。</param>
        <summary>使用指定的委托对矢量文本的类型和项进行编码。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="arrayType" /> 或 <paramref name="vector" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TaggedVector">
      <MemberSignature Language="C#" Value="public void TaggedVector (out System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder arrayType, out System.Reflection.Metadata.Ecma335.VectorEncoder vector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TaggedVector([out] valuetype System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder&amp; arrayType, [out] valuetype System.Reflection.Metadata.Ecma335.VectorEncoder&amp; vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.TaggedVector(System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder@,System.Reflection.Metadata.Ecma335.VectorEncoder@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TaggedVector (ByRef arrayType As CustomAttributeArrayTypeEncoder, ByRef vector As VectorEncoder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TaggedVector([Runtime::InteropServices::Out] System::Reflection::Metadata::Ecma335::CustomAttributeArrayTypeEncoder % arrayType, [Runtime::InteropServices::Out] System::Reflection::Metadata::Ecma335::VectorEncoder % vector);" />
      <MemberSignature Language="F#" Value="member this.TaggedVector : CustomAttributeArrayTypeEncoder * VectorEncoder -&gt; unit" Usage="literalEncoder.TaggedVector (arrayType, vector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrayType" Type="System.Reflection.Metadata.Ecma335.CustomAttributeArrayTypeEncoder" RefType="out" />
        <Parameter Name="vector" Type="System.Reflection.Metadata.Ecma335.VectorEncoder" RefType="out" />
      </Parameters>
      <Docs>
        <param name="arrayType">此方法返回时，为一个自定义特性数组类型编码器，用于对文本类型进行编码。</param>
        <param name="vector">此方法返回时，为一个矢量编码器，用于对矢量项进行编码。</param>
        <summary>返回一对编码器，必须使用它们按矢量文本在参数列表中出现的顺序来对其类型和项进行编码。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Vector">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.Ecma335.VectorEncoder Vector ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.Metadata.Ecma335.VectorEncoder Vector() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.LiteralEncoder.Vector" />
      <MemberSignature Language="VB.NET" Value="Public Function Vector () As VectorEncoder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::Ecma335::VectorEncoder Vector();" />
      <MemberSignature Language="F#" Value="member this.Vector : unit -&gt; System.Reflection.Metadata.Ecma335.VectorEncoder" Usage="literalEncoder.Vector " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.Ecma335.VectorEncoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取用于对矢量项进行编码的矢量编码器。</summary>
        <returns>用于对矢量项进行编码的矢量编码器。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
