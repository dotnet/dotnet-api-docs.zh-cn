<Type Name="InstructionEncoder" FullName="System.Reflection.Metadata.Ecma335.InstructionEncoder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1ce81875d973bd65cb122a89dc7ac7248ec16c11" /><Meta Name="ms.sourcegitcommit" Value="99247877c0ae3f6b8619b55f52be0419280a6aa5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/27/2020" /><Meta Name="ms.locfileid" Value="88952519" /></Metadata><TypeSignature Language="C#" Value="public struct InstructionEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit InstructionEncoder extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.Metadata.Ecma335.InstructionEncoder" />
  <TypeSignature Language="VB.NET" Value="Public Structure InstructionEncoder" />
  <TypeSignature Language="C++ CLI" Value="public value class InstructionEncoder" />
  <TypeSignature Language="F#" Value="type InstructionEncoder = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.Metadata</AssemblyName>
    <AssemblyVersion>1.4.1.0</AssemblyVersion>
    <AssemblyVersion>1.4.2.0</AssemblyVersion>
    <AssemblyVersion>1.4.3.0</AssemblyVersion>
    <AssemblyVersion>1.4.4.0</AssemblyVersion>
    <AssemblyVersion>1.4.5.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-5.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.IsReadOnly]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.IsReadOnly&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="240bc-101">对指令进行编码。</span><span class="sxs-lookup"><span data-stu-id="240bc-101">Encodes instructions.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InstructionEncoder (System.Reflection.Metadata.BlobBuilder codeBuilder, System.Reflection.Metadata.Ecma335.ControlFlowBuilder? controlFlowBuilder = default);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.Metadata.BlobBuilder codeBuilder, class System.Reflection.Metadata.Ecma335.ControlFlowBuilder controlFlowBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.#ctor(System.Reflection.Metadata.BlobBuilder,System.Reflection.Metadata.Ecma335.ControlFlowBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (codeBuilder As BlobBuilder, Optional controlFlowBuilder As ControlFlowBuilder = Nothing)" />
      <MemberSignature Language="F#" Value="new System.Reflection.Metadata.Ecma335.InstructionEncoder : System.Reflection.Metadata.BlobBuilder * System.Reflection.Metadata.Ecma335.ControlFlowBuilder -&gt; System.Reflection.Metadata.Ecma335.InstructionEncoder" Usage="new System.Reflection.Metadata.Ecma335.InstructionEncoder (codeBuilder, controlFlowBuilder)" />
      <MemberSignature Language="C#" Value="public InstructionEncoder (System.Reflection.Metadata.BlobBuilder codeBuilder, System.Reflection.Metadata.Ecma335.ControlFlowBuilder controlFlowBuilder = default);" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="codeBuilder" Type="System.Reflection.Metadata.BlobBuilder" />
        <Parameter Name="controlFlowBuilder" Type="System.Reflection.Metadata.Ecma335.ControlFlowBuilder" />
      </Parameters>
      <Docs>
        <param name="codeBuilder"><span data-ttu-id="240bc-102">要将已编码的指令写入到的生成器。</span><span class="sxs-lookup"><span data-stu-id="240bc-102">Builder to write encoded instructions to.</span></span></param>
        <param name="controlFlowBuilder"><span data-ttu-id="240bc-103">生成器跟踪标签、分支和异常处理程序。</span><span class="sxs-lookup"><span data-stu-id="240bc-103">Builder tracking labels, branches and exception handlers.</span></span>
<span data-ttu-id="240bc-104">必须指定才能使用 <see cref="T:System.Reflection.Metadata.Ecma335.InstructionEncoder" /> 的一些控制流工厂方法，例如 <see cref="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.Branch(System.Reflection.Metadata.ILOpCode,System.Reflection.Metadata.Ecma335.LabelHandle)" />、<see cref="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.DefineLabel" /> 和 <see cref="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.MarkLabel(System.Reflection.Metadata.Ecma335.LabelHandle)" /></span><span class="sxs-lookup"><span data-stu-id="240bc-104">Must be specified to be able to use some of the control-flow factory methods of <see cref="T:System.Reflection.Metadata.Ecma335.InstructionEncoder" />, such as <see cref="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.Branch(System.Reflection.Metadata.ILOpCode,System.Reflection.Metadata.Ecma335.LabelHandle)" />, <see cref="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.DefineLabel" />, <see cref="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.MarkLabel(System.Reflection.Metadata.Ecma335.LabelHandle)" /> etc.</span></span></param>
        <summary><span data-ttu-id="240bc-105">创建由代码和控制流生成器支持的编码器。</span><span class="sxs-lookup"><span data-stu-id="240bc-105">Creates an encoder backed by code and control-flow builders.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Branch">
      <MemberSignature Language="C#" Value="public void Branch (System.Reflection.Metadata.ILOpCode code, System.Reflection.Metadata.Ecma335.LabelHandle label);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Branch(valuetype System.Reflection.Metadata.ILOpCode code, valuetype System.Reflection.Metadata.Ecma335.LabelHandle label) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.Branch(System.Reflection.Metadata.ILOpCode,System.Reflection.Metadata.Ecma335.LabelHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Branch (code As ILOpCode, label As LabelHandle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Branch(System::Reflection::Metadata::ILOpCode code, System::Reflection::Metadata::Ecma335::LabelHandle label);" />
      <MemberSignature Language="F#" Value="member this.Branch : System.Reflection.Metadata.ILOpCode * System.Reflection.Metadata.Ecma335.LabelHandle -&gt; unit" Usage="instructionEncoder.Branch (code, label)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Reflection.Metadata.ILOpCode" />
        <Parameter Name="label" Type="System.Reflection.Metadata.Ecma335.LabelHandle" />
      </Parameters>
      <Docs>
        <param name="code"><span data-ttu-id="240bc-106">要编码的分支指令。</span><span class="sxs-lookup"><span data-stu-id="240bc-106">Branch instruction to encode.</span></span></param>
        <param name="label"><span data-ttu-id="240bc-107">指令流中目标位置的标签。</span><span class="sxs-lookup"><span data-stu-id="240bc-107">Label of the target location in instruction stream.</span></span></param>
        <summary><span data-ttu-id="240bc-108">对分支指令进行编码。</span><span class="sxs-lookup"><span data-stu-id="240bc-108">Encodes a branch instruction.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="240bc-109"><paramref name="code" /> 不是分支指令。</span><span class="sxs-lookup"><span data-stu-id="240bc-109"><paramref name="code" /> is not a branch instruction.</span></span>

<span data-ttu-id="240bc-110">- 或 -</span><span class="sxs-lookup"><span data-stu-id="240bc-110">-or-</span></span> 
<span data-ttu-id="240bc-111">此编码器未定义 <paramref name="label" />。</span><span class="sxs-lookup"><span data-stu-id="240bc-111"><paramref name="label" /> was not defined by this encoder.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="240bc-112"><see cref="P:System.Reflection.Metadata.Ecma335.InstructionEncoder.ControlFlowBuilder" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="240bc-112"><see cref="P:System.Reflection.Metadata.Ecma335.InstructionEncoder.ControlFlowBuilder" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="240bc-113"><paramref name="label" /> 具有默认值。</span><span class="sxs-lookup"><span data-stu-id="240bc-113"><paramref name="label" /> has default value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public void Call (System.Reflection.Metadata.EntityHandle methodHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Call(valuetype System.Reflection.Metadata.EntityHandle methodHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.Call(System.Reflection.Metadata.EntityHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Call (methodHandle As EntityHandle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Call(System::Reflection::Metadata::EntityHandle methodHandle);" />
      <MemberSignature Language="F#" Value="member this.Call : System.Reflection.Metadata.EntityHandle -&gt; unit" Usage="instructionEncoder.Call methodHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodHandle" Type="System.Reflection.Metadata.EntityHandle" />
      </Parameters>
      <Docs>
        <param name="methodHandle">To be added.</param>
        <summary><span data-ttu-id="240bc-114">编码 <c>call</c> 指令及其操作数。</span><span class="sxs-lookup"><span data-stu-id="240bc-114">Encodes <c>call</c> instruction and its operand.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public void Call (System.Reflection.Metadata.MemberReferenceHandle methodHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Call(valuetype System.Reflection.Metadata.MemberReferenceHandle methodHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.Call(System.Reflection.Metadata.MemberReferenceHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Call (methodHandle As MemberReferenceHandle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Call(System::Reflection::Metadata::MemberReferenceHandle methodHandle);" />
      <MemberSignature Language="F#" Value="member this.Call : System.Reflection.Metadata.MemberReferenceHandle -&gt; unit" Usage="instructionEncoder.Call methodHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodHandle" Type="System.Reflection.Metadata.MemberReferenceHandle" />
      </Parameters>
      <Docs>
        <param name="methodHandle">To be added.</param>
        <summary><span data-ttu-id="240bc-115">编码 <c>call</c> 指令及其操作数。</span><span class="sxs-lookup"><span data-stu-id="240bc-115">Encodes <c>call</c> instruction and its operand.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public void Call (System.Reflection.Metadata.MethodDefinitionHandle methodHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Call(valuetype System.Reflection.Metadata.MethodDefinitionHandle methodHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.Call(System.Reflection.Metadata.MethodDefinitionHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Call (methodHandle As MethodDefinitionHandle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Call(System::Reflection::Metadata::MethodDefinitionHandle methodHandle);" />
      <MemberSignature Language="F#" Value="member this.Call : System.Reflection.Metadata.MethodDefinitionHandle -&gt; unit" Usage="instructionEncoder.Call methodHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodHandle" Type="System.Reflection.Metadata.MethodDefinitionHandle" />
      </Parameters>
      <Docs>
        <param name="methodHandle">To be added.</param>
        <summary><span data-ttu-id="240bc-116">编码 <c>call</c> 指令及其操作数。</span><span class="sxs-lookup"><span data-stu-id="240bc-116">Encodes <c>call</c> instruction and its operand.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public void Call (System.Reflection.Metadata.MethodSpecificationHandle methodHandle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Call(valuetype System.Reflection.Metadata.MethodSpecificationHandle methodHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.Call(System.Reflection.Metadata.MethodSpecificationHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Call (methodHandle As MethodSpecificationHandle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Call(System::Reflection::Metadata::MethodSpecificationHandle methodHandle);" />
      <MemberSignature Language="F#" Value="member this.Call : System.Reflection.Metadata.MethodSpecificationHandle -&gt; unit" Usage="instructionEncoder.Call methodHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="methodHandle" Type="System.Reflection.Metadata.MethodSpecificationHandle" />
      </Parameters>
      <Docs>
        <param name="methodHandle">To be added.</param>
        <summary><span data-ttu-id="240bc-117">编码 <c>call</c> 指令及其操作数。</span><span class="sxs-lookup"><span data-stu-id="240bc-117">Encodes <c>call</c> instruction and its operand.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CallIndirect">
      <MemberSignature Language="C#" Value="public void CallIndirect (System.Reflection.Metadata.StandaloneSignatureHandle signature);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CallIndirect(valuetype System.Reflection.Metadata.StandaloneSignatureHandle signature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.CallIndirect(System.Reflection.Metadata.StandaloneSignatureHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CallIndirect (signature As StandaloneSignatureHandle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CallIndirect(System::Reflection::Metadata::StandaloneSignatureHandle signature);" />
      <MemberSignature Language="F#" Value="member this.CallIndirect : System.Reflection.Metadata.StandaloneSignatureHandle -&gt; unit" Usage="instructionEncoder.CallIndirect signature" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signature" Type="System.Reflection.Metadata.StandaloneSignatureHandle" />
      </Parameters>
      <Docs>
        <param name="signature">To be added.</param>
        <summary><span data-ttu-id="240bc-118">编码 <c>calli</c> 指令及其操作数。</span><span class="sxs-lookup"><span data-stu-id="240bc-118">Encodes <c>calli</c> instruction and its operand.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeBuilder">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.BlobBuilder CodeBuilder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Metadata.BlobBuilder CodeBuilder" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.Ecma335.InstructionEncoder.CodeBuilder" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeBuilder As BlobBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Metadata::BlobBuilder ^ CodeBuilder { System::Reflection::Metadata::BlobBuilder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeBuilder : System.Reflection.Metadata.BlobBuilder" Usage="System.Reflection.Metadata.Ecma335.InstructionEncoder.CodeBuilder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.BlobBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="240bc-119">已编码的指令写入到的基础生成器。</span><span class="sxs-lookup"><span data-stu-id="240bc-119">Underlying builder where encoded instructions are written to.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlFlowBuilder">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.Ecma335.ControlFlowBuilder? ControlFlowBuilder { get; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Metadata.Ecma335.ControlFlowBuilder ControlFlowBuilder" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.Ecma335.InstructionEncoder.ControlFlowBuilder" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ControlFlowBuilder As ControlFlowBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Metadata::Ecma335::ControlFlowBuilder ^ ControlFlowBuilder { System::Reflection::Metadata::Ecma335::ControlFlowBuilder ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ControlFlowBuilder : System.Reflection.Metadata.Ecma335.ControlFlowBuilder" Usage="System.Reflection.Metadata.Ecma335.InstructionEncoder.ControlFlowBuilder" />
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.Ecma335.ControlFlowBuilder ControlFlowBuilder { get; }" FrameworkAlternate="netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.Ecma335.ControlFlowBuilder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="240bc-120">生成器跟踪标签、分支和异常处理程序。</span><span class="sxs-lookup"><span data-stu-id="240bc-120">Builder tracking labels, branches and exception handlers.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="240bc-121">如果 `null` 编码器不支持控制流的构造，则为。</span><span class="sxs-lookup"><span data-stu-id="240bc-121">If `null` the encoder doesn't support construction of control flow.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefineLabel">
      <MemberSignature Language="C#" Value="public System.Reflection.Metadata.Ecma335.LabelHandle DefineLabel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Reflection.Metadata.Ecma335.LabelHandle DefineLabel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.DefineLabel" />
      <MemberSignature Language="VB.NET" Value="Public Function DefineLabel () As LabelHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Metadata::Ecma335::LabelHandle DefineLabel();" />
      <MemberSignature Language="F#" Value="member this.DefineLabel : unit -&gt; System.Reflection.Metadata.Ecma335.LabelHandle" Usage="instructionEncoder.DefineLabel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Metadata.Ecma335.LabelHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="240bc-122">定义一个标签，稍后可用它来标记和引用指令流中的位置。</span><span class="sxs-lookup"><span data-stu-id="240bc-122">Defines a label that can later be used to mark and refer to a location in the instruction stream.</span></span></summary>
        <returns><span data-ttu-id="240bc-123">标签句柄。</span><span class="sxs-lookup"><span data-stu-id="240bc-123">Label handle.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="240bc-124"><see cref="P:System.Reflection.Metadata.Ecma335.InstructionEncoder.ControlFlowBuilder" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="240bc-124"><see cref="P:System.Reflection.Metadata.Ecma335.InstructionEncoder.ControlFlowBuilder" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadArgument">
      <MemberSignature Language="C#" Value="public void LoadArgument (int argumentIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadArgument(int32 argumentIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.LoadArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadArgument (argumentIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadArgument(int argumentIndex);" />
      <MemberSignature Language="F#" Value="member this.LoadArgument : int -&gt; unit" Usage="instructionEncoder.LoadArgument argumentIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argumentIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="argumentIndex"><span data-ttu-id="240bc-125">参数的索引。</span><span class="sxs-lookup"><span data-stu-id="240bc-125">Index of the argument.</span></span></param>
        <summary><span data-ttu-id="240bc-126">对参数加载指令进行编码。</span><span class="sxs-lookup"><span data-stu-id="240bc-126">Encodes argument load instruction.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="240bc-127"><paramref name="argumentIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="240bc-127"><paramref name="argumentIndex" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadArgumentAddress">
      <MemberSignature Language="C#" Value="public void LoadArgumentAddress (int argumentIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadArgumentAddress(int32 argumentIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.LoadArgumentAddress(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadArgumentAddress (argumentIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadArgumentAddress(int argumentIndex);" />
      <MemberSignature Language="F#" Value="member this.LoadArgumentAddress : int -&gt; unit" Usage="instructionEncoder.LoadArgumentAddress argumentIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argumentIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="argumentIndex"><span data-ttu-id="240bc-128">参数的索引。</span><span class="sxs-lookup"><span data-stu-id="240bc-128">Index of the argument.</span></span></param>
        <summary><span data-ttu-id="240bc-129">对参数地址加载指令进行编码。</span><span class="sxs-lookup"><span data-stu-id="240bc-129">Encodes argument address load instruction.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="240bc-130"><paramref name="argumentIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="240bc-130"><paramref name="argumentIndex" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadConstantI4">
      <MemberSignature Language="C#" Value="public void LoadConstantI4 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadConstantI4(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.LoadConstantI4(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadConstantI4 (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadConstantI4(int value);" />
      <MemberSignature Language="F#" Value="member this.LoadConstantI4 : int -&gt; unit" Usage="instructionEncoder.LoadConstantI4 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary><span data-ttu-id="240bc-131">对 <see cref="T:System.Int32" /> 常量加载指令进行编码。</span><span class="sxs-lookup"><span data-stu-id="240bc-131">Encodes <see cref="T:System.Int32" /> constant load instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadConstantI8">
      <MemberSignature Language="C#" Value="public void LoadConstantI8 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadConstantI8(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.LoadConstantI8(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadConstantI8 (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadConstantI8(long value);" />
      <MemberSignature Language="F#" Value="member this.LoadConstantI8 : int64 -&gt; unit" Usage="instructionEncoder.LoadConstantI8 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary><span data-ttu-id="240bc-132">对 <see cref="T:System.Int64" /> 常量加载指令进行编码。</span><span class="sxs-lookup"><span data-stu-id="240bc-132">Encodes <see cref="T:System.Int64" /> constant load instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadConstantR4">
      <MemberSignature Language="C#" Value="public void LoadConstantR4 (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadConstantR4(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.LoadConstantR4(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadConstantR4 (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadConstantR4(float value);" />
      <MemberSignature Language="F#" Value="member this.LoadConstantR4 : single -&gt; unit" Usage="instructionEncoder.LoadConstantR4 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary><span data-ttu-id="240bc-133">对 <see cref="T:System.Single" /> 常量加载指令进行编码。</span><span class="sxs-lookup"><span data-stu-id="240bc-133">Encodes <see cref="T:System.Single" /> constant load instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadConstantR8">
      <MemberSignature Language="C#" Value="public void LoadConstantR8 (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadConstantR8(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.LoadConstantR8(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadConstantR8 (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadConstantR8(double value);" />
      <MemberSignature Language="F#" Value="member this.LoadConstantR8 : double -&gt; unit" Usage="instructionEncoder.LoadConstantR8 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary><span data-ttu-id="240bc-134">对 <see cref="T:System.Double" /> 常量加载指令进行编码。</span><span class="sxs-lookup"><span data-stu-id="240bc-134">Encodes <see cref="T:System.Double" /> constant load instruction.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadLocal">
      <MemberSignature Language="C#" Value="public void LoadLocal (int slotIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadLocal(int32 slotIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.LoadLocal(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadLocal (slotIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadLocal(int slotIndex);" />
      <MemberSignature Language="F#" Value="member this.LoadLocal : int -&gt; unit" Usage="instructionEncoder.LoadLocal slotIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="slotIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="slotIndex"><span data-ttu-id="240bc-135">局部变量槽的索引。</span><span class="sxs-lookup"><span data-stu-id="240bc-135">Index of the local variable slot.</span></span></param>
        <summary><span data-ttu-id="240bc-136">对局部变量加载指令进行编码。</span><span class="sxs-lookup"><span data-stu-id="240bc-136">Encodes local variable load instruction.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="240bc-137"><paramref name="slotIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="240bc-137"><paramref name="slotIndex" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadLocalAddress">
      <MemberSignature Language="C#" Value="public void LoadLocalAddress (int slotIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadLocalAddress(int32 slotIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.LoadLocalAddress(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadLocalAddress (slotIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadLocalAddress(int slotIndex);" />
      <MemberSignature Language="F#" Value="member this.LoadLocalAddress : int -&gt; unit" Usage="instructionEncoder.LoadLocalAddress slotIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="slotIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="slotIndex"><span data-ttu-id="240bc-138">局部变量槽的索引。</span><span class="sxs-lookup"><span data-stu-id="240bc-138">Index of the local variable slot.</span></span></param>
        <summary><span data-ttu-id="240bc-139">对局部变量地址加载指令进行编码。</span><span class="sxs-lookup"><span data-stu-id="240bc-139">Encodes local variable address load instruction.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="240bc-140"><paramref name="slotIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="240bc-140"><paramref name="slotIndex" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadString">
      <MemberSignature Language="C#" Value="public void LoadString (System.Reflection.Metadata.UserStringHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadString(valuetype System.Reflection.Metadata.UserStringHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.LoadString(System.Reflection.Metadata.UserStringHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadString (handle As UserStringHandle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadString(System::Reflection::Metadata::UserStringHandle handle);" />
      <MemberSignature Language="F#" Value="member this.LoadString : System.Reflection.Metadata.UserStringHandle -&gt; unit" Usage="instructionEncoder.LoadString handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.Reflection.Metadata.UserStringHandle" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary><span data-ttu-id="240bc-141">编码 <c>ldstr</c> 指令及其操作数。</span><span class="sxs-lookup"><span data-stu-id="240bc-141">Encodes <c>ldstr</c> instruction and its operand.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkLabel">
      <MemberSignature Language="C#" Value="public void MarkLabel (System.Reflection.Metadata.Ecma335.LabelHandle label);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MarkLabel(valuetype System.Reflection.Metadata.Ecma335.LabelHandle label) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.MarkLabel(System.Reflection.Metadata.Ecma335.LabelHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MarkLabel (label As LabelHandle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MarkLabel(System::Reflection::Metadata::Ecma335::LabelHandle label);" />
      <MemberSignature Language="F#" Value="member this.MarkLabel : System.Reflection.Metadata.Ecma335.LabelHandle -&gt; unit" Usage="instructionEncoder.MarkLabel label" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="label" Type="System.Reflection.Metadata.Ecma335.LabelHandle" />
      </Parameters>
      <Docs>
        <param name="label"><span data-ttu-id="240bc-142">要标记的标签。</span><span class="sxs-lookup"><span data-stu-id="240bc-142">Label to mark.</span></span></param>
        <summary><span data-ttu-id="240bc-143">将指定的标签与当前 IL 偏移量关联。</span><span class="sxs-lookup"><span data-stu-id="240bc-143">Associates specified label with the current IL offset.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="240bc-144">单个标签可能被标记多次，最后偏移为 wins。</span><span class="sxs-lookup"><span data-stu-id="240bc-144">A single label may be marked multiple times, the last offset wins.</span></span>

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="240bc-145"><see cref="P:System.Reflection.Metadata.Ecma335.InstructionEncoder.ControlFlowBuilder" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="240bc-145"><see cref="P:System.Reflection.Metadata.Ecma335.InstructionEncoder.ControlFlowBuilder" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="240bc-146">此编码器未定义 <paramref name="label" />。</span><span class="sxs-lookup"><span data-stu-id="240bc-146"><paramref name="label" /> was not defined by this encoder.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="240bc-147"><paramref name="label" /> 具有默认值。</span><span class="sxs-lookup"><span data-stu-id="240bc-147"><paramref name="label" /> has default value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public int Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Offset" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.Metadata.Ecma335.InstructionEncoder.Offset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Offset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Offset { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Offset : int" Usage="System.Reflection.Metadata.Ecma335.InstructionEncoder.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="240bc-148">下一个已编码的指令的偏移量。</span><span class="sxs-lookup"><span data-stu-id="240bc-148">Offset of the next encoded instruction.</span></span></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpCode">
      <MemberSignature Language="C#" Value="public void OpCode (System.Reflection.Metadata.ILOpCode code);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OpCode(valuetype System.Reflection.Metadata.ILOpCode code) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.OpCode(System.Reflection.Metadata.ILOpCode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OpCode (code As ILOpCode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OpCode(System::Reflection::Metadata::ILOpCode code);" />
      <MemberSignature Language="F#" Value="member this.OpCode : System.Reflection.Metadata.ILOpCode -&gt; unit" Usage="instructionEncoder.OpCode code" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="code" Type="System.Reflection.Metadata.ILOpCode" />
      </Parameters>
      <Docs>
        <param name="code">To be added.</param>
        <summary><span data-ttu-id="240bc-149">对指定的操作代码进行编码。</span><span class="sxs-lookup"><span data-stu-id="240bc-149">Encodes specified op-code.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreArgument">
      <MemberSignature Language="C#" Value="public void StoreArgument (int argumentIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StoreArgument(int32 argumentIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.StoreArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StoreArgument (argumentIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StoreArgument(int argumentIndex);" />
      <MemberSignature Language="F#" Value="member this.StoreArgument : int -&gt; unit" Usage="instructionEncoder.StoreArgument argumentIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argumentIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="argumentIndex"><span data-ttu-id="240bc-150">参数的索引。</span><span class="sxs-lookup"><span data-stu-id="240bc-150">Index of the argument.</span></span></param>
        <summary><span data-ttu-id="240bc-151">对参数存储指令进行编码。</span><span class="sxs-lookup"><span data-stu-id="240bc-151">Encodes argument store instruction.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="240bc-152"><paramref name="argumentIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="240bc-152"><paramref name="argumentIndex" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="StoreLocal">
      <MemberSignature Language="C#" Value="public void StoreLocal (int slotIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StoreLocal(int32 slotIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.StoreLocal(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StoreLocal (slotIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StoreLocal(int slotIndex);" />
      <MemberSignature Language="F#" Value="member this.StoreLocal : int -&gt; unit" Usage="instructionEncoder.StoreLocal slotIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="slotIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="slotIndex"><span data-ttu-id="240bc-153">局部变量槽的索引。</span><span class="sxs-lookup"><span data-stu-id="240bc-153">Index of the local variable slot.</span></span></param>
        <summary><span data-ttu-id="240bc-154">对局部变量存储指令进行编码。</span><span class="sxs-lookup"><span data-stu-id="240bc-154">Encodes local variable store instruction.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="240bc-155"><paramref name="slotIndex" /> 为负数。</span><span class="sxs-lookup"><span data-stu-id="240bc-155"><paramref name="slotIndex" /> is negative.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public void Token (int token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Token(int32 token) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.Token(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Token (token As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Token(int token);" />
      <MemberSignature Language="F#" Value="member this.Token : int -&gt; unit" Usage="instructionEncoder.Token token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="token">To be added.</param>
        <summary><span data-ttu-id="240bc-156">将令牌进行编码。</span><span class="sxs-lookup"><span data-stu-id="240bc-156">Encodes a token.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Token">
      <MemberSignature Language="C#" Value="public void Token (System.Reflection.Metadata.EntityHandle handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Token(valuetype System.Reflection.Metadata.EntityHandle handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.Metadata.Ecma335.InstructionEncoder.Token(System.Reflection.Metadata.EntityHandle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Token (handle As EntityHandle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Token(System::Reflection::Metadata::EntityHandle handle);" />
      <MemberSignature Language="F#" Value="member this.Token : System.Reflection.Metadata.EntityHandle -&gt; unit" Usage="instructionEncoder.Token handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.Metadata</AssemblyName>
        <AssemblyVersion>1.4.1.0</AssemblyVersion>
        <AssemblyVersion>1.4.2.0</AssemblyVersion>
        <AssemblyVersion>1.4.3.0</AssemblyVersion>
        <AssemblyVersion>1.4.4.0</AssemblyVersion>
        <AssemblyVersion>1.4.5.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.Reflection.Metadata.EntityHandle" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary><span data-ttu-id="240bc-157">将令牌进行编码。</span><span class="sxs-lookup"><span data-stu-id="240bc-157">Encodes a token.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
