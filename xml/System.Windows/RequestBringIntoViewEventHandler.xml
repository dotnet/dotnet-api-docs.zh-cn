<Type Name="RequestBringIntoViewEventHandler" FullName="System.Windows.RequestBringIntoViewEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a3679396abc4aa2c7dfd82f16edc4c23fbba39af" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83952549" /></Metadata><TypeSignature Language="C#" Value="public delegate void RequestBringIntoViewEventHandler(object sender, RequestBringIntoViewEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed RequestBringIntoViewEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.RequestBringIntoViewEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub RequestBringIntoViewEventHandler(sender As Object, e As RequestBringIntoViewEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void RequestBringIntoViewEventHandler(System::Object ^ sender, RequestBringIntoViewEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type RequestBringIntoViewEventHandler = delegate of obj * RequestBringIntoViewEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.RequestBringIntoViewEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">事件处理程序所附加到的对象。</param>
    <param name="e">事件数据。</param>
    <summary>表示将处理 <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> 路由事件的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理此事件通常只在支持可滚动区域的元素内完成，或者有意将其呈现大小设置得小于其子元素内容的所需大小，只需在元素树中向上传递事件并已到达提供滚动区域支持的第一个父项后，即可特意处理事件。 以用户控件通常需要的方式处理滚动区域的现有实现就是 <xref:System.Windows.Controls.ScrollViewer> 。 如果派生自 <xref:System.Windows.Controls.ScrollViewer> ，则可以为注册类处理程序， <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType> 并补充事件的基类处理。 还应考虑使用或类处理类定义的 <xref:System.Windows.Controls.ScrollViewer.ScrollChanged> 事件，而不是 <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType> 。 或者，如果你创建了一个不是从派生的完全自定义类 <xref:System.Windows.Controls.ScrollViewer> ，则仍可以通过 <xref:System.Windows.EventManager.RegisterClassHandler%2A?displayProperty=nameWithType> 在类实例化中调用来添加类处理。  有关类处理的详细信息，请参阅将[路由事件标记为 "已处理" 和 "类处理](/dotnet/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling)"。  
  
 内容元素可能会导致事件由其内容宿主引发（通过调用 <xref:System.Windows.FrameworkContentElement.BringIntoView%2A> <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType> 内容宿主并从内容主机进行引发）。 同样，可以通过 helper 方法请求使逻辑树元素进入视图 <xref:System.Windows.LogicalTreeHelper.BringIntoView%2A?displayProperty=nameWithType> 。  
  
 <xref:System.Windows.Controls.ListBox>实现一个相关但不同的方法 <xref:System.Windows.Controls.ListBox.ScrollIntoView%2A> 。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.RequestBringIntoViewEventArgs" />
    <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
    <altmember cref="T:System.Windows.Controls.Primitives.ScrollBar" />
    <altmember cref="T:System.Windows.Controls.ScrollViewer" />
    <altmember cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
    <altmember cref="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)" />
  </Docs>
</Type>
