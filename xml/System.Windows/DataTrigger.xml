<Type Name="DataTrigger" FullName="System.Windows.DataTrigger">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2fa05d9c47986aa3e40b3f0979935f6f7dc5fb68" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89877572" /></Metadata><TypeSignature Language="C#" Value="public class DataTrigger : System.Windows.TriggerBase, System.Windows.Markup.IAddChild" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTrigger extends System.Windows.TriggerBase implements class System.Windows.Markup.IAddChild" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DataTrigger" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTrigger&#xA;Inherits TriggerBase&#xA;Implements IAddChild" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTrigger : System::Windows::TriggerBase, System::Windows::Markup::IAddChild" />
  <TypeSignature Language="F#" Value="type DataTrigger = class&#xA;    inherit TriggerBase&#xA;    interface IAddChild" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.TriggerBase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Windows.Markup.ContentProperty("Setters")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.ContentProperty("Setters")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Windows.Markup.XamlSetMarkupExtension("ReceiveMarkupExtension")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.XamlSetMarkupExtension("ReceiveMarkupExtension")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示一个触发器，它会在绑定数据满足指定条件时应用属性值或执行操作。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Style>、 <xref:System.Windows.Controls.ControlTemplate> 和都 <xref:System.Windows.DataTemplate> 具有触发器集合。 <xref:System.Windows.DataTrigger>当数据对象的属性值与指定的匹配时，可使用来设置属性值 <xref:System.Windows.Condition.Value%2A> 。 例如，如果您正在显示 `Employee` 对象列表，则可能希望在每个当前的出席情况下，前景颜色不同 `Employee's` 。  (例如， `Employees` 当前正在休假的用户以紫色前景显示。 ) 在某些情况下，可能更适合创建转换器或使用 <xref:System.Windows.Controls.DataTemplateSelector> 。 有关详细信息，请参阅 [数据模板化概述](/dotnet/framework/wpf/data/data-templating-overview)。  
  
 请注意，必须 <xref:System.Windows.DataTrigger.Binding%2A> 在上指定和 <xref:System.Windows.DataTrigger.Value%2A> 属性，以 <xref:System.Windows.DataTrigger> 使数据触发器有意义。 如果未指定一个或两个属性，则会引发异常。  
  
 <xref:System.Windows.DataTrigger.Setters%2A>对象的属性 <xref:System.Windows.DataTrigger> 只能包含 <xref:System.Windows.Setter> 对象。 将 <xref:System.Windows.Setter> 子对象添加到 <xref:System.Windows.DataTrigger> 对象会将该子级隐式添加到 <xref:System.Windows.SetterBaseCollection> 对象的 <xref:System.Windows.DataTrigger> 。 <xref:System.Windows.EventSetter> 对象不受支持;仅 <xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType> 支持 <xref:System.Windows.EventSetter> 对象。  
  
   
  
## Examples  
 在下面的示例中，的将 <xref:System.Windows.Controls.ItemsControl.ItemsSource%2A> <xref:System.Windows.Controls.ListBox> 绑定到 *位置*，即 <xref:System.Collections.ObjectModel.ObservableCollection%601> *位置* 对象。 *放置* 对象具有属性 *名称* 和 *状态*。  
  
 每个都 <xref:System.Windows.Controls.ListBoxItem> <xref:System.Windows.Controls.ListBox> 显示一个 *位置* 对象。 <xref:System.Windows.Style>示例中的将应用于每个 <xref:System.Windows.Controls.ListBoxItem> 。  
  
 指定了， <xref:System.Windows.DataTrigger> 以便在*位置*数据项的*状态*为 "WA" 时，相应的前景 <xref:System.Windows.Controls.ListBoxItem> 设置为红色。  
  
 [!code-xaml[DataTrigger#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTrigger/CSharp/Window1.xaml#1)]  
  
 下面的示例演示如何 <xref:System.Windows.DataTrigger> <xref:System.Windows.Media.Animation.BeginStoryboard> <xref:System.Windows.Media.Animation.Storyboard> 在绑定数据满足指定条件时使用、操作和来对属性进行动画处理。 该示例显示控件中的清单信息 <xref:System.Windows.Controls.ListBox> 。 它使用 <xref:System.Windows.DataTrigger> 对 <xref:System.Windows.UIElement.Opacity%2A> 包含脱销书籍的每个的进行动画处理 <xref:System.Windows.Controls.ListBoxItem> 。  
  
 [!code-xaml[AnimatePropertyStoryboards#GraphicsMMDataTriggerStoryboardWholePage](~/samples/snippets/xaml/VS_Snippets_Wpf/AnimatePropertyStoryboards/XAML/DataTriggerStoryboardExample.xaml#graphicsmmdatatriggerstoryboardwholepage)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Trigger" />
    <altmember cref="T:System.Windows.MultiDataTrigger" />
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160009">数据模板化示例简介</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTrigger ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTrigger.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTrigger();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.DataTrigger" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Binding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingBase Binding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingBase Binding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTrigger.Binding" />
      <MemberSignature Language="VB.NET" Value="Public Property Binding As BindingBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingBase ^ Binding { System::Windows::Data::BindingBase ^ get(); void set(System::Windows::Data::BindingBase ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Binding : System.Windows.Data.BindingBase with get, set" Usage="System.Windows.DataTrigger.Binding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置产生数据对象的属性值的绑定。</summary>
        <value>默认值是 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此绑定生成的属性值与属性指定的值进行比较 <xref:System.Windows.DataTrigger.Value%2A> 。 该值首先转换为绑定 (的值的类型（如果可能) ），然后使用方法对这两个值进行比较 `Object.Equals` 。 如果两个值相等，则会应用关联的操作或资源库。  
  
 您将创建一个绑定，并使用 <xref:System.Windows.Data.Binding.Path%2A> 属性绑定到 (绑定源对象) 的特定对象的属性。 例如，可以绑定到*任务*的*Priority*属性。 有关详细信息，请参阅 [数据绑定概述](/dotnet/framework/wpf/data/data-binding-overview)。  
  
 请注意，必须 <xref:System.Windows.DataTrigger.Binding%2A> 在上指定和 <xref:System.Windows.DataTrigger.Value%2A> 属性，以 <xref:System.Windows.DataTrigger> 使数据触发器有意义。 如果未设置其中一个或两个属性，则会引发异常。  
  
<a name="xamlAttributeUsage_PriorityBinding"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```  
<object property="{Binding  declaration}"/>  
```  
  
<a name="xamlPropertyElementUsage_Binding"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```  
<object>  
  <object.Binding>  
    <Binding …/>  
  </object.Binding>  
</object>  
```  
  
<a name="xamlValues_PriorityBinding"></a>   
## <a name="xaml-values"></a>XAML 值  
 *声明*  
 零个或多个由逗号分隔的属性赋值子句 (，) 。 有关详细信息，请参阅 [绑定标记扩展](/dotnet/framework/wpf/advanced/binding-markup-extension) 。  
  
   
  
## Examples  
 在下面的示例中，将 <xref:System.Windows.DataTrigger> <xref:System.Windows.Controls.Border.BorderBrush%2A> 名为的元素的设置为（ `border` `Yellow` 如果该 `TaskType` 属性为） `TaskType.Home` 。  
  
 [!code-xaml[DataTemplatingIntro#DT](~/samples/snippets/xaml/VS_Snippets_Wpf/DataTemplatingIntro/xaml/window1.xaml#dt)]  
[!code-xaml[DataTemplatingIntro#DataTrigger](~/samples/snippets/xaml/VS_Snippets_Wpf/DataTemplatingIntro/xaml/window1.xaml#datatrigger)]  
[!code-xaml[DataTemplatingIntro#AddingMore2](~/samples/snippets/xaml/VS_Snippets_Wpf/DataTemplatingIntro/xaml/window1.xaml#addingmore2)]  
  
 有关此示例的详细讨论，请参阅 [数据模板化概述](/dotnet/framework/wpf/data/data-templating-overview)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.DataTrigger.Value" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160009">数据模板化示例简介</related>
      </Docs>
    </Member>
    <Member MemberName="ReceiveMarkupExtension">
      <MemberSignature Language="C#" Value="public static void ReceiveMarkupExtension (object targetObject, System.Windows.Markup.XamlSetMarkupExtensionEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReceiveMarkupExtension(object targetObject, class System.Windows.Markup.XamlSetMarkupExtensionEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTrigger.ReceiveMarkupExtension(System.Object,System.Windows.Markup.XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ReceiveMarkupExtension (targetObject As Object, eventArgs As XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ReceiveMarkupExtension(System::Object ^ targetObject, System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^ eventArgs);" />
      <MemberSignature Language="F#" Value="static member ReceiveMarkupExtension : obj * System.Windows.Markup.XamlSetMarkupExtensionEventArgs -&gt; unit" Usage="System.Windows.DataTrigger.ReceiveMarkupExtension (targetObject, eventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetObject" Type="System.Object" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="eventArgs" Type="System.Windows.Markup.XamlSetMarkupExtensionEventArgs" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="targetObject">标记扩展在其中设置值的对象。</param>
        <param name="eventArgs">与标记扩展处理有关的数据。</param>
        <summary>处理标记扩展为 <see cref="T:System.Windows.DataTrigger" /> 对象的属性提供值的情况。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是在类级别应用的特性所引用的方法 <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute> ，这意味着此方法将处理所有使用标记扩展来设置值的尝试 <xref:System.Windows.DataTrigger> 。 通常不直接调用此方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute" />
        <altmember cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Setters">
      <MemberSignature Language="C#" Value="public System.Windows.SetterBaseCollection Setters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.SetterBaseCollection Setters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTrigger.Setters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Setters As SetterBaseCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SetterBaseCollection ^ Setters { System::Windows::SetterBaseCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Setters : System.Windows.SetterBaseCollection" Usage="System.Windows.DataTrigger.Setters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.SetterBaseCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.Setter" /> 对象的集合，这些对象描述当数据项满足指定条件时要应用的属性值。</summary>
        <value>默认值是 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Setters"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```  
<object>  
  <object.Setters>  
    ZeroOrMoreSetters  
  </object.Setters>  
</object>  
```  
  
<a name="xamlValues_Setters"></a>   
## <a name="xaml-values"></a>XAML 值  
 *ZeroOrMoreSetters*  
 零个或多个 <xref:System.Windows.Setter> 对象。  
  
 <xref:System.Windows.DataTrigger>当数据项满足指定条件时，可以通过来启动操作或使用来 <xref:System.Windows.Setter> 应用属性值。  
  
 如果有多个 setter 在同一 setter 集合中设置相同的属性，则使用最后声明的 setter。  
  
 <xref:System.Windows.DataTrigger.Setters%2A>对象的属性 <xref:System.Windows.DataTrigger> 只能包含 <xref:System.Windows.Setter> 对象。 将 <xref:System.Windows.Setter> 子对象添加到 <xref:System.Windows.DataTrigger> 对象会将该子级隐式添加到 <xref:System.Windows.SetterBaseCollection> 对象的 <xref:System.Windows.DataTrigger> 。 <xref:System.Windows.EventSetter> 对象不受支持;仅 <xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType> 支持 <xref:System.Windows.EventSetter> 对象。  
  
   
  
## Examples  
 下面的示例演示了 <xref:System.Windows.DataTrigger> 在中定义的两个对象 <xref:System.Windows.DataTemplate> 。 <xref:System.Windows.DataTemplate>应用于*AuctionItem*数据对象 (在此示例中未显示) ，其属性为*SpecialFeatures*。  
  
 首先指定了第一个， <xref:System.Windows.DataTrigger> 以便在数据对象的 *SpecialFeatures* 值为 *Color*的情况下显示项，并显示带有 `DodgerBlue` 深蓝色标题的背景。 如果数据对象的 *SpecialFeatures* 值为 " *突出显示*"，则第二个 <xref:System.Windows.DataTrigger> 活动将处于活动状态，从而导致显示带有星号的橙色边框的项。  
  
 有关完整示例，请参阅 [数据绑定演示](https://go.microsoft.com/fwlink/?LinkID=163703)。  
  
 [!code-xaml[DataBindingLab#AuctionItemsDataTriggers](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/DataBindingLabApp.xaml#auctionitemsdatatriggers)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160009">数据模板化示例简介</related>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTrigger.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberSignature Language="F#" Value="abstract member System.Windows.Markup.IAddChild.AddChild : obj -&gt; unit&#xA;override this.System.Windows.Markup.IAddChild.AddChild : obj -&gt; unit" Usage="dataTrigger.System.Windows.Markup.IAddChild.AddChild value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">要添加的子对象。</param>
        <summary>添加子对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Windows.DataTrigger> 实例被强制转换为 <xref:System.Windows.Markup.IAddChild> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DataTrigger.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberSignature Language="F#" Value="abstract member System.Windows.Markup.IAddChild.AddText : string -&gt; unit&#xA;override this.System.Windows.Markup.IAddChild.AddText : string -&gt; unit" Usage="dataTrigger.System.Windows.Markup.IAddChild.AddText text" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">要添加到对象的文本。</param>
        <summary>将节点的文本内容添加到对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此成员是显式接口成员的实现。 它只能在 <xref:System.Windows.DataTrigger> 实例被强制转换为 <xref:System.Windows.Markup.IAddChild> 接口时使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DataTrigger.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj with get, set" Usage="System.Windows.DataTrigger.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Windows.Markup.DependsOn("Binding")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Windows.Markup.DependsOn("Binding")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要与数据对象的属性值比较的值。</summary>
        <value>默认值是 <see langword="null" />。 请参见“异常”部分。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Value"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```  
<object>  
  <object.Value>  
    Value  
  </object.Value>  
</object>  
```  
  
 此值与的属性生成的属性值进行比较 <xref:System.Windows.DataTrigger.Binding%2A> <xref:System.Windows.DataTrigger> 。 该比较是一项引用相等性检查。 如果两个值相等，则会应用关联的操作或资源库。  
  
 请注意，必须 <xref:System.Windows.DataTrigger.Binding%2A> 在上指定和 <xref:System.Windows.DataTrigger.Value%2A> 属性，以 <xref:System.Windows.DataTrigger> 使数据触发器有意义。 如果未设置其中一个或两个属性，则将引发异常。  
  
   
  
## Examples  
 在下面的示例中，的将 <xref:System.Windows.Controls.ItemsControl.ItemsSource%2A> <xref:System.Windows.Controls.ListBox> 绑定到 *位置*，即 <xref:System.Collections.ObjectModel.ObservableCollection%601> *位置* 对象。 *放置* 对象具有属性 *名称* 和 *状态*。  
  
 每个都 <xref:System.Windows.Controls.ListBoxItem> <xref:System.Windows.Controls.ListBox> 显示一个 *位置* 对象。 <xref:System.Windows.Style>示例中的将应用于每个 <xref:System.Windows.Controls.ListBoxItem> 。  
  
 指定了， <xref:System.Windows.DataTrigger> 以便在*位置*数据项的*状态*为 "WA" 时，相应的前景 <xref:System.Windows.Controls.ListBoxItem> 设置为红色。  
  
 [!code-xaml[DataTrigger#1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTrigger/CSharp/Window1.xaml#1)]  
  
 下面的示例演示了 <xref:System.Windows.DataTrigger> 在中定义的两个 <xref:System.Windows.DataTemplate> 。 <xref:System.Windows.DataTemplate>应用于*AuctionItem*数据对象 (在此示例中未显示) ，其属性为*SpecialFeatures*。 有关完整示例，请参阅 [数据绑定演示](https://go.microsoft.com/fwlink/?LinkID=163703) 。  
  
 首先指定了第一个， <xref:System.Windows.DataTrigger> 以便在数据对象的 *SpecialFeatures* 值为 *Color*时，使用带有深蓝色标题的 DodgerBlue 背景来显示项。 如果数据对象的 *SpecialFeatures* 值为 " *突出显示*"，则第二个 <xref:System.Windows.DataTrigger> 活动将处于活动状态，从而导致显示带有星号的橙色边框的项。  
  
 [!code-xaml[DataBindingLab#AuctionItemsDataTriggers](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/DataBindingLabApp.xaml#auctionitemsdatatriggers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">不支持表达式。 不支持绑定。</exception>
        <altmember cref="P:System.Windows.DataTrigger.Binding" />
        <altmember cref="P:System.Windows.DataTrigger.Setters" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160009">数据模板化示例简介</related>
      </Docs>
    </Member>
  </Members>
</Type>
