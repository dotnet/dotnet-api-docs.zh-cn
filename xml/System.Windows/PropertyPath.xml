<Type Name="PropertyPath" FullName="System.Windows.PropertyPath">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4d1747f06c61b6f03325ad3d4bc568af3d4c0feb" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83532987" /></Metadata><TypeSignature Language="C#" Value="public sealed class PropertyPath" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PropertyPath extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.PropertyPath" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PropertyPath" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyPath sealed" />
  <TypeSignature Language="F#" Value="type PropertyPath = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>实现一个数据结构，用于将某个属性描述为另一个属性或所属类型下的路径。 属性路径用于对象的数据绑定，并用于动画的情节提要和时间线。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类包含字符串 <xref:System.Windows.PropertyPath.Path%2A>，以及 <xref:System.Windows.PropertyPath.PathParameters%2A> 到字符串 <xref:System.Windows.PropertyPath.Path%2A>的依赖项属性列表。  
  
 <xref:System.Windows.PropertyPath> 支持两种行为模式：  
  
 **Source 模式**描述了属性的路径，该属性用作其他操作的源。 此模式由 <xref:System.Windows.Data.Binding> 类用于支持数据绑定。  
  
 **目标模式**描述将被设置为目标属性的属性的路径。 此模式由动画用于支持情节提要和时间线资源库。  
  
 例如，`Background.Opacity` 是一个两步路径。 此路径隐含：首先，找到对象的 `Background` 属性，获取 `Background` 属性设置为的值对象，然后获取该对象的 `Opacity` 属性的值。  
  
<a name="xamlAttributeUsage_PropertyPath"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="propertyPath" .../>  
```  
  
<a name="xamlValues_PropertyPath"></a>   
## <a name="xaml-values"></a>XAML 值  
 *propertyPath*  
 计算为简单或复杂属性路径的字符串。 用于在 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 中设置 <xref:System.Windows.PropertyPath> 的语法广泛但非常复杂，并在[PROPERTYPATH XAML 语法](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)的单独主题中进行了介绍。  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/056aee79-7cdd-434f-8174-dfc856cad343">x:Static 标记扩展</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.PropertyPath" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::Object ^ parameter);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyPath : obj -&gt; System.Windows.PropertyPath" Usage="new System.Windows.PropertyPath parameter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter">一个属性路径，它描述[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 属性或单一依赖项属性的路径。</param>
        <summary>初始化 <see cref="T:System.Windows.PropertyPath" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数具有两个完全不同的用法，具体取决于它是用于绑定的源模式属性路径，还是用于情节提要目标的目标模式单步骤属性路径。  
  
 如果在源模式下将此 <xref:System.Windows.PropertyPath> 用于绑定，则 `parameter` 是表示属性名称的字符串，也可以是一个字符串，该字符串描述要用作绑定源的对象的 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 对象模型中的属性的 "单步执行" 路径。 对于绑定属性路径，标识 "步骤" 的字符是一个点（.）。 还支持索引器引用（包括多个索引器和类型区分）。 有关 <xref:System.Windows.Data.Binding> 对象具体使用的字符串语法的详细信息，请参阅 <xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>。 用作绑定源的属性不需要是依赖属性。 如果绑定双向更新，则引用的属性必须是读写属性。 另请注意，绑定目标必须是依赖项属性。 有关详细信息，请参阅[数据绑定概述](~/docs/framework/wpf/data/data-binding-overview.md)。  
  
 如果在目标模式下将此 <xref:System.Windows.PropertyPath> 用于演示图板目标的单步路径，则 `parameter` 通常作为类型 <xref:System.Windows.DependencyProperty>提供。 你还可以指定 <xref:System.Windows.DependencyProperty.Name%2A>的字符串。 这两个值的计算结果都是相同的，因为它在内部存储为字符串。 提供的 <xref:System.Windows.DependencyProperty> 通过 <xref:System.Windows.Markup.DependencyPropertyConverter>转换为字符串。 对于依赖属性，<xref:System.Windows.Markup.DependencyPropertyConverter> 支持限定的命名格式，因此你可以指定*typeName*。代码中 <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType> 构造函数的*属性*名称限定依赖属性名称字符串。 依赖属性标识符的限定路径与复杂路径的概念不同。 应改为使用 <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType> 构造函数创建复杂路径 <xref:System.Windows.PropertyPath>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.Binding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (string path, params object[] pathParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, object[] pathParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ParamArray pathParameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::String ^ path, ... cli::array &lt;System::Object ^&gt; ^ pathParameters);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyPath : string * obj[] -&gt; System.Windows.PropertyPath" Usage="new System.Windows.PropertyPath (path, pathParameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathParameters" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path">一个以标记化格式指定 <see cref="P:System.Windows.PropertyPath.Path" /> 的字符串。</param>
        <param name="pathParameters">一个设置 <see cref="P:System.Windows.PropertyPath.PathParameters" /> 的对象数组。</param>
        <summary>使用提供的路径标记字符串和参数初始化 <see cref="T:System.Windows.PropertyPath" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此签名通常仅用于具有复杂路径 <xref:System.Windows.PropertyPath> 目标模式。  
  
 此构造函数支持 `pathParameters` 构造函数参数 `params`。 因此，你可以将 `pathParameters` 的内容指定为一系列用逗号分隔的构造函数参数，这些参数可填充数组，而不需要对数组进行维度，然后使用 `pathParameters` 项进行填充。 您指定的每个项必须是以下类型之一： <xref:System.Windows.DependencyProperty>、<xref:System.Reflection.PropertyInfo><xref:System.ComponentModel.PropertyDescriptor>。  
  
 有关参数要求的详细信息，请参阅 <xref:System.Windows.PropertyPath.Path%2A> 和 <xref:System.Windows.PropertyPath.PathParameters%2A>。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.Windows.PropertyPath.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于描述路径的字符串。</summary>
        <value>用于描述路径的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性中包含的字符串具有三个完全不同的含义，具体取决于是否将 <xref:System.Windows.PropertyPath> 用于绑定的源模式属性路径、演示图板目标的目标模式单步属性路径或情节提要目标的复杂路径。  
  
 如果在源模式下将此 <xref:System.Windows.PropertyPath> 用于绑定，则 <xref:System.Windows.PropertyPath.Path%2A> 是表示属性名称的字符串，也可以是一个字符串，该字符串描述要用作绑定源的对象的 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 对象模型中的属性的 "单步执行" 路径。 对于绑定属性路径，标识 "步骤" 的字符是一个点（.）。 还支持索引器引用（包括多个索引器和类型区分）。 有关 <xref:System.Windows.Data.Binding> 对象具体使用的字符串语法的详细信息，请参阅 <xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>。 用作绑定源的属性不需要是依赖属性。 如果绑定双向更新，则属性源必须是读写的。 另请注意，绑定目标必须是依赖项属性。 有关详细信息，请参阅[数据绑定概述](~/docs/framework/wpf/data/data-binding-overview.md)。  
  
 如果在目标模式下将此 <xref:System.Windows.PropertyPath> 用于演示图板目标的单步路径，则 <xref:System.Windows.PropertyPath> 是作为*typeName*的字符串。*propertyName*限定的依赖项属性名称字符串。  
  
 如果将此 <xref:System.Windows.PropertyPath> 用于情节提要目标的复杂路径，则 <xref:System.Windows.PropertyPath.Path%2A> 是标记化字符串格式，用于描述 <xref:System.Windows.PropertyPath.PathParameters%2A>中给定的各种对象之间的关系。  
  
-   使用括在括号中的项的数组索引按此格式指定数组中的每一项。 例如，若要指定数组中的第一项，请 `(0)`字符串标记。  
  
-   项之间的关系（路径中的 "步骤"）由点（.）指定。 点的属性向前是路径中的第一步，后面的属性是第二步（可以指定除2外的步骤）。 链中的最后一步始终表示正在进行动画处理的属性。  
  
-   使用索引器语法访问集合属性内的项，索引括在方括号（[和]）中。 索引器将附加到表示属性的标记。 例如，下面是一个两步路径，其标记组合在第一步中，指定该属性的集合中的第二个项目： `(0)[1].(1)`。 不能对链中的最后一个属性使用索引器;不能对实际的集合位置进行动画处理，必须对该对象上的属性进行动画处理。  
  
 通常通过构造函数建立 <xref:System.Windows.PropertyPath> 的路径字符串：用于绑定的 <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> 签名或单步演示图板目标的路径字符串，适用于多步骤情节提要目标的 <xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29> 签名。  
  
 **XAML：** 使用 <xref:System.Windows.PropertyPath> 在 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]中描述属性引用时，作为属性值，指定的字符串首先由类型转换器（<xref:System.Windows.PropertyPathConverter>）处理。 然后，此类型转换器将处理字符串，并根据其语法调用 <xref:System.Windows.PropertyPath> 构造函数签名之一。 通过用于处理特性值的类型转换器的这种间接寻址通常是如何在 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]中使用 <xref:System.Windows.PropertyPath>，而不是声明一个 <xref:System.Windows.PropertyPath> 对象元素，然后将特定值应用于 <xref:System.Windows.PropertyPath.Path%2A> 和 <xref:System.Windows.PropertyPath.PathParameters%2A>等特性。 有关详细信息，请参阅[PROPERTYPATH XAML 语法](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)。  
  
<a name="xamlTextUsage_Path"></a>   
## <a name="xaml-text-usage"></a>XAML 文本用法  
 通常不会在直接 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 语法中设置 <xref:System.Windows.PropertyPath> 类型的成员。 请参阅“备注”。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PathParameters">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;object&gt; PathParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;object&gt; PathParameters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.PathParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PathParameters As Collection(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ PathParameters { System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PathParameters : System.Collections.ObjectModel.Collection&lt;obj&gt;" Usage="System.Windows.PropertyPath.PathParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取要在路径引用索引参数时使用的参数列表。</summary>
        <value>参数列表。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常通过构造函数建立 <xref:System.Windows.PropertyPath> 的属性。 对于设置 <xref:System.Windows.PropertyPath.PathParameters%2A>，<xref:System.Windows.PropertyPath.%23ctor%2A> 构造函数尤其方便，因为 `pathParameters` 构造函数参数被指定为 `params`，这意味着您不需要创建或维度用于构造的数组。 只需指定数组的每个成员作为附加参数。  
  
 如果作为目标的最终属性是 <xref:System.Windows.Freezable> 类型，则将克隆该值。 有关详细信息，请参阅[情节提要概述](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)。  
  
 属性链的实际计算由情节提要动画机制来执行。 在 <xref:System.Windows.PropertyPath> 级别，不会执行任何验证来确保路径上的步骤都是连接的。 例如，可以构造一个 <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType> 为第一步的属性路径，<xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=nameWithType> 作为第二步。 但是，如果实际应用为目标，则此类属性路径会失败，因为填充 <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType> 的画笔类型没有 <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType> 属性。 无效的属性路径无提示失败。 有关详细信息，请参阅[情节提要概述](~/docs/framework/wpf/graphics-multimedia/storyboards-overview.md)。  
  
 **XAML：** 使用 <xref:System.Windows.PropertyPath> 在 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]中描述属性引用时，作为属性值，指定的字符串首先由类型转换器（<xref:System.Windows.PropertyPathConverter>）处理。 然后，此类型转换器将处理字符串，并根据其语法调用 <xref:System.Windows.PropertyPath> 构造函数签名之一。 通过用于处理特性值的类型转换器的这种间接寻址通常是如何在 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]中使用 <xref:System.Windows.PropertyPath>，而不是声明一个 <xref:System.Windows.PropertyPath> 对象元素，然后将特定值应用于 <xref:System.Windows.PropertyPath.Path%2A> 和 <xref:System.Windows.PropertyPath.PathParameters%2A>等特性。 有关详细信息，请参阅[PROPERTYPATH XAML 语法](~/docs/framework/wpf/advanced/propertypath-xaml-syntax.md)。  
  
<a name="xamlTextUsage_PathParameters"></a>   
## <a name="xaml-text-usage"></a>XAML 文本用法  
 通常不会在直接 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 语法中设置 <xref:System.Windows.PropertyPath> 类型的成员。 请参阅“备注”。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
