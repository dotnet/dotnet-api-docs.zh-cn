<Type Name="PropertyPath" FullName="System.Windows.PropertyPath">
  <Metadata><Meta Name="ms.openlocfilehash" Value="039a19f8a73cefb387b6c744d8c6d4de7b01b1d5" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86715232" /></Metadata><TypeSignature Language="C#" Value="public sealed class PropertyPath" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PropertyPath extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.PropertyPath" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PropertyPath" />
  <TypeSignature Language="C++ CLI" Value="public ref class PropertyPath sealed" />
  <TypeSignature Language="F#" Value="type PropertyPath = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Windows.PropertyPathConverter))&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="247aa-101">实现一个数据结构，用于将某个属性描述为另一个属性或所属类型下的路径。</span><span class="sxs-lookup"><span data-stu-id="247aa-101">Implements a data structure for describing a property as a path below another property, or below an owning type.</span></span> <span data-ttu-id="247aa-102">属性路径用于对象的数据绑定，并用于动画的情节提要和时间线。</span><span class="sxs-lookup"><span data-stu-id="247aa-102">Property paths are used in data binding to objects, and in storyboards and timelines for animations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="247aa-103">此类包含一个字符串和一个包含在 <xref:System.Windows.PropertyPath.Path%2A> 字符串中的依赖项属性的列表 <xref:System.Windows.PropertyPath.PathParameters%2A> <xref:System.Windows.PropertyPath.Path%2A> 。</span><span class="sxs-lookup"><span data-stu-id="247aa-103">This class contains a string <xref:System.Windows.PropertyPath.Path%2A>, and list of dependency properties that are the <xref:System.Windows.PropertyPath.PathParameters%2A> into the string <xref:System.Windows.PropertyPath.Path%2A>.</span></span>  
  
 <span data-ttu-id="247aa-104"><xref:System.Windows.PropertyPath> 支持两种行为模式：</span><span class="sxs-lookup"><span data-stu-id="247aa-104"><xref:System.Windows.PropertyPath> supports two modes of behavior:</span></span>  
  
 <span data-ttu-id="247aa-105">**Source 模式** 描述了属性的路径，该属性用作其他操作的源。</span><span class="sxs-lookup"><span data-stu-id="247aa-105">**Source mode** describes a path to a property that is used as a source for some other operation.</span></span> <span data-ttu-id="247aa-106">该类使用此模式 <xref:System.Windows.Data.Binding> 来支持数据绑定。</span><span class="sxs-lookup"><span data-stu-id="247aa-106">This mode is used by the <xref:System.Windows.Data.Binding> class to support data binding.</span></span>  
  
 <span data-ttu-id="247aa-107">**目标模式** 描述将被设置为目标属性的属性的路径。</span><span class="sxs-lookup"><span data-stu-id="247aa-107">**Target mode** describes a path to a property that will be set as a target property.</span></span> <span data-ttu-id="247aa-108">此模式由动画用于支持情节提要和时间线资源库。</span><span class="sxs-lookup"><span data-stu-id="247aa-108">This mode is used by animation in support of storyboard and timeline setters.</span></span>  
  
 <span data-ttu-id="247aa-109">例如， `Background.Opacity` 是一个两步路径。</span><span class="sxs-lookup"><span data-stu-id="247aa-109">For instance, `Background.Opacity` is a two-step path.</span></span> <span data-ttu-id="247aa-110">此路径隐含：首先，查找 `Background` 对象的属性，获取 `Background` 属性设置为的值对象，然后获取 `Opacity` 该对象的属性值。</span><span class="sxs-lookup"><span data-stu-id="247aa-110">This path implies: first, find the `Background` property of an object, get the value object that the `Background` property is set to, and then get the value of the `Opacity` property on that object.</span></span>  
  
<a name="xamlAttributeUsage_PropertyPath"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="247aa-111">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="247aa-111">XAML Attribute Usage</span></span>  
  
```  
<object property="propertyPath" .../>  
```  
  
<a name="xamlValues_PropertyPath"></a>   
## <a name="xaml-values"></a><span data-ttu-id="247aa-112">XAML 值</span><span class="sxs-lookup"><span data-stu-id="247aa-112">XAML Values</span></span>  
 <span data-ttu-id="247aa-113">*propertyPath*</span><span class="sxs-lookup"><span data-stu-id="247aa-113">*propertyPath*</span></span>  
 <span data-ttu-id="247aa-114">计算为简单或复杂属性路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="247aa-114">A string that is evaluated to be either a simple or complex property path.</span></span> <span data-ttu-id="247aa-115">用于设置中的语法 <xref:System.Windows.PropertyPath> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 是通用的，但却是复杂的，并且在单独的主题 [PropertyPath XAML 语法](/dotnet/framework/wpf/advanced/propertypath-xaml-syntax)中进行了介绍。</span><span class="sxs-lookup"><span data-stu-id="247aa-115">The syntax for setting a <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is versatile but complex, and is described in the separate topic [PropertyPath XAML Syntax](/dotnet/framework/wpf/advanced/propertypath-xaml-syntax).</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/056aee79-7cdd-434f-8174-dfc856cad343"><span data-ttu-id="247aa-116">x:Static 标记扩展</span><span class="sxs-lookup"><span data-stu-id="247aa-116">x:Static Markup Extension</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="247aa-117">初始化 <see cref="T:System.Windows.PropertyPath" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="247aa-117">Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (object parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parameter As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::Object ^ parameter);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyPath : obj -&gt; System.Windows.PropertyPath" Usage="new System.Windows.PropertyPath parameter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parameter" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="247aa-118">一个属性路径，它描述[!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 属性或单一依赖项属性的路径。</span><span class="sxs-lookup"><span data-stu-id="247aa-118">A property path that either describes a path to a [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property, or a single dependency property.</span></span></param>
        <summary><span data-ttu-id="247aa-119">初始化 <see cref="T:System.Windows.PropertyPath" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="247aa-119">Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="247aa-120">此构造函数具有两个完全不同的用法，具体取决于它是用于绑定的源模式属性路径，还是用于情节提要目标的目标模式单步骤属性路径。</span><span class="sxs-lookup"><span data-stu-id="247aa-120">This constructor has two completely different usages depending on whether it is being used for a source-mode property path for a binding, or for a target-mode single-step property path for a storyboard target.</span></span>  
  
 <span data-ttu-id="247aa-121">如果 <xref:System.Windows.PropertyPath> 在源模式下将此用于绑定， `parameter` 则是表示属性名称的字符串，也可以是一个字符串，该字符串描述要用作 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 绑定源的对象的对象模型中的属性的 "单步执行" 路径。</span><span class="sxs-lookup"><span data-stu-id="247aa-121">If using this <xref:System.Windows.PropertyPath> in source mode for a binding, `parameter` is a string representing a property name, or can be a string that describes a "step-through" path to the property in the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] object model of the object that is being used as the source for a binding.</span></span> <span data-ttu-id="247aa-122">对于绑定属性路径，标识 "step" 的字符是一个点 (。 ) 。</span><span class="sxs-lookup"><span data-stu-id="247aa-122">For a binding property path, the character that identifies a "step" is a dot (.).</span></span> <span data-ttu-id="247aa-123">索引器引用 (包括多个索引器，并且还支持类型区分) 。</span><span class="sxs-lookup"><span data-stu-id="247aa-123">Indexer references (including multiple indexers, and type differentiation) are also supported.</span></span> <span data-ttu-id="247aa-124">有关对象特别使用的字符串语法的更多详细信息 <xref:System.Windows.Data.Binding> ，请参阅 <xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="247aa-124">For more details on the syntax of the string as specifically used by the <xref:System.Windows.Data.Binding> object, see <xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="247aa-125">用作绑定源的属性不需要是依赖属性。</span><span class="sxs-lookup"><span data-stu-id="247aa-125">A property used as a binding source need not be a dependency property.</span></span> <span data-ttu-id="247aa-126">如果绑定双向更新，则引用的属性必须是读写属性。</span><span class="sxs-lookup"><span data-stu-id="247aa-126">If the binding updates two-way, the property referenced must be read-write.</span></span> <span data-ttu-id="247aa-127">另请注意，绑定目标必须是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="247aa-127">Also note that the binding target does have to be a dependency property.</span></span> <span data-ttu-id="247aa-128">有关详细信息，请参阅 [数据绑定概述](/dotnet/framework/wpf/data/data-binding-overview)。</span><span class="sxs-lookup"><span data-stu-id="247aa-128">For details, see [Data Binding Overview](/dotnet/framework/wpf/data/data-binding-overview).</span></span>  
  
 <span data-ttu-id="247aa-129">如果 <xref:System.Windows.PropertyPath> 在目标模式下将此用于情节提要目标的单步路径， `parameter` 通常以类型形式提供 <xref:System.Windows.DependencyProperty> 。</span><span class="sxs-lookup"><span data-stu-id="247aa-129">If using this <xref:System.Windows.PropertyPath> in target mode for a single-step path for a storyboard target, `parameter` is generally provided as type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="247aa-130">您还可以指定一个字符串 <xref:System.Windows.DependencyProperty.Name%2A> 。</span><span class="sxs-lookup"><span data-stu-id="247aa-130">You can also specify a string that is the <xref:System.Windows.DependencyProperty.Name%2A>.</span></span> <span data-ttu-id="247aa-131">这两个值的计算结果都是相同的，因为它在内部存储为字符串。</span><span class="sxs-lookup"><span data-stu-id="247aa-131">Either of these evaluate to the same result, because it is stored internally as a string.</span></span> <span data-ttu-id="247aa-132">通过将提供的 <xref:System.Windows.DependencyProperty> 转换为字符串 <xref:System.Windows.Markup.DependencyPropertyConverter> 。</span><span class="sxs-lookup"><span data-stu-id="247aa-132">A provided <xref:System.Windows.DependencyProperty> is converted to a string through <xref:System.Windows.Markup.DependencyPropertyConverter>.</span></span> <span data-ttu-id="247aa-133"><xref:System.Windows.Markup.DependencyPropertyConverter>支持依赖项属性的限定命名格式，因此可以指定*typeName*。*propertyName*代码中构造函数的属性名称限定依赖属性名称字符串 <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="247aa-133">The <xref:System.Windows.Markup.DependencyPropertyConverter> supports a qualified naming format for dependency properties, so you can specify a *typeName*.*propertyName* qualified dependency property name string to the <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType> constructor in code.</span></span> <span data-ttu-id="247aa-134">依赖属性标识符的限定路径与复杂路径的概念不同。</span><span class="sxs-lookup"><span data-stu-id="247aa-134">The qualified path to the dependency property identifier is a different concept than a complex path.</span></span> <span data-ttu-id="247aa-135"><xref:System.Windows.PropertyPath>应改为使用构造函数创建复杂路径 <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="247aa-135">A complex-path <xref:System.Windows.PropertyPath> should instead be created with the <xref:System.Windows.PropertyPath.%23ctor%2A?displayProperty=nameWithType> constructor.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.Binding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PropertyPath (string path, params object[] pathParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, object[] pathParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.PropertyPath.#ctor(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, ParamArray pathParameters As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PropertyPath(System::String ^ path, ... cli::array &lt;System::Object ^&gt; ^ pathParameters);" />
      <MemberSignature Language="F#" Value="new System.Windows.PropertyPath : string * obj[] -&gt; System.Windows.PropertyPath" Usage="new System.Windows.PropertyPath (path, pathParameters)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="pathParameters" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="247aa-136">一个以标记化格式指定 <see cref="P:System.Windows.PropertyPath.Path" /> 的字符串。</span><span class="sxs-lookup"><span data-stu-id="247aa-136">A string that specifies the <see cref="P:System.Windows.PropertyPath.Path" />, in a tokenized format.</span></span></param>
        <param name="pathParameters"><span data-ttu-id="247aa-137">一个设置 <see cref="P:System.Windows.PropertyPath.PathParameters" /> 的对象数组。</span><span class="sxs-lookup"><span data-stu-id="247aa-137">An array of objects that sets the <see cref="P:System.Windows.PropertyPath.PathParameters" />.</span></span></param>
        <summary><span data-ttu-id="247aa-138">使用提供的路径标记字符串和参数初始化 <see cref="T:System.Windows.PropertyPath" /> 类的一个新实例。</span><span class="sxs-lookup"><span data-stu-id="247aa-138">Initializes a new instance of the <see cref="T:System.Windows.PropertyPath" /> class, with the provided pathing token string and parameters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="247aa-139">此签名通常仅用于 <xref:System.Windows.PropertyPath> 具有复杂路径的目标模式用法。</span><span class="sxs-lookup"><span data-stu-id="247aa-139">This signature is generally only used for target-mode <xref:System.Windows.PropertyPath> usages with complex paths.</span></span>  
  
 <span data-ttu-id="247aa-140">此构造函数支持 `params` `pathParameters` 构造函数参数。</span><span class="sxs-lookup"><span data-stu-id="247aa-140">This constructor supports `params` for the `pathParameters` constructor argument.</span></span> <span data-ttu-id="247aa-141">因此，你可以将的内容指定 `pathParameters` 为一系列用逗号分隔的构造函数参数，这些参数可填充数组，而不需要对数组进行维度处理，然后使用项填充它 `pathParameters` 。</span><span class="sxs-lookup"><span data-stu-id="247aa-141">Therefore you can specify the contents of `pathParameters` as a series of comma-separated constructor arguments that populate the array, rather than needing to dimension an array and then populate it with the `pathParameters` items.</span></span> <span data-ttu-id="247aa-142">你指定的每个项必须是以下类型之一： <xref:System.Windows.DependencyProperty> 、 <xref:System.Reflection.PropertyInfo> 、 <xref:System.ComponentModel.PropertyDescriptor> 。</span><span class="sxs-lookup"><span data-stu-id="247aa-142">Each item you specify must be one of the following types: <xref:System.Windows.DependencyProperty>, <xref:System.Reflection.PropertyInfo>, <xref:System.ComponentModel.PropertyDescriptor>.</span></span>  
  
 <span data-ttu-id="247aa-143">有关参数要求的详细信息，请参阅 <xref:System.Windows.PropertyPath.Path%2A> 和 <xref:System.Windows.PropertyPath.PathParameters%2A> 。</span><span class="sxs-lookup"><span data-stu-id="247aa-143">For more information on the requirements of the parameters, see <xref:System.Windows.PropertyPath.Path%2A> and <xref:System.Windows.PropertyPath.PathParameters%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.Windows.PropertyPath.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="247aa-144">获取或设置描述路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="247aa-144">Gets or sets the string that describes the path.</span></span></summary>
        <value><span data-ttu-id="247aa-145">描述路径的字符串。</span><span class="sxs-lookup"><span data-stu-id="247aa-145">The string that describes the path.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="247aa-146">此属性中包含的字符串具有三种完全不同的含义，具体取决于是否 <xref:System.Windows.PropertyPath> 用于绑定的源模式属性路径、演示图板目标的目标模式单步属性路径，或演示图板目标的复杂路径。</span><span class="sxs-lookup"><span data-stu-id="247aa-146">The string contained in this property has three completely different meanings depending on whether a <xref:System.Windows.PropertyPath> is being used for a source-mode property path for a binding, for a target-mode single-step property path for a storyboard target, or for a complex path for a storyboard target.</span></span>  
  
 <span data-ttu-id="247aa-147">如果 <xref:System.Windows.PropertyPath> 在源模式下将此用于绑定， <xref:System.Windows.PropertyPath.Path%2A> 则是表示属性名称的字符串，也可以是一个字符串，该字符串描述要用作 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 绑定源的对象的对象模型中的属性的 "单步执行" 路径。</span><span class="sxs-lookup"><span data-stu-id="247aa-147">If using this <xref:System.Windows.PropertyPath> in source mode for a binding, <xref:System.Windows.PropertyPath.Path%2A> is a string representing a property name, or can be a string that describes a "step-through" path to the property in the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] object model of the object that is being used as the source for a binding.</span></span> <span data-ttu-id="247aa-148">对于绑定属性路径，标识 "step" 的字符是一个点 (。 ) 。</span><span class="sxs-lookup"><span data-stu-id="247aa-148">For a binding property path, the character that identifies a "step" is a dot (.).</span></span> <span data-ttu-id="247aa-149">索引器引用 (包括多个索引器，并且还支持类型区分) 。</span><span class="sxs-lookup"><span data-stu-id="247aa-149">Indexer references (including multiple indexers, and type differentiation) are also supported.</span></span> <span data-ttu-id="247aa-150">有关对象特别使用的字符串语法的更多详细信息 <xref:System.Windows.Data.Binding> ，请参阅 <xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="247aa-150">For more details on the syntax of the string as specifically used by the <xref:System.Windows.Data.Binding> object, see <xref:System.Windows.Data.Binding.Path%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="247aa-151">用作绑定源的属性不需要是依赖属性。</span><span class="sxs-lookup"><span data-stu-id="247aa-151">A property used as a binding source need not be a dependency property.</span></span> <span data-ttu-id="247aa-152">如果绑定双向更新，则属性源必须是读写的。</span><span class="sxs-lookup"><span data-stu-id="247aa-152">If the binding updates two-way, the property source must be read-write.</span></span> <span data-ttu-id="247aa-153">另请注意，绑定目标必须是依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="247aa-153">Also note that the binding target does have to be a dependency property.</span></span> <span data-ttu-id="247aa-154">有关详细信息，请参阅 [数据绑定概述](/dotnet/framework/wpf/data/data-binding-overview)。</span><span class="sxs-lookup"><span data-stu-id="247aa-154">For details, see [Data Binding Overview](/dotnet/framework/wpf/data/data-binding-overview).</span></span>  
  
 <span data-ttu-id="247aa-155">如果 <xref:System.Windows.PropertyPath> 在目标模式下将此用于情节提要目标的单步路径， <xref:System.Windows.PropertyPath> 则是作为 *类型名称*的字符串。*propertyName* 限定的依赖项属性名称字符串。</span><span class="sxs-lookup"><span data-stu-id="247aa-155">If using this <xref:System.Windows.PropertyPath> in target mode for a single-step path for a storyboard target, <xref:System.Windows.PropertyPath> is a string that is a *typeName*.*propertyName* qualified dependency property name string.</span></span>  
  
 <span data-ttu-id="247aa-156">如果将此 <xref:System.Windows.PropertyPath> 用于情节提要目标的复杂路径， <xref:System.Windows.PropertyPath.Path%2A> 则是一种标记化字符串格式，用于描述中给定的各种对象的关系 <xref:System.Windows.PropertyPath.PathParameters%2A> 。</span><span class="sxs-lookup"><span data-stu-id="247aa-156">If using this <xref:System.Windows.PropertyPath> for a complex path for a storyboard target, <xref:System.Windows.PropertyPath.Path%2A> is a tokenized string format that describes the relationships of the various objects given in the <xref:System.Windows.PropertyPath.PathParameters%2A>.</span></span>  
  
-   <span data-ttu-id="247aa-157">使用括在括号中的项的数组索引按此格式指定数组中的每一项。</span><span class="sxs-lookup"><span data-stu-id="247aa-157">Each item in the array is specified in this format by the array index for the item enclosed in parentheses.</span></span> <span data-ttu-id="247aa-158">例如，若要指定数组中的第一项，则字符串标记为 `(0)` 。</span><span class="sxs-lookup"><span data-stu-id="247aa-158">For example, to specify the first item in the array, the string token is `(0)`.</span></span>  
  
-   <span data-ttu-id="247aa-159">路径) 中的项 ( "步骤" 之间的关系由点 ( 指定。 ) 。</span><span class="sxs-lookup"><span data-stu-id="247aa-159">Relationships between items ("steps" in the path) are specified by a dot (.).</span></span> <span data-ttu-id="247aa-160">圆点的属性为路径中的第一步，后面是第二步，依此类推 (你可以指定除两个) 以外的步骤。</span><span class="sxs-lookup"><span data-stu-id="247aa-160">The property forward of the dot is the first step in the path, the property after is the second step, and so on (you can specify steps beyond two).</span></span> <span data-ttu-id="247aa-161">链中的最后一步始终表示正在进行动画处理的属性。</span><span class="sxs-lookup"><span data-stu-id="247aa-161">The last step in the chain always represents the property being animated.</span></span>  
  
-   <span data-ttu-id="247aa-162">集合属性内的项可使用索引器语法进行访问，索引在方括号内 ( [和] ) 。</span><span class="sxs-lookup"><span data-stu-id="247aa-162">Items within collection properties are accessed with an indexer syntax, with the index within square brackets ([ and ]).</span></span> <span data-ttu-id="247aa-163">索引器将附加到表示属性的标记。</span><span class="sxs-lookup"><span data-stu-id="247aa-163">The indexer is additive to the token representing the property.</span></span> <span data-ttu-id="247aa-164">例如，下面是一个两步路径，其标记组合在第一步中，它指定了该属性的集合中的第二个项： `(0)[1].(1)` 。</span><span class="sxs-lookup"><span data-stu-id="247aa-164">For example, the following is a two-step path, with the token combination in the first step specifying the second item from within the collection of that property: `(0)[1].(1)` .</span></span> <span data-ttu-id="247aa-165">不能对链中的最后一个属性使用索引器;不能对实际的集合位置进行动画处理，必须对该对象上的属性进行动画处理。</span><span class="sxs-lookup"><span data-stu-id="247aa-165">You cannot use an indexer on the last property in the chain; you cannot animate the actual collection position, you must animate a property on that object.</span></span>  
  
 <span data-ttu-id="247aa-166"><xref:System.Windows.PropertyPath>通常通过构造函数建立的路径字符串： <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> 用于绑定的签名或单步演示图板目标的签名（ <xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29> 多步骤情节提要目标的签名）。</span><span class="sxs-lookup"><span data-stu-id="247aa-166">The path string for a <xref:System.Windows.PropertyPath> is typically established through the constructors: the <xref:System.Windows.PropertyPath.%23ctor%28System.Object%29> signature for bindings or single-step storyboard targets, the <xref:System.Windows.PropertyPath.%23ctor%28System.String%2CSystem.Object%5B%5D%29> signature for multi-step storyboard targets.</span></span>  
  
 <span data-ttu-id="247aa-167">**XAML：** 当使用 <xref:System.Windows.PropertyPath> 在中描述属性引用时， [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 作为属性值，指定的字符串首先由类型转换器处理 (<xref:System.Windows.PropertyPathConverter>) 。</span><span class="sxs-lookup"><span data-stu-id="247aa-167">**XAML:** When you use a <xref:System.Windows.PropertyPath> to describe a property reference in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], as an attribute value, the string that you specify is first handled by a type converter (<xref:System.Windows.PropertyPathConverter>).</span></span> <span data-ttu-id="247aa-168">然后，此类型转换器将处理字符串，并根据其语法调用 <xref:System.Windows.PropertyPath> 构造函数签名之一。</span><span class="sxs-lookup"><span data-stu-id="247aa-168">This type converter then processes the string and based on its syntax will call one of the <xref:System.Windows.PropertyPath> constructor signatures.</span></span> <span data-ttu-id="247aa-169">通过处理特性值的类型转换器进行的这种间接寻址通常是如何 <xref:System.Windows.PropertyPath> 在中使用 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ，而不是声明 <xref:System.Windows.PropertyPath> 对象元素，然后将特定值应用于和等属性 <xref:System.Windows.PropertyPath.Path%2A> <xref:System.Windows.PropertyPath.PathParameters%2A> 。</span><span class="sxs-lookup"><span data-stu-id="247aa-169">This indirection through the type converter handling an attribute value is generally how you use <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], rather than declaring a <xref:System.Windows.PropertyPath> object element and then applying specific values to attributes such as <xref:System.Windows.PropertyPath.Path%2A> and <xref:System.Windows.PropertyPath.PathParameters%2A>.</span></span> <span data-ttu-id="247aa-170">有关详细信息，请参阅 [PROPERTYPATH XAML 语法](/dotnet/framework/wpf/advanced/propertypath-xaml-syntax)。</span><span class="sxs-lookup"><span data-stu-id="247aa-170">For more information, see [PropertyPath XAML Syntax](/dotnet/framework/wpf/advanced/propertypath-xaml-syntax).</span></span>  
  
<a name="xamlTextUsage_Path"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="247aa-171">XAML 文本用法</span><span class="sxs-lookup"><span data-stu-id="247aa-171">XAML Text Usage</span></span>  
 <span data-ttu-id="247aa-172"><xref:System.Windows.PropertyPath>通常不会在直接语法中设置该类型的成员 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="247aa-172">Members of the <xref:System.Windows.PropertyPath> type are not typically set in a direct [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span> <span data-ttu-id="247aa-173">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="247aa-173">See Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PathParameters">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.Collection&lt;object&gt; PathParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.Collection`1&lt;object&gt; PathParameters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.PropertyPath.PathParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PathParameters As Collection(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ PathParameters { System::Collections::ObjectModel::Collection&lt;System::Object ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PathParameters : System.Collections.ObjectModel.Collection&lt;obj&gt;" Usage="System.Windows.PropertyPath.PathParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.Collection&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="247aa-174">获取要在路径引用索引参数时使用的参数列表。</span><span class="sxs-lookup"><span data-stu-id="247aa-174">Gets the list of parameters to use when the path refers to indexed parameters.</span></span></summary>
        <value><span data-ttu-id="247aa-175">参数列表。</span><span class="sxs-lookup"><span data-stu-id="247aa-175">The parameter list.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="247aa-176">的属性 <xref:System.Windows.PropertyPath> 通常通过构造函数建立。</span><span class="sxs-lookup"><span data-stu-id="247aa-176">The properties for a <xref:System.Windows.PropertyPath> are typically established through the constructors.</span></span> <span data-ttu-id="247aa-177">对于设置 <xref:System.Windows.PropertyPath.PathParameters%2A> ， <xref:System.Windows.PropertyPath.%23ctor%2A> 构造函数特别方便，因为 `pathParameters` 构造函数参数被指定为 `params` ，这意味着不需要创建或标注数组以供构造。</span><span class="sxs-lookup"><span data-stu-id="247aa-177">For setting <xref:System.Windows.PropertyPath.PathParameters%2A>, the <xref:System.Windows.PropertyPath.%23ctor%2A> constructor is particularly convenient because the `pathParameters` constructor argument is designated as `params`, meaning that you do not need to create or dimension an array for construction.</span></span> <span data-ttu-id="247aa-178">只需指定数组的每个成员作为附加参数。</span><span class="sxs-lookup"><span data-stu-id="247aa-178">You simply specify each member of the array as an additional parameter.</span></span>  
  
 <span data-ttu-id="247aa-179">如果作为目标的最终属性是 <xref:System.Windows.Freezable> 类型，则将克隆该值。</span><span class="sxs-lookup"><span data-stu-id="247aa-179">If the final property that is the target is a <xref:System.Windows.Freezable> type, that value will be cloned.</span></span> <span data-ttu-id="247aa-180">有关详细信息，请参阅 [情节提要概述](/dotnet/framework/wpf/graphics-multimedia/storyboards-overview)。</span><span class="sxs-lookup"><span data-stu-id="247aa-180">For details, see [Storyboards Overview](/dotnet/framework/wpf/graphics-multimedia/storyboards-overview).</span></span>  
  
 <span data-ttu-id="247aa-181">属性链的实际计算由情节提要动画机制来执行。</span><span class="sxs-lookup"><span data-stu-id="247aa-181">The actual evaluation of the property chain is performed by the storyboard animation mechanisms.</span></span> <span data-ttu-id="247aa-182">在 <xref:System.Windows.PropertyPath> 级别上，不会执行任何验证来确保路径连接的步骤。</span><span class="sxs-lookup"><span data-stu-id="247aa-182">At the <xref:System.Windows.PropertyPath> level, no validation is performed to make sure that the steps of the path connect at all.</span></span> <span data-ttu-id="247aa-183">例如，可以构造一个具有 <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType> 作为第一步的属性路径， <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=nameWithType> 作为第二个步骤。</span><span class="sxs-lookup"><span data-stu-id="247aa-183">For instance, you can construct a property path that has <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType> as the first step, and <xref:System.Windows.FrameworkElement.FlowDirectionProperty?displayProperty=nameWithType> as the second step.</span></span> <span data-ttu-id="247aa-184">但如果实际应用为目标，则此类属性路径会失败，因为填充的画笔类型没有 <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType> <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="247aa-184">But such a property path would fail if actually applied as a target, because the Brush type that fills <xref:System.Windows.Controls.Control.BackgroundProperty?displayProperty=nameWithType> does not have a <xref:System.Windows.FrameworkElement.FlowDirection%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="247aa-185">无效的属性路径无提示失败。</span><span class="sxs-lookup"><span data-stu-id="247aa-185">Invalid property paths fail silently.</span></span> <span data-ttu-id="247aa-186">有关详细信息，请参阅[情节提要概述](/dotnet/framework/wpf/graphics-multimedia/storyboards-overview)。</span><span class="sxs-lookup"><span data-stu-id="247aa-186">For more information, see [Storyboards Overview](/dotnet/framework/wpf/graphics-multimedia/storyboards-overview).</span></span>  
  
 <span data-ttu-id="247aa-187">**XAML：** 当使用 <xref:System.Windows.PropertyPath> 在中描述属性引用时， [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 作为属性值，指定的字符串首先由类型转换器处理 (<xref:System.Windows.PropertyPathConverter>) 。</span><span class="sxs-lookup"><span data-stu-id="247aa-187">**XAML:** When you use a <xref:System.Windows.PropertyPath> to describe a property reference in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], as an attribute value, the string that you specify is first handled by a type converter (<xref:System.Windows.PropertyPathConverter>).</span></span> <span data-ttu-id="247aa-188">然后，此类型转换器将处理字符串，并根据其语法调用 <xref:System.Windows.PropertyPath> 构造函数签名之一。</span><span class="sxs-lookup"><span data-stu-id="247aa-188">This type converter then processes the string and based on its syntax will call one of the <xref:System.Windows.PropertyPath> constructor signatures.</span></span> <span data-ttu-id="247aa-189">通过处理特性值的类型转换器进行的这种间接寻址通常是如何 <xref:System.Windows.PropertyPath> 在中使用 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ，而不是声明 <xref:System.Windows.PropertyPath> 对象元素，然后将特定值应用于和等属性 <xref:System.Windows.PropertyPath.Path%2A> <xref:System.Windows.PropertyPath.PathParameters%2A> 。</span><span class="sxs-lookup"><span data-stu-id="247aa-189">This indirection through the type converter handling an attribute value is generally how you use <xref:System.Windows.PropertyPath> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], rather than declaring a <xref:System.Windows.PropertyPath> object element and then applying specific values to attributes such as <xref:System.Windows.PropertyPath.Path%2A> and <xref:System.Windows.PropertyPath.PathParameters%2A>.</span></span> <span data-ttu-id="247aa-190">有关详细信息，请参阅 [PROPERTYPATH XAML 语法](/dotnet/framework/wpf/advanced/propertypath-xaml-syntax)。</span><span class="sxs-lookup"><span data-stu-id="247aa-190">For more information, see [PropertyPath XAML Syntax](/dotnet/framework/wpf/advanced/propertypath-xaml-syntax).</span></span>  
  
<a name="xamlTextUsage_PathParameters"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="247aa-191">XAML 文本用法</span><span class="sxs-lookup"><span data-stu-id="247aa-191">XAML Text Usage</span></span>  
 <span data-ttu-id="247aa-192"><xref:System.Windows.PropertyPath>通常不会在直接语法中设置该类型的成员 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="247aa-192">Members of the <xref:System.Windows.PropertyPath> type are not typically set in a direct [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax.</span></span> <span data-ttu-id="247aa-193">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="247aa-193">See Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
