<Type Name="FrameworkElement" FullName="System.Windows.FrameworkElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9f75bfa5cde108be6ef82b0ffc2cffaf3006ba10" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83901300" /></Metadata><TypeSignature Language="C#" Value="public class FrameworkElement : System.Windows.UIElement, System.ComponentModel.ISupportInitialize, System.Windows.IFrameworkInputElement, System.Windows.Markup.IQueryAmbient" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FrameworkElement extends System.Windows.UIElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement, class System.Windows.Markup.IQueryAmbient" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkElement" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkElement&#xA;Inherits UIElement&#xA;Implements IFrameworkInputElement, IQueryAmbient, ISupportInitialize" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkElement : System::Windows::UIElement, System::ComponentModel::ISupportInitialize, System::Windows::IFrameworkInputElement, System::Windows::Markup::IQueryAmbient" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type FrameworkElement = class&#xA;    inherit UIElement&#xA;    interface ISupportInitialize&#xA;    interface IFrameworkInputElement&#xA;    interface IInputElement&#xA;    interface IQueryAmbient" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="C#" Value="public class FrameworkElement : System.Windows.UIElement, System.ComponentModel.ISupportInitialize, System.Windows.IFrameworkInputElement" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FrameworkElement extends System.Windows.UIElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkElement&#xA;Inherits UIElement&#xA;Implements IFrameworkInputElement, ISupportInitialize" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkElement : System::Windows::UIElement, System::ComponentModel::ISupportInitialize, System::Windows::IFrameworkInputElement" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="F#" Value="type FrameworkElement = class&#xA;    inherit UIElement&#xA;    interface IFrameworkInputElement&#xA;    interface IInputElement&#xA;    interface ISupportInitialize" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FrameworkElement extends System.Windows.UIElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement, class System.Windows.Markup.IQueryAmbient" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type FrameworkElement = class&#xA;    inherit UIElement&#xA;    interface IFrameworkInputElement&#xA;    interface IInputElement&#xA;    interface ISupportInitialize&#xA;    interface IQueryAmbient" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.UIElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IFrameworkInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.RuntimeNameProperty("Name")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.UsableDuringInitialization(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.XmlLangProperty("Language")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.StyleTypedProperty(Property="FocusVisualStyle", StyleTargetType=typeof(System.Windows.Controls.Control))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="9a084-101">提供 Windows Presentation Foundation (WPF) 元素的属性、事件和方法的 WPF 框架级别集。</span><span class="sxs-lookup"><span data-stu-id="9a084-101">Provides a WPF framework-level set of properties, events, and methods for Windows Presentation Foundation (WPF) elements.</span></span> <span data-ttu-id="9a084-102">此类表示所提供的 WPF 框架级别实现基于 <see cref="T:System.Windows.UIElement" /> 定义的 WPF 核心级别 API。</span><span class="sxs-lookup"><span data-stu-id="9a084-102">This class represents the provided WPF framework-level implementation that is built on the WPF core-level APIs that are defined by <see cref="T:System.Windows.UIElement" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-103"><xref:System.Windows.FrameworkElement> 是 WPF 框架级别的元素类与 WPF core 级别的 <xref:System.Windows.UIElement> 表示服务之间的连接点。</span><span class="sxs-lookup"><span data-stu-id="9a084-103"><xref:System.Windows.FrameworkElement> is the connecting point between WPF framework-level element classes and the WPF core-level set of <xref:System.Windows.UIElement> presentation services.</span></span> <span data-ttu-id="9a084-104">有关这些概念的详细信息，请参阅[WPF 体系结构](/dotnet/framework/wpf/advanced/wpf-architecture)。</span><span class="sxs-lookup"><span data-stu-id="9a084-104">For more information about these concepts, see [WPF Architecture](/dotnet/framework/wpf/advanced/wpf-architecture).</span></span>  
  
 <span data-ttu-id="9a084-105"><xref:System.Windows.FrameworkElement> 扩展 <xref:System.Windows.UIElement> 并添加以下功能：</span><span class="sxs-lookup"><span data-stu-id="9a084-105"><xref:System.Windows.FrameworkElement> extends <xref:System.Windows.UIElement> and adds the following capabilities:</span></span>  
  
-   <span data-ttu-id="9a084-106">**布局系统定义**： <xref:System.Windows.FrameworkElement> 为在 <xref:System.Windows.UIElement>中定义为虚拟成员的某些方法提供特定的 WPF 框架级实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-106">**Layout system definition**: <xref:System.Windows.FrameworkElement> provides specific WPF framework-level implementations for certain methods that were defined as virtual members in  <xref:System.Windows.UIElement>.</span></span> <span data-ttu-id="9a084-107">最值得注意的是，<xref:System.Windows.FrameworkElement> 密封了某些 WPF 核心级别的布局重写，而是提供了一个 WPF 框架级别等效项，派生类应改为重写。</span><span class="sxs-lookup"><span data-stu-id="9a084-107">Most notably, <xref:System.Windows.FrameworkElement> seals certain WPF core-level layout overrides, and instead provides a WPF framework-level equivalent that derived classes should override instead.</span></span> <span data-ttu-id="9a084-108">例如，<xref:System.Windows.FrameworkElement> 密封 <xref:System.Windows.UIElement.ArrangeCore%2A> 但提供 <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-108">For example, <xref:System.Windows.FrameworkElement> seals <xref:System.Windows.UIElement.ArrangeCore%2A> but provides <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.</span></span> <span data-ttu-id="9a084-109">这些更改反映了这样一个事实：在 WPF 框架级别，有一个完全布局系统可呈现任何 <xref:System.Windows.FrameworkElement> 派生类。</span><span class="sxs-lookup"><span data-stu-id="9a084-109">These changes reflect the fact that at the WPF framework-level there is a full layout system in place that can render any <xref:System.Windows.FrameworkElement> derived class.</span></span> <span data-ttu-id="9a084-110">在 WPF 核心级别，将构造基于常规 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 的布局解决方案的某些成员是就地的，但布局系统的实际引擎并未定义。</span><span class="sxs-lookup"><span data-stu-id="9a084-110">At the WPF core level, certain members that will structure a general [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] based layout solution are in place, but the actual engine of the layout system is not defined.</span></span> <span data-ttu-id="9a084-111">请参阅[布局](/dotnet/framework/wpf/advanced/layout)以了解详细信息。</span><span class="sxs-lookup"><span data-stu-id="9a084-111">For more information, see [Layout](/dotnet/framework/wpf/advanced/layout).</span></span>  
  
-   <span data-ttu-id="9a084-112">**逻辑树：** 一般的 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 编程模型通常以元素树的形式表示。</span><span class="sxs-lookup"><span data-stu-id="9a084-112">**The logical tree:** The general [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] programming model is often expressed in terms of being a tree of elements.</span></span> <span data-ttu-id="9a084-113">支持将元素树表示为逻辑树，并支持在标记中定义该树在 <xref:System.Windows.FrameworkElement> 级别实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-113">Support for expressing the tree of elements as a logical tree, and accompanying support for defining that tree in markup is implemented at the <xref:System.Windows.FrameworkElement> level.</span></span> <span data-ttu-id="9a084-114">但请注意，<xref:System.Windows.FrameworkElement> 特意不定义内容模型，而是将此责任留给派生类。</span><span class="sxs-lookup"><span data-stu-id="9a084-114">Note however that <xref:System.Windows.FrameworkElement> deliberately does not define a content model, and leaves that responsibility to derived classes.</span></span> <span data-ttu-id="9a084-115">有关详细信息，请参见 [WPF 中的树](/dotnet/framework/wpf/advanced/trees-in-wpf)。</span><span class="sxs-lookup"><span data-stu-id="9a084-115">For more information, see [Trees in WPF](/dotnet/framework/wpf/advanced/trees-in-wpf).</span></span>  
  
-   <span data-ttu-id="9a084-116">**对象生存期事件：** 通常，知道何时初始化元素（调用构造函数）或将元素首次加载到逻辑树中。</span><span class="sxs-lookup"><span data-stu-id="9a084-116">**Object lifetime events:** It is often useful to know when an element is initialized (the constructor is called) or when the element is first loaded into a logical tree.</span></span> <span data-ttu-id="9a084-117"><xref:System.Windows.FrameworkElement> 定义了一些与对象生存期相关的事件，这些事件为涉及元素的代码隐藏操作提供有用的挂钩，如添加更多的子元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-117"><xref:System.Windows.FrameworkElement> defines several events related to object lifetime that provide useful hooks for code-behind operations that involve elements, such as adding more child elements.</span></span> <span data-ttu-id="9a084-118">有关详细信息，请参阅[对象生存期事件](/dotnet/framework/wpf/advanced/object-lifetime-events)。</span><span class="sxs-lookup"><span data-stu-id="9a084-118">For more information, see [Object Lifetime Events](/dotnet/framework/wpf/advanced/object-lifetime-events).</span></span>  
  
-   <span data-ttu-id="9a084-119">**数据绑定和动态资源引用支持：** 数据绑定和资源的属性级别支持由 <xref:System.Windows.DependencyProperty> 类实现并在属性系统中使用，但是，解析存储为 <xref:System.Windows.Expression> 的成员值（编程构造是数据绑定和动态资源）的能力由 <xref:System.Windows.FrameworkElement>实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-119">**Support for data binding and dynamic resource references:** The property-level support for data binding and resources is implemented by the <xref:System.Windows.DependencyProperty> class and embodied in the property system, but the ability to resolve a member value that is stored as an <xref:System.Windows.Expression> (the programming construct that underlies both data binding and dynamic resources) is implemented by <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="9a084-120">有关详细信息，请参阅[数据绑定概述](/dotnet/framework/wpf/data/data-binding-overview)和[XAML 资源](/dotnet/framework/wpf/advanced/xaml-resources)。</span><span class="sxs-lookup"><span data-stu-id="9a084-120">For more information, see [Data Binding Overview](/dotnet/framework/wpf/data/data-binding-overview) and [XAML Resources](/dotnet/framework/wpf/advanced/xaml-resources).</span></span>  
  
-   <span data-ttu-id="9a084-121">**样式：** <xref:System.Windows.FrameworkElement> 定义 <xref:System.Windows.FrameworkElement.Style%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-121">**Styles:** <xref:System.Windows.FrameworkElement> defines the <xref:System.Windows.FrameworkElement.Style%2A> property.</span></span> <span data-ttu-id="9a084-122">但是，<xref:System.Windows.FrameworkElement> 尚未定义对模板的支持，或不支持修饰器。</span><span class="sxs-lookup"><span data-stu-id="9a084-122">However, <xref:System.Windows.FrameworkElement> does not yet define support for templates, or support decorators.</span></span> <span data-ttu-id="9a084-123">这些功能由控件类（如 <xref:System.Windows.Controls.Control> 和 <xref:System.Windows.Controls.ContentControl>）引入。</span><span class="sxs-lookup"><span data-stu-id="9a084-123">These features are introduced by control classes such as <xref:System.Windows.Controls.Control> and <xref:System.Windows.Controls.ContentControl>.</span></span>  
  
-   <span data-ttu-id="9a084-124">**更多动画支持：** 某些动画支持已在 WPF 核心级别进行了定义，但 <xref:System.Windows.FrameworkElement> 通过实现 <xref:System.Windows.FrameworkElement.BeginStoryboard%2A> 和相关成员对此进行了扩展。</span><span class="sxs-lookup"><span data-stu-id="9a084-124">**More animation support:** Some animation support was already defined at the WPF core level, but <xref:System.Windows.FrameworkElement> extends this by implementing <xref:System.Windows.FrameworkElement.BeginStoryboard%2A> and related members.</span></span>  
  
 <span data-ttu-id="9a084-125">从类层次结构中可以看出，许多 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 类直接或通过中间基类（如 <xref:System.Windows.Controls.Panel> 或 <xref:System.Windows.Controls.Control>）派生自 <xref:System.Windows.FrameworkElement>。</span><span class="sxs-lookup"><span data-stu-id="9a084-125">As can be seen from the class hierarchy, many [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] classes derive from <xref:System.Windows.FrameworkElement>, either directly or through intermediate base classes such as <xref:System.Windows.Controls.Panel> or <xref:System.Windows.Controls.Control>.</span></span>  
  
 <span data-ttu-id="9a084-126">如果要使用 <xref:System.Windows.FrameworkElement> 作为基类，则可能需要首先检查现有的派生类。</span><span class="sxs-lookup"><span data-stu-id="9a084-126">If you intend to use <xref:System.Windows.FrameworkElement> as a base class, you might want to first examine the existing derived classes.</span></span> <span data-ttu-id="9a084-127"><xref:System.Windows.FrameworkElement> 提供了对许多基本方案的支持，但对于在 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)]中创建 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 的构建基块而言，还缺少一些需要用于 "元素" 的功能。</span><span class="sxs-lookup"><span data-stu-id="9a084-127"><xref:System.Windows.FrameworkElement> provides support for a number of basic scenarios, but also lacks a number of features that are desirable for an "element" in the sense of a building block that you use to create [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)].</span></span> <span data-ttu-id="9a084-128">例如，<xref:System.Windows.FrameworkElement> 不定义任何真正的内容模型;作为基类 <xref:System.Windows.FrameworkElement> 不定义可创建 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 子元素的属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-128">For instance, a <xref:System.Windows.FrameworkElement> does not define any true content model; <xref:System.Windows.FrameworkElement> as a base class does not define a property that can create [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] child elements.</span></span> <span data-ttu-id="9a084-129">特别是，您可能需要查看 <xref:System.Windows.Controls.Control> 和 <xref:System.Windows.Controls.ContentControl>。</span><span class="sxs-lookup"><span data-stu-id="9a084-129">In particular, you might want to look at <xref:System.Windows.Controls.Control> and <xref:System.Windows.Controls.ContentControl>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.FrameworkContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a084-130">初始化 <see cref="T:System.Windows.FrameworkElement" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="9a084-130">Initializes a new instance of the <see cref="T:System.Windows.FrameworkElement" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeight">
      <MemberSignature Language="C#" Value="public double ActualHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualHeight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualHeight { double get(); };" />
      <MemberSignature Language="F#" Value="member this.ActualHeight : double" Usage="System.Windows.FrameworkElement.ActualHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-131">获取此元素的呈现高度。</span><span class="sxs-lookup"><span data-stu-id="9a084-131">Gets the rendered height of this element.</span></span></summary>
        <value><span data-ttu-id="9a084-132">元素的高度，这是一个采用[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]的值。</span><span class="sxs-lookup"><span data-stu-id="9a084-132">The element's height, as a value in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="9a084-133">默认值为 0（零）。</span><span class="sxs-lookup"><span data-stu-id="9a084-133">The default value is 0 (zero).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-134">此属性是基于其他高度输入和布局系统的计算值。</span><span class="sxs-lookup"><span data-stu-id="9a084-134">This property is a calculated value based on other height inputs, and the layout system.</span></span> <span data-ttu-id="9a084-135">该值是由布局系统本身基于实际呈现处理方式设置的，因此可能会略微滞后于属性的设置值，例如 <xref:System.Windows.FrameworkElement.Height%2A> 作为输入更改的基础。</span><span class="sxs-lookup"><span data-stu-id="9a084-135">The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as <xref:System.Windows.FrameworkElement.Height%2A> that are the basis of the input change.</span></span>  
  
 <span data-ttu-id="9a084-136">由于 <xref:System.Windows.FrameworkElement.ActualHeight%2A> 是一个计算值，因此你应该注意到，它可能会对其进行多个或增量报告的更改，作为布局系统的各种操作的结果。</span><span class="sxs-lookup"><span data-stu-id="9a084-136">Because <xref:System.Windows.FrameworkElement.ActualHeight%2A> is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.</span></span> <span data-ttu-id="9a084-137">布局系统可能会计算子元素所需的测量空间、父元素的约束等。</span><span class="sxs-lookup"><span data-stu-id="9a084-137">The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.</span></span>  
  
 <span data-ttu-id="9a084-138">尽管不能从 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]设置此属性，但可以根据样式中的值来设置 <xref:System.Windows.Trigger>。</span><span class="sxs-lookup"><span data-stu-id="9a084-138">Although you cannot set this property from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], you can base a <xref:System.Windows.Trigger> upon its value in a style.</span></span>  
  
<a name="dependencyPropertyInfo_ActualHeight"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-139">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-139">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-140">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-140">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ActualHeightProperty>|  
|<span data-ttu-id="9a084-141">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-141">Metadata properties set to `true`</span></span>|<span data-ttu-id="9a084-142">无</span><span class="sxs-lookup"><span data-stu-id="9a084-142">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9a084-143">下面的示例显示了各种高度属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-143">The following example displays various height properties.</span></span>  
  
 [!code-csharp[HeightMinHeightMaxHeight#3](~/samples/snippets/csharp/VS_Snippets_Wpf/HeightMinHeightMaxHeight/CSharp/Window1.xaml.cs#3)]
 [!code-vb[HeightMinHeightMaxHeight#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/HeightMinHeightMaxHeight/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ActualHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ActualHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-144">标识 <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-144">Identifies the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidth">
      <MemberSignature Language="C#" Value="public double ActualWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 ActualWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ActualWidth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActualWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double ActualWidth { double get(); };" />
      <MemberSignature Language="F#" Value="member this.ActualWidth : double" Usage="System.Windows.FrameworkElement.ActualWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-145">获取此元素的呈现宽度。</span><span class="sxs-lookup"><span data-stu-id="9a084-145">Gets the rendered width of this element.</span></span></summary>
        <value><span data-ttu-id="9a084-146">元素的宽度，这是一个采用[!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]的值。</span><span class="sxs-lookup"><span data-stu-id="9a084-146">The element's width, as a value in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="9a084-147">默认值为 0（零）。</span><span class="sxs-lookup"><span data-stu-id="9a084-147">The default value is 0 (zero).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-148">此属性是基于其他宽度输入和布局系统的计算值。</span><span class="sxs-lookup"><span data-stu-id="9a084-148">This property is a calculated value based on other width inputs, and the layout system.</span></span> <span data-ttu-id="9a084-149">该值是由布局系统本身基于实际呈现处理方式设置的，因此可能会略微滞后于属性的设置值，例如 <xref:System.Windows.FrameworkElement.Width%2A> 作为输入更改的基础。</span><span class="sxs-lookup"><span data-stu-id="9a084-149">The value is set by the layout system itself, based on an actual rendering pass, and may therefore lag slightly behind the set value of properties such as <xref:System.Windows.FrameworkElement.Width%2A> that are the basis of the input change.</span></span>  
  
 <span data-ttu-id="9a084-150">由于 <xref:System.Windows.FrameworkElement.ActualWidth%2A> 是一个计算值，因此你应该注意到，它可能会对其进行多个或增量报告的更改，作为布局系统的各种操作的结果。</span><span class="sxs-lookup"><span data-stu-id="9a084-150">Because <xref:System.Windows.FrameworkElement.ActualWidth%2A> is a calculated value, you should be aware that there could be multiple or incremental reported changes to it as a result of various operations by the layout system.</span></span> <span data-ttu-id="9a084-151">布局系统可能会计算子元素所需的测量空间、父元素的约束等。</span><span class="sxs-lookup"><span data-stu-id="9a084-151">The layout system may be calculating required measure space for child elements, constraints by the parent element, and so on.</span></span>  
  
 <span data-ttu-id="9a084-152">尽管不能从 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]设置此属性，但可以根据样式中的值来设置 <xref:System.Windows.Trigger>。</span><span class="sxs-lookup"><span data-stu-id="9a084-152">Although you cannot set this property from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], you can base a <xref:System.Windows.Trigger> upon its value in a style.</span></span>  
  
<a name="dependencyPropertyInfo_ActualWidth"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-153">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-153">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-154">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-154">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ActualWidthProperty>|  
|<span data-ttu-id="9a084-155">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-155">Metadata properties set to `true`</span></span>|<span data-ttu-id="9a084-156">无</span><span class="sxs-lookup"><span data-stu-id="9a084-156">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9a084-157">下面的示例显示了各种宽度属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-157">The following example displays various width properties.</span></span>  
  
 [!code-csharp[WidthMinWidthMaxWidth#3](~/samples/snippets/csharp/VS_Snippets_Wpf/WidthMinWidthMaxWidth/CSharp/Window1.xaml.cs#3)]
 [!code-vb[WidthMinWidthMaxWidth#3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WidthMinWidthMaxWidth/VisualBasic/Window1.xaml.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActualWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ActualWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ActualWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ActualWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ActualWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ActualWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ActualWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-158">标识 <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-158">Identifies the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void AddLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AddLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.AddLogicalChild : obj -&gt; unit" Usage="frameworkElement.AddLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child"><span data-ttu-id="9a084-159">要添加的子元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-159">Child element to be added.</span></span></param>
        <summary><span data-ttu-id="9a084-160">将提供的对象添加到此元素的逻辑树。</span><span class="sxs-lookup"><span data-stu-id="9a084-160">Adds the provided object to the logical tree of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-161">使用此方法可实现对象的集合，这些对象表示元素的逻辑子元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-161">Use this method for the implementation of collections on objects that represent logical child elements of an element.</span></span> <span data-ttu-id="9a084-162">子元素集合的集合维护可以在属性 getter 或 setter 中完成，也可以在更改事件、构造函数或集合类型本身的类处理中完成。</span><span class="sxs-lookup"><span data-stu-id="9a084-162">Collection maintenance for child element collections might be done in property getters or setters, class handling of Changed events, constructors, or within the collection types themselves.</span></span>  
  
 <span data-ttu-id="9a084-163">对于控件作者，不建议在此级别操作逻辑树，除非可用基控件类的任何内容模型都适用于控件方案。</span><span class="sxs-lookup"><span data-stu-id="9a084-163">For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the content models for available base control classes are appropriate for your control scenario.</span></span> <span data-ttu-id="9a084-164">请考虑在 <xref:System.Windows.Controls.ContentControl>、<xref:System.Windows.Controls.ItemsControl>和 <xref:System.Windows.Controls.HeaderedItemsControl>级别进行子类化。</span><span class="sxs-lookup"><span data-stu-id="9a084-164">Consider subclassing at the level of <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, and <xref:System.Windows.Controls.HeaderedItemsControl>.</span></span> <span data-ttu-id="9a084-165">这些类提供了一个内容模型，其中包含通过专用 Api 特定的逻辑树子元素强制，并支持在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 控件（例如通过模板设置样式）中通常需要的其他功能。</span><span class="sxs-lookup"><span data-stu-id="9a084-165">These classes provide a content model with particular enforcement of logical tree child elements through dedicated APIs, as well as support for other features typically desirable in a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] control such as styling through templates.</span></span> <span data-ttu-id="9a084-166">有关如何使用 <xref:System.Windows.FrameworkElement.LogicalChildren%2A> 和 <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>的详细信息，请参阅[WPF 中的树](/dotnet/framework/wpf/advanced/trees-in-wpf)。</span><span class="sxs-lookup"><span data-stu-id="9a084-166">For more information on how to use <xref:System.Windows.FrameworkElement.LogicalChildren%2A> and <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, see [Trees in WPF](/dotnet/framework/wpf/advanced/trees-in-wpf).</span></span>  
  
 <span data-ttu-id="9a084-167">如果在另一个进程循环访问逻辑树时调用，则 <xref:System.Windows.FrameworkElement.AddLogicalChild%2A> 可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-167"><xref:System.Windows.FrameworkElement.AddLogicalChild%2A> may throw an exception if called at a time when the logical tree is being iterated by another process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a084-168">下面的示例实现自定义 <xref:System.Windows.FrameworkElement> 上的 `Child` 属性，该属性执行其自己的可视化层实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-168">The following example implements a `Child` property on a custom <xref:System.Windows.FrameworkElement> that does its own visual layer implementation.</span></span> <span data-ttu-id="9a084-169">属性 setter 设计为这样，如果值发生更改，则会从逻辑树中删除旧值，并从特定于类的视觉对象集合中删除旧值。</span><span class="sxs-lookup"><span data-stu-id="9a084-169">The property setter is designed so that if the value changes, the old value is removed from the logical tree, as well as a class-specific visual collection.</span></span> <span data-ttu-id="9a084-170">将缓存属性值，然后将新值添加到逻辑树和自定义视觉对象集合中。</span><span class="sxs-lookup"><span data-stu-id="9a084-170">The property value is cached, and then the new value is added to both the logical tree and the custom visual collection.</span></span>  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyTemplate">
      <MemberSignature Language="C#" Value="public bool ApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyTemplate () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ApplyTemplate();" />
      <MemberSignature Language="F#" Value="member this.ApplyTemplate : unit -&gt; bool" Usage="frameworkElement.ApplyTemplate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a084-171">在必要时生成当前模板的可视化树，然后返回一个值，该值指示可视化树是否由此调用重新生成。</span><span class="sxs-lookup"><span data-stu-id="9a084-171">Builds the current template's visual tree if necessary, and returns a value that indicates whether the visual tree was rebuilt by this call.</span></span></summary>
        <returns><span data-ttu-id="9a084-172">如果在树中添加了视觉对象，则返回 <see langword="true" />；否则返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-172"><see langword="true" /> if visuals were added to the tree; returns <see langword="false" /> otherwise.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-173">应用程序可以调用此方法以确保元素的可视化树已完成。</span><span class="sxs-lookup"><span data-stu-id="9a084-173">Applications can call this method to guarantee that the visual tree of an element is complete.</span></span> <span data-ttu-id="9a084-174">如果代码要检查树中的子元素，则此保证步骤可能是必需的。</span><span class="sxs-lookup"><span data-stu-id="9a084-174">This guarantee step might be necessary if code will be checking the child elements in the tree.</span></span> <span data-ttu-id="9a084-175">对于应用程序中的典型元素逻辑，不需要调用 <xref:System.Windows.FrameworkElement.ApplyTemplate%2A>，因为模板会自动应用到其生存期中相应点的元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-175">For typical element logic within applications, calling <xref:System.Windows.FrameworkElement.ApplyTemplate%2A> is not necessary, because templates will be applied to elements at an appropriate point in their lifetimes automatically.</span></span>  
  
 <span data-ttu-id="9a084-176">WPF 框架级别布局系统对每个度量值调用 <xref:System.Windows.FrameworkElement.ApplyTemplate%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-176"><xref:System.Windows.FrameworkElement.ApplyTemplate%2A> is called on every Measure pass by the WPF framework-level layout system.</span></span>  
  
 <span data-ttu-id="9a084-177"><xref:System.Windows.FrameworkElement> 派生类可以使用 <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> 类处理程序，以便在显式调用此方法或布局系统的情况下获得通知。</span><span class="sxs-lookup"><span data-stu-id="9a084-177"><xref:System.Windows.FrameworkElement> derived classes can use the <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> class handler to be notified of cases where this method was called explicitly, or by the layout system.</span></span> <span data-ttu-id="9a084-178">在完整生成模板并将其附加到逻辑树后，调用 <xref:System.Windows.FrameworkElement.OnApplyTemplate%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-178"><xref:System.Windows.FrameworkElement.OnApplyTemplate%2A> is called after the template is completely generated and attached to the logical tree.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ControlTemplate" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeCore">
      <MemberSignature Language="C#" Value="protected override sealed void ArrangeCore (System.Windows.Rect finalRect);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ArrangeCore(valuetype System.Windows.Rect finalRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub ArrangeCore (finalRect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ArrangeCore(System::Windows::Rect finalRect);" />
      <MemberSignature Language="F#" Value="override this.ArrangeCore : System.Windows.Rect -&gt; unit" Usage="frameworkElement.ArrangeCore finalRect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalRect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="finalRect"><span data-ttu-id="9a084-179">父级中应使用此元素排列自身及其子元素的最终区域。</span><span class="sxs-lookup"><span data-stu-id="9a084-179">The final area within the parent that this element should use to arrange itself and its children.</span></span></param>
        <summary><span data-ttu-id="9a084-180">实现 <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" />（在 <see cref="T:System.Windows.UIElement" /> 中定义为虚拟对象）并密封实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-180">Implements <see cref="M:System.Windows.UIElement.ArrangeCore(System.Windows.Rect)" /> (defined as virtual in <see cref="T:System.Windows.UIElement" />) and seals the implementation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-181">此方法是密封的。</span><span class="sxs-lookup"><span data-stu-id="9a084-181">This method is sealed.</span></span> <span data-ttu-id="9a084-182">为了在自定义元素中替代元素布局的排列处理过程的逻辑，您的 <xref:System.Windows.FrameworkElement> 派生类必须重写 <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-182">In order to override the logic in your custom element specifically for the arrange pass of element layout, your <xref:System.Windows.FrameworkElement> derived class must override <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size ArrangeOverride (System.Windows.Size finalSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size ArrangeOverride(valuetype System.Windows.Size finalSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ArrangeOverride (finalSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size ArrangeOverride(System::Windows::Size finalSize);" />
      <MemberSignature Language="F#" Value="abstract member ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.ArrangeOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.ArrangeOverride finalSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="finalSize"><span data-ttu-id="9a084-183">父级中应使用此元素排列自身及其子元素的最终区域。</span><span class="sxs-lookup"><span data-stu-id="9a084-183">The final area within the parent that this element should use to arrange itself and its children.</span></span></param>
        <summary><span data-ttu-id="9a084-184">在派生类中重写时，为 <see cref="T:System.Windows.FrameworkElement" /> 派生类定位子元素并确定大小。</span><span class="sxs-lookup"><span data-stu-id="9a084-184">When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.</span></span></summary>
        <returns><span data-ttu-id="9a084-185">使用的实际大小。</span><span class="sxs-lookup"><span data-stu-id="9a084-185">The actual size used.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9a084-186">要自定义布局处理过程的控件作者应重写此方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-186">Control authors who want to customize the arrange pass of layout processing should override this method.</span></span> <span data-ttu-id="9a084-187">实现模式应在每个可见的子元素上调用 <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />，并为每个子元素传递最终所需大小作为 <paramref name="finalRect" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="9a084-187">The implementation pattern should call <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on each visible child element, and pass the final desired size for each child element as the <paramref name="finalRect" /> parameter.</span></span> <span data-ttu-id="9a084-188">父元素应该对每个子元素调用 <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />，否则不会呈现子元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-188">Parent elements should call <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on each child, otherwise the child elements will not be rendered.</span></span>  
  
<span data-ttu-id="9a084-189">许多派生类提供此方法的实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-189">Many derived classes offer implementations of this method.</span></span> <span data-ttu-id="9a084-190">主要包括： <see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />、<see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" /> 和 <see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-190">Prominent ones include: <see cref="M:System.Windows.Window.ArrangeOverride(System.Windows.Size)" />, <see cref="M:System.Windows.Controls.Page.ArrangeOverride(System.Windows.Size)" /> and <see cref="M:System.Windows.Controls.Control.ArrangeOverride(System.Windows.Size)" />.</span></span></para></block>
        <altmember cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="frameworkElement.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a084-191">启动此元素的初始化过程。</span><span class="sxs-lookup"><span data-stu-id="9a084-191">Starts the initialization process for this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-192">如果要以不公开或将元素连接到任何元素树的方式对其进行调整，则可以对单个元素调用此方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-192">You can call this method on individual elements if you are adjusting them in ways that do not yet expose or connect the element to any element tree.</span></span> <span data-ttu-id="9a084-193">例如，你可能已经创建了一个新的 <xref:System.Windows.FrameworkElement>，但尚未将其附加到任何逻辑树。</span><span class="sxs-lookup"><span data-stu-id="9a084-193">For instance, you might have created a new <xref:System.Windows.FrameworkElement>, but have not yet attached it to any logical tree.</span></span> <span data-ttu-id="9a084-194">或者，逻辑树（其中元素是其中的子元素）可能未连接到应用程序的窗口或页面。</span><span class="sxs-lookup"><span data-stu-id="9a084-194">Or, the logical tree where your element is a child element within it might not be connected to a window or page of the application.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9a084-195">实现此方法可提供在元素加载过程中初始化元素之前应发生的特殊处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-195">Implement this method to provide special handling that should happen before your element is initialized during the element loading process.</span></span>  
  
<span data-ttu-id="9a084-196">你的实现应调用基实现，因为基（默认）实现设置了一些内部标志来跟踪初始化。</span><span class="sxs-lookup"><span data-stu-id="9a084-196">Your implementation should call the base implementation, because the base (default) implementation sets some internal flags to keep track of initialization.</span></span> <span data-ttu-id="9a084-197">一种可能的实现方法是使用此方法作为挂钩到你自己的私有类初始化例程，这些例程尚未由构造函数启用。</span><span class="sxs-lookup"><span data-stu-id="9a084-197">One possible implementation is to use this method as a hook into your own private class initialization routines that are not already enabled by constructors.</span></span>  
  
<span data-ttu-id="9a084-198">如果在调用 <see cref="M:System.Windows.FrameworkElement.EndInit" /> 之前对同一元素多次调用 <see cref="M:System.Windows.FrameworkElement.BeginInit" />，则基实现将引发异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-198">The base implementation will throw an exception if <see cref="M:System.Windows.FrameworkElement.BeginInit" /> is called more than one time on the same element prior to <see cref="M:System.Windows.FrameworkElement.EndInit" /> being called.</span></span></para></block>
        <altmember cref="M:System.Windows.FrameworkElement.EndInit" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginStoryboard">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a084-199">开始所提供的演示图板中包含的操作序列。</span><span class="sxs-lookup"><span data-stu-id="9a084-199">Begins the sequence of actions contained in the provided storyboard.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginStoryboard (storyboard As Storyboard)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard -&gt; unit" Usage="frameworkElement.BeginStoryboard storyboard" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
      </Parameters>
      <Docs>
        <param name="storyboard"><span data-ttu-id="9a084-200">要开始的演示图板。</span><span class="sxs-lookup"><span data-stu-id="9a084-200">The storyboard to begin.</span></span></param>
        <summary><span data-ttu-id="9a084-201">开始所提供的演示图板中包含的操作序列。</span><span class="sxs-lookup"><span data-stu-id="9a084-201">Begins the sequence of actions that are contained in the provided storyboard.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-202">最典型的动画方案不使用此方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-202">Most typical animation scenarios do not use this method.</span></span> <span data-ttu-id="9a084-203">通常，您将在标记中创建 <xref:System.Windows.Media.Animation.Storyboard> 或 <xref:System.Windows.Media.Animation.BeginStoryboard> 元素，然后将它们放置为元素上的 <xref:System.Windows.EventTrigger> 内容。</span><span class="sxs-lookup"><span data-stu-id="9a084-203">Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element.</span></span> <span data-ttu-id="9a084-204">当事件触发时，动画将运行。</span><span class="sxs-lookup"><span data-stu-id="9a084-204">When triggered by the event, the animation then runs.</span></span> <span data-ttu-id="9a084-205"><xref:System.Windows.Media.Animation.Storyboard> 的大部分控制方面都可以通过在标记中公开的属性进行寻址。</span><span class="sxs-lookup"><span data-stu-id="9a084-205">Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.</span></span>  
  
 <span data-ttu-id="9a084-206">对于不使用 `isControllable`、参数或指定该参数的签名 `false`，一旦动画达到 "填充" 时间段，就会删除与动画关联的时间线时钟。</span><span class="sxs-lookup"><span data-stu-id="9a084-206">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</span></span> <span data-ttu-id="9a084-207">因此，不能在运行后重新启动动画。</span><span class="sxs-lookup"><span data-stu-id="9a084-207">Therefore the animation cannot be restarted after running once.</span></span> <span data-ttu-id="9a084-208">控制动画还要求情节提要具有[X：Name 指令](/dotnet/framework/xaml-services/x-name-directive)或可通过代码中的引用进行访问。</span><span class="sxs-lookup"><span data-stu-id="9a084-208">Controlling an animation also requires that the storyboard have an [x:Name Directive](/dotnet/framework/xaml-services/x-name-directive) or be accessible by reference in code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a084-209">下面的示例从资源中检索 <xref:System.Windows.Media.Animation.Storyboard>，然后在对内部事件进行类处理时运行 <xref:System.Windows.Media.Animation.Storyboard>。</span><span class="sxs-lookup"><span data-stu-id="9a084-209">The following example retrieves a <xref:System.Windows.Media.Animation.Storyboard> from resources, and then runs that <xref:System.Windows.Media.Animation.Storyboard> when an internal event is class handled.</span></span>  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginStoryboard (storyboard As Storyboard, handoffBehavior As HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="frameworkElement.BeginStoryboard (storyboard, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="storyboard"><span data-ttu-id="9a084-210">要开始的演示图板。</span><span class="sxs-lookup"><span data-stu-id="9a084-210">The storyboard to begin.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="9a084-211">一个枚举值，该值描述演示图板中描述的属性在经过动画处理后要使用的行为。</span><span class="sxs-lookup"><span data-stu-id="9a084-211">A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</span></span></param>
        <summary><span data-ttu-id="9a084-212">开始所提供的演示图板中包含的操作序列，并指定选项来指明当已对属性进行动画处理时应发生的行为。</span><span class="sxs-lookup"><span data-stu-id="9a084-212">Begins the sequence of actions contained in the provided storyboard, with options specified for what should happen if the property is already animated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-213">最典型的动画方案不使用此方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-213">Most typical animation scenarios do not use this method.</span></span> <span data-ttu-id="9a084-214">通常，您将在标记中创建 <xref:System.Windows.Media.Animation.Storyboard> 或 <xref:System.Windows.Media.Animation.BeginStoryboard> 元素，然后将它们放置为元素上的 <xref:System.Windows.EventTrigger> 内容。</span><span class="sxs-lookup"><span data-stu-id="9a084-214">Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element.</span></span> <span data-ttu-id="9a084-215">当事件触发时，动画将运行。</span><span class="sxs-lookup"><span data-stu-id="9a084-215">When triggered by the event, the animation then runs.</span></span> <span data-ttu-id="9a084-216"><xref:System.Windows.Media.Animation.Storyboard> 的大部分控制方面都可以通过在标记中公开的属性进行寻址。</span><span class="sxs-lookup"><span data-stu-id="9a084-216">Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.</span></span>  
  
 <span data-ttu-id="9a084-217">对于不使用 `isControllable`、参数或指定该参数的签名 `false`，一旦动画达到 "填充" 时间段，就会删除与动画关联的时间线时钟。</span><span class="sxs-lookup"><span data-stu-id="9a084-217">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</span></span> <span data-ttu-id="9a084-218">因此，不能在运行后重新启动动画。</span><span class="sxs-lookup"><span data-stu-id="9a084-218">Therefore the animation cannot be restarted after running once.</span></span> <span data-ttu-id="9a084-219">控制动画还要求情节提要具有[X：Name 指令](/dotnet/framework/xaml-services/x-name-directive)或可通过代码中的引用进行访问。</span><span class="sxs-lookup"><span data-stu-id="9a084-219">Controlling an animation also requires that the storyboard have an [x:Name Directive](/dotnet/framework/xaml-services/x-name-directive) or be accessible by reference in code.</span></span>  
  
 <span data-ttu-id="9a084-220">可以将移交行为指定为 <xref:System.Windows.Media.Animation.BeginStoryboard>的属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-220">Handoff behavior can be specified as an attribute of <xref:System.Windows.Media.Animation.BeginStoryboard>.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="9a084-221">使用撰写 HandoffBehavior</span><span class="sxs-lookup"><span data-stu-id="9a084-221">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="9a084-222">使用 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>将 <xref:System.Windows.Media.Animation.Storyboard>、<xref:System.Windows.Media.Animation.AnimationTimeline>或 <xref:System.Windows.Media.Animation.AnimationClock> 应用于属性时，以前与该属性关联的任何 <xref:System.Windows.Media.Animation.Clock> 对象将继续使用系统资源;计时系统不会自动删除时钟。</span><span class="sxs-lookup"><span data-stu-id="9a084-222">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</span></span>  
  
 <span data-ttu-id="9a084-223">为了避免在使用 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>应用大量时钟时出现性能问题，应在完成后从动画属性中删除组合时钟。</span><span class="sxs-lookup"><span data-stu-id="9a084-223">To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="9a084-224">有几种方法可以删除时钟：</span><span class="sxs-lookup"><span data-stu-id="9a084-224">There are several ways to remove a clock:</span></span>  
  
-   <span data-ttu-id="9a084-225">若要从属性中删除所有时钟，请使用动画对象的 <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> 或 <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> 方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-225">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="9a084-226">指定正在进行动画处理的属性作为第一个参数，并 `null` 为第二个参数。</span><span class="sxs-lookup"><span data-stu-id="9a084-226">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="9a084-227">这将从属性中移除所有动画时钟。</span><span class="sxs-lookup"><span data-stu-id="9a084-227">This removes all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="9a084-228">若要从时钟列表中删除特定 <xref:System.Windows.Media.Animation.AnimationClock>，请使用 <xref:System.Windows.Media.Animation.AnimationClock> 的 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 属性检索 <xref:System.Windows.Media.Animation.ClockController>，然后调用 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> 的 <xref:System.Windows.Media.Animation.ClockController>方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-228">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="9a084-229">通常在时钟的 <xref:System.Windows.Media.Animation.Clock.Completed> 事件处理程序中完成此操作。</span><span class="sxs-lookup"><span data-stu-id="9a084-229">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="9a084-230">请注意，只能通过 <xref:System.Windows.Media.Animation.ClockController>来控制根时钟;子时钟的 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 属性返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="9a084-230">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`.</span></span> <span data-ttu-id="9a084-231">另请注意，如果时钟的有效持续时间是永久性的，则不会引发 <xref:System.Windows.Media.Animation.Clock.Completed> 事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-231">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="9a084-232">在这种情况下，用户必须确定何时调用 <xref:System.Windows.Media.Animation.ClockController.Remove%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-232">In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="9a084-233">此动画问题主要出现在生存期较长的对象上。</span><span class="sxs-lookup"><span data-stu-id="9a084-233">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="9a084-234">当对对象进行垃圾回收时，还会断开其时钟的连接并对其进行垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="9a084-234">When an object is garbage collected, its clocks are also disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="9a084-235">有关时钟对象的详细信息，请参阅[动画和计时系统概述](/dotnet/framework/wpf/graphics-multimedia/animation-and-timing-system-overview)。</span><span class="sxs-lookup"><span data-stu-id="9a084-235">For more information about clock objects, see [Animation and Timing System Overview](/dotnet/framework/wpf/graphics-multimedia/animation-and-timing-system-overview).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a084-236">下面的示例从资源中检索 <xref:System.Windows.Media.Animation.Storyboard>，然后在对内部事件进行类处理时运行 <xref:System.Windows.Media.Animation.Storyboard>。</span><span class="sxs-lookup"><span data-stu-id="9a084-236">The following example retrieves a <xref:System.Windows.Media.Animation.Storyboard> from resources, and then runs that <xref:System.Windows.Media.Animation.Storyboard> when an internal event is class handled.</span></span>  
  
 [!code-csharp[CubeAnimation#FEBeginStoryboard](~/samples/snippets/csharp/VS_Snippets_Wpf/CubeAnimation/CSharp/Page1.xaml.cs#febeginstoryboard)]
 [!code-vb[CubeAnimation#FEBeginStoryboard](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CubeAnimation/visualbasic/page1.xaml.vb#febeginstoryboard)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginStoryboard (storyboard As Storyboard, handoffBehavior As HandoffBehavior, isControllable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior * bool -&gt; unit" Usage="frameworkElement.BeginStoryboard (storyboard, handoffBehavior, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="storyboard"><span data-ttu-id="9a084-237">要开始的演示图板。</span><span class="sxs-lookup"><span data-stu-id="9a084-237">The storyboard to begin.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="9a084-238">一个枚举值，该值描述演示图板中描述的属性在经过动画处理后要使用的行为。</span><span class="sxs-lookup"><span data-stu-id="9a084-238">A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</span></span></param>
        <param name="isControllable"><span data-ttu-id="9a084-239">声明在动画开始后是否仍可以对它进行控制（可以暂停）。</span><span class="sxs-lookup"><span data-stu-id="9a084-239">Declares whether the animation is controllable (can be paused) after it is started.</span></span></param>
        <summary><span data-ttu-id="9a084-240">开始所提供的演示图板中包含的操作序列，并使动画控件在动画开始后具有指定的状态。</span><span class="sxs-lookup"><span data-stu-id="9a084-240">Begins the sequence of actions contained in the provided storyboard, with specified state for control of the animation after it is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-241">最典型的动画方案不使用此方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-241">Most typical animation scenarios do not use this method.</span></span> <span data-ttu-id="9a084-242">通常，您将在标记中创建 <xref:System.Windows.Media.Animation.Storyboard> 或 <xref:System.Windows.Media.Animation.BeginStoryboard> 元素，然后将它们放置为元素上的 <xref:System.Windows.EventTrigger> 内容。</span><span class="sxs-lookup"><span data-stu-id="9a084-242">Typically, you create the <xref:System.Windows.Media.Animation.Storyboard> or <xref:System.Windows.Media.Animation.BeginStoryboard> element in markup, and then you place these as the <xref:System.Windows.EventTrigger> content on an element.</span></span> <span data-ttu-id="9a084-243">当事件触发时，动画将运行。</span><span class="sxs-lookup"><span data-stu-id="9a084-243">When triggered by the event, the animation then runs.</span></span> <span data-ttu-id="9a084-244"><xref:System.Windows.Media.Animation.Storyboard> 的大部分控制方面都可以通过在标记中公开的属性进行寻址。</span><span class="sxs-lookup"><span data-stu-id="9a084-244">Most of the control aspects of a <xref:System.Windows.Media.Animation.Storyboard> can be addressed by properties that are exposed in markup.</span></span>  
  
 <span data-ttu-id="9a084-245">对于不使用 `isControllable`、参数或指定该参数的签名 `false`，一旦动画达到 "填充" 时间段，就会删除与动画关联的时间线时钟。</span><span class="sxs-lookup"><span data-stu-id="9a084-245">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks that are associated with the animation are removed as soon as the animation reaches the "Fill" period.</span></span> <span data-ttu-id="9a084-246">因此，不能在运行后重新启动动画。</span><span class="sxs-lookup"><span data-stu-id="9a084-246">Therefore the animation cannot be restarted after running once.</span></span> <span data-ttu-id="9a084-247">控制动画还要求情节提要具有[X：Name 指令](/dotnet/framework/xaml-services/x-name-directive)或可通过代码中的引用进行访问。</span><span class="sxs-lookup"><span data-stu-id="9a084-247">Controlling an animation also requires that the storyboard have an [x:Name Directive](/dotnet/framework/xaml-services/x-name-directive) or be accessible by reference in code.</span></span>  
  
 <span data-ttu-id="9a084-248">可以将移交行为指定为 <xref:System.Windows.Media.Animation.BeginStoryboard>的属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-248">Handoff behavior can be specified as an attribute of <xref:System.Windows.Media.Animation.BeginStoryboard>.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="9a084-249">使用撰写 HandoffBehavior</span><span class="sxs-lookup"><span data-stu-id="9a084-249">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="9a084-250">使用 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>将 <xref:System.Windows.Media.Animation.Storyboard>、<xref:System.Windows.Media.Animation.AnimationTimeline>或 <xref:System.Windows.Media.Animation.AnimationClock> 应用于属性时，以前与该属性关联的任何 <xref:System.Windows.Media.Animation.Clock> 对象将继续使用系统资源;计时系统不会自动删除时钟。</span><span class="sxs-lookup"><span data-stu-id="9a084-250">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</span></span>  
  
 <span data-ttu-id="9a084-251">为了避免在使用 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>应用大量时钟时出现性能问题，应在完成后从动画属性中删除组合时钟。</span><span class="sxs-lookup"><span data-stu-id="9a084-251">To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="9a084-252">有几种方法可以删除时钟：</span><span class="sxs-lookup"><span data-stu-id="9a084-252">There are several ways to remove a clock:</span></span>  
  
-   <span data-ttu-id="9a084-253">若要从属性中删除所有时钟，请使用动画对象的 <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> 或 <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> 方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-253">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="9a084-254">指定正在进行动画处理的属性作为第一个参数，并 `null` 为第二个参数。</span><span class="sxs-lookup"><span data-stu-id="9a084-254">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="9a084-255">这将从属性中移除所有动画时钟。</span><span class="sxs-lookup"><span data-stu-id="9a084-255">This removes all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="9a084-256">若要从时钟列表中删除特定 <xref:System.Windows.Media.Animation.AnimationClock>，请使用 <xref:System.Windows.Media.Animation.AnimationClock> 的 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 属性检索 <xref:System.Windows.Media.Animation.ClockController>，然后调用 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> 的 <xref:System.Windows.Media.Animation.ClockController>方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-256">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="9a084-257">通常在时钟的 <xref:System.Windows.Media.Animation.Clock.Completed> 事件处理程序中完成此操作。</span><span class="sxs-lookup"><span data-stu-id="9a084-257">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="9a084-258">请注意，只能通过 <xref:System.Windows.Media.Animation.ClockController>来控制根时钟;子时钟的 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 属性返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="9a084-258">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`.</span></span> <span data-ttu-id="9a084-259">另请注意，如果时钟的有效持续时间是永久性的，则不会引发 <xref:System.Windows.Media.Animation.Clock.Completed> 事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-259">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="9a084-260">在这种情况下，用户必须确定何时调用 <xref:System.Windows.Media.Animation.ClockController.Remove%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-260">In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="9a084-261">此动画问题主要出现在生存期较长的对象上。</span><span class="sxs-lookup"><span data-stu-id="9a084-261">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="9a084-262">当对对象进行垃圾回收时，还会断开其时钟的连接并对其进行垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="9a084-262">When an object is garbage collected, its clocks are also disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="9a084-263">有关时钟对象的详细信息，请参阅[动画和计时系统概述](/dotnet/framework/wpf/graphics-multimedia/animation-and-timing-system-overview)。</span><span class="sxs-lookup"><span data-stu-id="9a084-263">For more information about clock objects, see [Animation and Timing System Overview](/dotnet/framework/wpf/graphics-multimedia/animation-and-timing-system-overview).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroup">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingGroup BindingGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingGroup BindingGroup" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.BindingGroup" />
      <MemberSignature Language="VB.NET" Value="Public Property BindingGroup As BindingGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingGroup ^ BindingGroup { System::Windows::Data::BindingGroup ^ get(); void set(System::Windows::Data::BindingGroup ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BindingGroup : System.Windows.Data.BindingGroup with get, set" Usage="System.Windows.FrameworkElement.BindingGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-264">获取或设置用于该元素的 <see cref="T:System.Windows.Data.BindingGroup" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-264">Gets or sets the <see cref="T:System.Windows.Data.BindingGroup" /> that is used for the element.</span></span></summary>
        <value><span data-ttu-id="9a084-265">用于该元素的 <see cref="T:System.Windows.Data.BindingGroup" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-265">The <see cref="T:System.Windows.Data.BindingGroup" /> that is used for the element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-266"><xref:System.Windows.Data.BindingGroup> 可用于验证对象的多个属性的值。</span><span class="sxs-lookup"><span data-stu-id="9a084-266">A <xref:System.Windows.Data.BindingGroup> can be used to validate the values of multiple properties of an object.</span></span> <span data-ttu-id="9a084-267">例如，假设应用程序提示用户输入地址，然后使用用户提供的值填充 `Address`类型的对象，该对象的属性 `Street`、`City`、`ZipCode`和 `Country`。</span><span class="sxs-lookup"><span data-stu-id="9a084-267">For example, suppose that an application prompts the user to enter an address and then populates an object of type `Address`, which has the properties `Street`, `City`, `ZipCode`, and `Country`, with the values that the user provided.</span></span> <span data-ttu-id="9a084-268">应用程序具有一个包含四个 <xref:System.Windows.Controls.TextBox> 控件的面板，其中每个控件都绑定到对象的一个属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-268">The application has a panel that contains four <xref:System.Windows.Controls.TextBox> controls, each of which is bound to one of the object's properties.</span></span> <span data-ttu-id="9a084-269">可以在 <xref:System.Windows.Data.BindingGroup> 中使用 <xref:System.Windows.Controls.ValidationRule> 来验证 `Address` 对象。</span><span class="sxs-lookup"><span data-stu-id="9a084-269">You can use a <xref:System.Windows.Controls.ValidationRule> in a <xref:System.Windows.Data.BindingGroup> to validate the `Address` object.</span></span> <span data-ttu-id="9a084-270">例如，<xref:System.Windows.Controls.ValidationRule> 可以确保邮政编码对地址的国家/地区有效。</span><span class="sxs-lookup"><span data-stu-id="9a084-270">For example, the <xref:System.Windows.Controls.ValidationRule> can ensure that the zip code is valid for the country/region of the address.</span></span>  
  
 <span data-ttu-id="9a084-271">子元素从其父元素继承 <xref:System.Windows.Data.BindingGroup>，就像任何其他可继承的属性一样。</span><span class="sxs-lookup"><span data-stu-id="9a084-271">Child elements inherit the <xref:System.Windows.Data.BindingGroup> from their parent elements, just as with any other inheritable property.</span></span>  
  
<a name="dependencyPropertyInfo_BindingGroup"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-272">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-272">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-273">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-273">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.BindingGroupProperty>|  
|<span data-ttu-id="9a084-274">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-274">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="9a084-275">以下示例是应用程序的一部分，用于检查用户是否已将两个对象的属性设置为相等值。</span><span class="sxs-lookup"><span data-stu-id="9a084-275">The following examples are part of an application that checks whether the user has set the properties of two objects to equal values.</span></span> <span data-ttu-id="9a084-276">第一个示例创建两个 <xref:System.Windows.Controls.TextBox> 控件，其中每个控件都绑定到不同的数据源。</span><span class="sxs-lookup"><span data-stu-id="9a084-276">The first example creates two <xref:System.Windows.Controls.TextBox> controls, each of which is bound to a different data source.</span></span> <span data-ttu-id="9a084-277"><xref:System.Windows.Controls.StackPanel> 具有一个 <xref:System.Windows.Data.BindingGroup>，其中包含的 <xref:System.Windows.Controls.ValidationRule> 检查两个字符串是否相等。</span><span class="sxs-lookup"><span data-stu-id="9a084-277">The <xref:System.Windows.Controls.StackPanel> has a <xref:System.Windows.Data.BindingGroup> that contains a <xref:System.Windows.Controls.ValidationRule> that checks that the two strings are equal.</span></span>  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupComplete](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupcomplete)]  
  
 <span data-ttu-id="9a084-278">下面的示例演示上一示例使用的 <xref:System.Windows.Controls.ValidationRule>。</span><span class="sxs-lookup"><span data-stu-id="9a084-278">The following example shows the <xref:System.Windows.Controls.ValidationRule> that the previous example uses.</span></span>  <span data-ttu-id="9a084-279">在 <xref:System.Windows.Controls.ValidationRule.Validate%2A> 方法重写中，该示例从 <xref:System.Windows.Data.BindingGroup> 中获取每个源对象，并检查对象的属性是否相等。</span><span class="sxs-lookup"><span data-stu-id="9a084-279">In the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method override, the example gets each source object from the <xref:System.Windows.Data.BindingGroup> and checks whether the properties of the objects are equal.</span></span>  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 <span data-ttu-id="9a084-280">若要调用 <xref:System.Windows.Controls.ValidationRule>，请调用 <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-280">To invoke the <xref:System.Windows.Controls.ValidationRule>, call the <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> method.</span></span>  <span data-ttu-id="9a084-281">下面的示例在按钮的 click 事件发生时调用 <xref:System.Windows.Data.BindingGroup.UpdateSources%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-281">The following example calls <xref:System.Windows.Data.BindingGroup.UpdateSources%2A> when the click event of the button occurs.</span></span>  
  
 [!code-csharp[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#updatesourcesclick)]
 [!code-vb[BindingGroupSnippets#UpdateSourcesClick](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#updatesourcesclick)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroupProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BindingGroupProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BindingGroupProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BindingGroupProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BindingGroupProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BindingGroupProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.BindingGroupProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-282">标识 <see cref="P:System.Windows.FrameworkElement.BindingGroup" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-282">Identifies the <see cref="P:System.Windows.FrameworkElement.BindingGroup" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BringIntoView">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a084-283">尝试将此元素放入其所在的任何可滚动区域内的视图中。</span><span class="sxs-lookup"><span data-stu-id="9a084-283">Attempts to bring this element into view, within any scrollable regions it is contained within.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView();" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : unit -&gt; unit" Usage="frameworkElement.BringIntoView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a084-284">尝试将此元素放入其所在的任何可滚动区域内的视图中。</span><span class="sxs-lookup"><span data-stu-id="9a084-284">Attempts to bring this element into view, within any scrollable regions it is contained within.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-285">通过调用此方法，可以引发源自当前元素的 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-285">By calling this method, you raise a <xref:System.Windows.FrameworkElement.RequestBringIntoView> event that originates from the current element.</span></span> <span data-ttu-id="9a084-286">引发此事件的目的是 <xref:System.Windows.Controls.ScrollViewer>或派生类或类似类处理此事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-286">This event is raised so that it can be handled by a <xref:System.Windows.Controls.ScrollViewer>, or a derived or similar class.</span></span> <span data-ttu-id="9a084-287">预期的行为是由父元素处理事件（在事件数据中标记为已处理），事件源通过嵌入在 <xref:System.Windows.Controls.ScrollViewer> 控件中的逻辑进入视图。</span><span class="sxs-lookup"><span data-stu-id="9a084-287">The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the <xref:System.Windows.Controls.ScrollViewer> control.</span></span> <span data-ttu-id="9a084-288"><xref:System.Windows.FrameworkElement.RequestBringIntoView> 事件和 <xref:System.Windows.FrameworkElement.BringIntoView%2A> 方法均不传输任何有关成功或失败的信息，而不是该事件通常标记为成功处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-288">Neither the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event nor the <xref:System.Windows.FrameworkElement.BringIntoView%2A> method transmit any information about success or failure, other than that the event is typically marked handled on success.</span></span> <span data-ttu-id="9a084-289">失败的原因可能包括元素设置，如 <xref:System.Windows.UIElement.Visibility%2A> 是 <xref:System.Windows.Visibility.Visible>以外的其他值。</span><span class="sxs-lookup"><span data-stu-id="9a084-289">Reasons for failure can include the element settings, such as <xref:System.Windows.UIElement.Visibility%2A> being some value other than <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 <span data-ttu-id="9a084-290">如果使用未指定 `targetRectangle`的签名，则整个元素大小（其 <xref:System.Windows.UIElement.RenderSize%2A>）将变得可见。</span><span class="sxs-lookup"><span data-stu-id="9a084-290">If you use the signature that does not specify a `targetRectangle`, then the entire element size (its <xref:System.Windows.UIElement.RenderSize%2A>) will be made visible.</span></span>  
  
 <span data-ttu-id="9a084-291">通过调用此方法，您可能会对包含该元素的任何父可滚动区域调用 <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-291">By calling this method, you potentially will call <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> on any parent scrollable area that contains the element.</span></span> <span data-ttu-id="9a084-292">如果此元素不包含在可滚动区域中，则仍会引发 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 事件，但由于没有事件侦听器，因此将不起作用。</span><span class="sxs-lookup"><span data-stu-id="9a084-292">If this element is not contained in a scrollable area, the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event is still raised, but there will be no effect because there are no event listeners.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a084-293">下面的示例为应用程序导航事件实现了一个处理程序，该事件在导航到的统一资源标识符（URI）包含片段时做出响应。</span><span class="sxs-lookup"><span data-stu-id="9a084-293">The following example implements a handler for an application navigation event that responds whenever the uniform resource identifier (URI) being navigated to includes a fragment.</span></span> <span data-ttu-id="9a084-294">片段在哈希符号（#）后面的 URI 中命名，实现的行为使元素滚动到帧内的视图中。</span><span class="sxs-lookup"><span data-stu-id="9a084-294">The fragment is named in the URI following the hash sign (#), and the implemented behavior causes the element to scroll into view within the frame.</span></span> <span data-ttu-id="9a084-295"><xref:System.Windows.FrameworkElement.BringIntoView%2A> 和 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 请求该示例中的滚动行为。</span><span class="sxs-lookup"><span data-stu-id="9a084-295"><xref:System.Windows.FrameworkElement.BringIntoView%2A> and <xref:System.Windows.FrameworkElement.RequestBringIntoView> request that scrolling behavior in the example.</span></span>  
  
 [!code-csharp[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/csharp/VS_Snippets_Wpf/FragmentNavigationSample/CSharp/MainWindow.xaml.cs#febringintoview)]
 [!code-vb[FragmentNavigationSample#FEBringIntoView](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FragmentNavigationSample/VisualBasic/MainWindow.xaml.vb#febringintoview)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView (System.Windows.Rect targetRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView(valuetype System.Windows.Rect targetRectangle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView (targetRectangle As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView(System::Windows::Rect targetRectangle);" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : System.Windows.Rect -&gt; unit" Usage="frameworkElement.BringIntoView targetRectangle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetRectangle" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="targetRectangle"><span data-ttu-id="9a084-296">也应放入视图中的元素的指定大小。</span><span class="sxs-lookup"><span data-stu-id="9a084-296">Specified size of the element that should also be brought into view.</span></span></param>
        <summary><span data-ttu-id="9a084-297">尝试将此元素的提供区域大小放入其所在的任何可滚动区域内的视图中。</span><span class="sxs-lookup"><span data-stu-id="9a084-297">Attempts to bring the provided region size of this element into view, within any scrollable regions it is contained within.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-298">通过调用此方法，可以引发源自当前元素的 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-298">By calling this method, you raise a <xref:System.Windows.FrameworkElement.RequestBringIntoView> event that originates from the current element.</span></span> <span data-ttu-id="9a084-299">引发此事件的目的是 <xref:System.Windows.Controls.ScrollViewer>或派生类或类似类处理此事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-299">This event is raised so that it can be handled by a <xref:System.Windows.Controls.ScrollViewer>, or a derived or similar class.</span></span> <span data-ttu-id="9a084-300">预期的行为是由父元素处理事件（在事件数据中标记为已处理），事件源通过嵌入在 <xref:System.Windows.Controls.ScrollViewer> 控件中的逻辑进入视图。</span><span class="sxs-lookup"><span data-stu-id="9a084-300">The expected behavior is that the event is handled by the parent element, marked handled in the event data, and the source of the event is brought into view through the logic embedded in the <xref:System.Windows.Controls.ScrollViewer> control.</span></span> <span data-ttu-id="9a084-301"><xref:System.Windows.FrameworkElement.RequestBringIntoView> 事件和 <xref:System.Windows.FrameworkElement.BringIntoView%2A> 方法均不传输任何有关成功或失败的信息，而不是该事件通常标记为成功处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-301">Neither the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event nor the <xref:System.Windows.FrameworkElement.BringIntoView%2A> method transmit any information about success or failure, other than that the event is typically marked handled on success.</span></span> <span data-ttu-id="9a084-302">失败的原因可能包括元素设置，如 <xref:System.Windows.UIElement.Visibility%2A> 是 <xref:System.Windows.Visibility.Visible>以外的其他值。</span><span class="sxs-lookup"><span data-stu-id="9a084-302">Reasons for failure can include the element settings, such as <xref:System.Windows.UIElement.Visibility%2A> being some value other than <xref:System.Windows.Visibility.Visible>.</span></span>  
  
 <span data-ttu-id="9a084-303">如果使用未指定 `targetRectangle`的签名，则整个元素大小（其 <xref:System.Windows.UIElement.RenderSize%2A>）将变得可见。</span><span class="sxs-lookup"><span data-stu-id="9a084-303">If you use the signature that does not specify a `targetRectangle`, then the entire element size (its <xref:System.Windows.UIElement.RenderSize%2A>) will be made visible.</span></span>  
  
 <span data-ttu-id="9a084-304">通过调用此方法，您可能会对包含该元素的任何父可滚动区域调用 <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-304">By calling this method, you potentially will call <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> on any parent scrollable area that contains the element.</span></span> <span data-ttu-id="9a084-305">如果此元素不包含在可滚动区域中，则仍会引发 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 事件，但由于没有事件侦听器，因此将不起作用。</span><span class="sxs-lookup"><span data-stu-id="9a084-305">If this element is not contained in a scrollable area, the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event is still raised, but there will be no effect because there are no event listeners.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a084-306">下面的示例在受约束的滚动区域中有一个大型图形。</span><span class="sxs-lookup"><span data-stu-id="9a084-306">The following example has a large graphic in a constrained scrolling region.</span></span> <span data-ttu-id="9a084-307">页面上的按钮具有处理程序，可将视图滚动到大型图形的特定区域。</span><span class="sxs-lookup"><span data-stu-id="9a084-307">A button on the page has a handler that scrolls the view to a particular region of the large graphic.</span></span>  
  
 [!code-xaml[BaseElementsSmorgasbord#BringIntoViewRectMarkup](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml#bringintoviewrectmarkup)]  
  
 [!code-csharp[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#bringintoviewrectcode)]
 [!code-vb[BaseElementsSmorgasbord#BringIntoViewRectCode](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#bringintoviewrectcode)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.FlowDocumentScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ContextMenu ContextMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextMenu As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ContextMenu ^ ContextMenu { System::Windows::Controls::ContextMenu ^ get(); void set(System::Windows::Controls::ContextMenu ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenu : System.Windows.Controls.ContextMenu with get, set" Usage="System.Windows.FrameworkElement.ContextMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-308">获取或设置通过 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 从此元素内部请求上下文菜单时应该显示的上下文菜单元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-308">Gets or sets the context menu element that should appear whenever the context menu is requested through [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] from within this element.</span></span></summary>
        <value><span data-ttu-id="9a084-309">分配给此元素的上下文菜单。</span><span class="sxs-lookup"><span data-stu-id="9a084-309">The context menu assigned to this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-310"><xref:System.Windows.Controls.ContextMenu> 本身是一个 <xref:System.Windows.FrameworkElement> 派生类，在技术上也可以 <xref:System.Windows.Controls.ContextMenu> 自身具有 <xref:System.Windows.FrameworkElement.ContextMenu%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-310"><xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, and it is technically possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property.</span></span> <span data-ttu-id="9a084-311">但是，这会为用户带来混乱的上下文菜单体验，不建议使用这种做法。</span><span class="sxs-lookup"><span data-stu-id="9a084-311">However, this creates a confusing context menu experience for the user and this practice is not recommended.</span></span>  
  
<a name="dependencyPropertyInfo_ContextMenu"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-312">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-312">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-313">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-313">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ContextMenuProperty>|  
|<span data-ttu-id="9a084-314">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-314">Metadata properties set to `true`</span></span>|<span data-ttu-id="9a084-315">无</span><span class="sxs-lookup"><span data-stu-id="9a084-315">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuClosing As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuClosing;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-316">在元素上的任何上下文菜单关闭之前发生。</span><span class="sxs-lookup"><span data-stu-id="9a084-316">Occurs just before any context menu on the element is closed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-317">若要取消关闭上下文菜单，该事件的处理程序应将其标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-317">To suppress closing context menus, handlers of the event should mark it as handled.</span></span>  
  
 <span data-ttu-id="9a084-318">若要使用此事件作为样式中的 <xref:System.Windows.EventTrigger>，必须引用事件的基础服务定义：</span><span class="sxs-lookup"><span data-stu-id="9a084-318">To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying service's definition of the event:</span></span>  
  
 [!code-xaml[CorePseudocode#FEContextMenuClosing](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuclosing)]  
  
 <span data-ttu-id="9a084-319">（这种用法是必需的，因为公开基础服务事件 <xref:System.Windows.FrameworkElement> 上的事件实现不会映射 <xref:System.Windows.FrameworkElement.ContextMenuClosing> 标识符，因此你可以将其用作触发器）。</span><span class="sxs-lookup"><span data-stu-id="9a084-319">(This usage is required because the event implementation on <xref:System.Windows.FrameworkElement> that exposes the underlying service event does not map the <xref:System.Windows.FrameworkElement.ContextMenuClosing> identifier such that you can use it as a trigger).</span></span>  
  
 <span data-ttu-id="9a084-320"><xref:System.Windows.Controls.ContextMenu> 本身是一个 <xref:System.Windows.FrameworkElement> 派生类，但 <xref:System.Windows.FrameworkElement.ContextMenuClosing> 事件不会直接由上下文菜单引发。</span><span class="sxs-lookup"><span data-stu-id="9a084-320"><xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, but the <xref:System.Windows.FrameworkElement.ContextMenuClosing> event will not be raised by a context menu directly.</span></span> <span data-ttu-id="9a084-321">相反，事件是从 "拥有" 上下文菜单作为属性的元素引发的，仅当用户尝试关闭用户界面菜单时才会引发。</span><span class="sxs-lookup"><span data-stu-id="9a084-321">Instead, the event is raised from the element that "owns" the context menu as a property and is only raised when a user attempts to close a context menu in the UI.</span></span> <span data-ttu-id="9a084-322">但 <xref:System.Windows.Controls.ContextMenu> 本身有可能具有 <xref:System.Windows.FrameworkElement.ContextMenu%2A> 属性（一个嵌套上下文菜单）。</span><span class="sxs-lookup"><span data-stu-id="9a084-322">However it is possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property (a nested context menu).</span></span> <span data-ttu-id="9a084-323">在这种情况下，<xref:System.Windows.Controls.ContextMenu> 确实拥有嵌套 <xref:System.Windows.Controls.ContextMenu>，可能引发事件，并将事件的源作为嵌套上下文菜单。</span><span class="sxs-lookup"><span data-stu-id="9a084-323">In this case the <xref:System.Windows.Controls.ContextMenu> really does own the nested <xref:System.Windows.Controls.ContextMenu> and might raise the event, with the source of the event being the nested context menu.</span></span>  
  
 <span data-ttu-id="9a084-324"><xref:System.Windows.Controls.ContextMenu> 类本身也具有类似的事件（<xref:System.Windows.Controls.ContextMenu.Closed>），但 <xref:System.Windows.Controls.ContextMenu.Closed> 事件不会为你提供取消用户操作的机会。</span><span class="sxs-lookup"><span data-stu-id="9a084-324">The <xref:System.Windows.Controls.ContextMenu> class itself also has a similar event (<xref:System.Windows.Controls.ContextMenu.Closed>) but the <xref:System.Windows.Controls.ContextMenu.Closed> event does not provide you the opportunity to cancel the user action.</span></span>  
  
<a name="routedEventInfo_ContextMenuClosing"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9a084-325">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="9a084-325">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-326">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-326">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ContextMenuClosingEvent>|  
|<span data-ttu-id="9a084-327">路由策略</span><span class="sxs-lookup"><span data-stu-id="9a084-327">Routing strategy</span></span>|<span data-ttu-id="9a084-328">冒泡</span><span class="sxs-lookup"><span data-stu-id="9a084-328">Bubbling</span></span>|  
|<span data-ttu-id="9a084-329">委托</span><span class="sxs-lookup"><span data-stu-id="9a084-329">Delegate</span></span>|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   <span data-ttu-id="9a084-330">重写 <xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A> 在派生类中实现此事件的类处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-330">Override <xref:System.Windows.FrameworkElement.OnContextMenuClosing%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ContextMenuClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-331">标识 <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-331">Identifies the <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-332">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="9a084-332">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9a084-333">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-333">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9a084-334">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="9a084-334">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9a084-335">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-335">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9a084-336">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-336">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ContextMenuOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuOpening As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuOpening;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-337">在元素上的任何上下文菜单打开时发生。</span><span class="sxs-lookup"><span data-stu-id="9a084-337">Occurs when any context menu on the element is opened.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-338">若要手动打开上下文菜单，事件的处理程序应将相关事件标记为 "已处理"。</span><span class="sxs-lookup"><span data-stu-id="9a084-338">To manually open context menus, handlers of the events should mark the relevant event as handled.</span></span> <span data-ttu-id="9a084-339">否则，将使用 <xref:System.Windows.FrameworkElement.ContextMenu%2A> 属性的现有值自动打开上下文菜单。</span><span class="sxs-lookup"><span data-stu-id="9a084-339">Otherwise, the existing value of the <xref:System.Windows.FrameworkElement.ContextMenu%2A> property will be used to automatically open a context menu.</span></span> <span data-ttu-id="9a084-340">将事件标记为已处理会有效地取消默认操作，并且可能有机会重置 <xref:System.Windows.FrameworkElement.ContextMenu%2A> 属性的值，然后打开新的 <xref:System.Windows.Controls.ContextMenu>。</span><span class="sxs-lookup"><span data-stu-id="9a084-340">Marking the event handled will effectively cancel the default action, and could be an opportunity to reset the value of the <xref:System.Windows.FrameworkElement.ContextMenu%2A> property and then open the new <xref:System.Windows.Controls.ContextMenu>.</span></span> <span data-ttu-id="9a084-341">但是，有一个应该注意的计时问题。</span><span class="sxs-lookup"><span data-stu-id="9a084-341">However, there is a timing issue you should be aware of.</span></span> <span data-ttu-id="9a084-342">为了通过 <xref:System.Windows.FrameworkElement.ContextMenuOpening> 处理程序完全替换上下文菜单，初始上下文菜单不得为 null/空。</span><span class="sxs-lookup"><span data-stu-id="9a084-342">In order to completely replace the context menu through a <xref:System.Windows.FrameworkElement.ContextMenuOpening> handler, the initial context menu must not be null / empty.</span></span> <span data-ttu-id="9a084-343">或者，您可能需要处理事件，然后手动打开新的上下文菜单。</span><span class="sxs-lookup"><span data-stu-id="9a084-343">Alternatively, you might need to handle the event and then manually open a new context menu.</span></span> <span data-ttu-id="9a084-344">有关详细信息，请参阅[如何：处理 ContextMenuOpening 事件](/dotnet/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event)。</span><span class="sxs-lookup"><span data-stu-id="9a084-344">For details, see [How to: Handle the ContextMenuOpening Event](/dotnet/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event).</span></span>  
  
 <span data-ttu-id="9a084-345">若要使用此事件作为样式中的 <xref:System.Windows.EventTrigger>，必须引用底层附加事件：</span><span class="sxs-lookup"><span data-stu-id="9a084-345">To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying attached event:</span></span>  
  
 [!code-xaml[CorePseudocode#FEContextMenuOpening](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuopening)]  
  
 <span data-ttu-id="9a084-346">（这种用法是必需的，因为公开基础服务事件 <xref:System.Windows.FrameworkElement> 上的事件实现不会映射 <xref:System.Windows.FrameworkElement.ContextMenuOpening> 标识符，以便在触发器中使用它）。</span><span class="sxs-lookup"><span data-stu-id="9a084-346">(This usage is required because the event implementation on <xref:System.Windows.FrameworkElement> that exposes the underlying service event does not map the <xref:System.Windows.FrameworkElement.ContextMenuOpening> identifier such that you can use it in triggers).</span></span>  
  
 <span data-ttu-id="9a084-347"><xref:System.Windows.Controls.ContextMenu> 本身是一个 <xref:System.Windows.FrameworkElement> 派生类，但不会从作为源打开的上下文菜单引发此事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-347"><xref:System.Windows.Controls.ContextMenu> itself is a <xref:System.Windows.FrameworkElement> derived class, but this event will not be raised from the context menu being opened as a source.</span></span> <span data-ttu-id="9a084-348">事件是从 "拥有" 上下文菜单作为属性的元素引发的，仅当用户尝试在用户界面中打开上下文菜单时才会引发该事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-348">The event is raised from the element that "owns" the context menu as a property and is only raised when a user attempts to open a context menu in the UI.</span></span> <span data-ttu-id="9a084-349"><xref:System.Windows.Controls.ContextMenu> 本身具有 <xref:System.Windows.FrameworkElement.ContextMenu%2A> 属性，但应避免此情况（有关详细信息，请参阅 <xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType>）。</span><span class="sxs-lookup"><span data-stu-id="9a084-349">It is possible for <xref:System.Windows.Controls.ContextMenu> itself to have a <xref:System.Windows.FrameworkElement.ContextMenu%2A> property, but you should avoid this scenario (for details, see <xref:System.Windows.FrameworkElement.ContextMenu%2A?displayProperty=nameWithType>).</span></span>  
  
 <span data-ttu-id="9a084-350"><xref:System.Windows.Controls.ContextMenu> 类本身也具有类似的事件（<xref:System.Windows.Controls.ContextMenu.Opened>），但 <xref:System.Windows.Controls.ContextMenu.Opened> 不提供取消用户操作的机会。</span><span class="sxs-lookup"><span data-stu-id="9a084-350">The <xref:System.Windows.Controls.ContextMenu> class itself also has a similar event (<xref:System.Windows.Controls.ContextMenu.Opened>) but <xref:System.Windows.Controls.ContextMenu.Opened> does not provide you the opportunity to cancel the user action.</span></span>  
  
<a name="routedEventInfo_ContextMenuOpening"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9a084-351">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="9a084-351">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-352">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-352">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ContextMenuOpeningEvent>|  
|<span data-ttu-id="9a084-353">路由策略</span><span class="sxs-lookup"><span data-stu-id="9a084-353">Routing strategy</span></span>|<span data-ttu-id="9a084-354">冒泡</span><span class="sxs-lookup"><span data-stu-id="9a084-354">Bubbling</span></span>|  
|<span data-ttu-id="9a084-355">委托</span><span class="sxs-lookup"><span data-stu-id="9a084-355">Delegate</span></span>|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
-   <span data-ttu-id="9a084-356">重写 <xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A> 在派生类中实现此事件的类处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-356">Override <xref:System.Windows.FrameworkElement.OnContextMenuOpening%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ContextMenuOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-357">标识 <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-357">Identifies the <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-358">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="9a084-358">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9a084-359">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-359">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9a084-360">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="9a084-360">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9a084-361">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-361">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9a084-362">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-362">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContextMenuProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContextMenuProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ContextMenuProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ContextMenuProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-363">标识 <see cref="P:System.Windows.FrameworkElement.ContextMenu" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-363">Identifies the <see cref="P:System.Windows.FrameworkElement.ContextMenu" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Cursor ^ Cursor { System::Windows::Input::Cursor ^ get(); void set(System::Windows::Input::Cursor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cursor : System.Windows.Input.Cursor with get, set" Usage="System.Windows.FrameworkElement.Cursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-364">获取或设置在鼠标指针位于此元素上时显示的光标。</span><span class="sxs-lookup"><span data-stu-id="9a084-364">Gets or sets the cursor that displays when the mouse pointer is over this element.</span></span></summary>
        <value><span data-ttu-id="9a084-365">要显示的光标。</span><span class="sxs-lookup"><span data-stu-id="9a084-365">The cursor to display.</span></span> <span data-ttu-id="9a084-366">按此依赖属性，默认值定义为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-366">The default value is defined as <see langword="null" /> per this dependency property.</span></span> <span data-ttu-id="9a084-367">但是，运行时的实际默认值将受到多种因素的影响。</span><span class="sxs-lookup"><span data-stu-id="9a084-367">However, the practical default at run time will come from a variety of factors.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-368">在 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]中设置此属性时，[!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 处理器依赖于 <xref:System.Windows.Input.Cursor> 类的类型转换来计算字符串。</span><span class="sxs-lookup"><span data-stu-id="9a084-368">When you set this property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor relies on type conversion for the <xref:System.Windows.Input.Cursor> class to evaluate the string.</span></span> <span data-ttu-id="9a084-369">提供的字符串的计算结果应为 <xref:System.Windows.Input.CursorType> 值。</span><span class="sxs-lookup"><span data-stu-id="9a084-369">The provided string should evaluate to a <xref:System.Windows.Input.CursorType> value.</span></span> <span data-ttu-id="9a084-370">有关详细信息，请参阅<xref:System.Windows.Input.Cursor>。</span><span class="sxs-lookup"><span data-stu-id="9a084-370">See <xref:System.Windows.Input.Cursor> for details.</span></span>  
  
 <span data-ttu-id="9a084-371">当鼠标指针位于此元素上时，是否显示此属性所建立的光标也依赖于 <xref:System.Windows.FrameworkElement.ForceCursor%2A> 属性的值。</span><span class="sxs-lookup"><span data-stu-id="9a084-371">Whether the cursor as established by this property will or will not display when the mouse pointer is over this element is also dependent on the value of the <xref:System.Windows.FrameworkElement.ForceCursor%2A> property.</span></span> <span data-ttu-id="9a084-372">此外，与事件相关的注意事项，如活动拖动、鼠标捕获、控件内的文本编辑模式等，也会影响其优先级高于在此属性中指定的值的光标。</span><span class="sxs-lookup"><span data-stu-id="9a084-372">Also, event-related considerations such as an active drag, mouse capture, text editing modes within controls, and so on, will also affect the cursor with higher priority than the value you specify in this property.</span></span>  
  
 <span data-ttu-id="9a084-373">若要将此属性的设置方式恢复为最终的默认值，请将其设置为 "`null`"。</span><span class="sxs-lookup"><span data-stu-id="9a084-373">To revert the behavior of setting this property to the eventual default, set it to `null` again.</span></span>  
  
 <span data-ttu-id="9a084-374">默认情况下，`null` 是指在此处推迟确定实际的游标值，应从其他位置获取该值。</span><span class="sxs-lookup"><span data-stu-id="9a084-374">The `null` default really means that determination of the practical cursor value is deferred here and should be obtained from elsewhere.</span></span> <span data-ttu-id="9a084-375">如果未从任何源以编程方式提供值，则会在 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 应用程序上直观地显示默认光标。</span><span class="sxs-lookup"><span data-stu-id="9a084-375">If presented without programmatic values from any source, the default cursor that is visually over a [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] application will be an arrow.</span></span> <span data-ttu-id="9a084-376">但是，在传递时，不会将暂时性游标更改设置为元素的 <xref:System.Windows.FrameworkElement.Cursor%2A> 值。</span><span class="sxs-lookup"><span data-stu-id="9a084-376">However, the transient cursor changes are not set to the <xref:System.Windows.FrameworkElement.Cursor%2A> values of the elements when they are passed over.</span></span> <span data-ttu-id="9a084-377">只有在实际设置了代码或样式的情况下，<xref:System.Windows.FrameworkElement.Cursor%2A> 属性才会报告非 null 值。</span><span class="sxs-lookup"><span data-stu-id="9a084-377">The <xref:System.Windows.FrameworkElement.Cursor%2A> property will only report non null values in cases where it was actually set, for instance through code or a style.</span></span> <span data-ttu-id="9a084-378">鼠标在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 应用程序上的每个移动都将引发 <xref:System.Windows.UIElement.QueryCursor> 事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-378">Each movement of the mouse over a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] application raises a <xref:System.Windows.UIElement.QueryCursor> event.</span></span> <span data-ttu-id="9a084-379">事件冒泡，而路由中的任何元素都有机会处理事件，并通过此事件的参数设置游标的值。</span><span class="sxs-lookup"><span data-stu-id="9a084-379">The event bubbles, and any element along the route has the opportunity to handle the event and to set the value of the cursor through the arguments of this event.</span></span> <span data-ttu-id="9a084-380">这是在大多数情况下生成视觉上明显的光标的机制。</span><span class="sxs-lookup"><span data-stu-id="9a084-380">This is the mechanism that produces the visually apparent cursor in most cases.</span></span> <span data-ttu-id="9a084-381">如果 <xref:System.Windows.UIElement.QueryCursor> 处理程序返回游标结果，则处理事件并在参数中具有更改的值将优先于任何级别的 <xref:System.Windows.FrameworkElement.Cursor%2A> 属性的值，除非设置 <xref:System.Windows.FrameworkElement.ForceCursor%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-381">If a <xref:System.Windows.UIElement.QueryCursor> handler returns a cursor result, then the fact that the event is handled and has a changed value in the arguments takes precedence over the value of the <xref:System.Windows.FrameworkElement.Cursor%2A> property at any level, unless <xref:System.Windows.FrameworkElement.ForceCursor%2A> is set.</span></span>  
  
 <span data-ttu-id="9a084-382">如果未创建自定义游标，通常会将此属性设置为 <xref:System.Windows.Input.Cursors> 类的静态属性值。</span><span class="sxs-lookup"><span data-stu-id="9a084-382">If not are not creating a custom cursor, you typically set this property to a static property value of the <xref:System.Windows.Input.Cursors> class.</span></span> <span data-ttu-id="9a084-383">在代码中设置 <xref:System.Windows.FrameworkElement.Cursor%2A> 需要执行下列操作之一：</span><span class="sxs-lookup"><span data-stu-id="9a084-383">Setting <xref:System.Windows.FrameworkElement.Cursor%2A> in code requires one of the following:</span></span>  
  
-   <span data-ttu-id="9a084-384">调用 <xref:System.Windows.Input.Cursor> 构造函数以获取 <xref:System.Windows.Input.Cursor> 实例。</span><span class="sxs-lookup"><span data-stu-id="9a084-384">Call the <xref:System.Windows.Input.Cursor> constructor to get a <xref:System.Windows.Input.Cursor> instance.</span></span> <span data-ttu-id="9a084-385"><xref:System.Windows.Input.Cursor> 构造函数的两个签名都使用流或文件，这是为了为自定义游标创建 <xref:System.Windows.Input.Cursor> 对象。</span><span class="sxs-lookup"><span data-stu-id="9a084-385">Both signatures of the <xref:System.Windows.Input.Cursor> constructor use streams or files, in anticipation that you are creating the <xref:System.Windows.Input.Cursor> object for a custom cursor.</span></span>  
  
-   <span data-ttu-id="9a084-386">使用 <xref:System.Windows.Input.CursorConverter> 类及其 <xref:System.Windows.Input.CursorConverter.ConvertFrom%2A> 方法，通过 <xref:System.Windows.Input.CursorType>或可计算为 <xref:System.Windows.Input.CursorType>的字符串指定游标，并将返回值强制转换为 <xref:System.Windows.Input.Cursor>。</span><span class="sxs-lookup"><span data-stu-id="9a084-386">Use the <xref:System.Windows.Input.CursorConverter> class and its <xref:System.Windows.Input.CursorConverter.ConvertFrom%2A> method to specify a cursor by <xref:System.Windows.Input.CursorType>, or a string that can evaluate to a <xref:System.Windows.Input.CursorType>, and cast the return to <xref:System.Windows.Input.Cursor>.</span></span>  
  
 <span data-ttu-id="9a084-387">在部分信任环境中未启用将 <xref:System.Windows.Input.Cursor> 设置为自定义值。</span><span class="sxs-lookup"><span data-stu-id="9a084-387">Setting the <xref:System.Windows.Input.Cursor> to a custom value is not enabled in partial trust.</span></span> <span data-ttu-id="9a084-388">有关自定义游标的详细信息，请参阅[输入概述](/dotnet/framework/wpf/advanced/input-overview)。</span><span class="sxs-lookup"><span data-stu-id="9a084-388">For more information on custom cursors, see [Input Overview](/dotnet/framework/wpf/advanced/input-overview).</span></span>  
  
<a name="dependencyPropertyInfo_Cursor"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-389">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-389">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-390">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-390">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.CursorProperty>|  
|<span data-ttu-id="9a084-391">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-391">Metadata properties set to `true`</span></span>|<span data-ttu-id="9a084-392">无</span><span class="sxs-lookup"><span data-stu-id="9a084-392">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9a084-393">下面的示例演示如何特意设置光标图形。</span><span class="sxs-lookup"><span data-stu-id="9a084-393">The following example shows how to deliberately set the cursor graphic.</span></span>  
  
 [!code-csharp[cursors#ChangeCursorsSample](~/samples/snippets/csharp/VS_Snippets_Wpf/cursors/CSharp/Window1.xaml.cs#changecursorssample)]
 [!code-vb[cursors#ChangeCursorsSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/cursors/VisualBasic/Window1.xaml.vb#changecursorssample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.UIElement.QueryCursor" />
        <altmember cref="P:System.Windows.FrameworkElement.ForceCursor" />
        <altmember cref="P:System.Windows.Input.Mouse.OverrideCursor" />
      </Docs>
    </Member>
    <Member MemberName="CursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.CursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.CursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-394">标识 <see cref="P:System.Windows.FrameworkElement.Cursor" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-394">Identifies the <see cref="P:System.Windows.FrameworkElement.Cursor" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContext">
      <MemberSignature Language="C#" Value="public object DataContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DataContext" />
      <MemberSignature Language="VB.NET" Value="Public Property DataContext As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataContext { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataContext : obj with get, set" Usage="System.Windows.FrameworkElement.DataContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-395">获取或设置元素参与数据绑定时的数据上下文。</span><span class="sxs-lookup"><span data-stu-id="9a084-395">Gets or sets the data context for an element when it participates in data binding.</span></span></summary>
        <value><span data-ttu-id="9a084-396">要用作数据上下文的对象。</span><span class="sxs-lookup"><span data-stu-id="9a084-396">The object to use as data context.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-397">*数据上下文*是一种概念，允许元素从父元素继承有关用于绑定的数据源以及绑定的其他特征（如路径）的信息。</span><span class="sxs-lookup"><span data-stu-id="9a084-397">*Data context* is a concept that allows elements to inherit information from their parent elements about the data source that is used for binding, as well as other characteristics of the binding, such as the path.</span></span>  
  
 <span data-ttu-id="9a084-398">可以将数据上下文直接设置为 .NET 对象，并将绑定计算为该对象的属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-398">Data context can be set directly to a .NET object, with the bindings evaluating to properties of that object.</span></span> <span data-ttu-id="9a084-399">或者，您可以将数据上下文设置为 <xref:System.Windows.Data.DataSourceProvider> 对象。</span><span class="sxs-lookup"><span data-stu-id="9a084-399">Alternatively, you can set the data context to a <xref:System.Windows.Data.DataSourceProvider> object.</span></span>  
  
 <span data-ttu-id="9a084-400">此依赖属性继承属性值。</span><span class="sxs-lookup"><span data-stu-id="9a084-400">This dependency property inherits property values.</span></span> <span data-ttu-id="9a084-401">如果有子元素没有通过本地值或样式建立的 <xref:System.Windows.FrameworkElement.DataContext%2A> 的其他值，则属性系统会将该值设置为已分配此值的最近父元素的 <xref:System.Windows.FrameworkElement.DataContext%2A> 值。</span><span class="sxs-lookup"><span data-stu-id="9a084-401">If there are child elements without other values for <xref:System.Windows.FrameworkElement.DataContext%2A> established through local values or styles, then the property system will set the value to be the <xref:System.Windows.FrameworkElement.DataContext%2A> value of the nearest parent element with this value assigned.</span></span>  
  
 <span data-ttu-id="9a084-402">或者，您可以使用 <xref:System.Windows.Data.Binding> 类的以下属性之一来显式指定绑定源：</span><span class="sxs-lookup"><span data-stu-id="9a084-402">Alternatively, you can use one of the following properties of the <xref:System.Windows.Data.Binding> class to specify the binding source explicitly:</span></span>
  
    - <span data-ttu-id="9a084-403"><xref:System.Windows.Data.Binding.ElementName%2A> 列中的一个值匹配。</span><span class="sxs-lookup"><span data-stu-id="9a084-403"><xref:System.Windows.Data.Binding.ElementName%2A>.</span></span>
    - <span data-ttu-id="9a084-404"><xref:System.Windows.Data.Binding.Source%2A> 列中的一个值匹配。</span><span class="sxs-lookup"><span data-stu-id="9a084-404"><xref:System.Windows.Data.Binding.Source%2A>.</span></span>
    - <span data-ttu-id="9a084-405"><xref:System.Windows.Data.Binding.RelativeSource%2A> 列中的一个值匹配。</span><span class="sxs-lookup"><span data-stu-id="9a084-405"><xref:System.Windows.Data.Binding.RelativeSource%2A>.</span></span> 
  
  <span data-ttu-id="9a084-406">有关详细信息，请参阅[如何：指定绑定源](/dotnet/framework/wpf/data/how-to-specify-the-binding-source)。</span><span class="sxs-lookup"><span data-stu-id="9a084-406">For more information, see [How to: Specify the Binding Source](/dotnet/framework/wpf/data/how-to-specify-the-binding-source).</span></span>  
  
 <span data-ttu-id="9a084-407">在 XAML 中，<xref:System.Windows.FrameworkElement.DataContext%2A> 通常设置为 <xref:System.Windows.Data.Binding> 声明。</span><span class="sxs-lookup"><span data-stu-id="9a084-407">In XAML, <xref:System.Windows.FrameworkElement.DataContext%2A> is most typically set as a <xref:System.Windows.Data.Binding> declaration.</span></span> <span data-ttu-id="9a084-408">您可以使用属性元素语法或特性语法。</span><span class="sxs-lookup"><span data-stu-id="9a084-408">You can use either property element syntax or attribute syntax.</span></span> <span data-ttu-id="9a084-409">此页上的示例显示了特性语法。</span><span class="sxs-lookup"><span data-stu-id="9a084-409">Attribute syntax is shown in the example on this page.</span></span> <span data-ttu-id="9a084-410">你还可以使用代码设置 <xref:System.Windows.FrameworkElement.DataContext%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-410">You can also use code to set <xref:System.Windows.FrameworkElement.DataContext%2A>.</span></span>  
  
 <span data-ttu-id="9a084-411"><xref:System.Windows.FrameworkElement.DataContext%2A> 是一种可绑定的属性，可用于在一个上下文可能绑定到另一个上下文的情况下实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-411"><xref:System.Windows.FrameworkElement.DataContext%2A> is a bindable property to facilitate scenarios where one context might be bound to another.</span></span> <span data-ttu-id="9a084-412">但是，如果绑定到 <xref:System.Windows.FrameworkElement.DataContext%2A>，请注意不要创建循环绑定引用（不将 <xref:System.Windows.FrameworkElement.DataContext%2A> 绑定到其自身，因为 <xref:System.Windows.FrameworkElement.DataContext%2A> 属性的属性值继承特性）。</span><span class="sxs-lookup"><span data-stu-id="9a084-412">However, if you bind to <xref:System.Windows.FrameworkElement.DataContext%2A>, be careful to not create circular binding references (do not bind a <xref:System.Windows.FrameworkElement.DataContext%2A> to itself, which it is possible to do because of the property value inheritance nature of the <xref:System.Windows.FrameworkElement.DataContext%2A> property).</span></span>  
  
<a name="xamlPropertyElementUsage_DataContext"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9a084-413">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="9a084-413">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.DataContext>  
    <dataContextObject />  
  </object.DataContext>  
</object>  
```  
  
<a name="xamlAttributeUsage_DataContext"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a084-414">XAML 特性用法</span><span class="sxs-lookup"><span data-stu-id="9a084-414">XAML Attribute Usage</span></span>  
  
```xaml  
<object DataContext="bindingUsage"/>  
```

<span data-ttu-id="9a084-415">-或-</span><span class="sxs-lookup"><span data-stu-id="9a084-415">-or-</span></span>

```xaml
<object DataContext="{resourceExtension contextResourceKey}"/>  
```
  
<a name="xamlValues_DataContext"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a084-416">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9a084-416">XAML Values</span></span>  
 <span data-ttu-id="9a084-417">*dataContextObject*</span><span class="sxs-lookup"><span data-stu-id="9a084-417">*dataContextObject*</span></span>  
 <span data-ttu-id="9a084-418">作为父元素中任何绑定的数据上下文的直接嵌入对象。</span><span class="sxs-lookup"><span data-stu-id="9a084-418">A directly embedded object that serves as data context for any bindings within the parent element.</span></span> <span data-ttu-id="9a084-419">通常，此对象是 <xref:System.Windows.Data.Binding> 或另一个 <xref:System.Windows.Data.BindingBase> 派生类。</span><span class="sxs-lookup"><span data-stu-id="9a084-419">Typically, this object is a <xref:System.Windows.Data.Binding> or another <xref:System.Windows.Data.BindingBase> derived class.</span></span> <span data-ttu-id="9a084-420">或者，可将用于绑定的任何对象类型的原始数据放置在此处，并在以后定义实际绑定。</span><span class="sxs-lookup"><span data-stu-id="9a084-420">Alternatively, raw data of any object type intended for binding may be placed here, with the actual bindings defined later.</span></span>  
  
 <span data-ttu-id="9a084-421">*bindingUsage*</span><span class="sxs-lookup"><span data-stu-id="9a084-421">*bindingUsage*</span></span>  
 <span data-ttu-id="9a084-422">计算结果为适当数据上下文的绑定使用情况。</span><span class="sxs-lookup"><span data-stu-id="9a084-422">A binding usage that evaluates to an appropriate data context.</span></span> <span data-ttu-id="9a084-423">有关详细信息，请参阅 [Binding 标记扩展](/dotnet/framework/wpf/advanced/binding-markup-extension)。</span><span class="sxs-lookup"><span data-stu-id="9a084-423">For details, see [Binding Markup Extension](/dotnet/framework/wpf/advanced/binding-markup-extension).</span></span>  
  
 <span data-ttu-id="9a084-424">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="9a084-424">*resourceExtension*</span></span>  
 <span data-ttu-id="9a084-425">以下项之一： [`StaticResource`](/dotnet/framework/wpf/advanced/staticresource-markup-extension)或[`DynamicResource`](/dotnet/framework/wpf/advanced/dynamicresource-markup-extension)。</span><span class="sxs-lookup"><span data-stu-id="9a084-425">One of the following: [`StaticResource`](/dotnet/framework/wpf/advanced/staticresource-markup-extension) or [`DynamicResource`](/dotnet/framework/wpf/advanced/dynamicresource-markup-extension).</span></span> <span data-ttu-id="9a084-426">当引用定义为资源中的对象的原始数据时，将使用此用法。</span><span class="sxs-lookup"><span data-stu-id="9a084-426">This usage is used when referring to raw data defined as an object in resources.</span></span> <span data-ttu-id="9a084-427">请参阅[XAML 资源](/dotnet/framework/wpf/advanced/xaml-resources)。</span><span class="sxs-lookup"><span data-stu-id="9a084-427">See [XAML Resources](/dotnet/framework/wpf/advanced/xaml-resources).</span></span>  
  
 <span data-ttu-id="9a084-428">*contextResourceKey*</span><span class="sxs-lookup"><span data-stu-id="9a084-428">*contextResourceKey*</span></span>  
 <span data-ttu-id="9a084-429">要从 <xref:System.Windows.ResourceDictionary>中请求的对象的密钥标识符。</span><span class="sxs-lookup"><span data-stu-id="9a084-429">The key identifier for the object being requested from within a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
<a name="dependencyPropertyInfo_DataContext"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-430">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-430">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-431">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-431">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.DataContextProperty>|  
|<span data-ttu-id="9a084-432">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-432">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="9a084-433">下面的示例说明了数据上下文如何对绑定进行操作，并提供了定义绑定属性的特定值的信息。</span><span class="sxs-lookup"><span data-stu-id="9a084-433">The following example illustrates how a data context acts on a binding and provides the information that defines the specific values of bound properties.</span></span>  
  
 [!code-xaml[MasterDetail#DataContextProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty)]  
[!code-xaml[MasterDetail#DataContextProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty2)]  
[!code-xaml[MasterDetail#DataContextProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/MasterDetail/CSharp/Page1.xaml#datacontextproperty3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler DataContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler DataContextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.DataContextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataContextChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ DataContextChanged;" />
      <MemberSignature Language="F#" Value="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-434">在此元素的数据上下文更改时发生。</span><span class="sxs-lookup"><span data-stu-id="9a084-434">Occurs when the data context for this element changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-435">有关数据上下文和数据绑定的说明，请参阅[数据绑定概述](/dotnet/framework/wpf/data/data-binding-overview)。</span><span class="sxs-lookup"><span data-stu-id="9a084-435">For an explanation of data contexts and data binding, see [Data Binding Overview](/dotnet/framework/wpf/data/data-binding-overview).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9a084-436">当元素的 <xref:System.Windows.FrameworkElement.DataContext%2A> 更改时，此元素上的所有数据绑定属性都可能会受到影响。</span><span class="sxs-lookup"><span data-stu-id="9a084-436">When the <xref:System.Windows.FrameworkElement.DataContext%2A> for an element changes, all data-bound properties on this element are potentially affected.</span></span> <span data-ttu-id="9a084-437">这适用于作为逻辑树中当前元素的子元素的所有元素，这些元素继承数据上下文以及当前元素本身。</span><span class="sxs-lookup"><span data-stu-id="9a084-437">This applies to any elements that are child elements of the current element in the logical tree, which inherit the data context, and also the current element itself.</span></span> <span data-ttu-id="9a084-438">所有此类现有绑定都必须重新解释新 <xref:System.Windows.FrameworkElement.DataContext%2A>，并将重新计算绑定结果。</span><span class="sxs-lookup"><span data-stu-id="9a084-438">All such existing bindings must re-interpret the new <xref:System.Windows.FrameworkElement.DataContext%2A> and will reevaluate the binding results.</span></span> <span data-ttu-id="9a084-439">数据绑定引擎并不确定这些 reevaluations 的顺序，这与引发 <xref:System.Windows.FrameworkElement.DataContextChanged> 事件相关。</span><span class="sxs-lookup"><span data-stu-id="9a084-439">The data binding engine is not deterministic about the order of these reevaluations, relative to the raising of the <xref:System.Windows.FrameworkElement.DataContextChanged> event.</span></span> <span data-ttu-id="9a084-440">Reevaluations 可以在事件之前、事件之后或任何组合中发生。</span><span class="sxs-lookup"><span data-stu-id="9a084-440">The reevaluations can occur before the event, after the event, or in any mixture.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.DataContext" />
      </Docs>
    </Member>
    <Member MemberName="DataContextProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DataContextProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DataContextProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DataContextProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DataContextProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ DataContextProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DataContextProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.DataContextProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-441">标识 <see cref="P:System.Windows.FrameworkElement.DataContext" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-441">Identifies the <see cref="P:System.Windows.FrameworkElement.DataContext" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKey">
      <MemberSignature Language="C#" Value="protected internal object DefaultStyleKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultStyleKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property DefaultStyleKey As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Object ^ DefaultStyleKey { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultStyleKey : obj with get, set" Usage="System.Windows.FrameworkElement.DefaultStyleKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-442">获取或设置在使用或定义主题样式时要用于引用此控件样式的键。</span><span class="sxs-lookup"><span data-stu-id="9a084-442">Gets or sets the key to use to reference the style for this control, when theme styles are used or defined.</span></span></summary>
        <value><span data-ttu-id="9a084-443">样式键。</span><span class="sxs-lookup"><span data-stu-id="9a084-443">The style key.</span></span> <span data-ttu-id="9a084-444">要作为主题样式查找的一部分正常工作，此值应是带样式的控件的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-444">To work correctly as part of theme style lookup, this value is expected to be the <see cref="T:System.Type" /> of the control being styled.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-445">通常不通过其任何直接属性访问器设置此属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-445">This property is typically not set through any of its direct property accessors.</span></span> <span data-ttu-id="9a084-446">相反，每次创建新的 <xref:System.Windows.FrameworkElement> 派生类时，都要重写此依赖项属性的特定于类型的元数据。</span><span class="sxs-lookup"><span data-stu-id="9a084-446">Instead, you override the type-specific metadata of this dependency property every time you create a new <xref:System.Windows.FrameworkElement> derived class.</span></span> <span data-ttu-id="9a084-447">派生控件时，在控件派生类（或等效类初始化）的静态构造函数中，对 <xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty> 标识符调用 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-447">When you derive a control, call the <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method against the <xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty> identifier, within the static constructor of the control derived class (or equivalent class initialization).</span></span>  
  
 <span data-ttu-id="9a084-448">控件通常会将此属性的默认值覆盖为其自己的类型，但在某些情况下，可能还会使用主题字典中的样式所在的基类型。</span><span class="sxs-lookup"><span data-stu-id="9a084-448">A control typically overrides the default value of this property to be its own type, but in some cases could also use a base type for which a style in the theme dictionaries exists.</span></span> <span data-ttu-id="9a084-449">这仅适用于基本控件的控件模板完全定义该派生控件的可视化表示形式，并且如果派生类型公开的任何其他成员不需要作为控件模板的一部分的其他元素，这是可行的。</span><span class="sxs-lookup"><span data-stu-id="9a084-449">This is only practical if the control templates of the base control entirely define the visual representation of that derived control, and if whatever additional members the derived types expose do not require additional elements as part of the control template.</span></span>  
  
 <span data-ttu-id="9a084-450">如果你希望你的元素或控件特意不使用主题样式，请将 <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> 属性设置为 `true`。</span><span class="sxs-lookup"><span data-stu-id="9a084-450">If you want your element or control to deliberately not use theme styles, set the <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> property to `true`.</span></span>  
  
<a name="dependencyPropertyInfo_DefaultStyleKey"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-451">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-451">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-452">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-452">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.DefaultStyleKeyProperty>|  
|<span data-ttu-id="9a084-453">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-453">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="9a084-454">下面的示例演示了备注中讨论的依赖属性元数据覆盖用法。</span><span class="sxs-lookup"><span data-stu-id="9a084-454">The following example illustrates the dependency property metadata override usage discussed in Remarks.</span></span> <span data-ttu-id="9a084-455">此代码定义了一个自定义控件类 `NumericUpDown` 应从专用的控件库程序集使用。</span><span class="sxs-lookup"><span data-stu-id="9a084-455">This code defines a custom control class `NumericUpDown` intended to be used from a dedicated control library assembly.</span></span> <span data-ttu-id="9a084-456">阐释的静态构造函数引用了某些专用初始化函数、注册类处理程序（另一常见控件子类方案; 请参阅将[路由事件标记为已处理，以及类处理](/dotnet/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling)）并最终覆盖 `NumericUpDown` 类的 <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> 依赖项属性元数据。</span><span class="sxs-lookup"><span data-stu-id="9a084-456">The illustrated static constructor references some private initialization function, registers a class handler (another common control subclassing scenario; see [Marking Routed Events as Handled, and Class Handling](/dotnet/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling)) and finally overrides the <xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> dependency property metadata on the `NumericUpDown` class.</span></span> <span data-ttu-id="9a084-457"><xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> 始终将其自己的类型作为预期键返回，这是主题样式系统用于查找某些任意非样式控件的样式的约定。</span><span class="sxs-lookup"><span data-stu-id="9a084-457"><xref:System.Windows.FrameworkElement.DefaultStyleKey%2A> always returns its own type as the intended key, which is the convention that the theme style system uses to look up the style for some arbitrary otherwise non-styled control.</span></span> <span data-ttu-id="9a084-458">完整示例还定义了该键引用的实际控件主题样式;请参阅[NumericUpDown 自定义控件以及主题和 UI 自动化支持示例](https://go.microsoft.com/fwlink/?LinkID=160025)。</span><span class="sxs-lookup"><span data-stu-id="9a084-458">The complete sample also defines the actual control's theme style that is referenced by that key; see [NumericUpDown Custom Control with Theme and UI Automation Support Sample](https://go.microsoft.com/fwlink/?LinkID=160025).</span></span>  
  
 [!code-csharp[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary/NumericUpDown2.cs)]
 [!code-vb[CustomControlNumericUpDown#StaticCtorOfCustomClassCommonTasks](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary/numericupdown2.vb)]  

  <span data-ttu-id="9a084-459">GitHub 上提供了此示例的完整源代码[C#](https://github.com/dotnet/dotnet-api-docs/tree/master/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary) ，适用于和[Visual Basic](https://github.com/dotnet/dotnet-api-docs/tree/master/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary)。</span><span class="sxs-lookup"><span data-stu-id="9a084-459">The complete source code for this example is available on GitHub for both [C#](https://github.com/dotnet/dotnet-api-docs/tree/master/samples/snippets/csharp/VS_Snippets_Wpf/CustomControlNumericUpDown/CSharp/CustomControlLibrary) and [Visual Basic](https://github.com/dotnet/dotnet-api-docs/tree/master/samples/snippets/visualbasic/VS_Snippets_Wpf/CustomControlNumericUpDown/visualbasic/customcontrollibrary).</span></span>

 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160025"><span data-ttu-id="9a084-460">带有主题和 UI 自动化支持示例的 NumericUpDown 自定义控件</span><span class="sxs-lookup"><span data-stu-id="9a084-460">NumericUpDown Custom Control with Theme and UI Automation Support Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKeyProperty">
      <MemberSignature Language="C#" Value="protected internal static readonly System.Windows.DependencyProperty DefaultStyleKeyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly static initonly class System.Windows.DependencyProperty DefaultStyleKeyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared ReadOnly DefaultStyleKeyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="protected public: static initonly System::Windows::DependencyProperty ^ DefaultStyleKeyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultStyleKeyProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.DefaultStyleKeyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-461">标识 <see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-461">Identifies the <see cref="P:System.Windows.FrameworkElement.DefaultStyleKey" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="frameworkElement.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a084-462">指示元素的初始化过程已完成。</span><span class="sxs-lookup"><span data-stu-id="9a084-462">Indicates that the initialization process for the element is complete.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-463">如果之前调用了 <xref:System.Windows.FrameworkElement.BeginInit%2A>，则基实现将引发 <xref:System.Windows.FrameworkElement.Initialized> 事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-463">If <xref:System.Windows.FrameworkElement.BeginInit%2A> was previously called, the base implementation will raise the <xref:System.Windows.FrameworkElement.Initialized> event.</span></span> <span data-ttu-id="9a084-464">否则，如果未调用 <xref:System.Windows.FrameworkElement.BeginInit%2A> 或无法确定是否调用了 <xref:System.Windows.FrameworkElement.BeginInit%2A>，则不会引发 <xref:System.Windows.FrameworkElement.Initialized>，而是会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-464">Otherwise, if <xref:System.Windows.FrameworkElement.BeginInit%2A> was not called or it could not be determined whether <xref:System.Windows.FrameworkElement.BeginInit%2A> was called, <xref:System.Windows.FrameworkElement.Initialized> is not raised and an exception is thrown instead.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9a084-465">调用 <see cref="M:System.Windows.FrameworkElement.EndInit" /> 之前尚未在元素上调用 <see cref="M:System.Windows.FrameworkElement.BeginInit" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-465"><see cref="M:System.Windows.FrameworkElement.EndInit" /> was called without <see cref="M:System.Windows.FrameworkElement.BeginInit" /> having previously been called on the element.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="9a084-466">实现此方法可提供在元素加载过程中初始化元素时应发生的特殊处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-466">Implement this method to provide special handling that should happen when your element is initialized during the element loading process.</span></span>  
  
 <span data-ttu-id="9a084-467">你的实现应调用基实现，因为基（默认）实现设置了一些内部标志来跟踪初始化。</span><span class="sxs-lookup"><span data-stu-id="9a084-467">Your implementation should call the base implementation, because the base (default) implementation sets some internal flags to keep track of initialization.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.FindName : string -&gt; obj" Usage="frameworkElement.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a084-468">所请求元素的名称。</span><span class="sxs-lookup"><span data-stu-id="9a084-468">The name of the requested element.</span></span></param>
        <summary><span data-ttu-id="9a084-469">查找具有提供的标识符名的元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-469">Finds an element that has the provided identifier name.</span></span></summary>
        <returns><span data-ttu-id="9a084-470">请求的元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-470">The requested element.</span></span> <span data-ttu-id="9a084-471">如果找不到匹配的元素，该值将为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-471">This can be <see langword="null" /> if no matching element was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-472">如果元素包含子元素，则会以递归方式搜索所请求的命名元素的子元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-472">If the element has child elements, these child elements are all searched recursively for the requested named element.</span></span>  
  
 <span data-ttu-id="9a084-473"><xref:System.Windows.FrameworkElement.FindName%2A> 在当前元素的名称范围内运行。</span><span class="sxs-lookup"><span data-stu-id="9a084-473"><xref:System.Windows.FrameworkElement.FindName%2A> operates within the current element's namescope.</span></span> <span data-ttu-id="9a084-474">有关详细信息，请参阅[WPF XAML 名称范围](/dotnet/framework/wpf/advanced/wpf-xaml-namescopes)。</span><span class="sxs-lookup"><span data-stu-id="9a084-474">For details, see [WPF XAML Namescopes](/dotnet/framework/wpf/advanced/wpf-xaml-namescopes).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
        <related type="Article" href="https://msdn.microsoft.com/library/b7e61222-e8cf-48d2-acd0-6df3b7685d48"><span data-ttu-id="9a084-475">X：Name 特性</span><span class="sxs-lookup"><span data-stu-id="9a084-475">x:Name Attribute</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FindResource">
      <MemberSignature Language="C#" Value="public object FindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.FindResource : obj -&gt; obj" Usage="frameworkElement.FindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey"><span data-ttu-id="9a084-476">所请求资源的键标识符。</span><span class="sxs-lookup"><span data-stu-id="9a084-476">The key identifier for the requested resource.</span></span></param>
        <summary><span data-ttu-id="9a084-477">搜索具有指定密钥的资源，如果未找到请求的资源，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-477">Searches for a resource with the specified key, and throws an exception if the requested resource is not found.</span></span></summary>
        <returns><span data-ttu-id="9a084-478">所请求的资源。</span><span class="sxs-lookup"><span data-stu-id="9a084-478">The requested resource.</span></span> <span data-ttu-id="9a084-479">如果未找到具有所提供键的资源，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-479">If no resource with the provided key was found, an exception is thrown.</span></span> <span data-ttu-id="9a084-480">在发生异常的情况下，可能还会返回一个 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> 值。</span><span class="sxs-lookup"><span data-stu-id="9a084-480">An <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> value might also be returned in the exception case.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="9a084-481">如果对找不到的键调用此方法，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-481">If you call this method for a key that cannot be found, an exception is thrown.</span></span> <span data-ttu-id="9a084-482">如果不想处理通过调用 <xref:System.Windows.FrameworkElement.FindResource%2A>而产生的异常，请改为调用 <xref:System.Windows.FrameworkElement.TryFindResource%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-482">If you do not want to handle exceptions that result from calling <xref:System.Windows.FrameworkElement.FindResource%2A>, call <xref:System.Windows.FrameworkElement.TryFindResource%2A> instead.</span></span> <span data-ttu-id="9a084-483">当找不到请求的资源时，<xref:System.Windows.FrameworkElement.TryFindResource%2A> 返回 `null`，并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-483"><xref:System.Windows.FrameworkElement.TryFindResource%2A> returns `null` when a requested resource cannot be found, and does not throw an exception.</span></span>  
  
 <span data-ttu-id="9a084-484">如果在调用元素上找不到该资源，将在下一步搜索逻辑树中的父元素，然后搜索应用程序，然后是主题，最后是系统资源。</span><span class="sxs-lookup"><span data-stu-id="9a084-484">If the resource is not found on the calling element, the parent element in the logical tree is searched next, then the application, then themes, and finally system resources.</span></span> <span data-ttu-id="9a084-485">此查找方法与在标记中动态资源引用请求资源时搜索树的方式相同。</span><span class="sxs-lookup"><span data-stu-id="9a084-485">This lookup methodology is identical to how the tree is searched if a resource were requested by a dynamic resource reference in markup.</span></span> <span data-ttu-id="9a084-486">有关资源查找的详细信息，请参阅[XAML 资源](/dotnet/framework/wpf/advanced/xaml-resources)。</span><span class="sxs-lookup"><span data-stu-id="9a084-486">For more information about resource lookup, see [XAML Resources](/dotnet/framework/wpf/advanced/xaml-resources).</span></span>  
  
 <span data-ttu-id="9a084-487">通常，您会立即将 <xref:System.Windows.FrameworkElement.FindResource%2A> 返回值强制转换为使用返回的资源值设置的属性的类型。</span><span class="sxs-lookup"><span data-stu-id="9a084-487">Typically, you immediately cast a <xref:System.Windows.FrameworkElement.FindResource%2A> return value to the type of the property that you setting with the returned resource value.</span></span>  
  
 <span data-ttu-id="9a084-488">资源键不一定是字符串。</span><span class="sxs-lookup"><span data-stu-id="9a084-488">Resource keys are not necessarily strings.</span></span> <span data-ttu-id="9a084-489">例如，主题级别的控件样式被有意地键控到控件的 <xref:System.Type> 中，控件的应用程序或页面样式通常使用此相同的键约定。</span><span class="sxs-lookup"><span data-stu-id="9a084-489">For instance, styles for controls at the theme level are deliberately keyed to the <xref:System.Type> of the control, and application or page styles for controls typically use this same key convention.</span></span> <span data-ttu-id="9a084-490">有关详细信息，请参阅[样式设置和模板化](/dotnet/framework/wpf/controls/styling-and-templating)或[XAML 资源](/dotnet/framework/wpf/advanced/xaml-resources)。</span><span class="sxs-lookup"><span data-stu-id="9a084-490">For details, see [Styling and Templating](/dotnet/framework/wpf/controls/styling-and-templating) or [XAML Resources](/dotnet/framework/wpf/advanced/xaml-resources).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a084-491">下面的示例获取命名资源，并将其转换为适当的类型以填充属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-491">The following example obtains a named resource and casts it to an appropriate type to fill a property.</span></span>  
  
 [!code-csharp[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertiesOvwSupport/CSharp/page3.xaml.cs#resourceproceduralget)]
 [!code-vb[PropertiesOvwSupport#ResourceProceduralGet](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertiesOvwSupport/visualbasic/page3.xaml.vb#resourceproceduralget)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.ResourceReferenceKeyNotFoundException"><span data-ttu-id="9a084-492">找不到 <paramref name="resourceKey" />，且事件管理器对于 <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> 事件不存在。</span><span class="sxs-lookup"><span data-stu-id="9a084-492"><paramref name="resourceKey" /> was not found and an event handler does not exist for the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.</span></span>  
  
<span data-ttu-id="9a084-493">-或-</span><span class="sxs-lookup"><span data-stu-id="9a084-493">-or-</span></span> 
 <span data-ttu-id="9a084-494">找不到 <paramref name="resourceKey" />，且 <see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /> 属性在 <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> 事件中为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-494"><paramref name="resourceKey" /> was not found and the <see cref="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled" /> property is <see langword="false" /> in the <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> event.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9a084-495"><paramref name="resourceKey" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-495"><paramref name="resourceKey" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FlowDirection">
      <MemberSignature Language="C#" Value="public System.Windows.FlowDirection FlowDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FlowDirection FlowDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FlowDirection" />
      <MemberSignature Language="VB.NET" Value="Public Property FlowDirection As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::FlowDirection FlowDirection { System::Windows::FlowDirection get(); void set(System::Windows::FlowDirection value); };" />
      <MemberSignature Language="F#" Value="member this.FlowDirection : System.Windows.FlowDirection with get, set" Usage="System.Windows.FrameworkElement.FlowDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-496">获取或设置方向，文本和其他 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 元素在任何控制其布局的父元素中都按此方向流动。</span><span class="sxs-lookup"><span data-stu-id="9a084-496">Gets or sets the direction that text and other [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] elements flow within any parent element that controls their layout.</span></span></summary>
        <value><span data-ttu-id="9a084-497">文本和其他 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 元素在它们的父元素中的流动方向，是一个枚举值。</span><span class="sxs-lookup"><span data-stu-id="9a084-497">The direction that text and other [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] elements flow within their parent element, as a value of the enumeration.</span></span> <span data-ttu-id="9a084-498">默认值是 <see cref="F:System.Windows.FlowDirection.LeftToRight" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-498">The default value is <see cref="F:System.Windows.FlowDirection.LeftToRight" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-499">依赖属性用法设置此元素上的 <xref:System.Windows.FrameworkElement.FlowDirection%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-499">The dependency property usage sets the <xref:System.Windows.FrameworkElement.FlowDirection%2A> on this element.</span></span> <span data-ttu-id="9a084-500">由于属性值继承，因此在元素上设置 <xref:System.Windows.FrameworkElement.FlowDirection%2A> 可能会在未 <xref:System.Windows.FrameworkElement.FlowDirection%2A> 本地或其他方式（如样式）上设置 <xref:System.Windows.FrameworkElement.FlowDirection%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-500">Because of property value inheritance, setting <xref:System.Windows.FrameworkElement.FlowDirection%2A> on an element can potentially set <xref:System.Windows.FrameworkElement.FlowDirection%2A> on all child elements that did not set <xref:System.Windows.FrameworkElement.FlowDirection%2A> locally or though other means such as styles.</span></span>  
  
 <span data-ttu-id="9a084-501">此属性不会自动设置为任何应用程序区域性信息的一部分，因为元素可能包含不一定要遵循区域性信息隐含的一般流方向的内容。</span><span class="sxs-lookup"><span data-stu-id="9a084-501">This property is not automatically set as part of any application culture information, because an element might contain content that is not necessarily intended to obey the general flow direction implied by the culture information.</span></span> <span data-ttu-id="9a084-502">有关全球化注意事项的详细信息，请参阅[WPF 的全球化](/dotnet/framework/wpf/advanced/globalization-for-wpf)。</span><span class="sxs-lookup"><span data-stu-id="9a084-502">For more information on globalization considerations, see [Globalization for WPF](/dotnet/framework/wpf/advanced/globalization-for-wpf).</span></span>  
  
 <span data-ttu-id="9a084-503">此属性具有定义的 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 属性访问器，因此它将作为依赖属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-503">This property has a defined [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] property accessor, so it functions as a dependency property.</span></span> <span data-ttu-id="9a084-504">不过，它也注册为附加属性，因此它也可以作为附加属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-504">However, it is also registered as attached, so it can also function as an attached property.</span></span> <span data-ttu-id="9a084-505">附加的注册主要是为了支持属性值继承，但属性也可用作真正的附加属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-505">The attached registration is mainly so that property value inheritance is supported, but the property can also be used as a true attached property.</span></span> <span data-ttu-id="9a084-506">仅当要设置流方向的对象具有执行布局的 <xref:System.Windows.FrameworkElement> 父元素时，附加属性用法才适用，它本身不是 <xref:System.Windows.FrameworkElement>，并且还没有更直接定义 `FlowDirection` 属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-506">The attached property usage is only relevant if the object you intend to set the flow direction on has a <xref:System.Windows.FrameworkElement> parent element that performs layout upon it, is itself not a <xref:System.Windows.FrameworkElement>, and does not already have a more directly defined `FlowDirection` property.</span></span> <span data-ttu-id="9a084-507">（某些流文档类（如 <xref:System.Windows.Documents.Block> 和 <xref:System.Windows.Documents.Inline> 定义它们自己的 `FlowDirection`，并且此属性还可以设置流方向。</span><span class="sxs-lookup"><span data-stu-id="9a084-507">(Some of the flow document classes such as <xref:System.Windows.Documents.Block> and <xref:System.Windows.Documents.Inline> define their own `FlowDirection`, and this property can also set the flow direction.</span></span> <span data-ttu-id="9a084-508">然后，最终内容主机会读取属性值，而无需附加的属性用法。）</span><span class="sxs-lookup"><span data-stu-id="9a084-508">The property value is then read by the eventual content host without requiring attached property usage.)</span></span>  
  
<a name="xamlAttributeUsage_FlowDirection"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a084-509">XAML 特性用法</span><span class="sxs-lookup"><span data-stu-id="9a084-509">XAML Attribute Usage</span></span>  
 <span data-ttu-id="9a084-510">\<*对象* **system.windows.flowdirection>\*\*= "<xref:System.Windows.FlowDirection>"/></span><span class="sxs-lookup"><span data-stu-id="9a084-510">\<*object* **FlowDirection**="<xref:System.Windows.FlowDirection>"/></span></span>  
  
<a name="xamlTextUsage_FlowDirection"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="9a084-511">XAML 文本用法</span><span class="sxs-lookup"><span data-stu-id="9a084-511">XAML Text Usage</span></span>  
 <span data-ttu-id="9a084-512">还可以通过以下 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 附加属性用法，在不 <xref:System.Windows.FrameworkElement> 派生类的类上设置此属性：</span><span class="sxs-lookup"><span data-stu-id="9a084-512">This property can also be set on classes that are not <xref:System.Windows.FrameworkElement> derived classes, by the following [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attached property usage:</span></span>  
  
 <span data-ttu-id="9a084-513">`<`*对象*`FrameworkElement.`**system.windows.flowdirection>**= "<xref:System.Windows.FlowDirection>`"/>`</span><span class="sxs-lookup"><span data-stu-id="9a084-513">`<` *object* `FrameworkElement.`**FlowDirection**="<xref:System.Windows.FlowDirection>`"/>`</span></span>  
  
<a name="dependencyPropertyInfo_FlowDirection"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-514">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-514">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-515">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-515">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.FlowDirectionProperty>|  
|<span data-ttu-id="9a084-516">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-516">Metadata properties set to `true`</span></span>|<span data-ttu-id="9a084-517"><xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>、<xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>、<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A></span><span class="sxs-lookup"><span data-stu-id="9a084-517"><xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>, <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A></span></span>|  
  
 <span data-ttu-id="9a084-518">此属性既是依赖属性，也是附加属性;请参阅 "备注"。</span><span class="sxs-lookup"><span data-stu-id="9a084-518">This property is both a dependency property and an attached property; see Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlowDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FlowDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FlowDirectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FlowDirectionProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FlowDirectionProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FlowDirectionProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.FlowDirectionProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-519">标识 <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-519">Identifies the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style FocusVisualStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style FocusVisualStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusVisualStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ FocusVisualStyle { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FocusVisualStyle : System.Windows.Style with get, set" Usage="System.Windows.FrameworkElement.FocusVisualStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-520">获取或设置一个属性，该属性允许自定义此元素在捕获到键盘焦点时要应用于此元素的外观、效果或其他样式特征。</span><span class="sxs-lookup"><span data-stu-id="9a084-520">Gets or sets a property that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus.</span></span></summary>
        <value><span data-ttu-id="9a084-521">要应用于焦点的所需样式。</span><span class="sxs-lookup"><span data-stu-id="9a084-521">The desired style to apply on focus.</span></span> <span data-ttu-id="9a084-522">该依赖属性中声明的默认值是一个空的静态 <see cref="T:System.Windows.Style" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-522">The default value as declared in the dependency property is an empty static <see cref="T:System.Windows.Style" />.</span></span> <span data-ttu-id="9a084-523">但是，运行时的有效值通常是（但并非总是）控件的主题支持所提供的样式。</span><span class="sxs-lookup"><span data-stu-id="9a084-523">However, the effective value at run time is often (but not always) a style as supplied by theme support for controls.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-524">此属性会影响视觉外观，但不会在元数据中报告 <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-524">This property affects visual appearance but does not report <xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A> in metadata.</span></span> <span data-ttu-id="9a084-525">这是因为视觉外观更改是事件驱动的，可能不会在任何时候都适用，因此通常不会在元数据中报告任何视觉对象或布局信息。</span><span class="sxs-lookup"><span data-stu-id="9a084-525">This is because the visual appearance change is event-driven and may not apply at all times, and therefore should not generally report any visual or layout information in metadata.</span></span>  
  
 <span data-ttu-id="9a084-526">从概念上讲，应用于控件的焦点的视觉行为应与控件一致。</span><span class="sxs-lookup"><span data-stu-id="9a084-526">Conceptually, the visual behavior of focus applied to a control should be coherent from control to control.</span></span> <span data-ttu-id="9a084-527">强制一致性的最明智方式是仅在编写整个主题时更改焦点视觉样式。</span><span class="sxs-lookup"><span data-stu-id="9a084-527">The most sensible way to enforce coherence is to only change the focus visual style if you are composing an entire theme.</span></span> <span data-ttu-id="9a084-528">对单个控件样式设置此属性，而不是主题的一部分，这并不是此属性的预期用法，因为这可能会导致与键盘焦点有关的用户体验混乱。</span><span class="sxs-lookup"><span data-stu-id="9a084-528">Setting this property on individual control styles and not as part of a theme is not the intended usage of this property, because it may lead to a confusing user experience regarding keyboard focus.</span></span> <span data-ttu-id="9a084-529">如果要在主题中特意不连贯特定于控件的行为，一种更好的方法是在样式中使用各个输入状态属性（例如 <xref:System.Windows.UIElement.IsFocused%2A> 或 <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>）的触发器，并以不会直观干扰任何现有焦点视觉样式的方式执行此操作。</span><span class="sxs-lookup"><span data-stu-id="9a084-529">If you are intending control-specific behavior that is deliberately not coherent across a theme, a much better approach is to use triggers in styles for individual input state properties, such as <xref:System.Windows.UIElement.IsFocused%2A> or <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>, and to do so in a way that does not visually interfere with any existing focus visual style.</span></span> <span data-ttu-id="9a084-530">有关 <xref:System.Windows.FrameworkElement.FocusVisualStyle%2A> 和替代焦点属性的设计意图的详细信息，请参阅[为控件中的焦点设置样式和 FocusVisualStyle](/dotnet/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle)。</span><span class="sxs-lookup"><span data-stu-id="9a084-530">For more information on the design intention of <xref:System.Windows.FrameworkElement.FocusVisualStyle%2A> and alternative focus properties, see [Styling for Focus in Controls, and FocusVisualStyle](/dotnet/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle).</span></span>  
  
<a name="xamlAttributeUsage_FocusVisualStyle"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a084-531">XAML 特性用法</span><span class="sxs-lookup"><span data-stu-id="9a084-531">XAML Attribute Usage</span></span>  
  
```  
<object FocusVisualStyle="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_FocusVisualStyle"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9a084-532">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="9a084-532">XAML Property Element Usage</span></span>  
  
<a name="xamlValues_FocusVisualStyle"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a084-533">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9a084-533">XAML Values</span></span>  
 <span data-ttu-id="9a084-534">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="9a084-534">*resourceExtension*</span></span>  
 <span data-ttu-id="9a084-535">以下项之一：、或。</span><span class="sxs-lookup"><span data-stu-id="9a084-535">One of the following: , or .</span></span> <span data-ttu-id="9a084-536">请参阅[XAML 资源](/dotnet/framework/wpf/advanced/xaml-resources)。</span><span class="sxs-lookup"><span data-stu-id="9a084-536">See [XAML Resources](/dotnet/framework/wpf/advanced/xaml-resources).</span></span>  
  
 <span data-ttu-id="9a084-537">*styleResourceKey*</span><span class="sxs-lookup"><span data-stu-id="9a084-537">*styleResourceKey*</span></span>  
 <span data-ttu-id="9a084-538">标识所请求的样式的键。</span><span class="sxs-lookup"><span data-stu-id="9a084-538">The key that identifies the style being requested.</span></span> <span data-ttu-id="9a084-539">该键引用 <xref:System.Windows.ResourceDictionary>中的现有资源。</span><span class="sxs-lookup"><span data-stu-id="9a084-539">The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a084-540">属性元素语法在技术上是可行的，但不建议这样做。</span><span class="sxs-lookup"><span data-stu-id="9a084-540">Property element syntax is technically possible, but not recommended.</span></span> <span data-ttu-id="9a084-541">请参阅[内联样式和模板](/dotnet/framework/wpf/advanced/inline-styles-and-templates)。</span><span class="sxs-lookup"><span data-stu-id="9a084-541">See [Inline Styles and Templates](/dotnet/framework/wpf/advanced/inline-styles-and-templates).</span></span> <span data-ttu-id="9a084-542">也可以使用[TemplateBinding](/dotnet/framework/wpf/advanced/templatebinding-markup-extension)或 <xref:System.Windows.Data.Binding> 的绑定引用，但情况并不常见。</span><span class="sxs-lookup"><span data-stu-id="9a084-542">A binding reference using [TemplateBinding](/dotnet/framework/wpf/advanced/templatebinding-markup-extension) or <xref:System.Windows.Data.Binding> is also possible, but uncommon.</span></span>  
  
<a name="dependencyPropertyInfo_FocusVisualStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-543">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-543">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-544">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-544">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.FocusVisualStyleProperty>|  
|<span data-ttu-id="9a084-545">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-545">Metadata properties set to `true`</span></span>|<span data-ttu-id="9a084-546">无</span><span class="sxs-lookup"><span data-stu-id="9a084-546">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusVisualStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusVisualStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusVisualStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusVisualStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusVisualStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.FocusVisualStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-547">标识 <see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-547">Identifies the <see cref="P:System.Windows.FrameworkElement.FocusVisualStyle" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceCursor">
      <MemberSignature Language="C#" Value="public bool ForceCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ForceCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ForceCursor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForceCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ForceCursor { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ForceCursor : bool with get, set" Usage="System.Windows.FrameworkElement.ForceCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-548">获取或设置一个值，该值指示此 <see cref="T:System.Windows.FrameworkElement" /> 是否应该强制[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 按照 <see cref="P:System.Windows.FrameworkElement.Cursor" /> 属性所声明的方式呈现光标。</span><span class="sxs-lookup"><span data-stu-id="9a084-548">Gets or sets a value that indicates whether this <see cref="T:System.Windows.FrameworkElement" /> should force the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] to render the cursor as declared by the <see cref="P:System.Windows.FrameworkElement.Cursor" /> property.</span></span></summary>
        <value><span data-ttu-id="9a084-549">如果强制光标在位于此元素（包括所有子元素）上时的呈现使用光标的当前 <see cref="P:System.Windows.FrameworkElement.Cursor" /> 设置，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-549"><see langword="true" /> if cursor presentation while over this element is forced to use current <see cref="P:System.Windows.FrameworkElement.Cursor" /> settings for the cursor (including on all child elements); otherwise <see langword="false" />.</span></span> <span data-ttu-id="9a084-550">默认值是 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-550">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-551">如果将此属性设置为 `true` 将覆盖由子元素建立的游标首选项。</span><span class="sxs-lookup"><span data-stu-id="9a084-551">If you set this property to `true` you will override the cursor preferences established by child elements.</span></span> <span data-ttu-id="9a084-552">在一般的应用程序 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 中执行此操作可能会使用户感到困惑，特别是当子元素尝试指定游标时。</span><span class="sxs-lookup"><span data-stu-id="9a084-552">Doing so in general application [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] might be confusing for the user, particularly if child elements are attempting to specify cursors.</span></span> <span data-ttu-id="9a084-553">设置 <xref:System.Windows.FrameworkElement.ForceCursor%2A> 更适用于控件子类或复合方案。</span><span class="sxs-lookup"><span data-stu-id="9a084-553">Setting <xref:System.Windows.FrameworkElement.ForceCursor%2A> is more appropriate in control subclassing or compositing scenarios.</span></span>  
  
<a name="dependencyPropertyInfo_ForceCursor"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-554">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-554">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-555">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-555">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ForceCursorProperty>|  
|<span data-ttu-id="9a084-556">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-556">Metadata properties set to `true`</span></span>|<span data-ttu-id="9a084-557">无</span><span class="sxs-lookup"><span data-stu-id="9a084-557">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9a084-558">下面的示例强制游标值。</span><span class="sxs-lookup"><span data-stu-id="9a084-558">The following example forces the cursor value.</span></span>  
  
 [!code-xaml[ForceCursor#ForceCursor](~/samples/snippets/csharp/VS_Snippets_Wpf/ForceCursor/CS/default.xaml#forcecursor)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="ForceCursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ForceCursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ForceCursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ForceCursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ForceCursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ForceCursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ForceCursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-559">标识 <see cref="P:System.Windows.FrameworkElement.ForceCursor" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-559">Identifies the <see cref="P:System.Windows.FrameworkElement.ForceCursor" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpression">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression GetBindingExpression(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBindingExpression (dp As DependencyProperty) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ GetBindingExpression(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetBindingExpression : System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingExpression" Usage="frameworkElement.GetBindingExpression dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="9a084-560">要从中获取绑定的目标 <see cref="T:System.Windows.DependencyProperty" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-560">The target <see cref="T:System.Windows.DependencyProperty" /> to get the binding from.</span></span></param>
        <summary><span data-ttu-id="9a084-561">返回表示指定属性的绑定的 <see cref="T:System.Windows.Data.BindingExpression" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-561">Returns the <see cref="T:System.Windows.Data.BindingExpression" /> that represents the binding on the specified property.</span></span></summary>
        <returns><span data-ttu-id="9a084-562">如果目标属性具有活动的绑定，则返回 <see cref="T:System.Windows.Data.BindingExpression" />；否则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-562">A <see cref="T:System.Windows.Data.BindingExpression" /> if the target property has an active binding; otherwise, returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-563">检查 `null` 的返回值是一种技术，可用于确定属性是否具有活动绑定。</span><span class="sxs-lookup"><span data-stu-id="9a084-563">Checking the return value for `null` is a technique you can use to determine whether a property has an active binding.</span></span>  
  
 <span data-ttu-id="9a084-564">此方法实际上只是围绕 <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType> 方法的便利包装。</span><span class="sxs-lookup"><span data-stu-id="9a084-564">This method is really just a convenience wrapper around the <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9a084-565"><xref:System.Windows.FrameworkElement.GetBindingExpression%2A> 将当前实例和 `dp` 参数传递给 <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a084-565"><xref:System.Windows.FrameworkElement.GetBindingExpression%2A> passes the current instance and the `dp` parameter to <xref:System.Windows.Data.BindingOperations.GetBindingExpression%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Data.BindingOperations" />
      </Docs>
    </Member>
    <Member MemberName="GetFlowDirection">
      <MemberSignature Language="C#" Value="public static System.Windows.FlowDirection GetFlowDirection (System.Windows.DependencyObject element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.FlowDirection GetFlowDirection(class System.Windows.DependencyObject element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFlowDirection (element As DependencyObject) As FlowDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::FlowDirection GetFlowDirection(System::Windows::DependencyObject ^ element);" />
      <MemberSignature Language="F#" Value="static member GetFlowDirection : System.Windows.DependencyObject -&gt; System.Windows.FlowDirection" Usage="System.Windows.FrameworkElement.GetFlowDirection element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="9a084-566">要为其返回 <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> 的元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-566">The element to return a <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> for.</span></span></param>
        <summary><span data-ttu-id="9a084-567">获取指定的 <see cref="T:System.Windows.DependencyObject" /> 的 <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> 附加属性值。</span><span class="sxs-lookup"><span data-stu-id="9a084-567">Gets the value of the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> attached property for the specified <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="9a084-568">所请求的流方向（作为一个枚举值）。</span><span class="sxs-lookup"><span data-stu-id="9a084-568">The requested flow direction, as a value of the enumeration.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-569">此方法的主要用途是支持 <xref:System.Windows.FrameworkElement.FlowDirection%2A> 属性的附加属性语法，因此，提供的 <xref:System.Windows.FrameworkElement> 的子元素可指定其父元素中的排列方向。</span><span class="sxs-lookup"><span data-stu-id="9a084-569">The main purpose of this method is to support attached property syntax for the <xref:System.Windows.FrameworkElement.FlowDirection%2A> property, therefore allowing child elements of a provided <xref:System.Windows.FrameworkElement> to specify flow direction for the arrangement within their parent element.</span></span> <span data-ttu-id="9a084-570">若要获取当前 <xref:System.Windows.FrameworkElement>上的值，请使用 "直接 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 访问器 <xref:System.Windows.FrameworkElement.FlowDirection%2A>"。</span><span class="sxs-lookup"><span data-stu-id="9a084-570">To get the value on the current <xref:System.Windows.FrameworkElement>, use the direct [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] accessor <xref:System.Windows.FrameworkElement.FlowDirection%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="GetLayoutClip">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Geometry GetLayoutClip (System.Windows.Size layoutSlotSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Geometry GetLayoutClip(valuetype System.Windows.Size layoutSlotSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetLayoutClip (layoutSlotSize As Size) As Geometry" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Geometry ^ GetLayoutClip(System::Windows::Size layoutSlotSize);" />
      <MemberSignature Language="F#" Value="override this.GetLayoutClip : System.Windows.Size -&gt; System.Windows.Media.Geometry" Usage="frameworkElement.GetLayoutClip layoutSlotSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Geometry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutSlotSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="layoutSlotSize"><span data-ttu-id="9a084-571">执行可视化演示的元素的部分大小。</span><span class="sxs-lookup"><span data-stu-id="9a084-571">The size of the part of the element that does visual presentation.</span></span></param>
        <summary><span data-ttu-id="9a084-572">返回剪切蒙版的形状。</span><span class="sxs-lookup"><span data-stu-id="9a084-572">Returns a geometry for a clipping mask.</span></span> <span data-ttu-id="9a084-573">如果布局系统尝试排列的元素大小超过可用显示空间，将会应用蒙版。</span><span class="sxs-lookup"><span data-stu-id="9a084-573">The mask applies if the layout system attempts to arrange an element that is larger than the available display space.</span></span></summary>
        <returns><span data-ttu-id="9a084-574">剪切形状。</span><span class="sxs-lookup"><span data-stu-id="9a084-574">The clipping geometry.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-575">作为布局系统行为的一部分，将从 `layoutSlotSize` 中减去边距。</span><span class="sxs-lookup"><span data-stu-id="9a084-575">Margins will be subtracted from the `layoutSlotSize` as part of layout system behavior.</span></span>  
  
 <span data-ttu-id="9a084-576">返回的空引用指示将不会进行剪辑。</span><span class="sxs-lookup"><span data-stu-id="9a084-576">A returned null reference indicates that no clipping will occur.</span></span> <span data-ttu-id="9a084-577">当 <xref:System.Windows.UIElement.ClipToBounds%2A> `false`时，默认实现始终返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="9a084-577">The default implementation always returns `null` when <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`.</span></span> <span data-ttu-id="9a084-578">此方法重写 <xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a084-578">This method overrides <xref:System.Windows.UIElement.GetLayoutClip%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9a084-579"><xref:System.Windows.FrameworkElement> 实现在其计算中使用 <xref:System.Windows.FrameworkElement.MaxHeight%2A> 和 <xref:System.Windows.FrameworkElement.MaxWidth%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-579">The <xref:System.Windows.FrameworkElement> implementation uses <xref:System.Windows.FrameworkElement.MaxHeight%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A> in its calculations.</span></span> <span data-ttu-id="9a084-580"><xref:System.Windows.FrameworkElement> 的多个子类将再次重写此方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-580">Several subclasses of <xref:System.Windows.FrameworkElement> override this method again.</span></span> <span data-ttu-id="9a084-581"><xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType>，重写始终返回 `null`，因为装饰器通常特意在普通边界之外。</span><span class="sxs-lookup"><span data-stu-id="9a084-581"><xref:System.Windows.Documents.Adorner.GetLayoutClip%2A?displayProperty=nameWithType>, overrides to always return `null` because adorners are often deliberately outside the ordinary bounds.</span></span> <span data-ttu-id="9a084-582">如果 <xref:System.Windows.UIElement.ClipToBounds%2A> 为 `false`，则 <xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType> 和 <xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType> 返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="9a084-582"><xref:System.Windows.Controls.Canvas.GetLayoutClip%2A?displayProperty=nameWithType> and <xref:System.Windows.Controls.InkPresenter.GetLayoutClip%2A?displayProperty=nameWithType> return `null` if <xref:System.Windows.UIElement.ClipToBounds%2A> is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9a084-583">当 <see cref="P:System.Windows.UIElement.ClipToBounds" /> <see langword="false" />时，默认实现始终返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-583">The default implementation always returns <see langword="null" /> when <see cref="P:System.Windows.UIElement.ClipToBounds" /> is <see langword="false" />.</span></span> <span data-ttu-id="9a084-584">重写通常会保留此行为，尽管存在异常，具体取决于派生类及其布局逻辑相对于基类的关系和目的。</span><span class="sxs-lookup"><span data-stu-id="9a084-584">Overrides are generally expected to preserve this behavior, although there are exceptions, depending on the relationship and purpose of the derived class and its layout logic as opposed to the base class.</span></span></para></block>
        <altmember cref="P:System.Windows.UIElement.Clip" />
        <altmember cref="P:System.Windows.UIElement.ClipToBounds" />
      </Docs>
    </Member>
    <Member MemberName="GetTemplateChild">
      <MemberSignature Language="C#" Value="protected internal System.Windows.DependencyObject GetTemplateChild (string childName);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Windows.DependencyObject GetTemplateChild(string childName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetTemplateChild(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function GetTemplateChild (childName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; System::Windows::DependencyObject ^ GetTemplateChild(System::String ^ childName);" />
      <MemberSignature Language="F#" Value="member this.GetTemplateChild : string -&gt; System.Windows.DependencyObject" Usage="frameworkElement.GetTemplateChild childName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="childName"><span data-ttu-id="9a084-585">要查找的子级的名称。</span><span class="sxs-lookup"><span data-stu-id="9a084-585">Name of the child to find.</span></span></param>
        <summary><span data-ttu-id="9a084-586">返回实例化的 <see cref="T:System.Windows.Controls.ControlTemplate" /> 可视化树中的命名元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-586">Returns the named element in the visual tree of an instantiated <see cref="T:System.Windows.Controls.ControlTemplate" />.</span></span></summary>
        <returns><span data-ttu-id="9a084-587">请求的元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-587">The requested element.</span></span> <span data-ttu-id="9a084-588">如果具有所请求名称的元素不存在，则可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-588">May be <see langword="null" /> if no element of the requested name exists.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-589">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 中的模板具有独立的名称范围。</span><span class="sxs-lookup"><span data-stu-id="9a084-589">Templates in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] have a self-contained namescope.</span></span> <span data-ttu-id="9a084-590">这是因为模板是重复使用的，当控件的多个实例实例化其模板时，模板中定义的任何名称都不能保持唯一。</span><span class="sxs-lookup"><span data-stu-id="9a084-590">This is because templates are re-used, and any name defined in a template cannot remain unique when multiple instances of a control each instantiate its template.</span></span> <span data-ttu-id="9a084-591">调用 <xref:System.Windows.FrameworkElement.GetTemplateChild%2A> 方法，以返回对实例化后来自模板的对象的引用。</span><span class="sxs-lookup"><span data-stu-id="9a084-591">Call the <xref:System.Windows.FrameworkElement.GetTemplateChild%2A> method to return references to objects that come from the template after it is instantiated.</span></span> <span data-ttu-id="9a084-592">不能使用 <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> 方法来查找模板中的项，因为 <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> 在更通用的作用域中操作，并且在应用了 <xref:System.Windows.Controls.ControlTemplate> 类本身与实例化模板之间没有任何连接。</span><span class="sxs-lookup"><span data-stu-id="9a084-592">You cannot use the <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> method to find items from templates because <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> acts in a more general scope, and there is no connection between the <xref:System.Windows.Controls.ControlTemplate> class itself and the instantiated template once it is applied.</span></span>  
  
 <span data-ttu-id="9a084-593"><xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> 提供与此方法相同的函数。</span><span class="sxs-lookup"><span data-stu-id="9a084-593"><xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> supplies the same function as this method.</span></span> <span data-ttu-id="9a084-594"><xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> 是公共的，而不是受保护的，它将使用正确的名称范围注意事项，使其能够访问元素中的模板，并查找其中的已命名项。</span><span class="sxs-lookup"><span data-stu-id="9a084-594"><xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> is public instead of protected, and it uses correct name-scoping considerations that allow it to access the template within an element and find named items within it.</span></span> <span data-ttu-id="9a084-595">如果需要在其父控件之外获取元素，请使用 <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a084-595">Use <xref:System.Windows.FrameworkTemplate.FindName%2A?displayProperty=nameWithType> when you need to get an element outside of its parent control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkTemplate.FindName(System.String,System.Windows.FrameworkElement)" />
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal override System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="frameworkElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a084-596">如果没有视觉父级，则返回此元素的备用逻辑父级。</span><span class="sxs-lookup"><span data-stu-id="9a084-596">Returns an alternative logical parent for this element if there is no visual parent.</span></span></summary>
        <returns><span data-ttu-id="9a084-597">当此方法的 WPF 框架级别实现具有非视觉父级连接时，即返回 <see langword="null" /> 之外的内容。</span><span class="sxs-lookup"><span data-stu-id="9a084-597">Returns something other than <see langword="null" /> whenever a WPF framework-level implementation of this method has a non-visual parent connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-598">此方法重写 <xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a084-598">This method overrides <xref:System.Windows.UIElement.GetUIParentCore%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9a084-599">默认 <xref:System.Windows.FrameworkElement> 实现返回预期的单个可视父级，这与获取 <xref:System.Windows.FrameworkElement.Parent%2A> 值的结果相同。</span><span class="sxs-lookup"><span data-stu-id="9a084-599">The default <xref:System.Windows.FrameworkElement> implementation returns the expected single visual parent, which is the same result as getting the <xref:System.Windows.FrameworkElement.Parent%2A> value.</span></span> <span data-ttu-id="9a084-600">派生类实现可能返回备用的父关系。</span><span class="sxs-lookup"><span data-stu-id="9a084-600">Derived class implementations might return alternate parent relationships.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetVisualChild">
      <MemberSignature Language="C#" Value="protected override System.Windows.Media.Visual GetVisualChild (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Media.Visual GetVisualChild(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetVisualChild (index As Integer) As Visual" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Media::Visual ^ GetVisualChild(int index);" />
      <MemberSignature Language="F#" Value="override this.GetVisualChild : int -&gt; System.Windows.Media.Visual" Usage="frameworkElement.GetVisualChild index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Visual</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="9a084-601">集合中请求的子元素的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="9a084-601">The zero-based index of the requested child element in the collection.</span></span></param>
        <summary><span data-ttu-id="9a084-602">重写 <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" />，并从子元素集合中返回指定索引处的子元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-602">Overrides <see cref="M:System.Windows.Media.Visual.GetVisualChild(System.Int32)" />, and returns a child at the specified index from a collection of child elements.</span></span></summary>
        <returns><span data-ttu-id="9a084-603">请求的子元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-603">The requested child element.</span></span> <span data-ttu-id="9a084-604">这不应返回 <see langword="null" />；如果提供的索引超出范围，则引发异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-604">This should not return <see langword="null" />; if the provided index is out of range, an exception is thrown.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-605">在 <xref:System.Windows.FrameworkElement> 实现中，唯一有效的索引为零。</span><span class="sxs-lookup"><span data-stu-id="9a084-605">In the <xref:System.Windows.FrameworkElement> implementation, the only valid index is zero.</span></span> <span data-ttu-id="9a084-606"><xref:System.Windows.FrameworkElement.GetVisualChild%2A> 的内容模型支持零个或一个子元素，而不是一个集合。</span><span class="sxs-lookup"><span data-stu-id="9a084-606">The content model for <xref:System.Windows.FrameworkElement.GetVisualChild%2A> supports either zero or one child elements, not a collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a084-607">下面的示例演示自定义装饰器如何使用它为其多个视觉对象维护的 <xref:System.Windows.Media.VisualCollection> 所声明的值。</span><span class="sxs-lookup"><span data-stu-id="9a084-607">The following example shows how a custom adorner uses the values declared by a <xref:System.Windows.Media.VisualCollection> that it maintains for its multiple visual children.</span></span> <span data-ttu-id="9a084-608">这些值通过 <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> 和 <xref:System.Windows.FrameworkElement.GetVisualChild%2A>的替代进行报告。</span><span class="sxs-lookup"><span data-stu-id="9a084-608">These values are reported through overrides of <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.</span></span>  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9a084-609">此实现仅对没有维护更具描述性的可视化子元素集合的元素有效。</span><span class="sxs-lookup"><span data-stu-id="9a084-609">This implementation is only valid for elements that do not maintain any more descriptive collection of visual child elements.</span></span> <span data-ttu-id="9a084-610">确实具有此集合的任何元素都必须重写此方法，并将索引映射到该元素支持的子元素集合中的等效索引。</span><span class="sxs-lookup"><span data-stu-id="9a084-610">Any element that does have such a collection must override this method and map the index to an equivalent index in the child element collection that is supported by that element.</span></span> <span data-ttu-id="9a084-611">从零到 <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> （减1）的范围内的索引应返回有效的元素;任何其他索引应引发超出范围的异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-611">An index in the range from zero to <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> (minus one) should return a valid element; any other index should throw an out-of-range exception.</span></span> <span data-ttu-id="9a084-612">支持子集合并覆盖 <see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" /> 以返回多个可能的子级的元素类型的示例 <see cref="T:System.Windows.Controls.Panel" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-612">An example of an element type that does support a child collection and overrides <see cref="M:System.Windows.FrameworkElement.GetVisualChild(System.Int32)" /> to return more than one possible child is <see cref="T:System.Windows.Controls.Panel" />.</span></span>  
  
<span data-ttu-id="9a084-613"><see cref="T:System.Windows.FrameworkElement" /> 中的默认实现仅假定一个视觉对象。</span><span class="sxs-lookup"><span data-stu-id="9a084-613">The default implementation in <see cref="T:System.Windows.FrameworkElement" /> presumes only one visual child.</span></span> <span data-ttu-id="9a084-614">为 <paramref name="index" /> 以外的任何值传递的任何值都将导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-614">Any value passed for <paramref name="index" /> other than zero causes an exception to be thrown.</span></span> <span data-ttu-id="9a084-615">几个常见元素（如修饰器、装饰器或具有专用呈现的元素）会重写 <see cref="T:System.Windows.FrameworkElement" /> 实现（在中间基类中实现）。</span><span class="sxs-lookup"><span data-stu-id="9a084-615">Several common elements, such as decorators, adorners, or elements with specialized rendering, override the <see cref="T:System.Windows.FrameworkElement" /> implementation (of the implementation from intermediate base classes).</span></span> <span data-ttu-id="9a084-616">某些实现仍强制实施一个视觉对象，而其他实现则允许集合。</span><span class="sxs-lookup"><span data-stu-id="9a084-616">Some implementations still enforce one visual child whereas others allow a collection.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Height { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Height : double with get, set" Usage="System.Windows.FrameworkElement.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-617">获取或设置元素的建议高度。</span><span class="sxs-lookup"><span data-stu-id="9a084-617">Gets or sets the suggested height of the element.</span></span></summary>
        <value><span data-ttu-id="9a084-618">元素的高度（以 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] 为单位）。</span><span class="sxs-lookup"><span data-stu-id="9a084-618">The height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="9a084-619">默认值是 <see cref="F:System.Double.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-619">The default value is <see cref="F:System.Double.NaN" />.</span></span> <span data-ttu-id="9a084-620">此值必须等于或大于 0.0。</span><span class="sxs-lookup"><span data-stu-id="9a084-620">This value must be equal to or greater than 0.0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-621"><xref:System.Windows.FrameworkElement.Height%2A> 是指定高度信息 <xref:System.Windows.FrameworkElement> 上三个可写的属性之一。</span><span class="sxs-lookup"><span data-stu-id="9a084-621"><xref:System.Windows.FrameworkElement.Height%2A> is one of three writable properties on <xref:System.Windows.FrameworkElement> that specify height information.</span></span> <span data-ttu-id="9a084-622">另外两个 <xref:System.Windows.FrameworkElement.MinHeight%2A> 和 <xref:System.Windows.FrameworkElement.MaxHeight%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-622">The other two are <xref:System.Windows.FrameworkElement.MinHeight%2A> and <xref:System.Windows.FrameworkElement.MaxHeight%2A>.</span></span> <span data-ttu-id="9a084-623">如果这两个值之间存在冲突，则实际的高度决定的应用顺序是第一个 <xref:System.Windows.FrameworkElement.MinHeight%2A> 必须遵循，然后 <xref:System.Windows.FrameworkElement.MaxHeight%2A>，最后，如果它在边界内，则为 <xref:System.Windows.FrameworkElement.Height%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-623">If there is a conflict between these values, the order of application for actual height determination is that first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally, if it is within bounds, <xref:System.Windows.FrameworkElement.Height%2A>.</span></span>  
  
 <span data-ttu-id="9a084-624">如果此元素是某个其他元素内的子元素，则将此属性设置为值实际上只是一个建议值。</span><span class="sxs-lookup"><span data-stu-id="9a084-624">If this element is a child element within some other element, then setting this property to a value is really only a suggested value.</span></span> <span data-ttu-id="9a084-625">布局系统以及父元素的特定布局逻辑在布局过程中将使用该值作为非绑定的输入。</span><span class="sxs-lookup"><span data-stu-id="9a084-625">The layout system as well as the particular layout logic of the parent element will use the value as a nonbinding input during the layout process.</span></span> <span data-ttu-id="9a084-626">在实际情况下，<xref:System.Windows.FrameworkElement> 几乎始终是其他内容的子元素;即使在 <xref:System.Windows.Window>上设置 <xref:System.Windows.FrameworkElement.Height%2A> 也是如此。</span><span class="sxs-lookup"><span data-stu-id="9a084-626">In practical terms, a <xref:System.Windows.FrameworkElement> is almost always the child element of something else; even when you set the <xref:System.Windows.FrameworkElement.Height%2A> on <xref:System.Windows.Window>.</span></span> <span data-ttu-id="9a084-627">（对于 <xref:System.Windows.Window>，当基础应用程序模型建立创建承载应用程序的 Hwnd 的基本呈现假设时，使用该值。）</span><span class="sxs-lookup"><span data-stu-id="9a084-627">(For <xref:System.Windows.Window>, that value is used when the underlying application model establishes the basic rendering assumptions that create the Hwnd that hosts the application.)</span></span>  
  
 <span data-ttu-id="9a084-628">除了可接受的 <xref:System.Double> 值外，还可以 <xref:System.Double.NaN?displayProperty=nameWithType>此属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-628">In addition to acceptable <xref:System.Double> values, this property can also be <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9a084-629">这是在代码中指定自动调整大小行为的方式。</span><span class="sxs-lookup"><span data-stu-id="9a084-629">This is how you specify auto sizing behavior in code.</span></span> <span data-ttu-id="9a084-630">在 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 将值设置为字符串 "Auto" （不区分大小写）以启用自动调整大小行为。</span><span class="sxs-lookup"><span data-stu-id="9a084-630">In [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] you set the value to the string "Auto" (case insensitive) to enable the auto sizing behavior.</span></span> <span data-ttu-id="9a084-631">自动调整大小行为表示元素将填充其可用的高度。</span><span class="sxs-lookup"><span data-stu-id="9a084-631">Auto sizing behavior implies that the element will fill the height available to it.</span></span> <span data-ttu-id="9a084-632">但请注意，特定控件通常通过其默认主题样式来提供默认值，这些默认主题样式将禁用自动调整大小行为，除非专门重新启用。</span><span class="sxs-lookup"><span data-stu-id="9a084-632">Note however that specific controls frequently supply default values through their default theme styles that will disable the auto sizing behavior unless it is specifically re-enabled.</span></span>  
  
 <span data-ttu-id="9a084-633">此属性的返回值始终与任何设置为它的值相同。</span><span class="sxs-lookup"><span data-stu-id="9a084-633">The return value of this property is always the same as any value that was set to it.</span></span> <span data-ttu-id="9a084-634">相反，<xref:System.Windows.FrameworkElement.ActualHeight%2A> 的值可能会有所不同。</span><span class="sxs-lookup"><span data-stu-id="9a084-634">In contrast, the value of the <xref:System.Windows.FrameworkElement.ActualHeight%2A> may vary.</span></span> <span data-ttu-id="9a084-635">这可能是静态发生的，因为布局由于某种原因而拒绝建议大小，或者暂时发生。</span><span class="sxs-lookup"><span data-stu-id="9a084-635">This can happen either statically because the layout rejected the suggested size for some reason, or momentarily.</span></span> <span data-ttu-id="9a084-636">布局系统本身的工作方式相对于属性系统的 <xref:System.Windows.FrameworkElement.Height%2A> 集，可能尚未处理过特定大小调整属性更改的情况。</span><span class="sxs-lookup"><span data-stu-id="9a084-636">The layout system itself works asynchronously relative to the property system's set of <xref:System.Windows.FrameworkElement.Height%2A> and may not have processed that particular sizing property change yet.</span></span>  
  
 <span data-ttu-id="9a084-637"><xref:System.Double> 值的值限制由 <xref:System.Windows.ValidateValueCallback> 机制强制执行。</span><span class="sxs-lookup"><span data-stu-id="9a084-637">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="9a084-638">如果尝试设置一个无效值，则会引发运行时异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-638">If you attempt to set an invalid value, a run-time exception is thrown.</span></span>  
  
 <span data-ttu-id="9a084-639">除了验证检查，对于布局系统强制执行的 <xref:System.Windows.FrameworkElement.Height%2A> 还有一个不确定的上限值（这是一个非常大的数字，大于 <xref:System.Single.MaxValue?displayProperty=nameWithType> 但小于 <xref:System.Double.MaxValue?displayProperty=nameWithType>）。</span><span class="sxs-lookup"><span data-stu-id="9a084-639">In addition to the validation check, there is a nondeterministic upper value bound for <xref:System.Windows.FrameworkElement.Height%2A> that is enforced by the layout system (this is a very large number, larger than <xref:System.Single.MaxValue?displayProperty=nameWithType> but smaller than <xref:System.Double.MaxValue?displayProperty=nameWithType>).</span></span> <span data-ttu-id="9a084-640">如果超出此限制，元素将不会呈现，并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-640">If you exceed this bound, the element will not render, and no exception is thrown.</span></span> <span data-ttu-id="9a084-641">不要将 <xref:System.Windows.FrameworkElement.Height%2A> 设置为远远大于任何可能的视觉对象显示大小的最大大小的值，否则可能会超出此不确定性的上限。</span><span class="sxs-lookup"><span data-stu-id="9a084-641">Do not set <xref:System.Windows.FrameworkElement.Height%2A> to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.</span></span>  
  
<a name="xamlAttributeUsage_Height"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a084-642">XAML 特性用法</span><span class="sxs-lookup"><span data-stu-id="9a084-642">XAML Attribute Usage</span></span>  
  
```xaml
<object Height="double"/>  
```

<span data-ttu-id="9a084-643">-或-</span><span class="sxs-lookup"><span data-stu-id="9a084-643">-or-</span></span>

```xaml
<object Height="qualifiedDouble"/>  
```

<span data-ttu-id="9a084-644">-或-</span><span class="sxs-lookup"><span data-stu-id="9a084-644">-or-</span></span>

```xaml
<object Height="Auto"/>  
```  
  
<a name="xamlValues_Height"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a084-645">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9a084-645">XAML Values</span></span>  
 <span data-ttu-id="9a084-646">*double*</span><span class="sxs-lookup"><span data-stu-id="9a084-646">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="9a084-647">大于或等于 0.0 <xref:System.Double> 值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="9a084-647">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="9a084-648">请参阅“备注”以了解上限信息。</span><span class="sxs-lookup"><span data-stu-id="9a084-648">See Remarks for upper bound information.</span></span> <span data-ttu-id="9a084-649">此值被解释为 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] 度量。</span><span class="sxs-lookup"><span data-stu-id="9a084-649">This value is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="9a084-650">字符串不需要显式包含小数点。</span><span class="sxs-lookup"><span data-stu-id="9a084-650">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="9a084-651">例如，`1` 的值是可接受的。</span><span class="sxs-lookup"><span data-stu-id="9a084-651">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="9a084-652">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="9a084-652">*qualifiedDouble*</span></span>  
 <span data-ttu-id="9a084-653">如上所述的*双精度*值，后跟以下单元声明字符串之一： `px`、`in`、`cm``pt`。</span><span class="sxs-lookup"><span data-stu-id="9a084-653">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="9a084-654">`px` （默认值）为 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="9a084-654">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="9a084-655">`in` 为英寸;1in = = 96px</span><span class="sxs-lookup"><span data-stu-id="9a084-655">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="9a084-656">`cm` 是厘米;1cm = = （96/2.54） px</span><span class="sxs-lookup"><span data-stu-id="9a084-656">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="9a084-657">`pt` 为点;1pt = = （96/72） px</span><span class="sxs-lookup"><span data-stu-id="9a084-657">`pt` is points; 1pt==(96/72) px</span></span>  
  
 <span data-ttu-id="9a084-658">**Auto**</span><span class="sxs-lookup"><span data-stu-id="9a084-658">**Auto**</span></span>  
 <span data-ttu-id="9a084-659">启用自动调整行为。</span><span class="sxs-lookup"><span data-stu-id="9a084-659">Enables autosizing behavior.</span></span> <span data-ttu-id="9a084-660">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="9a084-660">See Remarks.</span></span>  
  
<a name="dependencyPropertyInfo_Height"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-661">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-661">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-662">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-662">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.HeightProperty>|  
|<span data-ttu-id="9a084-663">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-663">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.ActualHeight" />
      </Docs>
    </Member>
    <Member MemberName="HeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.HeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-664">标识 <see cref="P:System.Windows.FrameworkElement.Height" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-664">Identifies the <see cref="P:System.Windows.FrameworkElement.Height" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.HorizontalAlignment HorizontalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.HorizontalAlignment HorizontalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalAlignment As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::HorizontalAlignment HorizontalAlignment { System::Windows::HorizontalAlignment get(); void set(System::Windows::HorizontalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.HorizontalAlignment : System.Windows.HorizontalAlignment with get, set" Usage="System.Windows.FrameworkElement.HorizontalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-665">获取或设置在父元素(如 Panel 或项控件)中组合此元素时所应用的水平对齐特征。</span><span class="sxs-lookup"><span data-stu-id="9a084-665">Gets or sets the horizontal alignment characteristics applied to this element when it is composed within a parent element, such as a panel or items control.</span></span></summary>
        <value><span data-ttu-id="9a084-666">水平对齐设置，它是一个枚举值。</span><span class="sxs-lookup"><span data-stu-id="9a084-666">A horizontal alignment setting, as a value of the enumeration.</span></span> <span data-ttu-id="9a084-667">默认为 <see cref="F:System.Windows.HorizontalAlignment.Stretch" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-667">The default is <see cref="F:System.Windows.HorizontalAlignment.Stretch" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-668">在元素上显式设置 <xref:System.Windows.FrameworkElement.Height%2A> 和 <xref:System.Windows.FrameworkElement.Width%2A> 属性时，这些度量值会在布局中获得更高的引用单元格，并取消将 <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> 设置为 <xref:System.Windows.HorizontalAlignment.Stretch>的典型效果。</span><span class="sxs-lookup"><span data-stu-id="9a084-668">When <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.Width%2A> properties are explicitly set on an element, these measurements take higher precedent during layout and will cancel the typical effects of setting <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> to <xref:System.Windows.HorizontalAlignment.Stretch>.</span></span>  
  
 <span data-ttu-id="9a084-669"><xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> 是 [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] 属性访问器，对于实际上是依赖属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-669"><xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property.</span></span> <span data-ttu-id="9a084-670">这个特定依赖属性在子类元素（特别是控件）中以不同的方式设置其外观。</span><span class="sxs-lookup"><span data-stu-id="9a084-670">This particular dependency property quite frequently has its apparent "default" value set differently in subclassed elements, particularly controls.</span></span> <span data-ttu-id="9a084-671">这通常采用以下两种方式之一：依赖属性重新注册到特定子类，但使用不同的元数据设置其默认值;否则，将应用默认样式来设置该依赖属性值的不同值。</span><span class="sxs-lookup"><span data-stu-id="9a084-671">This generally occurs in one of two ways: the dependency property is re-registered to a particular subclass, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently.</span></span> <span data-ttu-id="9a084-672">例如，<xref:System.Windows.Controls.Label> 控件的 <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> 的外观 "默认" 将 <xref:System.Windows.HorizontalAlignment.Left>，即使 <xref:System.Windows.Controls.Label> 从 <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> 继承 <xref:System.Windows.FrameworkElement>直接。</span><span class="sxs-lookup"><span data-stu-id="9a084-672">For example, the apparent "default" of <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> for a <xref:System.Windows.Controls.Label> control will be <xref:System.Windows.HorizontalAlignment.Left>, even though <xref:System.Windows.Controls.Label> inherits <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> direct from <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="9a084-673">这是因为此值在样式的控件模板内 <xref:System.Windows.Controls.Label>默认样式中重置。</span><span class="sxs-lookup"><span data-stu-id="9a084-673">This is because that value was reset within the default style of <xref:System.Windows.Controls.Label>, within the style's control template.</span></span>  
  
 <span data-ttu-id="9a084-674"><xref:System.Windows.Controls.Canvas> 在编写布局时不使用 <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A>，因为 <xref:System.Windows.Controls.Canvas> 基于绝对定位。</span><span class="sxs-lookup"><span data-stu-id="9a084-674"><xref:System.Windows.Controls.Canvas> does not use <xref:System.Windows.FrameworkElement.HorizontalAlignment%2A> when composing layout, because <xref:System.Windows.Controls.Canvas> is based on absolute positioning.</span></span>  
  
 <span data-ttu-id="9a084-675">当由 <xref:System.Windows.Controls.Label> 或派生类继承时，<xref:System.Windows.Controls.Label> 将此依赖项属性的默认值重定义为 "<xref:System.Windows.HorizontalAlignment.Left>"。</span><span class="sxs-lookup"><span data-stu-id="9a084-675">When inherited by <xref:System.Windows.Controls.Label> or derived classes, <xref:System.Windows.Controls.Label> redefines the default value of this dependency property to be <xref:System.Windows.HorizontalAlignment.Left>.</span></span>  
  
<a name="dependencyPropertyInfo_HorizontalAlignment"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-676">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-676">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-677">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-677">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.HorizontalAlignmentProperty>|  
|<span data-ttu-id="9a084-678">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-678">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty HorizontalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty HorizontalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly HorizontalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ HorizontalAlignmentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable HorizontalAlignmentProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.HorizontalAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-679">标识 <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-679">Identifies the <see cref="P:System.Windows.FrameworkElement.HorizontalAlignment" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InheritanceBehavior">
      <MemberSignature Language="C#" Value="protected internal System.Windows.InheritanceBehavior InheritanceBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.InheritanceBehavior InheritanceBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property InheritanceBehavior As InheritanceBehavior" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Windows::InheritanceBehavior InheritanceBehavior { System::Windows::InheritanceBehavior get(); void set(System::Windows::InheritanceBehavior value); };" />
      <MemberSignature Language="F#" Value="member this.InheritanceBehavior : System.Windows.InheritanceBehavior with get, set" Usage="System.Windows.FrameworkElement.InheritanceBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.InheritanceBehavior</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-680">获取或设置属性值继承、资源键查找和RelativeSource FindAncestor 查找的范围限制。</span><span class="sxs-lookup"><span data-stu-id="9a084-680">Gets or sets the scope limits for property value inheritance, resource key lookup, and RelativeSource FindAncestor lookup.</span></span></summary>
        <value><span data-ttu-id="9a084-681">枚举的一个值。</span><span class="sxs-lookup"><span data-stu-id="9a084-681">A value of the enumeration.</span></span> <span data-ttu-id="9a084-682">默认为 <see cref="F:System.Windows.InheritanceBehavior.Default" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-682">The default is <see cref="F:System.Windows.InheritanceBehavior.Default" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-683">元素树中的某些边界 <xref:System.Windows.FrameworkElement.InheritanceBehavior%2A> 来特意限制继承行为的范围、强制资源查找检查应用程序资源，或防止 RelativeSource FindAncestor 查找查询当前元素或其他元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-683">Certain boundaries in the element tree set <xref:System.Windows.FrameworkElement.InheritanceBehavior%2A> to deliberately limit the scope of inheritance behavior, to a force resource lookup to check the application resources, or to prevent a RelativeSource FindAncestor lookup from querying the current element or any further.</span></span> <span data-ttu-id="9a084-684">当绑定使用 <xref:System.Windows.Data.RelativeSource.Mode%2A> 属性设置为 <xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType> 值的 <xref:System.Windows.Data.RelativeSource> 时，将发生 RelativeSource FindAncestor 查找。</span><span class="sxs-lookup"><span data-stu-id="9a084-684">RelativeSource FindAncestor lookup occurs when a binding uses a <xref:System.Windows.Data.RelativeSource> that has its <xref:System.Windows.Data.RelativeSource.Mode%2A> property set to the <xref:System.Windows.Data.RelativeSourceMode.FindAncestor?displayProperty=nameWithType> value.</span></span>  
  
 <span data-ttu-id="9a084-685">如果希望派生类设置此属性，则应在静态构造函数或其他初始化例程中执行此操作。</span><span class="sxs-lookup"><span data-stu-id="9a084-685">If you want your derived class to set this property, you should do so within the static constructor or in other initialization routines.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.Frame" />
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Initialized;" />
      <MemberSignature Language="F#" Value="member this.Initialized : EventHandler " Usage="member this.Initialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-686">初始化此 <see cref="T:System.Windows.FrameworkElement" /> 时发生。</span><span class="sxs-lookup"><span data-stu-id="9a084-686">Occurs when this <see cref="T:System.Windows.FrameworkElement" /> is initialized.</span></span> <span data-ttu-id="9a084-687">此事件与 <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> 属性的值从 <see langword="false" />（或未定义）更改为 <see langword="true" /> 的情况相符。</span><span class="sxs-lookup"><span data-stu-id="9a084-687">This event coincides with cases where the value of the <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> property changes from <see langword="false" /> (or undefined) to <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-688">当调用 <xref:System.Windows.FrameworkElement.EndInit%2A> 或 <xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A> 方法时，将引发此事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-688">This event will be raised whenever the <xref:System.Windows.FrameworkElement.EndInit%2A> or <xref:System.Windows.FrameworkElement.OnVisualParentChanged%2A> methods are called.</span></span> <span data-ttu-id="9a084-689">对任一方法的调用都可以来自应用程序代码，或在处理 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 页时通过 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 处理器行为。</span><span class="sxs-lookup"><span data-stu-id="9a084-689">Calls to either method could have come from application code, or through the [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] processor behavior when a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] page is processed.</span></span>  
  
 <span data-ttu-id="9a084-690">是否选择处理 <xref:System.Windows.FrameworkElement.Loaded> 或 <xref:System.Windows.FrameworkElement.Initialized> 取决于你的要求。</span><span class="sxs-lookup"><span data-stu-id="9a084-690">Whether you choose to handle <xref:System.Windows.FrameworkElement.Loaded> or <xref:System.Windows.FrameworkElement.Initialized> depends on your requirements.</span></span> <span data-ttu-id="9a084-691">如果不需要读取元素属性，而想要重置属性，并且不需要任何布局信息，<xref:System.Windows.FrameworkElement.Initialized> 可能是要采取的更好事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-691">If you do not need to read element properties, intend to reset properties, and do not need any layout information, <xref:System.Windows.FrameworkElement.Initialized> might be the better event to act upon.</span></span> <span data-ttu-id="9a084-692">如果需要元素的所有属性均可供使用，并且要设置可能重置布局的属性，<xref:System.Windows.FrameworkElement.Loaded> 可能是要执行操作的更好事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-692">If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, <xref:System.Windows.FrameworkElement.Loaded> might be the better event to act upon.</span></span> <span data-ttu-id="9a084-693">如果处理程序重置由布局系统解释的任何属性，以表示需要新的布局传递，请注意重入。</span><span class="sxs-lookup"><span data-stu-id="9a084-693">Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required.</span></span> <span data-ttu-id="9a084-694">（如果您不确定哪些属性在更改时需要新的布局传递，则您可能需要检查属性的 <xref:System.Windows.FrameworkPropertyMetadata> 值。）</span><span class="sxs-lookup"><span data-stu-id="9a084-694">(You might need to check the <xref:System.Windows.FrameworkPropertyMetadata> values on the property if you are unsure of which properties can require a new layout pass if they are changed.)</span></span>  
  
 <span data-ttu-id="9a084-695">有关 <xref:System.Windows.FrameworkElement>的对象事件顺序以及多个相关应用程序和元素类的详细信息，请参阅[对象生存期事件](/dotnet/framework/wpf/advanced/object-lifetime-events)。</span><span class="sxs-lookup"><span data-stu-id="9a084-695">For more information about the sequence of object events for a <xref:System.Windows.FrameworkElement>, and also for several related application and element classes, see [Object Lifetime Events](/dotnet/framework/wpf/advanced/object-lifetime-events).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InputScope">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputScope InputScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputScope InputScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.InputScope" />
      <MemberSignature Language="VB.NET" Value="Public Property InputScope As InputScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputScope ^ InputScope { System::Windows::Input::InputScope ^ get(); void set(System::Windows::Input::InputScope ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InputScope : System.Windows.Input.InputScope with get, set" Usage="System.Windows.FrameworkElement.InputScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-696">获取或设置此 <see cref="T:System.Windows.FrameworkElement" /> 使用的输入的上下文。</span><span class="sxs-lookup"><span data-stu-id="9a084-696">Gets or sets the context for input used by this <see cref="T:System.Windows.FrameworkElement" />.</span></span></summary>
        <value><span data-ttu-id="9a084-697">解释输入范围，在该输入范围内修改从其他输入法输入的方式。</span><span class="sxs-lookup"><span data-stu-id="9a084-697">The input scope, which modifies how input from alternative input methods is interpreted.</span></span> <span data-ttu-id="9a084-698">默认值为 <see langword="null" />（这将导致对命令的默认处理）。</span><span class="sxs-lookup"><span data-stu-id="9a084-698">The default value is <see langword="null" /> (which results in a default handling of commands).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-699">此依赖属性继承属性值。</span><span class="sxs-lookup"><span data-stu-id="9a084-699">This dependency property inherits property values.</span></span> <span data-ttu-id="9a084-700">如果有子元素没有通过本地值或样式建立的 <xref:System.Windows.FrameworkElement.InputScope%2A> 的其他值，则属性系统会将该值设置为已分配此值的最近上级元素的 <xref:System.Windows.FrameworkElement.InputScope%2A> 值。</span><span class="sxs-lookup"><span data-stu-id="9a084-700">If there are child elements without other values for <xref:System.Windows.FrameworkElement.InputScope%2A> established through local values or styles, then the property system will set the value to be the <xref:System.Windows.FrameworkElement.InputScope%2A> value of the nearest ancestor element with this value assigned.</span></span>  
  
 <span data-ttu-id="9a084-701">尽管列出了 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 语法用法并且在语法上是允许的，但在 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 中设置此属性并不常见。</span><span class="sxs-lookup"><span data-stu-id="9a084-701">Although a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax usage is listed and is syntactically allowed, setting this property in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] is not common.</span></span>  
  
<a name="dependencyPropertyInfo_InputScope"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-702">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-702">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-703">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-703">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.InputScopeProperty>|  
|<span data-ttu-id="9a084-704">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-704">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.InputScope" />
        <altmember cref="T:System.Windows.IInputElement" />
      </Docs>
    </Member>
    <Member MemberName="InputScopeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty InputScopeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty InputScopeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InputScopeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ InputScopeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable InputScopeProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.InputScopeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-705">标识 <see cref="P:System.Windows.FrameworkElement.InputScope" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-705">Identifies the <see cref="P:System.Windows.FrameworkElement.InputScope" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitialized : bool" Usage="System.Windows.FrameworkElement.IsInitialized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-706">获取一个值，该值表示该元素是否在由 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 处理器进行处理时，或者通过显式调用其 <see cref="M:System.Windows.FrameworkElement.EndInit" /> 方法被初始化。</span><span class="sxs-lookup"><span data-stu-id="9a084-706">Gets a value that indicates whether this element has been initialized, either during processing by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor, or by explicitly having its <see cref="M:System.Windows.FrameworkElement.EndInit" /> method called.</span></span></summary>
        <value><span data-ttu-id="9a084-707">如果该元素按照前面提到的 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 处理或者方法调用已被初始化，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-707"><see langword="true" /> if the element is initialized per the aforementioned [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processing or method calls; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-708">如果此元素已在逻辑树中移动，以使其具有新的父元素，并因此再次加载，则此属性也可能 `true`。</span><span class="sxs-lookup"><span data-stu-id="9a084-708">This property may also be `true` if this element has been moved within the logical tree such that it has a new parent element, and therefore becomes reloaded again.</span></span>  
  
 <span data-ttu-id="9a084-709">如果还在使用 <xref:System.Windows.FrameworkElement.BeginInit%2A> 和 <xref:System.Windows.FrameworkElement.EndInit%2A>，则此属性很有用。</span><span class="sxs-lookup"><span data-stu-id="9a084-709">This property is useful if you also are using <xref:System.Windows.FrameworkElement.BeginInit%2A> and <xref:System.Windows.FrameworkElement.EndInit%2A>.</span></span> <span data-ttu-id="9a084-710">可以确保初始化由 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 处理器加载的逻辑树中的元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-710">Elements in the logical tree that is loaded by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor are assured to be initialized.</span></span> <span data-ttu-id="9a084-711">调用 <xref:System.Windows.FrameworkElement.EndInit%2A> 时，将初始化不在逻辑树中的元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-711">Elements not in the logical tree are initialized when <xref:System.Windows.FrameworkElement.EndInit%2A> is called.</span></span> <span data-ttu-id="9a084-712">如果没有任何特定的 <xref:System.Windows.FrameworkElement.BeginInit%2A> 和 <xref:System.Windows.FrameworkElement.EndInit%2A>处理，则在构造函数返回初始化的结果后，就会发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="9a084-712">In absence of any specific handling of <xref:System.Windows.FrameworkElement.BeginInit%2A> and <xref:System.Windows.FrameworkElement.EndInit%2A>, this will happen as soon as the constructor returns the initialized result.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.IsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoaded { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoaded : bool" Usage="System.Windows.FrameworkElement.IsLoaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-713">获取一个值，该值指示是否已加载此元素以供呈现。</span><span class="sxs-lookup"><span data-stu-id="9a084-713">Gets a value that indicates whether this element has been loaded for presentation.</span></span></summary>
        <value><span data-ttu-id="9a084-714">如果当前元素被附加到元素树，则为 <see langword="true" />；如果该元素从未附加到所加载的元素树，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-714"><see langword="true" /> if the current element is attached to an element tree; <see langword="false" /> if the element has never been attached to a loaded element tree.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-715">从新构造的 <xref:System.Windows.FrameworkElement>中，此属性将在设置为 `true`后开始 `false`，并保持 `true`，即使该元素随后通过代码从连接的逻辑树中删除也是如此。</span><span class="sxs-lookup"><span data-stu-id="9a084-715">From a newly constructed <xref:System.Windows.FrameworkElement>, this property starts off `false`, and remains `true` after it is set to `true`, even if the element is subsequently removed from a connected logical tree by code.</span></span> <span data-ttu-id="9a084-716">当元素加载到表示引擎时，`true` 状态由常规表示逻辑设置。</span><span class="sxs-lookup"><span data-stu-id="9a084-716">`true` state is set by the general presentation logic when elements are loaded into the presentation engine.</span></span>  
  
 <span data-ttu-id="9a084-717">通常情况下，将呈现加载的元素，但不是所有 <xref:System.Windows.FrameworkElement> 派生类都有演示，其他属性（如 <xref:System.Windows.UIElement.Visibility%2A>）可能会影响演示。</span><span class="sxs-lookup"><span data-stu-id="9a084-717">Typically, loaded elements are rendered, but not all <xref:System.Windows.FrameworkElement> derived classes have a presentation, and other properties such as <xref:System.Windows.UIElement.Visibility%2A> can influence presentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a084-718">下面的示例实现了两个处理程序：一个处理程序正在处理根元素的 <xref:System.Windows.FrameworkElement.Loaded> 事件，因此，因为这是事件的重要性，所以请确保加载页面根元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-718">The following example implements two handlers: one is handling the <xref:System.Windows.FrameworkElement.Loaded> event of the root element, so it is certain that the page root element is loaded because that is the significance of the event.</span></span> <span data-ttu-id="9a084-719">其他处理程序与用户控件挂钩，并调用 <xref:System.Windows.FrameworkElement.IsLoaded%2A> 以确保完全加载根元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-719">The other handler is hooked to a user control, and calls <xref:System.Windows.FrameworkElement.IsLoaded%2A> to assure that the root element is loaded completely.</span></span> <span data-ttu-id="9a084-720">这两个处理程序调用将用新数据填充子元素的相同函数（未显示）。</span><span class="sxs-lookup"><span data-stu-id="9a084-720">Both handlers call the same function (not shown) that will populate child elements with fresh data.</span></span>  
  
 [!code-csharp[GroupBoxExample#FEIsLoaded](~/samples/snippets/csharp/VS_Snippets_Wpf/GroupBoxExample/CSharp/Page1.xaml.cs#feisloaded)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.XmlLanguage Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.XmlLanguage Language" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::XmlLanguage ^ Language { System::Windows::Markup::XmlLanguage ^ get(); void set(System::Windows::Markup::XmlLanguage ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Language : System.Windows.Markup.XmlLanguage with get, set" Usage="System.Windows.FrameworkElement.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-721">获取或设置应用于某个元素的本地化/全球化语言信息。</span><span class="sxs-lookup"><span data-stu-id="9a084-721">Gets or sets localization/globalization language information that applies to an element.</span></span></summary>
        <value><span data-ttu-id="9a084-722">此元素的语言信息。</span><span class="sxs-lookup"><span data-stu-id="9a084-722">The language information for this element.</span></span> <span data-ttu-id="9a084-723">默认值为 <see cref="T:System.Windows.Markup.XmlLanguage" />，它的 <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> 值设置为字符串 "zh-CN"。</span><span class="sxs-lookup"><span data-stu-id="9a084-723">The default value is an <see cref="T:System.Windows.Markup.XmlLanguage" /> with its <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> value set to the string "en-US".</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-724">字符串格式遵循 RFC 3066 标准。</span><span class="sxs-lookup"><span data-stu-id="9a084-724">The string formats follow the RFC 3066 standard.</span></span> <span data-ttu-id="9a084-725">例如，美国英语为 "en-us"。</span><span class="sxs-lookup"><span data-stu-id="9a084-725">For example, U.S. English is "en-US".</span></span> <span data-ttu-id="9a084-726">有关值和格式的详细信息，请参阅 <xref:System.Windows.Markup.XmlLanguage>。</span><span class="sxs-lookup"><span data-stu-id="9a084-726">For more information on the values and format, see <xref:System.Windows.Markup.XmlLanguage>.</span></span>  
  
 <span data-ttu-id="9a084-727">此依赖属性继承属性值。</span><span class="sxs-lookup"><span data-stu-id="9a084-727">This dependency property inherits property values.</span></span> <span data-ttu-id="9a084-728">如果有子元素没有通过本地值或样式建立 <xref:System.Windows.FrameworkElement.Language%2A> 的其他值，则属性系统会将该值设置为已分配此值的最近上级元素的 <xref:System.Windows.FrameworkElement.Language%2A> 值。</span><span class="sxs-lookup"><span data-stu-id="9a084-728">If there are child elements without other values for <xref:System.Windows.FrameworkElement.Language%2A> established through local values or styles, the property system will set the value to be the <xref:System.Windows.FrameworkElement.Language%2A> value of the nearest ancestor element with this value assigned.</span></span>  
  
 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] <span data-ttu-id="9a084-729">定义 `xml:lang` 特性的一般含义。</span><span class="sxs-lookup"><span data-stu-id="9a084-729">defines the general meaning of the `xml:lang` attribute.</span></span> <span data-ttu-id="9a084-730"><xref:System.Windows.FrameworkElement.Language%2A> 实质上是将此属性的含义公开为依赖属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-730"><xref:System.Windows.FrameworkElement.Language%2A> essentially exposes the meaning of this attribute as a dependency property.</span></span> <span data-ttu-id="9a084-731">可以通过编程方式调整 <xref:System.Windows.FrameworkElement.Language%2A>，并以与 `xml:lang` 属性可以继承到 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)]中的子元素范围相同的方式参与属性系统值继承。</span><span class="sxs-lookup"><span data-stu-id="9a084-731"><xref:System.Windows.FrameworkElement.Language%2A> can be adjusted programmatically, and can participate in property system value inheritance in a way that parallels how the `xml:lang` attribute can inherit to child element scope in [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)].</span></span> <span data-ttu-id="9a084-732">如果设置 <xref:System.Windows.FrameworkElement.Language%2A>，该值将成为 `xml:lang` 并覆盖以前的任何值。</span><span class="sxs-lookup"><span data-stu-id="9a084-732">If you set <xref:System.Windows.FrameworkElement.Language%2A>, that value becomes the `xml:lang` and overwrites any previous value.</span></span> <span data-ttu-id="9a084-733">有关详细信息，请参阅[XAML 中的 xml： Lang 处理](/dotnet/framework/xaml-services/xml-lang-handling-in-xaml)。</span><span class="sxs-lookup"><span data-stu-id="9a084-733">For more information, see [xml:lang Handling in XAML](/dotnet/framework/xaml-services/xml-lang-handling-in-xaml).</span></span>  
  
<a name="dependencyPropertyInfo_CultureInfo"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-734">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-734">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-735">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-735">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.LanguageProperty>|  
|<span data-ttu-id="9a084-736">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-736">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LanguageProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LanguageProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LanguageProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LanguageProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LanguageProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LanguageProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LanguageProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.LanguageProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-737">标识 <see cref="P:System.Windows.FrameworkElement.Language" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-737">Identifies the <see cref="P:System.Windows.FrameworkElement.Language" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransform">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Transform LayoutTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Transform LayoutTransform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LayoutTransform" />
      <MemberSignature Language="VB.NET" Value="Public Property LayoutTransform As Transform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Transform ^ LayoutTransform { System::Windows::Media::Transform ^ get(); void set(System::Windows::Media::Transform ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LayoutTransform : System.Windows.Media.Transform with get, set" Usage="System.Windows.FrameworkElement.LayoutTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Transform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-738">获取或设置在执行布局时应该应用于此元素的图形转换方式。</span><span class="sxs-lookup"><span data-stu-id="9a084-738">Gets or sets a graphics transformation that should apply to this element when  layout is performed.</span></span></summary>
        <value><span data-ttu-id="9a084-739">此元素应该使用的转换。</span><span class="sxs-lookup"><span data-stu-id="9a084-739">The transform this element should use.</span></span> <span data-ttu-id="9a084-740">默认为 <see cref="P:System.Windows.Media.Transform.Identity" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-740">The default is <see cref="P:System.Windows.Media.Transform.Identity" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-741">与 <xref:System.Windows.UIElement.RenderTransform%2A>相比，<xref:System.Windows.FrameworkElement.LayoutTransform%2A> 将影响布局的结果。</span><span class="sxs-lookup"><span data-stu-id="9a084-741">In contrast to <xref:System.Windows.UIElement.RenderTransform%2A>, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> will affect results of layout.</span></span>  
  
 <span data-ttu-id="9a084-742">设置转换可提供缩放和旋转的强大功能。</span><span class="sxs-lookup"><span data-stu-id="9a084-742">Setting a transform provides powerful capabilities of scaling and rotating.</span></span> <span data-ttu-id="9a084-743">但 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> 将忽略 <xref:System.Windows.Media.TranslateTransform> 操作。</span><span class="sxs-lookup"><span data-stu-id="9a084-743">However, <xref:System.Windows.FrameworkElement.LayoutTransform%2A> ignores <xref:System.Windows.Media.TranslateTransform> operations.</span></span> <span data-ttu-id="9a084-744">这是因为的子 <xref:System.Windows.FrameworkElement> 元素的布局系统行为会自动校正到已缩放或旋转元素位置的任何偏移量，以作为父元素的布局和坐标系统。</span><span class="sxs-lookup"><span data-stu-id="9a084-744">This is because the layout system behavior for child elements of a <xref:System.Windows.FrameworkElement> auto-corrects any offsets to the position of a scaled or rotated element into the layout and coordinate system of the parent element.</span></span>  
  
 <span data-ttu-id="9a084-745">如果在不需要布局系统进行完全传递的方案中调用，<xref:System.Windows.FrameworkElement.LayoutTransform%2A> 可能导致应用程序性能下降。</span><span class="sxs-lookup"><span data-stu-id="9a084-745"><xref:System.Windows.FrameworkElement.LayoutTransform%2A> can lead to poor application performance if you invoke it in a scenario that does not require a full pass by the layout system.</span></span> <span data-ttu-id="9a084-746">将 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> 应用到 <xref:System.Windows.Controls.Panel>的 <xref:System.Windows.Controls.Panel.Children%2A> 集合时，它会触发布局系统的新传递，并强制值和重新排列所有屏幕对象。</span><span class="sxs-lookup"><span data-stu-id="9a084-746">When you apply a <xref:System.Windows.FrameworkElement.LayoutTransform%2A> to the <xref:System.Windows.Controls.Panel.Children%2A> collection of the <xref:System.Windows.Controls.Panel>, it triggers a new pass by the layout system and forces all on-screen objects to be remeasured and rearranged.</span></span> <span data-ttu-id="9a084-747">如果要更新 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]的完整应用程序，则此功能可能正是您所需要的。</span><span class="sxs-lookup"><span data-stu-id="9a084-747">If you are updating the complete application [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)], this functionality might be exactly what you need.</span></span> <span data-ttu-id="9a084-748">但是，如果不需要完全布局处理过程，请使用 <xref:System.Windows.UIElement.RenderTransform%2A> 属性，该属性不会调用布局系统，因此通常是此方案的更好选择。</span><span class="sxs-lookup"><span data-stu-id="9a084-748">However, if you do not need a full layout pass, use the <xref:System.Windows.UIElement.RenderTransform%2A> property, which does not invoke the layout system, and therefore, is typically a better choice for this scenario.</span></span>  
  
 <span data-ttu-id="9a084-749"><xref:System.Windows.FrameworkElement.LayoutTransform%2A> 有用的示例方案包括：将元素（如菜单组件）从水平旋转到垂直，反之亦然，缩放元素（放大）焦点，提供编辑行为，等等。</span><span class="sxs-lookup"><span data-stu-id="9a084-749">Example scenarios where <xref:System.Windows.FrameworkElement.LayoutTransform%2A> would be useful include: rotating elements such as menu components from horizontal to vertical or vice versa, scaling elements (zooming in) on focus, providing editing behavior, etc.</span></span>  
  
<a name="dependencyPropertyInfo_LayoutTransform"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-750">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-750">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-751">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-751">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.LayoutTransformProperty>|  
|<span data-ttu-id="9a084-752">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-752">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="9a084-753">下面的示例演示如何将 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> 应用到元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-753">The following example shows how to apply a <xref:System.Windows.FrameworkElement.LayoutTransform%2A> to an element.</span></span> <span data-ttu-id="9a084-754">该示例创建一个 <xref:System.Windows.Controls.Button> 实例，并将其托管在父 <xref:System.Windows.Controls.Grid>内。</span><span class="sxs-lookup"><span data-stu-id="9a084-754">The example creates an instance of <xref:System.Windows.Controls.Button> and hosts it within a parent <xref:System.Windows.Controls.Grid>.</span></span> <span data-ttu-id="9a084-755">它还使用 <xref:System.Windows.FrameworkElement.LayoutTransform%2A> 属性将 <xref:System.Windows.Media.RotateTransform> 应用到 <xref:System.Windows.Controls.Button>。</span><span class="sxs-lookup"><span data-stu-id="9a084-755">It also uses the <xref:System.Windows.FrameworkElement.LayoutTransform%2A> property to apply a <xref:System.Windows.Media.RotateTransform> to the <xref:System.Windows.Controls.Button>.</span></span>  
  
 [!code-cpp[LayoutTransform#1](~/samples/snippets/cpp/VS_Snippets_Wpf/LayoutTransform/CPP/LayoutTransform.cpp#1)]
 [!code-csharp[LayoutTransform#1](~/samples/snippets/csharp/VS_Snippets_Wpf/LayoutTransform/CSharp/LayoutTransform.cs#1)]
 [!code-vb[LayoutTransform#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/LayoutTransform/VisualBasic/LayoutTransform.vb#1)]
 [!code-xaml[LayoutTransform#1](~/samples/snippets/xaml/VS_Snippets_Wpf/LayoutTransform/XAML/default.xaml#1)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=158252"><span data-ttu-id="9a084-756">二维转换示例</span><span class="sxs-lookup"><span data-stu-id="9a084-756">2-D Transforms Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LayoutTransformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LayoutTransformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LayoutTransformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LayoutTransformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LayoutTransformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LayoutTransformProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.LayoutTransformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-757">标识 <see cref="P:System.Windows.FrameworkElement.LayoutTransform" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-757">Identifies the <see cref="P:System.Windows.FrameworkElement.LayoutTransform" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Loaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Loaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Loaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Loaded;" />
      <MemberSignature Language="F#" Value="member this.Loaded : System.Windows.RoutedEventHandler " Usage="member this.Loaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-758">当对元素进行布局、呈现，且可将其用于交互时发生。</span><span class="sxs-lookup"><span data-stu-id="9a084-758">Occurs when the element is laid out, rendered, and ready for interaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-759"><xref:System.Windows.FrameworkElement.Loaded> 通常是在元素初始化序列中引发的最后一个事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-759"><xref:System.Windows.FrameworkElement.Loaded> is usually the last event raised in an element initialization sequence.</span></span> <span data-ttu-id="9a084-760">它将始终在 <xref:System.Windows.FrameworkElement.Initialized>后引发。</span><span class="sxs-lookup"><span data-stu-id="9a084-760">It will always be raised after <xref:System.Windows.FrameworkElement.Initialized>.</span></span> <span data-ttu-id="9a084-761">是否选择处理 <xref:System.Windows.FrameworkElement.Loaded> 或 <xref:System.Windows.FrameworkElement.Initialized> 取决于你的要求。</span><span class="sxs-lookup"><span data-stu-id="9a084-761">Whether you choose to handle <xref:System.Windows.FrameworkElement.Loaded> or <xref:System.Windows.FrameworkElement.Initialized> depends on your requirements.</span></span> <span data-ttu-id="9a084-762">如果不需要读取元素属性，而想要重置属性，并且不需要任何布局信息，<xref:System.Windows.FrameworkElement.Initialized> 可能是要采取的更好事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-762">If you do not need to read element properties, intend to reset properties, and do not need any layout information, <xref:System.Windows.FrameworkElement.Initialized> might be the better event to act upon.</span></span> <span data-ttu-id="9a084-763">如果需要元素的所有属性均可供使用，并且要设置可能重置布局的属性，<xref:System.Windows.FrameworkElement.Loaded> 可能是要执行操作的更好事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-763">If you need all properties of the element to be available, and you will be setting properties that are likely to reset the layout, <xref:System.Windows.FrameworkElement.Loaded> might be the better event to act upon.</span></span> <span data-ttu-id="9a084-764">如果处理程序重置由布局系统解释的任何属性，以表示需要新的布局传递，请注意重入。</span><span class="sxs-lookup"><span data-stu-id="9a084-764">Be careful of reentrancy if your handler resets any properties that are interpreted by the layout system to mean that a new layout pass is required.</span></span> <span data-ttu-id="9a084-765">（如果您不确定哪些属性在更改时需要新的布局传递，则您可能需要检查属性的 <xref:System.Windows.FrameworkPropertyMetadata> 值。）</span><span class="sxs-lookup"><span data-stu-id="9a084-765">(You might need to check the <xref:System.Windows.FrameworkPropertyMetadata> values on the property if you are unsure of which properties can require a new layout pass if they are changed.)</span></span>  
  
 <span data-ttu-id="9a084-766">有关 <xref:System.Windows.FrameworkElement>的对象事件顺序以及多个相关应用程序和元素类的详细信息，请参阅[对象生存期事件](/dotnet/framework/wpf/advanced/object-lifetime-events)。</span><span class="sxs-lookup"><span data-stu-id="9a084-766">For more information about the sequence of object events for a <xref:System.Windows.FrameworkElement>, and also for several related application and element classes, see [Object Lifetime Events](/dotnet/framework/wpf/advanced/object-lifetime-events).</span></span>  
  
 <span data-ttu-id="9a084-767">直接路由事件不遵循路由，它们只能在引发它们的同一元素内进行处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-767">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="9a084-768">直接路由事件支持其他路由事件行为：它们支持可访问的处理程序集合，并且可用作样式中的 <xref:System.Windows.EventTrigger>。</span><span class="sxs-lookup"><span data-stu-id="9a084-768">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
 <span data-ttu-id="9a084-769">由于用户启动的系统主题更改，<xref:System.Windows.FrameworkElement.Loaded> 和 <xref:System.Windows.FrameworkElement.Unloaded> 可能会在控件上引发。</span><span class="sxs-lookup"><span data-stu-id="9a084-769"><xref:System.Windows.FrameworkElement.Loaded> and <xref:System.Windows.FrameworkElement.Unloaded> might both be raised on controls as a result of user-initiated system theme changes.</span></span> <span data-ttu-id="9a084-770">主题更改会导致控件模板和包含的可视化树失效，这进而导致整个控件被卸载和重新加载。</span><span class="sxs-lookup"><span data-stu-id="9a084-770">A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload.</span></span> <span data-ttu-id="9a084-771">因此 <xref:System.Windows.FrameworkElement.Loaded> 无法假定仅在第一次通过导航到页面时才会发生。</span><span class="sxs-lookup"><span data-stu-id="9a084-771">Therefore <xref:System.Windows.FrameworkElement.Loaded> cannot be assumed to occur only when a page is first loaded through navigation to the page.</span></span>  
  
<a name="routedEventInfo_Loaded"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9a084-772">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="9a084-772">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-773">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-773">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.LoadedEvent>|  
|<span data-ttu-id="9a084-774">路由策略</span><span class="sxs-lookup"><span data-stu-id="9a084-774">Routing strategy</span></span>|<span data-ttu-id="9a084-775">直接</span><span class="sxs-lookup"><span data-stu-id="9a084-775">Direct</span></span>|  
|<span data-ttu-id="9a084-776">委托</span><span class="sxs-lookup"><span data-stu-id="9a084-776">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="LoadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LoadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LoadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.LoadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LoadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LoadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LoadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.LoadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-777">标识 <see cref="E:System.Windows.FrameworkElement.Loaded" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-777">Identifies the <see cref="E:System.Windows.FrameworkElement.Loaded" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-778">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="9a084-778">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9a084-779">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-779">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9a084-780">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="9a084-780">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9a084-781">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-781">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9a084-782">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-782">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalChildren : System.Collections.IEnumerator" Usage="System.Windows.FrameworkElement.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-783">获取此元素的逻辑子元素的一个枚举器。</span><span class="sxs-lookup"><span data-stu-id="9a084-783">Gets an enumerator for logical child elements of this element.</span></span></summary>
        <value><span data-ttu-id="9a084-784">此元素的逻辑子元素的一个枚举数。</span><span class="sxs-lookup"><span data-stu-id="9a084-784">An enumerator for logical child elements of this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-785"><xref:System.Windows.FrameworkElement.LogicalChildren%2A> 允许遍历子元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-785"><xref:System.Windows.FrameworkElement.LogicalChildren%2A> allows you to iterate over child elements.</span></span> <span data-ttu-id="9a084-786">这适用于可能不具有已定义专用集合但仍包含多个子元素（特别是 <xref:System.Windows.FrameworkContentElement> 子元素）的元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-786">This is useful for elements that may not have a defined, dedicated collection but still contain more than one child element, particularly <xref:System.Windows.FrameworkContentElement> child elements.</span></span>  
  
 <span data-ttu-id="9a084-787">有关如何使用 <xref:System.Windows.FrameworkElement.LogicalChildren%2A> 和 <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>的详细信息，请参阅[WPF 中的树](/dotnet/framework/wpf/advanced/trees-in-wpf)。</span><span class="sxs-lookup"><span data-stu-id="9a084-787">For more information on how to use <xref:System.Windows.FrameworkElement.LogicalChildren%2A> and <xref:System.Windows.FrameworkElement.AddLogicalChild%2A>, see [Trees in WPF](/dotnet/framework/wpf/advanced/trees-in-wpf).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c5358e14-d24c-44c7-b5eb-6062a4fd981c"><span data-ttu-id="9a084-788">x:Array 标记扩展</span><span class="sxs-lookup"><span data-stu-id="9a084-788">x:Array Markup Extension</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Margin" />
      <MemberSignature Language="VB.NET" Value="Public Property Margin As Thickness" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Thickness Margin { System::Windows::Thickness get(); void set(System::Windows::Thickness value); };" />
      <MemberSignature Language="F#" Value="member this.Margin : System.Windows.Thickness with get, set" Usage="System.Windows.FrameworkElement.Margin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-789">获取或设置元素的外边距。</span><span class="sxs-lookup"><span data-stu-id="9a084-789">Gets or sets the outer margin of an element.</span></span></summary>
        <value><span data-ttu-id="9a084-790">提供元素的边距值。</span><span class="sxs-lookup"><span data-stu-id="9a084-790">Provides margin values for the element.</span></span> <span data-ttu-id="9a084-791">默认值是所有属性都等于 0（零）的 <see cref="T:System.Windows.Thickness" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-791">The default value is a <see cref="T:System.Windows.Thickness" /> with all properties equal to 0 (zero).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-792">边距是在布局创建 [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)]时此元素和其他将相邻的元素之间的空间。</span><span class="sxs-lookup"><span data-stu-id="9a084-792">The margin is the space between this element and other elements that will be adjacent when layout creates the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span> <span data-ttu-id="9a084-793">共享的元素可能是对等元素（例如公共父控件的集合中的其他元素），也可能是此元素的父级。</span><span class="sxs-lookup"><span data-stu-id="9a084-793">Shared elements might be peer elements (such as other elements in the collection of a common parent control), or might also be this element's parent.</span></span>  
  
 <span data-ttu-id="9a084-794"><xref:System.Windows.FrameworkElement.Margin%2A> 设置为 <xref:System.Windows.Thickness> 结构而不是一个数字，以便可以以非对称方式设置边距。</span><span class="sxs-lookup"><span data-stu-id="9a084-794"><xref:System.Windows.FrameworkElement.Margin%2A> is set as a <xref:System.Windows.Thickness> structure rather than as a number so that the margin can be set asymmetrically.</span></span> <span data-ttu-id="9a084-795"><xref:System.Windows.Thickness> 结构本身支持字符串类型转换，因此，也可以 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 特性语法指定非对称 <xref:System.Windows.FrameworkElement.Margin%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-795">The <xref:System.Windows.Thickness> structure itself supports string type conversion so that you can specify an asymmetric <xref:System.Windows.FrameworkElement.Margin%2A> in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attribute syntax also.</span></span>  
  
 <span data-ttu-id="9a084-796">非零边距在元素布局的 <xref:System.Windows.FrameworkElement.ActualWidth%2A> 和 <xref:System.Windows.FrameworkElement.ActualHeight%2A>之外应用空间。</span><span class="sxs-lookup"><span data-stu-id="9a084-796">A non-zero margin applies space outside the element layout's <xref:System.Windows.FrameworkElement.ActualWidth%2A> and <xref:System.Windows.FrameworkElement.ActualHeight%2A>.</span></span>  
  
 <span data-ttu-id="9a084-797">对于布局中的同级元素，边距是累加的;例如，如果两个相邻的元素在相邻边缘上都设置为30，则它们之间的空间间距将为60。</span><span class="sxs-lookup"><span data-stu-id="9a084-797">Margins are additive for sibling elements in a layout; for example, two adjacent elements both with a margin of 30 set on the adjoining edge would have 60 units of space between them.</span></span>  
  
 <span data-ttu-id="9a084-798">如果为边距和元素内容区域分配的矩形空间不够大，则具有边距设置的元素通常不会限制指定 <xref:System.Windows.FrameworkElement.Margin%2A> 的大小。</span><span class="sxs-lookup"><span data-stu-id="9a084-798">Elements that have margins set will not typically constrain the size of the specified <xref:System.Windows.FrameworkElement.Margin%2A> if the allotted rectangle space is not large enough for the margin plus the element content area.</span></span> <span data-ttu-id="9a084-799">当计算布局时，元素内容区域将受到约束。</span><span class="sxs-lookup"><span data-stu-id="9a084-799">The element content area will be constrained instead when layout is calculated.</span></span> <span data-ttu-id="9a084-800">如果内容已被约束为零，则只会对边距进行约束。</span><span class="sxs-lookup"><span data-stu-id="9a084-800">The only case where margins would be constrained also is if the content is already constrained all the way to zero.</span></span>  
  
<a name="xamlAttributeUsage_Margin"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a084-801">XAML 特性用法</span><span class="sxs-lookup"><span data-stu-id="9a084-801">XAML Attribute Usage</span></span>  
  
```xaml  
<object Margin="left,top,right,bottom"/>  
```

<span data-ttu-id="9a084-802">-或-</span><span class="sxs-lookup"><span data-stu-id="9a084-802">-or-</span></span>

```xaml
<object Margin="left,top"/>  
```

<span data-ttu-id="9a084-803">-或-</span><span class="sxs-lookup"><span data-stu-id="9a084-803">-or-</span></span>  

```xaml
<object Margin="thicknessReference"/>  
```

<a name="xamlPropertyElementUsage_Margin"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9a084-804">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="9a084-804">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Margin>  
    <Thickness Left="left" Top="top" Right="right" Bottom="bottom"/>  
  </object.Margin>  
</object>  
```  
  
<a name="xamlValues_Margin"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a084-805">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9a084-805">XAML Values</span></span>  
 <span data-ttu-id="9a084-806">*左、上、右、下*</span><span class="sxs-lookup"><span data-stu-id="9a084-806">*left, top, right, bottom*</span></span>  
 <span data-ttu-id="9a084-807">介于0和 <xref:System.Double.PositiveInfinity> 之间的数值，用于指定 <xref:System.Windows.Thickness> 结构的四个可能的维度属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-807">Number values between 0 and <xref:System.Double.PositiveInfinity> that specify the four possible dimension properties of a <xref:System.Windows.Thickness> structure.</span></span>  
  
 <span data-ttu-id="9a084-808">属性用法还会接受以对称方式和逻辑方式应用的顺序应用的缩略值。</span><span class="sxs-lookup"><span data-stu-id="9a084-808">The attribute usage will also accept abbreviated values that apply in the order provided, symmetrically and logically.</span></span> <span data-ttu-id="9a084-809">例如，`Margin="20"` 将被解释为表示 <xref:System.Windows.Thickness> 并将所有属性设置为20。</span><span class="sxs-lookup"><span data-stu-id="9a084-809">For instance, `Margin="20"` will be interpreted to mean a <xref:System.Windows.Thickness> with all properties set to 20.</span></span> <span data-ttu-id="9a084-810">`Margin="20,50"` 将被解释为表示 <xref:System.Windows.Thickness.Left%2A> 和 <xref:System.Windows.Thickness.Right%2A> 的 <xref:System.Windows.Thickness> 设置为20，<xref:System.Windows.Thickness.Top%2A> 和 <xref:System.Windows.Thickness.Bottom%2A> 设置为50。</span><span class="sxs-lookup"><span data-stu-id="9a084-810">`Margin="20,50"` will be interpreted to mean a <xref:System.Windows.Thickness> with <xref:System.Windows.Thickness.Left%2A> and <xref:System.Windows.Thickness.Right%2A> set to 20, and <xref:System.Windows.Thickness.Top%2A> and <xref:System.Windows.Thickness.Bottom%2A> set to 50.</span></span>  
  
 <span data-ttu-id="9a084-811"><xref:System.Windows.Thickness> 度量值的默认单位为 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="9a084-811">The default unit for a <xref:System.Windows.Thickness> measure is [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)].</span></span> <span data-ttu-id="9a084-812">还可以通过将单元类型字符串追加到任何度量值 `cm`、`in`或 `pt` 来指定其他单位。</span><span class="sxs-lookup"><span data-stu-id="9a084-812">You can also specify other units by appending the unit type strings `cm`, `in`, or `pt` to any measure.</span></span>  
  
 <span data-ttu-id="9a084-813">作为 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 属性提供的数字值不需要指定小数点（0是可接受的，无需作为0.0 提供）。</span><span class="sxs-lookup"><span data-stu-id="9a084-813">Number values provided as [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] attributes need not specify decimal points (0 is acceptable, does not have to be provided as 0.0).</span></span> <span data-ttu-id="9a084-814">有关 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 用法的详细信息，请参阅 <xref:System.Windows.Thickness>。</span><span class="sxs-lookup"><span data-stu-id="9a084-814">For more information on [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] usage, see <xref:System.Windows.Thickness>.</span></span>  
  
 <span data-ttu-id="9a084-815">*thicknessReference*</span><span class="sxs-lookup"><span data-stu-id="9a084-815">*thicknessReference*</span></span>  
 <span data-ttu-id="9a084-816">对现有 <xref:System.Windows.Thickness>的对象引用。</span><span class="sxs-lookup"><span data-stu-id="9a084-816">An object reference to an existing <xref:System.Windows.Thickness>.</span></span> <span data-ttu-id="9a084-817">这可能是 `}`、或 `}` 引用。</span><span class="sxs-lookup"><span data-stu-id="9a084-817">This might be a `}`, a , or `}` reference.</span></span> <span data-ttu-id="9a084-818">有关 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 用法的详细信息，请参阅 <xref:System.Windows.Thickness>。</span><span class="sxs-lookup"><span data-stu-id="9a084-818">For more information on [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] usage, see <xref:System.Windows.Thickness>.</span></span>  
  
<a name="dependencyPropertyInfo_Margin"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-819">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-819">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-820">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-820">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MarginProperty>|  
|<span data-ttu-id="9a084-821">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-821">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Thickness" />
      </Docs>
    </Member>
    <Member MemberName="MarginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MarginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MarginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MarginProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MarginProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MarginProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MarginProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MarginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-822">标识 <see cref="P:System.Windows.FrameworkElement.Margin" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-822">Identifies the <see cref="P:System.Windows.FrameworkElement.Margin" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeight">
      <MemberSignature Language="C#" Value="public double MaxHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxHeight { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MaxHeight : double with get, set" Usage="System.Windows.FrameworkElement.MaxHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-823">获取或设置元素的最大高度约束。</span><span class="sxs-lookup"><span data-stu-id="9a084-823">Gets or sets the maximum height constraint of the element.</span></span></summary>
        <value><span data-ttu-id="9a084-824">元素的最大高度（以 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] 为单位）。</span><span class="sxs-lookup"><span data-stu-id="9a084-824">The maximum height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="9a084-825">默认值是 <see cref="F:System.Double.PositiveInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-825">The default value is <see cref="F:System.Double.PositiveInfinity" />.</span></span> <span data-ttu-id="9a084-826">该值可以是等于或大于 0.0 的任何值。</span><span class="sxs-lookup"><span data-stu-id="9a084-826">This value can be any value equal to or greater than 0.0.</span></span> <span data-ttu-id="9a084-827"><see cref="F:System.Double.PositiveInfinity" /> 也是有效的。</span><span class="sxs-lookup"><span data-stu-id="9a084-827"><see cref="F:System.Double.PositiveInfinity" /> is also valid.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-828">这是 <xref:System.Windows.FrameworkElement> 中指定高度信息的三个属性之一。</span><span class="sxs-lookup"><span data-stu-id="9a084-828">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify height information.</span></span> <span data-ttu-id="9a084-829">另外两个 <xref:System.Windows.FrameworkElement.MinHeight%2A> 和 <xref:System.Windows.FrameworkElement.Height%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-829">The other two are <xref:System.Windows.FrameworkElement.MinHeight%2A> and <xref:System.Windows.FrameworkElement.Height%2A>.</span></span>  <span data-ttu-id="9a084-830">如果这两个值之间存在冲突，则必须先使用应用程序的实际顺序确定，然后 <xref:System.Windows.FrameworkElement.MaxHeight%2A>，最后，如果其中每个 <xref:System.Windows.FrameworkElement.MinHeight%2A> 都在界限内，<xref:System.Windows.FrameworkElement.Height%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-830">If there is a conflict between these values, the order of application for actual height determination is first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Height%2A>.</span></span>  
  
 <span data-ttu-id="9a084-831"><xref:System.Double> 值的值限制由 <xref:System.Windows.ValidateValueCallback> 机制强制执行。</span><span class="sxs-lookup"><span data-stu-id="9a084-831">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="9a084-832">如果尝试设置无效的值，则会引发运行时异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-832">If you attempt to set an invalid value a run-time exception is thrown.</span></span>  
  
<a name="xamlAttributeUsage_MaxHeight"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a084-833">XAML 特性用法</span><span class="sxs-lookup"><span data-stu-id="9a084-833">XAML Attribute Usage</span></span>  
  
```xaml  
<object MaxHeight="double"/>  
```

<span data-ttu-id="9a084-834">-或-</span><span class="sxs-lookup"><span data-stu-id="9a084-834">-or-</span></span>

```xaml
<object MaxHeight ="qualifiedDouble"/>  
```

<a name="xamlValues_MaxHeight"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a084-835">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9a084-835">XAML Values</span></span>  
 <span data-ttu-id="9a084-836">*double*</span><span class="sxs-lookup"><span data-stu-id="9a084-836">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="9a084-837">大于或等于 0.0 <xref:System.Double> 值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="9a084-837">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="9a084-838">这被解释为 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] 度量。</span><span class="sxs-lookup"><span data-stu-id="9a084-838">This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="9a084-839">字符串不需要显式包含小数点。</span><span class="sxs-lookup"><span data-stu-id="9a084-839">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="9a084-840">例如，`1` 的值是可接受的。</span><span class="sxs-lookup"><span data-stu-id="9a084-840">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="9a084-841">与属性值部分中提到的 <xref:System.Double> 范围限制相同，不同之处在于，如果需要显式设置要 <xref:System.Double.PositiveInfinity>的值，则必须使用[X:Static 标记扩展](/dotnet/framework/xaml-services/x-static-markup-extension)。</span><span class="sxs-lookup"><span data-stu-id="9a084-841">The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply, except that you must use [x:Static Markup Extension](/dotnet/framework/xaml-services/x-static-markup-extension) if you need to explicitly set the value to be <xref:System.Double.PositiveInfinity>.</span></span>  
  
 <span data-ttu-id="9a084-842">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="9a084-842">*qualifiedDouble*</span></span>  
 <span data-ttu-id="9a084-843">如上所述的*双精度*值，后跟以下单元声明字符串之一： `px`、`in`、`cm``pt`。</span><span class="sxs-lookup"><span data-stu-id="9a084-843">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="9a084-844">`px` （默认值）为 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="9a084-844">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="9a084-845">`in` 为英寸;1in = = 96px</span><span class="sxs-lookup"><span data-stu-id="9a084-845">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="9a084-846">`cm` 是厘米;1cm = = （96/2.54） px</span><span class="sxs-lookup"><span data-stu-id="9a084-846">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="9a084-847">`pt` 为点;1pt = = （96/72） px</span><span class="sxs-lookup"><span data-stu-id="9a084-847">`pt` is points; 1pt==(96/72) px</span></span>  
  
<a name="dependencyPropertyInfo_MaxHeight"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-848">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-848">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-849">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-849">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MaxHeightProperty>|  
|<span data-ttu-id="9a084-850">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-850">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MaxHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-851">标识 <see cref="P:System.Windows.FrameworkElement.MaxHeight" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-851">Identifies the <see cref="P:System.Windows.FrameworkElement.MaxHeight" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidth">
      <MemberSignature Language="C#" Value="public double MaxWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MaxWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MaxWidth { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MaxWidth : double with get, set" Usage="System.Windows.FrameworkElement.MaxWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-852">获取或设置元素的最大宽度约束。</span><span class="sxs-lookup"><span data-stu-id="9a084-852">Gets or sets the maximum width constraint of the element.</span></span></summary>
        <value><span data-ttu-id="9a084-853">元素的最大宽度，单位是 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="9a084-853">The maximum width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="9a084-854">默认值是 <see cref="F:System.Double.PositiveInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-854">The default value is <see cref="F:System.Double.PositiveInfinity" />.</span></span> <span data-ttu-id="9a084-855">该值可以是等于或大于 0.0 的任何值。</span><span class="sxs-lookup"><span data-stu-id="9a084-855">This value can be any value equal to or greater than 0.0.</span></span> <span data-ttu-id="9a084-856"><see cref="F:System.Double.PositiveInfinity" /> 也是有效的。</span><span class="sxs-lookup"><span data-stu-id="9a084-856"><see cref="F:System.Double.PositiveInfinity" /> is also valid.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-857">这是 <xref:System.Windows.FrameworkElement> 中指定宽度信息的三个属性之一。</span><span class="sxs-lookup"><span data-stu-id="9a084-857">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information.</span></span> <span data-ttu-id="9a084-858">另外两个 <xref:System.Windows.FrameworkElement.MinWidth%2A> 和 <xref:System.Windows.FrameworkElement.Width%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-858">The other two are <xref:System.Windows.FrameworkElement.MinWidth%2A> and <xref:System.Windows.FrameworkElement.Width%2A>.</span></span> <span data-ttu-id="9a084-859">如果这两个值之间存在冲突，则必须先执行实际的宽度确定的应用程序顺序，然后 <xref:System.Windows.FrameworkElement.MaxWidth%2A>，最后，如果其中每个 <xref:System.Windows.FrameworkElement.MinWidth%2A> 都在界限内，<xref:System.Windows.FrameworkElement.Width%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-859">If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>.</span></span>  
  
 <span data-ttu-id="9a084-860"><xref:System.Double> 值的值限制由 <xref:System.Windows.ValidateValueCallback> 机制强制执行。</span><span class="sxs-lookup"><span data-stu-id="9a084-860">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="9a084-861">如果尝试设置一个无效值，则会引发运行时异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-861">If you attempt to set an invalid value, a run-time exception is thrown.</span></span>  
  
<a name="xamlAttributeUsage_MaxWidth"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a084-862">XAML 特性用法</span><span class="sxs-lookup"><span data-stu-id="9a084-862">XAML Attribute Usage</span></span>  
  
```xaml 
<object MaxWidth="double"/>  
```

<span data-ttu-id="9a084-863">-或-</span><span class="sxs-lookup"><span data-stu-id="9a084-863">-or-</span></span>

```xaml
<object MaxWidth="qualifiedDouble"/>  
```

<a name="xamlValues_MaxWidth"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a084-864">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9a084-864">XAML Values</span></span>  
 <span data-ttu-id="9a084-865">*double*</span><span class="sxs-lookup"><span data-stu-id="9a084-865">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="9a084-866">大于或等于 0.0 <xref:System.Double> 值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="9a084-866">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="9a084-867">这被解释为 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] 度量。</span><span class="sxs-lookup"><span data-stu-id="9a084-867">This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="9a084-868">字符串不需要显式包含小数点。</span><span class="sxs-lookup"><span data-stu-id="9a084-868">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="9a084-869">例如，`1` 的值是可接受的。</span><span class="sxs-lookup"><span data-stu-id="9a084-869">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="9a084-870">与属性值部分中提到的 <xref:System.Double> 范围限制相同，不同之处在于必须使用[X:Static 标记扩展](/dotnet/framework/xaml-services/x-static-markup-extension)将值设置为 <xref:System.Double.PositiveInfinity>。</span><span class="sxs-lookup"><span data-stu-id="9a084-870">The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply, except that you must use [x:Static Markup Extension](/dotnet/framework/xaml-services/x-static-markup-extension) to set the value to be <xref:System.Double.PositiveInfinity>.</span></span>  
  
 <span data-ttu-id="9a084-871">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="9a084-871">*qualifiedDouble*</span></span>  
 <span data-ttu-id="9a084-872">如上所述的*双精度*值，后跟以下单元声明字符串之一： `px`、`in`、`cm``pt`。</span><span class="sxs-lookup"><span data-stu-id="9a084-872">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="9a084-873">`px` （默认值）为 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="9a084-873">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="9a084-874">`in` 为英寸;1in = = 96px</span><span class="sxs-lookup"><span data-stu-id="9a084-874">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="9a084-875">`cm` 是厘米;1cm = = （96/2.54） px</span><span class="sxs-lookup"><span data-stu-id="9a084-875">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="9a084-876">`pt` 为点;1pt = = （96/72） px</span><span class="sxs-lookup"><span data-stu-id="9a084-876">`pt` is points; 1pt==(96/72) px</span></span>  
  
<a name="dependencyPropertyInfo_MaxWidth"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-877">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-877">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-878">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-878">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MaxWidthProperty>|  
|<span data-ttu-id="9a084-879">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-879">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MaxWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MaxWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MaxWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MaxWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MaxWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MaxWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-880">标识 <see cref="P:System.Windows.FrameworkElement.MaxWidth" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-880">Identifies the <see cref="P:System.Windows.FrameworkElement.MaxWidth" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureCore">
      <MemberSignature Language="C#" Value="protected override sealed System.Windows.Size MeasureCore (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Windows.Size MeasureCore(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Function MeasureCore (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Size MeasureCore(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="override this.MeasureCore : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.MeasureCore availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize"><span data-ttu-id="9a084-881">父元素可以赋予子元素的可用大小。</span><span class="sxs-lookup"><span data-stu-id="9a084-881">The available size that the parent element can give to the child elements.</span></span></param>
        <summary><span data-ttu-id="9a084-882">实现 <see cref="T:System.Windows.FrameworkElement" /> 的基本度量传递布局系统行为。</span><span class="sxs-lookup"><span data-stu-id="9a084-882">Implements basic measure-pass layout system behavior for <see cref="T:System.Windows.FrameworkElement" />.</span></span></summary>
        <returns><span data-ttu-id="9a084-883">此元素在布局中的所需大小。</span><span class="sxs-lookup"><span data-stu-id="9a084-883">The desired size of this element in layout.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-884">此方法将重写 <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>，以连接 WPF 核心级和 WPF 框架级布局度量实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-884">This method overrides <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType> to connect the  WPF core-level and WPF framework-level layout measure implementations.</span></span> <span data-ttu-id="9a084-885"><xref:System.Windows.FrameworkElement> 实现会密封方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-885">The <xref:System.Windows.FrameworkElement> implementation seals the method.</span></span> <span data-ttu-id="9a084-886">若要调整在 WPF 框架级别上生成的任何元素的度量值传递布局行为，请改为重写 <xref:System.Windows.FrameworkElement.MeasureOverride%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-886">To adjust the measure pass layout behavior of any element that builds on the WPF framework-level, override <xref:System.Windows.FrameworkElement.MeasureOverride%2A> instead.</span></span> <span data-ttu-id="9a084-887">若要调整特意不在 WPF 框架级别或使用 <xref:System.Windows.FrameworkElement>上生成的元素的度量值传递布局行为，请重写 <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="9a084-887">To adjust the measure pass layout behavior of an element that deliberately does not build on the WPF framework-level or use <xref:System.Windows.FrameworkElement>, override <xref:System.Windows.UIElement.MeasureCore%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureOverride">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Size MeasureOverride (System.Windows.Size availableSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Windows.Size MeasureOverride(valuetype System.Windows.Size availableSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function MeasureOverride (availableSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Size MeasureOverride(System::Windows::Size availableSize);" />
      <MemberSignature Language="F#" Value="abstract member MeasureOverride : System.Windows.Size -&gt; System.Windows.Size&#xA;override this.MeasureOverride : System.Windows.Size -&gt; System.Windows.Size" Usage="frameworkElement.MeasureOverride availableSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="availableSize" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="availableSize"><span data-ttu-id="9a084-888">此元素可提供给子元素的可用大小。</span><span class="sxs-lookup"><span data-stu-id="9a084-888">The available size that this element can give to child elements.</span></span> <span data-ttu-id="9a084-889">可指定无穷大作为一个值，该值指示元素将调整到适应内容的大小。</span><span class="sxs-lookup"><span data-stu-id="9a084-889">Infinity can be specified as a value to indicate that the element will size to whatever content is available.</span></span></param>
        <summary><span data-ttu-id="9a084-890">在派生类中重写时，测量子元素在布局中所需的大小，并确定由 <see cref="T:System.Windows.FrameworkElement" /> 派生的类的大小。</span><span class="sxs-lookup"><span data-stu-id="9a084-890">When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.</span></span></summary>
        <returns><span data-ttu-id="9a084-891">此元素基于其对子元素大小的计算确定它在布局期间所需要的大小。</span><span class="sxs-lookup"><span data-stu-id="9a084-891">The size that this element determines it needs during layout, based on its calculations of child element sizes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-892">重写 <xref:System.Windows.FrameworkElement.MeasureOverride%2A> 以实现元素在 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 布局系统中的自定义布局大小调整行为。</span><span class="sxs-lookup"><span data-stu-id="9a084-892">Override <xref:System.Windows.FrameworkElement.MeasureOverride%2A> to implement custom layout sizing behavior for your element as it participates in the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] layout system.</span></span> <span data-ttu-id="9a084-893">你的实现应执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="9a084-893">Your implementation should do the following:</span></span>  
  
1.  <span data-ttu-id="9a084-894">循环访问作为布局一部分的元素的特定子集合，对每个子元素调用 <xref:System.Windows.UIElement.Measure%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-894">Iterate your element's particular collection of children that are part of layout, call <xref:System.Windows.UIElement.Measure%2A> on each child element.</span></span>  
  
2.  <span data-ttu-id="9a084-895">立即获取子级的 <xref:System.Windows.UIElement.DesiredSize%2A> （在调用 <xref:System.Windows.UIElement.Measure%2A> 后，此设置为属性）。</span><span class="sxs-lookup"><span data-stu-id="9a084-895">Immediately get <xref:System.Windows.UIElement.DesiredSize%2A> on the child (this is set as a property after <xref:System.Windows.UIElement.Measure%2A> is called).</span></span>  
  
3.  <span data-ttu-id="9a084-896">根据子元素的度量计算父级所需的净大小。</span><span class="sxs-lookup"><span data-stu-id="9a084-896">Compute the net desired size of the parent based upon the measurement of the child elements.</span></span>  
  
 <span data-ttu-id="9a084-897"><xref:System.Windows.FrameworkElement.MeasureOverride%2A> 的返回值应为元素自己所需的大小，该大小随后将成为当前元素的父元素的度量输入。</span><span class="sxs-lookup"><span data-stu-id="9a084-897">The return value of <xref:System.Windows.FrameworkElement.MeasureOverride%2A> should be the element's own desired size, which then becomes the measure input for the parent element of the current element.</span></span> <span data-ttu-id="9a084-898">此过程将一直通过布局系统，直到到达页面的根元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-898">This same process continues through the layout system until the root element of the page is reached.</span></span>  
  
 <span data-ttu-id="9a084-899">在此过程中，子元素返回的 <xref:System.Windows.UIElement.DesiredSize%2A> 大小可能大于初始 `availableSize`，以指示子元素需要更多空间。</span><span class="sxs-lookup"><span data-stu-id="9a084-899">During this process, child elements might return a larger <xref:System.Windows.UIElement.DesiredSize%2A> size than the initial `availableSize` to indicate that the child element wants more space.</span></span> <span data-ttu-id="9a084-900">这可以在自己的实现中进行处理，方法是引入一个可滚动区域，通过调整父控件的大小，通过建立一些堆叠顺序或任意数量的解决方案来测量或排列内容。</span><span class="sxs-lookup"><span data-stu-id="9a084-900">This might be handled in your own implementation by introducing a scrollable region, by resizing the parent control, by establishing some manner of stacked order, or any number of solutions for measuring or arranging content.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9a084-901">在此过程中，元素应在每个子元素上调用 <xref:System.Windows.UIElement.Measure%2A>，否则，将不会正确调整或排列子元素的大小。</span><span class="sxs-lookup"><span data-stu-id="9a084-901">Elements should call <xref:System.Windows.UIElement.Measure%2A> on each child during this process, otherwise the child elements will not be correctly sized or arranged.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9a084-902">下面的非编译代码显示了此实现模式。</span><span class="sxs-lookup"><span data-stu-id="9a084-902">The following non-compiling code shows this implementation pattern.</span></span>  <span data-ttu-id="9a084-903"><c>VisualChildren</c>表示你自己的元素应定义的子元素的可枚举集合属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-903"><c>VisualChildren</c> represents an enumerable collection property of children that your own element should define.</span></span> <span data-ttu-id="9a084-904">属性可以命名为任意名称。</span><span class="sxs-lookup"><span data-stu-id="9a084-904">The property can be named anything.</span></span> <span data-ttu-id="9a084-905"><c>VisualChildren</c>是占位符名称。在此示例中， <c>VisualChildren</c>不是 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 或命名模式的一部分提供的 API。</span><span class="sxs-lookup"><span data-stu-id="9a084-905"><c>VisualChildren</c> is a placeholder name for purposes of this example, <c>VisualChildren</c> is not an API as provided by [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] or a part of a naming pattern.</span></span> 
  
<span data-ttu-id="9a084-906">[！ code-csharp[CorePseudocode # FEMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#femeasureoverride)][！ code-vb[CorePseudocode # FEMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#femeasureoverride)]</span><span class="sxs-lookup"><span data-stu-id="9a084-906">[!code-csharp[CorePseudocode#FEMeasureOverride](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#femeasureoverride)] [!code-vb[CorePseudocode#FEMeasureOverride](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#femeasureoverride)]</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="MinHeight">
      <MemberSignature Language="C#" Value="public double MinHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property MinHeight As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinHeight { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MinHeight : double with get, set" Usage="System.Windows.FrameworkElement.MinHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-907">获取或设置元素的最小高度约束。</span><span class="sxs-lookup"><span data-stu-id="9a084-907">Gets or sets the minimum height constraint of the element.</span></span></summary>
        <value><span data-ttu-id="9a084-908">在 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] 中，元素的最小高度。</span><span class="sxs-lookup"><span data-stu-id="9a084-908">The minimum height of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="9a084-909">默认值为 0.0。</span><span class="sxs-lookup"><span data-stu-id="9a084-909">The default value is 0.0.</span></span> <span data-ttu-id="9a084-910">该值可以是等于或大于 0.0 的任何值。</span><span class="sxs-lookup"><span data-stu-id="9a084-910">This value can be any value equal to or greater than 0.0.</span></span> <span data-ttu-id="9a084-911">但是，<see cref="F:System.Double.PositiveInfinity" /> 无效，<see cref="F:System.Double.NaN" /> 也无效。</span><span class="sxs-lookup"><span data-stu-id="9a084-911">However, <see cref="F:System.Double.PositiveInfinity" /> is NOT valid, nor is <see cref="F:System.Double.NaN" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-912">这是 <xref:System.Windows.FrameworkElement> 中指定高度信息的三个属性之一。</span><span class="sxs-lookup"><span data-stu-id="9a084-912">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify height information.</span></span>  <span data-ttu-id="9a084-913">另外两个 <xref:System.Windows.FrameworkElement.Height%2A> 和 <xref:System.Windows.FrameworkElement.MaxHeight%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-913">The other two are <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.MaxHeight%2A>.</span></span> <span data-ttu-id="9a084-914">如果这两个值之间存在冲突，则必须先使用应用程序的实际顺序确定，然后 <xref:System.Windows.FrameworkElement.MaxHeight%2A>，最后，如果其中每个 <xref:System.Windows.FrameworkElement.MinHeight%2A> 都在界限内，<xref:System.Windows.FrameworkElement.Height%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-914">If there is a conflict between these values, the order of application for actual height determination is first <xref:System.Windows.FrameworkElement.MinHeight%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxHeight%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Height%2A>.</span></span>  
  
 <span data-ttu-id="9a084-915"><xref:System.Double> 值的值限制由 <xref:System.Windows.ValidateValueCallback> 机制强制执行。</span><span class="sxs-lookup"><span data-stu-id="9a084-915">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="9a084-916">如果尝试设置一个无效值，则会引发运行时异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-916">If you attempt to set an invalid value, a run-time exception is thrown.</span></span>  
  
<a name="xamlAttributeUsage_MinHeight"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a084-917">XAML 特性用法</span><span class="sxs-lookup"><span data-stu-id="9a084-917">XAML Attribute Usage</span></span>  
  
```xaml
<object MinHeight="double"/>  
```

<span data-ttu-id="9a084-918">-或-</span><span class="sxs-lookup"><span data-stu-id="9a084-918">-or-</span></span>

```xaml
<object MinHeight="qualifiedDouble"/>  
```

<a name="xamlValues_MinHeight"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a084-919">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9a084-919">XAML Values</span></span>  
 <span data-ttu-id="9a084-920">*double*</span><span class="sxs-lookup"><span data-stu-id="9a084-920">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="9a084-921">大于或等于 0.0 <xref:System.Double> 值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="9a084-921">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="9a084-922">这被解释为 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] 度量。</span><span class="sxs-lookup"><span data-stu-id="9a084-922">This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="9a084-923">字符串不需要显式包含小数点。</span><span class="sxs-lookup"><span data-stu-id="9a084-923">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="9a084-924">例如，`1` 的值是可接受的。</span><span class="sxs-lookup"><span data-stu-id="9a084-924">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="9a084-925">"属性值" 一节中提到的 <xref:System.Double> 范围限制相同。</span><span class="sxs-lookup"><span data-stu-id="9a084-925">The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply.</span></span>  
  
 <span data-ttu-id="9a084-926">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="9a084-926">*qualifiedDouble*</span></span>  
 <span data-ttu-id="9a084-927">如上所述的*双精度*值，后跟以下单元声明字符串之一： `px`、`in`、`cm``pt`。</span><span class="sxs-lookup"><span data-stu-id="9a084-927">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="9a084-928">`px` （默认值）为 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="9a084-928">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="9a084-929">`in` 为英寸;1in = = 96px</span><span class="sxs-lookup"><span data-stu-id="9a084-929">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="9a084-930">`cm` 是厘米;1cm = = （96/2.54） px</span><span class="sxs-lookup"><span data-stu-id="9a084-930">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="9a084-931">`pt` 为点;1pt = = （96/72） px</span><span class="sxs-lookup"><span data-stu-id="9a084-931">`pt` is points; 1pt==(96/72) px</span></span>  
  
<a name="dependencyPropertyInfo_MinHeight"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-932">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-932">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-933">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-933">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MinHeightProperty>|  
|<span data-ttu-id="9a084-934">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-934">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinHeightProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinHeightProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinHeightProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MinHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-935">标识 <see cref="P:System.Windows.FrameworkElement.MinHeight" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-935">Identifies the <see cref="P:System.Windows.FrameworkElement.MinHeight" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidth">
      <MemberSignature Language="C#" Value="public double MinWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.MinWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property MinWidth As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double MinWidth { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.MinWidth : double with get, set" Usage="System.Windows.FrameworkElement.MinWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-936">获取或设置元素的最小宽度约束。</span><span class="sxs-lookup"><span data-stu-id="9a084-936">Gets or sets the minimum width constraint of the element.</span></span></summary>
        <value><span data-ttu-id="9a084-937">元素的最小宽度，单位是 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]。</span><span class="sxs-lookup"><span data-stu-id="9a084-937">The minimum width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="9a084-938">默认值为 0.0。</span><span class="sxs-lookup"><span data-stu-id="9a084-938">The default value is 0.0.</span></span> <span data-ttu-id="9a084-939">该值可以是等于或大于 0.0 的任何值。</span><span class="sxs-lookup"><span data-stu-id="9a084-939">This value can be any value equal to or greater than 0.0.</span></span> <span data-ttu-id="9a084-940">但是，<see cref="F:System.Double.PositiveInfinity" /> 无效，<see cref="F:System.Double.NaN" /> 也无效。</span><span class="sxs-lookup"><span data-stu-id="9a084-940">However, <see cref="F:System.Double.PositiveInfinity" /> is not valid, nor is <see cref="F:System.Double.NaN" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-941">这是 <xref:System.Windows.FrameworkElement> 中指定宽度信息的三个属性之一。</span><span class="sxs-lookup"><span data-stu-id="9a084-941">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information.</span></span>  <span data-ttu-id="9a084-942">另外两个 <xref:System.Windows.FrameworkElement.Width%2A> 和 <xref:System.Windows.FrameworkElement.MaxWidth%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-942">The other two are <xref:System.Windows.FrameworkElement.Width%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</span></span>  <span data-ttu-id="9a084-943">如果这两个值之间存在冲突，则必须先执行实际的宽度确定的应用程序顺序，然后 <xref:System.Windows.FrameworkElement.MaxWidth%2A>，最后，如果其中每个 <xref:System.Windows.FrameworkElement.MinWidth%2A> 都在界限内，<xref:System.Windows.FrameworkElement.Width%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-943">If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>.</span></span>  
  
 <span data-ttu-id="9a084-944"><xref:System.Double> 值的值限制由 <xref:System.Windows.ValidateValueCallback> 机制强制执行。</span><span class="sxs-lookup"><span data-stu-id="9a084-944">The value restrictions on the <xref:System.Double> value are enforced by a <xref:System.Windows.ValidateValueCallback> mechanism.</span></span> <span data-ttu-id="9a084-945">如果尝试设置一个无效值，则会引发运行时异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-945">If you attempt to set an invalid value, a run-time exception is thrown.</span></span>  
  
<a name="xamlAttributeUsage_MinWidth"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a084-946">XAML 特性用法</span><span class="sxs-lookup"><span data-stu-id="9a084-946">XAML Attribute Usage</span></span>  
  
```xaml 
<object MinWidth="double"/>  
```

<span data-ttu-id="9a084-947">-或-</span><span class="sxs-lookup"><span data-stu-id="9a084-947">-or-</span></span>

```xaml
<object MinWidth="qualifiedDouble"/>  
```
  
<a name="xamlValues_MinWidth"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a084-948">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9a084-948">XAML Values</span></span>  
 <span data-ttu-id="9a084-949">*double*</span><span class="sxs-lookup"><span data-stu-id="9a084-949">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="9a084-950">大于或等于 0.0 <xref:System.Double> 值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="9a084-950">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="9a084-951">这被解释为 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] 度量。</span><span class="sxs-lookup"><span data-stu-id="9a084-951">This is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="9a084-952">字符串不需要显式包含小数点。</span><span class="sxs-lookup"><span data-stu-id="9a084-952">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="9a084-953">例如，`1` 的值是可接受的。</span><span class="sxs-lookup"><span data-stu-id="9a084-953">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="9a084-954">"属性值" 一节中提到的 <xref:System.Double> 范围限制相同。</span><span class="sxs-lookup"><span data-stu-id="9a084-954">The same <xref:System.Double> range restrictions as mentioned in the Property Value section apply.</span></span>  
  
 <span data-ttu-id="9a084-955">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="9a084-955">*qualifiedDouble*</span></span>  
 <span data-ttu-id="9a084-956">如上所述的*双精度*值，后跟以下单元声明字符串之一： `px`、`in`、`cm``pt`。</span><span class="sxs-lookup"><span data-stu-id="9a084-956">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="9a084-957">`px` （默认值）为 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="9a084-957">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="9a084-958">`in` 为英寸;1in = = 96px</span><span class="sxs-lookup"><span data-stu-id="9a084-958">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="9a084-959">`cm` 是厘米;1cm = = （96/2.54） px</span><span class="sxs-lookup"><span data-stu-id="9a084-959">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="9a084-960">`pt` 为点;1pt = = （96/72） px</span><span class="sxs-lookup"><span data-stu-id="9a084-960">`pt` is points; 1pt==(96/72) px</span></span>  
  
<a name="dependencyPropertyInfo_MinWidth"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-961">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-961">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-962">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-962">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.MinWidthProperty>|  
|<span data-ttu-id="9a084-963">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-963">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinWidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MinWidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MinWidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly MinWidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ MinWidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable MinWidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.MinWidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-964">标识 <see cref="P:System.Windows.FrameworkElement.MinWidth" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-964">Identifies the <see cref="P:System.Windows.FrameworkElement.MinWidth" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public override sealed bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="frameworkElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="9a084-965">焦点要移动的方向，作为一个枚举值。</span><span class="sxs-lookup"><span data-stu-id="9a084-965">The direction that focus is to be moved, as a value of the enumeration.</span></span></param>
        <summary><span data-ttu-id="9a084-966">以提供的遍历方向将键盘焦点从此元素移到其他元素上。</span><span class="sxs-lookup"><span data-stu-id="9a084-966">Moves the keyboard focus away from this element and to another element in a provided traversal direction.</span></span></summary>
        <returns><span data-ttu-id="9a084-967">如果焦点移动成功，则返回 <see langword="true" />；如果指定方向上不存在目标元素，或者未能将键盘焦点移到目标元素上，则返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-967">Returns <see langword="true" /> if focus is moved successfully; <see langword="false" /> if the target element in direction as specified does not exist or could not be keyboard focused.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-968">此实现将重写 <xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType> 并密封方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-968">This implementation overrides <xref:System.Windows.UIElement.MoveFocus%2A?displayProperty=nameWithType> and seals the method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a084-969">下面的示例实现处理几个可能的按钮输入的处理程序。</span><span class="sxs-lookup"><span data-stu-id="9a084-969">The following example implements a handler that handles several possible button inputs.</span></span> <span data-ttu-id="9a084-970">每个按钮都表示一个可能的 <xref:System.Windows.Input.FocusNavigationDirection>。</span><span class="sxs-lookup"><span data-stu-id="9a084-970">Each button represents a possible <xref:System.Windows.Input.FocusNavigationDirection>.</span></span> <span data-ttu-id="9a084-971">处理程序使用当前的键盘焦点跟踪元素，并通过将相应的 <xref:System.Windows.Input.FocusNavigationDirection> 指定为提供的 <xref:System.Windows.Input.TraversalRequest> 类型参数的初始化，对该元素调用 <xref:System.Windows.FrameworkElement.MoveFocus%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-971">The handler tracks the element with current keyboard focus, and calls <xref:System.Windows.FrameworkElement.MoveFocus%2A> on that element, by specifying the appropriate <xref:System.Windows.Input.FocusNavigationDirection> as initialization for the <xref:System.Windows.Input.TraversalRequest> type parameter provided.</span></span>  
  
 [!code-csharp[FocusSample#FocusSampleMoveFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#focussamplemovefocus)]
 [!code-vb[FocusSample#FocusSampleMoveFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#focussamplemovefocus)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.Focus" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.FrameworkElement.Name" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IFrameworkInputElement.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.Windows.Markup.DesignerSerializationOptions(System.Windows.Markup.DesignerSerializationOptions.SerializeAsAttribute)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-972">获取或设置元素的标识名称。</span><span class="sxs-lookup"><span data-stu-id="9a084-972">Gets or sets the identifying name of the element.</span></span> <span data-ttu-id="9a084-973">该名称提供引用，以便代码隐藏（如事件处理程序代码）可以引用标记元素（在 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 处理器的处理过程中构造该元素之后）。</span><span class="sxs-lookup"><span data-stu-id="9a084-973">The name provides a reference so that code-behind, such as event handler code, can refer to a markup element after it is constructed during processing by a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] processor.</span></span></summary>
        <value><span data-ttu-id="9a084-974">元素的名称。</span><span class="sxs-lookup"><span data-stu-id="9a084-974">The name of the element.</span></span> <span data-ttu-id="9a084-975">默认值为空字符串。</span><span class="sxs-lookup"><span data-stu-id="9a084-975">The default is an empty string.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-976">此属性最常见的用法是将 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 元素名称指定为标记中的属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-976">The most common usage of this property is to specify a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] element name as an attribute in markup.</span></span>  
  
 <span data-ttu-id="9a084-977">此属性实质上提供了一个 WPF 框架级别的方便属性来设置 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [X：Name 指令](/dotnet/framework/xaml-services/x-name-directive)。</span><span class="sxs-lookup"><span data-stu-id="9a084-977">This property essentially provides a WPF framework-level convenience property to set the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] [x:Name Directive](/dotnet/framework/xaml-services/x-name-directive).</span></span>  
  
 <span data-ttu-id="9a084-978">名称在名称范围内必须是唯一的。</span><span class="sxs-lookup"><span data-stu-id="9a084-978">Names must be unique within a namescope.</span></span> <span data-ttu-id="9a084-979">有关详细信息，请参阅 [WPF XAML Namescopes](/dotnet/framework/wpf/advanced/wpf-xaml-namescopes)。</span><span class="sxs-lookup"><span data-stu-id="9a084-979">For more information, see [WPF XAML Namescopes](/dotnet/framework/wpf/advanced/wpf-xaml-namescopes).</span></span>  
  
 <span data-ttu-id="9a084-980">如果你在代码中创建元素不常用，则获取 <xref:System.Windows.FrameworkElement.Name%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-980">Getting a <xref:System.Windows.FrameworkElement.Name%2A> if you are creating elements in code is not common.</span></span> <span data-ttu-id="9a084-981">如果已在代码中正确引用，则只需调用元素引用的方法和属性，通常不需要 <xref:System.Windows.FrameworkElement.Name%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-981">If you have the appropriate reference in code already, you can just call methods and properties on the element reference and will not generally need the <xref:System.Windows.FrameworkElement.Name%2A>.</span></span> <span data-ttu-id="9a084-982">这种情况的一个例外是，如果 <xref:System.Windows.FrameworkElement.Name%2A> 字符串具有一些重载含义（例如，如果在 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]中显示该名称很有用）。</span><span class="sxs-lookup"><span data-stu-id="9a084-982">An exception to this is if the <xref:System.Windows.FrameworkElement.Name%2A> string has some overloaded meaning, for instance if it is useful to display that name in [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span> <span data-ttu-id="9a084-983">如果也不建议从标记设置原始 <xref:System.Windows.FrameworkElement.Name%2A>，则从代码隐藏设置 <xref:System.Windows.FrameworkElement.Name%2A>，并且在加载 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 后更改属性将不会更改原始对象引用。</span><span class="sxs-lookup"><span data-stu-id="9a084-983">Setting a <xref:System.Windows.FrameworkElement.Name%2A> from code-behind if the original <xref:System.Windows.FrameworkElement.Name%2A> was set from markup is also not recommended, and changing the property after loading the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] will not change the original object reference.</span></span> <span data-ttu-id="9a084-984">仅当在分析期间显式创建了基础名称范围时，才会创建对象引用。</span><span class="sxs-lookup"><span data-stu-id="9a084-984">The object references are created only when the underlying namescopes are explicitly created during parsing.</span></span> <span data-ttu-id="9a084-985">必须专门调用 <xref:System.Windows.FrameworkElement.RegisterName%2A>，才能对已加载元素的 <xref:System.Windows.FrameworkElement.Name%2A> 属性进行有效更改。</span><span class="sxs-lookup"><span data-stu-id="9a084-985">You must specifically call <xref:System.Windows.FrameworkElement.RegisterName%2A> to make an effective change to the <xref:System.Windows.FrameworkElement.Name%2A> property of an already loaded element.</span></span>  
  
 <span data-ttu-id="9a084-986">从代码中设置 <xref:System.Windows.FrameworkElement.Name%2A> 很重要的一种情况是，为演示图板将针对其运行的元素注册名称，以便可以在运行时引用它们。</span><span class="sxs-lookup"><span data-stu-id="9a084-986">One notable case where setting <xref:System.Windows.FrameworkElement.Name%2A> from code is important is when registering names for elements that storyboards will run against, so that they can be referenced at run time.</span></span> <span data-ttu-id="9a084-987">注册名称之前，可能还需要实例化并分配一个 <xref:System.Windows.NameScope> 实例。</span><span class="sxs-lookup"><span data-stu-id="9a084-987">Before you can register a name, might also need to instantiate and assign a <xref:System.Windows.NameScope> instance.</span></span> <span data-ttu-id="9a084-988">请参阅 "示例" 部分或[情节提要概述](/dotnet/framework/wpf/graphics-multimedia/storyboards-overview)。</span><span class="sxs-lookup"><span data-stu-id="9a084-988">See the Example section, or [Storyboards Overview](/dotnet/framework/wpf/graphics-multimedia/storyboards-overview).</span></span>  
  
 <span data-ttu-id="9a084-989">从代码设置 <xref:System.Windows.FrameworkElement.Name%2A> 具有有限的应用程序，但通过 <xref:System.Windows.FrameworkElement.Name%2A> 获取元素更常见。</span><span class="sxs-lookup"><span data-stu-id="9a084-989">Setting <xref:System.Windows.FrameworkElement.Name%2A> from code has limited applications, but getting an element by <xref:System.Windows.FrameworkElement.Name%2A> is more common.</span></span> <span data-ttu-id="9a084-990">一种特殊情况是，如果您的应用程序支持将页面重新加载到应用程序中的导航模型，并且运行时代码不一定要为该页定义代码隐藏。</span><span class="sxs-lookup"><span data-stu-id="9a084-990">One particular scenario is if your application supports a navigation model where pages reload into the application, and the run time code is not necessarily code-behind defined for that page.</span></span> <span data-ttu-id="9a084-991">实用工具方法 <xref:System.Windows.FrameworkElement.FindName%2A>（可从任何 <xref:System.Windows.FrameworkElement>获取）可以在该元素的逻辑树中 <xref:System.Windows.FrameworkElement.Name%2A> 来查找任何元素，并根据需要递归搜索树。</span><span class="sxs-lookup"><span data-stu-id="9a084-991">The utility method <xref:System.Windows.FrameworkElement.FindName%2A>, which is available from any <xref:System.Windows.FrameworkElement>, can find any element by <xref:System.Windows.FrameworkElement.Name%2A> in the logical tree for that element, searching the tree recursively as necessary.</span></span> <span data-ttu-id="9a084-992">或者，您可以使用 <xref:System.Windows.LogicalTreeHelper>的 <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> 静态方法，该方法也采用 <xref:System.Windows.FrameworkElement.Name%2A> 字符串作为参数。</span><span class="sxs-lookup"><span data-stu-id="9a084-992">Or you can use the <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> static method of <xref:System.Windows.LogicalTreeHelper>, which also takes a <xref:System.Windows.FrameworkElement.Name%2A> string as an argument.</span></span>  
  
 <span data-ttu-id="9a084-993">通常使用的根元素（例如<xref:System.Windows.Window>）实现接口 <xref:System.Windows.Controls.Page>，<xref:System.Windows.Markup.INameScope>。</span><span class="sxs-lookup"><span data-stu-id="9a084-993">Typically used root elements (<xref:System.Windows.Window>, <xref:System.Windows.Controls.Page> for example) implement the interface <xref:System.Windows.Markup.INameScope>.</span></span> <span data-ttu-id="9a084-994">此接口的实现应强制要求名称在其范围内明确。</span><span class="sxs-lookup"><span data-stu-id="9a084-994">Implementations of this interface are expected to enforce that names be unambiguous within their scope.</span></span> <span data-ttu-id="9a084-995">定义此接口的根元素还定义所有相关 Api 的名称范围行为边界。</span><span class="sxs-lookup"><span data-stu-id="9a084-995">The root elements that define this interface also define the namescope behavior boundaries for all the related APIs.</span></span>  
  
 <span data-ttu-id="9a084-996"><xref:System.Windows.FrameworkElement.Name%2A> 属性还作为其他进程的标识符。</span><span class="sxs-lookup"><span data-stu-id="9a084-996">The <xref:System.Windows.FrameworkElement.Name%2A> property also serves as an identifier for other processes.</span></span> <span data-ttu-id="9a084-997">例如，[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 自动化模型将使用与客户端和提供程序的 AutomationId <xref:System.Windows.FrameworkElement.Name%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-997">For instance, the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] automation model will use <xref:System.Windows.FrameworkElement.Name%2A> as the AutomationId for clients and providers.</span></span>  
  
 <span data-ttu-id="9a084-998">用于 <xref:System.Windows.FrameworkElement.Name%2A> 的字符串值具有某些限制，这是由 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 规范定义的基础[X：Name 指令](/dotnet/framework/xaml-services/x-name-directive)施加的。</span><span class="sxs-lookup"><span data-stu-id="9a084-998">The string values used for <xref:System.Windows.FrameworkElement.Name%2A> have some restrictions, as imposed by the underlying [x:Name Directive](/dotnet/framework/xaml-services/x-name-directive) defined by the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] specification.</span></span> <span data-ttu-id="9a084-999">最值得注意的是，<xref:System.Windows.FrameworkElement.Name%2A> 必须以字母或下划线字符（_）开头，并且必须仅包含字母、数字或下划线。</span><span class="sxs-lookup"><span data-stu-id="9a084-999">Most notably, a <xref:System.Windows.FrameworkElement.Name%2A> must start with a letter or the underscore character (_), and must contain only letters, digits, or underscores.</span></span> <span data-ttu-id="9a084-1000">有关详细信息，请参阅 [WPF XAML Namescopes](/dotnet/framework/wpf/advanced/wpf-xaml-namescopes)。</span><span class="sxs-lookup"><span data-stu-id="9a084-1000">For more information, see [WPF XAML Namescopes](/dotnet/framework/wpf/advanced/wpf-xaml-namescopes).</span></span>  
  
 <span data-ttu-id="9a084-1001"><xref:System.Windows.FrameworkElement.Name%2A> 是不能进行动画处理的几个依赖项属性之一（<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> 在元数据中 `true`），因为该名称本身对于目标为动画是至关重要的。</span><span class="sxs-lookup"><span data-stu-id="9a084-1001"><xref:System.Windows.FrameworkElement.Name%2A> is one of the very few dependency properties that cannot be animated (<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A> is `true` in metadata), because the name itself is vital for targeting an animation.</span></span> <span data-ttu-id="9a084-1002">数据绑定 <xref:System.Windows.FrameworkElement.Name%2A> 在技术上是可行的，但这种情况非常少见，因为数据绑定 <xref:System.Windows.FrameworkElement.Name%2A> 无法提供属性的主要预期用途：为代码隐藏提供标识符连接点。</span><span class="sxs-lookup"><span data-stu-id="9a084-1002">Data binding a <xref:System.Windows.FrameworkElement.Name%2A> is technically possible, but is an extremely uncommon scenario because a data-bound <xref:System.Windows.FrameworkElement.Name%2A> cannot serve the main intended purpose of the property: to provide an identifier connection point for code-behind.</span></span>  
  
<a name="dependencyPropertyInfo_Name"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-1003">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-1003">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-1004">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-1004">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.NameProperty>|  
|<span data-ttu-id="9a084-1005">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-1005">Metadata properties set to `true`</span></span>|<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="9a084-1006">下面的示例在代码中设置 <xref:System.Windows.FrameworkElement.Name%2A> 属性，然后通过调用 <xref:System.Windows.FrameworkElement.RegisterName%2A>将该名称注册到新创建的 <xref:System.Windows.NameScope> 中。</span><span class="sxs-lookup"><span data-stu-id="9a084-1006">The following example sets the <xref:System.Windows.FrameworkElement.Name%2A> property in code, and then registers the name into the newly created <xref:System.Windows.NameScope> by calling <xref:System.Windows.FrameworkElement.RegisterName%2A>.</span></span> <span data-ttu-id="9a084-1007">此处所示的技术是使用情节提要进行动画处理的一项要求，因为情节提要需要 <xref:System.Windows.FrameworkElement.Name%2A>目标，并且不能以对象引用为目标。</span><span class="sxs-lookup"><span data-stu-id="9a084-1007">The technique illustrated here is a requirement for animating with storyboards, because storyboards require targeting by the <xref:System.Windows.FrameworkElement.Name%2A>, and cannot be targeted by object reference.</span></span>  
  
 [!code-csharp[animateHeight_procedural#FEName](~/samples/snippets/csharp/VS_Snippets_Wpf/animateHeight_procedural/CSharp/AnimatedHeightExample.cs#fename)]
 [!code-vb[animateHeight_procedural#FEName](~/samples/snippets/visualbasic/VS_Snippets_Wpf/animateHeight_procedural/visualbasic/animatedheightexample.vb#fename)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty NameProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty NameProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.NameProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NameProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ NameProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable NameProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.NameProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1008">标识 <see cref="P:System.Windows.FrameworkElement.Name" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1008">Identifies the <see cref="P:System.Windows.FrameworkElement.Name" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnApplyTemplate">
      <MemberSignature Language="C#" Value="public virtual void OnApplyTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnApplyTemplate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnApplyTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub OnApplyTemplate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void OnApplyTemplate();" />
      <MemberSignature Language="F#" Value="abstract member OnApplyTemplate : unit -&gt; unit&#xA;override this.OnApplyTemplate : unit -&gt; unit" Usage="frameworkElement.OnApplyTemplate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a084-1009">在派生类中重写时，每当应用程序代码或内部进程调用 <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />，都将调用此方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1009">When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1010">此方法没有默认实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-1010">This method has no default implementation.</span></span>  
  
 <span data-ttu-id="9a084-1011">模板是元素完成的可视化树的一部分，它来自应用于该元素的 <xref:System.Windows.Style> 的模板属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1011">Templates are the section of an element's completed visual tree that comes from the Template property of a <xref:System.Windows.Style> that is applied for the element.</span></span> <span data-ttu-id="9a084-1012">有关详细信息，请参阅[样式设置和模板化](/dotnet/framework/wpf/controls/styling-and-templating)。</span><span class="sxs-lookup"><span data-stu-id="9a084-1012">For more information, see [Styling and Templating](/dotnet/framework/wpf/controls/styling-and-templating).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9a084-1013"><see cref="T:System.Windows.FrameworkElement" /> 的派生类可以使用此方法作为各种可能方案的通知：</span><span class="sxs-lookup"><span data-stu-id="9a084-1013">Derived classes of <see cref="T:System.Windows.FrameworkElement" /> can use this method as a notification for a variety of possible scenarios:</span></span> 
<span data-ttu-id="9a084-1014">-您可以调用自己的代码实现，以生成元素可视化树的其余部分。</span><span class="sxs-lookup"><span data-stu-id="9a084-1014">-   You can call your own implementation of code that builds the remainder of an element visual tree.</span></span>  
  
<span data-ttu-id="9a084-1015">-您可以运行依赖于已应用的模板的可视化树的代码，例如获取模板中命名元素的引用。</span><span class="sxs-lookup"><span data-stu-id="9a084-1015">-   You can run code that relies on the visual tree from templates having been applied, such as obtaining references to named elements that came from a template.</span></span>  
  
<span data-ttu-id="9a084-1016">-您可以引入仅在模板中的可视树完成后存在的服务。</span><span class="sxs-lookup"><span data-stu-id="9a084-1016">-   You can introduce services that only make sense to exist after the visual tree from templates is complete.</span></span>  
  
<span data-ttu-id="9a084-1017">-可以设置模板中依赖于其他因素的元素的状态和属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1017">-   You can set states and properties of elements within the template that are dependent on other factors.</span></span> <span data-ttu-id="9a084-1018">例如，属性值只能通过知道父元素或特定派生类使用通用模板来发现。</span><span class="sxs-lookup"><span data-stu-id="9a084-1018">For instance, property values might only be discoverable by knowing the parent element, or when a specific derived class uses a common template.</span></span>  
  
<span data-ttu-id="9a084-1019">实施者应始终在其自身实现之前调用基实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-1019">Implementers should always call the base implementation before their own implementation.</span></span> <span data-ttu-id="9a084-1020"><see cref="T:System.Windows.FrameworkElement" /> 本身没有默认实现，但干预类可能。</span><span class="sxs-lookup"><span data-stu-id="9a084-1020"><see cref="T:System.Windows.FrameworkElement" /> itself has no default implementation, but intervening classes might.</span></span>  
  
 <span data-ttu-id="9a084-1021"><see cref="T:System.Windows.Controls.Control" /> 提供了类似的替代，<see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1021"><see cref="T:System.Windows.Controls.Control" /> offers a similar override, <see cref="M:System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuClosing (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuClosing(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuClosing (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuClosing(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkElement.OnContextMenuClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="9a084-1022">提供与事件有关的数据。</span><span class="sxs-lookup"><span data-stu-id="9a084-1022">Provides data about the event.</span></span></param>
        <summary><span data-ttu-id="9a084-1023">每当未处理的 <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> 路由事件在其路由中到达此类时调用。</span><span class="sxs-lookup"><span data-stu-id="9a084-1023">Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ContextMenuClosing" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="9a084-1024">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-1024">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1025">此方法没有默认实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-1025">This method has no default implementation.</span></span> <span data-ttu-id="9a084-1026">如果继承中的中间类已经实现了此方法，则仍应调用基实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-1026">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="9a084-1027">此方法的目的有些类似于 \* 方法上 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 事件模式：它提供了用类处理程序而不是实例处理程序来处理来自派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1027">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="9a084-1028">在这种情况下，匹配事件是路由事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-1028">In this case the matching event is a routed event.</span></span> <span data-ttu-id="9a084-1029">对于路由事件，On \* 方法的实现模式是不同的，因为路由事件可能是由子元素（而不是将调用处理程序的元素）引发的，因此，您的实现需要将事件参数的源属性考虑（并且在大多数情况下不应尝试重新引发事件）。</span><span class="sxs-lookup"><span data-stu-id="9a084-1029">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="9a084-1030">当沿路由收到事件时，<xref:System.Windows.FrameworkElement> 的子类可以选择调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1030">Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="9a084-1031">一种可能的情况是采用事件的参数，并特意将事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-1031">One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuOpening (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuOpening(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuOpening (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuOpening(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkElement.OnContextMenuOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="9a084-1032">包含事件数据的 <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1032">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="9a084-1033">每当未处理的 <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> 路由事件在其路由中到达此类时调用。</span><span class="sxs-lookup"><span data-stu-id="9a084-1033">Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ContextMenuOpening" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="9a084-1034">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-1034">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1035">此方法没有默认实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-1035">This method has no default implementation.</span></span> <span data-ttu-id="9a084-1036">如果继承中的中间类已经实现了此方法，则仍应调用基实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-1036">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="9a084-1037">此方法的目的有些类似于 \* 方法上 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 事件模式：它提供了用类处理程序而不是实例处理程序来处理来自派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1037">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="9a084-1038">在这种情况下，匹配事件是路由事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-1038">In this case the matching event is a routed event.</span></span> <span data-ttu-id="9a084-1039">对于路由事件，On \* 方法的实现模式是不同的，因为路由事件可能是由子元素（而不是将调用处理程序的元素）引发的，因此，您的实现需要将事件参数的源属性考虑（并且在大多数情况下不应尝试重新引发事件）。</span><span class="sxs-lookup"><span data-stu-id="9a084-1039">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="9a084-1040">当沿路由收到事件时，<xref:System.Windows.FrameworkElement> 的子类可以选择调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1040">Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="9a084-1041">一种可能的情况是采用事件的参数，并特意将事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-1041">One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="frameworkElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="9a084-1042">包含事件数据的 <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1042">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="9a084-1043">每当未处理的 <see cref="E:System.Windows.UIElement.GotFocus" /> 事件在其路由中到达此元素时调用。</span><span class="sxs-lookup"><span data-stu-id="9a084-1043">Invoked whenever an unhandled <see cref="E:System.Windows.UIElement.GotFocus" /> event reaches this element in its route.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1044">与基元素公开的其他 On \* 方法不同，<xref:System.Windows.FrameworkElement.OnGotFocus%2A> 具有默认实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-1044">Unlike some other On\* methods exposed by the base elements, <xref:System.Windows.FrameworkElement.OnGotFocus%2A> does have a default implementation.</span></span> <span data-ttu-id="9a084-1045">具体而言，它具有一个实现，该实现替代下一级基本元素中的 null 实现，<xref:System.Windows.UIElement.OnGotFocus%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1045">Specifically, it has an implementation that overrides the null implementation in the next level of base element down, <xref:System.Windows.UIElement.OnGotFocus%2A>.</span></span> <span data-ttu-id="9a084-1046">调用时，如果由于键盘焦点导致事件源自当前元素，则 <xref:System.Windows.FrameworkElement.OnGotFocus%2A> 在此元素上设置相应的焦点行为。</span><span class="sxs-lookup"><span data-stu-id="9a084-1046">When invoked, <xref:System.Windows.FrameworkElement.OnGotFocus%2A> sets appropriate focus behavior on this element in cases where the event originated from the current element due to keyboard focus.</span></span> <span data-ttu-id="9a084-1047">即使将焦点设置为当前元素，<xref:System.Windows.FrameworkElement.OnGotFocus%2A> 处理程序也不会将事件参数标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-1047">The <xref:System.Windows.FrameworkElement.OnGotFocus%2A> handler does not mark the event arguments as handled, even when focus is set to the current element.</span></span> <span data-ttu-id="9a084-1048">如果事件的源是树中的另一个元素（而不是当前元素），则处理程序不执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="9a084-1048">If the event's source was another element in the tree (not the current element), the handler does nothing.</span></span>  
  
 <span data-ttu-id="9a084-1049">您可以重写此方法以更改元素上的默认焦点行为，但是请注意，通过这种方式更改焦点行为可能会更好，因为根本不允许元素获得焦点（请参阅 <xref:System.Windows.UIElement.Focusable%2A>）。</span><span class="sxs-lookup"><span data-stu-id="9a084-1049">You can override this method in order to change the default focus behavior on your element, but be aware that changing focus behavior in this way might be better accomplished by not allowing the element to be focusable at all (see <xref:System.Windows.UIElement.Focusable%2A>).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9a084-1050">如果打算在参数中将事件标记为已处理，则应注意元素树中其他父元素中事件处理的结果。</span><span class="sxs-lookup"><span data-stu-id="9a084-1050">If you intend to mark the event handled in the arguments, you should be aware of consequences on event handling in other parent elements in the element tree.</span></span> <span data-ttu-id="9a084-1051">由于此处理程序使用冒泡路由处理事件，因此，根据事件参数将焦点设置为当前 <paramref name="sender" /> 可能不合适。</span><span class="sxs-lookup"><span data-stu-id="9a084-1051">Because this handler acts on an event with a bubbling routing, setting the focus to the current <paramref name="sender" /> per the event arguments may not be appropriate.</span></span> <span data-ttu-id="9a084-1052">焦点可能需要转到复合子元素或父元素，具体取决于特定控件的组合。</span><span class="sxs-lookup"><span data-stu-id="9a084-1052">Focus might need to go to either a composite child element or to a parent element, depending on the compositing of certain controls.</span></span> <span data-ttu-id="9a084-1053">因此，仅建议将焦点事件标记为 "已处理"，前提是该事件要路由到的整个可视化树都是您创作的控件组合的一部分。</span><span class="sxs-lookup"><span data-stu-id="9a084-1053">Therefore marking a focus event as handled is only recommended if the entirety of the visual tree that the event is routing through is part of compositing of a control that you authored.</span></span></para></block>
        <altmember cref="P:System.Windows.UIElement.Focusable" />
      </Docs>
    </Member>
    <Member MemberName="OnInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitialized(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInitialized : EventArgs -&gt; unit&#xA;override this.OnInitialized : EventArgs -&gt; unit" Usage="frameworkElement.OnInitialized e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="9a084-1054">包含事件数据的 <see cref="T:System.Windows.RoutedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1054">The <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="9a084-1055">引发 <see cref="E:System.Windows.FrameworkElement.Initialized" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-1055">Raises the <see cref="E:System.Windows.FrameworkElement.Initialized" /> event.</span></span> <span data-ttu-id="9a084-1056">每当在内部将 <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> 设置为 <see langword="true" /> 时调用此方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1056">This method is invoked whenever <see cref="P:System.Windows.FrameworkElement.IsInitialized" /> is set to <see langword="true" /> internally.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1057">此特定于 \* 方法不是类处理程序挂钩。</span><span class="sxs-lookup"><span data-stu-id="9a084-1057">This particular On\* method is not a class handler hook.</span></span> <span data-ttu-id="9a084-1058">它也不会完全遵循建立的 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] On \* 方法约定，可以通过重写此方法而不调用基实现来取消匹配的事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-1058">Nor does it exactly follow the established [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] On\* method convention that the matching event could be suppressed by overriding this method and not calling the base implementation.</span></span>  
  
 <span data-ttu-id="9a084-1059">请注意，<xref:System.Windows.FrameworkElement.IsInitialized%2A> 属性是只读的，因此无法将 <xref:System.Windows.FrameworkElement.IsInitialized%2A> 设置为强制初始化行为。</span><span class="sxs-lookup"><span data-stu-id="9a084-1059">Note that the <xref:System.Windows.FrameworkElement.IsInitialized%2A> property is read-only, so you cannot set <xref:System.Windows.FrameworkElement.IsInitialized%2A> to force initialization behavior.</span></span> <span data-ttu-id="9a084-1060">设置初始化状态仅适用于 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 框架。</span><span class="sxs-lookup"><span data-stu-id="9a084-1060">Setting the initialization state is intended to be done only by the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] framework.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9a084-1061">此虚方法的默认实现将引发上述事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-1061">The default implementation of this virtual method raises the event as described above.</span></span> <span data-ttu-id="9a084-1062">重写应调用基实现来保留此行为。</span><span class="sxs-lookup"><span data-stu-id="9a084-1062">Overrides should call the base implementation to preserve this behavior.</span></span> <span data-ttu-id="9a084-1063">如果无法调用基实现，则不仅会像 <see cref="T:System.Windows.FrameworkElement" /> 派生类那样通常引发 <see cref="E:System.Windows.FrameworkElement.Initialized" /> 事件，还会取消此基实现实现的两个重要样式和主题样式初始化操作。</span><span class="sxs-lookup"><span data-stu-id="9a084-1063">If you fail to call the base implementation, not only will you not raise the <see cref="E:System.Windows.FrameworkElement.Initialized" /> event as is generally expected of a <see cref="T:System.Windows.FrameworkElement" /> derived class, but you will also suppress two important style and theme style initialization operations that are implemented by this base implementation.</span></span></para></block>
        <altmember cref="M:System.Windows.FrameworkElement.OnApplyTemplate" />
        <altmember cref="E:System.Windows.FrameworkElement.Initialized" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="frameworkElement.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="9a084-1064">描述已更改的属性的事件数据（包括旧值和新值）。</span><span class="sxs-lookup"><span data-stu-id="9a084-1064">The event data that describes the property that changed, as well as old and new values.</span></span></param>
        <summary><span data-ttu-id="9a084-1065">每当更新此 <see cref="T:System.Windows.FrameworkElement" /> 的任何依赖属性的有效值时调用。</span><span class="sxs-lookup"><span data-stu-id="9a084-1065">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkElement" /> has been updated.</span></span> <span data-ttu-id="9a084-1066">将在实参形参中报告已更改的特定依赖属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1066">The specific dependency property that changed is reported in the arguments parameter.</span></span> <span data-ttu-id="9a084-1067">重写 <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1067">Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1068">此方法并不用于通常检测属性更改或失效。</span><span class="sxs-lookup"><span data-stu-id="9a084-1068">This method is not intended to generally detect property changes or invalidations.</span></span> <span data-ttu-id="9a084-1069">它用于在了解有关属性的广泛分类的特定信息时进行常规失效模式的修改。</span><span class="sxs-lookup"><span data-stu-id="9a084-1069">It is instead intended for modifications of the general invalidation pattern if certain information is known about wide classifications of properties.</span></span>  
  
 <span data-ttu-id="9a084-1070">在对象的整个生存期内，可能会多次调用此方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1070">This method is potentially invoked many times during the life of an object.</span></span> <span data-ttu-id="9a084-1071">因此，如果你重写特定属性的元数据，然后为单个属性附加 <xref:System.Windows.CoerceValueCallback> 或 <xref:System.Windows.PropertyChangedCallback> 函数，则可以获得更好的性能。</span><span class="sxs-lookup"><span data-stu-id="9a084-1071">Therefore, you can achieve better performance if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties.</span></span> <span data-ttu-id="9a084-1072">但是，如果 <xref:System.Windows.FrameworkElement> 包含大量与值相关的依赖项属性，则可以使用此方法，或者，如果包含的是必须重新运行的逻辑（如属性失效的几个相关案例），则应使用此方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1072">However, you would use this method if a <xref:System.Windows.FrameworkElement> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</span></span>  
  
 <span data-ttu-id="9a084-1073">请注意，有一个名称相同的 `OnPropertyChanged` 方法，该方法具有不同的签名（参数类型为 <xref:System.ComponentModel.PropertyChangedEventArgs>），该方法可出现在多个类中。</span><span class="sxs-lookup"><span data-stu-id="9a084-1073">Note that there is an identically named `OnPropertyChanged` method with a different signature (the parameter type is <xref:System.ComponentModel.PropertyChangedEventArgs>) that can appear on a number of classes.</span></span> <span data-ttu-id="9a084-1074">该 `OnPropertyChanged` 用于数据对象通知，并且属于 <xref:System.ComponentModel.INotifyPropertyChanged>的协定的一部分。</span><span class="sxs-lookup"><span data-stu-id="9a084-1074">That `OnPropertyChanged` is used for data object notifications, and is part of the contract for <xref:System.ComponentModel.INotifyPropertyChanged>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9a084-1075">始终调用基实现，作为实现中的第一个操作。</span><span class="sxs-lookup"><span data-stu-id="9a084-1075">Always call the base implementation, as the first operation in your implementation.</span></span> <span data-ttu-id="9a084-1076">否则，将明显禁用整个 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 属性系统，从而导致报告错误的值。</span><span class="sxs-lookup"><span data-stu-id="9a084-1076">Failure to do this will significantly disable the entire [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system, which causes incorrect values to be reported.</span></span> <span data-ttu-id="9a084-1077">特定 <see cref="T:System.Windows.FrameworkElement" /> 实现还负责为影响可见用户界面的各种属性维护适当的状态。</span><span class="sxs-lookup"><span data-stu-id="9a084-1077">The specific <see cref="T:System.Windows.FrameworkElement" /> implementation is also responsible for maintaining proper state for a variety of properties that affect the visible user interface.</span></span> <span data-ttu-id="9a084-1078">这包括在适当的时间基于样式的更改使可视化树失效。</span><span class="sxs-lookup"><span data-stu-id="9a084-1078">These include invalidating the visual tree based on changes to style at appropriate times.</span></span></para></block>
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
        <altmember cref="T:System.Windows.PropertyChangedCallback" />
      </Docs>
    </Member>
    <Member MemberName="OnRenderSizeChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnRenderSizeChanged (System.Windows.SizeChangedInfo sizeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnRenderSizeChanged(class System.Windows.SizeChangedInfo sizeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnRenderSizeChanged (sizeInfo As SizeChangedInfo)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnRenderSizeChanged(System::Windows::SizeChangedInfo ^ sizeInfo);" />
      <MemberSignature Language="F#" Value="override this.OnRenderSizeChanged : System.Windows.SizeChangedInfo -&gt; unit" Usage="frameworkElement.OnRenderSizeChanged sizeInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sizeInfo" Type="System.Windows.SizeChangedInfo" />
      </Parameters>
      <Docs>
        <param name="sizeInfo"><span data-ttu-id="9a084-1079">更改中所涉及新旧大小的详细信息。</span><span class="sxs-lookup"><span data-stu-id="9a084-1079">Details of the old and new size involved in the change.</span></span></param>
        <summary><span data-ttu-id="9a084-1080">引发 <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> 事件，将指定的信息用作最终事件数据的一部分。</span><span class="sxs-lookup"><span data-stu-id="9a084-1080">Raises the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event, using the specified information as part of the eventual event data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1081">此方法重写 <xref:System.Windows.UIElement.OnRenderSizeChanged%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1081">This method overrides <xref:System.Windows.UIElement.OnRenderSizeChanged%2A>.</span></span> <span data-ttu-id="9a084-1082">如果调用此方法，则将重置 <xref:System.Windows.FrameworkElement.ActualWidth%2A> 属性、<xref:System.Windows.FrameworkElement.ActualHeight%2A> 属性，或同时重置这两种方法，具体取决于在所提供的参数中指定为已更改的内容，并将始终引发事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-1082">If you call this method you will reset the <xref:System.Windows.FrameworkElement.ActualWidth%2A> property, the <xref:System.Windows.FrameworkElement.ActualHeight%2A> property, or both, depending on what is specified as changed in the supplied arguments, and will you always raise the event.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9a084-1083">不要为典型布局方案重写此方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1083">Do not override this method for typical layout scenarios.</span></span> <span data-ttu-id="9a084-1084">布局系统以特意异步的方式运行，以确保考虑所有可能的布局排列和度量事例。</span><span class="sxs-lookup"><span data-stu-id="9a084-1084">The layout system operates in a deliberately asynchronous way to assure that all possible layout arrange and measure cases are accounted for.</span></span> <span data-ttu-id="9a084-1085">布局系统替代方法 <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> 和 <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> 通常足以满足任何所需的布局自定义。</span><span class="sxs-lookup"><span data-stu-id="9a084-1085">The layout system override methods <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> and <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> are usually sufficient for any required layout customization.</span></span> <span data-ttu-id="9a084-1086"><see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> 公开为虚拟。</span><span class="sxs-lookup"><span data-stu-id="9a084-1086"><see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> is exposed as a virtual.</span></span> <span data-ttu-id="9a084-1087">您可以重写 <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> 以便更正与在响应中与控件重新组合相关的输入事件相关的运行时行为更改的异常情况。</span><span class="sxs-lookup"><span data-stu-id="9a084-1087">You can override <see cref="M:System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)" /> to correct for exceptional cases where a run-time behavioral change related to input events combined with control recomposition in response might give inaccurate layout information.</span></span>  
  
<span data-ttu-id="9a084-1088">你仍可以在派生类中重写此方法（它是受保护的但不是密封的）。</span><span class="sxs-lookup"><span data-stu-id="9a084-1088">You may still override this method in derived classes (it is protected but not sealed).</span></span> <span data-ttu-id="9a084-1089">始终调用基实现以保留上面提到的行为，除非您有很具体的原因要禁用默认的 WPF 框架级呈现行为。</span><span class="sxs-lookup"><span data-stu-id="9a084-1089">Always call the base implementation to preserve the behavior mentioned above, unless you have very specific reasons for disabling default WPF framework-level rendering behavior.</span></span> <span data-ttu-id="9a084-1090">如果使用标准的 WPF 框架级别布局系统实现，则未能引发 <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> 事件将导致非标准布局行为。</span><span class="sxs-lookup"><span data-stu-id="9a084-1090">Failing to raise the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event will cause non-standard layout behavior if using the standard WPF framework-level layout system implementation.</span></span></para></block>
        <altmember cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />
        <altmember cref="M:System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStyleChanged (System.Windows.Style oldStyle, System.Windows.Style newStyle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStyleChanged(class System.Windows.Style oldStyle, class System.Windows.Style newStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStyleChanged (oldStyle As Style, newStyle As Style)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStyleChanged(System::Windows::Style ^ oldStyle, System::Windows::Style ^ newStyle);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit&#xA;override this.OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit" Usage="frameworkElement.OnStyleChanged (oldStyle, newStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldStyle" Type="System.Windows.Style" />
        <Parameter Name="newStyle" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="oldStyle"><span data-ttu-id="9a084-1091">旧样式。</span><span class="sxs-lookup"><span data-stu-id="9a084-1091">The old style.</span></span></param>
        <param name="newStyle"><span data-ttu-id="9a084-1092">新样式。</span><span class="sxs-lookup"><span data-stu-id="9a084-1092">The new style.</span></span></param>
        <summary><span data-ttu-id="9a084-1093">当此元素上使用的样式更改时（将使布局失效）调用。</span><span class="sxs-lookup"><span data-stu-id="9a084-1093">Invoked when the style in use on this element changes, which will invalidate the layout.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1094">此方法具有一个默认实现，该实现用于设置说明样式更改条件的内部标志。</span><span class="sxs-lookup"><span data-stu-id="9a084-1094">This method has a default implementation that sets an internal flag that notes the style changed condition.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9a084-1095">通常不应重写此方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1095">You should not typically have to override this method.</span></span> <span data-ttu-id="9a084-1096">涉及度量值或排列更改的样式的任何更改都将触发另一个呈现周期，假设 <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" />的典型实现  / <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />或默认值。</span><span class="sxs-lookup"><span data-stu-id="9a084-1096">Any change to a style that involves a measure or arrange change would already trigger another render cycle, assuming a typical implementation of <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> / <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" />, or the defaults.</span></span> <span data-ttu-id="9a084-1097">如果 <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> / <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> 实现有意优化或支持部分更新，但仍希望更直接地将更改应用于样式，则 <see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" /> 的替代可能适用。</span><span class="sxs-lookup"><span data-stu-id="9a084-1097">Overrides of <see cref="M:System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" /> might be appropriate if your <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> / <see cref="M:System.Windows.FrameworkElement.MeasureOverride(System.Windows.Size)" /> implementations were deliberately optimizing or supporting partial updates, but still wanted to apply changes to styles more directly.</span></span> <span data-ttu-id="9a084-1098">（部分更新会尝试避免对任何子元素上的 <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> 和 <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> 进行多次增量调用。</span><span class="sxs-lookup"><span data-stu-id="9a084-1098">(The partial updates would be an attempt to avoid multiple incremental calls to <see cref="M:System.Windows.UIElement.Measure(System.Windows.Size)" /> and <see cref="M:System.Windows.UIElement.Arrange(System.Windows.Rect)" /> on any child elements).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipClosing (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipClosing(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipClosing (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipClosing(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkElement.OnToolTipClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="9a084-1099">提供与事件有关的数据。</span><span class="sxs-lookup"><span data-stu-id="9a084-1099">Provides data about the event.</span></span></param>
        <summary><span data-ttu-id="9a084-1100">每当未处理的 <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> 路由事件在其路由中到达此类时调用。</span><span class="sxs-lookup"><span data-stu-id="9a084-1100">Invoked whenever an unhandled <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="9a084-1101">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-1101">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1102">此方法没有默认实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-1102">This method has no default implementation.</span></span> <span data-ttu-id="9a084-1103">如果继承中的中间类已经实现了此方法，则仍应调用基实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-1103">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="9a084-1104">此方法的目的有些类似于 \* 方法上 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 事件模式：它提供了用类处理程序而不是实例处理程序来处理来自派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1104">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="9a084-1105">在这种情况下，匹配事件是路由事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-1105">In this case the matching event is a routed event.</span></span> <span data-ttu-id="9a084-1106">对于路由事件，On \* 方法的实现模式是不同的，因为路由事件可能是由子元素（而不是将调用处理程序的元素）引发的，因此，您的实现需要将事件参数的源属性考虑（并且在大多数情况下不应尝试重新引发事件）。</span><span class="sxs-lookup"><span data-stu-id="9a084-1106">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="9a084-1107">当沿路由收到事件时，<xref:System.Windows.FrameworkElement> 的子类可以选择调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1107">Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="9a084-1108">一种可能的情况是采用事件的参数，并特意将事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-1108">One potential scenario is to take the arguments of the event and deliberately mark the event as handled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipOpening (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipOpening(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipOpening (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipOpening(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkElement.OnToolTipOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="9a084-1109">提供与事件有关的数据。</span><span class="sxs-lookup"><span data-stu-id="9a084-1109">Provides data about the event.</span></span></param>
        <summary><span data-ttu-id="9a084-1110">每当 <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> 路由事件在其路由中到达此类时调用。</span><span class="sxs-lookup"><span data-stu-id="9a084-1110">Invoked whenever the <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="9a084-1111">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-1111">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1112">此方法没有默认实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-1112">This method has no default implementation.</span></span> <span data-ttu-id="9a084-1113">如果继承中的中间类已经实现了此方法，则仍应调用基实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-1113">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="9a084-1114">此方法的目的有些类似于 \* 方法上 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 事件模式：它提供了用类处理程序而不是实例处理程序来处理来自派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1114">The purpose of this method is somewhat similar to [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="9a084-1115">在这种情况下，匹配事件是路由事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-1115">In this case the matching event is a routed event.</span></span> <span data-ttu-id="9a084-1116">对于路由事件，On \* 方法的实现模式是不同的，因为路由事件可能是由子元素（而不是将调用处理程序的元素）引发的，因此，您的实现需要将事件参数的源属性考虑（并且在大多数情况下不应尝试重新引发事件）。</span><span class="sxs-lookup"><span data-stu-id="9a084-1116">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="9a084-1117">当沿路由收到事件时，<xref:System.Windows.FrameworkElement> 的子类可以选择调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1117">Subclasses of <xref:System.Windows.FrameworkElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="9a084-1118">一种可能的情况是获取事件的参数，并特意将事件标记为已处理以缩短路由。</span><span class="sxs-lookup"><span data-stu-id="9a084-1118">One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVisualParentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnVisualParentChanged(class System.Windows.DependencyObject oldParent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.OnVisualParentChanged(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnVisualParentChanged (oldParent As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnVisualParentChanged(System::Windows::DependencyObject ^ oldParent);" />
      <MemberSignature Language="F#" Value="override this.OnVisualParentChanged : System.Windows.DependencyObject -&gt; unit" Usage="frameworkElement.OnVisualParentChanged oldParent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldParent" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="oldParent"><span data-ttu-id="9a084-1119">旧的父元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-1119">The old parent element.</span></span> <span data-ttu-id="9a084-1120">可能是 <see langword="null" />，指示元素之前没有可视父级。</span><span class="sxs-lookup"><span data-stu-id="9a084-1120">May be <see langword="null" /> to indicate that the element did not have a visual parent previously.</span></span></param>
        <summary><span data-ttu-id="9a084-1121">当此元素父级在可视化树中发生更改时进行了调用。</span><span class="sxs-lookup"><span data-stu-id="9a084-1121">Invoked when the parent of this element in the visual tree is changed.</span></span> <span data-ttu-id="9a084-1122">重写 <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1122">Overrides <see cref="M:System.Windows.UIElement.OnVisualParentChanged(System.Windows.DependencyObject)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1123">可视化树可能不同于逻辑树，因为它会忽略不以视觉方式呈现的元素（例如集合），并根据其主题和样式组合展开某些元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-1123">The visual tree is potentially different from the logical tree because it omits elements that do not render visually, such as collections, and expands some elements on the basis of their theme and style compositing.</span></span> <span data-ttu-id="9a084-1124">有关详细信息，请参见 [WPF 中的树](/dotnet/framework/wpf/advanced/trees-in-wpf)。</span><span class="sxs-lookup"><span data-stu-id="9a084-1124">For more information, see [Trees in WPF](/dotnet/framework/wpf/advanced/trees-in-wpf).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9a084-1125">此虚方法的默认实现将查询新父代，引发各种初始化事件，并根据需要设置有关 <see cref="T:System.Windows.FrameworkElement" /> 初始化状态的内部标志。</span><span class="sxs-lookup"><span data-stu-id="9a084-1125">The default implementation of this virtual method queries for the new parent, raises various initialization events, and sets internal flags about initialization state of the <see cref="T:System.Windows.FrameworkElement" /> as appropriate.</span></span> <span data-ttu-id="9a084-1126">最后，它将调用由 <see cref="T:System.Windows.UIElement" />声明的后续基本实现，而后者又会在 <see cref="T:System.Windows.Media.Visual" />中调用其基础。</span><span class="sxs-lookup"><span data-stu-id="9a084-1126">Finally, it calls the successive base implementations as declared by <see cref="T:System.Windows.UIElement" />, which in turn calls its base in <see cref="T:System.Windows.Media.Visual" />.</span></span> <span data-ttu-id="9a084-1127">始终调用基实现以保留此行为，否则，如果声明为另一个元素的子元素，则此元素的元素树行为可能不符合预期。</span><span class="sxs-lookup"><span data-stu-id="9a084-1127">Always call the base implementation to preserve this behavior, otherwise the element tree behavior for this element when declared as a child of another element may not be as expected.</span></span>  
  
<span data-ttu-id="9a084-1128">一些现有 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 类会重写此方法，例如： <see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />，<see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1128">A few existing [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] classes override this method, for example: <see cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />, <see cref="M:System.Windows.Controls.ListBoxItem.OnVisualParentChanged(System.Windows.DependencyObject)" />.</span></span> <span data-ttu-id="9a084-1129">最常见的方案是强制新的父项必须是特定类型。</span><span class="sxs-lookup"><span data-stu-id="9a084-1129">The most common scenario is to enforce that the new parent must be a particular type.</span></span> <span data-ttu-id="9a084-1130">如果新父级未能通过某种方式进行类型测试，这可能涉及到引发异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-1130">This might involve throwing an exception if the new parent failed some manner of type test.</span></span> <span data-ttu-id="9a084-1131">此方案的专用版本存在于列表项和菜单项的实现中，这些列表项和菜单项在拥有适当集合以存储它们的父视觉对象之外没有任何意义。</span><span class="sxs-lookup"><span data-stu-id="9a084-1131">A specialized version of this scenario exists in implementations for list items and menu items, which do not make any sense outside a parent visual that owns an appropriate collection to store them in.</span></span> <span data-ttu-id="9a084-1132">请注意，这种情况并不一定会引发异常，因为可能存在依赖于重新设置父级元素的设计器方案，这些元素暂时没有 "常规" 父级。</span><span class="sxs-lookup"><span data-stu-id="9a084-1132">Note that these cases do not necessarily raise exceptions, because there might be designer scenarios that rely on reparenting elements that are momentarily without their "regular" parents.</span></span>  
  
<span data-ttu-id="9a084-1133">此方法也会在通常为根元素的某些元素（如 <see cref="T:System.Windows.Window" />）中重写。</span><span class="sxs-lookup"><span data-stu-id="9a084-1133">This method is also overridden in certain elements that are typically the root element, such as  <see cref="T:System.Windows.Window" />.</span></span> <span data-ttu-id="9a084-1134">另一种情况是元素，这些元素是标记中的元素，但会在编译的逻辑树中自动生成更大的基础结构（如 <see cref="T:System.Windows.Controls.Page" />）。</span><span class="sxs-lookup"><span data-stu-id="9a084-1134">Another case is elements that are the apparent root element in markup but which autogenerate a greater infrastructure in a compiled logical tree (such as <see cref="T:System.Windows.Controls.Page" />).</span></span> <span data-ttu-id="9a084-1135"><see cref="T:System.Windows.Window" /> 和 <see cref="T:System.Windows.Controls.Page" /> 实现有意密封方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1135">The <see cref="T:System.Windows.Window" /> and <see cref="T:System.Windows.Controls.Page" /> implementations deliberately seal the method.</span></span></para></block>
        <altmember cref="M:System.Windows.Media.Visual.OnVisualParentChanged(System.Windows.DependencyObject)" />
        <altmember cref="M:System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)" />
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyle">
      <MemberSignature Language="C#" Value="public bool OverridesDefaultStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesDefaultStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesDefaultStyle As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesDefaultStyle { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesDefaultStyle : bool with get, set" Usage="System.Windows.FrameworkElement.OverridesDefaultStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1136">获取或设置一个值，该值指示此元素是否并入主题样式中的样式属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1136">Gets or sets a value that indicates whether this element incorporates style properties from theme styles.</span></span></summary>
        <value><span data-ttu-id="9a084-1137">如果此元素不使用主题样式属性，则为 <see langword="true" />；所有源于样式的属性均来自本地应用程序样式，不会应用主题样式属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1137"><see langword="true" /> if this element does not use theme style properties; all style-originating properties come from local application styles, and theme style properties do not apply.</span></span> <span data-ttu-id="9a084-1138">如果首先应用了应用程序样式，然后将主题样式应用于未在应用程序样式中专门设置的属性，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1138"><see langword="false" /> if application styles apply first, and then theme styles apply for properties that were not specifically set in application styles.</span></span> <span data-ttu-id="9a084-1139">默认为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1139">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1140">此属性最常见的用法是在提供主题样式的样式的资源库中间接使用。</span><span class="sxs-lookup"><span data-stu-id="9a084-1140">The most common usage of this property is an indirect usage within the setter of a style that is supplying a themed style.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="9a084-1141">如果将 <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> 设置为在控件上 `true`，则将禁止主题样式提供的默认控件模板。</span><span class="sxs-lookup"><span data-stu-id="9a084-1141">If you set <xref:System.Windows.FrameworkElement.OverridesDefaultStyle%2A> to `true` on a control, you will be suppressing the default control template supplied by the theme styles.</span></span> <span data-ttu-id="9a084-1142">该控件模板通常包括内容呈现器和其他为控件提供基本 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 功能和可视化的复合元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-1142">That control template typically includes the content presenter and other composited elements that provide basic [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] functionality and visualization for the control.</span></span> <span data-ttu-id="9a084-1143">如果希望控件继续支持与默认主题样式相同的功能，则必须使用复制相同结构的控件模板提供替换样式。</span><span class="sxs-lookup"><span data-stu-id="9a084-1143">If you want the control to continue to support the same features as the default theme styles, you must supply an alternate style with a control template that replicates the same structure.</span></span> <span data-ttu-id="9a084-1144">有关详细信息，请参阅[控件创作概述](/dotnet/framework/wpf/controls/control-authoring-overview)。</span><span class="sxs-lookup"><span data-stu-id="9a084-1144">For more information, see [Control Authoring Overview](/dotnet/framework/wpf/controls/control-authoring-overview).</span></span>  
  
<a name="dependencyPropertyInfo_OverridesDefaultStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-1145">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-1145">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-1146">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-1146">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.OverridesDefaultStyleProperty>|  
|<span data-ttu-id="9a084-1147">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-1147">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OverridesDefaultStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OverridesDefaultStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OverridesDefaultStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OverridesDefaultStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OverridesDefaultStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.OverridesDefaultStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1148">标识 <see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1148">Identifies the <see cref="P:System.Windows.FrameworkElement.OverridesDefaultStyle" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Parent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkElement.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1149">获取此元素的逻辑父元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-1149">Gets the logical parent  element of this element.</span></span></summary>
        <value><span data-ttu-id="9a084-1150">此元素的逻辑父级。</span><span class="sxs-lookup"><span data-stu-id="9a084-1150">This element's logical parent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1151">在实例化了元素但未附加到最终连接到页面级别根元素或应用程序对象的任何逻辑树的情况下，可能会 `null` <xref:System.Windows.FrameworkElement.Parent%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1151"><xref:System.Windows.FrameworkElement.Parent%2A> may be `null` in cases where an element was instantiated, but is not attached to any logical tree that eventually connects to the page level root element, or the application object.</span></span>  
  
 <span data-ttu-id="9a084-1152">请注意，根据应用程序的功能，元素的逻辑父级可能会发生更改，并且保持此属性的值将不会反映此更改。</span><span class="sxs-lookup"><span data-stu-id="9a084-1152">Note that the logical parent of an element can potentially change depending on your application's functionality, and keeping the value of this property will not reflect that change.</span></span> <span data-ttu-id="9a084-1153">通常应在需要之前立即获取值。</span><span class="sxs-lookup"><span data-stu-id="9a084-1153">You typically should get the value immediately before you need it.</span></span>  
  
 <span data-ttu-id="9a084-1154">有关逻辑树遍历的详细信息以及使用 <xref:System.Windows.FrameworkElement.Parent%2A> 作为父元素发现技术的方案，请参阅[WPF 中的树](/dotnet/framework/wpf/advanced/trees-in-wpf)。</span><span class="sxs-lookup"><span data-stu-id="9a084-1154">See [Trees in WPF](/dotnet/framework/wpf/advanced/trees-in-wpf) for more information about logical tree  traversal, and the scenarios where using  <xref:System.Windows.FrameworkElement.Parent%2A> as a technique of parent element discovery is appropriate.</span></span>  
  
 <span data-ttu-id="9a084-1155">属性引擎在重新父级后可能会重新计算某个元素的所有属性值，因为某些属性通过逻辑树继承值。</span><span class="sxs-lookup"><span data-stu-id="9a084-1155">The property engine will potentially recalculate all property values of an element when it is reparented, because some properties inherit values through the logical tree.</span></span> <span data-ttu-id="9a084-1156">当对元素进行重定父级时，适用于绑定的 <xref:System.Windows.FrameworkElement.DataContext%2A> 也会发生更改。</span><span class="sxs-lookup"><span data-stu-id="9a084-1156">The <xref:System.Windows.FrameworkElement.DataContext%2A> that applies for bindings can also change when elements are reparented.</span></span>  
  
 <span data-ttu-id="9a084-1157">通常仅通过操作集合、使用专用的 add 或 remove 方法或通过设置元素的内容属性来更改元素的父元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-1157">Changing an element's parent is typically only done through manipulation of collections, by using dedicated add or remove methods, or through setting content properties of elements.</span></span>  
  
 <span data-ttu-id="9a084-1158">使用 <xref:System.Windows.FrameworkElement.Parent%2A> 属性的最典型方案是获取引用，然后从父级获取各种 <xref:System.Windows.FrameworkElement> 属性值。</span><span class="sxs-lookup"><span data-stu-id="9a084-1158">The most typical scenario for using the <xref:System.Windows.FrameworkElement.Parent%2A> property is to obtain a reference and then get various <xref:System.Windows.FrameworkElement> property values from the parent.</span></span> <span data-ttu-id="9a084-1159">对于模板，模板 <xref:System.Windows.FrameworkElement.Parent%2A> 最终将 `null`。</span><span class="sxs-lookup"><span data-stu-id="9a084-1159">For templates, the <xref:System.Windows.FrameworkElement.Parent%2A> of the template eventually will be `null`.</span></span> <span data-ttu-id="9a084-1160">若要过去此点并扩展到实际应用模板的逻辑树，请使用 <xref:System.Windows.FrameworkElement.TemplatedParent%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1160">To get past this point and extend into the logical tree where the template is actually applied, use <xref:System.Windows.FrameworkElement.TemplatedParent%2A>.</span></span>  
  
 <span data-ttu-id="9a084-1161">请注意，在这种情况下，此属性不会报告 visual tree 父元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-1161">Note that this property does not report visual tree parents in cases where these vary from the logical tree parents.</span></span> <span data-ttu-id="9a084-1162">可视化树父项对于一般应用程序情况通常并不重要，但对于某些视觉对象级别的情况可能是所需的父元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-1162">Visual tree parents are not typically important for general application cases but may be the desired parent elements for certain visual level cases.</span></span> <span data-ttu-id="9a084-1163">请参阅 <xref:System.Windows.Media.VisualTreeHelper>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1163">See <xref:System.Windows.Media.VisualTreeHelper>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a084-1164">下面的示例演示了用于检查元素父元素的代码，然后使用父元素的属性值设置要匹配的子元素的属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1164">The following example shows code that checks for an element's parent, and then uses property values from the parent to set properties on the child element to match.</span></span> <span data-ttu-id="9a084-1165">在这种情况下，这些是影响呈现大小的属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1165">In this case these are properties that affect the rendering size.</span></span>  
  
 [!code-csharp[GeometryDesigner#FEParentProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometryDesigner/CSharp/Window1.xaml.cs#feparentproperty)]
 [!code-vb[GeometryDesigner#FEParentProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometryDesigner/visualbasic/window1.xaml.vb#feparentproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.TemplatedParent" />
        <altmember cref="T:System.Windows.LogicalTreeHelper" />
      </Docs>
    </Member>
    <Member MemberName="ParentLayoutInvalidated">
      <MemberSignature Language="C#" Value="protected internal virtual void ParentLayoutInvalidated (System.Windows.UIElement child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void ParentLayoutInvalidated(class System.Windows.UIElement child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub ParentLayoutInvalidated (child As UIElement)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void ParentLayoutInvalidated(System::Windows::UIElement ^ child);" />
      <MemberSignature Language="F#" Value="abstract member ParentLayoutInvalidated : System.Windows.UIElement -&gt; unit&#xA;override this.ParentLayoutInvalidated : System.Windows.UIElement -&gt; unit" Usage="frameworkElement.ParentLayoutInvalidated child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Windows.UIElement" />
      </Parameters>
      <Docs>
        <param name="child"><span data-ttu-id="9a084-1166">报告更改的子元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-1166">The child element reporting the change.</span></span></param>
        <summary><span data-ttu-id="9a084-1167">支持 <see cref="T:System.Windows.FrameworkElement" /> 的专用子类中的增量布局实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-1167">Supports incremental layout implementations in specialized subclasses of <see cref="T:System.Windows.FrameworkElement" />.</span></span> <span data-ttu-id="9a084-1168">如果子元素包含无效属性，且该属性在元数据中标记为影响布局过程中父元素的测量或排列过程的因素，则调用 <see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1168"><see cref="M:System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)" /> is invoked when a child element has invalidated a property that is marked in metadata as affecting the parent's measure or arrange passes during layout.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1169">如果此元素有一个子元素，其中某些属性已失效，并且该属性在注册过程中被标记为 <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> 或 <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> 在属性元数据中，则调用此方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1169">If this element has a child element on which some property was invalidated and the property was marked as <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentMeasure%2A> or <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A> in property metadata during registration, this method is invoked.</span></span> <span data-ttu-id="9a084-1170">如果此元素支持布局的部分（增量）更新，则方法调用会通知父元素必须重新度量的特定子元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-1170">The method invocation notifies the parent element which particular child element must be re-measured if this element supports partial (incremental) update of layout.</span></span>  
  
 <span data-ttu-id="9a084-1171">默认情况下，<xref:System.Windows.FrameworkElement> 不支持增量布局，而在 <xref:System.Windows.FrameworkElement> 类中，此方法没有默认实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-1171">By default, <xref:System.Windows.FrameworkElement> does not support incremental layout, and in the <xref:System.Windows.FrameworkElement> class this method has no default implementation.</span></span> <span data-ttu-id="9a084-1172">如果需要重写此方法，则这种情况并不常见，因为这需要修改默认布局系统行为。</span><span class="sxs-lookup"><span data-stu-id="9a084-1172">The scenario where overriding this method would be necessary is not common, because it requires you to modify the default layout system behavior.</span></span>  
  
 <span data-ttu-id="9a084-1173">例如，如果某个类的可能的子元素的类型限制比 WPF 框架级别布局系统更严格，则可能会出现这种情况。</span><span class="sxs-lookup"><span data-stu-id="9a084-1173">An example implementation scenario might be if a class had type limitations for possible child elements that are significantly more restrictive than the WPF framework-level layout system.</span></span> <span data-ttu-id="9a084-1174">由于这些自定义元素的性质，实现某些自定义布局行为时，可以特意延迟属性更改。</span><span class="sxs-lookup"><span data-stu-id="9a084-1174">Because of the nature of these custom elements, property changes could be deliberately deferred when you implement some custom layout behavior.</span></span> <span data-ttu-id="9a084-1175">例如，对于某些类型通常会导致另一布局处理的更改，测量/排列方法重写（尝试优化子元素呈现传递）可能会延迟。</span><span class="sxs-lookup"><span data-stu-id="9a084-1175">For instance, measure/arrange method overrides, which try to optimize the child element render pass, could be deferred for certain types of changes that would ordinarily result in another layout pass.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public override sealed System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="frameworkElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><span data-ttu-id="9a084-1176">应确定其预期焦点更改的方向。</span><span class="sxs-lookup"><span data-stu-id="9a084-1176">The direction for which a prospective focus change should be determined.</span></span></param>
        <summary><span data-ttu-id="9a084-1177">根据提供的焦点移动方向，确定在此元素之后接收焦点的下一个元素，但不实际移动焦点。</span><span class="sxs-lookup"><span data-stu-id="9a084-1177">Determines the next element that would receive focus relative to this element for a provided focus movement direction, but does not actually move the focus.</span></span></summary>
        <returns><span data-ttu-id="9a084-1178">如果实际遍历了焦点，则为焦点将要移到的下一个元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-1178">The next element that focus would move to if focus were actually traversed.</span></span> <span data-ttu-id="9a084-1179">如果焦点不能按提供的方向相对于此元素移动，则可能返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1179">May return <see langword="null" /> if focus cannot be moved relative to this element for the provided direction.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1180"><xref:System.Windows.FrameworkElement.MoveFocus%2A> 是实际移动焦点的相关方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1180"><xref:System.Windows.FrameworkElement.MoveFocus%2A> is the related method that actually does move focus.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a084-1181">下面的示例实现一个处理程序，该处理程序处理几个可能的按钮输入，每个按钮表示可能的 <xref:System.Windows.Input.FocusNavigationDirection>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1181">The following example implements a handler that handles several possible button inputs, each button representing a possible <xref:System.Windows.Input.FocusNavigationDirection>.</span></span> <span data-ttu-id="9a084-1182">处理程序跟踪具有当前键盘焦点的元素，并对该元素调用 <xref:System.Windows.FrameworkElement.PredictFocus%2A>，并为提供的 <xref:System.Windows.Input.TraversalRequest> 类型参数指定适当的 <xref:System.Windows.Input.FocusNavigationDirection>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1182">The handler tracks the element with current keyboard focus, and calls <xref:System.Windows.FrameworkElement.PredictFocus%2A> on that element, and specifies the appropriate <xref:System.Windows.Input.FocusNavigationDirection> as initialization for the <xref:System.Windows.Input.TraversalRequest> type parameter provided.</span></span> <span data-ttu-id="9a084-1183">处理程序不会像 <xref:System.Windows.FrameworkElement.MoveFocus%2A> 那样移动到该元素，而是出于可视化目的更改预测焦点目标的物理尺寸。</span><span class="sxs-lookup"><span data-stu-id="9a084-1183">Instead of moving to that element as <xref:System.Windows.FrameworkElement.MoveFocus%2A> would do, the handler changes the physical dimensions of the predicted focus destination for visualization purposes.</span></span>  
  
 [!code-csharp[FocusSample#FEPredictFocus](~/samples/snippets/csharp/VS_Snippets_Wpf/FocusSample/CSharp/Window1.xaml.cs#fepredictfocus)]
 [!code-vb[FocusSample#FEPredictFocus](~/samples/snippets/visualbasic/VS_Snippets_Wpf/FocusSample/visualbasic/window1.xaml.vb#fepredictfocus)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="9a084-1184">在 <see cref="T:System.Windows.Input.TraversalRequest" /> 中指定了以下方向之一：<see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />、<see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />、<see cref="F:System.Windows.Input.FocusNavigationDirection.First" />、<see cref="F:System.Windows.Input.FocusNavigationDirection.Last" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1184">Specified one of the following directions in the <see cref="T:System.Windows.Input.TraversalRequest" />: <see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.First" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Last" />.</span></span> <span data-ttu-id="9a084-1185">对于 <see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> 来说，这些方向是非法的（但对于 <see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> 来说是合法的）。</span><span class="sxs-lookup"><span data-stu-id="9a084-1185">These directions are not legal for <see cref="M:System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> (but they are legal for <see cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />).</span></span></exception>
        <altmember cref="M:System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
        <altmember cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="member this.RegisterName : string * obj -&gt; unit" Usage="frameworkElement.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a084-1186">要在指定的名称-对象映射中使用的名称。</span><span class="sxs-lookup"><span data-stu-id="9a084-1186">Name to use for the specified name-object mapping.</span></span></param>
        <param name="scopedElement"><span data-ttu-id="9a084-1187">映射的对象。</span><span class="sxs-lookup"><span data-stu-id="9a084-1187">Object for the mapping.</span></span></param>
        <summary><span data-ttu-id="9a084-1188">提供一个可简化对 <see cref="T:System.Windows.NameScope" /> 注册方法访问的访问器。</span><span class="sxs-lookup"><span data-stu-id="9a084-1188">Provides an accessor that simplifies access to the <see cref="T:System.Windows.NameScope" /> registration method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1189">此方法是调用 <xref:System.Windows.NameScope.RegisterName%2A>的便捷方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1189">This method is a convenience method for calling <xref:System.Windows.NameScope.RegisterName%2A>.</span></span> <span data-ttu-id="9a084-1190">该实现将检查后续的父元素，直到它找到适用的 <xref:System.Windows.NameScope> 实现（通过查找实现 <xref:System.Windows.Markup.INameScope>的元素找到）。</span><span class="sxs-lookup"><span data-stu-id="9a084-1190">The implementation will check successive parent elements until it finds the applicable <xref:System.Windows.NameScope> implementation, which is found by finding an element that implements <xref:System.Windows.Markup.INameScope>.</span></span> <span data-ttu-id="9a084-1191">有关名称范围的详细信息，请参阅[WPF XAML 名称范围](/dotnet/framework/wpf/advanced/wpf-xaml-namescopes)。</span><span class="sxs-lookup"><span data-stu-id="9a084-1191">For more information about namescopes, see [WPF XAML Namescopes](/dotnet/framework/wpf/advanced/wpf-xaml-namescopes).</span></span>  
  
 <span data-ttu-id="9a084-1192">若要在代码中创建应用程序时正确地挂钩应用程序的动画情节提要，则调用 <xref:System.Windows.FrameworkElement.RegisterName%2A> 是必需的。</span><span class="sxs-lookup"><span data-stu-id="9a084-1192">Calling <xref:System.Windows.FrameworkElement.RegisterName%2A> is necessary in order to correctly hook up animation storyboards for applications when created in code.</span></span> <span data-ttu-id="9a084-1193">这是因为 <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>中的一个关键情节提要属性使用了运行时名称查找，而不能引用目标元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-1193">This is because one of the key storyboard properties, <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>, uses a run-time name lookup instead of being able to take a reference to a target element.</span></span> <span data-ttu-id="9a084-1194">即使可通过代码引用访问该元素，也是如此。</span><span class="sxs-lookup"><span data-stu-id="9a084-1194">This is true even if that element is accessible by reference from the code.</span></span> <span data-ttu-id="9a084-1195">有关为何需要为情节提要目标注册名称的详细信息，请参阅[情节提要概述](/dotnet/framework/wpf/graphics-multimedia/storyboards-overview)。</span><span class="sxs-lookup"><span data-stu-id="9a084-1195">For more information on why you need to register names for storyboard targets, see [Storyboards Overview](/dotnet/framework/wpf/graphics-multimedia/storyboards-overview).</span></span>  
  
   
  
## Examples  
 [!code-csharp[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/csharp/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/CSharp/ScopeExample.cs#namescopeexample)]
 [!code-vb[StoryboardBeginAnimation_procedural_snip#NameScopeExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StoryboardBeginAnimation_procedural_snip/visualbasic/scopeexample.vb#namescopeexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.NameScope.RegisterName(System.String,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void RemoveLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RemoveLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RemoveLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RemoveLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.RemoveLogicalChild : obj -&gt; unit" Usage="frameworkElement.RemoveLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child"><span data-ttu-id="9a084-1196">要删除的元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-1196">The element to remove.</span></span></param>
        <summary><span data-ttu-id="9a084-1197">从此元素的逻辑树中删除所提供的对象。</span><span class="sxs-lookup"><span data-stu-id="9a084-1197">Removes the provided object from this element's logical tree.</span></span> <span data-ttu-id="9a084-1198"><see cref="T:System.Windows.FrameworkElement" /> 将更新受影响的逻辑树父指针，以便与此删除操作保持同步。</span><span class="sxs-lookup"><span data-stu-id="9a084-1198"><see cref="T:System.Windows.FrameworkElement" /> updates the affected logical tree parent pointers to keep in sync with this deletion.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1199">使用此方法可实现表示元素的逻辑子级的对象上的集合。</span><span class="sxs-lookup"><span data-stu-id="9a084-1199">Use this method for the implementation of collections on objects that represent logical children of an element.</span></span> <span data-ttu-id="9a084-1200">这可以在属性 getter 或 setter、`Changed` 事件、构造函数或集合类型本身内的类处理程序中完成。</span><span class="sxs-lookup"><span data-stu-id="9a084-1200">This might be done in property getters or setters, class handlers of `Changed` events, constructors, or within the collection types themselves.</span></span>  
  
 <span data-ttu-id="9a084-1201">对于控件作者，不建议在此级别操作逻辑树，除非提供的基控件类的内容模型不适当。</span><span class="sxs-lookup"><span data-stu-id="9a084-1201">For control authors, manipulating the logical tree at this level is not the recommended practice, unless none of the provided base control class' content models are appropriate.</span></span> <span data-ttu-id="9a084-1202">请考虑在 <xref:System.Windows.Controls.ContentControl>、<xref:System.Windows.Controls.ItemsControl>和 <xref:System.Windows.Controls.HeaderedItemsControl>级别进行子类化。</span><span class="sxs-lookup"><span data-stu-id="9a084-1202">Consider subclassing at the level of <xref:System.Windows.Controls.ContentControl>, <xref:System.Windows.Controls.ItemsControl>, and <xref:System.Windows.Controls.HeaderedItemsControl>.</span></span> <span data-ttu-id="9a084-1203">这些类提供了一个内容模型，其中包含通过专用 Api 特定的逻辑子级强制，并支持在 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 控件中通常需要的其他功能，例如通过模板进行样式设置。</span><span class="sxs-lookup"><span data-stu-id="9a084-1203">These classes provide a content model with particular enforcement of logical children through dedicated APIs, as well as support for other features typically desirable in a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] control such as styling through templates.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a084-1204">下面的示例实现自定义 <xref:System.Windows.FrameworkElement> 上的 `Child` 属性，该属性执行其自己的可视化层实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-1204">The following example implements a `Child` property on a custom <xref:System.Windows.FrameworkElement> that does its own visual layer implementation.</span></span> <span data-ttu-id="9a084-1205">已设计属性的 setter，因此，如果值发生更改，则会从逻辑树中删除旧值以及类特定的视觉对象集合。</span><span class="sxs-lookup"><span data-stu-id="9a084-1205">The property's setter is designed so that if the value changes, the old value is removed from the logical tree, as well as a class-specific visual collection.</span></span> <span data-ttu-id="9a084-1206">将缓存这些值，然后将新值添加到标准 WPF 框架级别的逻辑树和自定义视觉对象集合中。</span><span class="sxs-lookup"><span data-stu-id="9a084-1206">The values are cached, and then the new value is added to both the standard WPF framework level logical tree and the custom visual collection.</span></span>  
  
 [!code-csharp[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/csharp/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/CSharp/ParticleEffectExamples/OverlayRenderDecorator.cs#addremovelogicalchild)]
 [!code-vb[CompositionTargetRenderingAnimations#AddRemoveLogicalChild](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CompositionTargetRenderingAnimations/visualbasic/particleeffectexamples/overlayrenderdecorator.vb#addremovelogicalchild)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoView">
      <MemberSignature Language="C#" Value="public event System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RequestBringIntoViewEventHandler RequestBringIntoView" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RequestBringIntoView As RequestBringIntoViewEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RequestBringIntoViewEventHandler ^ RequestBringIntoView;" />
      <MemberSignature Language="F#" Value="member this.RequestBringIntoView : System.Windows.RequestBringIntoViewEventHandler " Usage="member this.RequestBringIntoView : System.Windows.RequestBringIntoViewEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RequestBringIntoViewEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1207">当在此元素上调用 <see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" /> 时发生。</span><span class="sxs-lookup"><span data-stu-id="9a084-1207">Occurs when <see cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" /> is called on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1208">此事件指示在可滚动区域内，引发 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 事件的元素应在父 <xref:System.Windows.Controls.ScrollViewer> （或派生类）中可见。</span><span class="sxs-lookup"><span data-stu-id="9a084-1208">This event indicates to a parent <xref:System.Windows.Controls.ScrollViewer> (or derived class) that the element that raises the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event should be made visible within the scrollable region.</span></span> <span data-ttu-id="9a084-1209">然后，<xref:System.Windows.Controls.ScrollViewer> 使用事件的类处理将 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 事件标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-1209">The <xref:System.Windows.Controls.ScrollViewer> will then mark the <xref:System.Windows.FrameworkElement.RequestBringIntoView> event as handled, by using class handling of the event.</span></span> <span data-ttu-id="9a084-1210">通常 <xref:System.Windows.FrameworkElement.RequestBringIntoView> 事件数据不应由任何控制滚动区域的类或任何实例处理程序进行标记处理，因为这样做会影响调用 <xref:System.Windows.FrameworkElement.BringIntoView%2A>的元素的预期目标。</span><span class="sxs-lookup"><span data-stu-id="9a084-1210">In general <xref:System.Windows.FrameworkElement.RequestBringIntoView> event data should not be marked handled by any class that does control a scrolling region, or by any instance handler, because doing so would interfere with the intended goal of the element that called <xref:System.Windows.FrameworkElement.BringIntoView%2A>.</span></span>  
  
<a name="routedEventInfo_RequestBringIntoView"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9a084-1211">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="9a084-1211">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-1212">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-1212">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.RequestBringIntoViewEvent>|  
|<span data-ttu-id="9a084-1213">路由策略</span><span class="sxs-lookup"><span data-stu-id="9a084-1213">Routing strategy</span></span>|<span data-ttu-id="9a084-1214">冒泡</span><span class="sxs-lookup"><span data-stu-id="9a084-1214">Bubbling</span></span>|  
|<span data-ttu-id="9a084-1215">委托</span><span class="sxs-lookup"><span data-stu-id="9a084-1215">Delegate</span></span>|<xref:System.Windows.RequestBringIntoViewEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)" />
        <altmember cref="T:System.Windows.Controls.ScrollViewer" />
      </Docs>
    </Member>
    <Member MemberName="RequestBringIntoViewEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent RequestBringIntoViewEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent RequestBringIntoViewEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RequestBringIntoViewEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ RequestBringIntoViewEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable RequestBringIntoViewEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.RequestBringIntoViewEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1216">标识 <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-1216">Identifies the <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> routed event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Resources : System.Windows.ResourceDictionary with get, set" Usage="System.Windows.FrameworkElement.Resources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netcore-3.1;net-5.0;dotnet-plat-ext-5.0">
          <AttributeName>System.Windows.Markup.Ambient</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1217">获取或设置本地定义的资源字典。</span><span class="sxs-lookup"><span data-stu-id="9a084-1217">Gets or sets the locally-defined resource dictionary.</span></span></summary>
        <value><span data-ttu-id="9a084-1218">资源中当前本地定义的字典，其中的每个资源均可通过键进行访问。</span><span class="sxs-lookup"><span data-stu-id="9a084-1218">The current locally-defined dictionary of resources, where each resource can be accessed by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1219">可以完全或部分地在 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 中定义的资源字典通常创建为属性元素，并且通常位于任何单个页面或应用程序的根元素上。</span><span class="sxs-lookup"><span data-stu-id="9a084-1219">Resource dictionaries that can be defined completely or partially in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] are typically created as a property element, and are typically on the root element for any individual page or for the application.</span></span> <span data-ttu-id="9a084-1220">将资源字典置于此级别，可以更方便地从页面中的单个子元素（或应用程序用例中的任何页面）查找。</span><span class="sxs-lookup"><span data-stu-id="9a084-1220">Placing the resource dictionary at this level makes it easier to find from individual child elements in the page (or from any page, in the application case).</span></span> <span data-ttu-id="9a084-1221">在大多数应用程序方案中，我们建议将样式定义为资源字典中的对象元素，或将其定义为外部资源，以便整个样式资源可以是独立的（这种方法可通过分隔需要编辑的物理文件来帮助将设计器责任与开发人员责任区分开来）。</span><span class="sxs-lookup"><span data-stu-id="9a084-1221">In most application scenarios, we recommend that styles be defined as object elements within a resource dictionary, or be defined as external resources so that the entire style resource can be self-contained (this approach helps separate designer responsibilities from developer responsibilities by separating the physical files that need to be edited).</span></span>  
  
 <span data-ttu-id="9a084-1222">请注意，此属性仅返回直接在该元素中声明的资源字典。</span><span class="sxs-lookup"><span data-stu-id="9a084-1222">Note that this property returns only the resource dictionary declared directly within that element.</span></span> <span data-ttu-id="9a084-1223">这不同于实际资源查找过程，其中，子元素可以访问每个父元素中定义的任何资源，并以递归方式向上搜索。</span><span class="sxs-lookup"><span data-stu-id="9a084-1223">This is different than the actual resource lookup process, where a child element can access any of the resources defined in each parent element, searching recursively upwards.</span></span>  
  
 <span data-ttu-id="9a084-1224">资源也可由该集合中的代码引用，但请注意，在 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 中创建的资源在声明该字典的元素引发 <xref:System.Windows.FrameworkElement.Loaded> 之前将无法访问。</span><span class="sxs-lookup"><span data-stu-id="9a084-1224">Resources can also be referenced by code from within the collection, but be aware that resources created in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] will definitely not be accessible until after <xref:System.Windows.FrameworkElement.Loaded> is raised by the element that declares the dictionary.</span></span> <span data-ttu-id="9a084-1225">事实上，资源是异步分析的，即使 <xref:System.Windows.FrameworkElement.Loaded> 事件也不能确定 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 定义的资源。</span><span class="sxs-lookup"><span data-stu-id="9a084-1225">In fact, resources are parsed asynchronously and not even the <xref:System.Windows.FrameworkElement.Loaded> event is an assurance that you can reference a [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] defined resource.</span></span> <span data-ttu-id="9a084-1226">出于此原因，通常只应作为运行时代码的一部分或其他 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 技术（如属性值的样式或资源扩展引用）访问 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 定义的资源。</span><span class="sxs-lookup"><span data-stu-id="9a084-1226">For this reason you should generally only access [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] defined resources as part of run-time code, or through other [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] techniques such as styles or resource extension references for attribute values.</span></span> <span data-ttu-id="9a084-1227">通过代码访问资源时，它实质上等效于从 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]进行的[DynamicResource](/dotnet/framework/wpf/advanced/dynamicresource-markup-extension)引用。</span><span class="sxs-lookup"><span data-stu-id="9a084-1227">When you access resources through code, it is essentially equivalent to a [DynamicResource](/dotnet/framework/wpf/advanced/dynamicresource-markup-extension) reference made from [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 <span data-ttu-id="9a084-1228">基础 <xref:System.Windows.ResourceDictionary> 支持使用代码在集合中添加、删除或查询资源所需的方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1228">The underlying <xref:System.Windows.ResourceDictionary> supports the methods required to add, remove or query resources from within the collection by using code.</span></span> <span data-ttu-id="9a084-1229">可设置 <xref:System.Windows.FrameworkElement.Resources%2A> 属性，以支持将元素的资源集合完全替换为新的或不同的 <xref:System.Windows.ResourceDictionary>的方案。</span><span class="sxs-lookup"><span data-stu-id="9a084-1229">The <xref:System.Windows.FrameworkElement.Resources%2A> property is settable to support the scenario of completely replacing the resources collection of an element to be a new or different <xref:System.Windows.ResourceDictionary>.</span></span>  
  
 <span data-ttu-id="9a084-1230">请注意，所示的 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 语法不包含 <xref:System.Windows.ResourceDictionary>的元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-1230">Notice that the [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] syntax shown does not include an element for the <xref:System.Windows.ResourceDictionary>.</span></span> <span data-ttu-id="9a084-1231">这是隐式集合语法的示例;可以省略表示集合元素的标记。</span><span class="sxs-lookup"><span data-stu-id="9a084-1231">This is an example of implicit collection syntax; a tag representing the collection element can be omitted.</span></span> <span data-ttu-id="9a084-1232">改为指定作为项添加到集合中的元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-1232">The elements that are added as items to the collection are specified instead.</span></span> <span data-ttu-id="9a084-1233">有关隐式集合和 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]的详细信息，请参阅[XAML 语法详述](/dotnet/framework/wpf/advanced/xaml-syntax-in-detail)。</span><span class="sxs-lookup"><span data-stu-id="9a084-1233">For more information about implicit collections and [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], see [XAML Syntax In Detail](/dotnet/framework/wpf/advanced/xaml-syntax-in-detail).</span></span> <span data-ttu-id="9a084-1234">如果要引入合并字典，则仍以元素形式显式指定 <xref:System.Windows.ResourceDictionary> 的一种情况是，这种情况下通常不会有该 <xref:System.Windows.ResourceDictionary>的子元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-1234">One case where a <xref:System.Windows.ResourceDictionary> is still specified explicitly as an element is if you are introducing a merged dictionary, in which case there are typically no child elements for that <xref:System.Windows.ResourceDictionary>.</span></span> <span data-ttu-id="9a084-1235">有关详细信息，请参阅[合并资源字典](/dotnet/framework/wpf/advanced/merged-resource-dictionaries)。</span><span class="sxs-lookup"><span data-stu-id="9a084-1235">For details, see [Merged Resource Dictionaries](/dotnet/framework/wpf/advanced/merged-resource-dictionaries).</span></span>  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9a084-1236">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="9a084-1236">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>  
```  
  
<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a084-1237">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9a084-1237">XAML Values</span></span>  
 <span data-ttu-id="9a084-1238">*oneOrMoreResourceElements*</span><span class="sxs-lookup"><span data-stu-id="9a084-1238">*oneOrMoreResourceElements*</span></span>  
 <span data-ttu-id="9a084-1239">一个或多个对象元素，每个元素都定义一个资源。</span><span class="sxs-lookup"><span data-stu-id="9a084-1239">One or more object elements, each of which defines a resource.</span></span> <span data-ttu-id="9a084-1240">每个 <xref:System.Windows.ResourceDictionary> 中的每个资源属性元素必须具有 " [x：Key" 指令](/dotnet/framework/xaml-services/x-key-directive)的唯一值，当从 <xref:System.Windows.ResourceDictionary>中检索值时，该指令用作唯一键。</span><span class="sxs-lookup"><span data-stu-id="9a084-1240">Each resource property element within each <xref:System.Windows.ResourceDictionary> must have a unique value for the [x:Key Directive](/dotnet/framework/xaml-services/x-key-directive), which serves as the unique key when values are retrieved from the <xref:System.Windows.ResourceDictionary>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Application.Resources" />
        <related type="Article" href="https://msdn.microsoft.com/library/1985cd45-f197-42d5-b75e-886add64b248"><span data-ttu-id="9a084-1241">X：Key 特性</span><span class="sxs-lookup"><span data-stu-id="9a084-1241">x:Key Attribute</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBinding">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9a084-1242">为指定的依赖属性向此元素附加一个绑定。</span><span class="sxs-lookup"><span data-stu-id="9a084-1242">Attaches a binding to this element for the specified dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression SetBinding (System.Windows.DependencyProperty dp, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression SetBinding(class System.Windows.DependencyProperty dp, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, path As String) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * string -&gt; System.Windows.Data.BindingExpression" Usage="frameworkElement.SetBinding (dp, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="9a084-1243">标识应该建立绑定的目标属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1243">Identifies the destination property where the binding should be established.</span></span></param>
        <param name="path"><span data-ttu-id="9a084-1244">源属性名称或用于绑定的属性的路径。</span><span class="sxs-lookup"><span data-stu-id="9a084-1244">The source property name or the path to the property used for the binding.</span></span></param>
        <summary><span data-ttu-id="9a084-1245">将提供的源属性名作为数据源的路径限定，从而将绑定附加到此元素上。</span><span class="sxs-lookup"><span data-stu-id="9a084-1245">Attaches a binding to this element, based on the provided source property name as a path qualification to the data source.</span></span></summary>
        <returns><span data-ttu-id="9a084-1246">记录绑定的条件。</span><span class="sxs-lookup"><span data-stu-id="9a084-1246">Records the conditions of the binding.</span></span> <span data-ttu-id="9a084-1247">此返回值可用于错误检查。</span><span class="sxs-lookup"><span data-stu-id="9a084-1247">This return value can be useful for error checking.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1248">此方法是一种便捷方法，用于调用 <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>，该方法将当前实例作为 <xref:System.Windows.DependencyObject>传递，并基于提供的 `path` 参数创建新的 <xref:System.Windows.Data.Binding>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1248">This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, which passes the current instance as the <xref:System.Windows.DependencyObject>, and creates a new <xref:System.Windows.Data.Binding> based on the provided `path` parameter.</span></span> <span data-ttu-id="9a084-1249">如果要建立简单的默认绑定，此签名更方便。</span><span class="sxs-lookup"><span data-stu-id="9a084-1249">This signature is more convenient if you are establishing a simple default binding.</span></span> <span data-ttu-id="9a084-1250">如果需要指定任何非默认条件的绑定属性，或者要使用 <xref:System.Windows.Data.MultiBinding> 或 <xref:System.Windows.Data.PriorityBinding>，则应使用 <xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> 签名。</span><span class="sxs-lookup"><span data-stu-id="9a084-1250">If you need to specify any binding properties to non-default conditions, or want to use a <xref:System.Windows.Data.MultiBinding> or <xref:System.Windows.Data.PriorityBinding>,you should use the <xref:System.Windows.FrameworkElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> signature.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a084-1251">下面的示例使用特定路径设置绑定。</span><span class="sxs-lookup"><span data-stu-id="9a084-1251">The following example sets a binding using a specific path.</span></span>  
  
 [!code-csharp[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#setbindingpath)]
 [!code-vb[BaseElementsSmorgasbord#SetBindingPath](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#setbindingpath)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpressionBase SetBinding(class System.Windows.DependencyProperty dp, class System.Windows.Data.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, binding As BindingBase) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpressionBase ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::Windows::Data::BindingBase ^ binding);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * System.Windows.Data.BindingBase -&gt; System.Windows.Data.BindingExpressionBase" Usage="frameworkElement.SetBinding (dp, binding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="9a084-1252">标识应在其中建立绑定的属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1252">Identifies the property where the binding should be established.</span></span></param>
        <param name="binding"><span data-ttu-id="9a084-1253">表示数据绑定的详细信息。</span><span class="sxs-lookup"><span data-stu-id="9a084-1253">Represents the specifics of the data binding.</span></span></param>
        <summary><span data-ttu-id="9a084-1254">基于已提供的绑定对象将一个绑定附加到此元素上。</span><span class="sxs-lookup"><span data-stu-id="9a084-1254">Attaches a binding to this element, based on the provided binding object.</span></span></summary>
        <returns><span data-ttu-id="9a084-1255">记录绑定的条件。</span><span class="sxs-lookup"><span data-stu-id="9a084-1255">Records the conditions of the binding.</span></span> <span data-ttu-id="9a084-1256">此返回值可用于错误检查。</span><span class="sxs-lookup"><span data-stu-id="9a084-1256">This return value can be useful for error checking.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1257">此方法是一种便捷方法，用于调用 <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>，后者将当前实例作为 <xref:System.Windows.DependencyObject>传递。</span><span class="sxs-lookup"><span data-stu-id="9a084-1257">This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, which passes the current instance as the <xref:System.Windows.DependencyObject>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFlowDirection">
      <MemberSignature Language="C#" Value="public static void SetFlowDirection (System.Windows.DependencyObject element, System.Windows.FlowDirection value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetFlowDirection(class System.Windows.DependencyObject element, valuetype System.Windows.FlowDirection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetFlowDirection (element As DependencyObject, value As FlowDirection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetFlowDirection(System::Windows::DependencyObject ^ element, System::Windows::FlowDirection value);" />
      <MemberSignature Language="F#" Value="static member SetFlowDirection : System.Windows.DependencyObject * System.Windows.FlowDirection -&gt; unit" Usage="System.Windows.FrameworkElement.SetFlowDirection (element, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Windows.DependencyObject" />
        <Parameter Name="value" Type="System.Windows.FlowDirection" />
      </Parameters>
      <Docs>
        <param name="element"><span data-ttu-id="9a084-1258">指定流方向的元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-1258">The element that specifies a flow direction.</span></span></param>
        <param name="value"><span data-ttu-id="9a084-1259">一个枚举值，用于指定方向。</span><span class="sxs-lookup"><span data-stu-id="9a084-1259">A value of the enumeration, specifying the direction.</span></span></param>
        <summary><span data-ttu-id="9a084-1260">设置所提供元素的 <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> 附加属性的值。</span><span class="sxs-lookup"><span data-stu-id="9a084-1260">Sets the value of the <see cref="P:System.Windows.FrameworkElement.FlowDirection" /> attached property for the provided element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1261">此方法支持 <xref:System.Windows.FrameworkElement.FlowDirection%2A> 属性的附加属性语法，因此允许所提供 <xref:System.Windows.FrameworkElement> 的子元素指定其父元素中的排列方向。</span><span class="sxs-lookup"><span data-stu-id="9a084-1261">This method supports attached property syntax for the <xref:System.Windows.FrameworkElement.FlowDirection%2A> property, therefore allowing child elements of a provided <xref:System.Windows.FrameworkElement> to specify flow direction for the arrangement within their parent element.</span></span> <span data-ttu-id="9a084-1262">若要设置当前 <xref:System.Windows.FrameworkElement>上的值，请使用 "直接 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 访问器 <xref:System.Windows.FrameworkElement.FlowDirection%2A>"。</span><span class="sxs-lookup"><span data-stu-id="9a084-1262">To set the value on the current <xref:System.Windows.FrameworkElement>, use the direct [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] accessor <xref:System.Windows.FrameworkElement.FlowDirection%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.FlowDirection" />
      </Docs>
    </Member>
    <Member MemberName="SetResourceReference">
      <MemberSignature Language="C#" Value="public void SetResourceReference (System.Windows.DependencyProperty dp, object name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResourceReference(class System.Windows.DependencyProperty dp, object name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetResourceReference (dp As DependencyProperty, name As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetResourceReference(System::Windows::DependencyProperty ^ dp, System::Object ^ name);" />
      <MemberSignature Language="F#" Value="member this.SetResourceReference : System.Windows.DependencyProperty * obj -&gt; unit" Usage="frameworkElement.SetResourceReference (dp, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="name" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="9a084-1263">资源绑定到的属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1263">The property to which the resource is bound.</span></span></param>
        <param name="name"><span data-ttu-id="9a084-1264">资源的名称。</span><span class="sxs-lookup"><span data-stu-id="9a084-1264">The name of the resource.</span></span></param>
        <summary><span data-ttu-id="9a084-1265">搜索具有指定名称的资源，并且为指定的属性设置一个指向该资源的资源引用。</span><span class="sxs-lookup"><span data-stu-id="9a084-1265">Searches for a resource with the specified name and sets up a resource reference to it for the specified property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1266">资源引用类似于在标记中使用[DynamicResource 标记扩展](/dotnet/framework/wpf/advanced/dynamicresource-markup-extension)。</span><span class="sxs-lookup"><span data-stu-id="9a084-1266">A resource reference is similar to the use of a [DynamicResource Markup Extension](/dotnet/framework/wpf/advanced/dynamicresource-markup-extension) in markup.</span></span> <span data-ttu-id="9a084-1267">资源引用创建一个在运行时延迟时提供指定属性值的内部表达式。</span><span class="sxs-lookup"><span data-stu-id="9a084-1267">The resource reference creates an internal expression that supplies the value of the specified property on a run-time deferred basis.</span></span> <span data-ttu-id="9a084-1268">每当资源字典通过内部事件指示已更改的值时，或者当重定当前元素的父级（父项更改将更改字典查找路径）时，将重新计算表达式。</span><span class="sxs-lookup"><span data-stu-id="9a084-1268">The expression will be re-evaluated whenever the resource dictionary indicates a changed value through internal events, or whenever the current element is reparented (a parent change would change the dictionary lookup path).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.Application.Resources" />
        <altmember cref="P:System.Windows.FrameworkElement.Resources" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeResources">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeResources" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeResources () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeResources();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeResources : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a084-1269">返回一个值，该值指示序列化过程是否应该序列化 <see cref="P:System.Windows.FrameworkElement.Resources" /> 属性的内容。</span><span class="sxs-lookup"><span data-stu-id="9a084-1269">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Resources" /> property.</span></span></summary>
        <returns><span data-ttu-id="9a084-1270">如果应当序列化 <see cref="P:System.Windows.FrameworkElement.Resources" /> 属性值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1270"><see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Resources" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1271">只要本地 <xref:System.Windows.FrameworkElement.Resources%2A>中至少有一个键控资源，这就会返回 `true`。</span><span class="sxs-lookup"><span data-stu-id="9a084-1271">This will return `true` as long as there is at least one keyed resource in the local <xref:System.Windows.FrameworkElement.Resources%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStyle">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeStyle" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeStyle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeStyle();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeStyle : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a084-1272">返回一个值，该值指示序列化过程是否应该序列化 <see cref="P:System.Windows.FrameworkElement.Style" /> 属性的内容。</span><span class="sxs-lookup"><span data-stu-id="9a084-1272">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Style" /> property.</span></span></summary>
        <returns><span data-ttu-id="9a084-1273">如果应当序列化 <see cref="P:System.Windows.FrameworkElement.Style" /> 属性值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1273"><see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Style" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1274">如果 <xref:System.Windows.Style> 是本地设置的，则会返回 `true`。</span><span class="sxs-lookup"><span data-stu-id="9a084-1274">This will return `true` if the <xref:System.Windows.Style> is locally set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTriggers">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTriggers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTriggers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.ShouldSerializeTriggers" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeTriggers () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeTriggers();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeTriggers : unit -&gt; bool" Usage="frameworkElement.ShouldSerializeTriggers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a084-1275">返回一个值，该值指示序列化过程是否应该序列化 <see cref="P:System.Windows.FrameworkElement.Triggers" /> 属性的内容。</span><span class="sxs-lookup"><span data-stu-id="9a084-1275">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkElement.Triggers" /> property.</span></span></summary>
        <returns><span data-ttu-id="9a084-1276">如果应当序列化 <see cref="P:System.Windows.FrameworkElement.Triggers" /> 属性值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1276"><see langword="true" /> if the <see cref="P:System.Windows.FrameworkElement.Triggers" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1277">如果本地设置了 <xref:System.Windows.FrameworkElement.Triggers%2A> 属性，则此方法将返回 `true`。</span><span class="sxs-lookup"><span data-stu-id="9a084-1277">This method returns `true` if the <xref:System.Windows.FrameworkElement.Triggers%2A> property is locally set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.SizeChangedEventHandler SizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.SizeChangedEventHandler SizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SizeChanged As SizeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::SizeChangedEventHandler ^ SizeChanged;" />
      <MemberSignature Language="F#" Value="member this.SizeChanged : System.Windows.SizeChangedEventHandler " Usage="member this.SizeChanged : System.Windows.SizeChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.SizeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1278">当此元素上的 <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> 或 <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> 属性的值发生更改时发生。</span><span class="sxs-lookup"><span data-stu-id="9a084-1278">Occurs when either the <see cref="P:System.Windows.FrameworkElement.ActualHeight" /> or the <see cref="P:System.Windows.FrameworkElement.ActualWidth" /> properties change value on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1279">直接路由事件不遵循路由，它们只能在引发它们的同一元素内进行处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-1279">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="9a084-1280">直接路由事件支持其他路由事件行为：它们支持可访问的处理程序集合，并且可用作样式中的 <xref:System.Windows.EventTrigger>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1280">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
 <span data-ttu-id="9a084-1281">布局系统在此事件的 <xref:System.Windows.SizeChangedEventArgs> 自变量类中读取属性，以确定是否应将所报告的大小更改视为重要更改。</span><span class="sxs-lookup"><span data-stu-id="9a084-1281">The layout system reads properties within the <xref:System.Windows.SizeChangedEventArgs> argument class of this event, to  determine whether the reported size changes should be considered significant.</span></span> <span data-ttu-id="9a084-1282">这使得布局系统或特定于控件的布局实现可以避免由于新旧的高度或宽度值之间视觉让的差异而强制执行布局更改。</span><span class="sxs-lookup"><span data-stu-id="9a084-1282">This allows the layout system or your control-specific layout implementations to avoid forcing a layout change due to visually imperceptible differences between old and new height or width values.</span></span> <span data-ttu-id="9a084-1283">让差异可能是由于浮点数据类型的舍入或相同结果计算造成的。</span><span class="sxs-lookup"><span data-stu-id="9a084-1283">The imperceptible differences might be due to rounding or same-result calculations of a floating-point data types.</span></span>  
  
<a name="routedEventInfo_SizeChanged"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9a084-1284">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="9a084-1284">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-1285">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-1285">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.SizeChangedEvent>|  
|<span data-ttu-id="9a084-1286">路由策略</span><span class="sxs-lookup"><span data-stu-id="9a084-1286">Routing strategy</span></span>|<span data-ttu-id="9a084-1287">直接</span><span class="sxs-lookup"><span data-stu-id="9a084-1287">Direct</span></span>|  
|<span data-ttu-id="9a084-1288">委托</span><span class="sxs-lookup"><span data-stu-id="9a084-1288">Delegate</span></span>|<xref:System.Windows.SizeChangedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Height" />
        <altmember cref="P:System.Windows.FrameworkElement.Width" />
      </Docs>
    </Member>
    <Member MemberName="SizeChangedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent SizeChangedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent SizeChangedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeChangedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ SizeChangedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable SizeChangedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.SizeChangedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1289">标识 <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-1289">Identifies the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1290">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="9a084-1290">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9a084-1291">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1291">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9a084-1292">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="9a084-1292">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9a084-1293">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1293">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9a084-1294">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1294">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.SourceUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ SourceUpdated;" />
      <MemberSignature Language="F#" Value="member this.SourceUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.SourceUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1295">当此元素上的任何现有属性绑定的源值发生更改时发生。</span><span class="sxs-lookup"><span data-stu-id="9a084-1295">Occurs when the source value changes for any existing property binding on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1296">此事件将为与此元素关联的任何 <xref:System.Windows.Data.Binding> 引发的 <xref:System.Windows.Data.Binding.SourceUpdated> 事件创建一个别名。</span><span class="sxs-lookup"><span data-stu-id="9a084-1296">This event creates an alias for the <xref:System.Windows.Data.Binding.SourceUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element.</span></span>  
  
<a name="xamlAttributeUsage_SourceUpdated"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a084-1297">XAML 特性用法</span><span class="sxs-lookup"><span data-stu-id="9a084-1297">XAML Attribute Usage</span></span>  
  
```  
<object SourceUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.SourceUpdated" />
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Windows.Style Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ Style { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Style : System.Windows.Style with get, set" Usage="System.Windows.FrameworkElement.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1298">获取或设置此元素呈现时所使用的样式。</span><span class="sxs-lookup"><span data-stu-id="9a084-1298">Gets or sets the style used by this element when it is rendered.</span></span></summary>
        <value><span data-ttu-id="9a084-1299">若存在，则为此元素适用的非默认样式。</span><span class="sxs-lookup"><span data-stu-id="9a084-1299">The applied, nondefault style for the element, if present.</span></span> <span data-ttu-id="9a084-1300">否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1300">Otherwise, <see langword="null" />.</span></span> <span data-ttu-id="9a084-1301">对于默认构造的 <see cref="T:System.Windows.FrameworkElement" />，其默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1301">The default for a default-constructed <see cref="T:System.Windows.FrameworkElement" /> is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1302">对于控件，当前样式通常由控件主题中的默认样式提供，或者由通常按页或应用程序级别的资源应用于该类型控件的样式（隐式样式）提供。</span><span class="sxs-lookup"><span data-stu-id="9a084-1302">For controls, the current style is often provided by a default style from control theming, or from styles generally applied to controls of that type by resources at page or application level (an implicit style).</span></span> <span data-ttu-id="9a084-1303">此属性未设置或返回默认（主题）样式，但它确实返回了在元素上操作的隐式样式或显式样式。</span><span class="sxs-lookup"><span data-stu-id="9a084-1303">This property does not set or return default (theme) styles, but it does return either an implicit style or an explicit style that is acting on the element.</span></span> <span data-ttu-id="9a084-1304">对于隐式或显式样式，无论样式是指定为资源还是在本地定义，都不重要。</span><span class="sxs-lookup"><span data-stu-id="9a084-1304">In the case of implicit or explicit styles, it does not matter whether the style is specified as a resource or defined locally.</span></span>  
  
 <span data-ttu-id="9a084-1305">设置样式有一些限制。</span><span class="sxs-lookup"><span data-stu-id="9a084-1305">Setting the styles has some restrictions.</span></span> <span data-ttu-id="9a084-1306">可随时将整个 <xref:System.Windows.FrameworkElement.Style%2A> 属性重置为新 <xref:System.Windows.Style>，这将强制进行布局重新组合。</span><span class="sxs-lookup"><span data-stu-id="9a084-1306">You can reset the entire <xref:System.Windows.FrameworkElement.Style%2A> property to a new <xref:System.Windows.Style> at any time, which will force a layout recomposition.</span></span> <span data-ttu-id="9a084-1307">但是，一旦加载的元素使用该样式，就应将 <xref:System.Windows.Style> 视为已密封。</span><span class="sxs-lookup"><span data-stu-id="9a084-1307">However, as soon as that style is placed in use by a loaded element, the <xref:System.Windows.Style> should be considered sealed.</span></span> <span data-ttu-id="9a084-1308">尝试对使用中样式的任何单个属性进行更改（如 <xref:System.Windows.Style.Setters%2A>集合中的任何内容）将导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-1308">Attempting to make a change to any individual property of an in-use style (such as anything within the collection of <xref:System.Windows.Style.Setters%2A>) causes an exception to be thrown.</span></span> <span data-ttu-id="9a084-1309">如果在标记中定义的样式是从资源字典（对于资源）加载的，或者它包含在其中的页面加载（对于内联样式），则会将其视为已使用。</span><span class="sxs-lookup"><span data-stu-id="9a084-1309">A style that is defined in markup is considered to be in use as soon as it is loaded from a resource dictionary (for resources), or the page it is contained within is loaded (for inline styles).</span></span>  
  
 <span data-ttu-id="9a084-1310"><xref:System.Windows.FrameworkElement.Style%2A> 是具有特殊优先级的依赖属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1310"><xref:System.Windows.FrameworkElement.Style%2A> is a dependency property with special precedence.</span></span> <span data-ttu-id="9a084-1311">本地设置的样式通常在属性系统中具有最高的优先级。</span><span class="sxs-lookup"><span data-stu-id="9a084-1311">The locally set style generally operates at the highest precedence in the property system.</span></span> <span data-ttu-id="9a084-1312">如果此时 <xref:System.Windows.FrameworkElement.Style%2A> 为 null，则在加载过程中，属性系统会检查本地或应用程序资源中指定该类型的隐式样式。</span><span class="sxs-lookup"><span data-stu-id="9a084-1312">If the <xref:System.Windows.FrameworkElement.Style%2A> is null at this point, during loading the property system checks for implicit styles in local or application resources that specify that type.</span></span> <span data-ttu-id="9a084-1313">如果在执行此步骤后样式仍然为 null，则用于演示的用途样式通常来自默认（主题）样式，但在 <xref:System.Windows.FrameworkElement.Style%2A> 属性值中不返回默认样式。</span><span class="sxs-lookup"><span data-stu-id="9a084-1313">If the style is still null after this step, then the acting style for presentation purposes generally comes from the default (theme) style, but the default style is not returned in the <xref:System.Windows.FrameworkElement.Style%2A> property value.</span></span> <span data-ttu-id="9a084-1314">请参阅[依赖属性值优先级](/dotnet/framework/wpf/advanced/dependency-property-value-precedence)或[样式和模板化](/dotnet/framework/wpf/controls/styling-and-templating)。</span><span class="sxs-lookup"><span data-stu-id="9a084-1314">See [Dependency Property Value Precedence](/dotnet/framework/wpf/advanced/dependency-property-value-precedence) or [Styling and Templating](/dotnet/framework/wpf/controls/styling-and-templating).</span></span>  
  
<a name="xamlAttributeUsage_Style"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a084-1315">XAML 特性用法</span><span class="sxs-lookup"><span data-stu-id="9a084-1315">XAML Attribute Usage</span></span>  
  
```  
<object Style="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_Style"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9a084-1316">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="9a084-1316">XAML Property Element Usage</span></span>  
  
<a name="xamlValues_Style"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a084-1317">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9a084-1317">XAML Values</span></span>  
 <span data-ttu-id="9a084-1318">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="9a084-1318">*resourceExtension*</span></span>  
 <span data-ttu-id="9a084-1319">以下项之一：、或。</span><span class="sxs-lookup"><span data-stu-id="9a084-1319">One of the following: , or .</span></span> <span data-ttu-id="9a084-1320">请参阅[XAML 资源](/dotnet/framework/wpf/advanced/xaml-resources)。</span><span class="sxs-lookup"><span data-stu-id="9a084-1320">See [XAML Resources](/dotnet/framework/wpf/advanced/xaml-resources).</span></span>  
  
 <span data-ttu-id="9a084-1321">*styleResourceKey*</span><span class="sxs-lookup"><span data-stu-id="9a084-1321">*styleResourceKey*</span></span>  
 <span data-ttu-id="9a084-1322">标识所请求的样式的键。</span><span class="sxs-lookup"><span data-stu-id="9a084-1322">The key that identifies the style being requested.</span></span> <span data-ttu-id="9a084-1323">该键引用 <xref:System.Windows.ResourceDictionary>中的现有资源。</span><span class="sxs-lookup"><span data-stu-id="9a084-1323">The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a084-1324">属性元素语法在技术上是可行的，但不建议用于大多数样式方案。</span><span class="sxs-lookup"><span data-stu-id="9a084-1324">Property element syntax is technically possible, but not recommended for most style scenarios.</span></span> <span data-ttu-id="9a084-1325">请参阅[内联样式和模板](/dotnet/framework/wpf/advanced/inline-styles-and-templates)。</span><span class="sxs-lookup"><span data-stu-id="9a084-1325">See [Inline Styles and Templates](/dotnet/framework/wpf/advanced/inline-styles-and-templates).</span></span> <span data-ttu-id="9a084-1326">也可以使用[TemplateBinding](/dotnet/framework/wpf/advanced/templatebinding-markup-extension)或 <xref:System.Windows.Data.Binding> 的绑定引用，但情况并不常见。</span><span class="sxs-lookup"><span data-stu-id="9a084-1326">A binding reference using [TemplateBinding](/dotnet/framework/wpf/advanced/templatebinding-markup-extension) or <xref:System.Windows.Data.Binding> is also possible, but uncommon.</span></span>  
  
<a name="dependencyPropertyInfo_Style"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-1327">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-1327">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-1328">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-1328">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.StyleProperty>|  
|<span data-ttu-id="9a084-1329">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-1329">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="9a084-1330">下面的示例定义资源字典中的样式。</span><span class="sxs-lookup"><span data-stu-id="9a084-1330">The following example defines a style in a resource dictionary.</span></span>  
  
 [!code-xaml[FEResource#StyleProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty)]  
[!code-xaml[FEResource#StyleProperty2](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty2)]  
[!code-xaml[FEResource#StyleProperty3](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty3)]  
[!code-xaml[FEResource#StyleProperty4](~/samples/snippets/csharp/VS_Snippets_Wpf/FEResource/CS/default.xaml#styleproperty4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty StyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty StyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.StyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ StyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable StyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.StyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1331">标识 <see cref="P:System.Windows.FrameworkElement.Style" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1331">Identifies the <see cref="P:System.Windows.FrameworkElement.Style" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberSignature Language="F#" Value="abstract member System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable : string -&gt; bool&#xA;override this.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable : string -&gt; bool" Usage="frameworkElement.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable propertyName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="9a084-1332">请求的环境属性的名称。</span><span class="sxs-lookup"><span data-stu-id="9a084-1332">The name of the requested ambient property.</span></span></param>
        <summary><span data-ttu-id="9a084-1333">有关此成员的说明，请参见 <see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1333">For a description of this member, see the <see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /> method.</span></span></summary>
        <returns><span data-ttu-id="9a084-1334">如果 <paramref name="propertyName" /> 可用，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1334"><see langword="true" /> if <paramref name="propertyName" /> is available; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1335">此成员是显式接口成员实现。</span><span class="sxs-lookup"><span data-stu-id="9a084-1335">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9a084-1336">它只能在 <xref:System.Windows.FrameworkElement> 实例被强制转换为 <xref:System.Windows.Markup.IQueryAmbient> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="9a084-1336">It can be used only when the <xref:System.Windows.FrameworkElement> instance is cast to an <xref:System.Windows.Markup.IQueryAmbient> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.FrameworkElement.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1337">获取或设置任意对象值，该值可用于存储关于此元素的自定义信息。</span><span class="sxs-lookup"><span data-stu-id="9a084-1337">Gets or sets an arbitrary object value that can be used to store custom information about this element.</span></span></summary>
        <value><span data-ttu-id="9a084-1338">预期值。</span><span class="sxs-lookup"><span data-stu-id="9a084-1338">The intended value.</span></span> <span data-ttu-id="9a084-1339">此属性没有默认值。</span><span class="sxs-lookup"><span data-stu-id="9a084-1339">This property has no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1340">此属性类似于其他 Microsoft 编程模型中的标记属性，如 Visual Basic for Applications 或 Windows 窗体。</span><span class="sxs-lookup"><span data-stu-id="9a084-1340">This property is analogous to Tag properties in other Microsoft programming models, such as Visual Basic for Applications or Windows Forms.</span></span> <span data-ttu-id="9a084-1341"><xref:System.Windows.FrameworkElement.Tag%2A> 旨在提供预先存在的属性位置，你可以在其中存储有关任何 <xref:System.Windows.FrameworkElement> 的一些基本自定义信息，而无需为元素划分子类。</span><span class="sxs-lookup"><span data-stu-id="9a084-1341"><xref:System.Windows.FrameworkElement.Tag%2A> is intended to provide a pre-existing property location where you can store some basic custom information about any <xref:System.Windows.FrameworkElement> without requiring you to subclass an element.</span></span>  
  
 <span data-ttu-id="9a084-1342">由于此属性采用对象，因此需要使用属性元素用法，以便将 XAML 中的 <xref:System.Windows.FrameworkElement.Tag%2A> 属性设置为具有已知的内置类型转换器的对象（如字符串）以外的任何对象。</span><span class="sxs-lookup"><span data-stu-id="9a084-1342">Because this property takes an object, you need to use the property element usage in order to set the <xref:System.Windows.FrameworkElement.Tag%2A> property in XAML to anything other than an object with a known and built-in type converter, such as a string.</span></span> <span data-ttu-id="9a084-1343">以这种方式使用的对象通常不在标准 WPF 命名空间中，因此可能需要将命名空间映射到外部命名空间才能作为 XAML 元素引入。</span><span class="sxs-lookup"><span data-stu-id="9a084-1343">Objects used in this manner are typically not within the standard WPF namespaces and therefore may require namespace mapping to the external namespace in order to be introduced as XAML elements.</span></span> <span data-ttu-id="9a084-1344">有关详细信息，请参阅[WPF xaml 的 Xaml 命名空间和命名空间映射](/dotnet/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml)和[Wpf 的自定义类](/dotnet/framework/wpf/advanced/xaml-and-custom-classes-for-wpf)。</span><span class="sxs-lookup"><span data-stu-id="9a084-1344">For details, see [XAML Namespaces and Namespace Mapping for WPF XAML](/dotnet/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml) and [XAML and Custom Classes for WPF](/dotnet/framework/wpf/advanced/xaml-and-custom-classes-for-wpf).</span></span>  
  
<a name="dependencyPropertyInfo_Tag"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-1345">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-1345">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-1346">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-1346">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.TagProperty>|  
|<span data-ttu-id="9a084-1347">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-1347">Metadata properties set to `true`</span></span>|<span data-ttu-id="9a084-1348">无</span><span class="sxs-lookup"><span data-stu-id="9a084-1348">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="TagProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TagProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TagProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.TagProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TagProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TagProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TagProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.TagProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1349">标识 <see cref="P:System.Windows.FrameworkElement.Tag" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1349">Identifies the <see cref="P:System.Windows.FrameworkElement.Tag" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.TargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TargetUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ TargetUpdated;" />
      <MemberSignature Language="F#" Value="member this.TargetUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.TargetUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1350">当此元素上的任何属性绑定的目标值发生更改时发生。</span><span class="sxs-lookup"><span data-stu-id="9a084-1350">Occurs when the target value changes for any property binding on this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1351">此事件将为与此元素关联的任何 <xref:System.Windows.Data.Binding> 引发的 <xref:System.Windows.Data.Binding.TargetUpdated> 事件创建一个别名。</span><span class="sxs-lookup"><span data-stu-id="9a084-1351">This event creates an alias for the <xref:System.Windows.Data.Binding.TargetUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element.</span></span> <span data-ttu-id="9a084-1352">这通常意味着所涉及的绑定是一个双向绑定，而绑定依赖属性确认以前的属性值现在会根据属性或数据源支持的任何验证或缓存方案无效。</span><span class="sxs-lookup"><span data-stu-id="9a084-1352">This usually means that the binding in question is a two-way binding, and that the bound  dependency property affirms that the previous property value is now invalid according to any validation or caching scheme that the property or the data source support.</span></span>  
  
 <span data-ttu-id="9a084-1353">使用 <xref:System.Windows.FrameworkElement.TargetUpdated> 事件的事件数据来确定报告目标值更新的特定属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1353">Use the event data of the <xref:System.Windows.FrameworkElement.TargetUpdated> event to determine the specific property that is reporting the target value update.</span></span>  
  
<a name="xamlAttributeUsage_TargetUpdated"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a084-1354">XAML 特性用法</span><span class="sxs-lookup"><span data-stu-id="9a084-1354">XAML Attribute Usage</span></span>  
  
```  
<object TargetUpdated="eventHandler"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Data.Binding.TargetUpdated" />
      </Docs>
    </Member>
    <Member MemberName="TemplatedParent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject TemplatedParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject TemplatedParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.TemplatedParent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemplatedParent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ TemplatedParent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TemplatedParent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkElement.TemplatedParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1355">获取对此元素的模板父级的引用。</span><span class="sxs-lookup"><span data-stu-id="9a084-1355">Gets a reference to the template parent of this element.</span></span> <span data-ttu-id="9a084-1356">如果该元素不是通过模板创建的，则此属性无关。</span><span class="sxs-lookup"><span data-stu-id="9a084-1356">This property is not relevant if the element was not created through a template.</span></span></summary>
        <value><span data-ttu-id="9a084-1357">元素的 <see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" /> 导致要创建此元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-1357">The element whose <see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" /> caused this element to be created.</span></span> <span data-ttu-id="9a084-1358">此值通常为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1358">This value is frequently <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1359">对于在应用程序标记或代码中创建的对象，<xref:System.Windows.FrameworkElement.TemplatedParent%2A> 经常 `null`。</span><span class="sxs-lookup"><span data-stu-id="9a084-1359"><xref:System.Windows.FrameworkElement.TemplatedParent%2A> is frequently `null` for objects that are created in your application markup or code.</span></span> <span data-ttu-id="9a084-1360">这是因为你直接而不是通过模板创建这些对象。</span><span class="sxs-lookup"><span data-stu-id="9a084-1360">This is because you create those objects directly, not via a template.</span></span> <span data-ttu-id="9a084-1361">通过从根遍历逻辑树或通过典型名称引用获取的对象引用不是来自模板。</span><span class="sxs-lookup"><span data-stu-id="9a084-1361">Object references obtained by walking the logical tree from the root, or by typical name references, do not come from a template.</span></span>  
  
 <span data-ttu-id="9a084-1362"><xref:System.Windows.FrameworkElement.TemplatedParent%2A> 可能不 `null` 的情况包括：命中测试、特定低级输入事件的事件处理、使用 <xref:System.Windows.Media.VisualTreeHelper>遍历可视化树或使用枚举器，这可能会返回来自模板的元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-1362">Cases where <xref:System.Windows.FrameworkElement.TemplatedParent%2A> might not be `null` include operations such as hit-testing, event handling for certain low-level input events, walking the visual tree with <xref:System.Windows.Media.VisualTreeHelper>, or working with enumerators, which might return elements that came from templates.</span></span> <span data-ttu-id="9a084-1363">另一种情况是，如果对现有 <xref:System.Windows.FrameworkTemplate> 特别调用 <xref:System.Windows.FrameworkTemplate.FindName%2A>，并使用返回的对象。</span><span class="sxs-lookup"><span data-stu-id="9a084-1363">Another case is if you specifically call <xref:System.Windows.FrameworkTemplate.FindName%2A> against an existing <xref:System.Windows.FrameworkTemplate> and are work with the returned object.</span></span>  
  
 <span data-ttu-id="9a084-1364">模板实际上是共享对象，模板的内容仅创建一次。</span><span class="sxs-lookup"><span data-stu-id="9a084-1364">Templates are actually shared objects, where the contents of the template are created only once.</span></span> <span data-ttu-id="9a084-1365">因此，如果您获取对来自模板的元素的对象引用，则可能会发现明显的逻辑树不会到达页根。</span><span class="sxs-lookup"><span data-stu-id="9a084-1365">Therefore, if you obtain an object reference to an element that came from a template, you may find that the apparent logical tree does not reach to the page root.</span></span> <span data-ttu-id="9a084-1366">为了将此类模板引用连接到页面的逻辑树，您应该获取 <xref:System.Windows.FrameworkElement.TemplatedParent%2A> 值，并根据需要继续导航该元素树。</span><span class="sxs-lookup"><span data-stu-id="9a084-1366">In order to connect such a template reference to the page's logical tree, you should get the <xref:System.Windows.FrameworkElement.TemplatedParent%2A> value and continue to navigate that element tree as desired.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public object ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.ToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTip As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ToolTip { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ToolTip : obj with get, set" Usage="System.Windows.FrameworkElement.ToolTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Appearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.ToolTip)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1367">获取或设置在[!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)] 中为此元素显示的工具提示对象。</span><span class="sxs-lookup"><span data-stu-id="9a084-1367">Gets or sets the tool-tip object that is displayed for this element in the [!INCLUDE[TLA#tla_ui](~/includes/tlasharptla-ui-md.md)].</span></span></summary>
        <value><span data-ttu-id="9a084-1368">工具提示对象。</span><span class="sxs-lookup"><span data-stu-id="9a084-1368">The tooltip object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1369">如果此属性的值为 <xref:System.Windows.Controls.ToolTip>类型，则该值是将在 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]中使用的工具提示。</span><span class="sxs-lookup"><span data-stu-id="9a084-1369">If the value of this property is of type <xref:System.Windows.Controls.ToolTip>, then that value is the tool-tip that will be used in the [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span>  <span data-ttu-id="9a084-1370">如果值为任何其他类型，则该值将用作由系统提供（构造） <xref:System.Windows.Controls.ToolTip> 的*内容*。</span><span class="sxs-lookup"><span data-stu-id="9a084-1370">If the value is of any other type, then that value will be used as the *content* for a <xref:System.Windows.Controls.ToolTip> provided (constructed) by the system.</span></span> <span data-ttu-id="9a084-1371">有关详细信息，请参阅 <xref:System.Windows.Controls.ToolTipService>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1371">For more information, see <xref:System.Windows.Controls.ToolTipService>.</span></span> <span data-ttu-id="9a084-1372">服务类提供附加属性，这些属性可用于进一步自定义 <xref:System.Windows.Controls.ToolTip>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1372">The service class provides attached properties that can be used to further customize a <xref:System.Windows.Controls.ToolTip>.</span></span>  
  
<a name="xamlAttributeUsage_ToolTip"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a084-1373">XAML 特性用法</span><span class="sxs-lookup"><span data-stu-id="9a084-1373">XAML Attribute Usage</span></span>  
  
```  
<object ToolTip="toolTipContent"/>  
```  
  
<a name="xamlPropertyElementUsage_ToolTip"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9a084-1374">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="9a084-1374">XAML Property Element Usage</span></span>  
  
```xaml 
<object>  
  <object.ToolTip>  
    <ToolTip .../>  
  </object.ToolTip>  
</object>
```

<span data-ttu-id="9a084-1375">-或-</span><span class="sxs-lookup"><span data-stu-id="9a084-1375">-or-</span></span>

```xaml
<object>  
  <object.ToolTip>  
    toolTipObjectContent  
  </object.ToolTip>  
</object>  
```  
  
<a name="xamlValues_ToolTip"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a084-1376">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9a084-1376">XAML Values</span></span>  
 <span data-ttu-id="9a084-1377">*toolTipContent*</span><span class="sxs-lookup"><span data-stu-id="9a084-1377">*toolTipContent*</span></span>  
 <span data-ttu-id="9a084-1378">一个字符串，该字符串将成为 <xref:System.Windows.FrameworkElement.ToolTip%2A>的显示文本。</span><span class="sxs-lookup"><span data-stu-id="9a084-1378">A string that becomes the display text for the <xref:System.Windows.FrameworkElement.ToolTip%2A>.</span></span>  
  
 <span data-ttu-id="9a084-1379">*toolTipObjectContent*</span><span class="sxs-lookup"><span data-stu-id="9a084-1379">*toolTipObjectContent*</span></span>  
 <span data-ttu-id="9a084-1380">某些对象（以对象元素形式提供）应用作 <xref:System.Windows.FrameworkElement>的内容。</span><span class="sxs-lookup"><span data-stu-id="9a084-1380">Some object, provided in object element form, that should be used as the content for the <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="9a084-1381">通常，这将是 <xref:System.Windows.FrameworkElement> 或为 <xref:System.Windows.FrameworkElement.ToolTip%2A>创建布局组合的其他元素，最终包含组合内的文本内容。</span><span class="sxs-lookup"><span data-stu-id="9a084-1381">Typically this would be a <xref:System.Windows.FrameworkElement> or some other element that creates layout compositing for the <xref:System.Windows.FrameworkElement.ToolTip%2A>, eventually containing text content within the compositing.</span></span> <span data-ttu-id="9a084-1382">在此用法中，将从分析的 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]隐式创建 <xref:System.Windows.Controls.ToolTip> 元素，并将*toolTipObjectContent*内容设置为其 <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1382">In this usage, the <xref:System.Windows.Controls.ToolTip> element is created implicitly from the parsed [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], and the *toolTipObjectContent* content is set as its <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="9a084-1383"><`ToolTip` .../></span><span class="sxs-lookup"><span data-stu-id="9a084-1383"><`ToolTip` .../></span></span>  
 <span data-ttu-id="9a084-1384">请参阅 <xref:System.Windows.Controls.ToolTip>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1384">See <xref:System.Windows.Controls.ToolTip>.</span></span>  
  
<a name="dependencyPropertyInfo_ToolTip"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-1385">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-1385">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-1386">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-1386">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ToolTipProperty>|  
|<span data-ttu-id="9a084-1387">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-1387">Metadata properties set to `true`</span></span>|<span data-ttu-id="9a084-1388">无</span><span class="sxs-lookup"><span data-stu-id="9a084-1388">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="9a084-1389">下面的示例在代码中创建 <xref:System.Windows.Controls.ToolTip>，然后设置 <xref:System.Windows.Controls.Primitives.StatusBar> 控件上的 <xref:System.Windows.FrameworkElement.ToolTip%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1389">The following example creates a <xref:System.Windows.Controls.ToolTip> in code and then sets the <xref:System.Windows.FrameworkElement.ToolTip%2A> property on a <xref:System.Windows.Controls.Primitives.StatusBar> control.</span></span>  
  
 [!code-csharp[StatusBar#MakeProgressBar](~/samples/snippets/csharp/VS_Snippets_Wpf/StatusBar/CSharp/Window1.xaml.cs#makeprogressbar)]
 [!code-vb[StatusBar#MakeProgressBar](~/samples/snippets/visualbasic/VS_Snippets_Wpf/StatusBar/visualbasic/window1.xaml.vb#makeprogressbar)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipClosing As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipClosing;" />
      <MemberSignature Language="F#" Value="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1390">在元素上的任何工具提示关闭之前发生。</span><span class="sxs-lookup"><span data-stu-id="9a084-1390">Occurs just before any tooltip on the element is closed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1391">将 <xref:System.Windows.FrameworkElement.ToolTipClosing> 事件标记为 "已处理" 不会取消关闭工具提示。</span><span class="sxs-lookup"><span data-stu-id="9a084-1391">Marking the <xref:System.Windows.FrameworkElement.ToolTipClosing> event as handled does not cancel closing the tooltip.</span></span> <span data-ttu-id="9a084-1392">显示工具提示后，关闭工具提示只是为了响应用户与 UI 的交互。</span><span class="sxs-lookup"><span data-stu-id="9a084-1392">Once the tooltip is displayed, closing the tooltip is done only in response to user interaction with the UI.</span></span>  
  
 <span data-ttu-id="9a084-1393">此事件不能是样式中的 <xref:System.Windows.EventTrigger>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1393">This event cannot be an <xref:System.Windows.EventTrigger> in a style.</span></span> <span data-ttu-id="9a084-1394">这是因为此事件的 "标识符" 字段会重新使用服务中的实现，该实现不会公开服务级别事件的 add/remove 事件方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1394">This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.</span></span>  
  
<a name="routedEventInfo_ToolTipClosing"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9a084-1395">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="9a084-1395">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-1396">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-1396">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ToolTipClosingEvent>|  
|<span data-ttu-id="9a084-1397">路由策略</span><span class="sxs-lookup"><span data-stu-id="9a084-1397">Routing strategy</span></span>|<span data-ttu-id="9a084-1398">直接</span><span class="sxs-lookup"><span data-stu-id="9a084-1398">Direct</span></span>|  
|<span data-ttu-id="9a084-1399">委托</span><span class="sxs-lookup"><span data-stu-id="9a084-1399">Delegate</span></span>|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   <span data-ttu-id="9a084-1400">重写 <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> 在派生类中实现此事件的类处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-1400">Override <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ToolTipClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1401">标识 <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-1401">Identifies the <see cref="E:System.Windows.FrameworkElement.ToolTipClosing" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1402">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="9a084-1402">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9a084-1403">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1403">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9a084-1404">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="9a084-1404">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9a084-1405">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1405">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9a084-1406">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1406">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.ToolTipOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipOpening As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipOpening;" />
      <MemberSignature Language="F#" Value="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1407">在元素上的任何工具提示打开时发生。</span><span class="sxs-lookup"><span data-stu-id="9a084-1407">Occurs when any tooltip on the element is opened.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1408">为了防止工具提示在 UI 中显示，<xref:System.Windows.FrameworkElement.ToolTipOpening> 的处理程序可以将处理的 <xref:System.Windows.Controls.ToolTipEventArgs> 事件数据标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-1408">To prevent a tooltip from appearing in the UI, your handler for <xref:System.Windows.FrameworkElement.ToolTipOpening> can mark the <xref:System.Windows.Controls.ToolTipEventArgs> event data handled.</span></span> <span data-ttu-id="9a084-1409">否则，将显示工具提示，并使用 <xref:System.Windows.FrameworkElement.ToolTip%2A> 属性的值作为工具提示内容。</span><span class="sxs-lookup"><span data-stu-id="9a084-1409">Otherwise, the tooltip is displayed, using the value of the <xref:System.Windows.FrameworkElement.ToolTip%2A> property as the tooltip content.</span></span> <span data-ttu-id="9a084-1410">另一种可能的情况是，您可以编写一个处理程序，用于在显示工具提示之前重置作为事件源的元素的 <xref:System.Windows.FrameworkElement.ToolTip%2A> 属性的值。</span><span class="sxs-lookup"><span data-stu-id="9a084-1410">Another possible scenario is that you could write a handler that resets the value of the <xref:System.Windows.FrameworkElement.ToolTip%2A> property for the element that is the event source, just before the tooltip is displayed.</span></span>  
  
 <span data-ttu-id="9a084-1411">如果 <xref:System.Windows.FrameworkElement.ToolTip%2A> 的值 `null` 或未设置，则不会引发 <xref:System.Windows.FrameworkElement.ToolTipOpening>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1411"><xref:System.Windows.FrameworkElement.ToolTipOpening> will not be raised if the value of <xref:System.Windows.FrameworkElement.ToolTip%2A> is `null` or otherwise unset.</span></span> <span data-ttu-id="9a084-1412">在工具提示打开或打开时，不要特意将 <xref:System.Windows.FrameworkElement.ToolTip%2A> 设置为 `null`;这不会影响关闭工具提示，而是在 UI 中创建不需要的视觉对象。</span><span class="sxs-lookup"><span data-stu-id="9a084-1412">Do not deliberately set <xref:System.Windows.FrameworkElement.ToolTip%2A> to `null` while a tooltip is open or opening; this will not have the effect of closing the tooltip, and will instead create an undesirable visual artifact in the UI.</span></span>  
  
 <span data-ttu-id="9a084-1413"><xref:System.Windows.FrameworkElement.ToolTipOpening> 事件不能是样式中 <xref:System.Windows.EventTrigger>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1413">The <xref:System.Windows.FrameworkElement.ToolTipOpening> event cannot be an <xref:System.Windows.EventTrigger> in a style.</span></span> <span data-ttu-id="9a084-1414">这是因为此事件的 "标识符" 字段会重新使用服务中的实现，该实现不会公开服务级别事件的 add/remove 事件方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1414">This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove event methods for the service-level event.</span></span>  
  
<a name="routedEventInfo_ToolTipOpening"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9a084-1415">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="9a084-1415">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-1416">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-1416">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.ToolTipOpeningEvent>|  
|<span data-ttu-id="9a084-1417">路由策略</span><span class="sxs-lookup"><span data-stu-id="9a084-1417">Routing strategy</span></span>|<span data-ttu-id="9a084-1418">直接</span><span class="sxs-lookup"><span data-stu-id="9a084-1418">Direct</span></span>|  
|<span data-ttu-id="9a084-1419">委托</span><span class="sxs-lookup"><span data-stu-id="9a084-1419">Delegate</span></span>|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
-   <span data-ttu-id="9a084-1420">重写 <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> 在派生类中实现此事件的类处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-1420">Override <xref:System.Windows.FrameworkElement.OnToolTipClosing%2A> to implement class handling for this event in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ToolTip" />
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.ToolTipOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1421">标识 <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-1421">Identifies the <see cref="E:System.Windows.FrameworkElement.ToolTipOpening" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1422">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="9a084-1422">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9a084-1423">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1423">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9a084-1424">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="9a084-1424">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9a084-1425">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1425">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9a084-1426">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1426">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ToolTipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ToolTipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ToolTipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.ToolTipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1427">标识 <see cref="P:System.Windows.FrameworkElement.ToolTip" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1427">Identifies the <see cref="P:System.Windows.FrameworkElement.ToolTip" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.FrameworkElement.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1428">获取直接在此元素上或在子元素中建立的触发器的集合。</span><span class="sxs-lookup"><span data-stu-id="9a084-1428">Gets the collection of triggers established directly on this element, or in child elements.</span></span></summary>
        <value><span data-ttu-id="9a084-1429"><see cref="T:System.Windows.Trigger" /> 对象的强类型集合。</span><span class="sxs-lookup"><span data-stu-id="9a084-1429">A strongly typed collection of <see cref="T:System.Windows.Trigger" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="9a084-1430">此属性只能通过显示的集合语法 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 设置，或者通过访问集合对象并使用它的各种方法（如 Add）来设置。</span><span class="sxs-lookup"><span data-stu-id="9a084-1430">This property can only be set in [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] through the collection syntax shown, or by accessing the collection object and using its various methods such as Add.</span></span> <span data-ttu-id="9a084-1431">用于访问集合对象本身的属性是只读的，集合本身是可读写的。</span><span class="sxs-lookup"><span data-stu-id="9a084-1431">The property to access the collection object itself is read-only, the collection itself is read-write.</span></span> <span data-ttu-id="9a084-1432">此属性仅存在于根元素上;尝试查找该文件或将其设置到其他位置将导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-1432">The property only exists on root elements; attempting to find it or set it elsewhere will cause an exception to be thrown.</span></span>  
  
 <span data-ttu-id="9a084-1433">此属性不允许您检查作为此元素上使用的样式的一部分而存在的触发器。</span><span class="sxs-lookup"><span data-stu-id="9a084-1433">This property does not enable you to examine triggers that exist as part of styles in use on this element.</span></span> <span data-ttu-id="9a084-1434">它仅报告在标记或代码中真正添加到集合中的触发器的集合。</span><span class="sxs-lookup"><span data-stu-id="9a084-1434">It only reports the collection of triggers that are literally added to the collection, either in markup or code.</span></span> <span data-ttu-id="9a084-1435">默认情况下，元素通常不存在此类元素（通过实例的模板）;更常见的情况是，来自控件组合的触发器是在样式中建立的。</span><span class="sxs-lookup"><span data-stu-id="9a084-1435">Elements do not typically have such elements existing by default (through a template for instance); it is more common for triggers that come from control compositing to be established in styles instead.</span></span>  
  
 <span data-ttu-id="9a084-1436">就行为而言（并且试图确定哪个效果来自 <xref:System.Windows.FrameworkElement.Triggers%2A> 集合中声明的元素），触发条件和触发器效果都可能在此元素上，或可能在逻辑树中的子元素上。</span><span class="sxs-lookup"><span data-stu-id="9a084-1436">In terms of behavior (and trying to establish which effect came from which element's declared <xref:System.Windows.FrameworkElement.Triggers%2A> collection), both the triggering condition and the trigger effect might be on this element, or might be on its child elements in the logical tree.</span></span> <span data-ttu-id="9a084-1437">请注意，如果使用生存期事件（例如 <xref:System.Windows.FrameworkElement.Loaded>）来获取此集合，则可能尚未完全加载子元素的触发器，并且集合将比它在运行时真正的小。</span><span class="sxs-lookup"><span data-stu-id="9a084-1437">Note that if you use lifetime events such as <xref:System.Windows.FrameworkElement.Loaded> to get this collection, the child element's triggers might not yet be fully loaded, and the collection will be smaller than it would truly be at run time.</span></span>  
  
 <span data-ttu-id="9a084-1438">请注意，在元素上建立的触发器集合仅支持 <xref:System.Windows.EventTrigger>，而不支持属性触发器（<xref:System.Windows.Trigger>）。</span><span class="sxs-lookup"><span data-stu-id="9a084-1438">Note that the collection of triggers established on an element only supports <xref:System.Windows.EventTrigger>, not property triggers (<xref:System.Windows.Trigger>).</span></span> <span data-ttu-id="9a084-1439">如果需要属性触发器，则必须将其放在样式或模板中，然后直接通过 <xref:System.Windows.FrameworkElement.Style%2A> 属性将该样式或模板分配给该元素，或通过隐式样式引用间接将其分配给该元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-1439">If you require property triggers, you must place these within a style or template and then assign that style or template to the element either directly through the <xref:System.Windows.FrameworkElement.Style%2A> property, or indirectly through an implicit style reference.</span></span>  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="9a084-1440">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="9a084-1440">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a084-1441">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9a084-1441">XAML Values</span></span>  
 <span data-ttu-id="9a084-1442">*oneOrMoreTriggers*</span><span class="sxs-lookup"><span data-stu-id="9a084-1442">*oneOrMoreTriggers*</span></span>  
 <span data-ttu-id="9a084-1443">一个或多个定义 <xref:System.Windows.EventTrigger> 元素。</span><span class="sxs-lookup"><span data-stu-id="9a084-1443">One or more defined <xref:System.Windows.EventTrigger> elements.</span></span> <span data-ttu-id="9a084-1444">每个此类触发器都应该包含有效的情节提要操作和引用。</span><span class="sxs-lookup"><span data-stu-id="9a084-1444">Each such trigger is expected to contain valid storyboard actions and references.</span></span> <span data-ttu-id="9a084-1445">请注意，只能在页面的根元素上建立此集合。</span><span class="sxs-lookup"><span data-stu-id="9a084-1445">Note that this collection can only be established on the root element of a page.</span></span> <span data-ttu-id="9a084-1446">有关详细信息，请参阅[情节提要概述](/dotnet/framework/wpf/graphics-multimedia/storyboards-overview)。</span><span class="sxs-lookup"><span data-stu-id="9a084-1446">For more information, see [Storyboards Overview](/dotnet/framework/wpf/graphics-multimedia/storyboards-overview).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.EventTrigger" />
      </Docs>
    </Member>
    <Member MemberName="TryFindResource">
      <MemberSignature Language="C#" Value="public object TryFindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object TryFindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.TryFindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ TryFindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.TryFindResource : obj -&gt; obj" Usage="frameworkElement.TryFindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey"><span data-ttu-id="9a084-1447">要查找的资源的键标识符。</span><span class="sxs-lookup"><span data-stu-id="9a084-1447">The key identifier of the resource to be found.</span></span></param>
        <summary><span data-ttu-id="9a084-1448">搜索具有指定键的资源，如果找到，则返回该资源。</span><span class="sxs-lookup"><span data-stu-id="9a084-1448">Searches for a resource with the specified key, and returns that resource if found.</span></span></summary>
        <returns><span data-ttu-id="9a084-1449">找到的资源；如果未找到具有所提供 <paramref name="key" /> 的资源，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1449">The found resource, or <see langword="null" /> if no resource with the provided <paramref name="key" /> is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1450">如果在调用元素上找不到该资源，则会通过逻辑树向上搜索父资源树，其方式与在运行时键请求资源时搜索树的方式相同。</span><span class="sxs-lookup"><span data-stu-id="9a084-1450">If the resource is not found on the calling element, the parent resource tree is searched upward through the logical tree, in the same way that the tree would be searched if a resource were requested by key at run time.</span></span> <span data-ttu-id="9a084-1451">仅当调用 <xref:System.Windows.FrameworkElement.TryFindResource%2A> 时，此方法将仅在资源树中的任何位置不存在该键的任何资源时返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="9a084-1451">The method returns `null` only if no resource of that key existed anywhere in the resource tree, per the existing conditions of the tree at the time that <xref:System.Windows.FrameworkElement.TryFindResource%2A> is called.</span></span>  
  
 <span data-ttu-id="9a084-1452">通常，您会立即将返回值强制转换为您尝试通过返回的资源值设置的属性的类型。</span><span class="sxs-lookup"><span data-stu-id="9a084-1452">Typically you would immediately cast the return value to the type of the property that you were attempting to set with the returned resource value.</span></span>  
  
 <span data-ttu-id="9a084-1453"><xref:System.Windows.FrameworkElement.FindResource%2A> 方法的行为类似，不同之处在于，如果未返回具有所提供键的资源，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-1453">The <xref:System.Windows.FrameworkElement.FindResource%2A> method has similar behavior, except that it throws an exception if no resource with the provided key was returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a084-1454">下面的示例是作为按钮处理程序实现的，在该按钮处理程序中，单击的按钮会将其背景设置为通过对其自身调用 <xref:System.Windows.FrameworkElement.TryFindResource%2A> 获取的资源定义画笔。</span><span class="sxs-lookup"><span data-stu-id="9a084-1454">The following example is implemented as a button handler, where the button being clicked sets its background to a resource-defined brush obtained by calling <xref:System.Windows.FrameworkElement.TryFindResource%2A> on itself.</span></span> <span data-ttu-id="9a084-1455">这会遍历元素树并查找资源（资源本身在 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 中定义，并且不会显示）。</span><span class="sxs-lookup"><span data-stu-id="9a084-1455">This walks the element tree and finds the resource (the resource itself is defined in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] and is not shown).</span></span>  
  
 [!code-csharp[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/csharp/VS_Snippets_Wpf/BaseElementsSmorgasbord/CSharp/Page1.xaml.cs#fetryfindresource)]
 [!code-vb[BaseElementsSmorgasbord#FETryFindResource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BaseElementsSmorgasbord/visualbasic/page1.xaml.vb#fetryfindresource)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.FindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Unloaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Unloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Unloaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkElement.Unloaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unloaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Unloaded;" />
      <MemberSignature Language="F#" Value="member this.Unloaded : System.Windows.RoutedEventHandler " Usage="member this.Unloaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1456">当从加载的元素的元素树中移除元素时发生。</span><span class="sxs-lookup"><span data-stu-id="9a084-1456">Occurs when the element is removed from within an element tree of loaded elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1457">直接路由事件不遵循路由，它们只能在引发它们的同一元素内进行处理。</span><span class="sxs-lookup"><span data-stu-id="9a084-1457">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="9a084-1458">直接路由事件支持其他路由事件行为：它们支持可访问的处理程序集合，并且可用作样式中的 <xref:System.Windows.EventTrigger>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1458">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
 <span data-ttu-id="9a084-1459">由于用户启动的系统主题更改，<xref:System.Windows.FrameworkElement.Loaded> 和 <xref:System.Windows.FrameworkElement.Unloaded> 可能会在控件上引发。</span><span class="sxs-lookup"><span data-stu-id="9a084-1459"><xref:System.Windows.FrameworkElement.Loaded> and <xref:System.Windows.FrameworkElement.Unloaded> might both be raised on controls as a result of user-initiated system theme changes.</span></span> <span data-ttu-id="9a084-1460">主题更改会导致控件模板和包含的可视化树失效，这进而导致整个控件被卸载和重新加载。</span><span class="sxs-lookup"><span data-stu-id="9a084-1460">A theme change causes an invalidation of the control template and the contained visual tree, which in turn causes the entire control to unload and reload.</span></span> <span data-ttu-id="9a084-1461">因此，不能假定 <xref:System.Windows.FrameworkElement.Unloaded> 仅在离开页面时才会发生。</span><span class="sxs-lookup"><span data-stu-id="9a084-1461">Therefore <xref:System.Windows.FrameworkElement.Unloaded> cannot be assumed to occur only on navigation away from the page.</span></span>  
  
 <span data-ttu-id="9a084-1462">请注意，在应用程序开始关闭后，不会引发 <xref:System.Windows.FrameworkElement.Unloaded> 事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-1462">Note that the <xref:System.Windows.FrameworkElement.Unloaded> event is not raised after an application begins shutting down.</span></span> <span data-ttu-id="9a084-1463">当发生由 <xref:System.Windows.Application.ShutdownMode%2A> 属性定义的条件时，将发生应用程序关闭。</span><span class="sxs-lookup"><span data-stu-id="9a084-1463">Application shutdown occurs when the condition defined by the <xref:System.Windows.Application.ShutdownMode%2A> property occurs.</span></span> <span data-ttu-id="9a084-1464">如果将清理代码放在 <xref:System.Windows.FrameworkElement.Unloaded> 事件的处理程序中（例如 <xref:System.Windows.Window> 或 <xref:System.Windows.Controls.UserControl>），则可能无法按预期方式调用。</span><span class="sxs-lookup"><span data-stu-id="9a084-1464">If you place cleanup code within a handler for the <xref:System.Windows.FrameworkElement.Unloaded> event, such as for a <xref:System.Windows.Window> or a <xref:System.Windows.Controls.UserControl>, it may not be called as expected.</span></span>  
  
<a name="routedEventInfo_Unloaded"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="9a084-1465">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="9a084-1465">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-1466">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-1466">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.UnloadedEvent>|  
|<span data-ttu-id="9a084-1467">路由策略</span><span class="sxs-lookup"><span data-stu-id="9a084-1467">Routing strategy</span></span>|<span data-ttu-id="9a084-1468">直接</span><span class="sxs-lookup"><span data-stu-id="9a084-1468">Direct</span></span>|  
|<span data-ttu-id="9a084-1469">委托</span><span class="sxs-lookup"><span data-stu-id="9a084-1469">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="UnloadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent UnloadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent UnloadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnloadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ UnloadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnloadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkElement.UnloadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1470">标识 <see cref="E:System.Windows.FrameworkElement.Unloaded" /> 路由事件。</span><span class="sxs-lookup"><span data-stu-id="9a084-1470">Identifies the <see cref="E:System.Windows.FrameworkElement.Unloaded" /> routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1471">在注册路由事件时创建路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="9a084-1471">Routed event identifiers are created when routed events are registered.</span></span> <span data-ttu-id="9a084-1472">这些标识符包含标识名称、所有者类型、处理程序类型、路由策略和、添加事件所有者的实用程序方法。</span><span class="sxs-lookup"><span data-stu-id="9a084-1472">These identifiers contain an identifying name, owner type, handler type, routing strategy, and utility method for adding owners for the event.</span></span> <span data-ttu-id="9a084-1473">可以使用这些标识符添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="9a084-1473">You can use these identifiers to add class handlers.</span></span>  
  
 <span data-ttu-id="9a084-1474">有关注册路由的事件的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1474">For more information about registering routed events, see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span> <span data-ttu-id="9a084-1475">有关使用路由事件标识符添加类处理程序的详细信息，请参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1475">For more information about using routed event identifiers to add class handlers, see <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.UnregisterName : string -&gt; unit" Usage="frameworkElement.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9a084-1476">要从当前范围中移除的名称-对象对的名称。</span><span class="sxs-lookup"><span data-stu-id="9a084-1476">Name of the name-object pair to remove from the current scope.</span></span></param>
        <summary><span data-ttu-id="9a084-1477">简化对 <see cref="T:System.Windows.NameScope" /> 注销方法的访问。</span><span class="sxs-lookup"><span data-stu-id="9a084-1477">Simplifies access to the <see cref="T:System.Windows.NameScope" /> de-registration method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1478">如果打算用同一名称重新注册另一个元素，则只需取消注册名称。</span><span class="sxs-lookup"><span data-stu-id="9a084-1478">You only need to un-register names if you intend to re-register another element with that same name.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.RegisterName(System.String,System.Object)" />
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UpdateDefaultStyle">
      <MemberSignature Language="C#" Value="public void UpdateDefaultStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateDefaultStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkElement.UpdateDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateDefaultStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateDefaultStyle();" />
      <MemberSignature Language="F#" Value="member this.UpdateDefaultStyle : unit -&gt; unit" Usage="frameworkElement.UpdateDefaultStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9a084-1479">将默认样式重新应用至当前 <see cref="T:System.Windows.FrameworkElement" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1479">Reapplies the default style to the current <see cref="T:System.Windows.FrameworkElement" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRounding">
      <MemberSignature Language="C#" Value="public bool UseLayoutRounding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseLayoutRounding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberSignature Language="VB.NET" Value="Public Property UseLayoutRounding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseLayoutRounding { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseLayoutRounding : bool with get, set" Usage="System.Windows.FrameworkElement.UseLayoutRounding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1480">获取或设置一个值，该值指示是否应向此元素的大小和位置布局应用布局舍入。</span><span class="sxs-lookup"><span data-stu-id="9a084-1480">Gets or sets a value that indicates whether layout rounding should be applied to this element's size and position during layout.</span></span></summary>
        <value><span data-ttu-id="9a084-1481">如果应用了布局舍入，则为 <see langword="true" />，否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1481"><see langword="true" /> if layout rounding is applied; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="9a084-1482">默认为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1482">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1483">当 `true`元素的 <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> 属性时，在 <xref:System.Windows.UIElement.Measure%2A> 和 <xref:System.Windows.UIElement.Arrange%2A> 传递过程中计算的所有非整数像素值都将舍入为整个像素值。</span><span class="sxs-lookup"><span data-stu-id="9a084-1483">When the <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> property for an element is `true`, all non-integral pixel values that are calculated during the <xref:System.Windows.UIElement.Measure%2A> and <xref:System.Windows.UIElement.Arrange%2A> passes are rounded to whole pixel values.</span></span>  
  
 <span data-ttu-id="9a084-1484">此属性由子元素继承。</span><span class="sxs-lookup"><span data-stu-id="9a084-1484">This property is inherited by child elements.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a084-1485">应将 <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> 设置为根元素 `true`。</span><span class="sxs-lookup"><span data-stu-id="9a084-1485">You should set <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> to `true` on the root element.</span></span> <span data-ttu-id="9a084-1486">布局系统会将子坐标添加到父坐标;因此，如果父坐标不在像素边界上，则子坐标也不在像素边界上。</span><span class="sxs-lookup"><span data-stu-id="9a084-1486">The layout system adds child coordinates to the parent coordinates; therefore, if the parent coordinates are not on a pixel boundary, the child coordinates are also not on a pixel boundary.</span></span> <span data-ttu-id="9a084-1487">如果无法在根处设置 <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A>，请将子级上的 <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> 设置为获得所需的效果。</span><span class="sxs-lookup"><span data-stu-id="9a084-1487">If <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> cannot be set at the root, set <xref:System.Windows.UIElement.SnapsToDevicePixels%2A> on the child to obtain the effect that you want.</span></span>  
  
 <span data-ttu-id="9a084-1488">当边缘落在设备像素的中间时，在像素边界上绘制对象可消除由抗锯齿功能生成的半透明边缘。</span><span class="sxs-lookup"><span data-stu-id="9a084-1488">Drawing objects on pixel boundaries eliminates the semi-transparent edges that are produced by anti-aliasing, when an edge falls in the middle of a device pixel.</span></span> <span data-ttu-id="9a084-1489">下图显示了位于设备像素中间的单个像素宽度线条的输出。</span><span class="sxs-lookup"><span data-stu-id="9a084-1489">The following illustration shows the output of a single pixel-width line that falls in the middle of a device pixel.</span></span> <span data-ttu-id="9a084-1490">左侧的行不使用布局舍入，并且具有抗锯齿。</span><span class="sxs-lookup"><span data-stu-id="9a084-1490">The line on the left does not use layout rounding and is anti-aliased.</span></span> <span data-ttu-id="9a084-1491">右侧线条使用布局舍入。</span><span class="sxs-lookup"><span data-stu-id="9a084-1491">The line on the right uses layout rounding.</span></span>  
  
 <span data-ttu-id="9a084-1492">![相对&#45;于一条像素线的抗锯齿线条。](~/add/media/pixelsnaplinecompare.PNG "抗锯齿的线与单像素线的比较。")</span><span class="sxs-lookup"><span data-stu-id="9a084-1492">![Anti&#45;aliased line compared to single pixel line.](~/add/media/pixelsnaplinecompare.PNG "Anti-aliased line compared to single pixel line.")</span></span>  
  
 <span data-ttu-id="9a084-1493">使用布局舍入和 <xref:System.Windows.GridUnitType.Star> 大小调整时，布局系统将在列或行度量值中创建较小的变体，以避免子像素呈现。</span><span class="sxs-lookup"><span data-stu-id="9a084-1493">When you use layout rounding and <xref:System.Windows.GridUnitType.Star> sizing, the layout system creates small variations in the column or row measurements to avoid subpixel rendering.</span></span> <span data-ttu-id="9a084-1494">例如，如果网格的总宽度为100，其中每个 size <xref:System.Windows.GridUnitType.Star>大小为3列，而不是创建三个宽度均为33.3 的列，则布局系统将创建2个宽度为33、宽度为34的列。</span><span class="sxs-lookup"><span data-stu-id="9a084-1494">For example, if a grid has a total width of 100 with 3 columns each of size <xref:System.Windows.GridUnitType.Star>, instead of creating three columns that have an equal width of 33.3, the layout system creates 2 columns that have a width of 33 and one that has a width of 34.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9a084-1495">在 .NET 4.6 中，对布局舍入进行了更改，以减少带边框的控件中的剪辑实例。</span><span class="sxs-lookup"><span data-stu-id="9a084-1495">In .NET 4.6 changes were made to layout rounding to reduce instances of clipping in controls with borders.</span></span> <span data-ttu-id="9a084-1496">默认情况下，如果目标框架 .NET Framework 4.6 或更高版本，则会启用此功能。</span><span class="sxs-lookup"><span data-stu-id="9a084-1496">By default, this feature is enabled if your Target Framework is .NET Framework 4.6 or higher.</span></span> <span data-ttu-id="9a084-1497">面向更早版本的框架的应用程序可以通过将以下设置添加到 app.config 文件来选择加入新行为： `<runtime><AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/></runtime>` 设置仅在应用程序在 .NET Framework 4.6 上运行时才会生效。</span><span class="sxs-lookup"><span data-stu-id="9a084-1497">Applications that target earlier versions of the framework can opt in into the new behavior by adding the following setting to an app.config file: `<runtime><AppContextSwitchOverrides value="Switch.MS.Internal.DoNotApplyLayoutRoundingToMarginsAndBorderThickness=false"/></runtime>` The setting only takes effect when the application is running on the .NET Framework 4.6.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a084-1498">下面的示例演示 <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> 属性对单个像素宽度线条的影响。</span><span class="sxs-lookup"><span data-stu-id="9a084-1498">The following example demonstrates the effect that the <xref:System.Windows.FrameworkElement.UseLayoutRounding%2A> property has on a single pixel-width line.</span></span> <span data-ttu-id="9a084-1499">左侧线条不使用布局舍入，右侧线条使用布局舍入。</span><span class="sxs-lookup"><span data-stu-id="9a084-1499">The line on the left does not use layout rounding and the line on the right uses layout rounding.</span></span> <span data-ttu-id="9a084-1500">如果慢慢调整窗口的大小，可以看到布局舍入所产生的差异。</span><span class="sxs-lookup"><span data-stu-id="9a084-1500">If you slowly resize the window, you can see the difference that layout rounding makes.</span></span>  
  
```xaml  
  
<Page x:Class="LayoutRounding.Lines"  
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"  
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"  
    Title="Lines" Name="linesPage"  
    >  
  <StackPanel Width="150"  Margin="7" Orientation="Horizontal">  
    <!-- Single pixel line with layout rounding turned OFF.-->  
    <Rectangle UseLayoutRounding="False"  
       Width="45.5" Margin="10" Height="1" Fill="Red"/>  
    <!-- Single pixel line with layout rounding turned ON.-->  
    <Rectangle UseLayoutRounding="True"  
      Width="45.5" Margin="10" Height="1" Fill="Red"/>  
  </StackPanel>  
  <!-- Background Grid -->  
  <Page.Background>  
    <DrawingBrush  Viewport="0,0,10,10" ViewportUnits="Absolute" TileMode="Tile">  
      <DrawingBrush.Drawing>  
        <DrawingGroup>  
          <GeometryDrawing Brush="White">  
            <GeometryDrawing.Geometry>  
              <RectangleGeometry Rect="0,0,1,1" />  
            </GeometryDrawing.Geometry>  
          </GeometryDrawing>  
          <GeometryDrawing Geometry="M0,0 L1,0 1,0.1, 0,0.1Z " Brush="#CCCCFF" />  
          <GeometryDrawing Geometry="M0,0 L0,1 0.1,1, 0.1,0Z" Brush="#CCCCFF" />  
        </DrawingGroup>  
      </DrawingBrush.Drawing>  
    </DrawingBrush>  
  </Page.Background>  
</Page>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutRoundingProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty UseLayoutRoundingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty UseLayoutRoundingProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UseLayoutRoundingProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ UseLayoutRoundingProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable UseLayoutRoundingProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.UseLayoutRoundingProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1501">标识 <see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1501">Identifies the <see cref="P:System.Windows.FrameworkElement.UseLayoutRounding" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.VerticalAlignment VerticalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.VerticalAlignment VerticalAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberSignature Language="VB.NET" Value="Public Property VerticalAlignment As VerticalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::VerticalAlignment VerticalAlignment { System::Windows::VerticalAlignment get(); void set(System::Windows::VerticalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.VerticalAlignment : System.Windows.VerticalAlignment with get, set" Usage="System.Windows.FrameworkElement.VerticalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.VerticalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1502">获取或设置在父元素（如面板或项控件）中组合此元素时所应用的垂直对齐特征。</span><span class="sxs-lookup"><span data-stu-id="9a084-1502">Gets or sets the vertical alignment characteristics applied to this element when it is composed within a parent element such as a panel or items control.</span></span></summary>
        <value><span data-ttu-id="9a084-1503">垂直对齐设置。</span><span class="sxs-lookup"><span data-stu-id="9a084-1503">A vertical alignment setting.</span></span> <span data-ttu-id="9a084-1504">默认为 <see cref="F:System.Windows.VerticalAlignment.Stretch" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1504">The default is <see cref="F:System.Windows.VerticalAlignment.Stretch" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1505">在元素上显式设置 <xref:System.Windows.FrameworkElement.Height%2A> 和 <xref:System.Windows.FrameworkElement.Width%2A> 属性时，这些度量将采用布局引用单元格，并取消将此属性设置为 <xref:System.Windows.VerticalAlignment.Stretch>的常规效果。</span><span class="sxs-lookup"><span data-stu-id="9a084-1505">When <xref:System.Windows.FrameworkElement.Height%2A> and <xref:System.Windows.FrameworkElement.Width%2A> properties are explicitly set on an element, these measurements take layout precedent and cancel the regular effects of setting this property to <xref:System.Windows.VerticalAlignment.Stretch>.</span></span>  
  
 <span data-ttu-id="9a084-1506"><xref:System.Windows.FrameworkElement.VerticalAlignment%2A> 是 [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] 属性访问器，对于实际上是依赖属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1506"><xref:System.Windows.FrameworkElement.VerticalAlignment%2A> is the [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] property accessor for what is in reality a dependency property.</span></span> <span data-ttu-id="9a084-1507">在派生元素类（特别是控件）中，此特定依赖项属性非常频繁地以不同的方式设置其外观 "默认" 值。</span><span class="sxs-lookup"><span data-stu-id="9a084-1507">This particular dependency property quite frequently has its apparent "default" value set differently in derived element classes, particularly controls.</span></span> <span data-ttu-id="9a084-1508">这通常采用以下两种方式之一：依赖属性重新注册到特定的派生类，但使用不同的元数据设置其默认值;否则，将应用默认样式来设置该依赖属性值的不同值。</span><span class="sxs-lookup"><span data-stu-id="9a084-1508">This generally occurs in one of two ways: the dependency property is re-registered to a particular  derived class, but with different metadata for setting its defaults; or there is a default style being applied that sets that dependency property value differently.</span></span> <span data-ttu-id="9a084-1509">例如，<xref:System.Windows.Controls.ComboBoxItem> 控件的 <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> 的外观 "默认" 将 <xref:System.Windows.VerticalAlignment.Center>，即使 <xref:System.Windows.Controls.ComboBoxItem> 从 <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> 继承 <xref:System.Windows.FrameworkElement>直接。</span><span class="sxs-lookup"><span data-stu-id="9a084-1509">For example, the apparent "default" of <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> for a <xref:System.Windows.Controls.ComboBoxItem> control will be <xref:System.Windows.VerticalAlignment.Center>, even though <xref:System.Windows.Controls.ComboBoxItem> inherits <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> direct from <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="9a084-1510">这是因为此值在样式的控件模板内 <xref:System.Windows.Controls.ComboBoxItem>默认样式中重置。</span><span class="sxs-lookup"><span data-stu-id="9a084-1510">This is because that value was reset within the default style of <xref:System.Windows.Controls.ComboBoxItem>, within the style's control template.</span></span>  
  
 <span data-ttu-id="9a084-1511"><xref:System.Windows.Controls.Canvas> 在编写布局时不使用 <xref:System.Windows.FrameworkElement.VerticalAlignment%2A>，因为 <xref:System.Windows.Controls.Canvas> 基于绝对定位。</span><span class="sxs-lookup"><span data-stu-id="9a084-1511"><xref:System.Windows.Controls.Canvas> does not use <xref:System.Windows.FrameworkElement.VerticalAlignment%2A> when composing layout, because <xref:System.Windows.Controls.Canvas> is based on absolute positioning.</span></span>  
  
 <span data-ttu-id="9a084-1512">当由 <xref:System.Windows.Controls.ComboBoxItem> 或任何派生类继承时，<xref:System.Windows.Controls.ComboBoxItem> 将此属性的默认值重定义为 "<xref:System.Windows.VerticalAlignment.Center>"。</span><span class="sxs-lookup"><span data-stu-id="9a084-1512">When inherited by <xref:System.Windows.Controls.ComboBoxItem> or any derived classes, <xref:System.Windows.Controls.ComboBoxItem> redefines the default value of this property to be <xref:System.Windows.VerticalAlignment.Center>.</span></span>  
  
<a name="dependencyPropertyInfo_VerticalAlignment"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-1513">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-1513">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-1514">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-1514">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.VerticalAlignmentProperty>|  
|<span data-ttu-id="9a084-1515">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-1515">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsArrange%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty VerticalAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty VerticalAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly VerticalAlignmentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ VerticalAlignmentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable VerticalAlignmentProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.VerticalAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1516">标识 <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1516">Identifies the <see cref="P:System.Windows.FrameworkElement.VerticalAlignment" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualChildrenCount">
      <MemberSignature Language="C#" Value="protected override int VisualChildrenCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VisualChildrenCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property VisualChildrenCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property int VisualChildrenCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.VisualChildrenCount : int" Usage="System.Windows.FrameworkElement.VisualChildrenCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1517">获取此元素内可视子元素的数目。</span><span class="sxs-lookup"><span data-stu-id="9a084-1517">Gets the number of visual child elements within this element.</span></span></summary>
        <value><span data-ttu-id="9a084-1518">此元素内可视子元素的数目。</span><span class="sxs-lookup"><span data-stu-id="9a084-1518">The number of visual child elements for this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1519"><xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> 的 <xref:System.Windows.FrameworkElement> 实现始终返回零个或一个。</span><span class="sxs-lookup"><span data-stu-id="9a084-1519">The <xref:System.Windows.FrameworkElement> implementation of <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> always returns either zero or one.</span></span> <span data-ttu-id="9a084-1520">维护可能超过一个的视觉对象集合的类必须重写此属性和 <xref:System.Windows.FrameworkElement.GetVisualChild%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1520">Classes that maintain a visual child collection that might exceed one must override both this property and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.</span></span>  
  
 <span data-ttu-id="9a084-1521">此属性通常用于出于实现布局重写（<xref:System.Windows.FrameworkElement.MeasureOverride%2A>、<xref:System.Windows.FrameworkElement.ArrangeOverride%2A>）的目的确定当前子集合的上限。</span><span class="sxs-lookup"><span data-stu-id="9a084-1521">This property is generally used to determine the upper bounds of the current child collection for purposes of implementing the layout overrides (<xref:System.Windows.FrameworkElement.MeasureOverride%2A>, <xref:System.Windows.FrameworkElement.ArrangeOverride%2A>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9a084-1522">下面的示例演示自定义装饰器如何使用它为多个视觉对象维护的 <xref:System.Windows.Media.VisualCollection> 所声明的值，并通过 <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> 和 <xref:System.Windows.FrameworkElement.GetVisualChild%2A>的重写来报告这些值。</span><span class="sxs-lookup"><span data-stu-id="9a084-1522">The following example shows how a custom adorner uses the values declared by a <xref:System.Windows.Media.VisualCollection> that it maintains for its multiple visual children and reports these values through overrides of <xref:System.Windows.FrameworkElement.VisualChildrenCount%2A> and <xref:System.Windows.FrameworkElement.GetVisualChild%2A>.</span></span>  
  
 [!code-csharp[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverridespre)]
 [!code-vb[Adorners_ResizingAdorner#FEVisualOverridesPre](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverridespre)]  
[!code-csharp[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/csharp/VS_Snippets_Wpf/Adorners_ResizingAdorner/CSharp/ResizingAdorner.cs#fevisualoverrides)]
[!code-vb[Adorners_ResizingAdorner#FEVisualOverrides](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Adorners_ResizingAdorner/visualbasic/resizingadorner.vb#fevisualoverrides)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9a084-1523">如果你的类支持子元素集合中的多个视觉对象，请重写此属性以返回该集合中的元素计数。</span><span class="sxs-lookup"><span data-stu-id="9a084-1523">If your class supports more than one visual child in a child element collection, override this property to return the count of elements in that collection.</span></span> <span data-ttu-id="9a084-1524">即使集合对象本身返回计数，也必须执行此操作。</span><span class="sxs-lookup"><span data-stu-id="9a084-1524">You must do this even if the collection object itself returns a count.</span></span> <span data-ttu-id="9a084-1525">WPF 框架级别的元素布局逻辑假定所有元素都将通过其 <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> 属性返回有效计数。</span><span class="sxs-lookup"><span data-stu-id="9a084-1525">Element layout logic at the WPF framework level presumes that all elements will return a valid count through their <see cref="P:System.Windows.FrameworkElement.VisualChildrenCount" /> property.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkElement.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Width { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Width : double with get, set" Usage="System.Windows.FrameworkElement.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1526">获取或设置元素的宽度。</span><span class="sxs-lookup"><span data-stu-id="9a084-1526">Gets or sets the width of the element.</span></span></summary>
        <value><span data-ttu-id="9a084-1527">元素的宽度（以 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)] 为单位）。</span><span class="sxs-lookup"><span data-stu-id="9a084-1527">The width of the element, in [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)].</span></span> <span data-ttu-id="9a084-1528">默认值是 <see cref="F:System.Double.NaN" />。</span><span class="sxs-lookup"><span data-stu-id="9a084-1528">The default value is <see cref="F:System.Double.NaN" />.</span></span> <span data-ttu-id="9a084-1529">此值必须等于或大于 0.0。</span><span class="sxs-lookup"><span data-stu-id="9a084-1529">This value must be equal to or greater than 0.0.</span></span> <span data-ttu-id="9a084-1530">请参阅“备注”以了解上限信息。</span><span class="sxs-lookup"><span data-stu-id="9a084-1530">See Remarks for upper bound information.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9a084-1531">这是 <xref:System.Windows.FrameworkElement> 中指定宽度信息的三个属性之一。</span><span class="sxs-lookup"><span data-stu-id="9a084-1531">This is one of three properties on <xref:System.Windows.FrameworkElement> that specify width information.</span></span>  <span data-ttu-id="9a084-1532">另外两个 <xref:System.Windows.FrameworkElement.MinWidth%2A> 和 <xref:System.Windows.FrameworkElement.MaxWidth%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1532">The other two are <xref:System.Windows.FrameworkElement.MinWidth%2A> and <xref:System.Windows.FrameworkElement.MaxWidth%2A>.</span></span>  <span data-ttu-id="9a084-1533">如果这两个值之间存在冲突，则必须先执行实际的宽度确定的应用程序顺序，然后 <xref:System.Windows.FrameworkElement.MaxWidth%2A>，最后，如果其中每个 <xref:System.Windows.FrameworkElement.MinWidth%2A> 都在界限内，<xref:System.Windows.FrameworkElement.Width%2A>。</span><span class="sxs-lookup"><span data-stu-id="9a084-1533">If there is a conflict between these values, the order of application for actual width determination is first <xref:System.Windows.FrameworkElement.MinWidth%2A> must be honored, then <xref:System.Windows.FrameworkElement.MaxWidth%2A>, and finally if each of these are within bounds, <xref:System.Windows.FrameworkElement.Width%2A>.</span></span>  
  
 <span data-ttu-id="9a084-1534">此属性的返回值始终与任何设置为它的值相同。</span><span class="sxs-lookup"><span data-stu-id="9a084-1534">The return value of this property is always the same as any value that was set to it.</span></span> <span data-ttu-id="9a084-1535">相反，<xref:System.Windows.FrameworkElement.ActualWidth%2A> 的值可能会有所不同。</span><span class="sxs-lookup"><span data-stu-id="9a084-1535">In contrast, the value of the <xref:System.Windows.FrameworkElement.ActualWidth%2A> may vary.</span></span> <span data-ttu-id="9a084-1536">出于某种原因，布局可能已拒绝建议的大小。</span><span class="sxs-lookup"><span data-stu-id="9a084-1536">The layout may have rejected the suggested size for some reason.</span></span> <span data-ttu-id="9a084-1537">此外，布局系统本身相对于 <xref:System.Windows.FrameworkElement.Width%2A> 的属性系统集以异步方式运行，并且可能尚未处理特定大小调整属性的更改。</span><span class="sxs-lookup"><span data-stu-id="9a084-1537">Also, the layout system itself works asynchronously relative to the property system set of <xref:System.Windows.FrameworkElement.Width%2A> and may not have processed that particular sizing property change yet.</span></span>  
  
 <span data-ttu-id="9a084-1538">除了可接受的 <xref:System.Double> 值外，还可以 <xref:System.Double.NaN?displayProperty=nameWithType>此属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1538">In addition to acceptable <xref:System.Double> values, this property can also be <xref:System.Double.NaN?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9a084-1539">这是指定自动调整大小行为的方式。</span><span class="sxs-lookup"><span data-stu-id="9a084-1539">This is how you specify auto sizing behavior.</span></span> <span data-ttu-id="9a084-1540">在 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 将值设置为字符串 "Auto" （不区分大小写）以启用自动调整大小行为。</span><span class="sxs-lookup"><span data-stu-id="9a084-1540">In [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] you set the value to the string "Auto" (case insensitive) to enable the auto sizing behavior.</span></span> <span data-ttu-id="9a084-1541">自动调整大小行为表示元素将填充其可用的宽度。</span><span class="sxs-lookup"><span data-stu-id="9a084-1541">Auto sizing behavior implies that the element will fill the width available to it.</span></span> <span data-ttu-id="9a084-1542">但请注意，特定控件经常以默认样式提供默认值，这些默认值将禁用自动调整大小行为，除非专门重新启用。</span><span class="sxs-lookup"><span data-stu-id="9a084-1542">Note however that specific controls frequently supply default values in their default styles that will disable the auto sizing behavior unless it is specifically re-enabled.</span></span>  
  
 <span data-ttu-id="9a084-1543">除了验证检查，对于布局系统强制执行的 <xref:System.Windows.FrameworkElement.Width%2A> 还有一个不确定的上限值（这是一个非常大的数字，大于 <xref:System.Single.MaxValue?displayProperty=nameWithType> 但小于 <xref:System.Double.MaxValue?displayProperty=nameWithType>）。</span><span class="sxs-lookup"><span data-stu-id="9a084-1543">In addition to the validation check, there is a nondeterministic upper value bound for <xref:System.Windows.FrameworkElement.Width%2A> that is enforced by the layout system (this is a very large number, larger than <xref:System.Single.MaxValue?displayProperty=nameWithType> but smaller than <xref:System.Double.MaxValue?displayProperty=nameWithType>).</span></span> <span data-ttu-id="9a084-1544">如果超出此限制，元素将不会呈现，并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9a084-1544">If you exceed this bound, the element will not render, and no exception is thrown.</span></span> <span data-ttu-id="9a084-1545">不要将 <xref:System.Windows.FrameworkElement.Width%2A> 设置为远远大于任何可能的视觉对象显示大小的最大大小的值，否则可能会超出此不确定性的上限。</span><span class="sxs-lookup"><span data-stu-id="9a084-1545">Do not set <xref:System.Windows.FrameworkElement.Width%2A> to a value that is significantly larger than the maximum size of any possible visual display, or you may exceed this nondeterministic upper bound.</span></span>  
  
<a name="xamlAttributeUsage_Width"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="9a084-1546">XAML 特性用法</span><span class="sxs-lookup"><span data-stu-id="9a084-1546">XAML Attribute Usage</span></span>  
  
```xaml 
<object Width="double"/>  
```

<span data-ttu-id="9a084-1547">-或-</span><span class="sxs-lookup"><span data-stu-id="9a084-1547">-or-</span></span>

```xaml
<object Width ="qualifiedDouble"/>  
```

<span data-ttu-id="9a084-1548">-或-</span><span class="sxs-lookup"><span data-stu-id="9a084-1548">-or-</span></span>

```xaml
<object Width ="Auto"/>  
```  

<a name="xamlValues_Width"></a>   
## <a name="xaml-values"></a><span data-ttu-id="9a084-1549">XAML 值</span><span class="sxs-lookup"><span data-stu-id="9a084-1549">XAML Values</span></span>  
 <span data-ttu-id="9a084-1550">*double*</span><span class="sxs-lookup"><span data-stu-id="9a084-1550">*double*</span></span>  
 <xref:System.Double>  
  
 <span data-ttu-id="9a084-1551">大于或等于 0.0 <xref:System.Double> 值的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="9a084-1551">String representation of a <xref:System.Double> value equal to or greater than 0.0.</span></span> <span data-ttu-id="9a084-1552">请参阅“备注”以了解上限信息。</span><span class="sxs-lookup"><span data-stu-id="9a084-1552">See Remarks for upper bound information.</span></span> <span data-ttu-id="9a084-1553">此值被解释为 [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] 度量。</span><span class="sxs-lookup"><span data-stu-id="9a084-1553">This value is interpreted as a [!INCLUDE[TLA#tla_dipixel](~/includes/tlasharptla-dipixel-md.md)] measurement.</span></span> <span data-ttu-id="9a084-1554">字符串不需要显式包含小数点。</span><span class="sxs-lookup"><span data-stu-id="9a084-1554">Strings need not explicitly include decimal points.</span></span> <span data-ttu-id="9a084-1555">例如，`1` 的值是可接受的。</span><span class="sxs-lookup"><span data-stu-id="9a084-1555">For instance a value of `1` is acceptable.</span></span>  
  
 <span data-ttu-id="9a084-1556">*qualifiedDouble*</span><span class="sxs-lookup"><span data-stu-id="9a084-1556">*qualifiedDouble*</span></span>  
 <span data-ttu-id="9a084-1557">如上所述的*双精度*值，后跟以下单元声明字符串之一： `px`、`in`、`cm``pt`。</span><span class="sxs-lookup"><span data-stu-id="9a084-1557">A *double* value as described above, followed by one of the following unit declaration strings: `px`, `in`, `cm`, `pt`.</span></span>  
  
 <span data-ttu-id="9a084-1558">`px` （默认值）为 [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span><span class="sxs-lookup"><span data-stu-id="9a084-1558">`px` (default) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]</span></span>  
  
 <span data-ttu-id="9a084-1559">`in` 为英寸;1in = = 96px</span><span class="sxs-lookup"><span data-stu-id="9a084-1559">`in` is inches; 1in==96px</span></span>  
  
 <span data-ttu-id="9a084-1560">`cm` 是厘米;1cm = = （96/2.54） px</span><span class="sxs-lookup"><span data-stu-id="9a084-1560">`cm` is centimeters; 1cm==(96/2.54) px</span></span>  
  
 <span data-ttu-id="9a084-1561">`pt` 为点;1pt = = （96/72） px</span><span class="sxs-lookup"><span data-stu-id="9a084-1561">`pt` is points; 1pt==(96/72) px</span></span>  
  
 `Auto`  
 <span data-ttu-id="9a084-1562">启用自动调整行为。</span><span class="sxs-lookup"><span data-stu-id="9a084-1562">Enables autosizing behavior.</span></span> <span data-ttu-id="9a084-1563">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="9a084-1563">See Remarks.</span></span>  
  
<a name="dependencyPropertyInfo_Width"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="9a084-1564">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="9a084-1564">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="9a084-1565">标识符字段</span><span class="sxs-lookup"><span data-stu-id="9a084-1565">Identifier field</span></span>|<xref:System.Windows.FrameworkElement.WidthProperty>|  
|<span data-ttu-id="9a084-1566">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="9a084-1566">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WidthProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty WidthProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty WidthProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkElement.WidthProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly WidthProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ WidthProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable WidthProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkElement.WidthProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9a084-1567">标识 <see cref="P:System.Windows.FrameworkElement.Width" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="9a084-1567">Identifies the <see cref="P:System.Windows.FrameworkElement.Width" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
