<Type Name="ValueSource" FullName="System.Windows.ValueSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e23b9ba27eef0ccdb922c9eddd868091fc8b0409" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83952520" /></Metadata><TypeSignature Language="C#" Value="public struct ValueSource" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit ValueSource extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Windows.ValueSource" />
  <TypeSignature Language="VB.NET" Value="Public Structure ValueSource" />
  <TypeSignature Language="C++ CLI" Value="public value class ValueSource" />
  <TypeSignature Language="F#" Value="type ValueSource = struct" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c6e1b-101">报告从 <see cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" /> 返回的信息。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-101">Reports the information returned from <see cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c6e1b-102"><xref:System.Windows.ValueSource> 传输的大多数信息都包含在 <xref:System.Windows.ValueSource.BaseValueSource%2A> 属性中。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-102">Most of the information that <xref:System.Windows.ValueSource> transmits is contained in the <xref:System.Windows.ValueSource.BaseValueSource%2A> property.</span></span> <span data-ttu-id="c6e1b-103">此属性包含一个枚举值，该枚举值仅指定负责依赖属性的有效值的总体 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 属性系统的一个方面。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-103">This property contains an enumeration value that specifies exactly one aspect of the overall [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system that is responsible for the effective value of a dependency property.</span></span>  
  
 <span data-ttu-id="c6e1b-104">除基值外，有关依赖项属性值的其他信息，也就是该值是否正在进行动画处理，以及该值是否涉及表达式（如绑定或动态资源引用）。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-104">Besides the base value, the other information that might be interesting about a dependency property value is whether the value is being animated, and whether the value involves an expression (such as a binding, or a dynamic resource reference).</span></span> <span data-ttu-id="c6e1b-105">此信息分别 <xref:System.Windows.ValueSource.IsAnimated%2A> 和 <xref:System.Windows.ValueSource.IsExpression%2A> 报告。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-105">This information is reported by <xref:System.Windows.ValueSource.IsAnimated%2A> and <xref:System.Windows.ValueSource.IsExpression%2A> respectively.</span></span> <span data-ttu-id="c6e1b-106">此外，如果强制在属性值上操作，属性将保留所需的值，并且如果更改或提升特定强制的约束，则属性值将尝试访问该所需的值。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-106">Also, if coercion is acting on a property value, the property retains a desired value, and the property value will attempt to reach that desired value if the constraints of the specific coercion are changed or lifted.</span></span> <span data-ttu-id="c6e1b-107">不在其所需值的已强制属性将报告 <xref:System.Windows.ValueSource.IsCoerced%2A> 是 `true`的。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-107">A coerced property that is not at its desired value will report that <xref:System.Windows.ValueSource.IsCoerced%2A> is `true`.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
    <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
  </Docs>
  <Members>
    <Member MemberName="BaseValueSource">
      <MemberSignature Language="C#" Value="public System.Windows.BaseValueSource BaseValueSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.BaseValueSource BaseValueSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.BaseValueSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseValueSource As BaseValueSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::BaseValueSource BaseValueSource { System::Windows::BaseValueSource get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseValueSource : System.Windows.BaseValueSource" Usage="System.Windows.ValueSource.BaseValueSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.BaseValueSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c6e1b-108">获取 <see cref="T:System.Windows.BaseValueSource" /> 枚举的值，该值报告向依赖项属性系统提供值的源。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-108">Gets a value of the <see cref="T:System.Windows.BaseValueSource" /> enumeration, which reports the source that provided the dependency property system with a value.</span></span></summary>
        <value><span data-ttu-id="c6e1b-109">枚举的一个值。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-109">A value of the enumeration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c6e1b-110">如果强制或动画作用于属性，则基值不是有效的值。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-110">The base value is not the effective value if either coercion or animation is acting on the property.</span></span> <span data-ttu-id="c6e1b-111">如果要确定基值是否为有效的值，请选中 "<xref:System.Windows.ValueSource.IsAnimated%2A>" 和 "<xref:System.Windows.ValueSource.IsCoerced%2A>"。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-111">Check <xref:System.Windows.ValueSource.IsAnimated%2A> and <xref:System.Windows.ValueSource.IsCoerced%2A> if you want to determine whether the base value is the effective value.</span></span>  
  
 <span data-ttu-id="c6e1b-112">您可能还需要检查 <xref:System.Windows.ValueSource.IsExpression%2A> 以查看是否计算出了某个表达式的基本值。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-112">You might also want to check <xref:System.Windows.ValueSource.IsExpression%2A> to see if the base value was evaluated out of an expression.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="valueSource.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="c6e1b-113">与此 <see cref="T:System.Windows.ValueSource" /> 进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-113">The object to compare with this <see cref="T:System.Windows.ValueSource" />.</span></span></param>
        <summary><span data-ttu-id="c6e1b-114">返回一个值，指示此 <see cref="T:System.Windows.ValueSource" /> 是否与指定对象相等。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-114">Returns a value indicating whether this <see cref="T:System.Windows.ValueSource" /> is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="c6e1b-115">如果提供的对象与当前 <see cref="T:System.Windows.ValueSource" /> 相同，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-115"><see langword="true" /> if the provided object is equivalent to the current <see cref="T:System.Windows.ValueSource" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c6e1b-116">此实现支持基于每个 <xref:System.Windows.ValueSource> 结构的每个属性值的值相等性。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-116">This implementation supports value equality, based on each of the property values of each <xref:System.Windows.ValueSource> structure.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="valueSource.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c6e1b-117">返回此 <see cref="T:System.Windows.ValueSource" /> 的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-117">Returns the hash code for this <see cref="T:System.Windows.ValueSource" />.</span></span></summary>
        <returns><span data-ttu-id="c6e1b-118">32 位无符号整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-118">A 32-bit unsigned integer hash code.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c6e1b-119">此哈希代码基于 <xref:System.Windows.ValueSource.BaseValueSource%2A> 值。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-119">This hash code is based on the <xref:System.Windows.ValueSource.BaseValueSource%2A> value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="IsAnimated">
      <MemberSignature Language="C#" Value="public bool IsAnimated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnimated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsAnimated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnimated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnimated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAnimated : bool" Usage="System.Windows.ValueSource.IsAnimated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c6e1b-120">获取一个值，该值声明是否对属性进行动画处理。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-120">Gets a value that declares whether the property is being animated.</span></span></summary>
        <value><span data-ttu-id="c6e1b-121">如果对该属性进行动画处理，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-121"><see langword="true" /> if the property is animated; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c6e1b-122">对于当前正在进行动画处理的任何属性，<xref:System.Windows.ValueSource.BaseValueSource%2A> 报告的源不会立即相关，因为动画比基值更高的依赖属性优先级操作。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-122">For any property that is currently being animated, the source reported by <xref:System.Windows.ValueSource.BaseValueSource%2A> is not immediately relevant, because the animation operates at higher dependency property precedence than the base value.</span></span> <span data-ttu-id="c6e1b-123">有关优先级和动画的详细信息，请参阅[依赖属性值优先级](/dotnet/framework/wpf/advanced/dependency-property-value-precedence)。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-123">For more information about precedence and animations, see [Dependency Property Value Precedence](/dotnet/framework/wpf/advanced/dependency-property-value-precedence).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsCoerced">
      <MemberSignature Language="C#" Value="public bool IsCoerced { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCoerced" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsCoerced" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCoerced As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCoerced { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCoerced : bool" Usage="System.Windows.ValueSource.IsCoerced" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c6e1b-124">获取一个值，声明此值是否是从应用于依赖属性的 <see cref="T:System.Windows.CoerceValueCallback" /> 实现中生成的。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-124">Gets a value that declares whether this value resulted from a <see cref="T:System.Windows.CoerceValueCallback" /> implementation applied to a dependency property.</span></span></summary>
        <value><span data-ttu-id="c6e1b-125">如果此值是从应用于依赖属性的 <see cref="T:System.Windows.CoerceValueCallback" /> 实现中生成的，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-125"><see langword="true" /> if the value resulted from a <see cref="T:System.Windows.CoerceValueCallback" /> implementation applied to a dependency property; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c6e1b-126">如果强制在属性值上操作，属性将保留一个所需值，如果更改或提升了特定强制的约束，则属性值将尝试访问该所需的值。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-126">If coercion is acting on a property value, the property retains a desired value, and the property value will attempt to reach that desired value if the constraints of the specific coercion are changed or lifted.</span></span> <span data-ttu-id="c6e1b-127">不在其所需值的已强制属性将报告 <xref:System.Windows.ValueSource.IsCoerced%2A> 是 `true`的。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-127">A coerced property that is not at its desired value will report that <xref:System.Windows.ValueSource.IsCoerced%2A> is `true`.</span></span>  
  
 <span data-ttu-id="c6e1b-128">强制的优先级高于基值，并不严格地与基值的设置方式有关。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-128">Coercion acts at higher precedence than the base value, and is not strictly speaking a participant in how the base value is set.</span></span> <span data-ttu-id="c6e1b-129">因此，被强制的状态由此属性而不是 <xref:System.Windows.BaseValueSource> 枚举的值报告。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-129">Therefore the state of being coerced is reported by this property, rather than by a value of the <xref:System.Windows.BaseValueSource> enumeration.</span></span> <span data-ttu-id="c6e1b-130">有关强制、基值和优先级的详细信息，请参阅[依赖属性值优先级](/dotnet/framework/wpf/advanced/dependency-property-value-precedence)。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-130">For more information about coercion, base values, and precedence, see [Dependency Property Value Precedence](/dotnet/framework/wpf/advanced/dependency-property-value-precedence).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsCurrent">
      <MemberSignature Language="C#" Value="public bool IsCurrent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCurrent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsCurrent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCurrent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCurrent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCurrent : bool" Usage="System.Windows.ValueSource.IsCurrent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c6e1b-131">获取一个值，该值声明是否由 <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> 方法设置值。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-131">Gets whether the value was set by the <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> method.</span></span></summary>
        <value><span data-ttu-id="c6e1b-132">如果由 <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> 方法设置值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-132"><see langword="true" /> if the value was set by the <see cref="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" /> method; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExpression">
      <MemberSignature Language="C#" Value="public bool IsExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExpression" />
      <MemberSignature Language="DocId" Value="P:System.Windows.ValueSource.IsExpression" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExpression As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExpression { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExpression : bool" Usage="System.Windows.ValueSource.IsExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c6e1b-133">获取一个值，声明此值是否是从计算的表达式中生成的。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-133">Gets a value that declares whether this value resulted from an evaluated expression.</span></span> <span data-ttu-id="c6e1b-134">此表达式可能是支持绑定的 <see cref="T:System.Windows.Data.BindingExpression" />，或者是一个内部表达式，比如支持 [DynamicResource 标记扩展](/dotnet/framework/wpf/advanced/dynamicresource-markup-extension)的那些表达式。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-134">This might be a <see cref="T:System.Windows.Data.BindingExpression" /> supporting a binding, or an internal expression such as those that support the [DynamicResource Markup Extension](/dotnet/framework/wpf/advanced/dynamicresource-markup-extension).</span></span></summary>
        <value><span data-ttu-id="c6e1b-135">如果值来自于计算出的表达式，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-135"><see langword="true" /> if the value came from an evaluated expression; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c6e1b-136">计算后的表达式还将报告应用了表达式的特定基准值设置条件，作为 <xref:System.Windows.ValueSource.BaseValueSource%2A>中的值。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-136">An evaluated expression will also report the specific base value setting condition where the expression was applied, as a value in <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span></span> <span data-ttu-id="c6e1b-137">对于 <xref:System.Windows.ValueSource.IsExpression%2A> `true`的任何属性，<xref:System.Windows.ValueSource.BaseValueSource%2A> 仍非常相关。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-137">The <xref:System.Windows.ValueSource.BaseValueSource%2A> is still very relevant for any property where <xref:System.Windows.ValueSource.IsExpression%2A> is `true`.</span></span> <span data-ttu-id="c6e1b-138">如果值是间接设置的（如通过模板或继承的属性值进行设置），了解值是否通过表达式会特别有用。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-138">Knowing whether a value came through an expression can be particularly useful if the value was set indirectly, such as through a template or an inherited property value.</span></span>  
  
 <span data-ttu-id="c6e1b-139">如果表达式无法计算（绑定失败，找不到该名称的资源），则值将来自属性系统中的其他某个参与者，这很可能是默认值。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-139">If an expression fails to evaluate (the binding failed; no resource of that name was found), then the value will come from some other participant in the property system, most likely the default value.</span></span> <span data-ttu-id="c6e1b-140">然后，将在 <xref:System.Windows.ValueSource.BaseValueSource%2A>中报告该源。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-140">That source is then reported in <xref:System.Windows.ValueSource.BaseValueSource%2A>.</span></span> <span data-ttu-id="c6e1b-141">失败的表达式计算将返回 <xref:System.Windows.ValueSource.IsExpression%2A>`false`。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-141">Failed expression evaluations will return `false` for <xref:System.Windows.ValueSource.IsExpression%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
        <altmember cref="P:System.Windows.ValueSource.BaseValueSource" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.ValueSource vs1, System.Windows.ValueSource vs2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.ValueSource vs1, valuetype System.Windows.ValueSource vs2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.op_Equality(System.Windows.ValueSource,System.Windows.ValueSource)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (vs1 As ValueSource, vs2 As ValueSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::ValueSource vs1, System::Windows::ValueSource vs2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.ValueSource * System.Windows.ValueSource -&gt; bool" Usage="vs1 = vs2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vs1" Type="System.Windows.ValueSource" />
        <Parameter Name="vs2" Type="System.Windows.ValueSource" />
      </Parameters>
      <Docs>
        <param name="vs1"><span data-ttu-id="c6e1b-142">要比较的第一个 <see cref="T:System.Windows.ValueSource" />。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-142">The first <see cref="T:System.Windows.ValueSource" /> to compare.</span></span></param>
        <param name="vs2"><span data-ttu-id="c6e1b-143">要比较的第二个 <see cref="T:System.Windows.ValueSource" />。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-143">The second <see cref="T:System.Windows.ValueSource" /> to compare.</span></span></param>
        <summary><span data-ttu-id="c6e1b-144">确定两个 <see cref="T:System.Windows.ValueSource" /> 实例是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-144">Determines whether two <see cref="T:System.Windows.ValueSource" /> instances have the same value.</span></span></summary>
        <returns><span data-ttu-id="c6e1b-145">如果两个 <see cref="T:System.Windows.ValueSource" /> 实例等效，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-145"><see langword="true" /> if the two <see cref="T:System.Windows.ValueSource" /> instances are equivalent; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c6e1b-146">此实现调用 <xref:System.Windows.ValueSource.Equals%2A>，并支持基于 <xref:System.Windows.ValueSource>的所有属性的值相等性。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-146">This implementation calls <xref:System.Windows.ValueSource.Equals%2A>, and supports value equality based on all properties of <xref:System.Windows.ValueSource>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.ValueSource vs1, System.Windows.ValueSource vs2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.ValueSource vs1, valuetype System.Windows.ValueSource vs2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.ValueSource.op_Inequality(System.Windows.ValueSource,System.Windows.ValueSource)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (vs1 As ValueSource, vs2 As ValueSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::ValueSource vs1, System::Windows::ValueSource vs2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.ValueSource * System.Windows.ValueSource -&gt; bool" Usage="System.Windows.ValueSource.op_Inequality (vs1, vs2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vs1" Type="System.Windows.ValueSource" />
        <Parameter Name="vs2" Type="System.Windows.ValueSource" />
      </Parameters>
      <Docs>
        <param name="vs1"><span data-ttu-id="c6e1b-147">要比较的第一个 <see cref="T:System.Windows.ValueSource" />。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-147">The first <see cref="T:System.Windows.ValueSource" /> to compare.</span></span></param>
        <param name="vs2"><span data-ttu-id="c6e1b-148">要比较的第二个 <see cref="T:System.Windows.ValueSource" />。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-148">The second <see cref="T:System.Windows.ValueSource" /> to compare.</span></span></param>
        <summary><span data-ttu-id="c6e1b-149">确定两个 <see cref="T:System.Windows.ValueSource" /> 实例是否具有不同的值。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-149">Determines whether two <see cref="T:System.Windows.ValueSource" /> instances do not have the same value.</span></span></summary>
        <returns><span data-ttu-id="c6e1b-150">如果两个 <see cref="T:System.Windows.ValueSource" /> 实例不等效，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-150"><see langword="true" /> if the two <see cref="T:System.Windows.ValueSource" /> instances are not equivalent; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c6e1b-151">此实现调用 <xref:System.Windows.ValueSource.Equals%2A>，返回其求反，并基于 <xref:System.Windows.ValueSource>的所有属性支持值相等性。</span><span class="sxs-lookup"><span data-stu-id="c6e1b-151">This implementation calls <xref:System.Windows.ValueSource.Equals%2A>, returning its negation, and supports value equality based on all properties of <xref:System.Windows.ValueSource>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DependencyPropertyHelper" />
        <altmember cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
  </Members>
</Type>
