<Type Name="DependencyObject" FullName="System.Windows.DependencyObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aaeb3416f09470674e40fd0539d1fa19894fa114" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="86983159" /></Metadata><TypeSignature Language="C#" Value="public class DependencyObject : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DependencyObject extends System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyObject" />
  <TypeSignature Language="VB.NET" Value="Public Class DependencyObject&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyObject : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type DependencyObject = class&#xA;    inherit DispatcherObject" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.NameScopeProperty("NameScope", typeof(System.Windows.NameScope))&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.TypeDescriptionProvider(typeof(MS.Internal.ComponentModel.DependencyObjectProvider))&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="f1011-101">表示参与依赖属性系统的对象。</span><span class="sxs-lookup"><span data-stu-id="f1011-101">Represents an object that participates in the dependency property system.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1011-102"><xref:System.Windows.DependencyObject>类可 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 对其许多派生类启用属性系统服务。</span><span class="sxs-lookup"><span data-stu-id="f1011-102">The <xref:System.Windows.DependencyObject> class enables [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] property system services on its many derived classes.</span></span>  
  
 <span data-ttu-id="f1011-103">属性系统的主要功能是计算属性的值，并提供有关已更改的值的系统通知。</span><span class="sxs-lookup"><span data-stu-id="f1011-103">The property system's primary function is to compute the values of properties, and to provide system notification about values that have changed.</span></span> <span data-ttu-id="f1011-104">参与属性系统的其他键类为 <xref:System.Windows.DependencyProperty> 。</span><span class="sxs-lookup"><span data-stu-id="f1011-104">Another key class that participates in the property system is <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="f1011-105"><xref:System.Windows.DependencyProperty> 允许将依赖属性注册到属性系统，并提供有关每个依赖属性的标识和信息，而 <xref:System.Windows.DependencyObject> 作为基类使对象可以使用依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="f1011-105"><xref:System.Windows.DependencyProperty> enables the registration of dependency properties into the property system, and provides identification and information about each dependency property, whereas <xref:System.Windows.DependencyObject> as a base class enables objects to use the dependency properties.</span></span>  
  
 <span data-ttu-id="f1011-106"><xref:System.Windows.DependencyObject> 服务和特征包括：</span><span class="sxs-lookup"><span data-stu-id="f1011-106"><xref:System.Windows.DependencyObject> services and characteristics include the following:</span></span>  
  
-   <span data-ttu-id="f1011-107">依赖属性承载支持。</span><span class="sxs-lookup"><span data-stu-id="f1011-107">Dependency property hosting support.</span></span> <span data-ttu-id="f1011-108">通过调用 <xref:System.Windows.DependencyProperty.Register%2A> 方法，并将该方法的返回值存储为类中的公共静态字段，来注册依赖属性。</span><span class="sxs-lookup"><span data-stu-id="f1011-108">You register a dependency property by calling the <xref:System.Windows.DependencyProperty.Register%2A> method, and storing the method's return value as a public static field in your class.</span></span>  
  
-   <span data-ttu-id="f1011-109">附加属性托管支持。</span><span class="sxs-lookup"><span data-stu-id="f1011-109">Attached property hosting support.</span></span> <span data-ttu-id="f1011-110">可以通过调用方法来注册附加属性 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> ，并将该方法的返回值存储为类中的公共静态只读字段。</span><span class="sxs-lookup"><span data-stu-id="f1011-110">You register an attached property by calling the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, and storing the method's return value as a public static read-only field in your class.</span></span> <span data-ttu-id="f1011-111"> (还有其他成员要求;请注意，这表示 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 附加属性的特定实现。</span><span class="sxs-lookup"><span data-stu-id="f1011-111">(There are also additional member requirements; note that this represents a [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] specific implementation for attached properties.</span></span> <span data-ttu-id="f1011-112">有关详细信息，请参阅 [附加属性概述](/dotnet/framework/wpf/advanced/attached-properties-overview)。然后可以在派生自的任何类上设置附加属性 <xref:System.Windows.DependencyObject> ) 。</span><span class="sxs-lookup"><span data-stu-id="f1011-112">For details, see [Attached Properties Overview](/dotnet/framework/wpf/advanced/attached-properties-overview).) Your attached property can then be set on any class that derives from <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="f1011-113">获取、设置和清除中存在的任何依赖项属性值的实用工具方法 <xref:System.Windows.DependencyObject> 。</span><span class="sxs-lookup"><span data-stu-id="f1011-113">Get, set, and clear utility methods for values of any dependency properties that exist on the <xref:System.Windows.DependencyObject>.</span></span>  
  
-   <span data-ttu-id="f1011-114">元数据、强制值支持、属性更改通知和替代依赖属性或附加属性的回调。</span><span class="sxs-lookup"><span data-stu-id="f1011-114">Metadata, coerce value support, property changed notification, and override callbacks for  dependency properties or attached properties.</span></span> <span data-ttu-id="f1011-115">此外， <xref:System.Windows.DependencyObject> 类还有助于依赖项属性的每个所有者的属性元数据。</span><span class="sxs-lookup"><span data-stu-id="f1011-115">Also, the <xref:System.Windows.DependencyObject> class facilitates the per-owner property metadata for a dependency property.</span></span>  
  
-   <span data-ttu-id="f1011-116">派生自、或的类的公共 <xref:System.Windows.ContentElement> 基类 <xref:System.Windows.Freezable> <xref:System.Windows.Media.Visual> 。</span><span class="sxs-lookup"><span data-stu-id="f1011-116">A common base class for classes derived from <xref:System.Windows.ContentElement>, <xref:System.Windows.Freezable>, or <xref:System.Windows.Media.Visual>.</span></span> <span data-ttu-id="f1011-117"> (<xref:System.Windows.UIElement> ，另一个基元素类具有包含的类层次结构 <xref:System.Windows.Media.Visual> 。 ) </span><span class="sxs-lookup"><span data-stu-id="f1011-117">(<xref:System.Windows.UIElement>, another base element class, has a class hierarchy that includes <xref:System.Windows.Media.Visual>.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1011-118">下面的示例从派生 <xref:System.Windows.DependencyObject> ，以创建一个新的抽象类。</span><span class="sxs-lookup"><span data-stu-id="f1011-118">The following example derives from <xref:System.Windows.DependencyObject> to create a new abstract class.</span></span> <span data-ttu-id="f1011-119">然后，类将注册附加属性，并包含该附加属性的支持成员。</span><span class="sxs-lookup"><span data-stu-id="f1011-119">The class then registers an attached property and includes support members for that attached property.</span></span>  
  
 [!code-csharp[WPFAquariumSln#DOMain](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#domain)]
 [!code-vb[WPFAquariumSln#DOMain](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#domain)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyProperty" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DependencyObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DependencyObject();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f1011-120">初始化 <see cref="T:System.Windows.DependencyObject" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="f1011-120">Initializes a new instance of the <see cref="T:System.Windows.DependencyObject" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ClearValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f1011-121">清除属性的本地值。</span><span class="sxs-lookup"><span data-stu-id="f1011-121">Clears the local value of a property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.ClearValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f1011-122">要清除的由 <see cref="T:System.Windows.DependencyProperty" /> 对象引用指定的依赖属性。</span><span class="sxs-lookup"><span data-stu-id="f1011-122">The dependency property to be cleared, identified by a <see cref="T:System.Windows.DependencyProperty" /> object reference.</span></span></param>
        <summary><span data-ttu-id="f1011-123">清除属性的本地值。</span><span class="sxs-lookup"><span data-stu-id="f1011-123">Clears the local value of a property.</span></span> <span data-ttu-id="f1011-124">要清除的属性由 <see cref="T:System.Windows.DependencyProperty" /> 标识符指定。</span><span class="sxs-lookup"><span data-stu-id="f1011-124">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyProperty" /> identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1011-125">通过调用来清除属性值 <xref:System.Windows.DependencyObject.ClearValue%2A> 并不一定为依赖属性指定在依赖项属性元数据中指定的默认值。</span><span class="sxs-lookup"><span data-stu-id="f1011-125">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="f1011-126">清除属性仅会专门清除可能应用的任何本地值。</span><span class="sxs-lookup"><span data-stu-id="f1011-126">Clearing the property only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="f1011-127">有关详细信息，请参阅[依赖属性值优先级](/dotnet/framework/wpf/advanced/dependency-property-value-precedence)。</span><span class="sxs-lookup"><span data-stu-id="f1011-127">For more information, see [Dependency Property Value Precedence](/dotnet/framework/wpf/advanced/dependency-property-value-precedence).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1011-128">下面的示例循环访问所有在对象上设置了本地值的属性，然后调用 <xref:System.Windows.DependencyObject.ClearValue%2A> 来清除每个此类属性的值。</span><span class="sxs-lookup"><span data-stu-id="f1011-128">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f1011-129">尝试对密封 <see cref="T:System.Windows.DependencyObject" /> 调用 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />。</span><span class="sxs-lookup"><span data-stu-id="f1011-129">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="P:System.Windows.DependencyObject.IsSealed" />
        <altmember cref="T:System.Windows.DependencyProperty" />
      </Docs>
    </Member>
    <Member MemberName="ClearValue">
      <MemberSignature Language="C#" Value="public void ClearValue (System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearValue(class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearValue (key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearValue(System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.ClearValue : System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyObject.ClearValue key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="f1011-130">要清除的依赖属性的关键字。</span><span class="sxs-lookup"><span data-stu-id="f1011-130">The key for the dependency property to be cleared.</span></span></param>
        <summary><span data-ttu-id="f1011-131">清除只读属性的本地值。</span><span class="sxs-lookup"><span data-stu-id="f1011-131">Clears the local value of a read-only property.</span></span> <span data-ttu-id="f1011-132">要清除的属性由 <see cref="T:System.Windows.DependencyPropertyKey" /> 指定。</span><span class="sxs-lookup"><span data-stu-id="f1011-132">The property to be cleared is specified by a <see cref="T:System.Windows.DependencyPropertyKey" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1011-133"><xref:System.Windows.DependencyPropertyKey>标识属性系统操作的只读依赖属性。</span><span class="sxs-lookup"><span data-stu-id="f1011-133">A <xref:System.Windows.DependencyPropertyKey> identifies a read-only dependency property for property system operations.</span></span> <span data-ttu-id="f1011-134">定义只读依赖项属性的类不应公开此密钥的公共访问权限。</span><span class="sxs-lookup"><span data-stu-id="f1011-134">Classes that define read-only dependency properties should not expose this key with public access.</span></span> <span data-ttu-id="f1011-135">公开密钥将提供一个非属性的只读字符的公共代码路径，前提 <xref:System.Windows.DependencyObject.ClearValue%2A> <xref:System.Windows.DependencyObject.SetValue%2A> 是可以在类或程序集的外部调用方法（如或），并引用密钥。</span><span class="sxs-lookup"><span data-stu-id="f1011-135">A publicly exposed key would provide a public code pathway that negated the read-only character of the property, if methods such as <xref:System.Windows.DependencyObject.ClearValue%2A> or <xref:System.Windows.DependencyObject.SetValue%2A> could be called outside the class or assembly, referencing the key.</span></span>  
  
 <span data-ttu-id="f1011-136">通过调用来清除属性值 <xref:System.Windows.DependencyObject.ClearValue%2A> 并不一定为依赖属性指定在依赖项属性元数据中指定的默认值。</span><span class="sxs-lookup"><span data-stu-id="f1011-136">Clearing the property value by calling <xref:System.Windows.DependencyObject.ClearValue%2A> does not necessarily give a dependency property the default value that is specified in the dependency property metadata.</span></span> <span data-ttu-id="f1011-137">清除该值仅会专门清除可能应用的任何本地值。</span><span class="sxs-lookup"><span data-stu-id="f1011-137">Clearing the value only specifically clears whatever local value may have been applied.</span></span> <span data-ttu-id="f1011-138">有关详细信息，请参阅[依赖属性值优先级](/dotnet/framework/wpf/advanced/dependency-property-value-precedence)。</span><span class="sxs-lookup"><span data-stu-id="f1011-138">For more information, see [Dependency Property Value Precedence](/dotnet/framework/wpf/advanced/dependency-property-value-precedence).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f1011-139">尝试对密封 <see cref="T:System.Windows.DependencyObject" /> 调用 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />。</span><span class="sxs-lookup"><span data-stu-id="f1011-139">Attempted to call <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
        <altmember cref="T:System.Windows.DependencyPropertyKey" />
      </Docs>
    </Member>
    <Member MemberName="CoerceValue">
      <MemberSignature Language="C#" Value="public void CoerceValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CoerceValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CoerceValue (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CoerceValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.CoerceValue : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.CoerceValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f1011-140">要强制转换的依赖项属性的标识符。</span><span class="sxs-lookup"><span data-stu-id="f1011-140">The identifier for the dependency property to coerce.</span></span></param>
        <summary><span data-ttu-id="f1011-141">对指定依赖属性的值进行强制。</span><span class="sxs-lookup"><span data-stu-id="f1011-141">Coerces the value of the specified dependency property.</span></span> <span data-ttu-id="f1011-142">通过对调用方 <see cref="T:System.Windows.DependencyObject" /> 上存在的依赖属性的属性元数据中所指定的任何 <see cref="T:System.Windows.CoerceValueCallback" /> 函数进行调用来完成此操作。</span><span class="sxs-lookup"><span data-stu-id="f1011-142">This is accomplished by invoking any <see cref="T:System.Windows.CoerceValueCallback" /> function specified in property metadata for the dependency property as it exists on the calling <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1011-143">除了通过调用显式调用以外 <xref:System.Windows.DependencyObject.CoerceValue%2A> ， <xref:System.Windows.CoerceValueCallback> 每当属性系统重新计算依赖属性值时，也会在内部调用依赖属性的 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="f1011-143">In addition to being explicitly invoked through calling <xref:System.Windows.DependencyObject.CoerceValue%2A>, the <xref:System.Windows.CoerceValueCallback> for a dependency property is also invoked internally whenever the dependency property value is being re-evaluated by the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span>  
  
 <span data-ttu-id="f1011-144">调用 <xref:System.Windows.DependencyObject.CoerceValue%2A> 方法时，最终将为指定的属性调用强制值回叫。</span><span class="sxs-lookup"><span data-stu-id="f1011-144">When you invoke the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, you are ultimately invoking the coerce value callback for the property that you specify.</span></span> <span data-ttu-id="f1011-145">通常， <xref:System.Windows.DependencyObject.CoerceValue%2A> 仅当知道强制值回调存在并且知道回调的强制条件时，才会调用。</span><span class="sxs-lookup"><span data-stu-id="f1011-145">Typically you will invoke <xref:System.Windows.DependencyObject.CoerceValue%2A> only if you know that a coerce value callback exists, and if you know the callback's criteria for coercion.</span></span>  
  
 <span data-ttu-id="f1011-146">调用的最常见的情况 <xref:System.Windows.DependencyObject.CoerceValue%2A> 是在类处理或属性更改回调的相关属性中，这些属性会以从属方式影响彼此的值。</span><span class="sxs-lookup"><span data-stu-id="f1011-146">The most common scenario for calling <xref:System.Windows.DependencyObject.CoerceValue%2A> is within class handling or property change callbacks of related properties that influence each other's values in a dependent way.</span></span> <span data-ttu-id="f1011-147">有关详细信息，请参阅[依赖属性回调和验证](/dotnet/framework/wpf/advanced/dependency-property-callbacks-and-validation)。</span><span class="sxs-lookup"><span data-stu-id="f1011-147">For more information, see [Dependency Property Callbacks and Validation](/dotnet/framework/wpf/advanced/dependency-property-callbacks-and-validation).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1011-148">下面的示例在用作 <xref:System.Windows.DependencyObject.CoerceValue%2A> <xref:System.Windows.PropertyChangedCallback> <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> 相同类的不同依赖属性的实现中调用。</span><span class="sxs-lookup"><span data-stu-id="f1011-148">The following example calls <xref:System.Windows.DependencyObject.CoerceValue%2A> within a <xref:System.Windows.PropertyChangedCallback> implementation that is used as the <xref:System.Windows.PropertyMetadata.PropertyChangedCallback%2A> for a different dependency properties on the same class.</span></span> <span data-ttu-id="f1011-149">这是在依赖属性之间引入 true 值依赖项的常见模式。</span><span class="sxs-lookup"><span data-stu-id="f1011-149">This is a common pattern for introducing true value dependencies between dependency properties.</span></span>  
  
 [!code-csharp[DPCallbackOverride#OnPCCurrent](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#onpccurrent)]
 [!code-vb[DPCallbackOverride#OnPCCurrent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#onpccurrent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f1011-150">指定的 <paramref name="dp" /> 或其值无效或不存在。</span><span class="sxs-lookup"><span data-stu-id="f1011-150">The specified <paramref name="dp" /> or its value were invalid or do not exist.</span></span></exception>
        <altmember cref="T:System.Windows.CoerceValueCallback" />
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DependencyObjectType">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObjectType DependencyObjectType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObjectType DependencyObjectType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.DependencyObjectType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependencyObjectType As DependencyObjectType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObjectType ^ DependencyObjectType { System::Windows::DependencyObjectType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependencyObjectType : System.Windows.DependencyObjectType" Usage="System.Windows.DependencyObject.DependencyObjectType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObjectType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f1011-151">获取对此实例的 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 类型进行包装的 <see cref="T:System.Windows.DependencyObjectType" />。</span><span class="sxs-lookup"><span data-stu-id="f1011-151">Gets the <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span></span></summary>
        <value><span data-ttu-id="f1011-152">对此实例的 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 类型进行包装的 <see cref="T:System.Windows.DependencyObjectType" />。</span><span class="sxs-lookup"><span data-stu-id="f1011-152">A <see cref="T:System.Windows.DependencyObjectType" /> that wraps the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type of this instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1011-153">如果从方法返回的对象的返回值类型为 <xref:System.Windows.DependencyObject> ，并且你希望根据其类型对其执行特定于属性系统的操作，则此属性很有用。</span><span class="sxs-lookup"><span data-stu-id="f1011-153">This property is useful if an object that is returned from a method has a return value type of <xref:System.Windows.DependencyObject> and you want to perform property system specific operations on it depending on its type.</span></span> <span data-ttu-id="f1011-154">例如， <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> 使用 <xref:System.Windows.DependencyObjectType> 而不是类型来调用更有效 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="f1011-154">For example it is more efficient to call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Windows.DependencyObjectType%29> using the <xref:System.Windows.DependencyObjectType> rather than the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] type.</span></span> <span data-ttu-id="f1011-155"><xref:System.Windows.DependencyObjectType> 有助于加快查找速度。</span><span class="sxs-lookup"><span data-stu-id="f1011-155"><xref:System.Windows.DependencyObjectType> facilitates faster lookup.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1011-156">在下面的伪代码示例中， `MySubClass` 预计其他派生类可能会更改依赖属性的默认值 `MyCustom` 。</span><span class="sxs-lookup"><span data-stu-id="f1011-156">In the following pseudocode example, `MySubClass` anticipates that additional derived classes might change the default value of the `MyCustom` dependency property.</span></span> <span data-ttu-id="f1011-157">类实现一个无参数的构造函数，该构造函数可以通过在值上利用多态性 <xref:System.Windows.DependencyObjectType> ，只要该构造函数用作派生类 instantiator。</span><span class="sxs-lookup"><span data-stu-id="f1011-157">The class implements a parameterless constructor that can determine the actual derived class by taking advantage of polymorphism on the <xref:System.Windows.DependencyObjectType> value whenever that constructor is used as a derived class instantiator.</span></span>  
  
 `public DOClass() : base()`  
  
 `{`  
  
 `__customPropertyCache = (CustomDP)`  
  
 `CustomDPProperty.GetMetadata(DependencyObjectType).DefaultValue;`  
  
 `}`  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
        <altmember cref="T:System.Windows.DependencyObjectType" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override sealed bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dependencyObject.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="f1011-158">要与当前实例进行比较的 <see cref="T:System.Windows.DependencyObject" />。</span><span class="sxs-lookup"><span data-stu-id="f1011-158">The <see cref="T:System.Windows.DependencyObject" /> to compare to the current instance.</span></span></param>
        <summary><span data-ttu-id="f1011-159">确定提供的 <see cref="T:System.Windows.DependencyObject" /> 是否等效于当前 <see cref="T:System.Windows.DependencyObject" />。</span><span class="sxs-lookup"><span data-stu-id="f1011-159">Determines whether a provided <see cref="T:System.Windows.DependencyObject" /> is equivalent to the current <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="f1011-160">如果两个实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f1011-160"><see langword="true" /> if the two instances are the same; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1011-161">此实现只是引用相等性，不会尝试计算所包含属性的值相等性。</span><span class="sxs-lookup"><span data-stu-id="f1011-161">This implementation is reference equality only, and does not attempt to evaluate value equality of the contained properties.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="f1011-162">
            <see cref="T:System.Windows.DependencyObject" /> 重写然后密封两种基本 <see cref="T:System.Object" /> 方法： <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> 和 <see cref="M:System.Windows.DependencyObject.GetHashCode" /> 。</span><span class="sxs-lookup"><span data-stu-id="f1011-162">
            <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two basic <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span></span> <span data-ttu-id="f1011-163">重写调用 <see cref="T:System.Object" /> 实现，从而导致对象相等行为。</span><span class="sxs-lookup"><span data-stu-id="f1011-163">The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior.</span></span> <span data-ttu-id="f1011-164">这些有意的替代的目的是防止派生类尝试为指定值相等性 <see cref="T:System.Windows.DependencyObject" /> 。</span><span class="sxs-lookup"><span data-stu-id="f1011-164">The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />.</span></span> <span data-ttu-id="f1011-165">的值 equalities <see cref="T:System.Windows.DependencyObject" /> 将永远不准确，这是因为原始属性值更改功能 <see cref="T:System.Windows.DependencyObject" /> 及其依赖属性。</span><span class="sxs-lookup"><span data-stu-id="f1011-165">Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties.</span></span> <span data-ttu-id="f1011-166">这包括 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 数据绑定和属性系统等基础功能 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="f1011-166">This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override sealed int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyObject.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f1011-167">获取此 <see cref="T:System.Windows.DependencyObject" /> 的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="f1011-167">Gets a hash code for this <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="f1011-168">带符号 32 位整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="f1011-168">A signed 32-bit integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="f1011-169">
            <see cref="T:System.Windows.DependencyObject" /> 重写然后密封两种 <see cref="T:System.Object" /> 方法： <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> 和 <see cref="M:System.Windows.DependencyObject.GetHashCode" /> 。</span><span class="sxs-lookup"><span data-stu-id="f1011-169">
            <see cref="T:System.Windows.DependencyObject" /> overrides and then seals two <see cref="T:System.Object" /> methods: <see cref="M:System.Windows.DependencyObject.Equals(System.Object)" /> and <see cref="M:System.Windows.DependencyObject.GetHashCode" />.</span></span> <span data-ttu-id="f1011-170">重写调用 <see cref="T:System.Object" /> 实现，从而导致对象相等行为。</span><span class="sxs-lookup"><span data-stu-id="f1011-170">The overrides call the <see cref="T:System.Object" /> implementations, resulting in an object equality behavior.</span></span> <span data-ttu-id="f1011-171">这些有意的替代的目的是防止派生类尝试为指定值相等性 <see cref="T:System.Windows.DependencyObject" /> 。</span><span class="sxs-lookup"><span data-stu-id="f1011-171">The purpose of these deliberate overrides is to prevent derived classes from trying to define a value equality for a <see cref="T:System.Windows.DependencyObject" />.</span></span> <span data-ttu-id="f1011-172">的值 equalities <see cref="T:System.Windows.DependencyObject" /> 将永远不准确，这是因为原始属性值更改功能 <see cref="T:System.Windows.DependencyObject" /> 及其依赖属性。</span><span class="sxs-lookup"><span data-stu-id="f1011-172">Value equalities for <see cref="T:System.Windows.DependencyObject" /> will never be accurate because of the innate property value-changing capabilities of a <see cref="T:System.Windows.DependencyObject" /> and its dependency properties.</span></span> <span data-ttu-id="f1011-173">这包括 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 数据绑定和属性系统等基础功能 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="f1011-173">This includes fundamental [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] features such as data binding and the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetLocalValueEnumerator">
      <MemberSignature Language="C#" Value="public System.Windows.LocalValueEnumerator GetLocalValueEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.LocalValueEnumerator GetLocalValueEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLocalValueEnumerator () As LocalValueEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::LocalValueEnumerator GetLocalValueEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetLocalValueEnumerator : unit -&gt; System.Windows.LocalValueEnumerator" Usage="dependencyObject.GetLocalValueEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LocalValueEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="f1011-174">创建一个专用的枚举数，用于确定哪些依赖项属性在此 <see cref="T:System.Windows.DependencyObject" /> 上具有以本地方式设置的值。</span><span class="sxs-lookup"><span data-stu-id="f1011-174">Creates a specialized enumerator for determining which dependency properties have locally set values on this <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="f1011-175">一个专用的本地值枚举数。</span><span class="sxs-lookup"><span data-stu-id="f1011-175">A specialized local value enumerator.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1011-176">*本地值*是由设置的任何依赖属性值 <xref:System.Windows.DependencyObject.SetValue%2A> ，而不是属性系统的其他方面。</span><span class="sxs-lookup"><span data-stu-id="f1011-176">A *local value* is any dependency property value that was set by <xref:System.Windows.DependencyObject.SetValue%2A>, as opposed to other aspects of the property system.</span></span>  
  
 <span data-ttu-id="f1011-177"><xref:System.Windows.LocalValueEnumerator>通过调用获取的 <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> 可用于枚举在实例上具有本地设置的值的属性 <xref:System.Windows.DependencyObject> 。</span><span class="sxs-lookup"><span data-stu-id="f1011-177">The <xref:System.Windows.LocalValueEnumerator> obtained by calling <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> can be used to enumerate properties that have a locally set value on a <xref:System.Windows.DependencyObject> instance.</span></span> <span data-ttu-id="f1011-178">每个这样的属性都由一个对象在枚举器中表示 <xref:System.Windows.LocalValueEntry> ，该对象的属性引用特定的 <xref:System.Windows.DependencyProperty> 及其值。</span><span class="sxs-lookup"><span data-stu-id="f1011-178">Each such property is represented in the enumerator by a <xref:System.Windows.LocalValueEntry> object, which has properties that reference the specific <xref:System.Windows.DependencyProperty> and its values.</span></span> <span data-ttu-id="f1011-179">这种枚举本地集值的方法可用于优化或用于本地值的其他处理，例如，确定的哪些属性值 <xref:System.Windows.DependencyObject> 会更改（如果它们已被清除）。</span><span class="sxs-lookup"><span data-stu-id="f1011-179">This technique of enumerating over the locally set values can be used for optimization or for other handling of local values, such as to determine which property values of a <xref:System.Windows.DependencyObject> would change if they were cleared.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="f1011-180">返回的 <xref:System.Windows.LocalValueEnumerator> 可能包含 <xref:System.Windows.LocalValueEntry> 只读依赖项属性的记录或属性系统计算值的依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="f1011-180">The returned <xref:System.Windows.LocalValueEnumerator> might contain <xref:System.Windows.LocalValueEntry> records for dependency properties that are read-only, or dependency properties where values are calculated by the property system.</span></span> <span data-ttu-id="f1011-181">例如，具有通过布局建立的宽度的视觉框架元素将报告的本地值 <xref:System.Windows.FrameworkElement.ActualWidth%2A> 。</span><span class="sxs-lookup"><span data-stu-id="f1011-181">For example, a visual framework element that has an established width through layout will report a local value for <xref:System.Windows.FrameworkElement.ActualWidth%2A>.</span></span> <span data-ttu-id="f1011-182">如果你正在获取本地值来重置它们，请检查 <xref:System.Windows.DependencyProperty.ReadOnly%2A> 每个的属性标识符上的值， <xref:System.Windows.LocalValueEntry> 以验证 <xref:System.Windows.DependencyProperty> 问题是否不是只读的。</span><span class="sxs-lookup"><span data-stu-id="f1011-182">If you are getting local values in order to reset them, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value on the property identifier of each <xref:System.Windows.LocalValueEntry> to verify that the <xref:System.Windows.DependencyProperty> in question is not read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1011-183">下面的示例循环访问所有在对象上设置了本地值的属性，然后调用 <xref:System.Windows.DependencyObject.ClearValue%2A> 来清除每个此类属性的值。</span><span class="sxs-lookup"><span data-stu-id="f1011-183">The following example iterates all properties that have local values set on an object, then calls <xref:System.Windows.DependencyObject.ClearValue%2A> to clear the values of each such property.</span></span>  
  
 [!code-csharp[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/csharp/VS_Snippets_Wpf/DPClearValue/CSharp/default.xaml.cs#iteratelocalvaluesandclear)]
 [!code-vb[DPClearValue#IterateLocalValuesAndClear](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPClearValue/VisualBasic/default.xaml.vb#iteratelocalvaluesandclear)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.LocalValueEntry" />
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public object GetValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.GetValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f1011-184">要检索其值的属性的 <see cref="T:System.Windows.DependencyProperty" /> 标识符。</span><span class="sxs-lookup"><span data-stu-id="f1011-184">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span></span></param>
        <summary><span data-ttu-id="f1011-185">对 <see cref="T:System.Windows.DependencyObject" /> 的此实例返回依赖属性的当前有效值。</span><span class="sxs-lookup"><span data-stu-id="f1011-185">Returns the current effective value of a dependency property on this instance of a <see cref="T:System.Windows.DependencyObject" />.</span></span></summary>
        <returns><span data-ttu-id="f1011-186">返回当前有效值。</span><span class="sxs-lookup"><span data-stu-id="f1011-186">Returns the current effective value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1011-187">*有效的值*是属性系统返回给请求该值的任何调用方的属性的值。</span><span class="sxs-lookup"><span data-stu-id="f1011-187">The *effective value* is the value of the property that is returned by the property system to any caller that is requesting the value.</span></span> <span data-ttu-id="f1011-188">有效的值是属性系统计算所有可能的输入，这些输入都参与属性系统值的优先级。</span><span class="sxs-lookup"><span data-stu-id="f1011-188">The effective value is the result of the property system having evaluated all the possible inputs that participate in the property system value precedence.</span></span> <span data-ttu-id="f1011-189">这包括强制和动画。</span><span class="sxs-lookup"><span data-stu-id="f1011-189">This includes coercion and animation.</span></span> <span data-ttu-id="f1011-190">有关详细信息，请参阅[依赖属性值优先级](/dotnet/framework/wpf/advanced/dependency-property-value-precedence)。</span><span class="sxs-lookup"><span data-stu-id="f1011-190">For more information, see [Dependency Property Value Precedence](/dotnet/framework/wpf/advanced/dependency-property-value-precedence).</span></span>  
  
 <span data-ttu-id="f1011-191">此方法将永远不会返回 <xref:System.Windows.DependencyProperty.UnsetValue> 。</span><span class="sxs-lookup"><span data-stu-id="f1011-191">This method will never return <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span> <span data-ttu-id="f1011-192"><xref:System.Windows.DependencyProperty.UnsetValue>是属性系统的一个 sentinel 值，可在内部使用并偶尔通过强制回调公开。</span><span class="sxs-lookup"><span data-stu-id="f1011-192">The <xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value for the property system that is used in various capacities internally and occasionally also exposed through coercion callbacks.</span></span>  
  
 <span data-ttu-id="f1011-193">如果不确定属性的类型，则可以查询请求的依赖项属性的标识符，以确定是否有更具体的 <xref:System.Windows.DependencyProperty.PropertyType%2A> 返回值可以转换为。</span><span class="sxs-lookup"><span data-stu-id="f1011-193">If you are not sure what the property's type should be, you can query the identifier of the requested dependency property to determine whether there is a more specific <xref:System.Windows.DependencyProperty.PropertyType%2A> that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f1011-194">指定 <paramref name="dp" /> 或其值无效，或者指定 <paramref name="dp" /> 不存在。</span><span class="sxs-lookup"><span data-stu-id="f1011-194">The specified <paramref name="dp" /> or its value was invalid, or the specified <paramref name="dp" /> does not exist.</span></span></exception>
        <altmember cref="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
        <altmember cref="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateProperty">
      <MemberSignature Language="C#" Value="public void InvalidateProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvalidateProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateProperty (dp As DependencyProperty)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.InvalidateProperty : System.Windows.DependencyProperty -&gt; unit" Usage="dependencyObject.InvalidateProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f1011-195">要使其失效的属性的 <see cref="T:System.Windows.DependencyProperty" /> 标识符。</span><span class="sxs-lookup"><span data-stu-id="f1011-195">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to invalidate.</span></span></param>
        <summary><span data-ttu-id="f1011-196">重新评估指定依赖属性的有效值。</span><span class="sxs-lookup"><span data-stu-id="f1011-196">Re-evaluates the effective value for the specified dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1011-197">调用时 <xref:System.Windows.DependencyObject.InvalidateProperty%2A> ， <xref:System.Windows.CoerceValueCallback> 可能会 <xref:System.Windows.PropertyChangedCallback> 调用为该依赖属性注册的任何关联的和适用的或函数。</span><span class="sxs-lookup"><span data-stu-id="f1011-197">When you call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>, any associated and applicable <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions registered for that dependency property might be invoked.</span></span>  
  
 <span data-ttu-id="f1011-198"><xref:System.Windows.DependencyObject.InvalidateProperty%2A>对设置了本地值的属性调用将不起作用，因为本地值优先于其他属性系统输入，动画除外。</span><span class="sxs-lookup"><span data-stu-id="f1011-198">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a property that has its local value set will have no effect, because the local value takes precedence over other property system inputs, except for animations.</span></span> <span data-ttu-id="f1011-199">但是，您可以调用 <xref:System.Windows.DependencyObject.ClearValue%2A> ，然后调用 <xref:System.Windows.DependencyObject.InvalidateProperty%2A> 。</span><span class="sxs-lookup"><span data-stu-id="f1011-199">However, you could call <xref:System.Windows.DependencyObject.ClearValue%2A>, then call <xref:System.Windows.DependencyObject.InvalidateProperty%2A>.</span></span> <span data-ttu-id="f1011-200">有关详细信息，请参阅[依赖属性值优先级](/dotnet/framework/wpf/advanced/dependency-property-value-precedence)。</span><span class="sxs-lookup"><span data-stu-id="f1011-200">For more information, see [Dependency Property Value Precedence](/dotnet/framework/wpf/advanced/dependency-property-value-precedence).</span></span>  
  
 <span data-ttu-id="f1011-201">调用 <xref:System.Windows.DependencyObject.InvalidateProperty%2A> 不一定适用于许多依赖属性方案。</span><span class="sxs-lookup"><span data-stu-id="f1011-201">Calling <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is not necessarily applicable for many dependency property scenarios.</span></span> <span data-ttu-id="f1011-202">如果因任何组成部分中的值发生更改而导致依赖属性无效，则属性系统将使该依赖属性自动失效并重新计算该属性。</span><span class="sxs-lookup"><span data-stu-id="f1011-202">If a dependency property becomes invalidated because of value changes in any of the constituents, the property system invalidates and re-evaluates the dependency property automatically.</span></span> <span data-ttu-id="f1011-203">但仍有一些适合的方案 <xref:System.Windows.DependencyObject.InvalidateProperty%2A> 。</span><span class="sxs-lookup"><span data-stu-id="f1011-203">However, there are still some appropriate scenarios where <xref:System.Windows.DependencyObject.InvalidateProperty%2A> is useful.</span></span> <span data-ttu-id="f1011-204">特别是，可以在 <xref:System.Windows.DependencyObject.InvalidateProperty%2A> 其他依赖属性的强制值或属性更改回调内使用。</span><span class="sxs-lookup"><span data-stu-id="f1011-204">In particular, you can use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> inside the coerce value or property changed callback for a different dependency property.</span></span> <span data-ttu-id="f1011-205">你还可以使用 <xref:System.Windows.DependencyObject.InvalidateProperty%2A> 来对无法实现建议的通知机制的数据源 <xref:System.ComponentModel.INotifyPropertyChanged> （如果使用不能从派生的数据类）或数据是静态成员) 的数据源强制重新计算绑定 (。</span><span class="sxs-lookup"><span data-stu-id="f1011-205">You can also use <xref:System.Windows.DependencyObject.InvalidateProperty%2A> to force re-evaluation of a binding against a data source that is not able to implement the recommended <xref:System.ComponentModel.INotifyPropertyChanged> notification mechanism (perhaps if consuming data classes that cannot be derived from, or where the data is a static member).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1011-206">下面的示例 <xref:System.Windows.DependencyObject.InvalidateProperty%2A> 在自定义属性上调用，而在属性的计算中涉及的属性发生变化时。</span><span class="sxs-lookup"><span data-stu-id="f1011-206">The following example calls <xref:System.Windows.DependencyObject.InvalidateProperty%2A> on a custom property, whenever properties that are involved in the invalidated property's calculations change.</span></span> <span data-ttu-id="f1011-207">这是一种调用方法的替代方法 <xref:System.Windows.DependencyObject.CoerceValue%2A> ，因为使属性失效还会调用任何已注册的 <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A> 。</span><span class="sxs-lookup"><span data-stu-id="f1011-207">This is an alternative technique to calling the <xref:System.Windows.DependencyObject.CoerceValue%2A> method, because invalidating the property will also call any registered <xref:System.Windows.PropertyMetadata.CoerceValueCallback%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/SDKSampleLibrary/class1.cs#invalidateproperty)]
 [!code-vb[PropertySystemEsoterics#InvalidateProperty](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/sdksamplelibrary/class1.vb#invalidateproperty)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.DependencyProperty.UnsetValue" />
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyObject.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Windows.DependencyObject.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f1011-208">获取一个值，该值指示此实例当前是否为密封的（只读）。</span><span class="sxs-lookup"><span data-stu-id="f1011-208">Gets a value that indicates whether this instance is currently sealed (read-only).</span></span></summary>
        <value><span data-ttu-id="f1011-209">如果此实例是密封的，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f1011-209"><see langword="true" /> if this instance is sealed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1011-210">此值在内部设置。</span><span class="sxs-lookup"><span data-stu-id="f1011-210">This value is set internally.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.FrameworkElementFactory" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="dependencyObject.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="f1011-211">将包含相关依赖属性标识符、类型的属性元数据以及旧值和新值的事件数据。</span><span class="sxs-lookup"><span data-stu-id="f1011-211">Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.</span></span></param>
        <summary><span data-ttu-id="f1011-212">每当更新此 <see cref="T:System.Windows.DependencyObject" /> 的任何依赖属性的有效值时调用。</span><span class="sxs-lookup"><span data-stu-id="f1011-212">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.DependencyObject" /> has been updated.</span></span> <span data-ttu-id="f1011-213">更改的特定依赖属性将在事件数据中报告。</span><span class="sxs-lookup"><span data-stu-id="f1011-213">The specific dependency property that changed is reported in the event data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1011-214">此方法通常不用于检测单个属性更改，也不会对每个案例执行属性失效。</span><span class="sxs-lookup"><span data-stu-id="f1011-214">This method is not intended to generally detect individual property changes or perform invalidations of properties on a per-case basis.</span></span> <span data-ttu-id="f1011-215"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> 用于修改常规失效模式，前提是了解有关属性的广泛分类的信息。</span><span class="sxs-lookup"><span data-stu-id="f1011-215"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is instead intended for modifications of the general invalidation pattern, if certain information is known about wide classifications of properties.</span></span> <span data-ttu-id="f1011-216">例如，中的更改 <xref:System.Windows.Freezable> 可能是的值类型发生更改 <xref:System.Windows.Freezable> ，也可能是子属性，其中的更改在其他 <xref:System.Windows.Freezable> 引用内。</span><span class="sxs-lookup"><span data-stu-id="f1011-216">For example, changes in a <xref:System.Windows.Freezable> might be changes in the value types of the <xref:System.Windows.Freezable>, or might be subproperties, where the changes are within other <xref:System.Windows.Freezable> references.</span></span> <span data-ttu-id="f1011-217"><xref:System.Windows.Freezable>的重写实现 <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> 使用内部信息来确定属性是否为子属性，并为任意一种情况提供适当的基类逻辑。</span><span class="sxs-lookup"><span data-stu-id="f1011-217">The <xref:System.Windows.Freezable> override implementation of <xref:System.Windows.DependencyObject.OnPropertyChanged%2A> uses internal information to determine whether the properties are subproperties, and provides appropriate base class logic for either case.</span></span>  
  
 <span data-ttu-id="f1011-218"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> 在对象的整个生存期内，可能会多次调用。</span><span class="sxs-lookup"><span data-stu-id="f1011-218"><xref:System.Windows.DependencyObject.OnPropertyChanged%2A> is potentially invoked many times during the life of an object.</span></span> <span data-ttu-id="f1011-219">因此，如果你重写特定属性的元数据，然后 <xref:System.Windows.CoerceValueCallback> 为单个属性附加或函数，则可以为整个属性系统获得更好的性能 <xref:System.Windows.PropertyChangedCallback> 。</span><span class="sxs-lookup"><span data-stu-id="f1011-219">Therefore, you can achieve better performance for the overall property system if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties.</span></span> <span data-ttu-id="f1011-220">但是，如果 <xref:System.Windows.DependencyObject> 包含大量与值相关的依赖项属性，则可以使用此方法，或者，如果包含的逻辑（如呈现行为）必须针对属性失效的几个相关事例重新运行，则应使用此方法。</span><span class="sxs-lookup"><span data-stu-id="f1011-220">However, you would use this method if a <xref:System.Windows.DependencyObject> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="f1011-221">始终调用基实现。</span><span class="sxs-lookup"><span data-stu-id="f1011-221">Always call the base implementation.</span></span> <span data-ttu-id="f1011-222">如果不这样做，将明显禁用整个 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 属性系统，从而导致报告错误的值。</span><span class="sxs-lookup"><span data-stu-id="f1011-222">Failure to do this will significantly disable the entire [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system, causing incorrect values to be reported.</span></span></para></block>
        <altmember cref="T:System.Windows.FrameworkElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadLocalValue">
      <MemberSignature Language="C#" Value="public object ReadLocalValue (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ReadLocalValue(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLocalValue (dp As DependencyProperty) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ReadLocalValue(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.ReadLocalValue : System.Windows.DependencyProperty -&gt; obj" Usage="dependencyObject.ReadLocalValue dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f1011-223">要检索其值的属性的 <see cref="T:System.Windows.DependencyProperty" /> 标识符。</span><span class="sxs-lookup"><span data-stu-id="f1011-223">The <see cref="T:System.Windows.DependencyProperty" /> identifier of the property to retrieve the value for.</span></span></param>
        <summary><span data-ttu-id="f1011-224">如果存在，则返回依赖属性的本地值。</span><span class="sxs-lookup"><span data-stu-id="f1011-224">Returns the local value of a dependency property, if it exists.</span></span></summary>
        <returns><span data-ttu-id="f1011-225">返回本地值，或者如果未设置本地值，则返回 sentinel 值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</span><span class="sxs-lookup"><span data-stu-id="f1011-225">Returns the local value, or returns the sentinel value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> if no local value is set.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1011-226">对于依赖属性，您应使用 <xref:System.Windows.DependencyObject.GetValue%2A> 最典型的 "get" 操作。</span><span class="sxs-lookup"><span data-stu-id="f1011-226">You should use <xref:System.Windows.DependencyObject.GetValue%2A> for most typical "get" operations for a dependency property.</span></span> <span data-ttu-id="f1011-227"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> 如果值不是本地设置的，则不会返回有效的值。</span><span class="sxs-lookup"><span data-stu-id="f1011-227"><xref:System.Windows.DependencyObject.ReadLocalValue%2A> does not return the effective value for a variety of circumstances where the value was not locally set.</span></span>  
  
 <span data-ttu-id="f1011-228">由 "样式"、"主题"、"模板"、"元数据" 或 "属性值继承" 的默认值设置的值不被视为本地值。</span><span class="sxs-lookup"><span data-stu-id="f1011-228">Values that are set by styles, themes, templates, the default value from metadata, or property value inheritance are not considered to be local values.</span></span> <span data-ttu-id="f1011-229">但是，在计算绑定和其他表达式后，它们被视为本地值。</span><span class="sxs-lookup"><span data-stu-id="f1011-229">However, bindings and other expressions are considered to be local values, after they have been evaluated.</span></span>  
  
 <span data-ttu-id="f1011-230">如果未设置本地值，则此方法返回 <xref:System.Windows.DependencyProperty.UnsetValue> 。</span><span class="sxs-lookup"><span data-stu-id="f1011-230">When no local value is set, this method returns <xref:System.Windows.DependencyProperty.UnsetValue>.</span></span>  
  
 <span data-ttu-id="f1011-231">如果返回的值不是 <xref:System.Windows.DependencyProperty.UnsetValue> ，则可以查询请求的依赖项属性的元数据，以确定是否有更具体的类型可以将返回值转换为。</span><span class="sxs-lookup"><span data-stu-id="f1011-231">If the returned value is other than <xref:System.Windows.DependencyProperty.UnsetValue>, you can query the metadata of the requested dependency property to determine whether there is a more specific type that the return value can be converted to.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyObject.GetLocalValueEnumerator" />
        <altmember cref="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentValue">
      <MemberSignature Language="C#" Value="public void SetCurrentValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetCurrentValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCurrentValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCurrentValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetCurrentValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetCurrentValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="value" Type="System.Object" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f1011-232">要设置的依赖属性的标识符。</span><span class="sxs-lookup"><span data-stu-id="f1011-232">The identifier of the dependency property to set.</span></span></param>
        <param name="value"><span data-ttu-id="f1011-233">新的本地值。</span><span class="sxs-lookup"><span data-stu-id="f1011-233">The new local value.</span></span></param>
        <summary><span data-ttu-id="f1011-234">设置依赖属性的值而不更改其值源。</span><span class="sxs-lookup"><span data-stu-id="f1011-234">Sets the value of a dependency property without changing its value source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1011-235">此方法由组件使用，该组件以编程方式设置其自己的属性之一的值，而无需禁用应用程序声明的属性用法。</span><span class="sxs-lookup"><span data-stu-id="f1011-235">This method is used by a component that programmatically sets the value of one of its own properties without disabling an application's declared use of the property.</span></span> <span data-ttu-id="f1011-236"><xref:System.Windows.DependencyObject.SetCurrentValue%2A>方法可更改属性的有效值，但现有触发器、数据绑定和样式将继续工作。</span><span class="sxs-lookup"><span data-stu-id="f1011-236">The <xref:System.Windows.DependencyObject.SetCurrentValue%2A> method changes the effective value of the property, but existing triggers, data bindings, and styles will continue to work.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f1011-237">尝试修改只读依赖属性或密封 <see cref="T:System.Windows.DependencyObject" /> 上的属性。</span><span class="sxs-lookup"><span data-stu-id="f1011-237">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f1011-238"><paramref name="value" /> 不是为 <paramref name="dp" /> 属性注册的正确类型。</span><span class="sxs-lookup"><span data-stu-id="f1011-238"><paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetValue">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="f1011-239">设置依赖属性的本地值。</span><span class="sxs-lookup"><span data-stu-id="f1011-239">Sets the local value of a dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyProperty dp, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyProperty dp, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (dp As DependencyProperty, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyProperty ^ dp, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyProperty * obj -&gt; unit" Usage="dependencyObject.SetValue (dp, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f1011-240">要设置的依赖属性的标识符。</span><span class="sxs-lookup"><span data-stu-id="f1011-240">The identifier of the dependency property to set.</span></span></param>
        <param name="value"><span data-ttu-id="f1011-241">新的本地值。</span><span class="sxs-lookup"><span data-stu-id="f1011-241">The new local value.</span></span></param>
        <summary><span data-ttu-id="f1011-242">设置依赖属性的本地值，该值由其依赖属性标识符指定。</span><span class="sxs-lookup"><span data-stu-id="f1011-242">Sets the local value of a dependency property, specified by its dependency property identifier.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1011-243">如果提供的类型与最初注册依赖属性时所声明的类型不匹配，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f1011-243">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="f1011-244">`value`应始终将参数提供为适当的类型。</span><span class="sxs-lookup"><span data-stu-id="f1011-244">The `value` parameter should always be provided as the appropriate type.</span></span>  
  
 <span data-ttu-id="f1011-245">在 <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> 所设置的依赖项属性的依赖项属性标识符上存在回调时，异常情况可能会受到影响。</span><span class="sxs-lookup"><span data-stu-id="f1011-245">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span> <span data-ttu-id="f1011-246">否则，提供的值可能会失败， (例如，在本机类型为双) 精度类型时传递字符串。</span><span class="sxs-lookup"><span data-stu-id="f1011-246">Otherwise, the value provided might be failing general type-checking conditions (for example, passing a string when the native type is Double).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f1011-247">尝试修改只读依赖属性或密封 <see cref="T:System.Windows.DependencyObject" /> 上的属性。</span><span class="sxs-lookup"><span data-stu-id="f1011-247">Attempted to modify a read-only dependency property, or a property on a sealed <see cref="T:System.Windows.DependencyObject" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f1011-248"><paramref name="value" /> 不是为 <paramref name="dp" /> 属性注册的正确类型。</span><span class="sxs-lookup"><span data-stu-id="f1011-248"><paramref name="value" /> was not the correct type as registered for the <paramref name="dp" /> property.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (System.Windows.DependencyPropertyKey key, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetValue(class System.Windows.DependencyPropertyKey key, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetValue (key As DependencyPropertyKey, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetValue(System::Windows::DependencyPropertyKey ^ key, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.SetValue : System.Windows.DependencyPropertyKey * obj -&gt; unit" Usage="dependencyObject.SetValue (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="f1011-249">要设置的属性的 <see cref="T:System.Windows.DependencyPropertyKey" /> 标识符。</span><span class="sxs-lookup"><span data-stu-id="f1011-249">The <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the property to set.</span></span></param>
        <param name="value"><span data-ttu-id="f1011-250">新的本地值。</span><span class="sxs-lookup"><span data-stu-id="f1011-250">The new local value.</span></span></param>
        <summary><span data-ttu-id="f1011-251">设置一个只读依赖属性的本地值，该值由依赖属性的 <see cref="T:System.Windows.DependencyPropertyKey" /> 标识符指定。</span><span class="sxs-lookup"><span data-stu-id="f1011-251">Sets the local value of a read-only dependency property, specified by the <see cref="T:System.Windows.DependencyPropertyKey" /> identifier of the dependency property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1011-252">当你为自定义类定义的只读依赖项属性设置值时，通常使用此签名。</span><span class="sxs-lookup"><span data-stu-id="f1011-252">This signature is generally used when you set values for read-only dependency properties that are defined by your custom classes.</span></span> <span data-ttu-id="f1011-253">通常， <xref:System.Windows.DependencyObject.SetValue%2A> 仅从注册该依赖项属性的类型调用，后者实现为依赖属性提供确定值的内部逻辑。</span><span class="sxs-lookup"><span data-stu-id="f1011-253">Generally, <xref:System.Windows.DependencyObject.SetValue%2A> is called only from the type that registered that dependency property, which implements the internal logic that provides the determined value for the dependency property.</span></span> <span data-ttu-id="f1011-254">有关详细信息，请参阅[只读依赖属性](/dotnet/framework/wpf/advanced/read-only-dependency-properties)。</span><span class="sxs-lookup"><span data-stu-id="f1011-254">For more information, see [Read-Only Dependency Properties](/dotnet/framework/wpf/advanced/read-only-dependency-properties).</span></span>  
  
 <span data-ttu-id="f1011-255">如果提供的类型与最初注册依赖属性时所声明的类型不匹配，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="f1011-255">If the provided type does not match the type that is declared for the dependency property as it was originally registered, an exception is thrown.</span></span> <span data-ttu-id="f1011-256">`value`应始终将参数提供为适当的类型。</span><span class="sxs-lookup"><span data-stu-id="f1011-256">The `value` parameter should always be provided as the appropriate type.</span></span> <span data-ttu-id="f1011-257">在 <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> 所设置的依赖项属性的依赖项属性标识符上存在回调时，异常情况可能会受到影响。</span><span class="sxs-lookup"><span data-stu-id="f1011-257">The exception conditions are potentially influenced by the <xref:System.Windows.DependencyProperty.ValidateValueCallback%2A> callback that exists on the dependency property identifier of the dependency property being set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f1011-258">下面的示例定义了一个只读依赖项属性，以及一个 `public static readonly` <xref:System.Windows.DependencyProperty> 为属性使用者提供了必需的只读公开的，以及包装的 get 访问器 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="f1011-258">The following example defines a read-only dependency property, along with a `public static readonly` <xref:System.Windows.DependencyProperty> that provides necessary read-only exposure to property consumers, and the get accessor for the [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] wrapper.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeProperty">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShouldSerializeProperty (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldSerializeProperty(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ShouldSerializeProperty (dp As DependencyProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ShouldSerializeProperty(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool&#xA;override this.ShouldSerializeProperty : System.Windows.DependencyProperty -&gt; bool" Usage="dependencyObject.ShouldSerializeProperty dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="f1011-259">应被序列化的依赖项属性的标识符。</span><span class="sxs-lookup"><span data-stu-id="f1011-259">The identifier for the dependency property that should be serialized.</span></span></param>
        <summary><span data-ttu-id="f1011-260">返回一个值，该值指示序列化进程是否应序列化所提供的依赖属性的值。</span><span class="sxs-lookup"><span data-stu-id="f1011-260">Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.</span></span></summary>
        <returns><span data-ttu-id="f1011-261">如果应对所提供的依赖属性的值进行序列化，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="f1011-261"><see langword="true" /> if the dependency property that is supplied should be value-serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f1011-262">如果 `true` 依赖属性在上建立了一个本地值，则默认实现将返回 <xref:System.Windows.DependencyObject> 。</span><span class="sxs-lookup"><span data-stu-id="f1011-262">The default implementation returns `true` for all cases in which a dependency property had a local value established on the <xref:System.Windows.DependencyObject>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="f1011-263">此方法的替代可能以不同方式处理特定依赖属性。</span><span class="sxs-lookup"><span data-stu-id="f1011-263">Overrides for this method might handle specific dependency properties differently.</span></span></para></block>
      </Docs>
    </Member>
  </Members>
</Type>
