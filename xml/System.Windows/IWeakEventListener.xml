<Type Name="IWeakEventListener" FullName="System.Windows.IWeakEventListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ae2eae67ba52bc655ca55e48eedc91705685a7df" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102057631" /></Metadata><TypeSignature Language="C#" Value="public interface IWeakEventListener" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IWeakEventListener" />
  <TypeSignature Language="DocId" Value="T:System.Windows.IWeakEventListener" />
  <TypeSignature Language="VB.NET" Value="Public Interface IWeakEventListener" />
  <TypeSignature Language="C++ CLI" Value="public interface class IWeakEventListener" />
  <TypeSignature Language="F#" Value="type IWeakEventListener = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="4eeb7-101">为希望通过 WeakEvent 模式和 <see cref="T:System.Windows.WeakEventManager" /> 接收事件的类提供事件侦听支持。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-101">Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a <see cref="T:System.Windows.WeakEventManager" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4eeb7-102"><xref:System.Windows.WeakEventManager>调度程序) 通过 <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 在实现此接口的类上调用方法，并事先调用方法已将添加为侦听器，来转发事件 (<xref:System.Windows.WeakEventManager> 。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-102">The <xref:System.Windows.WeakEventManager> (a dispatcher) forwards an event by calling the <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> method on classes that implement this interface, and that have been added as listeners by calling <xref:System.Windows.WeakEventManager> methods beforehand.</span></span>  
  
 <span data-ttu-id="4eeb7-103">遵循 WeakEvent 模式的主要原因是事件源具有可能独立于事件侦听器的对象生存期。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-103">The principal reason for following the WeakEvent pattern is when the event source has an object lifetime that is potentially independent of the event listeners.</span></span> <span data-ttu-id="4eeb7-104">通过使用的中心事件调度，可对 <xref:System.Windows.WeakEventManager> 侦听器的处理程序进行垃圾回收 (或手动清除) 即使源对象生存期超出侦听器。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-104">Using the central event dispatching of a <xref:System.Windows.WeakEventManager> enables the handlers for listeners to be garbage collected (or manually purged) even if the source object lifetime extends beyond the listeners.</span></span> <span data-ttu-id="4eeb7-105">与此相反，使用 `+=` 或等效特定于语言的事件语法的正常事件挂接会导致可能仍在连接的源持有对处理程序的强引用。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-105">By contrast, a normal event hookup using `+=` or equivalent language-specific event syntax causes the potentially still-connected source to hold a strong reference to the handlers.</span></span> <span data-ttu-id="4eeb7-106">这会使侦听器引用及时地被垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-106">This keeps the listener references from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="4eeb7-107">源和侦听器之间的关系建议使用此模式的一种常见情况是，处理来自数据绑定的源的更新事件。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-107">One common situation where the relationships between sources and listeners suggests the use of this pattern is the handling of update events coming from sources for data bindings.</span></span>  
  
 <span data-ttu-id="4eeb7-108">可以使用 WeakEvent 模式来侦听应用程序外部的事件。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-108">You can use the WeakEvent pattern to listen for events that are external to your application.</span></span> <span data-ttu-id="4eeb7-109">只需为 <xref:System.Windows.WeakEventManager> 其定义，在中提供侦听行为 <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> ，并使用 <xref:System.Windows.WeakEventManager> 附加处理程序引用而不是 `+=` 。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-109">You only need to define a <xref:System.Windows.WeakEventManager> for it, provide listening behavior in <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>, and use the <xref:System.Windows.WeakEventManager> to attach the handler references rather than `+=`.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
  </Docs>
  <Members>
    <Member MemberName="ReceiveWeakEvent">
      <MemberSignature Language="C#" Value="public bool ReceiveWeakEvent (Type managerType, object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReceiveWeakEvent(class System.Type managerType, object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReceiveWeakEvent (managerType As Type, sender As Object, e As EventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ReceiveWeakEvent(Type ^ managerType, System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member ReceiveWeakEvent : Type * obj * EventArgs -&gt; bool" Usage="iWeakEventListener.ReceiveWeakEvent (managerType, sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="managerType"><span data-ttu-id="4eeb7-110">调用此方法的 <see cref="T:System.Windows.WeakEventManager" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-110">The type of the <see cref="T:System.Windows.WeakEventManager" /> calling this method.</span></span></param>
        <param name="sender"><span data-ttu-id="4eeb7-111">发出该事件的对象。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-111">Object that originated the event.</span></span></param>
        <param name="e"><span data-ttu-id="4eeb7-112">事件数据。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-112">Event data.</span></span></param>
        <summary><span data-ttu-id="4eeb7-113">接收集中事件管理器中的事件。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-113">Receives events from the centralized event manager.</span></span></summary>
        <returns><span data-ttu-id="4eeb7-114">如果侦听器已对事件进行了处理，则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-114"><see langword="true" /> if the listener handled the event.</span></span> <span data-ttu-id="4eeb7-115"><see cref="T:System.Windows.WeakEventManager" />WPF 中的处理为侦听器未处理的事件注册侦听器被视为错误。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-115">It is considered an error by the <see cref="T:System.Windows.WeakEventManager" /> handling in WPF to register a listener for an event that the listener does not handle.</span></span> <span data-ttu-id="4eeb7-116">无论如何，如果此方法接收到它未能识别或处理的事件，它都应该返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-116">Regardless, the method should return <see langword="false" /> if it receives an event that it does not recognize or handle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4eeb7-117">下面的示例实现 <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 为两个假设事件提供 WeakEvent 模式支持 `ClockwiseSpin` ， `CounterclockwiseSpin` 每个事件都有一个专用 <xref:System.Windows.WeakEventManager> (不) 显示。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-117">The following example implements <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> to provide WeakEvent pattern support for two hypothetical events `ClockwiseSpin` and `CounterclockwiseSpin` that each have a dedicated <xref:System.Windows.WeakEventManager> (not shown).</span></span> <span data-ttu-id="4eeb7-118">此实现为每个受支持的事件调用类处理程序存根，并将事件数据转换为 (在这种情况下，这两个事件共享事件数据类型 `SpinEventArgs`) 。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-118">This implementation calls class handler stubs for each supported event, casting the event data (in this case the two events share an event data type `SpinEventArgs`).</span></span> <span data-ttu-id="4eeb7-119">`false`如果接收的事件不是预期的事件，则实现返回。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-119">The implementation returns `false` if the event received is not one that is expected.</span></span>  
  
 [!code-csharp[CorePseudocode#IWeakEventListener](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#iweakeventlistener)]
 [!code-vb[CorePseudocode#IWeakEventListener](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#iweakeventlistener)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4eeb7-120">此方法用于接收接收方在侦听器列表中的所有可能事件。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-120">This method is intended to receive all possible events where the receiver is in a listener list.</span></span> <span data-ttu-id="4eeb7-121">特别是，如果为侦听多个事件的类实现，则必须检查传入参数的类型，以便 <paramref name="managerType" /> 了解调用对应的事件。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-121">Particularly if implementing for a class that is listening for more than one event, you must check the type of the incoming <paramref name="managerType" /> parameter in order to know which event the call corresponds to.</span></span> <span data-ttu-id="4eeb7-122">这就是要作为模式一部分的每个事件都必须具有专用的原因 <see cref="T:System.Windows.WeakEventManager" /> 。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-122">This is why each event that is to be part of the pattern must have a dedicated <see cref="T:System.Windows.WeakEventManager" />.</span></span> <span data-ttu-id="4eeb7-123">并且，该 <paramref name="e" /> 参数类型为 "常规" <see cref="T:System.EventArgs" /> 。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-123">Also, the <paramref name="e" /> parameter is typed as the general <see cref="T:System.EventArgs" />.</span></span> <span data-ttu-id="4eeb7-124">因此，若要从事件数据中获取任何特定属性，则实现将需要强制转换为特定的事件数据类型。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-124">Therefore, in order get any specific properties out of the event data, your implementation will need to cast to the specific event data type.</span></span>  
  
<span data-ttu-id="4eeb7-125">通常，在根据类型检查事件标识之后， <see cref="T:System.Windows.WeakEventManager" /> 实现应调用私有类处理程序。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-125">Typically, after checking for the identity of the event based on the <see cref="T:System.Windows.WeakEventManager" /> type, your implementation should call a private class handler.</span></span> <span data-ttu-id="4eeb7-126">类处理程序可以是非常相同的类处理程序，用于处理侦听器的事件，该事件是通过添加到发送程序的事件的常规事件模式添加的 <see langword="+=" /> 。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-126">Your class handler could conceivably be the very same class handler that is used to handle that event for listeners that are added through the conventional event pattern of adding via <see langword="+=" /> to the event on the sender.</span></span> <span data-ttu-id="4eeb7-127">下面的示例部分提供了大致的实现模板。</span><span class="sxs-lookup"><span data-stu-id="4eeb7-127">The following example section provides a rough implementation template.</span></span></para></block>
        <altmember cref="T:System.Windows.WeakEventManager" />
      </Docs>
    </Member>
  </Members>
</Type>
