<Type Name="WeakEventManager+ListenerList" FullName="System.Windows.WeakEventManager+ListenerList">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2979f686cc4e47d94d87c9d9a436abe443c41efb" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102080564" /></Metadata><TypeSignature Language="C#" Value="protected class WeakEventManager.ListenerList" />
  <TypeSignature Language="ILAsm" Value=".class nested protected auto ansi beforefieldinit WeakEventManager/ListenerList extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager.ListenerList" />
  <TypeSignature Language="VB.NET" Value="Protected Class WeakEventManager.ListenerList" />
  <TypeSignature Language="C++ CLI" Value="protected: ref class WeakEventManager::ListenerList" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供用于存储 <see cref="T:System.Windows.WeakEventManager" /> 的侦听器的内置集合列表。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 虽然此列表包含的成员类似于和定义的成员 <xref:System.Collections.IList> <xref:System.Collections.ICollection> ，并且提供了类似的功能，但此类不实现这些接口。  
  
 大多数 <xref:System.Windows.WeakEventManager> 派生类不需要使用上的任何成员 <xref:System.Windows.WeakEventManager.ListenerList> 。 <xref:System.Windows.WeakEventManager> <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 默认情况下，这些方法和默认使用 <xref:System.Windows.WeakEventManager.ListenerList> 一个列表 `source` 。  
  
 仅 <xref:System.Windows.WeakEventManager.ListenerList> 当 <xref:System.Windows.WeakEventManager> 类维护相同事件源组合的多个列表时，才需要调用方法，每个列表都创建为考虑事件的不同条件。 在这种情况下，你不会使用 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 和 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> ，而是实现 `AddListener` 或 `RemoveListener` 以仅在其中一个内部侦听器列表中操作侦听器，通常基于你添加到或的参数 `AddListener` `RemoveListener` 。 另外，接收原始事件的处理程序实现不能直接调用 <xref:System.Windows.WeakEventManager.DeliverEvent%2A> ; 您必须跟踪事件的细节，并使用将事件仅传递到适当的列表 <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> 。  
  
 提供了的各种方法， <xref:System.Windows.WeakEventManager.ListenerList> 以便您可以使用您的内部列表，以便您可以在实际传递事件期间阻止修改列表。  
  
 使用此实现技术的示例类是 <xref:System.ComponentModel.PropertyChangedEventManager> ，它 `PropertyChanged` 根据所更改的属性维护单独的侦听器列表。  
  
<a name="xamlTextUsage_ListenerList"></a>   
## <a name="xaml-text-usage"></a>XAML 文本用法  
 不能在 XAML 中使用此类。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Windows.WeakEventManager.ListenerList : int -&gt; System.Windows.WeakEventManager.ListenerList" Usage="new System.Windows.WeakEventManager.ListenerList capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity">应在初始列表中分配的项数。</param>
        <summary>使用指定的初始容量初始化 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Windows.IWeakEventListener -&gt; unit" Usage="listenerList.Add listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener">要添加到 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 的侦听器元素。</param>
        <summary>将 <see cref="T:System.Windows.IWeakEventListener" /> 对象添加到 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 作为侦听器提供的对象应为 <xref:System.Windows.DependencyObject> 实现接口的， <xref:System.Windows.IWeakEventListener> 因此具有工作 <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 实现。  
  
 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A>更改列表内容之前应始终调用。 否则，列表可能正在传递事件，因此原始被锁定。 调用 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 会将输入更改 `list` 为克隆，以便您的 <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> 调用仍可以在克隆上工作。 如果 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 返回 `true` ，你可能需要更新对在代码的其他区域中维护的列表的所有私有引用。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : Delegate -&gt; unit" Usage="listenerList.AddHandler handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler">将添加到 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中的事件处理程序。</param>
        <summary>将事件处理程序添加到 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUse">
      <MemberSignature Language="C#" Value="public bool BeginUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool BeginUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginUse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool BeginUse();" />
      <MemberSignature Language="F#" Value="member this.BeginUse : unit -&gt; bool" Usage="listenerList.BeginUse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>声明列表正在使用中。 这可以防止在列表项迭代过程中直接更改列表。</summary>
        <returns>如果列表已经声明为正在使用中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 <xref:System.Windows.WeakEventManager> <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> 循环访问列表之前，实现应调用以将事件传递给侦听器，并应 <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> 在完成时调用。 这可防止其他调用方修改列表，同时用于事件传递的迭代正在进行。 如果在此时间段内修改了列表，则会克隆列表。 如果克隆了列表，则 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 返回 `true` ，这意味着在上一次传递中丢失最近的侦听器更改。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Windows.WeakEventManager.ListenerList Clone ();" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList Clone() cil managed" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As WeakEventManager.ListenerList" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.Windows.WeakEventManager.ListenerList&#xA;override this.Clone : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="listenerList.Clone " FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public System.Windows.WeakEventManager.ListenerList Clone ();" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.WeakEventManager/ListenerList Clone() cil managed" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As WeakEventManager.ListenerList" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::WeakEventManager::ListenerList ^ Clone();" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="listenerList.Clone " FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建此 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 的可修改复本。</summary>
        <returns>当前对象的可修改复本。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="protected void CopyTo (System.Windows.WeakEventManager.ListenerList newList);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CopyTo(class System.Windows.WeakEventManager/ListenerList newList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CopyTo (newList As WeakEventManager.ListenerList)" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Windows.WeakEventManager.ListenerList -&gt; unit" Usage="listenerList.CopyTo newList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newList" Type="System.Windows.WeakEventManager+ListenerList" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="newList">要复制到的对象。</param>
        <summary>将当前的 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 复制到指定 <see cref="T:System.Windows.WeakEventManager.ListenerList" />。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.WeakEventManager.ListenerList.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中包含的项的数量。</summary>
        <value><see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中包含的项的数量。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="public virtual bool DeliverEvent (object sender, EventArgs args, Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeliverEvent(object sender, class System.EventArgs args, class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeliverEvent (sender As Object, args As EventArgs, managerType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool DeliverEvent(System::Object ^ sender, EventArgs ^ args, Type ^ managerType);" />
      <MemberSignature Language="F#" Value="abstract member DeliverEvent : obj * EventArgs * Type -&gt; bool&#xA;override this.DeliverEvent : obj * EventArgs * Type -&gt; bool" Usage="listenerList.DeliverEvent (sender, args, managerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="args" Type="System.EventArgs" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="managerType" Type="System.Type" Index="2" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sender">引发事件的对象。</param>
        <param name="args">包含事件数据的对象。</param>
        <param name="managerType">调用此方法的 <see cref="T:System.Windows.WeakEventManager" /> 的类型。</param>
        <summary>将正在托管的事件传送到 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中的每个侦听器。</summary>
        <returns>如果任何一个 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中侦听器引用的对象已被垃圾回收，则为 <see langword="true" />；否则，为<see langword="false" /> 。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.WeakEventManager.ListenerList Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.WeakEventManager/ListenerList Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Windows.WeakEventManager.ListenerList" Usage="System.Windows.WeakEventManager.ListenerList.Empty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::WeakEventManager::ListenerList ^ Empty { System::Windows::WeakEventManager::ListenerList ^ get(); };" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示用于对比的空列表的值。</summary>
        <value>空列表表示。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUse">
      <MemberSignature Language="C#" Value="public void EndUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUse();" />
      <MemberSignature Language="F#" Value="member this.EndUse : unit -&gt; unit" Usage="listenerList.EndUse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>解除由 <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" /> 启动的锁定状态。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Windows.WeakEventManager.ListenerList.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取声明此 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 是否为空的值。</summary>
        <value>如果列表为空，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法等效于检查是否 <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> 为零，且不检查列表中是否有任何引用现已过时。 如果要确保所有引用仍有效，请在 <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> 检查列表的空状态之前调用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.IWeakEventListener this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IWeakEventListener Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As IWeakEventListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IWeakEventListener ^ default[int] { System::Windows::IWeakEventListener ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.IWeakEventListener" Usage="System.Windows.WeakEventManager.ListenerList.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IWeakEventListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">列表中侦听器的从零开始的索引。</param>
        <summary>获取或设置 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中的特定侦听器项。</summary>
        <value>该索引处的项，如果该索引处没有项，则为 null 引用。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForWriting">
      <MemberSignature Language="C#" Value="public static bool PrepareForWriting (ref System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool PrepareForWriting(class System.Windows.WeakEventManager/ListenerList&amp; list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PrepareForWriting (ByRef list As WeakEventManager.ListenerList) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool PrepareForWriting(System::Windows::WeakEventManager::ListenerList ^ % list);" />
      <MemberSignature Language="F#" Value="static member PrepareForWriting : ListenerList -&gt; bool" Usage="System.Windows.WeakEventManager.ListenerList.PrepareForWriting list" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="list">要检查其使用状态和可能副本的列表。</param>
        <summary>检查是否正在使用提供的列表，如果正在使用，则将列表引用参数设置为该列表的副本，而不是原稿列表的副本。</summary>
        <returns>如果调用时正在使用提供的列表，并因此 <paramref name="list" /> 参数引用被重置为副本，则为 <see langword="true" />。 如果未使用提供的列表，在此情况下 <paramref name="list" /> 参数引用保持不变，则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果正在使用给定的列表 (这意味着当前正在传递事件) ，则调用此方法会将输入替换 `list` 为克隆。  现有用户会完成将事件传递到原始列表的操作，而不会干扰新列表的更改。  
  
 如果该方法返回 `true` ，则调用方可能需要在其自己的数据结构中插入新列表，因为这指示提供的列表已不再是最新的。  
  
 此方法 <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> 在内部调用，然后立即调用 <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> 。 因此 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> ，调用本身并不会对列表引入锁。 在调用后，甚至克隆副本都作为辅助操作完成 <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public bool Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Purge" />
      <MemberSignature Language="VB.NET" Value="Public Function Purge () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Purge();" />
      <MemberSignature Language="F#" Value="member this.Purge : unit -&gt; bool" Usage="listenerList.Purge " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从基础引用目标为 null 引用的列表中移除所有项。</summary>
        <returns>如果清除了所有项，则返回 <see langword="true" />；否则返回 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.IWeakEventListener -&gt; unit" Usage="listenerList.Remove listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener">要移除的项。</param>
        <summary>从 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中移除侦听器项的第一个匹配项。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A>更改列表内容之前应始终调用。 否则，列表可能正在传递事件，因此原始被锁定。 调用 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 会将输入更改 `list` 为克隆，以便您的 <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> 调用仍可以在克隆上工作。 如果 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 返回 `true` ，你可能需要更新对在代码的其他区域中维护的列表的所有私有引用。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveHandler(Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.RemoveHandler : Delegate -&gt; unit" Usage="listenerList.RemoveHandler handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler">要从 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中移除的处理程序。</param>
        <summary>从 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 目标中移除事件处理程序。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
