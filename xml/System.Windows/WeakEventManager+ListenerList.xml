<Type Name="WeakEventManager+ListenerList" FullName="System.Windows.WeakEventManager+ListenerList">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6376342e99d09f696d6ba051b0c71556a2e0dcf6" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="86986513" /></Metadata><TypeSignature Language="C#" Value="protected class WeakEventManager.ListenerList" />
  <TypeSignature Language="ILAsm" Value=".class nested protected auto ansi beforefieldinit WeakEventManager/ListenerList extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager.ListenerList" />
  <TypeSignature Language="VB.NET" Value="Protected Class WeakEventManager.ListenerList" />
  <TypeSignature Language="C++ CLI" Value="protected: ref class WeakEventManager::ListenerList" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="9d728-101">提供用于存储 <see cref="T:System.Windows.WeakEventManager" /> 的侦听器的内置集合列表。</span><span class="sxs-lookup"><span data-stu-id="9d728-101">Provides a built-in collection list for storing listeners for a <see cref="T:System.Windows.WeakEventManager" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d728-102">虽然此列表包含的成员类似于和定义的成员 <xref:System.Collections.IList> <xref:System.Collections.ICollection> ，并且提供了类似的功能，但此类不实现这些接口。</span><span class="sxs-lookup"><span data-stu-id="9d728-102">Although this list contains members that resemble those defined by <xref:System.Collections.IList> and <xref:System.Collections.ICollection>, and provide similar functionality, this class implements neither of those interfaces.</span></span>  
  
 <span data-ttu-id="9d728-103">大多数 <xref:System.Windows.WeakEventManager> 派生类不需要使用上的任何成员 <xref:System.Windows.WeakEventManager.ListenerList> 。</span><span class="sxs-lookup"><span data-stu-id="9d728-103">Most <xref:System.Windows.WeakEventManager> derived classes do not need to use any members on <xref:System.Windows.WeakEventManager.ListenerList>.</span></span> <span data-ttu-id="9d728-104"><xref:System.Windows.WeakEventManager> <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 默认情况下，这些方法和默认使用 <xref:System.Windows.WeakEventManager.ListenerList> 一个列表 `source` 。</span><span class="sxs-lookup"><span data-stu-id="9d728-104">The <xref:System.Windows.WeakEventManager> methods <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> use a default <xref:System.Windows.WeakEventManager.ListenerList> internally, one list for each `source`.</span></span>  
  
 <span data-ttu-id="9d728-105">仅 <xref:System.Windows.WeakEventManager.ListenerList> 当 <xref:System.Windows.WeakEventManager> 类维护相同事件源组合的多个列表时，才需要调用方法，每个列表都创建为考虑事件的不同条件。</span><span class="sxs-lookup"><span data-stu-id="9d728-105">You only need to call <xref:System.Windows.WeakEventManager.ListenerList> methods if your <xref:System.Windows.WeakEventManager> class maintains multiple lists for the same event-source combination, with each list created to account for different conditions of the event.</span></span> <span data-ttu-id="9d728-106">在这种情况下，你不会使用 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 和 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> ，而是实现 `AddListener` 或 `RemoveListener` 以仅在其中一个内部侦听器列表中操作侦听器，通常基于你添加到或的参数 `AddListener` `RemoveListener` 。</span><span class="sxs-lookup"><span data-stu-id="9d728-106">In this case, you would not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> and would instead implement `AddListener` or `RemoveListener` to act upon listeners in just one of the internal listener lists, typically based on a parameter that you add to `AddListener` or `RemoveListener`.</span></span> <span data-ttu-id="9d728-107">另外，接收原始事件的处理程序实现不能直接调用 <xref:System.Windows.WeakEventManager.DeliverEvent%2A> ; 您必须跟踪事件的细节，并使用将事件仅传递到适当的列表 <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9d728-107">Also, the handler implementation that receives the raw event cannot simply call <xref:System.Windows.WeakEventManager.DeliverEvent%2A>; you must instead keep track of the specifics of the event and deliver the event only to the appropriate list using <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 <span data-ttu-id="9d728-108">提供了的各种方法， <xref:System.Windows.WeakEventManager.ListenerList> 以便您可以使用您的内部列表，以便您可以在实际传递事件期间阻止修改列表。</span><span class="sxs-lookup"><span data-stu-id="9d728-108">The various methods of <xref:System.Windows.WeakEventManager.ListenerList> are provided so that you can work with your internal lists and so that you can prevent modification of the list during actual delivery of the event.</span></span>  
  
 <span data-ttu-id="9d728-109">使用此实现技术的示例类是 <xref:System.ComponentModel.PropertyChangedEventManager> ，它 `PropertyChanged` 根据所更改的属性维护单独的侦听器列表。</span><span class="sxs-lookup"><span data-stu-id="9d728-109">An example class that used this implementation technique is <xref:System.ComponentModel.PropertyChangedEventManager>, which maintains separate listener lists for `PropertyChanged` based on which property changed.</span></span>  
  
<a name="xamlTextUsage_ListenerList"></a>   
## <a name="xaml-text-usage"></a><span data-ttu-id="9d728-110">XAML 文本用法</span><span class="sxs-lookup"><span data-stu-id="9d728-110">XAML Text Usage</span></span>  
 <span data-ttu-id="9d728-111">不能在中使用此类 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="9d728-111">You cannot use this class in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.WeakEventManager" />
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9d728-112">初始化 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="9d728-112">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9d728-113">初始化 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="9d728-113">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListenerList (int capacity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 capacity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (capacity As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListenerList(int capacity);" />
      <MemberSignature Language="F#" Value="new System.Windows.WeakEventManager.ListenerList : int -&gt; System.Windows.WeakEventManager.ListenerList" Usage="new System.Windows.WeakEventManager.ListenerList capacity" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="capacity" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="capacity"><span data-ttu-id="9d728-114">应在初始列表中分配的项数。</span><span class="sxs-lookup"><span data-stu-id="9d728-114">The number of items that should be allocated in the initial list.</span></span></param>
        <summary><span data-ttu-id="9d728-115">使用指定的初始容量初始化 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="9d728-115">Initializes a new instance of the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> class with the specified initial capacity.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Add(System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.Add : System.Windows.IWeakEventListener -&gt; unit" Usage="listenerList.Add listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener"><span data-ttu-id="9d728-116">要添加到 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 的侦听器元素。</span><span class="sxs-lookup"><span data-stu-id="9d728-116">The listener element to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="9d728-117">将 <see cref="T:System.Windows.IWeakEventListener" /> 对象添加到 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中。</span><span class="sxs-lookup"><span data-stu-id="9d728-117">Adds a <see cref="T:System.Windows.IWeakEventListener" /> object to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d728-118">作为侦听器提供的对象应为 <xref:System.Windows.DependencyObject> 实现接口的， <xref:System.Windows.IWeakEventListener> 因此具有工作 <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 实现。</span><span class="sxs-lookup"><span data-stu-id="9d728-118">The object provided as listener should be a <xref:System.Windows.DependencyObject> that implements the <xref:System.Windows.IWeakEventListener> interface and therefore has a working <xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementation.</span></span>  
  
 <span data-ttu-id="9d728-119"><xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A>更改列表内容之前应始终调用。</span><span class="sxs-lookup"><span data-stu-id="9d728-119">You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents.</span></span> <span data-ttu-id="9d728-120">否则，列表可能正在传递事件，因此原始被锁定。</span><span class="sxs-lookup"><span data-stu-id="9d728-120">Otherwise, the list may be in process of delivering events and therefore the original is locked.</span></span> <span data-ttu-id="9d728-121">调用 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 会将输入更改 `list` 为克隆，以便您的 <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> 调用仍可以在克隆上工作。</span><span class="sxs-lookup"><span data-stu-id="9d728-121">Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Add%2A> call can still work on the clone.</span></span> <span data-ttu-id="9d728-122">如果 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 返回 `true` ，你可能需要更新对在代码的其他区域中维护的列表的所有私有引用。</span><span class="sxs-lookup"><span data-stu-id="9d728-122">If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="AddHandler">
      <MemberSignature Language="C#" Value="public void AddHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddHandler(Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.AddHandler : Delegate -&gt; unit" Usage="listenerList.AddHandler handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="9d728-123">将添加到 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="9d728-123">The event handler to add to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="9d728-124">将事件处理程序添加到 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中。</span><span class="sxs-lookup"><span data-stu-id="9d728-124">Adds an event handler to the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUse">
      <MemberSignature Language="C#" Value="public bool BeginUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool BeginUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginUse () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool BeginUse();" />
      <MemberSignature Language="F#" Value="member this.BeginUse : unit -&gt; bool" Usage="listenerList.BeginUse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9d728-125">声明列表正在使用中。</span><span class="sxs-lookup"><span data-stu-id="9d728-125">Declares the list to be in use.</span></span> <span data-ttu-id="9d728-126">这可以防止在列表项迭代过程中直接更改列表。</span><span class="sxs-lookup"><span data-stu-id="9d728-126">This prevents direct changes to the list during iterations of the list items.</span></span></summary>
        <returns><span data-ttu-id="9d728-127">如果列表已经声明为正在使用中，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9d728-127"><see langword="true" /> if the list was already declared to be in use; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d728-128">在 <xref:System.Windows.WeakEventManager> <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> 循环访问列表之前，实现应调用以将事件传递给侦听器，并应 <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> 在完成时调用。</span><span class="sxs-lookup"><span data-stu-id="9d728-128">A <xref:System.Windows.WeakEventManager> implementation should call <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> before iterating through the list to deliver an event to the listeners, and should call <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> when it is done.</span></span> <span data-ttu-id="9d728-129">这可防止其他调用方修改列表，同时用于事件传递的迭代正在进行。</span><span class="sxs-lookup"><span data-stu-id="9d728-129">This prevents another caller from modifying the list while the iteration for purposes of event delivery is in progress.</span></span> <span data-ttu-id="9d728-130">如果在此时间段内修改了列表，则会克隆列表。</span><span class="sxs-lookup"><span data-stu-id="9d728-130">If the list is modified during this time, then the list is cloned.</span></span> <span data-ttu-id="9d728-131">如果克隆了列表，则 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 返回 `true` ，这意味着在上一次传递中丢失最近的侦听器更改。</span><span class="sxs-lookup"><span data-stu-id="9d728-131">If the list is cloned, then <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, which means that you have missed a recent listener change in the last delivery.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Windows.WeakEventManager.ListenerList Clone ();" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList Clone() cil managed" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As WeakEventManager.ListenerList" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.Windows.WeakEventManager.ListenerList&#xA;override this.Clone : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="listenerList.Clone " FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public System.Windows.WeakEventManager.ListenerList Clone ();" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.WeakEventManager/ListenerList Clone() cil managed" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As WeakEventManager.ListenerList" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::WeakEventManager::ListenerList ^ Clone();" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="listenerList.Clone " FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9d728-132">创建此 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 的可修改复本。</span><span class="sxs-lookup"><span data-stu-id="9d728-132">Creates a modifiable clone of this <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <returns><span data-ttu-id="9d728-133">当前对象的可修改复本。</span><span class="sxs-lookup"><span data-stu-id="9d728-133">A modifiable clone of the current object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="protected void CopyTo (System.Windows.WeakEventManager.ListenerList newList);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CopyTo(class System.Windows.WeakEventManager/ListenerList newList) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CopyTo (newList As WeakEventManager.ListenerList)" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Windows.WeakEventManager.ListenerList -&gt; unit" Usage="listenerList.CopyTo newList" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newList" Type="System.Windows.WeakEventManager+ListenerList" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="newList"><span data-ttu-id="9d728-134">要复制到的对象。</span><span class="sxs-lookup"><span data-stu-id="9d728-134">The object to copy to.</span></span></param>
        <summary><span data-ttu-id="9d728-135">将当前的 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 复制到指定 <see cref="T:System.Windows.WeakEventManager.ListenerList" />。</span><span class="sxs-lookup"><span data-stu-id="9d728-135">Copies the current <see cref="T:System.Windows.WeakEventManager.ListenerList" /> to the specified <see cref="T:System.Windows.WeakEventManager.ListenerList" /></span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.WeakEventManager.ListenerList.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9d728-136">获取 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中包含的项的数量。</span><span class="sxs-lookup"><span data-stu-id="9d728-136">Gets the number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <value><span data-ttu-id="9d728-137"><see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中包含的项的数量。</span><span class="sxs-lookup"><span data-stu-id="9d728-137">The number of items contained in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="public virtual bool DeliverEvent (object sender, EventArgs args, Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DeliverEvent(object sender, class System.EventArgs args, class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeliverEvent (sender As Object, args As EventArgs, managerType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool DeliverEvent(System::Object ^ sender, EventArgs ^ args, Type ^ managerType);" />
      <MemberSignature Language="F#" Value="abstract member DeliverEvent : obj * EventArgs * Type -&gt; bool&#xA;override this.DeliverEvent : obj * EventArgs * Type -&gt; bool" Usage="listenerList.DeliverEvent (sender, args, managerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="args" Type="System.EventArgs" Index="1" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="managerType" Type="System.Type" Index="2" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="9d728-138">引发事件的对象。</span><span class="sxs-lookup"><span data-stu-id="9d728-138">The object that raised the event.</span></span></param>
        <param name="args"><span data-ttu-id="9d728-139">包含事件数据的对象。</span><span class="sxs-lookup"><span data-stu-id="9d728-139">An object that contains the event data.</span></span></param>
        <param name="managerType"><span data-ttu-id="9d728-140">调用此方法的 <see cref="T:System.Windows.WeakEventManager" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="9d728-140">The type of the <see cref="T:System.Windows.WeakEventManager" /> that calls this method.</span></span></param>
        <summary><span data-ttu-id="9d728-141">将正在托管的事件传送到 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中的每个侦听器。</span><span class="sxs-lookup"><span data-stu-id="9d728-141">Delivers the event being managed to each listener in the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <returns><span data-ttu-id="9d728-142">如果任何一个 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中侦听器引用的对象已被垃圾回收，则为 <see langword="true" />；否则，为<see langword="false" /> 。</span><span class="sxs-lookup"><span data-stu-id="9d728-142"><see langword="true" /> if any of the listeners in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> refer to an object that has been garbage collected; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.WeakEventManager.ListenerList Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.WeakEventManager/ListenerList Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Windows.WeakEventManager.ListenerList" Usage="System.Windows.WeakEventManager.ListenerList.Empty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::WeakEventManager::ListenerList ^ Empty { System::Windows::WeakEventManager::ListenerList ^ get(); };" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9d728-143">获取表示用于对比的空列表的值。</span><span class="sxs-lookup"><span data-stu-id="9d728-143">Gets a value that represents an empty list for purposes of comparisons.</span></span></summary>
        <value><span data-ttu-id="9d728-144">空列表表示。</span><span class="sxs-lookup"><span data-stu-id="9d728-144">The empty list representation.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUse">
      <MemberSignature Language="C#" Value="public void EndUse ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUse() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUse ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUse();" />
      <MemberSignature Language="F#" Value="member this.EndUse : unit -&gt; unit" Usage="listenerList.EndUse " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9d728-145">解除由 <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" /> 启动的锁定状态。</span><span class="sxs-lookup"><span data-stu-id="9d728-145">Unlocks the locked state initiated by <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Windows.WeakEventManager.ListenerList.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9d728-146">获取声明此 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 是否为空的值。</span><span class="sxs-lookup"><span data-stu-id="9d728-146">Gets a value that declares whether this <see cref="T:System.Windows.WeakEventManager.ListenerList" /> is empty.</span></span></summary>
        <value><span data-ttu-id="9d728-147">如果列表为空，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9d728-147"><see langword="true" /> if the list is empty; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d728-148">此方法等效于检查是否 <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> 为零，且不检查列表中是否有任何引用现已过时。</span><span class="sxs-lookup"><span data-stu-id="9d728-148">This method is equivalent to checking whether the <xref:System.Windows.WeakEventManager.ListenerList.Count%2A> is zero, and does not check whether any of the references in the list are now stale.</span></span> <span data-ttu-id="9d728-149">如果要确保所有引用仍有效，请在 <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> 检查列表的空状态之前调用。</span><span class="sxs-lookup"><span data-stu-id="9d728-149">If you want to assure that all references are still valid, call <xref:System.Windows.WeakEventManager.ListenerList.Purge%2A> just prior to checking the empty status of the list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.IWeakEventListener this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IWeakEventListener Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(index As Integer) As IWeakEventListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IWeakEventListener ^ default[int] { System::Windows::IWeakEventListener ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.IWeakEventListener" Usage="System.Windows.WeakEventManager.ListenerList.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IWeakEventListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="9d728-150">列表中侦听器的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="9d728-150">The zero-based index of the listener in the list.</span></span></param>
        <summary><span data-ttu-id="9d728-151">获取或设置 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中的特定侦听器项。</span><span class="sxs-lookup"><span data-stu-id="9d728-151">Gets or sets a specific listener item in the <see cref="T:System.Windows.WeakEventManager.ListenerList" /> .</span></span></summary>
        <value><span data-ttu-id="9d728-152">该索引处的项，如果该索引处没有项，则为 null 引用。</span><span class="sxs-lookup"><span data-stu-id="9d728-152">The item at that index, or a null reference if no item was at that index.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForWriting">
      <MemberSignature Language="C#" Value="public static bool PrepareForWriting (ref System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool PrepareForWriting(class System.Windows.WeakEventManager/ListenerList&amp; list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PrepareForWriting (ByRef list As WeakEventManager.ListenerList) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool PrepareForWriting(System::Windows::WeakEventManager::ListenerList ^ % list);" />
      <MemberSignature Language="F#" Value="static member PrepareForWriting : ListenerList -&gt; bool" Usage="System.Windows.WeakEventManager.ListenerList.PrepareForWriting list" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="list"><span data-ttu-id="9d728-153">要检查其使用状态和可能副本的列表。</span><span class="sxs-lookup"><span data-stu-id="9d728-153">The list to check for use state and potentially copy.</span></span></param>
        <summary><span data-ttu-id="9d728-154">检查是否正在使用提供的列表，如果正在使用，则将列表引用参数设置为该列表的副本，而不是原稿列表的副本。</span><span class="sxs-lookup"><span data-stu-id="9d728-154">Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.</span></span></summary>
        <returns><span data-ttu-id="9d728-155">如果调用时正在使用提供的列表，并因此 <paramref name="list" /> 参数引用被重置为副本，则为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="9d728-155"><see langword="true" /> if the provided list was in use at the time of call and therefore the <paramref name="list" /> parameter reference was reset to be a copy.</span></span> <span data-ttu-id="9d728-156">如果未使用提供的列表，在此情况下 <paramref name="list" /> 参数引用保持不变，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9d728-156"><see langword="false" /> if the provided list was not in use, in which case the <paramref name="list" /> parameter reference remains unaltered.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d728-157">如果正在使用给定的列表 (这意味着当前正在传递事件) ，则调用此方法会将输入替换 `list` 为克隆。</span><span class="sxs-lookup"><span data-stu-id="9d728-157">If the given list is in use (which means an event is currently being delivered), calling this method will replace the input `list` with a clone.</span></span>  <span data-ttu-id="9d728-158">现有用户会完成将事件传递到原始列表的操作，而不会干扰新列表的更改。</span><span class="sxs-lookup"><span data-stu-id="9d728-158">The existing users will finish delivering the event to the original list, without interference from changes to the new list.</span></span>  
  
 <span data-ttu-id="9d728-159">如果该方法返回 `true` ，则调用方可能需要在其自己的数据结构中插入新列表，因为这指示提供的列表已不再是最新的。</span><span class="sxs-lookup"><span data-stu-id="9d728-159">If the method returns `true`, callers may want to insert the new list in their own data structures, since this indicates the possibility that the provided list is no longer current.</span></span>  
  
 <span data-ttu-id="9d728-160">此方法 <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> 在内部调用，然后立即调用 <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9d728-160">This method calls <xref:System.Windows.WeakEventManager.ListenerList.BeginUse%2A> internally and then immediately calls <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span></span> <span data-ttu-id="9d728-161">因此 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> ，调用本身并不会对列表引入锁。</span><span class="sxs-lookup"><span data-stu-id="9d728-161">Therefore calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> does not itself introduce a lock on the list.</span></span> <span data-ttu-id="9d728-162">在调用后，甚至克隆副本都作为辅助操作完成 <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9d728-162">Even the clone copy is done as a secondary operation after calling <xref:System.Windows.WeakEventManager.ListenerList.EndUse%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.EndUse" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public bool Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Purge" />
      <MemberSignature Language="VB.NET" Value="Public Function Purge () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Purge();" />
      <MemberSignature Language="F#" Value="member this.Purge : unit -&gt; bool" Usage="listenerList.Purge " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9d728-163">从基础引用目标为 null 引用的列表中移除所有项。</span><span class="sxs-lookup"><span data-stu-id="9d728-163">Removes all entries from the list where the underlying reference target is a null reference.</span></span></summary>
        <returns><span data-ttu-id="9d728-164">如果清除了所有项，则返回 <see langword="true" />；否则返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9d728-164">Returns <see langword="true" /> if any entries were purged; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.IWeakEventListener -&gt; unit" Usage="listenerList.Remove listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="listener"><span data-ttu-id="9d728-165">要移除的项。</span><span class="sxs-lookup"><span data-stu-id="9d728-165">The item to remove.</span></span></param>
        <summary><span data-ttu-id="9d728-166">从 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中移除侦听器项的第一个匹配项。</span><span class="sxs-lookup"><span data-stu-id="9d728-166">Removes the first occurrence of a listener item from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9d728-167"><xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A>更改列表内容之前应始终调用。</span><span class="sxs-lookup"><span data-stu-id="9d728-167">You should always call <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> before changing the list contents.</span></span> <span data-ttu-id="9d728-168">否则，列表可能正在传递事件，因此原始被锁定。</span><span class="sxs-lookup"><span data-stu-id="9d728-168">Otherwise, the list may be in process of delivering events and therefore the original is locked.</span></span> <span data-ttu-id="9d728-169">调用 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 会将输入更改 `list` 为克隆，以便您的 <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> 调用仍可以在克隆上工作。</span><span class="sxs-lookup"><span data-stu-id="9d728-169">Calling <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> changes the input `list` to be a clone so that your <xref:System.Windows.WeakEventManager.ListenerList.Remove%2A> call can still work on the clone.</span></span> <span data-ttu-id="9d728-170">如果 <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> 返回 `true` ，你可能需要更新对在代码的其他区域中维护的列表的所有私有引用。</span><span class="sxs-lookup"><span data-stu-id="9d728-170">If <xref:System.Windows.WeakEventManager.ListenerList.PrepareForWriting%2A> returns `true`, you might need to update any private references to the list that you maintain in other areas of your code.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)" />
        <altmember cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />
      </Docs>
    </Member>
    <Member MemberName="RemoveHandler">
      <MemberSignature Language="C#" Value="public void RemoveHandler (Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveHandler(class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveHandler (handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveHandler(Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.RemoveHandler : Delegate -&gt; unit" Usage="listenerList.RemoveHandler handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Delegate" Index="0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="9d728-171">要从 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中移除的处理程序。</span><span class="sxs-lookup"><span data-stu-id="9d728-171">The event handler to remove from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="9d728-172">从 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 目标中移除事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="9d728-172">Removes an event handler from the <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
