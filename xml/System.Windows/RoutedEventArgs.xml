<Type Name="RoutedEventArgs" FullName="System.Windows.RoutedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6d257967ecf67e3112aeb70a1c39a4c491b34c8e" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102068603" /></Metadata><TypeSignature Language="C#" Value="public class RoutedEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit RoutedEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.RoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class RoutedEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type RoutedEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>包含与路由事件相关联的状态信息和事件数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.RoutedEventArgs>可以将不同的与单个一起使用 <xref:System.Windows.RoutedEventArgs.RoutedEvent%2A> 。 此类负责将的事件数据打包 <xref:System.Windows.RoutedEventArgs.RoutedEvent%2A> ，提供额外的事件状态信息，并由事件系统用来调用与路由事件关联的处理程序。  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.RoutedEventArgs.RoutedEvent" />
    <altmember cref="T:System.Windows.EventManager" />
    <altmember cref="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.RoutedEventArgs" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedEventArgs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.RoutedEventArgs.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedEventArgs();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.RoutedEventArgs" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此无参数构造函数时，新实例的所有公共属性都 <xref:System.Windows.RoutedEventArgs> 采用以下默认值：  
  
-   <xref:System.Windows.RoutedEventArgs.RoutedEvent%2A> 默认为 `null`。  
  
-   <xref:System.Windows.RoutedEventArgs.Handled%2A> 默认为 `false`  
  
-   <xref:System.Windows.RoutedEventArgs.Source%2A> 默认为 `null`。  
  
-   <xref:System.Windows.RoutedEventArgs.OriginalSource%2A> 默认为 `null`。  
  
 和的 Null <xref:System.Windows.RoutedEventArgs.Source%2A> 值 <xref:System.Windows.RoutedEventArgs.OriginalSource%2A> 仅意味着 <xref:System.Windows.RoutedEventArgs> 数据不会尝试指定源。 当在对的调用中使用此实例时，将根据 <xref:System.Windows.UIElement.RaiseEvent%2A>  <xref:System.Windows.RoutedEventArgs.Source%2A> <xref:System.Windows.RoutedEventArgs.OriginalSource%2A> 引发事件的元素填充和值，并通过路由将其传递到侦听器。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.RoutedEventArgs.RoutedEvent" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedEventArgs (System.Windows.RoutedEvent routedEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.RoutedEvent routedEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.RoutedEventArgs.#ctor(System.Windows.RoutedEvent)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (routedEvent As RoutedEvent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedEventArgs(System::Windows::RoutedEvent ^ routedEvent);" />
      <MemberSignature Language="F#" Value="new System.Windows.RoutedEventArgs : System.Windows.RoutedEvent -&gt; System.Windows.RoutedEventArgs" Usage="new System.Windows.RoutedEventArgs routedEvent" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><see cref="T:System.Windows.RoutedEventArgs" /> 类的此实例的路由事件标识符。</param>
        <summary>使用提供的路由事件标识符初始化 <see cref="T:System.Windows.RoutedEventArgs" /> 类的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此重载构造函数时，新实例的未指定属性 <xref:System.Windows.RoutedEventArgs> 将假定以下默认值：  
  
-   <xref:System.Windows.RoutedEventArgs.Handled%2A> 默认为 `false`  
  
-   <xref:System.Windows.RoutedEventArgs.Source%2A> 默认为 `null`。  
  
-   <xref:System.Windows.RoutedEventArgs.OriginalSource%2A> 默认为 `null`。  
  
 和的 Null <xref:System.Windows.RoutedEventArgs.Source%2A> 值 <xref:System.Windows.RoutedEventArgs.OriginalSource%2A> 仅表示这 <xref:System.Windows.RoutedEventArgs> 不会尝试指定源。 当在对的调用中使用此实例时，将根据 <xref:System.Windows.UIElement.RaiseEvent%2A>  <xref:System.Windows.RoutedEventArgs.Source%2A> <xref:System.Windows.RoutedEventArgs.OriginalSource%2A> 引发事件的元素填充和值，并通过路由将其传递到侦听器。  
  
   
  
## Examples  
 下面的示例构造一个新 <xref:System.Windows.RoutedEventArgs> 的，以便在调用中使用 <xref:System.Windows.UIElement.RaiseEvent%2A> 。  
  
 [!code-csharp[RoutedEventCustom#RaiseEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/RoutedEventCustom/CSharp/SDKSampleLibrary/class1.cs#raiseevent)]
 [!code-vb[RoutedEventCustom#RaiseEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RoutedEventCustom/VB/SDKSampleLibrary/Class1.vb#raiseevent)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)" />
        <altmember cref="P:System.Windows.RoutedEventArgs.RoutedEvent" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RoutedEventArgs (System.Windows.RoutedEvent routedEvent, object source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.RoutedEvent routedEvent, object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.RoutedEventArgs.#ctor(System.Windows.RoutedEvent,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (routedEvent As RoutedEvent, source As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RoutedEventArgs(System::Windows::RoutedEvent ^ routedEvent, System::Object ^ source);" />
      <MemberSignature Language="F#" Value="new System.Windows.RoutedEventArgs : System.Windows.RoutedEvent * obj -&gt; System.Windows.RoutedEventArgs" Usage="new System.Windows.RoutedEventArgs (routedEvent, source)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><see cref="T:System.Windows.RoutedEventArgs" /> 类的此实例的路由事件标识符。</param>
        <param name="source">将在处理事件时报告的备用源。 这将预先填充 <see cref="P:System.Windows.RoutedEventArgs.Source" /> 属性。</param>
        <summary>使用提供的路由事件标识符初始化 <see cref="T:System.Windows.RoutedEventArgs" /> 类的一个新实例，同时提供为事件另外声明一个源的机会。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此重载构造函数时，新实例的未指定属性 <xref:System.Windows.RoutedEventArgs> 将假定以下默认值：  
  
-   <xref:System.Windows.RoutedEventArgs.Handled%2A> 默认为 `false`  
  
-   <xref:System.Windows.RoutedEventArgs.OriginalSource%2A> 默认为 `null`。  
  
 的 Null 值 <xref:System.Windows.RoutedEventArgs.OriginalSource%2A> 基于引发事件并通过路由传递的元素进行填充，但会在 `null` 调用之前被读取。  
  
 传递到虚方法（如）时使用此签名 <xref:System.Windows.RoutedEventArgs> <xref:System.Windows.Controls.Primitives.TextBoxBase.OnSelectionChanged%2A> ，其中使用参数在内部调用 <xref:System.Windows.UIElement.RaiseEvent%2A> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.RoutedEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Handled : bool with get, set" Usage="System.Windows.RoutedEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[get: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[set: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示针对路由事件（在其经过路由时）的事件处理的当前状态。</summary>
        <value>设置的时候，如果事件将标记为已处理，则设置为 <see langword="true" /> ；否则为 <see langword="false" />。 如果读取此值， <see langword="true" /> 指示沿路由的一个类处理程序或某个实例处理程序已将此事件标记为已处理。 <see langword="false" />.指示没有这类处理程序将该事件标记为已处理。  
  
默认值是 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将事件标记为已处理会将路由事件的可见性限制为沿着事件路由的侦听器。 该事件仍会传递路由的其余部分，但只有在方法调用中专门添加的处理程序才会 `HandledEventsToo` `true` <xref:System.Windows.UIElement.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 在响应中调用。 实例侦听器上的默认处理程序 (例如，在 Extensible Application Markup Language (XAML) ) 中表示的处理程序将不会被调用。 处理标记为已处理的事件并非常见方案。  
  
 如果你是控件作者定义你自己的事件，那么，在类级别对事件处理做出的决策将影响你的控件的用户以及任何派生控件的用户，以及可能包含在你的控件中或包含控件的其他元素。 有关详细信息，请参阅[将路由事件标记为“已处理”和类处理](/dotnet/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling)。  
  
 在极少数情况下，适合处理标记为的事件  <xref:System.Windows.RoutedEventArgs.Handled%2A> `true` ，并通过将更改为来修改事件 <xref:System.Windows.RoutedEventArgs.Handled%2A> 参数 `false` 。 在控件输入事件的某些区域中，这可能是必需的，例如，对的键处理方式为， <xref:System.Windows.UIElement.KeyDown> <xref:System.Windows.UIElement.TextInput> 其中，低级别和高级别的输入事件争用处理，每个都尝试使用不同的路由策略。  
  
   
  
## Examples  
 下面的示例实现一个将事件标记为已处理的事件处理程序。  
  
 [!code-csharp[ClassHandling#OnStarClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#onstarclasshandler)]
 [!code-vb[ClassHandling#OnStarClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#onstarclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected virtual void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.RoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InvokeEventHandler (genericHandler As Delegate, genericTarget As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ genericTarget);" />
      <MemberSignature Language="F#" Value="abstract member InvokeEventHandler : Delegate * obj -&gt; unit&#xA;override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="routedEventArgs.InvokeEventHandler (genericHandler, genericTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">要调用的泛型处理程序/委托实现。</param>
        <param name="genericTarget">应在其上调用所提供的处理程序的目标。</param>
        <summary>当在派生类中重写时，提供特定于类型的调用事件处理程序的方式，该方式与基实现相比可提高效率。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此基实现合并了反射，以确定处理程序不是按原义处理的任何情况的正确处理程序 <xref:System.Windows.RoutedEventHandler> ，并且此反射步骤会对性能产生一些后果。 通过不依赖于反射，可以更高效地进行调用。 这是激发此方法可用于任何路由事件参数类的方案，可选择重写此方法。 实现不应调用此方法的基，因为你的实现应已负责调用类型安全处理程序。  
  
   
  
## Examples  
 下面的伪代码演示可用于实现的基本模式。 此处， `MyRoutedEventHandler` 是的子类 <xref:System.Windows.RoutedEventHandler> 。  
  
 [!code-csharp[CorePseudocode#RoutedEventArgs](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#routedeventargs)]
 [!code-vb[CorePseudocode#RoutedEventArgs](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#routedeventargs)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>此方法旨在由派生的事件数据类重写，以提供更高效的委托调用。 实现应将提供的强制转换 <paramref name="genericHandler" /> 为特定于类型的委托，然后调用该处理程序。  
  
默认实现将尝试调用所提供的处理程序，并尝试将其强制转换为 <see cref="T:System.Windows.RoutedEventHandler" /> 。 如果 <paramref name="genericHandler" /> 或 <paramref name="genericTarget" /> 作为提供，则 <see langword="null" /> 将引发异常。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnSetSource">
      <MemberSignature Language="C#" Value="protected virtual void OnSetSource (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSetSource(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.RoutedEventArgs.OnSetSource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSetSource (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSetSource(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member OnSetSource : obj -&gt; unit&#xA;override this.OnSetSource : obj -&gt; unit" Usage="routedEventArgs.OnSetSource source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><see cref="P:System.Windows.RoutedEventArgs.Source" /> 所设置为的新值。</param>
        <summary>在派生类中重写时，每当实例的 <see cref="P:System.Windows.RoutedEventArgs.Source" /> 属性的值发生更改，则提供一个通知回调入口点。</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>以编程方式更改事件的报告源可能需要更新事件内特定于类型的数据。 出于此原因，此 <see cref="M:System.Windows.RoutedEventArgs.OnSetSource(System.Object)" /> 方法是受保护的虚拟方法，旨在由的子类重写 <see cref="T:System.Windows.RoutedEventArgs" /> 。  
  
此方法没有默认实现。</para></block>
        <altmember cref="P:System.Windows.RoutedEventArgs.Source" />
      </Docs>
    </Member>
    <Member MemberName="OriginalSource">
      <MemberSignature Language="C#" Value="public object OriginalSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object OriginalSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.RoutedEventArgs.OriginalSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OriginalSource As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ OriginalSource { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OriginalSource : obj" Usage="System.Windows.RoutedEventArgs.OriginalSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在父类进行任何可能的 <see cref="P:System.Windows.RoutedEventArgs.Source" /> 调整之前，获取由纯命中测试确定的原始报告源。</summary>
        <value>在类处理可能对展平复合元素树进行任何 <see cref="P:System.Windows.RoutedEventArgs.Source" /> 调整之前的原始报告源。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性将在调用类事件处理程序或任何实例处理程序之前获取其值一次，在此之后永远不会进行调整。 原始源信息对类处理程序或类实现是只读的，与事件数据中报告的信息相同。  
  
 源可以调整的常见情况是控件的内容模型中的内容元素 (列表项的内容，例如，将列表项元素报告为， <xref:System.Windows.RoutedEventArgs.Source%2A> 列表项中的实际元素将为 <xref:System.Windows.RoutedEventArgs.OriginalSource%2A> 。  
  
 各种元素和内容模型的源调整因类而异。 每个调整事件源的类都尝试预见哪个源最适用于大多数输入方案和类所需的方案，然后将该源设置为 <xref:System.Windows.RoutedEventArgs.Source%2A> 。 如果此源不是与事件处理相关的源，请 <xref:System.Windows.RoutedEventArgs.OriginalSource%2A> 改为查看它是否报告更适合的其他源。 有关输入事件的更多详细信息，请参阅 [输入概述](/dotnet/framework/wpf/advanced/input-overview)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.RoutedEventArgs.Source" />
      </Docs>
    </Member>
    <Member MemberName="RoutedEvent">
      <MemberSignature Language="C#" Value="public System.Windows.RoutedEvent RoutedEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.RoutedEvent RoutedEvent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.RoutedEventArgs.RoutedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Property RoutedEvent As RoutedEvent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::RoutedEvent ^ RoutedEvent { System::Windows::RoutedEvent ^ get(); void set(System::Windows::RoutedEvent ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RoutedEvent : System.Windows.RoutedEvent with get, set" Usage="System.Windows.RoutedEventArgs.RoutedEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与此 <see cref="T:System.Windows.RoutedEventArgs" /> 实例关联的 <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" />。</summary>
        <value>已调用的事件的标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.RoutedEventArgs>如果通过处理程序) 获取了参数，则不能在已 (路由的上设置此值。 如果尝试这样做，将生成异常。 只能在尚未用于生成事件调用的实例上设置此方法。  
  
 的值 <xref:System.Windows.RoutedEventArgs.RoutedEvent%2A> 不能随时处于 `null` 。  
  
   
  
## Examples  
 下面的示例使用初始构造函数创建新的路由事件数据，然后将该 <xref:System.Windows.RoutedEventArgs.RoutedEvent%2A> 属性设置为后续操作。 您必须 <xref:System.Windows.RoutedEventArgs.RoutedEvent%2A> 先设置，才能引发路由事件。  
  
 [!code-csharp[ColorPicker_v2#RoutedEventArgsRoutedEvent](~/samples/snippets/csharp/VS_Snippets_Wpf/ColorPicker_v2/CSharp/ColorPicker.cs#routedeventargsroutedevent)]
 [!code-vb[ColorPicker_v2#RoutedEventArgsRoutedEvent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ColorPicker_v2/visualbasic/colorpicker.vb#routedeventargsroutedevent)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在路由事件时试图更改 <see cref="P:System.Windows.RoutedEventArgs.RoutedEvent" /> 值。</exception>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public object Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Source" />
      <MemberSignature Language="DocId" Value="P:System.Windows.RoutedEventArgs.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Source { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Source : obj with get, set" Usage="System.Windows.RoutedEventArgs.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置对引发事件的对象的引用。</summary>
        <value>引发事件的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于实际传递到引发它的元素之外的路由的任何冒泡路由事件，以及对于未向下传递到引发它的元素的任何隧道路由事件，的值 <xref:System.Windows.RoutedEventArgs.Source%2A> 将不同于 `sender` 事件参数类的参数值。 事件中涉及的两个元素中有哪些是最重要的 (<xref:System.Windows.RoutedEventArgs.Source%2A> 、引发它的元素或当前正在处理它的元素 `sender`) 依赖于处理程序所寻址的应用程序逻辑。  
  
 通常仅当重写或实现其他调整事件源的 Api （例如，在处理事件的类时），才能设置此属性。 不建议通过实例处理程序重置明显的事件源，特别是当处理程序未将事件标记为已处理时。  
  
 如果重置 <xref:System.Windows.RoutedEventArgs.Source%2A> 以报告不同的事件源，则 <xref:System.Windows.RoutedEventArgs.OriginalSource%2A> 会继续将源报告为初始调用引发的第一个 <xref:System.Windows.UIElement.RaiseEvent%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.RoutedEventArgs.OriginalSource" />
      </Docs>
    </Member>
  </Members>
</Type>
