<Type Name="VisualState" FullName="System.Windows.VisualState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="593d7e0e8f96a024e0bd80dce0102b9ea2311a10" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89829963" /></Metadata><TypeSignature Language="C#" Value="public class VisualState : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualState extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualState" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualState&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualState : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type VisualState = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Windows.Markup.ContentProperty("Storyboard")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.ContentProperty("Storyboard")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Windows.Markup.RuntimeNameProperty("Name")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.RuntimeNameProperty("Name")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示特定状态下控件的可视外观。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualState>指定控件在处于某种状态时的外观。 例如，在 <xref:System.Windows.Controls.Button> 按下时，其边框可能不同于正常颜色。  <xref:System.Windows.VisualState>类具有一个 <xref:System.Windows.VisualState.Storyboard%2A> 属性，该属性更改控件的外观。 当控件输入属性指定的状态时 <xref:System.Windows.VisualState.Name%2A?displayProperty=nameWithType> ，将 <xref:System.Windows.VisualState.Storyboard%2A> 开始。 当控件退出状态时，将 <xref:System.Windows.VisualState.Storyboard%2A> 停止。  
  
 <xref:System.Windows.VisualStateGroup.States%2A?displayProperty=nameWithType>属性包含 <xref:System.Windows.VisualState> 对象。 <xref:System.Windows.VisualStateGroup> 对象将添加到在 <xref:System.Windows.VisualStateManager.VisualStateGroups%2A?displayProperty=nameWithType> 上定义的附加属性中 <xref:System.Windows.FrameworkElement> 。 您可以将 <xref:System.Windows.VisualState> 对象添加到任何对象 <xref:System.Windows.FrameworkElement> ，但这些对象通常用于 <xref:System.Windows.Controls.ControlTemplate> 的中 <xref:System.Windows.Controls.Control> 。 有关如何为 <xref:System.Windows.Controls.ControlTemplate> 现有控件创建和对象的信息 <xref:System.Windows.VisualState> ，请参阅 [通过创建 System.windows.controls.controltemplate> 自定义现有控件的外观](/dotnet/framework/wpf/controls/customizing-the-appearance-of-an-existing-control)。 有关使用之外的对象的示例 <xref:System.Windows.VisualState> <xref:System.Windows.Controls.ControlTemplate> ，请参阅 <xref:System.Windows.VisualStateManager> 类。  
  
   
  
## Examples  
 下面的示例在名为的中创建一个， <xref:System.Windows.VisualStateGroup> <xref:System.Windows.Controls.ControlTemplate> <xref:System.Windows.Controls.Button> `CommonStates` 并 <xref:System.Windows.VisualState> 为状态、 `Normal` 、和添加对象 `Pressed` `MouseOver` 。 <xref:System.Windows.Controls.Button>还定义了一个名 `Disabled` 为的状态，在中 `CommonStates` <xref:System.Windows.VisualStateGroup> ，该示例为简洁起见省略了该状态。 有关完整示例，请参阅 [通过创建 System.windows.controls.controltemplate> 自定义现有控件的外观](/dotnet/framework/wpf/controls/customizing-the-appearance-of-an-existing-control)。  
  
 [!code-xaml[VSMButtonTemplate#10](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#10)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualState.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualState();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.VisualState" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualState.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.VisualState.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.VisualState" /> 的名称。</summary>
        <value><see cref="T:System.Windows.VisualState" /> 的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通过将的传递给，指定元素应输入的可视状态 <xref:System.Windows.VisualState.Name%2A> <xref:System.Windows.VisualState> <xref:System.Windows.VisualStateManager> 。  
  
 当 <xref:System.Windows.Controls.Control> <xref:System.Windows.VisualStateManager> 在中使用时 <xref:System.Windows.Controls.ControlTemplate> ，控件作者应 <xref:System.Windows.VisualState> <xref:System.Windows.Controls.ControlTemplate> 通过将置于 <xref:System.Windows.TemplateVisualStateAttribute> 其类签名上来指定控件希望在其中查找的对象。 <xref:System.Windows.Controls.ControlTemplate> 作者定义新 <xref:System.Windows.VisualState> 的对象，并将 <xref:System.Windows.VisualState.Name%2A> 属性设置为属性指定的值 <xref:System.Windows.TemplateVisualStateAttribute.Name%2A?displayProperty=nameWithType> 。  
  
 若要查找附带的控件的可视状态的名称 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] ，请参阅 [控件样式和模板](/dotnet/framework/wpf/controls/control-styles-and-templates)。 有关如何为 <xref:System.Windows.Controls.ControlTemplate> 现有控件创建和对象的信息 <xref:System.Windows.VisualState> ，请参阅 [通过创建 System.windows.controls.controltemplate> 自定义现有控件的外观](/dotnet/framework/wpf/controls/customizing-the-appearance-of-an-existing-control)。  
  
   
  
## Examples  
 下面的示例在名为的中创建一个， <xref:System.Windows.VisualStateGroup> <xref:System.Windows.Controls.ControlTemplate> <xref:System.Windows.Controls.Button> `CommonStates` 并 <xref:System.Windows.VisualState> 为状态、 `Normal` 、和添加对象 `Pressed` `MouseOver` 。 <xref:System.Windows.Controls.Button>还定义了一个名 `Disabled` 为的状态，在中 `CommonStates` <xref:System.Windows.VisualStateGroup> ，该示例为简洁起见省略了该状态。 有关完整示例，请参阅 [通过创建 System.windows.controls.controltemplate> 自定义现有控件的外观](/dotnet/framework/wpf/controls/customizing-the-appearance-of-an-existing-control)。  
  
 [!code-xaml[VSMButtonTemplate#10](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/buttonstages.xaml#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Storyboard">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Animation.Storyboard Storyboard { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Animation.Storyboard Storyboard" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualState.Storyboard" />
      <MemberSignature Language="VB.NET" Value="Public Property Storyboard As Storyboard" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::Animation::Storyboard ^ Storyboard { System::Windows::Media::Animation::Storyboard ^ get(); void set(System::Windows::Media::Animation::Storyboard ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Storyboard : System.Windows.Media.Animation.Storyboard with get, set" Usage="System.Windows.VisualState.Storyboard" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Animation.Storyboard</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个 <see cref="T:System.Windows.Media.Animation.Storyboard" />，它定义控件在 <see cref="T:System.Windows.VisualState" /> 所表示的状态下的外观。</summary>
        <value>一个演示图板，它定义控件在 <see cref="T:System.Windows.VisualState" /> 所表示的状态下的外观。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当控件输入属性指定的状态时 <xref:System.Windows.VisualState.Name%2A?displayProperty=nameWithType> ，将 <xref:System.Windows.VisualState.Storyboard%2A> 开始。 当控件退出状态时，将 <xref:System.Windows.VisualState.Storyboard%2A> 停止。  
  
   
  
## Examples  
 下面的示例为包含一个的创建了一个简单 <xref:System.Windows.Controls.ControlTemplate> 的 <xref:System.Windows.Controls.Button> <xref:System.Windows.Controls.Grid> 。  <xref:System.Windows.VisualState>如果用户将鼠标放在上，则调用的 `MouseOver` 演示图板会将的颜色 <xref:System.Windows.Controls.Grid> 从绿色更改为红色 <xref:System.Windows.Controls.Button> 。  <xref:System.Windows.VisualState>包括调用的， `Normal` 以便在用户将鼠标移出按钮时，将 <xref:System.Windows.Controls.Grid> 返回到绿色。  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
