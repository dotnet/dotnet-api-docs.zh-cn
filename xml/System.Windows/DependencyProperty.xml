<Type Name="DependencyProperty" FullName="System.Windows.DependencyProperty">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fbda2d40cfd8d9e44808ac649ccfea6f525f811e" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102088831" /></Metadata><TypeSignature Language="C#" Value="public sealed class DependencyProperty" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DependencyProperty extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyProperty" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DependencyProperty" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyProperty sealed" />
  <TypeSignature Language="F#" Value="type DependencyProperty = class" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Windows.Markup.DependencyPropertyConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Windows.Markup.ValueSerializer(typeof(System.Windows.DependencyPropertyValueSerializer))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.ValueSerializer(typeof(System.Windows.DependencyPropertyValueSerializer))&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="bbe41-101">表示可通过诸如样式、数据绑定、动画和继承等方法设置的属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-101">Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-102"><xref:System.Windows.DependencyProperty>支持 Windows Presentation Foundation (WPF) 的以下功能：</span><span class="sxs-lookup"><span data-stu-id="bbe41-102">A <xref:System.Windows.DependencyProperty> supports the following capabilities in Windows Presentation Foundation (WPF):</span></span>  
  
-   <span data-ttu-id="bbe41-103">可以在样式中设置属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-103">The property can be set in a style.</span></span> <span data-ttu-id="bbe41-104">有关详细信息，请参阅 [样式设置和模板化](/dotnet/framework/wpf/controls/styling-and-templating)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-104">For more information, see [Styling and Templating](/dotnet/framework/wpf/controls/styling-and-templating).</span></span>  
  
-   <span data-ttu-id="bbe41-105">可以通过数据绑定设置属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-105">The property can be set through data binding.</span></span> <span data-ttu-id="bbe41-106">有关数据绑定依赖项属性的详细信息，请参阅 [如何：绑定两个控件的属性](/dotnet/framework/wpf/data/how-to-bind-the-properties-of-two-controls)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-106">For more information about data binding dependency properties, see [How to: Bind the Properties of Two Controls](/dotnet/framework/wpf/data/how-to-bind-the-properties-of-two-controls).</span></span>  
  
-   <span data-ttu-id="bbe41-107">可以通过动态资源引用来设置属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-107">The property can be set with a dynamic resource reference.</span></span> <span data-ttu-id="bbe41-108">有关详细信息，请参阅 [XAML 资源](/dotnet/framework/wpf/advanced/xaml-resources)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-108">For more information, see [XAML Resources](/dotnet/framework/wpf/advanced/xaml-resources).</span></span>  
  
-   <span data-ttu-id="bbe41-109">属性可以从元素树中的父元素自动继承其值。</span><span class="sxs-lookup"><span data-stu-id="bbe41-109">The property can inherit its value automatically from a parent element in the element tree.</span></span> <span data-ttu-id="bbe41-110">有关详细信息，请参阅[属性值继承](/dotnet/framework/wpf/advanced/property-value-inheritance)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-110">For more information, see [Property Value Inheritance](/dotnet/framework/wpf/advanced/property-value-inheritance).</span></span>  
  
-   <span data-ttu-id="bbe41-111">可以对属性进行动画处理。</span><span class="sxs-lookup"><span data-stu-id="bbe41-111">The property can be animated.</span></span> <span data-ttu-id="bbe41-112">有关详细信息，请参阅 [动画概述](/dotnet/framework/wpf/graphics-multimedia/animation-overview)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-112">For more information, see [Animation Overview](/dotnet/framework/wpf/graphics-multimedia/animation-overview).</span></span>  
  
-   <span data-ttu-id="bbe41-113">属性的上一个值已更改并且属性值可以被强制时，属性可报告。</span><span class="sxs-lookup"><span data-stu-id="bbe41-113">The property can report when the previous value of the property has been changed and the property value can be coerced.</span></span> <span data-ttu-id="bbe41-114">有关详细信息，请参阅[依赖属性回调和验证](/dotnet/framework/wpf/advanced/dependency-property-callbacks-and-validation)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-114">For more information, see [Dependency Property Callbacks and Validation](/dotnet/framework/wpf/advanced/dependency-property-callbacks-and-validation).</span></span>  
  
-   <span data-ttu-id="bbe41-115">属性将信息报告给 WPF，例如更改属性值是否应要求布局系统 recompose 元素的视觉对象。</span><span class="sxs-lookup"><span data-stu-id="bbe41-115">The property reports information to WPF, such as whether changing a property value should require the layout system to recompose the visuals for an element.</span></span>  
  
-   <span data-ttu-id="bbe41-116">属性在 Visual Studio 的 WPF 设计器中接收支持。</span><span class="sxs-lookup"><span data-stu-id="bbe41-116">The property receives support in the WPF Designer for Visual Studio.</span></span>  <span data-ttu-id="bbe41-117">例如，可以在 " **属性** " 窗口中编辑该属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-117">For example, the property can be edited in the **Properties** window.</span></span>  
  
 <span data-ttu-id="bbe41-118">若要了解有关依赖项属性的详细信息，请参阅 [依赖属性概述](/dotnet/framework/wpf/advanced/dependency-properties-overview)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-118">To learn more about dependency properties, see [Dependency Properties Overview](/dotnet/framework/wpf/advanced/dependency-properties-overview).</span></span> <span data-ttu-id="bbe41-119">如果希望自定义类型的属性支持上述列表中的功能，则应创建一个依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-119">If you want properties on your custom types to support the capabilities in the preceding list, you should create a dependency property.</span></span>  <span data-ttu-id="bbe41-120">若要了解如何创建自定义依赖项属性，请参阅 [自定义依赖属性](/dotnet/framework/wpf/advanced/custom-dependency-properties)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-120">To learn how to create custom dependency properties, see [Custom Dependency Properties](/dotnet/framework/wpf/advanced/custom-dependency-properties).</span></span>  
  
 <span data-ttu-id="bbe41-121">附加属性是一种属性，该属性使任何对象都可以向定义附加属性的类型报告信息。</span><span class="sxs-lookup"><span data-stu-id="bbe41-121">An attached property is a property that enables any object to report information to the type that defines the attached property.</span></span> <span data-ttu-id="bbe41-122">在 WPF 中，从继承的任何类型 <xref:System.Windows.DependencyObject> 都可以使用附加属性，无论该类型是否继承自定义该属性的类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-122">In WPF, any type that inherits from <xref:System.Windows.DependencyObject> can use an attached property regardless of whether the type inherits from the type that defines the property.</span></span> <span data-ttu-id="bbe41-123">附加属性是 XAML 语言的一项功能。</span><span class="sxs-lookup"><span data-stu-id="bbe41-123">An attached property is a feature of the XAML language.</span></span>  <span data-ttu-id="bbe41-124">若要在 XAML 中设置附加属性，请使用 *所有者* 的。*propertyName* 语法。</span><span class="sxs-lookup"><span data-stu-id="bbe41-124">To set an attached property in XAML, use the *ownerType*.*propertyName* syntax.</span></span> <span data-ttu-id="bbe41-125">附加属性的一个示例是 <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-125">An example of an attached property is the <xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="bbe41-126">如果要创建可用于所有类型的属性 <xref:System.Windows.DependencyObject> ，则应创建附加属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-126">If you want to create a property that can be used on all <xref:System.Windows.DependencyObject> types, then you should create an attached property.</span></span> <span data-ttu-id="bbe41-127">若要了解有关附加属性的详细信息（包括如何创建附加属性），请参阅 [附加属性概述](/dotnet/framework/wpf/advanced/attached-properties-overview)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-127">To learn more about attached properties, including how to create them, see [Attached Properties Overview](/dotnet/framework/wpf/advanced/attached-properties-overview).</span></span>  
  
<a name="xamlAttributeUsage_DependencyProperty"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="bbe41-128">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="bbe41-128">XAML Attribute Usage</span></span>  
  
```xaml 
<object property="dependencyPropertyName"/>  
```

<span data-ttu-id="bbe41-129">- 或 -</span><span class="sxs-lookup"><span data-stu-id="bbe41-129">-or-</span></span>

```xaml
<object property="ownerType.dependencyPropertyName"/>  
```

<span data-ttu-id="bbe41-130">- 或 -</span><span class="sxs-lookup"><span data-stu-id="bbe41-130">-or-</span></span>

```xaml
<object property="attachedPropertyOwnerType.attachedPropertyName"/>  
```  
  
<a name="xamlValues_DependencyProperty"></a>   
## <a name="xaml-values"></a><span data-ttu-id="bbe41-131">XAML 值</span><span class="sxs-lookup"><span data-stu-id="bbe41-131">XAML Values</span></span>  
 `dependencyPropertyName`  
 <span data-ttu-id="bbe41-132">一个字符串，指定所 <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> 需依赖属性的。</span><span class="sxs-lookup"><span data-stu-id="bbe41-132">A string that specifies the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> of the desired dependency property.</span></span> <span data-ttu-id="bbe41-133">如果该属性不在默认的 XML 命名空间中，则可以在其前面加上 XML 命名空间前缀 (有关详细信息，请参阅 [WPF xaml 的 XAML 命名空间和命名空间映射](/dotnet/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml)。 ) </span><span class="sxs-lookup"><span data-stu-id="bbe41-133">This can be preceded by an XML namespace prefix if the property is not in the default XML namespace (for details, see [XAML Namespaces and Namespace Mapping for WPF XAML](/dotnet/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml).)</span></span>  
  
 <span data-ttu-id="bbe41-134">`ownerType`.`dependencyPropertyName`</span><span class="sxs-lookup"><span data-stu-id="bbe41-134">`ownerType`.`dependencyPropertyName`</span></span>  
 <span data-ttu-id="bbe41-135">一个字符串，该字符串指定依赖属性的所有者类型、一个点 (。 ) ，然后是 <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-135">A string that specifies an owner type of a dependency property, a dot (.), then the <xref:System.Windows.DependencyProperty.Name%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="bbe41-136">`ownerType` 还可以以 XML 命名空间前缀开头。</span><span class="sxs-lookup"><span data-stu-id="bbe41-136">`ownerType` can also be preceded by an XML namespace prefix.</span></span> <span data-ttu-id="bbe41-137">此用法特别适用于晚期绑定样式和模板，其中必须指定依赖属性的所有者来分析上下文，因为尚 `TargetType` 不知道。</span><span class="sxs-lookup"><span data-stu-id="bbe41-137">This usage is particular to late-bound styles and templates, where the owner of the dependency property must be specified for parsing context because the `TargetType` is not yet known.</span></span> <span data-ttu-id="bbe41-138">有关详细信息，请参阅 [样式设置和模板化](/dotnet/framework/wpf/controls/styling-and-templating)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-138">For more information, see [Styling and Templating](/dotnet/framework/wpf/controls/styling-and-templating).</span></span>  
  
 <span data-ttu-id="bbe41-139">`attachedPropertyOwnerType` *.*</span><span class="sxs-lookup"><span data-stu-id="bbe41-139">`attachedPropertyOwnerType` *.*</span></span> `attachedPropertyName`  
 <span data-ttu-id="bbe41-140">一个字符串，指定附加属性的所有者， ( 的点 ) ，然后是附加属性名称。</span><span class="sxs-lookup"><span data-stu-id="bbe41-140">A string that specifies  the owner of an attached property, a dot (.), then the attached property name.</span></span> <span data-ttu-id="bbe41-141">`attachedPropertyOwnerType` 还可以以 XML 命名空间前缀开头。</span><span class="sxs-lookup"><span data-stu-id="bbe41-141">`attachedPropertyOwnerType` can also be preceded by an XML namespace prefix.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.DependencyObject" />
    <altmember cref="T:System.Windows.DependencyPropertyHelper" />
  </Docs>
  <Members>
    <MemberGroup MemberName="AddOwner">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bbe41-142">将另一种类型添加为已注册到一种类型的依赖属性的所有者。</span><span class="sxs-lookup"><span data-stu-id="bbe41-142">Adds another type as an owner of a dependency property that has already been registered to a type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType"><span data-ttu-id="bbe41-143">要作为此依赖属性所有者添加的类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-143">The type to add as an owner of this dependency property.</span></span></param>
        <summary><span data-ttu-id="bbe41-144">将另一种类型添加为已注册的依赖属性的所有者。</span><span class="sxs-lookup"><span data-stu-id="bbe41-144">Adds another type as an owner of a dependency property that has already been registered.</span></span></summary>
        <returns><span data-ttu-id="bbe41-145">一个引用，它指向可标识依赖属性的原始 <see cref="T:System.Windows.DependencyProperty" /> 标识符。</span><span class="sxs-lookup"><span data-stu-id="bbe41-145">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span></span> <span data-ttu-id="bbe41-146">应通过将类添加为 <see langword="public static readonly" /> 字段来公开此标识符。</span><span class="sxs-lookup"><span data-stu-id="bbe41-146">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-147">使用此方法，属性系统可以在最初未注册特定依赖属性的类型上识别依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-147">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="bbe41-148">通常， <xref:System.Windows.DependencyProperty.AddOwner%2A> 用于向未通过托管类继承公开该依赖项属性的类添加依赖属性， (类继承将导致派生类继承包装属性，因此将为已) 的依赖属性提供常规成员表访问权限。</span><span class="sxs-lookup"><span data-stu-id="bbe41-148">Typically, <xref:System.Windows.DependencyProperty.AddOwner%2A> is used to add dependency properties to classes that do not already expose that dependency property through managed class inheritance (class inheritance would cause the wrapper properties to be inherited by the derived class, and thus would provide general members-table access to the dependency property already).</span></span> <span data-ttu-id="bbe41-149"><xref:System.Windows.DependencyProperty.AddOwner%2A> 使属性系统能够识别最初未注册该依赖属性的类型的依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-149"><xref:System.Windows.DependencyProperty.AddOwner%2A> enables the property system to recognize a dependency property on a type that did not register that dependency property initially.</span></span>  
  
 <span data-ttu-id="bbe41-150">此签名不允许指定元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-150">This signature does not allow for specifying metadata.</span></span>  <span data-ttu-id="bbe41-151">使用此方法时，会自动为新的 <xref:System.Windows.DependencyProperty> 及其所有者类型生成元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-151">When you use this method, the metadata is automatically generated for the new <xref:System.Windows.DependencyProperty> and its owner type.</span></span> <span data-ttu-id="bbe41-152">自动生成的元数据是来自定义了此属性的所有基类型的合并元数据的结果。</span><span class="sxs-lookup"><span data-stu-id="bbe41-152">The auto-generated metadata is the result of the merged metadata from all of the base types that have this property defined.</span></span> <span data-ttu-id="bbe41-153">如果没有可用的合并元数据，则使用属性的默认元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-153">If no merged metadata is available, then the default metadata for the property is used.</span></span> <span data-ttu-id="bbe41-154">如果使用方法注册属性 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> ，则默认元数据与调用时创建的元数据相同 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-154">If the property is registered by using the <xref:System.Windows.DependencyProperty.RegisterAttached%2A> method, then the default metadata is the same as the metadata that is created when <xref:System.Windows.DependencyProperty.RegisterAttached%2A> was called.</span></span> <span data-ttu-id="bbe41-155">否则，将 <xref:System.Windows.PropertyMetadata> 创建对象，并将 <xref:System.Windows.PropertyMetadata.DefaultValue%2A> 属性设置为属性类型的默认值，并且的所有其他属性 <xref:System.Windows.PropertyMetadata> 都设置为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-155">Otherwise, the <xref:System.Windows.PropertyMetadata> object is created with the <xref:System.Windows.PropertyMetadata.DefaultValue%2A> property set to the property type's default and all other properties of the <xref:System.Windows.PropertyMetadata> is set to `null`.</span></span> <span data-ttu-id="bbe41-156"><xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29>如果要为已添加到提供的类型中的依赖属性版本提供元数据，则使用签名。</span><span class="sxs-lookup"><span data-stu-id="bbe41-156">Use the <xref:System.Windows.DependencyProperty.AddOwner%28System.Type%2CSystem.Windows.PropertyMetadata%29> signature if you want to provide metadata for the version of the dependency property as added to the provided type.</span></span>  
  
 <span data-ttu-id="bbe41-157">此方法的返回值通常用于通过存储依赖属性标识符来声明和公开依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-157">The return value of this method is typically used to declare and expose the dependency property by storing a dependency property identifier.</span></span> <span data-ttu-id="bbe41-158">如果要针对依赖项属性调用属性系统 Api，则标识符提供对依赖项属性的访问权限，特别是在添加所有者类中。</span><span class="sxs-lookup"><span data-stu-id="bbe41-158">The identifier provides access to the dependency property if you want to call property system APIs against the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="bbe41-159">应使用原始所有者和添加所有者的相同属性名称来指示类似的功能。</span><span class="sxs-lookup"><span data-stu-id="bbe41-159">The same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="bbe41-160">应使用方法的 <xref:System.Windows.DependencyProperty> 返回值 <xref:System.Windows.DependencyProperty.AddOwner%2A> 来定义依赖项属性标识符，同时为使用添加到类型的依赖项属性声明 CLR 属性包装 <xref:System.Windows.DependencyProperty.AddOwner%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-160">You should use the <xref:System.Windows.DependencyProperty> return value of the <xref:System.Windows.DependencyProperty.AddOwner%2A> method to define the dependency property identifier, and also to declare CLR property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="bbe41-161"><xref:System.Windows.DependencyProperty.AddOwner%2A>创建在 WPF 内声明的依赖项属性时，将使用上述方法。</span><span class="sxs-lookup"><span data-stu-id="bbe41-161">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating the dependency properties that are declared within WPF.</span></span> <span data-ttu-id="bbe41-162">例如， <xref:System.Windows.Controls.Border> 和 <xref:System.Windows.Controls.Control> 定义 `BorderBrush` 具有类似功能的依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-162">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="bbe41-163"><xref:System.Windows.Controls.Control>`BorderBrush`通过 <xref:System.Windows.DependencyProperty.AddOwner%2A> 基于原始所有者 <xref:System.Windows.Controls.Border> 及其注册的 <xref:System.Windows.Controls.Border.BorderBrushProperty> 依赖项属性标识符调用，将其属性定义到属性系统。</span><span class="sxs-lookup"><span data-stu-id="bbe41-163"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> based on the original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="bbe41-164">然后，将 <xref:System.Windows.DependencyProperty.AddOwner%2A> 使用返回值为 <xref:System.Windows.DependencyProperty> 添加的所有者上的该属性建立一个新的静态字段 (<xref:System.Windows.Controls.Control.BorderBrushProperty>) ，并且 `BorderBrush` 还声明了一个属性包装。</span><span class="sxs-lookup"><span data-stu-id="bbe41-164">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a new static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>) for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyProperty AddOwner (Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyProperty AddOwner(class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyProperty ^ AddOwner(Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="dependencyProperty.AddOwner (ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="ownerType"><span data-ttu-id="bbe41-165">要作为此依赖属性所有者添加的类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-165">The type to add as owner of this dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="bbe41-166">在依赖属性存在于所提供的类型上时对其进行限定的元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-166">The metadata that qualifies the dependency property as it exists on the provided type.</span></span></param>
        <summary><span data-ttu-id="bbe41-167">将其他类型添加为已注册的依赖对象所有者，从而为依赖属性提供依赖属性元数据使其存在于提供的所有者类型上。</span><span class="sxs-lookup"><span data-stu-id="bbe41-167">Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.</span></span></summary>
        <returns><span data-ttu-id="bbe41-168">一个引用，它指向可标识依赖属性的原始 <see cref="T:System.Windows.DependencyProperty" /> 标识符。</span><span class="sxs-lookup"><span data-stu-id="bbe41-168">A reference to the original <see cref="T:System.Windows.DependencyProperty" /> identifier that identifies the dependency property.</span></span> <span data-ttu-id="bbe41-169">应通过将类添加为 <see langword="public static readonly" /> 字段来公开此标识符。</span><span class="sxs-lookup"><span data-stu-id="bbe41-169">This identifier should be exposed by the adding class as a <see langword="public static readonly" /> field.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-170">使用此方法，属性系统可以在最初未注册特定依赖属性的类型上识别依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-170">This method enables the property system to recognize a dependency property on a type that did not register that particular dependency property initially.</span></span>  
  
 <span data-ttu-id="bbe41-171">此方法的返回值用于声明并公开依赖属性，尤其是它存在于添加所有者类中。</span><span class="sxs-lookup"><span data-stu-id="bbe41-171">The return value of this method is used to declare and expose the dependency property, particularly as it exists on the adding owner class.</span></span> <span data-ttu-id="bbe41-172">通常，应使用原始所有者和添加所有者的相同属性名称来指示类似的功能。</span><span class="sxs-lookup"><span data-stu-id="bbe41-172">Generally, the same property name for both original owner and added owner should be used to indicate the similar functionality.</span></span> <span data-ttu-id="bbe41-173">为使用添加到类型的依赖属性公开标识符，以及新的 CLR 属性包装是一种很好的做法 <xref:System.Windows.DependencyProperty.AddOwner%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-173">It is good practice to expose the identifiers, as well as new CLR property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>.</span></span>  
  
 <span data-ttu-id="bbe41-174"><xref:System.Windows.DependencyProperty.AddOwner%2A>创建在 WPF 内声明的 api 时，使用上述方法。</span><span class="sxs-lookup"><span data-stu-id="bbe41-174">The <xref:System.Windows.DependencyProperty.AddOwner%2A> methodology recommended above is used when creating APIs declared within WPF.</span></span> <span data-ttu-id="bbe41-175">例如， <xref:System.Windows.Controls.Border> 和 <xref:System.Windows.Controls.Control> 定义 `BorderBrush` 具有类似功能的依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-175">For instance, both <xref:System.Windows.Controls.Border> and <xref:System.Windows.Controls.Control> define a `BorderBrush` dependency property, which have similar functionality.</span></span> <span data-ttu-id="bbe41-176"><xref:System.Windows.Controls.Control>`BorderBrush`通过调用 <xref:System.Windows.DependencyProperty.AddOwner%2A> 原始所有者 <xref:System.Windows.Controls.Border> 及其注册的 <xref:System.Windows.Controls.Border.BorderBrushProperty> 依赖项属性标识符，将其属性定义到属性系统。</span><span class="sxs-lookup"><span data-stu-id="bbe41-176"><xref:System.Windows.Controls.Control> defines its `BorderBrush` property to the property system by calling <xref:System.Windows.DependencyProperty.AddOwner%2A> on original owner <xref:System.Windows.Controls.Border> and its registered <xref:System.Windows.Controls.Border.BorderBrushProperty> dependency property identifer.</span></span> <span data-ttu-id="bbe41-177"><xref:System.Windows.DependencyProperty.AddOwner%2A>然后，使用返回值为 <xref:System.Windows.DependencyProperty> 添加的 <xref:System.Windows.Controls.Control.BorderBrushProperty> 所有者上的该属性建立静态字段 () ， `BorderBrush` 还将声明属性包装。</span><span class="sxs-lookup"><span data-stu-id="bbe41-177">The <xref:System.Windows.DependencyProperty.AddOwner%2A> return value is then used to establish a static <xref:System.Windows.DependencyProperty> field (<xref:System.Windows.Controls.Control.BorderBrushProperty>) for that property on the added owner, and a `BorderBrush` property wrapper is also declared.</span></span>  
  
 <span data-ttu-id="bbe41-178">添加的所有者的依赖项属性标识符应用于等操作 <xref:System.Windows.DependencyObject.GetValue%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-178">The added owner's dependency property identifier should be used for operations such as <xref:System.Windows.DependencyObject.GetValue%2A>.</span></span> <span data-ttu-id="bbe41-179">但是，涉及到作为具有不同元数据的所有者添加的类的类型或实例的类型特定操作仍将返回预期结果，即使原始 () 不是在调用方法（如或）时指定的 <xref:System.Windows.DependencyObject.GetValue%2A> <xref:System.Windows.DependencyProperty.GetMetadata%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-179">However, type-specific operations involving either types or instances of the class that was added as owner with different metadata will still return the expected results even if the original (not the added owner's) dependency property identifier is specified in calls to methods such as <xref:System.Windows.DependencyObject.GetValue%2A> or <xref:System.Windows.DependencyProperty.GetMetadata%2A>.</span></span> <span data-ttu-id="bbe41-180">添加的所有者的元数据由 <xref:System.Windows.DependencyProperty.AddOwner%2A> 调用本身永久保留，不必由 "添加所有者类标识符" 字段专门引用。</span><span class="sxs-lookup"><span data-stu-id="bbe41-180">The metadata for the added owner is perpetuated by the <xref:System.Windows.DependencyProperty.AddOwner%2A> call itself, not necessarily referenced exclusively by the adding owner class identifier field.</span></span> <span data-ttu-id="bbe41-181">尽管如此，为使用添加到类型的依赖项属性公开标识符，以及新的 CLR 属性包装是一种很好的做法 <xref:System.Windows.DependencyProperty.AddOwner%2A> ，因为这样做会在 CLR 和属性的 XAML 表示形式之间创建差异。</span><span class="sxs-lookup"><span data-stu-id="bbe41-181">Nevertheless, it is good practice to expose the  identifier, as well as new CLR property wrappers, for dependency properties that are added to types using <xref:System.Windows.DependencyProperty.AddOwner%2A>, because failing to do so creates disparity between the CLR and XAML representations of your properties.</span></span>  
  
 <span data-ttu-id="bbe41-182">提供的元数据与基所有者上存在的依赖属性的属性元数据合并在一起。</span><span class="sxs-lookup"><span data-stu-id="bbe41-182">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="bbe41-183">原始基本元数据中指定的所有特征都将保留。</span><span class="sxs-lookup"><span data-stu-id="bbe41-183">Any characteristics that were specified in the original base metadata will persist.</span></span> <span data-ttu-id="bbe41-184">只有那些在新的元数据中特别更改的特性才会重写基本元数据的特性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-184">Only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="bbe41-185"><xref:System.Windows.PropertyMetadata.DefaultValue%2A>如果在新的元数据中指定了某些特征（如），则会将其替换。</span><span class="sxs-lookup"><span data-stu-id="bbe41-185">Some characteristics, such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A>, are replaced if they are specified in the new metadata.</span></span> <span data-ttu-id="bbe41-186">其他类（如 <xref:System.Windows.PropertyChangedCallback> ）合并在一起。</span><span class="sxs-lookup"><span data-stu-id="bbe41-186">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="bbe41-187">最终，合并行为取决于用于重写的属性元数据类型，因此此处所述的行为适用于 WPF 依赖属性使用的现有属性元数据类。</span><span class="sxs-lookup"><span data-stu-id="bbe41-187">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by WPF dependency properties.</span></span> <span data-ttu-id="bbe41-188">有关详细信息，请参阅 [依赖项属性元](/dotnet/framework/wpf/advanced/dependency-property-metadata) 数据和 [框架属性元数据](/dotnet/framework/wpf/advanced/framework-property-metadata)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-188">For details, see [Dependency Property Metadata](/dotnet/framework/wpf/advanced/dependency-property-metadata) and [Framework Property Metadata](/dotnet/framework/wpf/advanced/framework-property-metadata).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata DefaultMetadata { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PropertyMetadata DefaultMetadata" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultMetadata As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PropertyMetadata ^ DefaultMetadata { System::Windows::PropertyMetadata ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMetadata : System.Windows.PropertyMetadata" Usage="System.Windows.DependencyProperty.DefaultMetadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bbe41-189">获取依赖项对象的默认元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-189">Gets the default metadata of the dependency property.</span></span></summary>
        <value><span data-ttu-id="bbe41-190">依赖项对象的默认元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-190">The default metadata of the dependency property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-191">默认元数据是可用于该特定对象的属性元数据，或者是一个派生类型的对象，在该对象中，不提供任何替代元数据的显式 <xref:System.Windows.DependencyProperty.Register%2A> 或 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 调用。</span><span class="sxs-lookup"><span data-stu-id="bbe41-191">The default metadata is the property metadata that is available to that particular object or an object of a derived type where no alternative metadata was supplied by an explicit <xref:System.Windows.DependencyProperty.Register%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> call.</span></span>  
  
 <span data-ttu-id="bbe41-192">如果原始所有者将元数据应用于第一个 <xref:System.Windows.DependencyProperty.Register%2A> 建立依赖属性的调用，则会将该元数据作为返回 <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-192">If the original owner applied metadata to the first <xref:System.Windows.DependencyProperty.Register%2A> call that established the dependency property, then that metadata is returned as <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="bbe41-193">如果未在原始调用中应用元数据 <xref:System.Windows.DependencyProperty.Register%2A> ，则将从调用中生成默认元数据， <xref:System.Windows.DependencyProperty.Register%2A> 并将此值作为返回 <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-193">If no metadata was applied in the original <xref:System.Windows.DependencyProperty.Register%2A> call, then default metadata is generated from within the <xref:System.Windows.DependencyProperty.Register%2A> call and this value is returned as the <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
 <span data-ttu-id="bbe41-194">使默认元数据与关联的主要目的 <xref:System.Windows.DependencyProperty> 是在任何或派生的类型上提供此属性的默认值 <xref:System.Windows.DependencyObject> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-194">The main purpose of having default metadata associated with a <xref:System.Windows.DependencyProperty> is to supply a default value for this property on any <xref:System.Windows.DependencyObject> or a derived type.</span></span>  
  
 <span data-ttu-id="bbe41-195">对于非附加属性，该属性返回的元数据类型不能转换为类型的派生类型 <xref:System.Windows.PropertyMetadata> ，即使该属性最初是使用派生的元数据类型注册的。</span><span class="sxs-lookup"><span data-stu-id="bbe41-195">For nonattached properties, the metadata type returned by this property cannot be cast to derived types of <xref:System.Windows.PropertyMetadata> type, even if the property was originally registered with a derived metadata type.</span></span> <span data-ttu-id="bbe41-196">如果希望最初注册的元数据（包括其最初可能派生的元数据类型）调用 <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> ，请改为将原始注册类型作为参数传递。</span><span class="sxs-lookup"><span data-stu-id="bbe41-196">If you want the originally registered metadata including its original possibly derived metadata type, call <xref:System.Windows.DependencyProperty.GetMetadata%28System.Type%29> instead, passing the original registering type as a parameter.</span></span>  
  
 <span data-ttu-id="bbe41-197">对于附加属性，此属性返回的元数据的类型将与原始注册方法中给定的类型匹配 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-197">For attached properties, the type of the metadata returned by this property will match the type given in the original <xref:System.Windows.DependencyProperty.RegisterAttached%2A> registration method.</span></span>  
  
   
  
## Examples  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
[!code-csharp[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpdefaultvalue)]
[!code-vb[PropertySystemEsoterics#DPDefaultValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpdefaultvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dependencyProperty.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bbe41-198">返回此 <see cref="T:System.Windows.DependencyProperty" /> 的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="bbe41-198">Returns a hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span></span></summary>
        <returns><span data-ttu-id="bbe41-199">此 <see cref="T:System.Windows.DependencyProperty" /> 的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="bbe41-199">The hash code for this <see cref="T:System.Windows.DependencyProperty" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-200">属性系统使用其自己的唯一标识符 <xref:System.Windows.DependencyProperty.GlobalIndex%2A> ，并且返回该属性的值 <xref:System.Windows.DependencyProperty.GetHashCode%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-200">The property system uses its own unique identifier <xref:System.Windows.DependencyProperty.GlobalIndex%2A>, and the value of that property is returned by <xref:System.Windows.DependencyProperty.GetHashCode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bbe41-201">返回与此依赖属性关联的的元数据（只要它对于特定的类型存在）。</span><span class="sxs-lookup"><span data-stu-id="bbe41-201">Returns the metadata associated with this dependency property as it exists for a particular type.</span></span> <span data-ttu-id="bbe41-202">它可以是在其中首次注册依赖属性的类型、随后将其添加到的类型，或在其中通过继承获取依赖属性而已专门重写元数据的类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-202">This can be the type where the dependency property was first registered, one to which it was added subsequently, or a type where the dependency property was obtained through inheritance but the metadata was specifically overridden.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (Type forType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Type forType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata (forType As Type) As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(Type ^ forType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : Type -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata forType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="forType"><span data-ttu-id="bbe41-203">要从中检索依赖属性元数据的特定类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-203">The specific type from which to retrieve the dependency property metadata.</span></span></param>
        <summary><span data-ttu-id="bbe41-204">返回此依赖属性的元数据，因为它存在于指定的现有类型上。</span><span class="sxs-lookup"><span data-stu-id="bbe41-204">Returns the metadata for this dependency property as it exists on a specified existing type.</span></span></summary>
        <returns><span data-ttu-id="bbe41-205">属性元数据对象。</span><span class="sxs-lookup"><span data-stu-id="bbe41-205">A property metadata object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-206">将类型或对象引用指定为使用类型是必需的，因为元数据可能与原始注册不同，原因是更改了 <xref:System.Windows.DependencyProperty.AddOwner%2A> 或 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 调用，这些调用会更改依赖属性的元数据，因为它存在于类型上。</span><span class="sxs-lookup"><span data-stu-id="bbe41-206">Specifying either the type or an object reference to use as type is necessary because the metadata can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that alter the metadata of the dependency property as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbe41-207">下面的示例基于依赖项属性的类型获取其元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-207">The following example gets metadata for a dependency property based on its type.</span></span> <span data-ttu-id="bbe41-208">该类型是使用运算符获取的 `typeof` 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-208">The type is obtained by using a `typeof` operator.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatatype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatatype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObject dependencyObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObject dependencyObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata (dependencyObject As DependencyObject) As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObject ^ dependencyObject);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObject -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="dependencyObject"><span data-ttu-id="bbe41-209">一个依赖对象，检查了其类型，以便确定元数据应来自依赖属性的哪个类型特定版本。</span><span class="sxs-lookup"><span data-stu-id="bbe41-209">A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.</span></span></param>
        <summary><span data-ttu-id="bbe41-210">返回此依赖属性的元数据，因为它存在于指定的对象实例上。</span><span class="sxs-lookup"><span data-stu-id="bbe41-210">Returns the metadata for this dependency property as it exists on the specified object instance.</span></span></summary>
        <returns><span data-ttu-id="bbe41-211">属性元数据对象。</span><span class="sxs-lookup"><span data-stu-id="bbe41-211">A property metadata object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-212">指定类型或对象引用是必需的，因为任何给定依赖项属性的元数据可能会与原始注册不同，原因是 <xref:System.Windows.DependencyProperty.AddOwner%2A> <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 可以对属性元数据进行修改（因为它存在于类型上）或调用。</span><span class="sxs-lookup"><span data-stu-id="bbe41-212">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
 <span data-ttu-id="bbe41-213">在请求基于实例的属性元数据时，实际上只传递实例，以便可以在内部计算其类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-213">When you request property metadata based on an instance, you are really just passing the instance so that its type can be evaluated internally.</span></span> <span data-ttu-id="bbe41-214">依赖属性元数据不因每个实例而异;它对于任何给定的类型属性组合始终是一致的。</span><span class="sxs-lookup"><span data-stu-id="bbe41-214">Dependency property metadata does not vary per instance; it is always consistent for any given type-property combination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbe41-215">下面的示例基于特定实例获取依赖属性的元数据 <xref:System.Windows.DependencyObject> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-215">The following example gets metadata for a dependency property based on a specific <xref:System.Windows.DependencyObject> instance.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadoinstance)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOInstance](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadoinstance)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMetadata">
      <MemberSignature Language="C#" Value="public System.Windows.PropertyMetadata GetMetadata (System.Windows.DependencyObjectType dependencyObjectType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.PropertyMetadata GetMetadata(class System.Windows.DependencyObjectType dependencyObjectType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMetadata (dependencyObjectType As DependencyObjectType) As PropertyMetadata" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::PropertyMetadata ^ GetMetadata(System::Windows::DependencyObjectType ^ dependencyObjectType);" />
      <MemberSignature Language="F#" Value="member this.GetMetadata : System.Windows.DependencyObjectType -&gt; System.Windows.PropertyMetadata" Usage="dependencyProperty.GetMetadata dependencyObjectType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.PropertyMetadata</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObjectType" Type="System.Windows.DependencyObjectType" />
      </Parameters>
      <Docs>
        <param name="dependencyObjectType"><span data-ttu-id="bbe41-216">一个特定对象，该对象记录需要其中的依赖属性元数据的依赖项对象类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-216">A specific object that records the dependency object type from which the dependency property metadata is desired.</span></span></param>
        <summary><span data-ttu-id="bbe41-217">为此依赖属性（当它位于指定的对象实例上时）返回元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-217">Returns the metadata for this dependency property as it exists on a specified type.</span></span></summary>
        <returns><span data-ttu-id="bbe41-218">属性元数据对象。</span><span class="sxs-lookup"><span data-stu-id="bbe41-218">A property metadata object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-219">指定类型或对象引用是必需的，因为任何给定依赖项属性的元数据可能会与原始注册不同，原因是 <xref:System.Windows.DependencyProperty.AddOwner%2A> <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 可以对属性元数据进行修改（因为它存在于类型上）或调用。</span><span class="sxs-lookup"><span data-stu-id="bbe41-219">Specifying either the type or an object reference is necessary because the metadata of any given dependency property can vary from the original registration due either to <xref:System.Windows.DependencyProperty.AddOwner%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> calls that can refine the property metadata as it exists on a type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbe41-220">下面的示例基于依赖项属性的来获取其元数据 <xref:System.Windows.DependencyObjectType> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-220">The following example gets metadata for a dependency property based on its <xref:System.Windows.DependencyObjectType>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/default.xaml.cs#getmetadatadotype)]
 [!code-vb[PropertySystemEsoterics#GetMetadataDOType](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/default.xaml.vb#getmetadatadotype)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlobalIndex">
      <MemberSignature Language="C#" Value="public int GlobalIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GlobalIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.GlobalIndex" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GlobalIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int GlobalIndex { int get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalIndex : int" Usage="System.Windows.DependencyProperty.GlobalIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bbe41-221">获取唯一标识依赖项对象的内部生成值。</span><span class="sxs-lookup"><span data-stu-id="bbe41-221">Gets an internally generated value that uniquely identifies the dependency property.</span></span></summary>
        <value><span data-ttu-id="bbe41-222">唯一数字标识符。</span><span class="sxs-lookup"><span data-stu-id="bbe41-222">A unique numeric identifier.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-223">此值是整数，而不是 GUID)  (全局唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="bbe41-223">This value is an integer, not a globally unique identifier (GUID).</span></span> <span data-ttu-id="bbe41-224">通常，使用此索引值并不是必需的，并且不会对所有依赖属性的表进行索引访问。</span><span class="sxs-lookup"><span data-stu-id="bbe41-224">Generally, using this index value is not required, and there is no index access to tables of all dependency properties.</span></span> <span data-ttu-id="bbe41-225">依赖属性应改为引用其标识符字段。</span><span class="sxs-lookup"><span data-stu-id="bbe41-225">Dependency properties should instead be referenced by their identifier fields.</span></span>  
  
 <span data-ttu-id="bbe41-226"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> 供内部使用，以更快地访问使用 <xref:System.Windows.DependencyProperty.GlobalIndex%2A> 作为从零开始的数组索引的数据结构。</span><span class="sxs-lookup"><span data-stu-id="bbe41-226"><xref:System.Windows.DependencyProperty.GlobalIndex%2A> is used internally for faster access to data structures that use the <xref:System.Windows.DependencyProperty.GlobalIndex%2A> as a zero-based array index.</span></span> <span data-ttu-id="bbe41-227">类似的用法可能具有用于设计器或工具的应用程序。</span><span class="sxs-lookup"><span data-stu-id="bbe41-227">A similar usage might have applications for designers or tools.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidType">
      <MemberSignature Language="C#" Value="public bool IsValidType (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidType(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidType (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidType(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidType : obj -&gt; bool" Usage="dependencyProperty.IsValidType value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbe41-228">要检查的值。</span><span class="sxs-lookup"><span data-stu-id="bbe41-228">The value to check.</span></span></param>
        <summary><span data-ttu-id="bbe41-229">确定指定的值对于该依赖项对象的类型是否可接受（与原依赖项对象注册中提供的属性类型相对照）。</span><span class="sxs-lookup"><span data-stu-id="bbe41-229">Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.</span></span></summary>
        <returns><span data-ttu-id="bbe41-230">如果指定的值是已注册的属性类型或可接受的派生类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="bbe41-230"><see langword="true" /> if the specified value is the registered property type or an acceptable derived type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-231">的值 `null` 是引用类型依赖属性或依赖属性的有效类型， <xref:System.Nullable%601> 并将在 `true` 这些情况下返回。</span><span class="sxs-lookup"><span data-stu-id="bbe41-231">A value of `null` is a valid type for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="bbe41-232">如果依赖属性既不是引用也不是 <xref:System.Nullable%601> 类型， <xref:System.Windows.DependencyProperty.IsValidType%2A> 则将返回 `false` null 值而不是引发异常。</span><span class="sxs-lookup"><span data-stu-id="bbe41-232">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbe41-233">下面的示例在 <xref:System.Windows.DependencyProperty.IsValidType%2A> 调用依赖属性之前使用作为检查 <xref:System.Windows.DependencyObject.SetValue%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-233">The following example uses <xref:System.Windows.DependencyProperty.IsValidType%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValue](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvalue)]
 [!code-vb[PropertySystemEsoterics#TrySetValue](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidValue">
      <MemberSignature Language="C#" Value="public bool IsValidValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsValidValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.IsValidValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsValidValue (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsValidValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.IsValidValue : obj -&gt; bool" Usage="dependencyProperty.IsValidValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="bbe41-234">要检查的值。</span><span class="sxs-lookup"><span data-stu-id="bbe41-234">The value to check.</span></span></param>
        <summary><span data-ttu-id="bbe41-235">确定所提供的值通过基本类型检查后是否被属性类型接受，以及它是否有可能在该类型的值的允许范围以内。</span><span class="sxs-lookup"><span data-stu-id="bbe41-235">Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.</span></span></summary>
        <returns><span data-ttu-id="bbe41-236">如果值是可接受的，并且具有正确的类型或派生类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="bbe41-236"><see langword="true" /> if the value is acceptable and is of the correct type or a derived type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-237">对于依赖属性，可以通过 <xref:System.Windows.ValidateValueCallback> 在依赖属性注册中提供的来指定该类型的值的允许范围。</span><span class="sxs-lookup"><span data-stu-id="bbe41-237">For a dependency property, an allowed range of values for that type can be specified through a <xref:System.Windows.ValidateValueCallback> that is provided in the dependency property registration.</span></span>  
  
 <span data-ttu-id="bbe41-238">此方法 <xref:System.Windows.DependencyProperty.IsValidType%2A> 在内部调用。</span><span class="sxs-lookup"><span data-stu-id="bbe41-238">This method calls <xref:System.Windows.DependencyProperty.IsValidType%2A> internally.</span></span> <span data-ttu-id="bbe41-239">如果相关的依赖项属性没有 <xref:System.Windows.ValidateValueCallback> ，则调用此方法实际上等效于调用 <xref:System.Windows.DependencyProperty.IsValidType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-239">If the dependency property in question has no <xref:System.Windows.ValidateValueCallback>,then calling this method is effectively equivalent to calling <xref:System.Windows.DependencyProperty.IsValidType%2A>.</span></span> <span data-ttu-id="bbe41-240">如果依赖属性具有 <xref:System.Windows.ValidateValueCallback> ，并且如果 <xref:System.Windows.DependencyProperty.IsValidType%2A> 返回 `true` ，则返回的值将在回调中实现。</span><span class="sxs-lookup"><span data-stu-id="bbe41-240">If the dependency property does have a <xref:System.Windows.ValidateValueCallback>, and if <xref:System.Windows.DependencyProperty.IsValidType%2A> would have returned `true`, then the value returned will be as implemented in the callback.</span></span>  
  
 <span data-ttu-id="bbe41-241">空值是引用类型依赖属性或 <xref:System.Nullable%601> 依赖属性的有效值，并将在 `true` 这些情况下返回。</span><span class="sxs-lookup"><span data-stu-id="bbe41-241">A null value is a valid value for reference type dependency properties, or for a <xref:System.Nullable%601> dependency property, and would return `true` for these cases.</span></span> <span data-ttu-id="bbe41-242">如果依赖属性既不是引用也不是 <xref:System.Nullable%601> 类型， <xref:System.Windows.DependencyProperty.IsValidType%2A> 则将返回 `false` null 值而不是引发异常。</span><span class="sxs-lookup"><span data-stu-id="bbe41-242">In cases where the dependency property is neither a reference nor a <xref:System.Nullable%601> type, <xref:System.Windows.DependencyProperty.IsValidType%2A> will return `false` for a null value rather than raise an exception.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbe41-243">下面的示例在 <xref:System.Windows.DependencyProperty.IsValidValue%2A> 调用依赖属性之前使用作为检查 <xref:System.Windows.DependencyObject.SetValue%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-243">The following example uses <xref:System.Windows.DependencyProperty.IsValidValue%2A> as a check before calling <xref:System.Windows.DependencyObject.SetValue%2A> on the dependency property.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#trysetvaluewithvalidate)]
 [!code-vb[PropertySystemEsoterics#TrySetValueWithValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#trysetvaluewithvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.DependencyProperty.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bbe41-244">获取依赖属性的名称。</span><span class="sxs-lookup"><span data-stu-id="bbe41-244">Gets the name of the dependency property.</span></span></summary>
        <value><span data-ttu-id="bbe41-245">属性的名称。</span><span class="sxs-lookup"><span data-stu-id="bbe41-245">The name of the property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-246">此属性获取在 `name` 依赖项属性注册过程中作为参数提供的名称。</span><span class="sxs-lookup"><span data-stu-id="bbe41-246">This property gets the name provided as the `name` parameter during dependency property registration.</span></span> <span data-ttu-id="bbe41-247">此名称是不可变的，并且不能为 `null` 或空字符串。</span><span class="sxs-lookup"><span data-stu-id="bbe41-247">This name is immutable, and cannot be `null` or an empty string.</span></span> <span data-ttu-id="bbe41-248">不允许在同一所有者类型上进行重复的名称注册，并且当你尝试注册重复时，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="bbe41-248">Duplicate name registrations on the same owner type are not permitted, and will throw an exception when you attempt to register the duplicate.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="bbe41-249"><xref:System.Windows.DependencyProperty.Name%2A>依赖项属性的必须遵循与其依赖项属性标识符的名称相匹配的约定，而不是后缀 "property"。</span><span class="sxs-lookup"><span data-stu-id="bbe41-249">The <xref:System.Windows.DependencyProperty.Name%2A> of a dependency property must follow the convention of matching the name of its dependency property identifier minus the suffix "Property".</span></span> <span data-ttu-id="bbe41-250">有关详细信息，请参阅[自定义依赖属性](/dotnet/framework/wpf/advanced/custom-dependency-properties)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-250">For details, see [Custom Dependency Properties](/dotnet/framework/wpf/advanced/custom-dependency-properties).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbe41-251">下面的示例查询依赖属性标识符的各种特征，包括 <xref:System.Windows.DependencyProperty.Name%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-251">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.Name%2A>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OverrideMetadata">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bbe41-252">当此依赖属性位于指定类型的实例上时为其提供替换元数据（而不是在最初注册依赖属性时提供的元数据）。</span><span class="sxs-lookup"><span data-stu-id="bbe41-252">Supplies alternate metadata for this dependency property when it is present on instances of a specified type, versus the metadata that was provided in the initial dependency property registration.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="forType"><span data-ttu-id="bbe41-253">一种类型，在该类型上继承该依赖属性并将应用所提供的替换元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-253">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="bbe41-254">一种元数据，它将应用于重写类型上的依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-254">The metadata to apply to the dependency property on the overriding type.</span></span></param>
        <summary><span data-ttu-id="bbe41-255">当此依赖属性位于指定类型的实例上时为其指定替换元数据，以在该依赖属性继承自基类型时重写该属性已存在的元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-255">Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-256">应在属性系统使用依赖属性之前重写依赖属性元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-256">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="bbe41-257">这相当于使用注册依赖属性的类创建特定实例的时间。</span><span class="sxs-lookup"><span data-stu-id="bbe41-257">This equates to the time that specific instances are created using the class that registers the dependency property.</span></span> <span data-ttu-id="bbe41-258"><xref:System.Windows.DependencyProperty.OverrideMetadata%2A>只应在将自身作为此方法的参数的类型的静态构造函数中执行调用 `forType` ，或通过类似的实例化执行。</span><span class="sxs-lookup"><span data-stu-id="bbe41-258">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="bbe41-259">如果尝试在所有者类型的实例之后更改元数据，则不会引发异常，但会导致在属性系统中出现不一致的行为。</span><span class="sxs-lookup"><span data-stu-id="bbe41-259">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="bbe41-260">使用此方法建立特定派生类重写的元数据后，后续尝试重写此同一派生类上的元数据会引发异常。</span><span class="sxs-lookup"><span data-stu-id="bbe41-260">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="bbe41-261">提供的元数据与基所有者上存在的依赖属性的属性元数据合并在一起。</span><span class="sxs-lookup"><span data-stu-id="bbe41-261">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="bbe41-262">原始基本元数据中指定的所有特征都将保留;只有那些在新的元数据中特别更改的特性才会重写基本元数据的特性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-262">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="bbe41-263"><xref:System.Windows.PropertyMetadata.DefaultValue%2A>如果在新的元数据中指定了某些特性（如），则会将其替换。</span><span class="sxs-lookup"><span data-stu-id="bbe41-263">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="bbe41-264">其他类（如 <xref:System.Windows.PropertyChangedCallback> ）合并在一起。</span><span class="sxs-lookup"><span data-stu-id="bbe41-264">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="bbe41-265">最终，合并行为取决于用于重写的属性元数据类型，因此此处所述的行为适用于 WPF 依赖属性使用的现有属性元数据类。</span><span class="sxs-lookup"><span data-stu-id="bbe41-265">Ultimately, the merge behavior depends on the property metadata type being used for the override, so the behavior described here is for the existing property metadata classes used by WPF dependency properties.</span></span> <span data-ttu-id="bbe41-266">有关详细信息，请参阅 [依赖项属性元](/dotnet/framework/wpf/advanced/dependency-property-metadata) 数据和 [框架属性元数据](/dotnet/framework/wpf/advanced/framework-property-metadata)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-266">For details, see [Dependency Property Metadata](/dotnet/framework/wpf/advanced/dependency-property-metadata) and [Framework Property Metadata](/dotnet/framework/wpf/advanced/framework-property-metadata).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="bbe41-267">尝试重写只读依赖属性的元数据（不能使用此签名完成该操作）。</span><span class="sxs-lookup"><span data-stu-id="bbe41-267">An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="bbe41-268">已为依赖属性建立元数据，因为它存在于所提供的类型上。</span><span class="sxs-lookup"><span data-stu-id="bbe41-268">Metadata was already established for the dependency property as it exists on the provided type.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="OverrideMetadata">
      <MemberSignature Language="C#" Value="public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata, System.Windows.DependencyPropertyKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OverrideMetadata(class System.Type forType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.DependencyPropertyKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub OverrideMetadata (forType As Type, typeMetadata As PropertyMetadata, key As DependencyPropertyKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OverrideMetadata(Type ^ forType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::DependencyPropertyKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.OverrideMetadata : Type * System.Windows.PropertyMetadata * System.Windows.DependencyPropertyKey -&gt; unit" Usage="dependencyProperty.OverrideMetadata (forType, typeMetadata, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="key" Type="System.Windows.DependencyPropertyKey" />
      </Parameters>
      <Docs>
        <param name="forType"><span data-ttu-id="bbe41-269">一种类型，在该类型上继承该依赖属性并将应用所提供的替换元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-269">The type where this dependency property is inherited and where the provided alternate metadata will be applied.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="bbe41-270">一种元数据，它将应用于重写类型上的依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-270">The metadata to apply to the dependency property on the overriding type.</span></span></param>
        <param name="key"><span data-ttu-id="bbe41-271">只读依赖属性的访问键。</span><span class="sxs-lookup"><span data-stu-id="bbe41-271">The access key for a read-only dependency property.</span></span></param>
        <summary><span data-ttu-id="bbe41-272">当只读依赖属性位于指定类型的实例上时为其提供替换元数据，以便重写在最初注册依赖属性时提供的元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-272">Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration.</span></span> <span data-ttu-id="bbe41-273">你必须为只读依赖属性传递 <see cref="T:System.Windows.DependencyPropertyKey" />，以免引发异常。</span><span class="sxs-lookup"><span data-stu-id="bbe41-273">You must pass the <see cref="T:System.Windows.DependencyPropertyKey" /> for the read-only dependency property to avoid raising an exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-274">此签名为只读依赖项属性标识符 () 方法提供基础实现 <xref:System.Windows.DependencyPropertyKey> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-274">This signature provides underlying implementation for a read-only dependency property identifier (<xref:System.Windows.DependencyPropertyKey>) method.</span></span> <span data-ttu-id="bbe41-275">如果重写读写依赖项属性的元数据，请使用 <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-275">If overriding metadata for a read-write dependency property, use <xref:System.Windows.DependencyProperty.OverrideMetadata%28System.Type%2CSystem.Windows.PropertyMetadata%29>.</span></span>  
  
 <span data-ttu-id="bbe41-276">应在属性系统使用依赖属性之前重写依赖属性元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-276">Dependency property metadata should be overridden before the property system uses the dependency property.</span></span> <span data-ttu-id="bbe41-277">这相当于为注册依赖属性的类创建特定对象的时间。</span><span class="sxs-lookup"><span data-stu-id="bbe41-277">This equates to the time that specific objects are created for the class that registers the dependency property.</span></span> <span data-ttu-id="bbe41-278"><xref:System.Windows.DependencyProperty.OverrideMetadata%2A>只应在将自身作为此方法的参数的类型的静态构造函数中执行调用 `forType` ，或通过类似的实例化执行。</span><span class="sxs-lookup"><span data-stu-id="bbe41-278">Calls to <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> should only be performed within the static constructors of the type that provides itself as the `forType` parameter of this method, or through similar instantiation.</span></span> <span data-ttu-id="bbe41-279">如果尝试在所有者类型的实例之后更改元数据，则不会引发异常，但会导致在属性系统中出现不一致的行为。</span><span class="sxs-lookup"><span data-stu-id="bbe41-279">Attempting to change metadata after instances of the owner type exist will not raise exceptions, but will result in inconsistent behaviors in the property system.</span></span>  
  
 <span data-ttu-id="bbe41-280">使用此方法建立特定派生类重写的元数据后，后续尝试重写此同一派生类上的元数据会引发异常。</span><span class="sxs-lookup"><span data-stu-id="bbe41-280">After metadata for a particular derived class override is established with this method, subsequent attempts to override metadata on this same derived class will raise an exception.</span></span>  
  
 <span data-ttu-id="bbe41-281">提供的元数据与基所有者上存在的依赖属性的属性元数据合并在一起。</span><span class="sxs-lookup"><span data-stu-id="bbe41-281">The supplied metadata is merged with the property metadata for the dependency property as it exists on the base owner.</span></span> <span data-ttu-id="bbe41-282">原始基本元数据中指定的所有特征都将保留;只有那些在新的元数据中特别更改的特性才会重写基本元数据的特性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-282">Any characteristics that were specified in the original base metadata will persist; only those characteristics that were specifically changed in the new metadata will override the characteristics of the base metadata.</span></span> <span data-ttu-id="bbe41-283"><xref:System.Windows.PropertyMetadata.DefaultValue%2A>如果在新的元数据中指定了某些特性（如），则会将其替换。</span><span class="sxs-lookup"><span data-stu-id="bbe41-283">Some characteristics such as <xref:System.Windows.PropertyMetadata.DefaultValue%2A> are replaced if specified in the new metadata.</span></span> <span data-ttu-id="bbe41-284">其他类（如 <xref:System.Windows.PropertyChangedCallback> ）合并在一起。</span><span class="sxs-lookup"><span data-stu-id="bbe41-284">Others, such as <xref:System.Windows.PropertyChangedCallback>, are combined.</span></span> <span data-ttu-id="bbe41-285">合并行为取决于用于重写的属性元数据类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-285">The merge behavior depends on the property metadata type being used for the override.</span></span> <span data-ttu-id="bbe41-286">有关详细信息，请参阅 [依赖项属性元](/dotnet/framework/wpf/advanced/dependency-property-metadata) 数据和 [框架属性元数据](/dotnet/framework/wpf/advanced/framework-property-metadata)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-286">For details, see [Dependency Property Metadata](/dotnet/framework/wpf/advanced/dependency-property-metadata) and [Framework Property Metadata](/dotnet/framework/wpf/advanced/framework-property-metadata).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.DependencyProperty.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bbe41-287">获取使用属性系统注册依赖属性或者将自己作为属性所有者添加的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-287">Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.</span></span></summary>
        <value><span data-ttu-id="bbe41-288">注册属性或者将自己作为属性所有者添加的对象的类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-288">The type of the object that registered the property or added itself as owner of the property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-289">此值是在属性注册过程中提供的。</span><span class="sxs-lookup"><span data-stu-id="bbe41-289">This value was provided during property registration.</span></span> <span data-ttu-id="bbe41-290">如果是从调用生成的标识符，则所有者将是原始注册类型 <xref:System.Windows.DependencyProperty> <xref:System.Windows.DependencyProperty.Register%2A> ，或者是 <xref:System.Windows.DependencyProperty> 从调用生成的标识符添加自身作为所有者的类型 <xref:System.Windows.DependencyProperty.AddOwner%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-290">The owner will be either the original registering type in the case of a <xref:System.Windows.DependencyProperty> identifier generated from a <xref:System.Windows.DependencyProperty.Register%2A> call, or the type that added itself as owner in the case of a <xref:System.Windows.DependencyProperty> identifier generated from an <xref:System.Windows.DependencyProperty.AddOwner%2A> call.</span></span>  
  
 <span data-ttu-id="bbe41-291"><xref:System.Windows.DependencyProperty.OwnerType%2A>任何给定的 <xref:System.Windows.DependencyProperty> 都是不可变的，并且不能为 `null` 有效的 <xref:System.Windows.DependencyProperty> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-291">The <xref:System.Windows.DependencyProperty.OwnerType%2A> on any given <xref:System.Windows.DependencyProperty> is immutable, and cannot be `null` in a valid <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbe41-292">下面的示例基于依赖项属性标识符获取所有者类型 `dp` ，然后获取此同一标识符的所有者类型的元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-292">The following example gets the owner type based on a dependency property identifier `dp`, and then gets metadata on the owner type for that same identifier.</span></span> <span data-ttu-id="bbe41-293">此操作实际上等效于获取 <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> `dp` 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-293">This operation is actually equivalent to getting <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> on `dp`.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpgetmetadatasingle)]
 [!code-vb[PropertySystemEsoterics#DPGetMetadataSingle](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpgetmetadatasingle)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyType">
      <MemberSignature Language="C#" Value="public Type PropertyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PropertyType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.PropertyType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ PropertyType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyType : Type" Usage="System.Windows.DependencyProperty.PropertyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bbe41-294">获取依赖项对象用于其值的类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-294">Gets the type that the dependency property uses for its value.</span></span></summary>
        <value><span data-ttu-id="bbe41-295">属性值的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="bbe41-295">The <see cref="T:System.Type" /> of the property value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-296">此属性通过参数报告由原始属性注册声明的属性值的类型 `propertyType` 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-296">This property reports the type of the property's value as declared by the original property registration, through the `propertyType` parameter.</span></span> <span data-ttu-id="bbe41-297">与类似 <xref:System.Windows.DependencyProperty.Name%2A> ，依赖属性的属性类型在注册后是不可变的。</span><span class="sxs-lookup"><span data-stu-id="bbe41-297">Similar to the <xref:System.Windows.DependencyProperty.Name%2A>, the property type of a dependency property is immutable after registration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbe41-298">下面的示例查询依赖属性标识符的各种特征，包括 <xref:System.Windows.DependencyProperty.PropertyType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-298">The following example queries various characteristics of a dependency property identifier, including the <xref:System.Windows.DependencyProperty.PropertyType%2A>.</span></span> <span data-ttu-id="bbe41-299"><xref:System.Windows.DependencyProperty.PropertyType%2A>从返回的中获取的类型名称字符串 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-299">The type name string of the <xref:System.Windows.DependencyProperty.PropertyType%2A> is obtained from the returned <xref:System.Type>.</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadOnly : bool" Usage="System.Windows.DependencyProperty.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bbe41-300">获取一个值，该值指示由此 <see cref="T:System.Windows.DependencyProperty" /> 实例标识的依赖项对象是否为只读依赖项对象。</span><span class="sxs-lookup"><span data-stu-id="bbe41-300">Gets a value that indicates whether the dependency property identified by this <see cref="T:System.Windows.DependencyProperty" /> instance is a read-only dependency property.</span></span></summary>
        <value><span data-ttu-id="bbe41-301">如果该依赖项对象为只读属性，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="bbe41-301"><see langword="true" /> if the dependency property is read-only; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-302">只读依赖属性是通过调用 <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> 方法（而不是方法）在属性系统中注册的 <xref:System.Windows.DependencyProperty.Register%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-302">Read-only dependency properties are registered within the property system by calling the <xref:System.Windows.DependencyProperty.RegisterReadOnly%2A> method as opposed to the <xref:System.Windows.DependencyProperty.Register%2A> method.</span></span> <span data-ttu-id="bbe41-303">附加属性还可以注册为只读属性;请参阅 <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-303">Attached properties can also be registered as read-only; see <xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>.</span></span>  
  
 <span data-ttu-id="bbe41-304">只读依赖属性需要 <xref:System.Windows.DependencyPropertyKey> 标识符而不是 <xref:System.Windows.DependencyProperty> 标识符来执行元数据操作，例如重写元数据或设置值。</span><span class="sxs-lookup"><span data-stu-id="bbe41-304">Read-only dependency properties require a <xref:System.Windows.DependencyPropertyKey> identifier rather than a <xref:System.Windows.DependencyProperty> identifier to perform metadata operations such as overriding the metadata or setting the value.</span></span> <span data-ttu-id="bbe41-305">如果已 <xref:System.Windows.DependencyProperty> 通过调用或其他公开标识符的 API 获取了标识符的集合 <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> ，请检查该值， <xref:System.Windows.DependencyProperty.ReadOnly%2A> 然后再尝试调用， <xref:System.Windows.DependencyObject.SetValue%2A> 或 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> 使用该依赖项属性标识符作为输入参数来验证该标识符所表示的依赖项属性是否不是只读的。</span><span class="sxs-lookup"><span data-stu-id="bbe41-305">If you obtained a collection of <xref:System.Windows.DependencyProperty> identifiers through a call to <xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> or another API that exposes identifiers, check the <xref:System.Windows.DependencyProperty.ReadOnly%2A> value before attempting to call <xref:System.Windows.DependencyObject.SetValue%2A> or <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> using that dependency property identifier as an input parameter, to verify that the dependency property that the identifier represents is not read-only.</span></span> <span data-ttu-id="bbe41-306">如果的值 <xref:System.Windows.DependencyProperty.ReadOnly%2A> `true` 在依赖属性上，则无法通过编程方式 <xref:System.Windows.DependencyPropertyKey> 从元数据或标识符获取对该依赖项属性的标识符的引用 <xref:System.Windows.DependencyProperty> ; 该标识符必须可用作静态字段，才能对 <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> 只读依赖属性进行调用。</span><span class="sxs-lookup"><span data-stu-id="bbe41-306">If the value of <xref:System.Windows.DependencyProperty.ReadOnly%2A> is `true` on a dependency property, there is no programmatic way to obtain a reference to the <xref:System.Windows.DependencyPropertyKey> identifier of that dependency property, from the metadata or from the <xref:System.Windows.DependencyProperty> identifier; the identifier must be available as a static field in order to call <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> against a read-only dependency property.</span></span>  
  
 <span data-ttu-id="bbe41-307">当你创建自定义依赖属性，并将其注册为只读时，你只应为 CLR 包装属性定义 get 访问器。</span><span class="sxs-lookup"><span data-stu-id="bbe41-307">When you create a custom dependency property, and register it as read-only, you should define only a get accessor for the CLR wrapper property.</span></span> <span data-ttu-id="bbe41-308">否则，与支持依赖项属性的访问相比，你的类将具有属性包装的混乱的对象模型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-308">Otherwise, your class will have a confusing object model for the property wrapper as compared to the access to the backing dependency property.</span></span> <span data-ttu-id="bbe41-309">有关详细信息，请参阅 [自定义依赖属性](/dotnet/framework/wpf/advanced/custom-dependency-properties) 或 [只读依赖项属性](/dotnet/framework/wpf/advanced/read-only-dependency-properties)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-309">For details, see [Custom Dependency Properties](/dotnet/framework/wpf/advanced/custom-dependency-properties) or [Read-Only Dependency Properties](/dotnet/framework/wpf/advanced/read-only-dependency-properties).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbe41-310">下面的示例从各种依赖属性字段获取默认的元数据和依赖属性标识符属性，并使用该信息来填充表以实现 "元数据浏览器"。</span><span class="sxs-lookup"><span data-stu-id="bbe41-310">The following example obtains the default metadata and the dependency property identifier properties from various dependency property fields, and uses the information to populate a table to implement a "metadata browser".</span></span>  
  
 [!code-csharp[PropertySystemEsoterics#DPProps](~/samples/snippets/csharp/VS_Snippets_Wpf/PropertySystemEsoterics/CSharp/XAMLAPP/page2.xaml.cs#dpprops)]
 [!code-vb[PropertySystemEsoterics#DPProps](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PropertySystemEsoterics/visualbasic/xamlapp/page2.xaml.vb#dpprops)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Register">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bbe41-311">注册依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-311">Registers a dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="bbe41-312">要注册的依赖属性的名称。</span><span class="sxs-lookup"><span data-stu-id="bbe41-312">The name of the dependency property to register.</span></span> <span data-ttu-id="bbe41-313">名称必须在所有者类型的注册命名空间中是唯一的。</span><span class="sxs-lookup"><span data-stu-id="bbe41-313">The name must be unique within the registration namespace of the owner type.</span></span></param>
        <param name="propertyType"><span data-ttu-id="bbe41-314">属性的类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-314">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="bbe41-315">正在注册依赖属性的所有者类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-315">The owner type that is registering the dependency property.</span></span></param>
        <summary><span data-ttu-id="bbe41-316">使用指定的属性名称、属性类型和所有者类型注册依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-316">Registers a dependency property with the specified property name, property type, and owner type.</span></span></summary>
        <returns><span data-ttu-id="bbe41-317">一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" /> 字段的值。</span><span class="sxs-lookup"><span data-stu-id="bbe41-317">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="bbe41-318">稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。</span><span class="sxs-lookup"><span data-stu-id="bbe41-318">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-319">有关依赖属性注册的详细信息，请参阅 <xref:System.Windows.DependencyProperty> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-319">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 [!code-csharp[WPFAquariumSln#Register3Param](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#register3param)]
 [!code-vb[WPFAquariumSln#Register3Param](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#register3param)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="bbe41-320">要注册的依赖属性的名称。</span><span class="sxs-lookup"><span data-stu-id="bbe41-320">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="bbe41-321">属性的类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-321">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="bbe41-322">正在注册依赖属性的所有者类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-322">The owner type that is registering the dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="bbe41-323">依赖属性的属性元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-323">Property metadata for the dependency property.</span></span></param>
        <summary><span data-ttu-id="bbe41-324">使用指定的属性名称、属性类型、所有者类型和属性元数据注册依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-324">Registers a dependency property with the specified property name, property type, owner type, and property metadata.</span></span></summary>
        <returns><span data-ttu-id="bbe41-325">一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" /> 字段的值。</span><span class="sxs-lookup"><span data-stu-id="bbe41-325">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="bbe41-326">稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。</span><span class="sxs-lookup"><span data-stu-id="bbe41-326">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-327">有关依赖属性注册的详细信息，请参阅 <xref:System.Windows.DependencyProperty> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-327">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty Register (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty Register(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Register (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata, validateValueCallback As ValidateValueCallback) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ Register(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member Register : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.Register (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="bbe41-328">要注册的依赖属性的名称。</span><span class="sxs-lookup"><span data-stu-id="bbe41-328">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="bbe41-329">属性的类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-329">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="bbe41-330">正在注册依赖属性的所有者类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-330">The owner type that is registering the dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="bbe41-331">依赖属性的属性元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-331">Property metadata for the dependency property.</span></span></param>
        <param name="validateValueCallback"><span data-ttu-id="bbe41-332">对回调的引用，除了典型的类型验证之外，该引用还应执行依赖属性值的任何自定义验证。</span><span class="sxs-lookup"><span data-stu-id="bbe41-332">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span></span></param>
        <summary><span data-ttu-id="bbe41-333">使用指定的属性名称、属性类型、所有者类型、属性元数据和属性的值验证回叫来注册依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-333">Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.</span></span></summary>
        <returns><span data-ttu-id="bbe41-334">一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" /> 字段的值。</span><span class="sxs-lookup"><span data-stu-id="bbe41-334">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="bbe41-335">稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。</span><span class="sxs-lookup"><span data-stu-id="bbe41-335">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-336">有关依赖属性注册的详细信息，请参阅 <xref:System.Windows.DependencyProperty> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-336">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbe41-337">下面的示例将注册一个依赖项属性，包括验证回调 (不显示回调定义;有关回调定义的详细信息，请参阅 <xref:System.Windows.ValidateValueCallback>) 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-337">The following example registers a dependency property, including a validation callback (the callback definition is not shown; for details on the callback definition, see <xref:System.Windows.ValidateValueCallback>).</span></span>  
  
 [!code-csharp[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCallbackOverride/CSharp/SDKSampleLibrary/class1.cs#currentdefinitionwithwrapper)]
 [!code-vb[DPCallbackOverride#CurrentDefinitionWithWrapper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCallbackOverride/visualbasic/sdksamplelibrary/class1.vb#currentdefinitionwithwrapper)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttached">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bbe41-338">在属性系统上注册附加属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-338">Registers an attached property with the property system.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="bbe41-339">要注册的依赖属性的名称。</span><span class="sxs-lookup"><span data-stu-id="bbe41-339">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="bbe41-340">属性的类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-340">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="bbe41-341">正在注册依赖属性的所有者类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-341">The owner type that is registering the dependency property.</span></span></param>
        <summary><span data-ttu-id="bbe41-342">使用指定的属性名称、属性类型和所有者类型注册附加属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-342">Registers an attached property with the specified property name, property type, and owner type.</span></span></summary>
        <returns><span data-ttu-id="bbe41-343">一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" /> 字段的值。</span><span class="sxs-lookup"><span data-stu-id="bbe41-343">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="bbe41-344">稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。</span><span class="sxs-lookup"><span data-stu-id="bbe41-344">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-345">附加属性是 Extensible Application Markup Language (XAML) 定义的属性概念。</span><span class="sxs-lookup"><span data-stu-id="bbe41-345">An attached property is a property concept defined by Extensible Application Markup Language (XAML).</span></span> <span data-ttu-id="bbe41-346">WPF 实现附加属性作为依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-346">WPF implements attached properties as dependency properties.</span></span> <span data-ttu-id="bbe41-347">因为 WPF 附加属性是依赖属性，所以它们可以应用元数据，常规属性系统可以使用这些元数据来执行报表布局特征等操作。</span><span class="sxs-lookup"><span data-stu-id="bbe41-347">Because the WPF attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="bbe41-348">有关详细信息，请参阅[附加属性概述](/dotnet/framework/wpf/advanced/attached-properties-overview)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-348">For more information, see [Attached Properties Overview](/dotnet/framework/wpf/advanced/attached-properties-overview).</span></span>  
  
 <span data-ttu-id="bbe41-349">有关依赖属性注册的详细信息，请参阅 <xref:System.Windows.DependencyProperty> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-349">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbe41-350">下面的示例使用此签名在抽象类上注册附加属性 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-350">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="bbe41-351">要注册的依赖属性的名称。</span><span class="sxs-lookup"><span data-stu-id="bbe41-351">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="bbe41-352">属性的类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-352">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="bbe41-353">正在注册依赖属性的所有者类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-353">The owner type that is registering the dependency property.</span></span></param>
        <param name="defaultMetadata"><span data-ttu-id="bbe41-354">依赖属性的属性元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-354">Property metadata for the dependency property.</span></span> <span data-ttu-id="bbe41-355">这可以包括默认值和其他特征。</span><span class="sxs-lookup"><span data-stu-id="bbe41-355">This can include the default value as well as other characteristics.</span></span></param>
        <summary><span data-ttu-id="bbe41-356">使用指定的属性名、属性类型、所有者类型和属性元数据注册附加的属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-356">Registers an attached property with the specified property name, property type, owner type, and property metadata.</span></span></summary>
        <returns><span data-ttu-id="bbe41-357">一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" /> 字段的值。</span><span class="sxs-lookup"><span data-stu-id="bbe41-357">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="bbe41-358">稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。</span><span class="sxs-lookup"><span data-stu-id="bbe41-358">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-359">附加属性是 Extensible Application Markup Language (XAML) 定义的属性概念。</span><span class="sxs-lookup"><span data-stu-id="bbe41-359">An attached property is a property concept defined by Extensible Application Markup Language (XAML).</span></span> <span data-ttu-id="bbe41-360">WPF 实现附加属性作为依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-360">WPF implements attached properties as dependency properties.</span></span> <span data-ttu-id="bbe41-361">因为 WPF 附加属性是依赖属性，所以它们可以应用元数据，常规属性系统可以使用这些元数据来执行报表布局特征等操作。</span><span class="sxs-lookup"><span data-stu-id="bbe41-361">Because the WPF attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="bbe41-362">有关详细信息，请参阅[附加属性概述](/dotnet/framework/wpf/advanced/attached-properties-overview)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-362">For more information, see [Attached Properties Overview](/dotnet/framework/wpf/advanced/attached-properties-overview).</span></span>  
  
 <span data-ttu-id="bbe41-363">有关依赖属性注册的详细信息，请参阅 <xref:System.Windows.DependencyProperty> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-363">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="bbe41-364">使用 System.windows.dependencyproperty.registerattached 进行值继承依赖属性</span><span class="sxs-lookup"><span data-stu-id="bbe41-364">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="bbe41-365">使用代替来注册依赖属性的一个特定方案 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> <xref:System.Windows.DependencyProperty.Register%2A> 是支持属性值继承。</span><span class="sxs-lookup"><span data-stu-id="bbe41-365">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="bbe41-366">你应注册值继承依赖属性 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> ，即使类定义公开依赖属性的属性包装访问器，甚至不打算公开 Get \* 和 Set \* 静态方法以提供真正的附加属性支持访问器。</span><span class="sxs-lookup"><span data-stu-id="bbe41-366">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get\* and Set\* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="bbe41-367">尽管属性值继承可能看起来适用于非附加的依赖属性，但通过运行时树中的某些元素边界的非附加属性的继承行为是不确定的。</span><span class="sxs-lookup"><span data-stu-id="bbe41-367">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="bbe41-368">将属性注册为 "附加" 会有效地将附加属性作为全局属性附加到属性系统，并确保属性值继承在元素树中的所有边界上都有效。</span><span class="sxs-lookup"><span data-stu-id="bbe41-368">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="bbe41-369">始终使用 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 来注册在 <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> 元数据中指定的属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-369">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="bbe41-370">有关详细信息，请参阅[属性值继承](/dotnet/framework/wpf/advanced/property-value-inheritance)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-370">For more information, see [Property Value Inheritance](/dotnet/framework/wpf/advanced/property-value-inheritance).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterAttached">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyProperty RegisterAttached (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyProperty RegisterAttached(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttached (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata, validateValueCallback As ValidateValueCallback) As DependencyProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyProperty ^ RegisterAttached(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttached : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyProperty" Usage="System.Windows.DependencyProperty.RegisterAttached (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="bbe41-371">要注册的依赖属性的名称。</span><span class="sxs-lookup"><span data-stu-id="bbe41-371">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="bbe41-372">属性的类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-372">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="bbe41-373">正在注册依赖属性的所有者类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-373">The owner type that is registering the dependency property.</span></span></param>
        <param name="defaultMetadata"><span data-ttu-id="bbe41-374">依赖属性的属性元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-374">Property metadata for the dependency property.</span></span> <span data-ttu-id="bbe41-375">这可以包括默认值和其他特征。</span><span class="sxs-lookup"><span data-stu-id="bbe41-375">This can include the default value as well as other characteristics.</span></span></param>
        <param name="validateValueCallback"><span data-ttu-id="bbe41-376">对回调的引用，除了典型的类型验证之外，该引用还应执行依赖属性值的任何自定义验证。</span><span class="sxs-lookup"><span data-stu-id="bbe41-376">A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.</span></span></param>
        <summary><span data-ttu-id="bbe41-377">使用指定的属性类型、所有者类型、属性元数据和属性的值验证回调来注册附加属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-377">Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.</span></span></summary>
        <returns><span data-ttu-id="bbe41-378">一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" /> 字段的值。</span><span class="sxs-lookup"><span data-stu-id="bbe41-378">A dependency property identifier that should be used to set the value of a <see langword="public static readonly" /> field in your class.</span></span> <span data-ttu-id="bbe41-379">稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。</span><span class="sxs-lookup"><span data-stu-id="bbe41-379">That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-380">附加属性是 Extensible Application Markup Language (XAML) 定义的属性概念。</span><span class="sxs-lookup"><span data-stu-id="bbe41-380">An attached property is a property concept defined by Extensible Application Markup Language (XAML).</span></span> <span data-ttu-id="bbe41-381">WPF 实现附加属性作为依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-381">WPF implements attached properties as dependency properties.</span></span> <span data-ttu-id="bbe41-382">因为 WPF 附加属性是依赖属性，所以它们可以应用元数据，常规属性系统可以使用这些元数据来执行报表布局特征等操作。</span><span class="sxs-lookup"><span data-stu-id="bbe41-382">Because the WPF attached properties are dependency properties, they can have metadata applied that can be used by the general property system for operations such as reporting layout characteristics.</span></span> <span data-ttu-id="bbe41-383">有关详细信息，请参阅[附加属性概述](/dotnet/framework/wpf/advanced/attached-properties-overview)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-383">For more information, see [Attached Properties Overview](/dotnet/framework/wpf/advanced/attached-properties-overview).</span></span>  
  
 <span data-ttu-id="bbe41-384">有关依赖属性注册的详细信息，请参阅 <xref:System.Windows.DependencyProperty> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-384">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="bbe41-385">使用 System.windows.dependencyproperty.registerattached 进行值继承依赖属性</span><span class="sxs-lookup"><span data-stu-id="bbe41-385">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="bbe41-386">使用代替来注册依赖属性的一个特定方案 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> <xref:System.Windows.DependencyProperty.Register%2A> 是支持属性值继承。</span><span class="sxs-lookup"><span data-stu-id="bbe41-386">One particular scenario for registering a dependency property with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="bbe41-387">你应注册值继承依赖属性 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> ，即使类定义公开依赖属性的属性包装访问器，甚至不打算公开 Get \* 和 Set \* 静态方法以提供真正的附加属性支持访问器。</span><span class="sxs-lookup"><span data-stu-id="bbe41-387">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get\* and Set\* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="bbe41-388">尽管属性值继承可能看起来适用于非附加的依赖属性，但通过运行时树中的某些元素边界的非附加属性的继承行为是不确定的。</span><span class="sxs-lookup"><span data-stu-id="bbe41-388">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="bbe41-389">将属性注册为 "附加" 会有效地将附加属性作为全局属性附加到属性系统，并确保属性值继承在元素树中的所有边界上都有效。</span><span class="sxs-lookup"><span data-stu-id="bbe41-389">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="bbe41-390">始终使用 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 来注册在 <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> 元数据中指定的属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-390">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="bbe41-391">有关详细信息，请参阅[属性值继承](/dotnet/framework/wpf/advanced/property-value-inheritance)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-391">For more information, see [Property Value Inheritance](/dotnet/framework/wpf/advanced/property-value-inheritance).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbe41-392">下面的示例使用此签名在抽象类上注册附加属性 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-392">The following example registers an attached property on an abstract class using this <xref:System.Windows.DependencyProperty.RegisterAttached%2A> signature.</span></span> <span data-ttu-id="bbe41-393">此附加属性是一个枚举类型属性，注册将添加一个验证回调，以验证提供的值是否为枚举的值。</span><span class="sxs-lookup"><span data-stu-id="bbe41-393">This attached property is an enumeration type property, and the registration adds a validation callback to verify that the provided value is a value of the enumeration.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#registerattachedbubbler2)]
 [!code-vb[WPFAquariumSln#RegisterAttachedBubbler2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#registerattachedbubbler2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
        <altmember cref="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterAttachedReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bbe41-394">注册只读附加属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-394">Registers a read-only attached property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttachedReadOnly (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="bbe41-395">要注册的依赖属性的名称。</span><span class="sxs-lookup"><span data-stu-id="bbe41-395">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="bbe41-396">属性的类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-396">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="bbe41-397">正在注册依赖属性的所有者类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-397">The owner type that is registering the dependency property.</span></span></param>
        <param name="defaultMetadata"><span data-ttu-id="bbe41-398">依赖属性的属性元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-398">Property metadata for the dependency property.</span></span></param>
        <summary><span data-ttu-id="bbe41-399">使用指定的属性名称、所有者类型和属性元数据注册只读附加属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-399">Registers a read-only attached property, with the specified property type, owner type, and property metadata.</span></span></summary>
        <returns><span data-ttu-id="bbe41-400">一个依赖属性键，此键应用于设置你的类中静态只读字段的值，该值稍后被用于引用该依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-400">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-401">此方法返回类型 <xref:System.Windows.DependencyPropertyKey> ，而 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 返回类型 <xref:System.Windows.DependencyProperty> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-401">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="bbe41-402">通常，表示只读属性的键不会成为公共的，因为键可用于通过调用设置依赖属性值 <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-402">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="bbe41-403">你的类设计将影响你的需求，但通常建议仅将对某些代码部分的访问权限和可见性限制为 <xref:System.Windows.DependencyPropertyKey> 类或应用程序逻辑的一部分设置该依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-403">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="bbe41-404">还建议为只读依赖项属性公开依赖项属性标识符，方法是将的值公开 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> 为 `public static readonly` 类的字段。</span><span class="sxs-lookup"><span data-stu-id="bbe41-404">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="bbe41-405">只读附加属性是一种罕见方案，因为附加属性的主要方案是它在 XAML 中的使用。</span><span class="sxs-lookup"><span data-stu-id="bbe41-405">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in XAML.</span></span> <span data-ttu-id="bbe41-406">如果没有公共 setter，则无法在 XAML 语法中设置附加属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-406">Without a public setter, an attached property cannot be set in XAML syntax.</span></span>  
  
 <span data-ttu-id="bbe41-407">有关依赖属性注册的详细信息，请参阅 <xref:System.Windows.DependencyProperty> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-407">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="bbe41-408">使用 System.windows.dependencyproperty.registerattached 进行值继承依赖属性</span><span class="sxs-lookup"><span data-stu-id="bbe41-408">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="bbe41-409">将依赖属性注册为附加属性的一个特别方案是支持属性值继承。</span><span class="sxs-lookup"><span data-stu-id="bbe41-409">One particular scenario for registering a dependency property as attached is to support property value inheritance.</span></span> <span data-ttu-id="bbe41-410">你应注册值继承依赖属性 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> ，即使类定义公开依赖属性的属性包装访问器，甚至不打算公开 Get \* 和 Set \* 静态方法以提供真正的附加属性支持访问器。</span><span class="sxs-lookup"><span data-stu-id="bbe41-410">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get\* and Set\* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="bbe41-411">尽管属性值继承可能看起来适用于非附加的依赖属性，但通过运行时树中的某些元素边界的非附加属性的继承行为是不确定的。</span><span class="sxs-lookup"><span data-stu-id="bbe41-411">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="bbe41-412">将属性注册为 "附加" 会有效地将附加属性作为全局属性附加到属性系统，并确保属性值继承在元素树中的所有边界上都有效。</span><span class="sxs-lookup"><span data-stu-id="bbe41-412">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="bbe41-413">始终使用 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 来注册在 <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> 元数据中指定的属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-413">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="bbe41-414">有关详细信息，请参阅[属性值继承](/dotnet/framework/wpf/advanced/property-value-inheritance)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-414">For more information, see [Property Value Inheritance](/dotnet/framework/wpf/advanced/property-value-inheritance).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAttachedReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterAttachedReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata defaultMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterAttachedReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata defaultMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterAttachedReadOnly (name As String, propertyType As Type, ownerType As Type, defaultMetadata As PropertyMetadata, validateValueCallback As ValidateValueCallback) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterAttachedReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ defaultMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterAttachedReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterAttachedReadOnly (name, propertyType, ownerType, defaultMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="defaultMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="bbe41-415">要注册的依赖属性的名称。</span><span class="sxs-lookup"><span data-stu-id="bbe41-415">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="bbe41-416">属性的类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-416">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="bbe41-417">正在注册依赖属性的所有者类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-417">The owner type that is registering the dependency property.</span></span></param>
        <param name="defaultMetadata"><span data-ttu-id="bbe41-418">依赖属性的属性元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-418">Property metadata for the dependency property.</span></span></param>
        <param name="validateValueCallback"><span data-ttu-id="bbe41-419">对用户创建的回调的引用，除了典型的类型验证之外，该引用还应执行依赖属性值的任何自定义验证。</span><span class="sxs-lookup"><span data-stu-id="bbe41-419">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span></span></param>
        <summary><span data-ttu-id="bbe41-420">使用指定的属性类型、所有者类型、属性元数据和验证回调来注册只读附加属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-420">Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.</span></span></summary>
        <returns><span data-ttu-id="bbe41-421">一个依赖属性键，应使用它在类中设置静态只读字段的值，然后使用该字段的值引用依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-421">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-422">此方法返回类型 <xref:System.Windows.DependencyPropertyKey> ，而 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 返回类型 <xref:System.Windows.DependencyProperty> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-422">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="bbe41-423">通常，表示类型的键 <xref:System.Windows.DependencyProperty> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-423">Typically, the keys that represent the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="bbe41-424">通常，表示只读属性的键不会成为公共的，因为键可用于通过调用设置依赖属性值 <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-424">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="bbe41-425">你的类设计将影响你的需求，但通常建议仅将对某些代码部分的访问权限和可见性限制为 <xref:System.Windows.DependencyPropertyKey> 类或应用程序逻辑的一部分设置该依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-425">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="bbe41-426">还建议为只读依赖项属性公开依赖项属性标识符，方法是将的值公开 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> 为 `public static readonly` 类的字段。</span><span class="sxs-lookup"><span data-stu-id="bbe41-426">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="bbe41-427">只读附加属性是一种罕见方案，因为附加属性的主要方案是它在 XAML 中的使用。</span><span class="sxs-lookup"><span data-stu-id="bbe41-427">Read-only attached properties are a rare scenario, because the primary scenario for an attached property is its use in XAML.</span></span> <span data-ttu-id="bbe41-428">如果没有公共 setter，则无法在 XAML 语法中设置附加属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-428">Without a public setter, an attached property cannot be set in XAML syntax.</span></span>  
  
 <span data-ttu-id="bbe41-429">有关依赖属性注册的详细信息，请参阅 <xref:System.Windows.DependencyProperty> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-429">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
## <a name="use-registerattached-for-value-inheriting-dependency-properties"></a><span data-ttu-id="bbe41-430">使用 System.windows.dependencyproperty.registerattached 进行值继承依赖属性</span><span class="sxs-lookup"><span data-stu-id="bbe41-430">Use RegisterAttached for Value-inheriting Dependency Properties</span></span>  
 <span data-ttu-id="bbe41-431">将依赖属性注册为附加属性（而不是）的一种特殊方案 <xref:System.Windows.DependencyProperty.Register%2A> 是支持属性值继承。</span><span class="sxs-lookup"><span data-stu-id="bbe41-431">One particular scenario for registering a dependency property as attached instead of <xref:System.Windows.DependencyProperty.Register%2A> is to support property value inheritance.</span></span> <span data-ttu-id="bbe41-432">你应注册值继承依赖属性 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> ，即使类定义公开依赖属性的属性包装访问器，甚至不打算公开 Get \* 和 Set \* 静态方法以提供真正的附加属性支持访问器。</span><span class="sxs-lookup"><span data-stu-id="bbe41-432">You should register value-inheriting dependency properties with <xref:System.Windows.DependencyProperty.RegisterAttached%2A> even if the class defines property wrapper accessors that expose the dependency property, and even if you do not intend to expose Get\* and Set\* static methods to provide true attached property support accessors.</span></span>   <span data-ttu-id="bbe41-433">尽管属性值继承可能看起来适用于非附加的依赖属性，但通过运行时树中的某些元素边界的非附加属性的继承行为是不确定的。</span><span class="sxs-lookup"><span data-stu-id="bbe41-433">Although property value inheritance might appear to work for nonattached dependency properties, the inheritance behavior for a nonattached property through certain element boundaries in the runtime tree is undefined.</span></span> <span data-ttu-id="bbe41-434">将属性注册为 "附加" 会有效地将附加属性作为全局属性附加到属性系统，并确保属性值继承在元素树中的所有边界上都有效。</span><span class="sxs-lookup"><span data-stu-id="bbe41-434">Registering the property as attached effectively makes the attached property a global property to the property system, and assures that property value inheritance works across all boundaries in an element tree.</span></span> <span data-ttu-id="bbe41-435">始终使用 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 来注册在 <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> 元数据中指定的属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-435">Always use <xref:System.Windows.DependencyProperty.RegisterAttached%2A> to register properties where you specify <xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A> in the metadata.</span></span> <span data-ttu-id="bbe41-436">有关详细信息，请参阅[属性值继承](/dotnet/framework/wpf/advanced/property-value-inheritance)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-436">For more information, see [Property Value Inheritance](/dotnet/framework/wpf/advanced/property-value-inheritance).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterReadOnly">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="bbe41-437">将依赖属性注册为只读依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-437">Registers a dependency property as a read-only dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterReadOnly (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="bbe41-438">要注册的依赖属性的名称。</span><span class="sxs-lookup"><span data-stu-id="bbe41-438">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="bbe41-439">属性的类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-439">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="bbe41-440">正在注册依赖属性的所有者类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-440">The owner type that is registering the dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="bbe41-441">依赖属性的属性元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-441">Property metadata for the dependency property.</span></span></param>
        <summary><span data-ttu-id="bbe41-442">使用指定的属性名称、所有者类型和属性元数据注册只读依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-442">Registers a read-only dependency property, with the specified property type, owner type, and property metadata.</span></span></summary>
        <returns><span data-ttu-id="bbe41-443">一个依赖属性键，应使用它在类中设置静态只读字段的值，然后使用该字段的值引用依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-443">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-444">此方法返回类型 <xref:System.Windows.DependencyPropertyKey> ，而 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 返回类型 <xref:System.Windows.DependencyProperty> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-444">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="bbe41-445">通常，表示只读属性的键不会成为公共的，因为键可用于通过调用设置依赖属性值 <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-445">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="bbe41-446">你的类设计将影响你的需求，但通常建议仅将对某些代码部分的访问权限和可见性限制为 <xref:System.Windows.DependencyPropertyKey> 类或应用程序逻辑的一部分设置该依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-446">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="bbe41-447">还建议为只读依赖项属性公开依赖项属性标识符，方法是将的值公开 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> 为 `public static readonly` 类的字段。</span><span class="sxs-lookup"><span data-stu-id="bbe41-447">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="bbe41-448">只读依赖属性在现有 API 和自定义方案中都是相当典型的方案，因为其他 WPF 功能可能需要依赖属性，即使该属性不是由调用方设置的。</span><span class="sxs-lookup"><span data-stu-id="bbe41-448">Read-only dependency properties are a fairly typical scenario both in the existing API and for customization scenarios, because other WPF features might require a dependency property even if that property is not intended to be settable by callers.</span></span> <span data-ttu-id="bbe41-449">您可以使用只读依赖属性的值作为采用依赖属性的其他属性系统操作的基础，例如以 <xref:System.Windows.Trigger> 样式中的依赖属性为基础。</span><span class="sxs-lookup"><span data-stu-id="bbe41-449">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="bbe41-450">有关依赖属性注册的详细信息，请参阅 <xref:System.Windows.DependencyProperty> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-450">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="bbe41-451">下面的示例将 `AquariumSize` 依赖属性注册为只读。</span><span class="sxs-lookup"><span data-stu-id="bbe41-451">The following example registers an `AquariumSize` dependency property as read-only.</span></span> <span data-ttu-id="bbe41-452">该示例将定义 `AquariumSizeKey` 为内部键 (，以便程序集中的其他类可以重写元数据) ，并基于该密钥公开依赖项属性标识符 `AquariumSizeProperty` 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-452">The example defines `AquariumSizeKey` as an internal key (so that other classes in the assembly could override metadata) and exposes the dependency property identifier based on that key as `AquariumSizeProperty`.</span></span> <span data-ttu-id="bbe41-453">此外，为创建一个包装 `AquariumSize` ，只使用一个 get 访问器。</span><span class="sxs-lookup"><span data-stu-id="bbe41-453">Also, a wrapper is created for `AquariumSize`, with only a get accessor.</span></span>  
  
 [!code-csharp[WPFAquariumSln#RODP](~/samples/snippets/csharp/VS_Snippets_Wpf/WPFAquariumSln/CSharp/WPFAquariumObjects/Class1.cs#rodp)]
 [!code-vb[WPFAquariumSln#RODP](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WPFAquariumSln/visualbasic/wpfaquariumobjects/class1.vb#rodp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterReadOnly">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyPropertyKey RegisterReadOnly (string name, Type propertyType, Type ownerType, System.Windows.PropertyMetadata typeMetadata, System.Windows.ValidateValueCallback validateValueCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyPropertyKey RegisterReadOnly(string name, class System.Type propertyType, class System.Type ownerType, class System.Windows.PropertyMetadata typeMetadata, class System.Windows.ValidateValueCallback validateValueCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterReadOnly (name As String, propertyType As Type, ownerType As Type, typeMetadata As PropertyMetadata, validateValueCallback As ValidateValueCallback) As DependencyPropertyKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyPropertyKey ^ RegisterReadOnly(System::String ^ name, Type ^ propertyType, Type ^ ownerType, System::Windows::PropertyMetadata ^ typeMetadata, System::Windows::ValidateValueCallback ^ validateValueCallback);" />
      <MemberSignature Language="F#" Value="static member RegisterReadOnly : string * Type * Type * System.Windows.PropertyMetadata * System.Windows.ValidateValueCallback -&gt; System.Windows.DependencyPropertyKey" Usage="System.Windows.DependencyProperty.RegisterReadOnly (name, propertyType, ownerType, typeMetadata, validateValueCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="propertyType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
        <Parameter Name="typeMetadata" Type="System.Windows.PropertyMetadata" />
        <Parameter Name="validateValueCallback" Type="System.Windows.ValidateValueCallback" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="bbe41-454">要注册的依赖属性的名称。</span><span class="sxs-lookup"><span data-stu-id="bbe41-454">The name of the dependency property to register.</span></span></param>
        <param name="propertyType"><span data-ttu-id="bbe41-455">属性的类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-455">The type of the property.</span></span></param>
        <param name="ownerType"><span data-ttu-id="bbe41-456">正在注册依赖属性的所有者类型。</span><span class="sxs-lookup"><span data-stu-id="bbe41-456">The owner type that is registering the dependency property.</span></span></param>
        <param name="typeMetadata"><span data-ttu-id="bbe41-457">依赖属性的属性元数据。</span><span class="sxs-lookup"><span data-stu-id="bbe41-457">Property metadata for the dependency property.</span></span></param>
        <param name="validateValueCallback"><span data-ttu-id="bbe41-458">对用户创建的回调的引用，除了典型的类型验证之外，该引用还应执行依赖属性值的任何自定义验证。</span><span class="sxs-lookup"><span data-stu-id="bbe41-458">A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.</span></span></param>
        <summary><span data-ttu-id="bbe41-459">使用指定的属性类型、所有者类型、属性元数据和验证回叫来注册只读依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-459">Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.</span></span></summary>
        <returns><span data-ttu-id="bbe41-460">一个依赖属性键，此键应用于设置你的类中静态只读字段的值，该值稍后被用于引用该依赖属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-460">A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-461">此方法返回类型 <xref:System.Windows.DependencyPropertyKey> ，而 <xref:System.Windows.DependencyProperty.RegisterAttached%2A> 返回类型 <xref:System.Windows.DependencyProperty> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-461">This method returns the type <xref:System.Windows.DependencyPropertyKey>, whereas <xref:System.Windows.DependencyProperty.RegisterAttached%2A> returns the type <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="bbe41-462">通常，表示只读属性的键不会成为公共的，因为键可用于通过调用设置依赖属性值 <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-462">Typically, the keys that represent read-only properties are not made public, because the keys can be used to set the dependency property value by calling <xref:System.Windows.DependencyObject.SetValue%28System.Windows.DependencyPropertyKey%2CSystem.Object%29>.</span></span> <span data-ttu-id="bbe41-463">你的类设计将影响你的需求，但通常建议仅将对某些代码部分的访问权限和可见性限制为 <xref:System.Windows.DependencyPropertyKey> 类或应用程序逻辑的一部分设置该依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-463">Your class design will affect your requirements, but it is generally recommended to limit the access and visibility of any <xref:System.Windows.DependencyPropertyKey> to only those parts of your code that are necessary to set that dependency property as part of class or application logic.</span></span> <span data-ttu-id="bbe41-464">还建议为只读依赖项属性公开依赖项属性标识符，方法是将的值公开 <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> 为 `public static readonly` 类的字段。</span><span class="sxs-lookup"><span data-stu-id="bbe41-464">It is also recommended that you expose a dependency property identifier for the read-only dependency property, by exposing the value of <xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A?displayProperty=nameWithType> as a `public static readonly` field on your class.</span></span>  
  
 <span data-ttu-id="bbe41-465">只读依赖属性是一个相当典型的方案。</span><span class="sxs-lookup"><span data-stu-id="bbe41-465">Read-only dependency properties are a fairly typical scenario.</span></span> <span data-ttu-id="bbe41-466">您可以使用只读依赖属性的值作为采用依赖属性的其他属性系统操作的基础，例如以 <xref:System.Windows.Trigger> 样式中的依赖属性为基础。</span><span class="sxs-lookup"><span data-stu-id="bbe41-466">You can use the value of a read-only dependency property as the basis for other property system operations that take a dependency property, such as basing a <xref:System.Windows.Trigger> on the dependency property in a style.</span></span>  
  
 <span data-ttu-id="bbe41-467">有关依赖属性注册的详细信息，请参阅 <xref:System.Windows.DependencyProperty> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-467">For more information on dependency property registration, see <xref:System.Windows.DependencyProperty>.</span></span>  
  
 <span data-ttu-id="bbe41-468">对只读依赖属性的验证可能不太重要。</span><span class="sxs-lookup"><span data-stu-id="bbe41-468">Validation on a read-only dependency property might be less important.</span></span> <span data-ttu-id="bbe41-469">为密钥指定的非公共访问级别减少了任意无效输入的可能性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-469">The nonpublic access level you specify for the key reduces the likelihood for arbitrary invalid input.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyProperty.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dependencyProperty.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="bbe41-470">返回依赖属性的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="bbe41-470">Returns the string representation of the dependency property.</span></span></summary>
        <returns><span data-ttu-id="bbe41-471">依赖属性的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="bbe41-471">The string representation of the dependency property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-472">此实现返回 <xref:System.Windows.DependencyProperty.Name%2A> 属性值。</span><span class="sxs-lookup"><span data-stu-id="bbe41-472">This implementation returns the <xref:System.Windows.DependencyProperty.Name%2A> property value.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.DependencyProperty.Name" />
      </Docs>
    </Member>
    <Member MemberName="UnsetValue">
      <MemberSignature Language="C#" Value="public static readonly object UnsetValue;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly object UnsetValue" />
      <MemberSignature Language="DocId" Value="F:System.Windows.DependencyProperty.UnsetValue" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnsetValue As Object " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Object ^ UnsetValue;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnsetValue : obj" Usage="System.Windows.DependencyProperty.UnsetValue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bbe41-473">指定一个由 WPF 属性系统使用的静态值，而不是 <see langword="null" /> 指示该属性存在，但不具有属性系统设置的值。</span><span class="sxs-lookup"><span data-stu-id="bbe41-473">Specifies a static value that is used by the WPF property system rather than <see langword="null" /> to indicate that the property exists, but does not have its value set by the property system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-474"><xref:System.Windows.DependencyProperty.UnsetValue> 是一个 sentinel 值，用于 WPF 属性系统无法确定请求的值的方案 <xref:System.Windows.DependencyProperty> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-474"><xref:System.Windows.DependencyProperty.UnsetValue> is a sentinel value that is used for scenarios where the WPF property system is unable to determine a requested <xref:System.Windows.DependencyProperty> value.</span></span> <span data-ttu-id="bbe41-475"><xref:System.Windows.DependencyProperty.UnsetValue> 使用而不是 `null` ，因为 `null` 可以是有效的属性值，也可以是有效的 (并且经常使用) <xref:System.Windows.PropertyMetadata.DefaultValue%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-475"><xref:System.Windows.DependencyProperty.UnsetValue> is used rather than `null`, because `null` could be a valid property value, as well as a valid (and frequently used) <xref:System.Windows.PropertyMetadata.DefaultValue%2A>.</span></span>  
  
 <span data-ttu-id="bbe41-476"><xref:System.Windows.DependencyProperty.UnsetValue> 永远不会从中返回 <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-476"><xref:System.Windows.DependencyProperty.UnsetValue> is never returned out of <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="bbe41-477">对实例调用 <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> 依赖属性时 <xref:System.Windows.DependencyObject> ，以下情况之一适用：</span><span class="sxs-lookup"><span data-stu-id="bbe41-477">When you call <xref:System.Windows.DependencyObject.GetValue%2A?displayProperty=nameWithType> on a dependency property on a <xref:System.Windows.DependencyObject> instance, one of the following applies:</span></span>  
  
-   <span data-ttu-id="bbe41-478">依赖属性具有在元数据中建立的默认值，并且返回该值。</span><span class="sxs-lookup"><span data-stu-id="bbe41-478">A dependency property has a default value established in metadata and that value is returned.</span></span> <span data-ttu-id="bbe41-479">此值可能来自 <xref:System.Windows.DependencyProperty.DefaultMetadata%2A> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-479">This value might come from <xref:System.Windows.DependencyProperty.DefaultMetadata%2A>.</span></span>  
  
-   <span data-ttu-id="bbe41-480">其他一些值由属性系统建立，并且默认值不再相关。</span><span class="sxs-lookup"><span data-stu-id="bbe41-480">Some other value was established by the property system, and the default value is no longer relevant.</span></span> <span data-ttu-id="bbe41-481">有关详细信息，请参阅[依赖属性值优先级](/dotnet/framework/wpf/advanced/dependency-property-value-precedence)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-481">For details, see [Dependency Property Value Precedence](/dotnet/framework/wpf/advanced/dependency-property-value-precedence).</span></span>  
  
 <span data-ttu-id="bbe41-482"><xref:System.Windows.PropertyMetadata.DefaultValue%2A> <xref:System.Windows.DependencyProperty.UnsetValue> 特别不允许设置的。</span><span class="sxs-lookup"><span data-stu-id="bbe41-482">Setting a <xref:System.Windows.PropertyMetadata.DefaultValue%2A> of <xref:System.Windows.DependencyProperty.UnsetValue> is specifically disallowed.</span></span>  
  
 <span data-ttu-id="bbe41-483"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType><xref:System.Windows.DependencyProperty.UnsetValue>如果尚未本地设置请求的属性，则返回。</span><span class="sxs-lookup"><span data-stu-id="bbe41-483"><xref:System.Windows.DependencyObject.ReadLocalValue%2A?displayProperty=nameWithType> returns <xref:System.Windows.DependencyProperty.UnsetValue> when the requested property has not been locally set.</span></span>  
  
 <span data-ttu-id="bbe41-484"><xref:System.Windows.DependencyProperty.UnsetValue> 当用作的返回值时，具有特殊意义 <xref:System.Windows.CoerceValueCallback> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-484"><xref:System.Windows.DependencyProperty.UnsetValue> has a special meaning when used as the return value of a <xref:System.Windows.CoerceValueCallback>.</span></span> <span data-ttu-id="bbe41-485">有关详细信息，请参阅 [依赖属性回调和验证](/dotnet/framework/wpf/advanced/dependency-property-callbacks-and-validation)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-485">For details, see [Dependency Property Callbacks and Validation](/dotnet/framework/wpf/advanced/dependency-property-callbacks-and-validation).</span></span>  
  
 <span data-ttu-id="bbe41-486">如果要绑定到数据库，请注意，与不等效于 <xref:System.Windows.DependencyProperty.UnsetValue> <xref:System.DBNull.Value> ，这与不等效于 <xref:System.DBNull.Value> true null 的方式相同。</span><span class="sxs-lookup"><span data-stu-id="bbe41-486">If you are binding to a database, note that <xref:System.Windows.DependencyProperty.UnsetValue> is not equivalent to <xref:System.DBNull.Value>, in a similar way to how <xref:System.DBNull.Value> is not equivalent to a true null.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateValueCallback">
      <MemberSignature Language="C#" Value="public System.Windows.ValidateValueCallback ValidateValueCallback { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ValidateValueCallback ValidateValueCallback" />
      <MemberSignature Language="DocId" Value="P:System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidateValueCallback As ValidateValueCallback" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ValidateValueCallback ^ ValidateValueCallback { System::Windows::ValidateValueCallback ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidateValueCallback : System.Windows.ValidateValueCallback" Usage="System.Windows.DependencyProperty.ValidateValueCallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ValidateValueCallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="bbe41-487">获取依赖项对象的值验证回调。</span><span class="sxs-lookup"><span data-stu-id="bbe41-487">Gets the value validation callback for the dependency property.</span></span></summary>
        <value><span data-ttu-id="bbe41-488">最初依赖项对象注册时为 <paramref name="validateValueCallback" /> 参数提供的该依赖项对象的值验证回调。</span><span class="sxs-lookup"><span data-stu-id="bbe41-488">The value validation callback for this dependency property, as provided for the <paramref name="validateValueCallback" /> parameter in the original dependency property registration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="bbe41-489">此属性将包含 `null` 任何没有注册验证回调的依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="bbe41-489">This property will contain `null` for any dependency property with no registered validation callback.</span></span>  
  
 <span data-ttu-id="bbe41-490">验证值回调必须以静态意义进行操作：通过应用的验证 <xref:System.Windows.ValidateValueCallback> 无法确定所提供的值对于任何特定实例是否有效。</span><span class="sxs-lookup"><span data-stu-id="bbe41-490">Validate value callbacks must act in a static sense: validation applied through the <xref:System.Windows.ValidateValueCallback> cannot determine whether the provided value is valid for any particular instance.</span></span> <span data-ttu-id="bbe41-491">回调只能确定具有依赖项属性的所有对象是否应接受提供的值为有效的。</span><span class="sxs-lookup"><span data-stu-id="bbe41-491">The callback can only determine whether all objects that possess the dependency property should or should not accept the provided value as valid.</span></span> <span data-ttu-id="bbe41-492">如果需要执行的验证依赖于在特定实例上了解其他依赖项属性的值，请改用 <xref:System.Windows.CoerceValueCallback> 。</span><span class="sxs-lookup"><span data-stu-id="bbe41-492">If you need to perform validation that relies on knowing the values of other dependency properties on a particular instance, use a <xref:System.Windows.CoerceValueCallback> instead.</span></span> <span data-ttu-id="bbe41-493"><xref:System.Windows.CoerceValueCallback>注册为依赖属性元数据的一部分，而不是直接在依赖属性标识符中进行注册。</span><span class="sxs-lookup"><span data-stu-id="bbe41-493">The <xref:System.Windows.CoerceValueCallback> is registered as part of dependency property metadata, rather than directly within the dependency property identifier.</span></span> <span data-ttu-id="bbe41-494">有关详细信息，请参阅 [依赖属性回调和验证](/dotnet/framework/wpf/advanced/dependency-property-callbacks-and-validation)。</span><span class="sxs-lookup"><span data-stu-id="bbe41-494">For details, see [Dependency Property Callbacks and Validation](/dotnet/framework/wpf/advanced/dependency-property-callbacks-and-validation).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ValidateValueCallback" />
      </Docs>
    </Member>
  </Members>
</Type>
