<Type Name="EventManager" FullName="System.Windows.EventManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3a4ac22a6ef01b632e7d028c4ae8270bde00d843" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83976746" /></Metadata><TypeSignature Language="C#" Value="public static class EventManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EventManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventManager" />
  <TypeSignature Language="VB.NET" Value="Public Class EventManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventManager abstract sealed" />
  <TypeSignature Language="F#" Value="type EventManager = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="afa74-101">提供事件相关的实用工具方法，这些方法可为类所有者注册路由事件，并添加类处理程序。</span><span class="sxs-lookup"><span data-stu-id="afa74-101">Provides event-related utility methods that register routed events for class owners and add class handlers.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="afa74-102">此类最常用于使用 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>注册新的路由事件。</span><span class="sxs-lookup"><span data-stu-id="afa74-102">This class is most commonly used to register a new routed event, with <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>.</span></span>  
  
 <span data-ttu-id="afa74-103">第二个最常见的 API 用法是 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="afa74-103">The second most common API usage is <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span> <span data-ttu-id="afa74-104">使用此方法可以在类或附加事件上启用路由事件的类处理。</span><span class="sxs-lookup"><span data-stu-id="afa74-104">You use this method to enable class handling of a routed event on the class, or an attached event.</span></span> <span data-ttu-id="afa74-105">有关详细信息，请参阅将[路由事件标记为 "已处理" 和 "类处理"](/dotnet/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling)。</span><span class="sxs-lookup"><span data-stu-id="afa74-105">For details, see [Marking Routed Events as Handled, and Class Handling](/dotnet/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="afa74-106">下面的示例演示如何使用此类将新的路由事件注册为类成员，以及用于重写 [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] 事件的 add 和 remove 实现的路由事件 "包装器" 技术。</span><span class="sxs-lookup"><span data-stu-id="afa74-106">The following example show how to use this class to register a new routed event as a class member, along with the routed event "wrapper" technique of overriding the add and remove implementations for a [!INCLUDE[TLA2#tla_clr](~/includes/tla2sharptla-clr-md.md)] event.</span></span>  
  
 [!code-csharp[DPCustom#EventManagerClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DPCustom/CSharp/default.xaml.cs#eventmanagerclass)]
 [!code-vb[DPCustom#EventManagerClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DPCustom/visualbasic/default.xaml.vb#eventmanagerclass)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetRoutedEvents">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEvents () As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEvents();" />
      <MemberSignature Language="F#" Value="static member GetRoutedEvents : unit -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="afa74-107">为已注册到事件系统的路由事件返回标识符。</span><span class="sxs-lookup"><span data-stu-id="afa74-107">Returns identifiers for routed events that have been registered to the event system.</span></span></summary>
        <returns><span data-ttu-id="afa74-108">包含注册对象的 <see cref="T:System.Windows.RoutedEvent" /> 类型的数组。</span><span class="sxs-lookup"><span data-stu-id="afa74-108">An array of type <see cref="T:System.Windows.RoutedEvent" /> that contains the registered objects.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="afa74-109">稍后可以注册更 <xref:System.Windows.RoutedEvent> 的对象。</span><span class="sxs-lookup"><span data-stu-id="afa74-109">More <xref:System.Windows.RoutedEvent> objects can be registered later.</span></span> <span data-ttu-id="afa74-110">此方法获取一个快照，并且在应用程序的整个生存期内，路由事件的集合都可写。</span><span class="sxs-lookup"><span data-stu-id="afa74-110">This method gets a snapshot and the collection of routed events is writeable throughout an application's lifetime.</span></span> <span data-ttu-id="afa74-111">返回的集合可能很大。</span><span class="sxs-lookup"><span data-stu-id="afa74-111">The collection returned might be quite large.</span></span> <span data-ttu-id="afa74-112">即使只是对 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] Api 的一部分的事件进行计数，收集计数也在数百个大。</span><span class="sxs-lookup"><span data-stu-id="afa74-112">Even just counting the events that are part of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] APIs, the collection count is in the high hundreds.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoutedEventsForOwner">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent[] GetRoutedEventsForOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent[] GetRoutedEventsForOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.GetRoutedEventsForOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetRoutedEventsForOwner (ownerType As Type) As RoutedEvent()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Windows::RoutedEvent ^&gt; ^ GetRoutedEventsForOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member GetRoutedEventsForOwner : Type -&gt; System.Windows.RoutedEvent[]" Usage="System.Windows.EventManager.GetRoutedEventsForOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType"><span data-ttu-id="afa74-113">从其开始搜索的类型。</span><span class="sxs-lookup"><span data-stu-id="afa74-113">The type to start the search with.</span></span> <span data-ttu-id="afa74-114">搜索中包含基类。</span><span class="sxs-lookup"><span data-stu-id="afa74-114">Base classes are included in the search.</span></span></param>
        <summary><span data-ttu-id="afa74-115">查找使用所提供的所有者类型注册的事件的所有路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="afa74-115">Finds all routed event identifiers for events that are registered with the provided owner type.</span></span></summary>
        <returns><span data-ttu-id="afa74-116">如果找到任何匹配项，则返回匹配路由事件标识符的数组；否则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="afa74-116">An array of matching routed event identifiers if any match is found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClassHandler">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="afa74-117">为特定路由事件注册类处理程序。</span><span class="sxs-lookup"><span data-stu-id="afa74-117">Registers a class handler for a particular routed event.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterClassHandler (classType As Type, routedEvent As RoutedEvent, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="classType"><span data-ttu-id="afa74-118">声明类处理的类的类型。</span><span class="sxs-lookup"><span data-stu-id="afa74-118">The type of the class that is declaring class handling.</span></span></param>
        <param name="routedEvent"><span data-ttu-id="afa74-119">要处理的事件的路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="afa74-119">The routed event identifier of the event to handle.</span></span></param>
        <param name="handler"><span data-ttu-id="afa74-120">对类处理程序实现的引用。</span><span class="sxs-lookup"><span data-stu-id="afa74-120">A reference to the class handler implementation.</span></span></param>
        <summary><span data-ttu-id="afa74-121">为特定路由事件注册类处理程序。</span><span class="sxs-lookup"><span data-stu-id="afa74-121">Registers a class handler for a particular routed event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="afa74-122">类处理是适用于路由事件的一项功能，其中包括使用路由事件支持实现的附加事件。</span><span class="sxs-lookup"><span data-stu-id="afa74-122">Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.</span></span> <span data-ttu-id="afa74-123">类处理程序就像是为类的所有实例都存在的静态处理程序。</span><span class="sxs-lookup"><span data-stu-id="afa74-123">A class handler is like a static handler that exists for all instances of the class.</span></span> <span data-ttu-id="afa74-124">由于处理程序是静态的，因此不能使用类处理程序直接更改实例属性，但可以通过 `sender` 参数和/或事件数据访问实例。</span><span class="sxs-lookup"><span data-stu-id="afa74-124">Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the `sender` parameter and/or the event data.</span></span>  
  
 <span data-ttu-id="afa74-125">类处理程序在实例处理程序之前调用。</span><span class="sxs-lookup"><span data-stu-id="afa74-125">Class handlers are invoked before instance handlers.</span></span> <span data-ttu-id="afa74-126">可以实现一个类处理程序，它具有将事件标记为已处理的行为。</span><span class="sxs-lookup"><span data-stu-id="afa74-126">You can implement a class handler that has the behavior of marking the event as handled.</span></span> <span data-ttu-id="afa74-127">因此，不会调用类处理事件的实例处理程序，除非实例处理程序专门注册已处理事件。</span><span class="sxs-lookup"><span data-stu-id="afa74-127">Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.</span></span>  
  
 <span data-ttu-id="afa74-128">许多 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 基元素事件提供类处理虚拟方法。</span><span class="sxs-lookup"><span data-stu-id="afa74-128">Many of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] base element events provide class handling virtual methods.</span></span> <span data-ttu-id="afa74-129">通过在继承基类的类中重写这些方法，您可以实现类处理，而无需在静态构造函数中调用 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="afa74-129">By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <xref:System.Windows.EventManager.RegisterClassHandler%2A> in static constructors.</span></span> <span data-ttu-id="afa74-130">这些类处理方法通常存在于输入事件中，其名称以 "On" 开头，以正在处理类的事件名称结尾。</span><span class="sxs-lookup"><span data-stu-id="afa74-130">These class handling methods typically exist for input events and have names that start with "On" and end with the name of the event being class handled.</span></span>  
  
 <span data-ttu-id="afa74-131">有关类处理的详细信息，请参阅将[路由事件标记为 "已处理" 和 "类处理](/dotnet/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling)"。</span><span class="sxs-lookup"><span data-stu-id="afa74-131">For more information about class handling, see [Marking Routed Events as Handled, and Class Handling](/dotnet/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling).</span></span>  
  
 <span data-ttu-id="afa74-132">使用此签名，类处理程序将注册为仅调用以响应未处理的事件。</span><span class="sxs-lookup"><span data-stu-id="afa74-132">Using this signature, class handlers will be registered to invoke only in response to unhandled events.</span></span> <span data-ttu-id="afa74-133">你还可以注册类处理程序，以便在事件参数被标记为已处理时，使用 <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 签名，并将 `handledEventsToo` 设置为 `true`。</span><span class="sxs-lookup"><span data-stu-id="afa74-133">You can also register class handlers to invoke even if the event arguments are marked handled, by using the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature, with `handledEventsToo` set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="afa74-134">下面的示例为 <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>添加了一个处理程序，调用了 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="afa74-134">The following example adds a handler for <xref:System.Windows.UIElement.PreviewMouseLeftButtonDown>, calling <xref:System.Windows.EventManager.RegisterClassHandler%2A>.</span></span>  
  
 [!code-csharp[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#staticandregisterclasshandler)]
 [!code-vb[ClassHandling#StaticAndRegisterClassHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#staticandregisterclasshandler)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassHandler">
      <MemberSignature Language="C#" Value="public static void RegisterClassHandler (Type classType, System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterClassHandler(class System.Type classType, class System.Windows.RoutedEvent routedEvent, class System.Delegate handler, bool handledEventsToo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterClassHandler(System.Type,System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterClassHandler (classType As Type, routedEvent As RoutedEvent, handler As Delegate, handledEventsToo As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterClassHandler(Type ^ classType, System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler, bool handledEventsToo);" />
      <MemberSignature Language="F#" Value="static member RegisterClassHandler : Type * System.Windows.RoutedEvent * Delegate * bool -&gt; unit" Usage="System.Windows.EventManager.RegisterClassHandler (classType, routedEvent, handler, handledEventsToo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="classType" Type="System.Type" />
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
        <Parameter Name="handledEventsToo" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="classType"><span data-ttu-id="afa74-135">声明类处理的类的类型。</span><span class="sxs-lookup"><span data-stu-id="afa74-135">The type of the class that is declaring class handling.</span></span></param>
        <param name="routedEvent"><span data-ttu-id="afa74-136">要处理的事件的路由事件标识符。</span><span class="sxs-lookup"><span data-stu-id="afa74-136">The routed event identifier of the event to handle.</span></span></param>
        <param name="handler"><span data-ttu-id="afa74-137">对类处理程序实现的引用。</span><span class="sxs-lookup"><span data-stu-id="afa74-137">A reference to the class handler implementation.</span></span></param>
        <param name="handledEventsToo"><span data-ttu-id="afa74-138">如果即使已将路由事件的参数标记为已处理时也调用此类处理程序，则为 <see langword="true" />；如果保留不对任何标记为已处理的事件调用处理程序的默认行为，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="afa74-138"><see langword="true" /> to invoke this class handler even if arguments of the routed event have been marked as handled; <see langword="false" /> to retain the default behavior of not invoking the handler on any marked-handled event.</span></span></param>
        <summary><span data-ttu-id="afa74-139">使用处理事件数据已标记为已处理的事件的选项，为特定路由事件注册类处理程序。</span><span class="sxs-lookup"><span data-stu-id="afa74-139">Registers a class handler for a particular routed event, with the option to handle events where event data is already marked handled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="afa74-140">类处理是适用于路由事件的一项功能，其中包括使用路由事件支持实现的附加事件。</span><span class="sxs-lookup"><span data-stu-id="afa74-140">Class handling is a feature that is available for routed events, including attached events that are implemented with routed event backing.</span></span> <span data-ttu-id="afa74-141">类处理程序就像是为类的所有实例都存在的静态处理程序。</span><span class="sxs-lookup"><span data-stu-id="afa74-141">A class handler is like a static handler that exists for all instances of the class.</span></span> <span data-ttu-id="afa74-142">由于处理程序是静态的，因此不能使用类处理程序直接更改实例属性，但可以通过 `sender` 参数和/或事件数据访问实例。</span><span class="sxs-lookup"><span data-stu-id="afa74-142">Because the handler is static, you cannot change instance properties directly with a class handler, but you can access instances through the `sender` parameter and/or the event data.</span></span>  
  
 <span data-ttu-id="afa74-143">类处理程序在实例处理程序之前调用。</span><span class="sxs-lookup"><span data-stu-id="afa74-143">Class handlers are invoked before instance handlers.</span></span> <span data-ttu-id="afa74-144">可以实现一个类处理程序，它具有将事件标记为已处理的行为。</span><span class="sxs-lookup"><span data-stu-id="afa74-144">You can implement a class handler that has the behavior of marking the event as handled.</span></span> <span data-ttu-id="afa74-145">因此，不会调用类处理事件的实例处理程序，除非实例处理程序专门注册已处理事件。</span><span class="sxs-lookup"><span data-stu-id="afa74-145">Therefore, instance handlers for a class-handled event are not invoked unless the instance handlers register specifically for handled events.</span></span>  
  
 <span data-ttu-id="afa74-146">许多 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 基元素事件提供类处理虚拟方法。</span><span class="sxs-lookup"><span data-stu-id="afa74-146">Many of the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] base element events provide class handling virtual methods.</span></span> <span data-ttu-id="afa74-147">通过在继承基类的类中重写这些方法，您可以实现类处理，而无需在静态构造函数中调用 <xref:System.Windows.EventManager.RegisterClassHandler%2A>。</span><span class="sxs-lookup"><span data-stu-id="afa74-147">By overriding these methods in classes that inherit the base classes, you can implement class handling without calling <xref:System.Windows.EventManager.RegisterClassHandler%2A> in static constructors.</span></span> <span data-ttu-id="afa74-148">这些类处理方法通常存在于输入事件中，其名称以 "On" 开头，以正在处理类的事件名称结尾。</span><span class="sxs-lookup"><span data-stu-id="afa74-148">These class handling methods typically exist for input events and have names that start with "On" and end with the name of the event being class handled.</span></span>  
  
 <span data-ttu-id="afa74-149">有关类处理的详细信息，请参阅将[路由事件标记为 "已处理" 和 "类处理](/dotnet/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling)"。</span><span class="sxs-lookup"><span data-stu-id="afa74-149">For more information about class handling, see [Marking Routed Events as Handled, and Class Handling](/dotnet/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling).</span></span>  
  
 <span data-ttu-id="afa74-150">使用此签名，可以通过将 `handledEventsToo` 设置为 `true`来注册类处理程序，以便在处理的事件上调用。</span><span class="sxs-lookup"><span data-stu-id="afa74-150">Using this signature, class handlers can be registered to invoke upon handled events, by setting `handledEventsToo` set to `true`.</span></span> <span data-ttu-id="afa74-151">通常，仅当存在您尝试解决的已知处理问题（例如，通过鼠标或键盘事件进行输入系统处理）时，才应执行此操作。</span><span class="sxs-lookup"><span data-stu-id="afa74-151">Generally, you should do this only if there is a known handling issue you are trying to work around, such as input system handling from mouse or keyboard events.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterRoutedEvent">
      <MemberSignature Language="C#" Value="public static System.Windows.RoutedEvent RegisterRoutedEvent (string name, System.Windows.RoutingStrategy routingStrategy, Type handlerType, Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.RoutedEvent RegisterRoutedEvent(string name, valuetype System.Windows.RoutingStrategy routingStrategy, class System.Type handlerType, class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RegisterRoutedEvent (name As String, routingStrategy As RoutingStrategy, handlerType As Type, ownerType As Type) As RoutedEvent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::RoutedEvent ^ RegisterRoutedEvent(System::String ^ name, System::Windows::RoutingStrategy routingStrategy, Type ^ handlerType, Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="static member RegisterRoutedEvent : string * System.Windows.RoutingStrategy * Type * Type -&gt; System.Windows.RoutedEvent" Usage="System.Windows.EventManager.RegisterRoutedEvent (name, routingStrategy, handlerType, ownerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="routingStrategy" Type="System.Windows.RoutingStrategy" />
        <Parameter Name="handlerType" Type="System.Type" />
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="afa74-152">路由事件的名称。</span><span class="sxs-lookup"><span data-stu-id="afa74-152">The name of the routed event.</span></span> <span data-ttu-id="afa74-153">该名称在所有者类型中必须是唯一的，并且不能为 <see langword="null" /> 或空字符串。</span><span class="sxs-lookup"><span data-stu-id="afa74-153">The name must be unique within the owner type and cannot be <see langword="null" /> or an empty string.</span></span></param>
        <param name="routingStrategy"><span data-ttu-id="afa74-154">作为枚举值的事件的路由策略。</span><span class="sxs-lookup"><span data-stu-id="afa74-154">The routing strategy of the event as a value of the enumeration.</span></span></param>
        <param name="handlerType"><span data-ttu-id="afa74-155">事件处理程序的类型。</span><span class="sxs-lookup"><span data-stu-id="afa74-155">The type of the event handler.</span></span> <span data-ttu-id="afa74-156">该类型必须为委托类型，并且不能为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="afa74-156">This must be a delegate type and cannot be <see langword="null" />.</span></span></param>
        <param name="ownerType"><span data-ttu-id="afa74-157">路由事件的所有者类类型。</span><span class="sxs-lookup"><span data-stu-id="afa74-157">The owner class type of the routed event.</span></span> <span data-ttu-id="afa74-158">它不能是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="afa74-158">This cannot be <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="afa74-159">向 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 事件系统注册新的路由事件。</span><span class="sxs-lookup"><span data-stu-id="afa74-159">Registers a new routed event with the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] event system.</span></span></summary>
        <returns><span data-ttu-id="afa74-160">新注册的路由事件的标识符。</span><span class="sxs-lookup"><span data-stu-id="afa74-160">The identifier for the newly registered routed event.</span></span> <span data-ttu-id="afa74-161">现在可将该标识符对象存储为类中的静态字段，然后将其用作将处理程序附加到事件的方法的参数。</span><span class="sxs-lookup"><span data-stu-id="afa74-161">This identifier object can now be stored as a static field in a class and then used as a parameter for methods that attach handlers to the event.</span></span> <span data-ttu-id="afa74-162">路由事件标识符也用于其他事件系统 API。</span><span class="sxs-lookup"><span data-stu-id="afa74-162">The routed event identifier is also used for other event system APIs.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="afa74-163">使用此方法的返回值为唯一的 <xref:System.Windows.RoutedEvent> 标识符字段创建静态声明。</span><span class="sxs-lookup"><span data-stu-id="afa74-163">Use the return value of this method to create the static declaration for a unique <xref:System.Windows.RoutedEvent> identifier field.</span></span> <span data-ttu-id="afa74-164">此字段应存储在所有者类型中。</span><span class="sxs-lookup"><span data-stu-id="afa74-164">This field should be stored within the owner type.</span></span>  
  
 <span data-ttu-id="afa74-165">有大量约定和最佳做法与如何在类中命名、注册和公开路由事件相关联。</span><span class="sxs-lookup"><span data-stu-id="afa74-165">There are a considerable number of conventions and best practices associated with how routed events should be named, registered, and exposed in a class.</span></span> <span data-ttu-id="afa74-166">有关详细信息，请参阅[路由事件概述](/dotnet/framework/wpf/advanced/routed-events-overview)。</span><span class="sxs-lookup"><span data-stu-id="afa74-166">For more information, see [Routed Events Overview](/dotnet/framework/wpf/advanced/routed-events-overview).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
