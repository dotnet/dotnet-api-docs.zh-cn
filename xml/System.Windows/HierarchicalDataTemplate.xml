<Type Name="HierarchicalDataTemplate" FullName="System.Windows.HierarchicalDataTemplate">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9b382edc01d895cea0687df02e46dd9839457e00" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83952576" /></Metadata><TypeSignature Language="C#" Value="public class HierarchicalDataTemplate : System.Windows.DataTemplate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HierarchicalDataTemplate extends System.Windows.DataTemplate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.HierarchicalDataTemplate" />
  <TypeSignature Language="VB.NET" Value="Public Class HierarchicalDataTemplate&#xA;Inherits DataTemplate" />
  <TypeSignature Language="C++ CLI" Value="public ref class HierarchicalDataTemplate : System::Windows::DataTemplate" />
  <TypeSignature Language="F#" Value="type HierarchicalDataTemplate = class&#xA;    inherit DataTemplate" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DataTemplate</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示支持 <see cref="T:System.Windows.Controls.HeaderedItemsControl" /> 的 <see cref="T:System.Windows.DataTemplate" />，例如 <see cref="T:System.Windows.Controls.TreeViewItem" /> 或 <see cref="T:System.Windows.Controls.MenuItem" />。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 在以下示例中，`ListLeagueList` 是 `League` 对象的列表。 每个 `League` 对象都有一个 `Name` 和 `Division` 对象的集合。 每个 `Division` 都有一个 `Name` 和 `Team` 对象的集合，并且每个 `Team` 对象都有一个 `Name`。  
  
 [!code-xaml[HierarchicalDataTemplateSnippet#HDT](~/samples/snippets/csharp/VS_Snippets_Wpf/HierarchicalDataTemplateSnippet/CS/window1.xaml#hdt)]   
  
 该示例演示了使用 <xref:System.Windows.HierarchicalDataTemplate>，可以轻松地显示包含其他列表的列表数据。 下面是该示例的一个屏幕快照。  
  
 ![HierarchicalDataTemplate 示例屏幕快照](~/add/media/databinding-hierarchicaldatatemplate.png "HierarchicalDataTemplate 示例屏幕快照")  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.HierarchicalDataTemplate" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HierarchicalDataTemplate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.HierarchicalDataTemplate.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HierarchicalDataTemplate();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.HierarchicalDataTemplate" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HierarchicalDataTemplate (object dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.HierarchicalDataTemplate.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataType As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HierarchicalDataTemplate(System::Object ^ dataType);" />
      <MemberSignature Language="F#" Value="new System.Windows.HierarchicalDataTemplate : obj -&gt; System.Windows.HierarchicalDataTemplate" Usage="new System.Windows.HierarchicalDataTemplate dataType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="dataType" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dataType">此模板所针对的类型。</param>
        <summary>使用模板所针对的指定类型，初始化 <see cref="T:System.Windows.HierarchicalDataTemplate" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `dataType` 参数可以是 [!INCLUDE[TLA#tla_clr](~/includes/tlasharptla-clr-md.md)] 对象或表示 [!INCLUDE[TLA2#tla_xml](~/includes/tla2sharptla-xml-md.md)] 元素的字符串。 有关详细信息，请参阅[绑定源概述](/dotnet/framework/wpf/data/binding-sources-overview)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AlternationCount">
      <MemberSignature Language="C#" Value="public int AlternationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AlternationCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.HierarchicalDataTemplate.AlternationCount" />
      <MemberSignature Language="VB.NET" Value="Public Property AlternationCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AlternationCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.AlternationCount : int with get, set" Usage="System.Windows.HierarchicalDataTemplate.AlternationCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置子项的交替项容器的数量。</summary>
        <value>下一级项的交替项容器的数量。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Windows.Controls.ItemsControl.AlternationCount%2A> 和 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType> 属性可以指定两个或多个交替项容器的外观。 例如，您可以为 <xref:System.Windows.Controls.ItemsControl>中的每个第三项指定交替的背景色。  <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType> 分配给 <xref:System.Windows.Controls.ItemsControl>中的每个项容器。  <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType> 从0开始，递增，直到 <xref:System.Windows.Controls.ItemsControl.AlternationCount%2A> 减1，然后重新从0开始。 例如，如果 <xref:System.Windows.Controls.ItemsControl.AlternationCount%2A> 为3，并且 <xref:System.Windows.Controls.ItemsControl>中有七项，则下表列出每个项的 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>。  
  
|项在 <xref:System.Windows.Controls.ItemsControl> 中的位置|<xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>|  
|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|  
|1|0|  
|2|1|  
|3|2|  
|4|0|  
|5|1|  
|6|2|  
|7|0|  
  
 设置 "<xref:System.Windows.HierarchicalDataTemplate.AlternationCount%2A>" 属性时，指示子项应获取该范围内的 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>，而不是应用此 <xref:System.Windows.HierarchicalDataTemplate> 项的项。 例如，如果 <xref:System.Windows.Controls.HeaderedItemsControl> 调用 `aHeaderedItemsControl` 将 <xref:System.Windows.HierarchicalDataTemplate> 与 <xref:System.Windows.HierarchicalDataTemplate.AlternationCount%2A> 集一起使用，则 `aHeaderedItemsControl` 的子项的项容器将具有 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>，而不是 `aHeaderedItemsControl`的项容器。  
  
 您可以使用几种方法为交替项容器指定不同的外观。 一种方法是将 items 容器的属性绑定到 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>。 然后，可以使用 <xref:System.Windows.Controls.AlternationConverter> 指定应将哪个值应用到具有特定 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType> 值的项容器。 你还可以使用触发器来更改项容器的属性的值，具体取决于其 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>的值。  
  
   
  
## Examples  
 下面的示例创建绑定到深度为三层的数据的 <xref:System.Windows.Controls.TreeView>，每个项都显示在 <xref:System.Windows.Controls.TextBlock>中。  第一个级别中的 <xref:System.Windows.Controls.TextBlock> 对象具有相同的属性值，第二个级别中的 <xref:System.Windows.Controls.TextBlock> 对象使用 <xref:System.Windows.Controls.TextBlock.FontStyle%2A> 属性的交替值，第三个级别中的 <xref:System.Windows.Controls.TextBlock> 对象使用 <xref:System.Windows.Controls.TextBlock.Background%2A> 属性的交替值。  
  
 由于第一级的 <xref:System.Windows.HierarchicalDataTemplate> `Level1Data`将 <xref:System.Windows.HierarchicalDataTemplate.AlternationCount%2A> 属性设置为2，因此第二个级别中 <xref:System.Windows.Controls.TreeViewItem> 对象的 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType> 会在0和1之间交替。 在第二级的 <xref:System.Windows.HierarchicalDataTemplate> 中，`Level2Data`，<xref:System.Windows.Controls.TextBlock> 的 <xref:System.Windows.Controls.TextBlock.FontStyle%2A> 绑定到 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>，并提供 <xref:System.Windows.Controls.AlternationConverter> 以将 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType> 转换为替换 <xref:System.Windows.Controls.TextBlock.FontStyle%2A>。  `Level2Data` 和 `Level3Data`之间存在类似的关系： <xref:System.Windows.HierarchicalDataTemplate.AlternationCount%2A> 在 `Level2Data`上设置为3，<xref:System.Windows.Controls.TextBlock> 中的 `Level3Ddata` 的 <xref:System.Windows.Controls.TextBlock.Background%2A> 属性绑定到 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>。  
  
 [!code-xaml[AlternationIndexSnippets#5](~/samples/snippets/csharp/VS_Snippets_Wpf/AlternationIndexSnippets/CS/Window1.xaml#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemBindingGroup">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingGroup ItemBindingGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingGroup ItemBindingGroup" />
      <MemberSignature Language="DocId" Value="P:System.Windows.HierarchicalDataTemplate.ItemBindingGroup" />
      <MemberSignature Language="VB.NET" Value="Public Property ItemBindingGroup As BindingGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingGroup ^ ItemBindingGroup { System::Windows::Data::BindingGroup ^ get(); void set(System::Windows::Data::BindingGroup ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ItemBindingGroup : System.Windows.Data.BindingGroup with get, set" Usage="System.Windows.HierarchicalDataTemplate.ItemBindingGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置复制到每个子项的 <see cref="T:System.Windows.Data.BindingGroup" />。</summary>
        <value>复制到每个子项的 <see cref="T:System.Windows.Data.BindingGroup" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置 <xref:System.Windows.Controls.ItemsControl.ItemBindingGroup%2A> 属性时，每个项容器均获取与 <xref:System.Windows.Controls.ItemsControl.ItemBindingGroup%2A>具有相同 <xref:System.Windows.Controls.ValidationRule> 对象的 <xref:System.Windows.Data.BindingGroup>，但描述绑定中的数据的属性（如 <xref:System.Windows.Data.BindingGroup.Items%2A> 和 <xref:System.Windows.Data.BindingGroup.BindingExpressions%2A>）特定于 <xref:System.Windows.Controls.ItemsControl>中每个项的数据。  您必须访问项容器的 <xref:System.Windows.FrameworkContentElement.BindingGroup%2A> 以执行操作，例如验证数据和检查项是否有错误。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemContainerStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style ItemContainerStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style ItemContainerStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.HierarchicalDataTemplate.ItemContainerStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property ItemContainerStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ ItemContainerStyle { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ItemContainerStyle : System.Windows.Style with get, set" Usage="System.Windows.HierarchicalDataTemplate.ItemContainerStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置应用于每个子项的项容器的 <see cref="T:System.Windows.Style" /></summary>
        <value>应用于每个子项的项容器的 <see cref="T:System.Windows.Style" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性或 <xref:System.Windows.HierarchicalDataTemplate.ItemContainerStyleSelector%2A> 属性设置样式，以影响包含数据项的元素的外观。 例如，对于 <xref:System.Windows.Controls.TreeView>，生成的容器是 <xref:System.Windows.Controls.TreeViewItem> 控件;对于 <xref:System.Windows.Controls.Menu>，它们是 <xref:System.Windows.Controls.MenuItem> 控件。  
  
   
  
## Examples  
 下面的示例创建一个 <xref:System.Windows.Controls.TreeView>，该对象对其第一个级别中的项使用一个样式，并为其第二个级别中的项使用另一个样式。  第一级的样式是在 <xref:System.Windows.Controls.TreeView>的 <xref:System.Windows.Controls.ItemsControl.ItemContainerStyle%2A> 属性中设置的。  第二级的样式是在 <xref:System.Windows.HierarchicalDataTemplate>的 <xref:System.Windows.HierarchicalDataTemplate.ItemContainerStyle%2A> 属性中设置的。  
  
 [!code-xaml[RecycleItemContainerShippets#VirtualizingTreeView](~/samples/snippets/csharp/VS_Snippets_Wpf/RecycleItemContainerShippets/CSharp/Window1.xaml#virtualizingtreeview)]  
  
 下面的示例创建了上一示例中使用的数据。  
  
 [!code-csharp[RecycleItemContainerShippets#TreeViewData](~/samples/snippets/csharp/VS_Snippets_Wpf/RecycleItemContainerShippets/CSharp/Window1.xaml.cs#treeviewdata)]
 [!code-vb[RecycleItemContainerShippets#TreeViewData](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RecycleItemContainerShippets/visualbasic/window1.xaml.vb#treeviewdata)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemContainerStyleSelector">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.StyleSelector ItemContainerStyleSelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.StyleSelector ItemContainerStyleSelector" />
      <MemberSignature Language="DocId" Value="P:System.Windows.HierarchicalDataTemplate.ItemContainerStyleSelector" />
      <MemberSignature Language="VB.NET" Value="Public Property ItemContainerStyleSelector As StyleSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::StyleSelector ^ ItemContainerStyleSelector { System::Windows::Controls::StyleSelector ^ get(); void set(System::Windows::Controls::StyleSelector ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ItemContainerStyleSelector : System.Windows.Controls.StyleSelector with get, set" Usage="System.Windows.HierarchicalDataTemplate.ItemContainerStyleSelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.StyleSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置可应用于每个项容器的样式的自定义样式选择逻辑。</summary>
        <value>一个 <see cref="T:System.Windows.Controls.StyleSelector" />，用来选择将哪种样式用作 <see cref="P:System.Windows.HierarchicalDataTemplate.ItemContainerStyle" />。 默认为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Windows.HierarchicalDataTemplate.ItemContainerStyle%2A> 属性可以设置样式，以影响包含数据项的元素的外观。 例如，对于 <xref:System.Windows.Controls.TreeView>，生成的容器是 <xref:System.Windows.Controls.TreeViewItem> 控件;对于 <xref:System.Windows.Controls.Menu>，它们是 <xref:System.Windows.Controls.MenuItem> 控件。 如果定义了多个样式，并且需要提供逻辑来选择要应用的样式，则使用 <xref:System.Windows.HierarchicalDataTemplate.ItemContainerStyleSelector%2A> 属性，而不是 <xref:System.Windows.HierarchicalDataTemplate.ItemContainerStyle%2A> 属性。 请注意，如果设置 <xref:System.Windows.HierarchicalDataTemplate.ItemContainerStyle%2A> 属性，则忽略此属性。  
  
   
  
## Examples  
 下面的示例创建一个 <xref:System.Windows.Controls.TreeView>，该使用 <xref:System.Windows.HierarchicalDataTemplate> 的 <xref:System.Windows.HierarchicalDataTemplate.ItemContainerStyle%2A> 在 <xref:System.Windows.Controls.TreeView>第二级中的项的两种样式之间进行选择。  
  
 [!code-xaml[RecycleItemContainerShippets#ItemContainerStyleSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/RecycleItemContainerShippets/CSharp/Window1.xaml#itemcontainerstyleselector)]  
  
 下面的示例显示了上一示例中使用的 <xref:System.Windows.Controls.StyleSelector>。  
  
 [!code-csharp[RecycleItemContainerShippets#TreeViewItemStyleSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/RecycleItemContainerShippets/CSharp/Window1.xaml.cs#treeviewitemstyleselector)]
 [!code-vb[RecycleItemContainerShippets#TreeViewItemStyleSelector](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RecycleItemContainerShippets/visualbasic/window1.xaml.vb#treeviewitemstyleselector)]  
  
 下面的示例创建了上一示例中使用的数据。  
  
 [!code-csharp[RecycleItemContainerShippets#TreeViewData](~/samples/snippets/csharp/VS_Snippets_Wpf/RecycleItemContainerShippets/CSharp/Window1.xaml.cs#treeviewdata)]
 [!code-vb[RecycleItemContainerShippets#TreeViewData](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RecycleItemContainerShippets/visualbasic/window1.xaml.vb#treeviewdata)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemsSource">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingBase ItemsSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingBase ItemsSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.HierarchicalDataTemplate.ItemsSource" />
      <MemberSignature Language="VB.NET" Value="Public Property ItemsSource As BindingBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingBase ^ ItemsSource { System::Windows::Data::BindingBase ^ get(); void set(System::Windows::Data::BindingBase ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ItemsSource : System.Windows.Data.BindingBase with get, set" Usage="System.Windows.HierarchicalDataTemplate.ItemsSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此数据模板的绑定，该绑定指示在何处可以找到表示数据层次结构中下一级别的集合。</summary>
        <value>默认为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这会应用于生成的 <xref:System.Windows.Controls.HeaderedItemsControl> （例如 <xref:System.Windows.Controls.MenuItem> 或 <xref:System.Windows.Controls.TreeViewItem>）上的 <xref:System.Windows.Controls.ItemsControl.ItemsSource%2A> 属性，以指示在何处查找表示数据层次结构中的下一个级别的集合。  
  
<a name="xamlTextUsage_ItemsSource"></a>   
## <a name="xaml-text-usage"></a>XAML 文本用法  
 有关 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 的信息，请参阅 <xref:System.Windows.Data.Binding> 类型。  
  
   
  
## Examples  
 在以下示例中，`ListLeagueList` 是 `League` 对象的列表。 每个 `League` 对象都有一个 `Name` 和 `Division` 对象的集合。 每个 `Division` 都有一个 `Name` 和 `Team` 对象的集合，并且每个 `Team` 对象都有一个 `Name`。  
  
 [!code-xaml[HierarchicalDataTemplateSnippet#HDT](~/samples/snippets/csharp/VS_Snippets_Wpf/HierarchicalDataTemplateSnippet/CS/window1.xaml#hdt)]   
  
 该示例演示了使用 <xref:System.Windows.HierarchicalDataTemplate>，可以轻松地显示包含其他列表的列表数据。 下面是该示例的一个屏幕快照。  
  
 ![HierarchicalDataTemplate 示例屏幕快照](~/add/media/databinding-hierarchicaldatatemplate.png "HierarchicalDataTemplate 示例屏幕快照")  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemStringFormat">
      <MemberSignature Language="C#" Value="public string ItemStringFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ItemStringFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.HierarchicalDataTemplate.ItemStringFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property ItemStringFormat As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ItemStringFormat { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ItemStringFormat : string with get, set" Usage="System.Windows.HierarchicalDataTemplate.ItemStringFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个撰写字符串，该字符串指定如果数据层次结构的下一级中的项目显示为字符串，如何设置这些项目的格式。</summary>
        <value>一个撰写字符串，指定如果数据层次结构的下一级中的项目显示为字符串，如何设置这些项目的格式。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemTemplate">
      <MemberSignature Language="C#" Value="public System.Windows.DataTemplate ItemTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DataTemplate ItemTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Windows.HierarchicalDataTemplate.ItemTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Property ItemTemplate As DataTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DataTemplate ^ ItemTemplate { System::Windows::DataTemplate ^ get(); void set(System::Windows::DataTemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ItemTemplate : System.Windows.DataTemplate with get, set" Usage="System.Windows.HierarchicalDataTemplate.ItemTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要应用于生成的 <see cref="T:System.Windows.DataTemplate" />（比如 <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplate" /> 或 <see cref="T:System.Windows.Controls.HeaderedItemsControl" />）上的 <see cref="T:System.Windows.Controls.MenuItem" /> 属性的 <see cref="T:System.Windows.Controls.TreeViewItem" />，以指示如何显示数据层次结构下一级别中的项目。</summary>
        <value>要应用于生成的 <see cref="T:System.Windows.DataTemplate" />（比如 <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplate" /> 或 <see cref="T:System.Windows.Controls.HeaderedItemsControl" />）上的 <see cref="T:System.Windows.Controls.MenuItem" /> 属性的 <see cref="T:System.Windows.Controls.TreeViewItem" />，用于指示如何显示数据层次结构下一级别中的项目。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemTemplateSelector">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataTemplateSelector ItemTemplateSelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.DataTemplateSelector ItemTemplateSelector" />
      <MemberSignature Language="DocId" Value="P:System.Windows.HierarchicalDataTemplate.ItemTemplateSelector" />
      <MemberSignature Language="VB.NET" Value="Public Property ItemTemplateSelector As DataTemplateSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::DataTemplateSelector ^ ItemTemplateSelector { System::Windows::Controls::DataTemplateSelector ^ get(); void set(System::Windows::Controls::DataTemplateSelector ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ItemTemplateSelector : System.Windows.Controls.DataTemplateSelector with get, set" Usage="System.Windows.HierarchicalDataTemplate.ItemTemplateSelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataTemplateSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要应用于生成的 <see cref="T:System.Windows.Controls.DataTemplateSelector" />（比如 <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplateSelector" /> 或 <see cref="T:System.Windows.Controls.HeaderedItemsControl" />）上的 <see cref="T:System.Windows.Controls.MenuItem" /> 属性的 <see cref="T:System.Windows.Controls.TreeViewItem" />，以指示如何选择模板以显示数据层次结构下一级别中的项目。</summary>
        <value>要应用于生成的 <see cref="T:System.Windows.Controls.DataTemplateSelector" />（比如 <see cref="P:System.Windows.Controls.ItemsControl.ItemTemplateSelector" /> 或 <see cref="T:System.Windows.Controls.HeaderedItemsControl" />）上的 <see cref="T:System.Windows.Controls.MenuItem" /> 属性的 <see cref="T:System.Windows.Controls.TreeViewItem" /> 对象，指示如何选择模板以显示数据层次结构下一级别中的项目。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
