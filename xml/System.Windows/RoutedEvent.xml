<Type Name="RoutedEvent" FullName="System.Windows.RoutedEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4736d15eced5726d946f69a608e7ac4c243738f1" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89735397" /></Metadata><TypeSignature Language="C#" Value="public sealed class RoutedEvent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RoutedEvent extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.RoutedEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RoutedEvent" />
  <TypeSignature Language="C++ CLI" Value="public ref class RoutedEvent sealed" />
  <TypeSignature Language="F#" Value="type RoutedEvent = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Windows.Markup.RoutedEventConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Windows.Markup.RoutedEventConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Windows.Markup.ValueSerializer("System.Windows.Markup.RoutedEventValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.ValueSerializer("System.Windows.Markup.RoutedEventValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Windows.Markup.RoutedEventConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Windows.Markup.RoutedEventConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName Language="C#">[System.Windows.Markup.ValueSerializer("System.Windows.Markup.RoutedEventValueSerializer, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.ValueSerializer("System.Windows.Markup.RoutedEventValueSerializer, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示和标识路由事件，并声明其特征。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类包含 <xref:System.Windows.RoutedEvent.Name%2A> 、 <xref:System.Windows.RoutedEvent.RoutingStrategy%2A> 、 <xref:System.Windows.RoutedEvent.HandlerType%2A> 和 <xref:System.Windows.RoutedEvent.OwnerType%2A> 属性。 这些成员都不能具有 null 值。  
  
 此类具有 XAML 用法，专门用于提供 <xref:System.Windows.EventTrigger.RoutedEvent%2A> <xref:System.Windows.EventTrigger> (或派生类) 的属性的值，或用于 <xref:System.Windows.EventSetter.Event%2A> <xref:System.Windows.EventSetter> (或派生类) 的属性的值。 有关 <xref:System.Windows.EventTrigger> 这些类的、 <xref:System.Windows.EventSetter> 和 XAML 用法的详细信息，请参阅 [路由事件概述](/dotnet/framework/wpf/advanced/routed-events-overview)。  
  
<a name="xamlAttributeUsage_RoutedEvent"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```xaml 
<object property="eventName"/>  
```

- 或 -

```xaml
<object property="type.eventName"/>  
```

<a name="xamlValues_RoutedEvent"></a>   
## <a name="xaml-values"></a>XAML 值  
 *名*  
 与字段的属性等效的非限定事件名称 <xref:System.Windows.RoutedEvent.Name%2A> <xref:System.Windows.RoutedEvent> ，而不是 <xref:System.Windows.RoutedEvent> 类型中标识符字段的实际成员名称。 无需限定 *，事件* 名称必须将事件命名为在类型中找到的，该类型是 <xref:System.Windows.Style.TargetType%2A> 包含或的当前样式的 <xref:System.Windows.EventSetter> <xref:System.Windows.EventTrigger> 。  
  
 type  
 用于限定事件名称的类型。 如果提供不带前缀的 *类型* ，则类型应为默认 XAML 命名空间中的类型，并且可以映射到现有 CLR 类型。 对于自定义事件，或属于默认 XAML 命名空间之外的类型的事件， *类型* 的字符串可以包含映射的 xaml 命名空间的前缀。 该 XAML 命名空间应包含可映射到后备 CLR 类型的 XAML 类型，并且该 CLR 类型应定义所需的路由事件标识符。 有关 XAML 命名空间映射的详细信息，请参阅 [WPF xaml 的 Xaml 命名空间和命名空间映射](/dotnet/framework/wpf/advanced/xaml-namespaces-and-namespace-mapping-for-wpf-xaml)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddOwner">
      <MemberSignature Language="C#" Value="public System.Windows.RoutedEvent AddOwner (Type ownerType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.RoutedEvent AddOwner(class System.Type ownerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.RoutedEvent.AddOwner(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddOwner (ownerType As Type) As RoutedEvent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::RoutedEvent ^ AddOwner(Type ^ ownerType);" />
      <MemberSignature Language="F#" Value="member this.AddOwner : Type -&gt; System.Windows.RoutedEvent" Usage="routedEvent.AddOwner ownerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ownerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ownerType">添加路由事件的类型。</param>
        <summary>将另一个所有者类型与 <see cref="T:System.Windows.RoutedEvent" /> 实例所表示的路由事件相关联，并允许事件的路由和其处理。</summary>
        <returns>事件的标识符字段。 应使用此返回值设置一个公共静态只读字段，该字段将把路由事件的表示形式标识符存储在所属类型上。 此字段通常通过公共访问定义，因为用户代码必须引用字段以在使用 <see cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" /> 实用程序方法时，连接路由事件的任何实例处理程序。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 所有者类型在按名称解析事件时在内部使用。  
  
   
  
## Examples  
 下面的示例将当前类添加为其他类中定义的事件的另一个所有者。 此处， `AnotherEditContainer` 是当前类，并且 `EditStateChangedEvent` <xref:System.Windows.RoutedEvent> 字段定义为该类的成员。 `MyEditContainer`该类最初定义了该事件，并为其注册了具有相同名称的 `EditStateChangedEvent` 标识符。  
  
 [!code-csharp[ClassHandling#RoutedEventAddOwner](~/samples/snippets/csharp/VS_Snippets_Wpf/ClassHandling/CSharp/SDKSampleLibrary/class1.cs#routedeventaddowner)]
 [!code-vb[ClassHandling#RoutedEventAddOwner](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ClassHandling/visualbasic/sdksamplelibrary/class1.vb#routedeventaddowner)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandlerType">
      <MemberSignature Language="C#" Value="public Type HandlerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type HandlerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.RoutedEvent.HandlerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HandlerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ HandlerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HandlerType : Type" Usage="System.Windows.RoutedEvent.HandlerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取路由事件的处理程序类型。</summary>
        <value>路由事件的处理程序类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理程序类型是在实现将侦听由此表示的事件的处理程序时应使用的事件处理程序委托 <xref:System.Windows.RoutedEvent> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.RoutedEvent.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Windows.RoutedEvent.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取路由事件的标识名称。</summary>
        <value>路由事件的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 路由事件的名称在每个所有者类型内必须是唯一的，但不需要全局唯一。  
  
 此属性的值源自 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 定义的方法 <xref:System.Windows.RoutedEvent> 。 具体而言，的值 <xref:System.Windows.RoutedEvent.Name%2A> 是 `name` 传递给的参数值 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="OwnerType">
      <MemberSignature Language="C#" Value="public Type OwnerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type OwnerType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.RoutedEvent.OwnerType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OwnerType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ OwnerType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OwnerType : Type" Usage="System.Windows.RoutedEvent.OwnerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取路由事件的已注册所有者类型。</summary>
        <value>路由事件的所有者类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类型可以是任何对象类型，不一定限于 <xref:System.Windows.DependencyObject> 。 如果已添加所有者的路由事件，则此属性将返回第一个声明的所有者。  
  
 此属性的值源自 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 定义的方法 <xref:System.Windows.RoutedEvent> 。 具体而言，的值 <xref:System.Windows.RoutedEvent.OwnerType%2A> 是 `ownerType` 传递给的参数值 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="RoutingStrategy">
      <MemberSignature Language="C#" Value="public System.Windows.RoutingStrategy RoutingStrategy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.RoutingStrategy RoutingStrategy" />
      <MemberSignature Language="DocId" Value="P:System.Windows.RoutedEvent.RoutingStrategy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RoutingStrategy As RoutingStrategy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::RoutingStrategy RoutingStrategy { System::Windows::RoutingStrategy get(); };" />
      <MemberSignature Language="F#" Value="member this.RoutingStrategy : System.Windows.RoutingStrategy" Usage="System.Windows.RoutedEvent.RoutingStrategy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.RoutingStrategy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取路由事件的路由策略。</summary>
        <value>枚举值之一。 默认值为枚举默认值 <see cref="F:System.Windows.RoutingStrategy.Bubble" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 按照约定，隧道路由事件具有定义的名称前缀 "预览" 和关联的冒泡事件。 只会有一个隧道版本，而不是匹配的冒泡版本。 有关详细信息，请参阅 [如何：创建自定义路由事件](/dotnet/framework/wpf/advanced/how-to-create-a-custom-routed-event)。  
  
 此属性的值源自 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 定义的方法 <xref:System.Windows.RoutedEvent> 。 具体而言，的值 <xref:System.Windows.RoutedEvent.RoutingStrategy%2A> 是 `routingStrategy` 传递给的参数值 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.EventManager.RegisterRoutedEvent(System.String,System.Windows.RoutingStrategy,System.Type,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.RoutedEvent.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="routedEvent.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回此 <see cref="T:System.Windows.RoutedEvent" /> 的字符串表示形式。</summary>
        <returns>此对象的字符串表示形式，与 <see cref="P:System.Windows.RoutedEvent.Name" /> 返回的值相同。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
