<Type Name="EventSetter" FullName="System.Windows.EventSetter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="34ce037a56475f4eb386e55beed621a69fd12395" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89844876" /></Metadata><TypeSignature Language="C#" Value="public class EventSetter : System.Windows.SetterBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventSetter extends System.Windows.SetterBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.EventSetter" />
  <TypeSignature Language="VB.NET" Value="Public Class EventSetter&#xA;Inherits SetterBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventSetter : System::Windows::SetterBase" />
  <TypeSignature Language="F#" Value="type EventSetter = class&#xA;    inherit SetterBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.SetterBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>以某种样式表示事件资源库。 事件资源库可调用指定的事件处理程序来响应事件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 事件资源库可调用指定的事件处理程序以响应路由事件，这些事件应用于引用的所有元素， <xref:System.Windows.Style> 而不是要求您将实例处理程序附加到每个单独的元素。 仅 <xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType> 支持 <xref:System.Windows.EventSetter> 对象。  
  
 只能为作为路由事件的事件声明事件资源库。 可以使用直接路由策略、冒泡事件或隧道事件为路由事件声明事件资源库。  
  
 <xref:System.Windows.EventSetter>通常通过创建类的实例 [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] ，作为通过定义的样式中的对象元素 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 。 <xref:System.Windows.EventSetter>还可以从代码中实例化。  
  
 事件资源库不能用于主题资源字典中包含的样式。 这是因为主题资源字典在运行时通常是松散 [!INCLUDE[TLA#tla_baml](~/includes/tlasharptla-baml-md.md)] 文件，并且没有定义定义处理程序的随附代码隐藏的任何范围。  
  
 在事件的任何类处理程序之后以及任何实例处理程序之后，都将调用通过事件资源库附加的处理程序。 因此，如果类处理程序或实例处理程序将事件标记为在其参数中处理，则不会调用由事件资源库声明的处理程序，除非具体设置事件资源库 <xref:System.Windows.EventSetter.HandledEventsToo%2A> `true` 。  
  
 事件资源库还可以来自 <xref:System.Windows.Style.BasedOn%2A> 样式。 指定为的样式中的事件资源库处理程序 <xref:System.Windows.Style.BasedOn%2A> 将在处理程序立即被调用。  
  
 请注意，仅 <xref:System.Windows.Style.Setters%2A?displayProperty=nameWithType> 支持 <xref:System.Windows.EventSetter> 对象。 ) 不 <xref:System.Windows.TriggerBase> 支持 (和派生类的触发器 <xref:System.Windows.EventSetter> 。  
  
   
  
## Examples  
 下面的示例在 <xref:System.Windows.EventSetter> 页级样式中建立了一个。  
  
 [!code-xaml[EventOvwSupport#XAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml#xaml2)]  
  
 下面显示了示例事件处理程序：  
  
 [!code-csharp[EventOvwSupport#EventSetterRef](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml.cs#eventsetterref)]
 [!code-vb[EventOvwSupport#EventSetterRef](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EventOvwSupport/visualbasic/page2.xaml.vb#eventsetterref)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.RoutedEventArgs.Handled" />
    <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.EventSetter" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSetter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventSetter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSetter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.EventSetter" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventSetter (System.Windows.RoutedEvent routedEvent, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.RoutedEvent routedEvent, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.EventSetter.#ctor(System.Windows.RoutedEvent,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (routedEvent As RoutedEvent, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventSetter(System::Windows::RoutedEvent ^ routedEvent, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Windows.EventSetter : System.Windows.RoutedEvent * Delegate -&gt; System.Windows.EventSetter" Usage="new System.Windows.EventSetter (routedEvent, handler)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="routedEvent" Type="System.Windows.RoutedEvent" />
        <Parameter Name="handler" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="routedEvent"><see cref="T:System.Windows.EventSetter" /> 响应的特定路由事件。</param>
        <param name="handler">要在此资源库中分配的处理程序。</param>
        <summary>使用提供的事件和处理程序参数初始化 <see cref="T:System.Windows.EventSetter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果你 <xref:System.Windows.EventSetter> 在代码中创建或在代码隐藏中创建，以便在 <xref:System.Windows.EventSetter> 使用之前增强现有样式，通常会使用此签名。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Event">
      <MemberSignature Language="C#" Value="public System.Windows.RoutedEvent Event { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.RoutedEvent Event" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventSetter.Event" />
      <MemberSignature Language="VB.NET" Value="Public Property Event As RoutedEvent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::RoutedEvent ^ Event { System::Windows::RoutedEvent ^ get(); void set(System::Windows::RoutedEvent ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Event : System.Windows.RoutedEvent with get, set" Usage="System.Windows.EventSetter.Event" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此 <see cref="T:System.Windows.EventSetter" /> 响应的特定路由事件。</summary>
        <value>路由事件的标识符字段。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 一旦使用了包含的样式，就不能设置此属性 <xref:System.Windows.EventSetter> ，因此它是密封的。 如果您在代码中设置此属性，并且可能使用了样式，则在 <xref:System.Windows.SetterBase.IsSealed%2A> <xref:System.Windows.EventSetter> 您尝试设置之前，检查实例上的属性的值 <xref:System.Windows.EventSetter.Event%2A> 。  
  
   
  
## Examples  
 下面的示例将 <xref:System.Windows.EventSetter.Event%2A> 属性设置为 <xref:System.Windows.EventSetter> 标记样式中的的一部分。  
  
 [!code-xaml[EventOvwSupport#XAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml#xaml2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">尝试对密封 <see cref="T:System.Windows.EventSetter" /> 设置此属性。</exception>
        <altmember cref="P:System.Windows.RoutedEventArgs.Handled" />
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="HandledEventsToo">
      <MemberSignature Language="C#" Value="public bool HandledEventsToo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HandledEventsToo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventSetter.HandledEventsToo" />
      <MemberSignature Language="VB.NET" Value="Public Property HandledEventsToo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HandledEventsToo { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HandledEventsToo : bool with get, set" Usage="System.Windows.EventSetter.HandledEventsToo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值确定是否仍然应调用分配给资源库的处理程序，即使事件在其事件数据中被标记为已处理。</summary>
        <value>如果仍然应调用处理程序，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  若要设置 <xref:System.Windows.RoutedEventHandlerInfo.InvokeHandledEventsToo%2A> 事件处理程序的调用方式，必须始终在代码中执行此操作，与一般原则相同，即在将 <xref:System.Windows.RoutedEventHandlerInfo.InvokeHandledEventsToo%2A> 实例的定义的事件处理程序直接分配给属性语法中的命名事件时无法指定 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 。 尽管在中设置此值不 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 会生成任何编译时错误，但如果使用样式，则生成的 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 将生成运行时异常。  
  
<a name="xamlTextUsage_HandledEventsToo"></a>   
## <a name="xaml-text-usage"></a>XAML 文本用法  
 不应在中使用此属性 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 。 请参阅“备注”。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.RoutedEventArgs.Handled" />
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Handler">
      <MemberSignature Language="C#" Value="public Delegate Handler { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Delegate Handler" />
      <MemberSignature Language="DocId" Value="P:System.Windows.EventSetter.Handler" />
      <MemberSignature Language="VB.NET" Value="Public Property Handler As Delegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Delegate ^ Handler { Delegate ^ get(); void set(Delegate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Handler : Delegate with get, set" Usage="System.Windows.EventSetter.Handler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.EventSetterHandlerConverter))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.EventSetterHandlerConverter))&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置对资源库中路由事件的处理程序的引用。</summary>
        <value>对此 <see cref="T:System.Windows.EventSetter" /> 所附加处理程序的引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例 <xref:System.Windows.EventSetter.Handler%2A> <xref:System.Windows.EventSetter> 在标记样式中将属性设置为的一部分。  
  
 [!code-xaml[EventOvwSupport#XAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml#xaml2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.RoutedEvent.HandlerType" />
        <altmember cref="M:System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)" />
      </Docs>
    </Member>
  </Members>
</Type>
