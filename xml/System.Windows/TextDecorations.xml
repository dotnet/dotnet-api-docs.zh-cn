<Type Name="TextDecorations" FullName="System.Windows.TextDecorations">
  <Metadata><Meta Name="ms.openlocfilehash" Value="397416bfecab8a55231aaad041cca8359a748b9e" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83901102" /></Metadata><TypeSignature Language="C#" Value="public static class TextDecorations" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit TextDecorations extends System.Object" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Windows.TextDecorations" />
  <TypeSignature Language="VB.NET" Value="Public Class TextDecorations" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextDecorations abstract sealed" />
  <TypeSignature Language="F#" Value="type TextDecorations = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed TextDecorations extends System.Object" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一组静态预定义文本修饰。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有四种类型的文本修饰：基线、上划线、删除线和下划线。 下面的示例演示文本修饰相对于文本的位置。  
  
 ![文本修饰位置的关系图](~/add/media/textdecoration01.gif "文本修饰位置示意图")  
文本修饰类型示例  
  
<a name="xamlAttributeUsage_FontFamily"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object textDecorationsProperty="textDecorationType[,textDecorationType]"/>  
```  
  
<a name="xamlValues_FontFamily"></a>   
## <a name="xaml-values"></a>XAML 值  
 `textDecorationType`  
 文本修饰的类型： <xref:System.Windows.TextDecorations.Baseline%2A>、<xref:System.Windows.TextDecorations.OverLine%2A>、<xref:System.Windows.TextDecorations.Strikethrough%2A>或 <xref:System.Windows.TextDecorations.Underline%2A>。 允许使用多个修饰，其值用逗号分隔。 您还可以指定 "None"，以指示没有文本修饰类型。  
  
   
  
## Examples  
 在下面的示例中，删除线文本修饰使用默认字体值。  
  
 [!code-csharp[TextDecorationSnippets#TextDecorationSnippets1](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml.cs#textdecorationsnippets1)]
 [!code-vb[TextDecorationSnippets#TextDecorationSnippets1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextDecorationSnippets/visualbasic/window1.xaml.vb#textdecorationsnippets1)]
 [!code-xaml[TextDecorationSnippets#TextDecorationSnippets1](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml#textdecorationsnippets1)]  
  
 还可以为同一文本指定多个文本修饰。 在下面的示例中，下划线和上划线文本修饰用于相同的文本。  
  
 [!code-xaml[TextDecorationSnippets#TextDecorationSnippets4](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml#textdecorationsnippets4)]  
  
 您可以使用字符串值 "None" 指示 <xref:System.Windows.TextDecorations> 集合中没有文本修饰。 在下面的示例中，<xref:System.Windows.TextDecorations> 集合设置为 "None"。  
  
 [!code-xaml[TextDecorationSnippets#TextDecorationSnippets5](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml#textdecorationsnippets5)]  
  
 您可以使用 <xref:System.Windows.TextDecorationCollection.Clear%2A> 方法从文本中删除所有文本修饰。 在下面的示例中，将清除 <xref:System.Windows.TextDecorations> 集合。  
  
 [!code-csharp[TextDecorationSnippets#TextDecorationSnippets5a](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml.cs#textdecorationsnippets5a)]
 [!code-vb[TextDecorationSnippets#TextDecorationSnippets5a](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextDecorationSnippets/visualbasic/window1.xaml.vb#textdecorationsnippets5a)]  
  
 默认情况下，<xref:System.Windows.Documents.Hyperlink> 使用 <xref:System.Windows.TextDecoration> 对象来显示下划线。 以下标记示例显示了使用和不带下划线定义的 <xref:System.Windows.Documents.Hyperlink>：  
  
 [!code-xaml[Performance#PerformanceSnippet11](~/samples/snippets/csharp/VS_Snippets_Wpf/Performance/CSharp/Hyperlink.xaml#performancesnippet11)]  
  
 <xref:System.Windows.TextDecoration> 对象的实例化速度可能会很大，尤其是在有多个 <xref:System.Windows.Documents.Hyperlink> 对象的情况下。 有关详细信息，请参阅[如何：指定超链接是否带下划线](/dotnet/framework/wpf/advanced/how-to-specify-whether-a-hyperlink-is-underlined)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Baseline">
      <MemberSignature Language="C#" Value="public static System.Windows.TextDecorationCollection Baseline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.TextDecorationCollection Baseline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.TextDecorations.Baseline" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Baseline As TextDecorationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::TextDecorationCollection ^ Baseline { System::Windows::TextDecorationCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Baseline : System.Windows.TextDecorationCollection" Usage="System.Windows.TextDecorations.Baseline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TextDecorationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定一个基线 <see cref="T:System.Windows.TextDecoration" />。</summary>
        <value>一个表示基线 <see cref="T:System.Windows.TextDecoration" /> 的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的示例演示基线文本修饰相对于文本的位置。  
  
 ![文本修饰位置的关系图](~/add/media/textdecoration01.gif "文本修饰位置示意图")  
基线文本修饰的示例  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverLine">
      <MemberSignature Language="C#" Value="public static System.Windows.TextDecorationCollection OverLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.TextDecorationCollection OverLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.TextDecorations.OverLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OverLine As TextDecorationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::TextDecorationCollection ^ OverLine { System::Windows::TextDecorationCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OverLine : System.Windows.TextDecorationCollection" Usage="System.Windows.TextDecorations.OverLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TextDecorationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定一个上划线 <see cref="T:System.Windows.TextDecoration" />。</summary>
        <value>一个表示上划线 <see cref="T:System.Windows.TextDecoration" /> 的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的示例显示了上划线文本修饰相对于文本的位置。  
  
 ![文本修饰位置的关系图](~/add/media/textdecoration01.gif "文本修饰位置示意图")  
上划线文本修饰的示例  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Strikethrough">
      <MemberSignature Language="C#" Value="public static System.Windows.TextDecorationCollection Strikethrough { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.TextDecorationCollection Strikethrough" />
      <MemberSignature Language="DocId" Value="P:System.Windows.TextDecorations.Strikethrough" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Strikethrough As TextDecorationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::TextDecorationCollection ^ Strikethrough { System::Windows::TextDecorationCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Strikethrough : System.Windows.TextDecorationCollection" Usage="System.Windows.TextDecorations.Strikethrough" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TextDecorationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定一个删除线 <see cref="T:System.Windows.TextDecoration" />。</summary>
        <value>一个表示删除线 <see cref="T:System.Windows.TextDecoration" /> 的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的示例显示删除线文本修饰相对于文本的位置。  
  
 ![文本修饰位置的关系图](~/add/media/textdecoration01.gif "文本修饰位置示意图")  
删除线文本修饰的示例  
  
   
  
## Examples  
 在下面的示例中，通过使用画笔的纯色画笔来创建删除线文本修饰。 <xref:System.Windows.TextDecoration.Location%2A> 属性设置为 <xref:System.Windows.TextDecorationLocation.Strikethrough>。  
  
 [!code-csharp[TextDecorationSnippets#TextDecorationSnippets1](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml.cs#textdecorationsnippets1)]
 [!code-vb[TextDecorationSnippets#TextDecorationSnippets1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextDecorationSnippets/visualbasic/window1.xaml.vb#textdecorationsnippets1)]
 [!code-xaml[TextDecorationSnippets#TextDecorationSnippets1](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml#textdecorationsnippets1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Underline">
      <MemberSignature Language="C#" Value="public static System.Windows.TextDecorationCollection Underline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.TextDecorationCollection Underline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.TextDecorations.Underline" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Underline As TextDecorationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::TextDecorationCollection ^ Underline { System::Windows::TextDecorationCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Underline : System.Windows.TextDecorationCollection" Usage="System.Windows.TextDecorations.Underline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TextDecorationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定一个下划线 <see cref="T:System.Windows.TextDecoration" />。</summary>
        <value>一个表示下划线 <see cref="T:System.Windows.TextDecoration" /> 的值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的示例显示下划线文本修饰相对于文本的位置。  
  
 ![文本修饰位置的关系图](~/add/media/textdecoration01.gif "文本修饰位置示意图")  
下划线文本修饰的示例  
  
 默认情况下，<xref:System.Windows.Documents.Hyperlink> 使用 <xref:System.Windows.TextDecoration> 对象来显示下划线。 有关详细信息，请参阅[如何：指定超链接是否带下划线](/dotnet/framework/wpf/advanced/how-to-specify-whether-a-hyperlink-is-underlined)。  
  
   
  
## Examples  
 下图显示了使用线性渐变画笔和虚线笔进行样式化的文本修饰。  
  
 ![带有线性渐变下划线的文本修饰](~/add/media/textdecoration02.png "采用线性渐变下划线的文本修饰")  
使用线性渐变画笔和虚线笔样式的下划线的示例  
  
 在下面的代码示例中，通过对虚线笔使用线性渐变画笔来创建下划线文本修饰。  
  
 [!code-csharp[TextDecorationSnippets#TextDecorationSnippets3](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml.cs#textdecorationsnippets3)]
 [!code-vb[TextDecorationSnippets#TextDecorationSnippets3](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextDecorationSnippets/visualbasic/window1.xaml.vb#textdecorationsnippets3)]
 [!code-xaml[TextDecorationSnippets#TextDecorationSnippets3](~/samples/snippets/csharp/VS_Snippets_Wpf/TextDecorationSnippets/CSharp/Window1.xaml#textdecorationsnippets3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
