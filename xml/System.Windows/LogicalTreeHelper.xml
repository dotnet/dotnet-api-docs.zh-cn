<Type Name="LogicalTreeHelper" FullName="System.Windows.LogicalTreeHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fa987173cae01f0349100bb7794a8a3344944595" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83883756" /></Metadata><TypeSignature Language="C#" Value="public static class LogicalTreeHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit LogicalTreeHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.LogicalTreeHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class LogicalTreeHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class LogicalTreeHelper abstract sealed" />
  <TypeSignature Language="F#" Value="type LogicalTreeHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供用于查询逻辑树中的对象的静态帮助器方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.LogicalTreeHelper> 类提供的方法可用于返回对象的子集合，或从逻辑树的子节点内返回特定对象。 但是，您通常执行的大多数对象树操作也由 <xref:System.Windows.FrameworkElement> 或 <xref:System.Windows.FrameworkContentElement>上的类似方法或属性公开。 例如，尝试下列操作：  
  
-   不调用返回逻辑子对象的枚举器的静态 <xref:System.Windows.LogicalTreeHelper.GetChildren%2A> 方法，而是使用在该对象的内容模型中公开的专用集合。 几乎所有支持内容模型的对象都公开了某些包含子对象集合的属性，并直接在该集合上提供集合接口支持。  
  
-   不是调用静态 <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> 方法来通过指定子对象的名称来获取子对象，而是对特定对象调用 <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> 或 <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> 方法。  
  
 <xref:System.Windows.LogicalTreeHelper> 对于分析方案非常有用，在这种情况下，将以递归方式遍历逻辑树，并使用一致的方法检查各种父对象或子对象。 在这种情况下，你可能会访问混合内容模型，使用更多内容模型的特定 Api 会过于复杂。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public static void BringIntoView (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BringIntoView(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub BringIntoView (current As DependencyObject)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void BringIntoView(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member BringIntoView : System.Windows.DependencyObject -&gt; unit" Usage="System.Windows.LogicalTreeHelper.BringIntoView current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">要使其可见的 UI 元素。</param>
        <summary>尝试使所请求的 UI 元素可见，并在目标上引发 <see cref="E:System.Windows.FrameworkElement.RequestBringIntoView" /> 事件以报告结果。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，调用实例方法 <xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=nameWithType> 或 <xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=nameWithType> 而不是此静态实用工具方法更方便。 实例方法的行为等效于静态方法的行为。  
  
 即使提供的 `current` UI 元素是 <xref:System.Windows.FrameworkContentElement>，生成的事件仍是同一 <xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=nameWithType> 事件，并通过检查事件的事件数据来标识 <xref:System.Windows.FrameworkContentElement> 原始事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkElement.RequestBringIntoView" />
      </Docs>
    </Member>
    <Member MemberName="FindLogicalNode">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject FindLogicalNode (System.Windows.DependencyObject logicalTreeNode, string elementName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject FindLogicalNode(class System.Windows.DependencyObject logicalTreeNode, string elementName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindLogicalNode (logicalTreeNode As DependencyObject, elementName As String) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ FindLogicalNode(System::Windows::DependencyObject ^ logicalTreeNode, System::String ^ elementName);" />
      <MemberSignature Language="F#" Value="static member FindLogicalNode : System.Windows.DependencyObject * string -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.FindLogicalNode (logicalTreeNode, elementName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalTreeNode" Type="System.Windows.DependencyObject" />
        <Parameter Name="elementName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logicalTreeNode">从其开始搜索的对象。 此对象必须是 <see cref="T:System.Windows.FrameworkElement" /> 或 <see cref="T:System.Windows.FrameworkContentElement" />。</param>
        <param name="elementName">要查找的对象的名称。</param>
        <summary>尝试查找并返回具有指定名称的对象。 搜索从指定对象开始，并持续到逻辑树的子节点中。</summary>
        <returns>如果找到一个，则为具有匹配名称的元素；如果没有在逻辑树中找到匹配名称，则返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=nameWithType> 和 <xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=nameWithType> 的方法在表面上类似于 <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>，但使用不同的逻辑进行操作：  
  
-   <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> 的搜索方向朝向子对象（沿树向下）;`FindName` 方法的搜索方向朝向父对象（向上滚动树）。  
  
-   `FindName` 方法由 XAML 名称范围的概念控制。 使用 `FindName` 可以保证只存在一个同名的对象，因为 XAML 名称范围强制执行唯一性。 相反，<xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> 忽略 XAML 名称范围，并可能在搜索期间跨越 XAML 名称范围边界。 同样，一旦越过边界，就不能保证 `elementName` 名称的唯一性。 有关 XAML 名称范围的详细信息，请参阅[WPF XAML 名称范围](/dotnet/framework/wpf/advanced/wpf-xaml-namescopes)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChildren">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>通过处理逻辑树，返回指定对象的直接子对象的集合。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As DependencyObject) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.DependencyObject -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">要从中开始处理逻辑树的对象。 这预期为是 <see cref="T:System.Windows.FrameworkElement" /> 或 <see cref="T:System.Windows.FrameworkContentElement" />。</param>
        <summary>通过处理逻辑树返回指定的对象的即时子对象集合。</summary>
        <returns>来自指定对象逻辑树的即时子对象的可枚举集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果您不确定 `current` 是 <xref:System.Windows.FrameworkElement> 还是 <xref:System.Windows.FrameworkContentElement>，也不确定该对象的类是否支持其自己的内容模型集合，请主要使用此签名和帮助器方法。 如果你可以确定要查询的对象的类型，请检查你知道在该类型上存在的特定内容属性。 例如，如果您知道要查询的对象是 <xref:System.Windows.Controls.ItemsControl>，请检查 <xref:System.Windows.Controls.ItemsControl.Items%2A> 属性以获取强类型集合，该集合具有集合接口支持并且可能比枚举器更有用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkContentElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkContentElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkContentElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkContentElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkContentElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkContentElement" />
      </Parameters>
      <Docs>
        <param name="current">要从中开始处理逻辑树的对象。</param>
        <summary>通过处理逻辑树返回指定 <see cref="T:System.Windows.FrameworkContentElement" /> 的即时子对象集合。</summary>
        <returns>从逻辑树中 <paramref name="current" /> 开始的即时子对象的枚举集合。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChildren">
      <MemberSignature Language="C#" Value="public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkElement current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IEnumerable GetChildren(class System.Windows.FrameworkElement current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetChildren (current As FrameworkElement) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IEnumerable ^ GetChildren(System::Windows::FrameworkElement ^ current);" />
      <MemberSignature Language="F#" Value="static member GetChildren : System.Windows.FrameworkElement -&gt; System.Collections.IEnumerable" Usage="System.Windows.LogicalTreeHelper.GetChildren current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.FrameworkElement" />
      </Parameters>
      <Docs>
        <param name="current">要从中开始处理逻辑树的对象。</param>
        <summary>通过处理逻辑树返回指定 <see cref="T:System.Windows.FrameworkElement" /> 的即时子对象集合。</summary>
        <returns>从逻辑树中 <paramref name="current" /> 开始的即时子对象的枚举集合。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParent">
      <MemberSignature Language="C#" Value="public static System.Windows.DependencyObject GetParent (System.Windows.DependencyObject current);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.DependencyObject GetParent(class System.Windows.DependencyObject current) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetParent (current As DependencyObject) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::DependencyObject ^ GetParent(System::Windows::DependencyObject ^ current);" />
      <MemberSignature Language="F#" Value="static member GetParent : System.Windows.DependencyObject -&gt; System.Windows.DependencyObject" Usage="System.Windows.LogicalTreeHelper.GetParent current" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="current" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="current">要查找其父对象的对象。 这应为 <see cref="T:System.Windows.FrameworkElement" /> 或 <see cref="T:System.Windows.FrameworkContentElement" />。</param>
        <summary>通过处理逻辑树，返回指定对象的父对象。</summary>
        <returns>所请求的父对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法只是一个包装器，用于获取 <xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=nameWithType> 或 <xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=nameWithType> 属性的相应类型版本（<xref:System.Windows.FrameworkElement> 或 <xref:System.Windows.FrameworkContentElement>）;因此，除非您无法确定 `current` 类型，否则您可能希望改为检查相应的实例属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
