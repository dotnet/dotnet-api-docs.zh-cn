<Type Name="WeakEventManager" FullName="System.Windows.WeakEventManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="298ec283bf8595054d7140c7867eb890cd0563b4" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83976710" /></Metadata><TypeSignature Language="C#" Value="public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit WeakEventManager extends System.Windows.Threading.DispatcherObject" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0" />
  <TypeSignature Language="DocId" Value="T:System.Windows.WeakEventManager" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class WeakEventManager&#xA;Inherits DispatcherObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class WeakEventManager abstract : System::Windows::Threading::DispatcherObject" />
  <TypeSignature Language="F#" Value="type WeakEventManager = class&#xA;    inherit DispatcherObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract WeakEventManager extends System.Windows.Threading.DispatcherObject" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="4d856-101">为在“弱事件模式”中使用的事件管理器提供基类。</span><span class="sxs-lookup"><span data-stu-id="4d856-101">Provides a base class for the event manager that is used in the *weak event pattern*.</span></span> <span data-ttu-id="4d856-102">管理器为也使用该模式的事件（或回调）添加和移除侦听器。</span><span class="sxs-lookup"><span data-stu-id="4d856-102">The manager adds and removes listeners for events (or callbacks) that also use the pattern.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d856-103">当事件源具有独立于事件侦听器的对象生存期时，通常使用弱事件模式。</span><span class="sxs-lookup"><span data-stu-id="4d856-103">You typically use the weak event pattern when the event source has an object lifetime that is independent of the event listeners.</span></span> <span data-ttu-id="4d856-104">使用 <xref:System.Windows.WeakEventManager> 的中心事件调度功能，即使源对象仍然存在，也可以进行垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="4d856-104">Using the central event dispatching capability of a <xref:System.Windows.WeakEventManager> allows the listener's handlers to be garbage collected even if the source object persists.</span></span> <span data-ttu-id="4d856-105">与此相反，使用 `+=` 运算符的定期事件挂接会导致可能断开连接的源持有对侦听器的引用。</span><span class="sxs-lookup"><span data-stu-id="4d856-105">By contrast, a regular event hookup using the `+=` operator causes the potentially disconnected source to hold a reference to the listeners.</span></span> <span data-ttu-id="4d856-106">这会阻止接收方及时进行垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="4d856-106">This prevents the receiver from being garbage collected in a timely fashion.</span></span>  
  
 <span data-ttu-id="4d856-107">源和侦听器之间的生存期关系应使用弱事件模式的一种常见情况是处理来自数据绑定的更新事件。</span><span class="sxs-lookup"><span data-stu-id="4d856-107">One common situation where the lifetime relationships between sources and listeners should use of the weak event pattern is the handling of update events coming from data bindings.</span></span>  
  
 <span data-ttu-id="4d856-108">弱事件模式也可用于回调和常规事件。</span><span class="sxs-lookup"><span data-stu-id="4d856-108">The weak event pattern can also be used for callbacks and regular events.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="4d856-109">有关自定义 <see cref="T:System.Windows.WeakEventManager" />的示例，请参阅[弱事件模式](/dotnet/framework/wpf/advanced/weak-event-patterns)。</span><span class="sxs-lookup"><span data-stu-id="4d856-109">For an example of a custom <see cref="T:System.Windows.WeakEventManager" />, see [Weak Event Patterns](/dotnet/framework/wpf/advanced/weak-event-patterns).</span></span></para></block>
    <altmember cref="T:System.Windows.IWeakEventListener" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected WeakEventManager ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; WeakEventManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4d856-110">在基类值由派生类的构造函数用作初始值设定项时初始化基类值。</span><span class="sxs-lookup"><span data-stu-id="4d856-110">Initializes base class values when it is used as the initializer by the constructor of a derived class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeliverEvent">
      <MemberSignature Language="C#" Value="protected void DeliverEvent (object sender, EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEvent(object sender, class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEvent (sender As Object, args As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEvent(System::Object ^ sender, EventArgs ^ args);" />
      <MemberSignature Language="F#" Value="member this.DeliverEvent : obj * EventArgs -&gt; unit" Usage="weakEventManager.DeliverEvent (sender, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="4d856-111">在其中处理事件的对象。</span><span class="sxs-lookup"><span data-stu-id="4d856-111">The object on which the event is being handled.</span></span></param>
        <param name="args"><span data-ttu-id="4d856-112">一个包含要传递的事件的事件数据的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="4d856-112">An <see cref="T:System.EventArgs" /> that contains the event data for the event to deliver.</span></span></param>
        <summary><span data-ttu-id="4d856-113">将正在托管的事件传送到每个侦听器。</span><span class="sxs-lookup"><span data-stu-id="4d856-113">Delivers the event being managed to each listener.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d856-114">从事件处理程序中调用 <xref:System.Windows.WeakEventManager.DeliverEvent%2A> 方法，这些事件处理程序由子类的 <xref:System.Windows.WeakEventManager.StartListening%2A> 和 <xref:System.Windows.WeakEventManager.StopListening%2A> 实现添加或移除。</span><span class="sxs-lookup"><span data-stu-id="4d856-114">Call the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method from within the event handlers that are added or removed by the <xref:System.Windows.WeakEventManager.StartListening%2A> and <xref:System.Windows.WeakEventManager.StopListening%2A> implementations of subclasses.</span></span>  
  
 <span data-ttu-id="4d856-115">如果在类的 `AddListener` 实现中调用 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 方法，则接收事件的侦听器列表将保留在基础集合中。</span><span class="sxs-lookup"><span data-stu-id="4d856-115">If you call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method in your `AddListener` implementation of your class, the list of listeners receiving the event is kept in an underlying collection.</span></span> <span data-ttu-id="4d856-116">（`AddListener` 不是接口或类协定的一部分。</span><span class="sxs-lookup"><span data-stu-id="4d856-116">(`AddListener` is not part of an interface or class contract.</span></span> <span data-ttu-id="4d856-117">`AddListener` 是你的管理器类的方法的建议名称，该类调用 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 并为事件添加弱事件模式侦听器。）</span><span class="sxs-lookup"><span data-stu-id="4d856-117">`AddListener` is the suggested name for the method of your manager class that calls <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> and adds weak event pattern listeners for the event.)</span></span>  
  
 <span data-ttu-id="4d856-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 将侦听器添加到单个列表。</span><span class="sxs-lookup"><span data-stu-id="4d856-118"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single list.</span></span> <span data-ttu-id="4d856-119">如果经理实现为每个事件维护多个侦听器列表，请不要使用 <xref:System.Windows.WeakEventManager.DeliverEvent%2A> 或 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d856-119">If your manager implementation maintains more than one list of listeners per event, do not use <xref:System.Windows.WeakEventManager.DeliverEvent%2A> or <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="4d856-120">相反，你的实现应创建自己的 <xref:System.Windows.WeakEventManager.ListenerList> 实例，`AddListener` 应将侦听器添加到相应的列表，并且应通过调用 <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>将事件传递到相应的侦听器列表。</span><span class="sxs-lookup"><span data-stu-id="4d856-120">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling <xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
      </Docs>
    </Member>
    <Member MemberName="DeliverEventToList">
      <MemberSignature Language="C#" Value="protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void DeliverEventToList(object sender, class System.EventArgs args, class System.Windows.WeakEventManager/ListenerList list) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub DeliverEventToList (sender As Object, args As EventArgs, list As WeakEventManager.ListenerList)" />
      <MemberSignature Language="F#" Value="member this.DeliverEventToList : obj * EventArgs * System.Windows.WeakEventManager.ListenerList -&gt; unit" Usage="weakEventManager.DeliverEventToList (sender, args, list)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void DeliverEventToList(System::Object ^ sender, EventArgs ^ args, System::Windows::WeakEventManager::ListenerList ^ list);" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
        <Parameter Name="list" Type="System.Windows.WeakEventManager+ListenerList" />
      </Parameters>
      <Docs>
        <param name="sender"><span data-ttu-id="4d856-121">在其中处理事件的对象。</span><span class="sxs-lookup"><span data-stu-id="4d856-121">The object on which the event is being handled.</span></span></param>
        <param name="args"><span data-ttu-id="4d856-122">包含事件数据的 <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="4d856-122">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <param name="list"><span data-ttu-id="4d856-123">提供的 <see cref="T:System.Windows.WeakEventManager.ListenerList" />。</span><span class="sxs-lookup"><span data-stu-id="4d856-123">The provided <see cref="T:System.Windows.WeakEventManager.ListenerList" />.</span></span></param>
        <summary><span data-ttu-id="4d856-124">将正在托管的事件传送到所提供列表中的每个侦听器。</span><span class="sxs-lookup"><span data-stu-id="4d856-124">Delivers the event being managed to each listener in the provided list.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d856-125">如果您的管理器实现基于事件数据中捕获的信息维护单独的侦听器列表，则此方法是必需的。</span><span class="sxs-lookup"><span data-stu-id="4d856-125">This method is necessary if your manager implementation maintains separate listeners lists based on information that is captured in the event data.</span></span> <span data-ttu-id="4d856-126">如果使用此高级技术，则必须创建和维护单独的列表作为经理实现的一部分，并且必须提供向特定列表添加侦听器的方法。</span><span class="sxs-lookup"><span data-stu-id="4d856-126">If you use this advanced technique, you must create and maintain the separate lists as part of your manager implementation, and you must provide a way to add listeners to a specific list.</span></span> <span data-ttu-id="4d856-127">侦听原始事件的处理程序实现必须遵循用于区分列表的条件，并且仅将事件传递到适当列表。</span><span class="sxs-lookup"><span data-stu-id="4d856-127">Your handler implementation that listens to the raw event must act upon the condition that you use to differentiate the lists, and deliver the event only to the appropriate list or lists.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GetCurrentManager">
      <MemberSignature Language="C#" Value="protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig class System.Windows.WeakEventManager GetCurrentManager(class System.Type managerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function GetCurrentManager (managerType As Type) As WeakEventManager" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static System::Windows::WeakEventManager ^ GetCurrentManager(Type ^ managerType);" />
      <MemberSignature Language="F#" Value="static member GetCurrentManager : Type -&gt; System.Windows.WeakEventManager" Usage="System.Windows.WeakEventManager.GetCurrentManager managerType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="managerType"><span data-ttu-id="4d856-128">要为其获取 <see cref="T:System.Windows.WeakEventManager" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="4d856-128">The type to obtain the <see cref="T:System.Windows.WeakEventManager" /> for.</span></span></param>
        <summary><span data-ttu-id="4d856-129">返回用于所提供类型的 <see cref="T:System.Windows.WeakEventManager" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="4d856-129">Returns the <see cref="T:System.Windows.WeakEventManager" /> implementation that is used for the provided type.</span></span></summary>
        <returns><span data-ttu-id="4d856-130">匹配的 <see cref="T:System.Windows.WeakEventManager" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="4d856-130">The matching <see cref="T:System.Windows.WeakEventManager" /> implementation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d856-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 实现使用其传递的 `managerType`调用此方法。</span><span class="sxs-lookup"><span data-stu-id="4d856-131"><xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> implementations call this method using their passed `managerType`.</span></span> <span data-ttu-id="4d856-132">然后，将返回的 <xref:System.Windows.WeakEventManager> 用作可确定接收事件的区别，以及要调用的私有类处理程序。</span><span class="sxs-lookup"><span data-stu-id="4d856-132">The returned <xref:System.Windows.WeakEventManager> is then used as the differentiator that determines which event was received, and which private class handler to invoke.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="protected object this[object source] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Protected Property Item(source As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ source); void set(System::Object ^ source, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj with get, set" Usage="System.Windows.WeakEventManager.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d856-133">所请求源的从零开始的索引。</span><span class="sxs-lookup"><span data-stu-id="4d856-133">The zero-based index of the requested source.</span></span></param>
        <summary><span data-ttu-id="4d856-134">获取或设置为指定的源存储的数据。</span><span class="sxs-lookup"><span data-stu-id="4d856-134">Gets or sets the data being stored for the specified source.</span></span></summary>
        <value><span data-ttu-id="4d856-135">通过此源的管理器存储的数据。</span><span class="sxs-lookup"><span data-stu-id="4d856-135">Data being stored by the manager for this source.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d856-136">派生类可以选择要存储在此索引器中的数据和类型。</span><span class="sxs-lookup"><span data-stu-id="4d856-136">Derived classes can choose what data and type to store in this indexer.</span></span> <span data-ttu-id="4d856-137">通常，这是作为 <xref:System.Windows.WeakEventManager.ListenerList>实现的，后者是对侦听器的弱引用的列表。</span><span class="sxs-lookup"><span data-stu-id="4d856-137">Typically this is implemented as a <xref:System.Windows.WeakEventManager.ListenerList>, which is a list of weak references to listeners.</span></span> <span data-ttu-id="4d856-138">如果 <xref:System.Windows.WeakEventManager.ListenerList> 类型不能包含所需的信息，则只需更改此类型。</span><span class="sxs-lookup"><span data-stu-id="4d856-138">You would only have to change this type if the <xref:System.Windows.WeakEventManager.ListenerList> type cannot contain your required information.</span></span> <span data-ttu-id="4d856-139">如果是这样，则必须重写 <xref:System.Windows.WeakEventManager.Purge%2A> 方法，以便正确执行基础类型的所有清理操作。</span><span class="sxs-lookup"><span data-stu-id="4d856-139">If so, you will have to override the <xref:System.Windows.WeakEventManager.Purge%2A> method so that all cleanup of the underlying type is performed correctly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="NewListenerList">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.WeakEventManager/ListenerList NewListenerList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.NewListenerList" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function NewListenerList () As WeakEventManager.ListenerList" />
      <MemberSignature Language="F#" Value="abstract member NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList&#xA;override this.NewListenerList : unit -&gt; System.Windows.WeakEventManager.ListenerList" Usage="weakEventManager.NewListenerList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.WeakEventManager+ListenerList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4d856-140">返回包含事件侦听器的新对象。</span><span class="sxs-lookup"><span data-stu-id="4d856-140">Returns a new object to contain listeners to an event.</span></span></summary>
        <returns><span data-ttu-id="4d856-141">包含事件侦听器的新对象。</span><span class="sxs-lookup"><span data-stu-id="4d856-141">A new object to contain listeners to an event.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedAddHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedAddHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.Delegate" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d856-142">处理程序代理订阅的源对象。</span><span class="sxs-lookup"><span data-stu-id="4d856-142">The source object that the handler delegate subscribes to.</span></span></param>
        <param name="handler"><span data-ttu-id="4d856-143">处理 <paramref name="source" /> 引发的事件的委托。</span><span class="sxs-lookup"><span data-stu-id="4d856-143">The delegate that handles the event that is raised by <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="4d856-144">添加指定的委托为指定源的事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="4d856-144">Adds the specified delegate as an event handler of the specified source.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedAddListener">
      <MemberSignature Language="C#" Value="protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedAddListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedAddListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedAddListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedAddListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedAddListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d856-145">要附加侦听器的源。</span><span class="sxs-lookup"><span data-stu-id="4d856-145">The source to attach listeners to.</span></span></param>
        <param name="listener"><span data-ttu-id="4d856-146">侦听类（必须实现 <see cref="T:System.Windows.IWeakEventListener" />）。</span><span class="sxs-lookup"><span data-stu-id="4d856-146">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span></span></param>
        <summary><span data-ttu-id="4d856-147">将提供的侦听器添加到为托管事件所提供的源中。</span><span class="sxs-lookup"><span data-stu-id="4d856-147">Adds the provided listener to the provided source for the event being managed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d856-148">在管理器类中调用此方法，`AddListener` <xref:System.Windows.WeakEventManager> 实现中的方法。</span><span class="sxs-lookup"><span data-stu-id="4d856-148">Call this method within your manager class `AddListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="4d856-149">`AddListener` 是你在管理器类上定义的静态方法的建议名称，可让其他类添加弱事件模式的侦听器。</span><span class="sxs-lookup"><span data-stu-id="4d856-149">`AddListener` is the suggested name for the static method you define on your manager class to enable other classes to add a listener for your weak event pattern.</span></span> <span data-ttu-id="4d856-150">`AddListener` 应采用以下两个参数：侦听器附加到的 `source` 和 `listener` 的实例。</span><span class="sxs-lookup"><span data-stu-id="4d856-150">`AddListener` should take two parameters: the `source` where the listener is attached, and the `listener` instance.</span></span> <span data-ttu-id="4d856-151">对于 `AddListener` 实现，请对当前管理器调用 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 方法并传递相同的两个参数。</span><span class="sxs-lookup"><span data-stu-id="4d856-151">For your `AddListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="4d856-152">如果侦听器列表之前为空，则 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 在内部调用 <xref:System.Windows.WeakEventManager.StartListening%2A> 方法，这将通过多态性调用特定 <xref:System.Windows.WeakEventManager.StartListening%2A> 重写。</span><span class="sxs-lookup"><span data-stu-id="4d856-152">If the list of listeners was previously empty, <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> calls the <xref:System.Windows.WeakEventManager.StartListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StartListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="4d856-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 将侦听器添加到每个 `source`的单个内部 <xref:System.Windows.WeakEventManager.ListenerList>。</span><span class="sxs-lookup"><span data-stu-id="4d856-153"><xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> adds listeners to a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="4d856-154">如果经理实现为每个事件源组合维护多个侦听器列表，请不要使用 <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d856-154">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</span></span> <span data-ttu-id="4d856-155">相反，您的实现应创建自己的 <xref:System.Windows.WeakEventManager.ListenerList> 实例，`AddListener` 应将侦听器添加到相应的列表，并且应通过调用 <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> 事件而不是 <xref:System.Windows.WeakEventManager.DeliverEvent%2A> 方法将事件传递到适当的侦听器列表。</span><span class="sxs-lookup"><span data-stu-id="4d856-155">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `AddListener` should add listeners to the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> event instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveHandler">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveHandler (object source, Delegate handler);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveHandler(object source, class System.Delegate handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveHandler (source As Object, handler As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveHandler(System::Object ^ source, Delegate ^ handler);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveHandler : obj * Delegate -&gt; unit" Usage="weakEventManager.ProtectedRemoveHandler (source, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" Index="0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="handler" Type="System.Delegate" Index="1" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d856-156">要从中移除处理程序的源。</span><span class="sxs-lookup"><span data-stu-id="4d856-156">The source to remove the handler from.</span></span></param>
        <param name="handler"><span data-ttu-id="4d856-157">要从 <paramref name="source" /> 移除的委托。</span><span class="sxs-lookup"><span data-stu-id="4d856-157">The delegate to remove from <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="4d856-158">从指定的源中移除以前添加的处理程序。</span><span class="sxs-lookup"><span data-stu-id="4d856-158">Removes the previously added handler from the specified source.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectedRemoveListener">
      <MemberSignature Language="C#" Value="protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ProtectedRemoveListener(object source, class System.Windows.IWeakEventListener listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ProtectedRemoveListener (source As Object, listener As IWeakEventListener)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ProtectedRemoveListener(System::Object ^ source, System::Windows::IWeakEventListener ^ listener);" />
      <MemberSignature Language="F#" Value="member this.ProtectedRemoveListener : obj * System.Windows.IWeakEventListener -&gt; unit" Usage="weakEventManager.ProtectedRemoveListener (source, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="listener" Type="System.Windows.IWeakEventListener" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d856-159">要从中移除侦听器的源。</span><span class="sxs-lookup"><span data-stu-id="4d856-159">The source to remove listeners from.</span></span></param>
        <param name="listener"><span data-ttu-id="4d856-160">侦听类（必须实现 <see cref="T:System.Windows.IWeakEventListener" />）。</span><span class="sxs-lookup"><span data-stu-id="4d856-160">The listening class (which must implement <see cref="T:System.Windows.IWeakEventListener" />).</span></span></param>
        <summary><span data-ttu-id="4d856-161">从提供的源中移除以前添加的侦听器。</span><span class="sxs-lookup"><span data-stu-id="4d856-161">Removes a previously added listener from the provided source.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d856-162">在管理器类中调用此方法，`RemoveListener` <xref:System.Windows.WeakEventManager> 实现中的方法。</span><span class="sxs-lookup"><span data-stu-id="4d856-162">Call this method within your manager class `RemoveListener` methods on <xref:System.Windows.WeakEventManager> implementations.</span></span> <span data-ttu-id="4d856-163">`RemoveListener` 是你在管理器类上定义的静态方法的建议名称，可让其他类删除弱事件模式的侦听器。</span><span class="sxs-lookup"><span data-stu-id="4d856-163">`RemoveListener` is the suggested name for the static method you define on your manager class to enable other classes to remove a listener for your weak event pattern.</span></span> <span data-ttu-id="4d856-164">`RemoveListener` 应采用以下两个参数：删除侦听器的 `source` 和 `listener` 类。</span><span class="sxs-lookup"><span data-stu-id="4d856-164">`RemoveListener` should take two parameters: the `source` where the listener is removed, and the `listener` class.</span></span> <span data-ttu-id="4d856-165">对于 `RemoveListener` 实现，请对当前管理器调用 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 方法并传递相同的两个参数。</span><span class="sxs-lookup"><span data-stu-id="4d856-165">For your `RemoveListener` implementation, call the <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> method on the current manager and pass the same two parameters.</span></span>  
  
 <span data-ttu-id="4d856-166">如果对 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 的调用会删除列表中的最后一个侦听器，<xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 会在内部调用 <xref:System.Windows.WeakEventManager.StopListening%2A> 方法，这将通过多态性调用特定的 <xref:System.Windows.WeakEventManager.StopListening%2A> 重写。</span><span class="sxs-lookup"><span data-stu-id="4d856-166">If a call to <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes the last listener in the list, <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> calls the <xref:System.Windows.WeakEventManager.StopListening%2A> method internally, which will call your specific <xref:System.Windows.WeakEventManager.StopListening%2A> override through polymorphism.</span></span>  
  
 <span data-ttu-id="4d856-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> 从每个 `source`的单个内部 <xref:System.Windows.WeakEventManager.ListenerList> 中删除侦听器。</span><span class="sxs-lookup"><span data-stu-id="4d856-167"><xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A> removes listeners from a single internal <xref:System.Windows.WeakEventManager.ListenerList> per `source`.</span></span> <span data-ttu-id="4d856-168">如果经理实现为每个事件源组合维护多个侦听器列表，请不要使用 <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>。</span><span class="sxs-lookup"><span data-stu-id="4d856-168">If your manager implementation maintains more than one list of listeners for each event-source combination, do not use <xref:System.Windows.WeakEventManager.ProtectedRemoveListener%2A>.</span></span> <span data-ttu-id="4d856-169">相反，您的实现应创建自己的 <xref:System.Windows.WeakEventManager.ListenerList> 实例，`RemoveListener` 应从相应的列表中移除侦听器，并通过调用 <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> 方法（而不是 <xref:System.Windows.WeakEventManager.DeliverEvent%2A> 方法）将事件传递到适当的侦听器列表。</span><span class="sxs-lookup"><span data-stu-id="4d856-169">Instead, your implementation should create its own <xref:System.Windows.WeakEventManager.ListenerList> instances, `RemoveListener` should remove listeners from the appropriate list, and events should be delivered to the appropriate listener list by calling the <xref:System.Windows.WeakEventManager.DeliverEventToList%2A> method instead of the <xref:System.Windows.WeakEventManager.DeliverEvent%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="protected virtual bool Purge (object source, object data, bool purgeAll);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool Purge(object source, object data, bool purgeAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function Purge (source As Object, data As Object, purgeAll As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool Purge(System::Object ^ source, System::Object ^ data, bool purgeAll);" />
      <MemberSignature Language="F#" Value="abstract member Purge : obj * obj * bool -&gt; bool&#xA;override this.Purge : obj * obj * bool -&gt; bool" Usage="weakEventManager.Purge (source, data, purgeAll)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="purgeAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d856-170">要侦听的事件的源。</span><span class="sxs-lookup"><span data-stu-id="4d856-170">The source for events being listened to.</span></span></param>
        <param name="data"><span data-ttu-id="4d856-171">要检查的数据。</span><span class="sxs-lookup"><span data-stu-id="4d856-171">The data to check.</span></span> <span data-ttu-id="4d856-172">此对象应为 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="4d856-172">This object is expected to be a <see cref="T:System.Windows.WeakEventManager.ListenerList" /> implementation.</span></span></param>
        <param name="purgeAll"><span data-ttu-id="4d856-173">设置为 <see langword="true" /> 可停止侦听 <paramref name="source" />，并从 <paramref name="data" /> 中完全移除所有项。</span><span class="sxs-lookup"><span data-stu-id="4d856-173"><see langword="true" /> to stop listening to <paramref name="source" />, and completely remove all entries from <paramref name="data" />.</span></span></param>
        <summary><span data-ttu-id="4d856-174">从所提供源的数据列表中移除不活动的侦听器项。</span><span class="sxs-lookup"><span data-stu-id="4d856-174">Removes inactive listener entries from the data list for the provided source.</span></span> <span data-ttu-id="4d856-175">如果某些项实际上已经从列表中移除，则返回 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="4d856-175">Returns <see langword="true" /> if some entries were actually removed from the list.</span></span></summary>
        <returns><span data-ttu-id="4d856-176">如果某些项实际上已经移除，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="4d856-176"><see langword="true" /> if some entries were actually removed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d856-177"><xref:System.Windows.WeakEventManager.Purge%2A> 方法有一个默认实现，它将在数据为 <xref:System.Windows.WeakEventManager.ListenerList>时删除所有项。</span><span class="sxs-lookup"><span data-stu-id="4d856-177">The <xref:System.Windows.WeakEventManager.Purge%2A> method has a default implementation that will remove all entries when data is a <xref:System.Windows.WeakEventManager.ListenerList>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4d856-178">如果 <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> 的基础类型是除 <see cref="T:System.Windows.WeakEventManager.ListenerList" />以外的其他内容，或包含除 <see cref="T:System.Windows.WeakEventManager.ListenerList" />之外的数据，则必须重写 <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d856-178">If the underlying type for the <see cref="P:System.Windows.WeakEventManager.Item(System.Object)" /> is something other than <see cref="T:System.Windows.WeakEventManager.ListenerList" />, or contains data beyond a <see cref="T:System.Windows.WeakEventManager.ListenerList" />, you must override the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method.</span></span> <span data-ttu-id="4d856-179">重写应为替代类型项列表提供清除行为。</span><span class="sxs-lookup"><span data-stu-id="4d856-179">The override should provide purge behavior for the alternate type items list.</span></span> <span data-ttu-id="4d856-180">通常，重写应提供行为而无需调用基实现。</span><span class="sxs-lookup"><span data-stu-id="4d856-180">Generally, the override should provide behavior without calling the base implementation.</span></span> <span data-ttu-id="4d856-181">如果特定 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 仍需要清除，请调用 <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />。</span><span class="sxs-lookup"><span data-stu-id="4d856-181">If a specific <see cref="T:System.Windows.WeakEventManager.ListenerList" /> still needs clearing, call <see cref="M:System.Windows.WeakEventManager.ListenerList.Purge" />.</span></span></para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
      </Docs>
    </Member>
    <Member MemberName="ReadLock">
      <MemberSignature Language="C#" Value="protected IDisposable ReadLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable ReadLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.ReadLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ReadLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ ReadLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadLock : IDisposable" Usage="System.Windows.WeakEventManager.ReadLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d856-182">在基础数据表上建立读取锁定，并返回 <see cref="T:System.IDisposable" />。</span><span class="sxs-lookup"><span data-stu-id="4d856-182">Establishes a read-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span></span></summary>
        <value><span data-ttu-id="4d856-183">一个对象，可用于在数据表成员上建立锁定，然后通过 <see langword="using" /> 构造被相应释放。</span><span class="sxs-lookup"><span data-stu-id="4d856-183">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d856-184">在派生类中，对 <xref:System.Windows.WeakEventManager.Item%2A> 中包含的表的查询应始终出现在 `using (ReadLock) { ... }` 子句中，但已在写入锁定中的查询除外。</span><span class="sxs-lookup"><span data-stu-id="4d856-184">In derived classes, queries to the table contained in <xref:System.Windows.WeakEventManager.Item%2A> should always occur within a `using (ReadLock) { ... }` clause, except for queries that are already within a write lock.</span></span> <span data-ttu-id="4d856-185">如果你的类支持更复杂的 `AddListener` 实现（需要超出 `source` 和 `listener`的数据），则可能需要执行这些查询，并使用 <xref:System.Windows.WeakEventManager.Item%2A> 集合来存储额外的信息。</span><span class="sxs-lookup"><span data-stu-id="4d856-185">These queries may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.WriteLock" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="protected void Remove (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void Remove(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub Remove (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void Remove(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="member this.Remove : obj -&gt; unit" Usage="weakEventManager.Remove source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d856-186">要移除侦听器信息的源。</span><span class="sxs-lookup"><span data-stu-id="4d856-186">The source to remove listener information for.</span></span></param>
        <summary><span data-ttu-id="4d856-187">移除指定源的所有侦听器。</span><span class="sxs-lookup"><span data-stu-id="4d856-187">Removes all listeners for the specified source.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCleanup">
      <MemberSignature Language="C#" Value="protected void ScheduleCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ScheduleCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.ScheduleCleanup" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ScheduleCleanup ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ScheduleCleanup();" />
      <MemberSignature Language="F#" Value="member this.ScheduleCleanup : unit -&gt; unit" Usage="weakEventManager.ScheduleCleanup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4d856-188">要求在优先级较低的线程上清除基础侦听器列表中未使用的项。</span><span class="sxs-lookup"><span data-stu-id="4d856-188">Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d856-189">调用 <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> 方法类似于在当前管理器的列表中以较低的线程优先级调用 <xref:System.Windows.WeakEventManager.Purge%2A> 方法，并将 `purgeAll` 参数设置为 `false`。</span><span class="sxs-lookup"><span data-stu-id="4d856-189">Calling the <xref:System.Windows.WeakEventManager.ScheduleCleanup%2A> method is similar to calling the <xref:System.Windows.WeakEventManager.Purge%2A> method on the current manager's list, at lower thread priority, with the `purgeAll` parameter set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SetCurrentManager">
      <MemberSignature Language="C#" Value="protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig void SetCurrentManager(class System.Type managerType, class System.Windows.WeakEventManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Sub SetCurrentManager (managerType As Type, manager As WeakEventManager)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static void SetCurrentManager(Type ^ managerType, System::Windows::WeakEventManager ^ manager);" />
      <MemberSignature Language="F#" Value="static member SetCurrentManager : Type * System.Windows.WeakEventManager -&gt; unit" Usage="System.Windows.WeakEventManager.SetCurrentManager (managerType, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="managerType" Type="System.Type" />
        <Parameter Name="manager" Type="System.Windows.WeakEventManager" />
      </Parameters>
      <Docs>
        <param name="managerType"><span data-ttu-id="4d856-190">要为其设置新事件管理器的类型。</span><span class="sxs-lookup"><span data-stu-id="4d856-190">The type to set the new event manager.</span></span></param>
        <param name="manager"><span data-ttu-id="4d856-191">新事件管理器。</span><span class="sxs-lookup"><span data-stu-id="4d856-191">The new event manager.</span></span></param>
        <summary><span data-ttu-id="4d856-192">为指定的管理器类型设置当前管理器。</span><span class="sxs-lookup"><span data-stu-id="4d856-192">Sets the current manager for the specified manager type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d856-193">调用 <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> 方法以初始化管理器（如果在 <xref:System.Windows.WeakEventManager> 实现上调用 `CurrentManager` 属性需要此方法）。</span><span class="sxs-lookup"><span data-stu-id="4d856-193">Call the <xref:System.Windows.WeakEventManager.SetCurrentManager%2A> method to initialize a manager, if that is required by a call to your `CurrentManager` property on a <xref:System.Windows.WeakEventManager> implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="protected abstract void StartListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StartListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StartListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StartListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StartListening : obj -&gt; unit" Usage="weakEventManager.StartListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d856-194">开始侦听的源。</span><span class="sxs-lookup"><span data-stu-id="4d856-194">The source to begin listening on.</span></span></param>
        <summary><span data-ttu-id="4d856-195">在派生类中重写时，开始侦听被托管的事件。</span><span class="sxs-lookup"><span data-stu-id="4d856-195">When overridden in a derived class, starts listening for the event being managed.</span></span> <span data-ttu-id="4d856-196">第一次调用 <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> 方法后，只要处理了所提供源中的相关事件，管理器就应处于调用 <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> 或 <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> 的状态。</span><span class="sxs-lookup"><span data-stu-id="4d856-196">After the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method is first called, the manager should be in the state of calling <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> or <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> whenever the relevant event from the provided source is handled.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4d856-197">
            <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> 重写应将处理程序添加到所提供的 <paramref name="source" />中。</span><span class="sxs-lookup"><span data-stu-id="4d856-197">
            <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> overrides should add a handler to the provided <paramref name="source" />.</span></span> <span data-ttu-id="4d856-198">处理程序由管理器自行声明。</span><span class="sxs-lookup"><span data-stu-id="4d856-198">The handler is declared by the manager itself.</span></span> <span data-ttu-id="4d856-199">类处理程序不应为公共，只应在响应被管理的事件时调用。</span><span class="sxs-lookup"><span data-stu-id="4d856-199">The class handler should not be public, and it should only be called in response to the event being managed.</span></span> <span data-ttu-id="4d856-200">类处理程序应适当地调用 <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> 方法或 <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d856-200">The class handler should call the <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> method or the <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> method appropriately.</span></span></para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="protected abstract void StopListening (object source);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void StopListening(object source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.WeakEventManager.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub StopListening (source As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void StopListening(System::Object ^ source);" />
      <MemberSignature Language="F#" Value="abstract member StopListening : obj -&gt; unit" Usage="weakEventManager.StopListening source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="4d856-201">停止侦听的源。</span><span class="sxs-lookup"><span data-stu-id="4d856-201">The source to stop listening on.</span></span></param>
        <summary><span data-ttu-id="4d856-202">在派生类中重写时，停止为被托管的事件侦听所提供的源。</span><span class="sxs-lookup"><span data-stu-id="4d856-202">When overridden in a derived class, stops listening on the provided source for the event being managed.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="4d856-203">
            <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> 实现应移除 <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> 方法添加的类处理程序。</span><span class="sxs-lookup"><span data-stu-id="4d856-203">
            <see cref="M:System.Windows.WeakEventManager.StopListening(System.Object)" /> implementations should remove the class handler as added by the <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> method.</span></span> <span data-ttu-id="4d856-204">删除侦听器不应清除侦听器列表。</span><span class="sxs-lookup"><span data-stu-id="4d856-204">Removing a listener should not clear the listener list.</span></span> <span data-ttu-id="4d856-205">相反，它只应断开类处理程序的连接（可能暂时会断开）。</span><span class="sxs-lookup"><span data-stu-id="4d856-205">Instead, it should only disconnect the class handler (perhaps temporarily).</span></span> <span data-ttu-id="4d856-206">其他方法可用于清除整个列表，例如将 <paramref name="purgeAll" /> 参数设置为 <see langword="true" />的 <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="4d856-206">Other methods are available for clearing the entire list, such as the <see cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" /> method with the <paramref name="purgeAll" /> parameter set to <see langword="true" />.</span></span></para></block>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" />
        <altmember cref="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLock">
      <MemberSignature Language="C#" Value="protected IDisposable WriteLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IDisposable WriteLock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.WeakEventManager.WriteLock" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property WriteLock As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property IDisposable ^ WriteLock { IDisposable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WriteLock : IDisposable" Usage="System.Windows.WeakEventManager.WriteLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4d856-207">在基础数据表上建立写入锁定，并返回 <see cref="T:System.IDisposable" />。</span><span class="sxs-lookup"><span data-stu-id="4d856-207">Establishes a write-lock on the underlying data table, and returns an <see cref="T:System.IDisposable" />.</span></span></summary>
        <value><span data-ttu-id="4d856-208">一个对象，可用于在数据表成员上建立锁定，然后通过 <see langword="using" /> 构造被相应释放。</span><span class="sxs-lookup"><span data-stu-id="4d856-208">An object that can be used to establish a lock on the data table members and then be appropriately disposed with a <see langword="using" /> construct.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4d856-209">在派生类中，对基础数据表的所有修改都应在 `using (WriteLock) { ... }` 子句中进行。</span><span class="sxs-lookup"><span data-stu-id="4d856-209">In derived classes, all modifications to the underlying data table should occur within a `using (WriteLock) { ... }` clause.</span></span> <span data-ttu-id="4d856-210">如果你的类支持更复杂的 `AddListener` 实现（需要超出 `source` 和 `listener`的数据），则可能需要进行这些修改，并使用 <xref:System.Windows.WeakEventManager.Item%2A> 集合来存储额外的信息。</span><span class="sxs-lookup"><span data-stu-id="4d856-210">These modifications may be necessary if your class supports a more sophisticated `AddListener` implementation that requires more data beyond the `source` and the `listener`, and uses the <xref:System.Windows.WeakEventManager.Item%2A> collection to store the extra information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.IWeakEventListener" />
        <altmember cref="T:System.Windows.WeakEventManager.ListenerList" />
        <altmember cref="P:System.Windows.WeakEventManager.ReadLock" />
      </Docs>
    </Member>
  </Members>
</Type>
