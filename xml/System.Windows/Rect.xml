<Type Name="Rect" FullName="System.Windows.Rect">
  <Metadata><Meta Name="ms.openlocfilehash" Value="38dc15530ea30402a165a5a0aef12d5b92f9a7e8" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="86988074" /></Metadata><TypeSignature Language="C#" Value="public struct Rect : IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Rect extends System.ValueType implements class System.IFormattable" FrameworkAlternate="netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Rect" />
  <TypeSignature Language="VB.NET" Value="Public Structure Rect&#xA;Implements IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Rect : IFormattable" />
  <TypeSignature Language="F#" Value="type Rect = struct&#xA;    interface IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Rect extends System.ValueType implements class System.IFormattable" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Windows.RectConverter))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Windows.RectConverter))&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.RectValueSerializer))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.RectValueSerializer))&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="6b18f-101">描述矩形的宽度、高度和位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-101">Describes the width, height, and location of a rectangle.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlAttributeUsage_Duration"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6b18f-102">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="6b18f-102">XAML Attribute Usage</span></span>  
  
```  
<object property="x,y,width,height"/>  
```  
  
<a name="xamlValues_MinWidth"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6b18f-103">XAML 值</span><span class="sxs-lookup"><span data-stu-id="6b18f-103">XAML Values</span></span>  
 <span data-ttu-id="6b18f-104">*x*</span><span class="sxs-lookup"><span data-stu-id="6b18f-104">*x*</span></span>  
 <xref:System.Double?displayProperty=nameWithType>  
  
 <span data-ttu-id="6b18f-105">矩形左边的 x 坐标位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-105">The x-coordinate location of the left side of the rectangle.</span></span>  
  
 <span data-ttu-id="6b18f-106">*y*</span><span class="sxs-lookup"><span data-stu-id="6b18f-106">*y*</span></span>  
 <xref:System.Double?displayProperty=nameWithType>  
  
 <span data-ttu-id="6b18f-107">矩形上边缘的 y 坐标位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-107">The y-coordinate location of the top side of the rectangle.</span></span>  
  
 <span data-ttu-id="6b18f-108">width </span><span class="sxs-lookup"><span data-stu-id="6b18f-108">*width*</span></span>  
 <xref:System.Double?displayProperty=nameWithType>  
  
 <span data-ttu-id="6b18f-109">表示 <xref:System.Windows.Rect.Width%2A> 矩形的的非负值。</span><span class="sxs-lookup"><span data-stu-id="6b18f-109">A non-negative value that represents the <xref:System.Windows.Rect.Width%2A> of the rectangle.</span></span>  
  
 <span data-ttu-id="6b18f-110">*高*</span><span class="sxs-lookup"><span data-stu-id="6b18f-110">*height*</span></span>  
 <xref:System.Double?displayProperty=nameWithType>  
  
 <span data-ttu-id="6b18f-111">表示 <xref:System.Windows.Rect.Height%2A> 矩形的的非负值。</span><span class="sxs-lookup"><span data-stu-id="6b18f-111">A non-negative value that represents the <xref:System.Windows.Rect.Height%2A> of the rectangle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-112">下面的示例演示如何使用 <xref:System.Windows.Rect> XAML 来指定矩形的尺寸和位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-112">The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.</span></span>  
  
 [!code-csharp[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/CSharp/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/visualbasic/rectexample.vb#rectexamplewholepage)]
 [!code-xaml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/xaml/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/XAML/RectExample.xaml#rectexamplewholepage)]  
  
 <span data-ttu-id="6b18f-113">下面的示例演示如何使用代码创建一个矩形，并将其添加到页面中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-113">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="6b18f-114">该示例还演示了如何查找有关新矩形的大小和坐标信息，并将信息呈现在 <xref:System.Windows.Controls.TextBox> 矩形下面的中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-114">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6b18f-115">初始化 <see cref="T:System.Windows.Rect" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="6b18f-115">Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rect (System.Windows.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Size size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.#ctor(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (size As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rect(System::Windows::Size size);" />
      <MemberSignature Language="F#" Value="new System.Windows.Rect : System.Windows.Size -&gt; System.Windows.Rect" Usage="new System.Windows.Rect size" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="size" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="size"><span data-ttu-id="6b18f-116">一个 <see cref="T:System.Windows.Size" /> 结构，指定矩形的宽度和高度。</span><span class="sxs-lookup"><span data-stu-id="6b18f-116">A <see cref="T:System.Windows.Size" /> structure that specifies the width and height of the rectangle.</span></span></param>
        <summary><span data-ttu-id="6b18f-117">初始化 <see cref="T:System.Windows.Rect" /> 结构的新实例，此结构具有指定大小，位于 (0,0)。</span><span class="sxs-lookup"><span data-stu-id="6b18f-117">Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that is of the specified size and is located at (0,0).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6b18f-118">下面的示例演示如何 <xref:System.Windows.Rect> 使用构造函数创建新的结构 <xref:System.Windows.Rect.%23ctor%28System.Windows.Size%29> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-118">The following example shows how to create a new <xref:System.Windows.Rect> structure by using the <xref:System.Windows.Rect.%23ctor%28System.Windows.Size%29> constructor.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample2_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rect (System.Windows.Point point1, System.Windows.Point point2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Point point1, valuetype System.Windows.Point point2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (point1 As Point, point2 As Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rect(System::Windows::Point point1, System::Windows::Point point2);" />
      <MemberSignature Language="F#" Value="new System.Windows.Rect : System.Windows.Point * System.Windows.Point -&gt; System.Windows.Rect" Usage="new System.Windows.Rect (point1, point2)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="point1" Type="System.Windows.Point" />
        <Parameter Name="point2" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point1"><span data-ttu-id="6b18f-119">新矩形必须包含的第一个点。</span><span class="sxs-lookup"><span data-stu-id="6b18f-119">The first point that the new rectangle must contain.</span></span></param>
        <param name="point2"><span data-ttu-id="6b18f-120">新矩形必须包含的第二个点。</span><span class="sxs-lookup"><span data-stu-id="6b18f-120">The second point that the new rectangle must contain.</span></span></param>
        <summary><span data-ttu-id="6b18f-121">初始化 <see cref="T:System.Windows.Rect" /> 结构的新实例，此结构的大小刚好足以包含两个指定点。</span><span class="sxs-lookup"><span data-stu-id="6b18f-121">Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that is exactly large enough to contain the two specified points.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6b18f-122">下面的示例演示如何 <xref:System.Windows.Rect> 使用构造函数创建新的结构 <xref:System.Windows.Rect.%23ctor%28System.Windows.Point%2CSystem.Windows.Point%29> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-122">The following example shows how to create a new <xref:System.Windows.Rect> structure by using the <xref:System.Windows.Rect.%23ctor%28System.Windows.Point%2CSystem.Windows.Point%29> constructor.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample3_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample3_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rect (System.Windows.Point location, System.Windows.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Point location, valuetype System.Windows.Size size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (location As Point, size As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rect(System::Windows::Point location, System::Windows::Size size);" />
      <MemberSignature Language="F#" Value="new System.Windows.Rect : System.Windows.Point * System.Windows.Size -&gt; System.Windows.Rect" Usage="new System.Windows.Rect (location, size)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="location" Type="System.Windows.Point" />
        <Parameter Name="size" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="location"><span data-ttu-id="6b18f-123">一个点，指定矩形的左上角位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-123">A point that specifies the location of the top-left corner of the rectangle.</span></span></param>
        <param name="size"><span data-ttu-id="6b18f-124">一个 <see cref="T:System.Windows.Size" /> 结构，指定矩形的宽度和高度。</span><span class="sxs-lookup"><span data-stu-id="6b18f-124">A <see cref="T:System.Windows.Size" /> structure that specifies the width and height of the rectangle.</span></span></param>
        <summary><span data-ttu-id="6b18f-125">初始化 <see cref="T:System.Windows.Rect" /> 结构的新实例，此结构具有指定的左上角位置和指定的宽度及高度。</span><span class="sxs-lookup"><span data-stu-id="6b18f-125">Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that has the specified top-left corner location and the specified width and height.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6b18f-126">下面的示例演示如何 <xref:System.Windows.Rect> 使用构造函数创建新的结构 <xref:System.Windows.Rect.%23ctor%28System.Windows.Point%2CSystem.Windows.Size%29> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-126">The following example shows how to create a new <xref:System.Windows.Rect> structure by using the <xref:System.Windows.Rect.%23ctor%28System.Windows.Point%2CSystem.Windows.Size%29> constructor.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample4_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample4_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rect (System.Windows.Point point, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Point point, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (point As Point, vector As Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rect(System::Windows::Point point, System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="new System.Windows.Rect : System.Windows.Point * System.Windows.Vector -&gt; System.Windows.Rect" Usage="new System.Windows.Rect (point, vector)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="point"><span data-ttu-id="6b18f-127">矩形必须包含的第一个点。</span><span class="sxs-lookup"><span data-stu-id="6b18f-127">The first point the rectangle must contain.</span></span></param>
        <param name="vector"><span data-ttu-id="6b18f-128">指定点的偏移量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-128">The amount to offset the specified point.</span></span> <span data-ttu-id="6b18f-129">所得矩形的大小将刚好足以包含这两个点。</span><span class="sxs-lookup"><span data-stu-id="6b18f-129">The resulting rectangle will be exactly large enough to contain both points.</span></span></param>
        <summary><span data-ttu-id="6b18f-130">初始化 <see cref="T:System.Windows.Rect" /> 结构的新实例，此结构的大小刚好足以包含指定点及指定点和指定向量之和。</span><span class="sxs-lookup"><span data-stu-id="6b18f-130">Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that is exactly large enough to contain the specified point and the sum of the specified point and the specified vector.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6b18f-131">下面的示例演示如何 <xref:System.Windows.Rect> 使用构造函数创建新的结构 <xref:System.Windows.Rect.%23ctor%28System.Windows.Point%2CSystem.Windows.Vector%29> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-131">The following example shows how to create a new <xref:System.Windows.Rect> structure by using the <xref:System.Windows.Rect.%23ctor%28System.Windows.Point%2CSystem.Windows.Vector%29> constructor.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample5_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample5_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Rect (double x, double y, double width, double height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 x, float64 y, float64 width, float64 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (x As Double, y As Double, width As Double, height As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Rect(double x, double y, double width, double height);" />
      <MemberSignature Language="F#" Value="new System.Windows.Rect : double * double * double * double -&gt; System.Windows.Rect" Usage="new System.Windows.Rect (x, y, width, height)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
        <Parameter Name="width" Type="System.Double" />
        <Parameter Name="height" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="6b18f-132">矩形左上角的 x 坐标。</span><span class="sxs-lookup"><span data-stu-id="6b18f-132">The x-coordinate of the top-left corner of the rectangle.</span></span></param>
        <param name="y"><span data-ttu-id="6b18f-133">矩形左上角的 y 坐标。</span><span class="sxs-lookup"><span data-stu-id="6b18f-133">The y-coordinate of the top-left corner of the rectangle.</span></span></param>
        <param name="width"><span data-ttu-id="6b18f-134">矩形的宽度。</span><span class="sxs-lookup"><span data-stu-id="6b18f-134">The width of the rectangle.</span></span></param>
        <param name="height"><span data-ttu-id="6b18f-135">矩形的高度。</span><span class="sxs-lookup"><span data-stu-id="6b18f-135">The height of the rectangle.</span></span></param>
        <summary><span data-ttu-id="6b18f-136">初始化 <see cref="T:System.Windows.Rect" /> 结构的新实例，此结构具有指定的 x 坐标、y 坐标、宽度和高度。</span><span class="sxs-lookup"><span data-stu-id="6b18f-136">Initializes a new instance of the <see cref="T:System.Windows.Rect" /> structure that has the specified x-coordinate, y-coordinate, width, and height.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-137">下面的示例演示如何 <xref:System.Windows.Rect> 使用构造函数创建新的结构 <xref:System.Windows.Rect.%23ctor%28System.Double%2CSystem.Double%2CSystem.Double%2CSystem.Double%29> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-137">The following example shows how to create a new <xref:System.Windows.Rect> structure by using the <xref:System.Windows.Rect.%23ctor%28System.Double%2CSystem.Double%2CSystem.Double%2CSystem.Double%29> constructor.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample6_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample6_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6b18f-138"><paramref name="width" /> 是负值。</span><span class="sxs-lookup"><span data-stu-id="6b18f-138"><paramref name="width" /> is a negative value.</span></span>  
  
<span data-ttu-id="6b18f-139">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6b18f-139">-or-</span></span> 
 <span data-ttu-id="6b18f-140"><paramref name="height" /> 是负值。</span><span class="sxs-lookup"><span data-stu-id="6b18f-140"><paramref name="height" /> is a negative value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Bottom">
      <MemberSignature Language="C#" Value="public double Bottom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Bottom" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.Bottom" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Bottom As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Bottom { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Bottom : double" Usage="System.Windows.Rect.Bottom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6b18f-141">获取矩形底边的 y 轴值。</span><span class="sxs-lookup"><span data-stu-id="6b18f-141">Gets the y-axis value of the bottom of the rectangle.</span></span></summary>
        <value><span data-ttu-id="6b18f-142">矩形底边的 y 轴值。</span><span class="sxs-lookup"><span data-stu-id="6b18f-142">The y-axis value of the bottom of the rectangle.</span></span> <span data-ttu-id="6b18f-143">如果矩形为空，则该值为 <see cref="F:System.Double.NegativeInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-143">If the rectangle is empty, the value is <see cref="F:System.Double.NegativeInfinity" /> .</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-144">矩形底边的 y 轴值与和属性的和相等 <xref:System.Windows.Rect.Y%2A> <xref:System.Windows.Rect.Height%2A> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-144">The y-axis value of the bottom of the rectangle is equal to the sum of the <xref:System.Windows.Rect.Y%2A> and <xref:System.Windows.Rect.Height%2A> properties.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-145">下面的示例演示如何使用代码创建一个矩形，并将其添加到页面中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-145">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="6b18f-146">该示例还演示了如何查找有关新矩形的大小和坐标信息，并将信息呈现在 <xref:System.Windows.Controls.TextBox> 矩形下面的中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-146">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BottomLeft">
      <MemberSignature Language="C#" Value="public System.Windows.Point BottomLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point BottomLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.BottomLeft" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BottomLeft As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point BottomLeft { System::Windows::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.BottomLeft : System.Windows.Point" Usage="System.Windows.Rect.BottomLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6b18f-147">获取矩形的左下角位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-147">Gets the position of the bottom-left corner of the rectangle.</span></span></summary>
        <value><span data-ttu-id="6b18f-148">矩形的左下角位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-148">The position of the bottom-left corner of the rectangle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-149">矩形的左下角位置等于 (<xref:System.Windows.Rect.X%2A> ， <xref:System.Windows.Rect.Y%2A>  +  <xref:System.Windows.Rect.Height%2A>) 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-149">The position of the bottom-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A> + <xref:System.Windows.Rect.Height%2A>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-150">下面的示例演示如何使用代码创建一个矩形，并将其添加到页面中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-150">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="6b18f-151">该示例还演示了如何查找有关新矩形的大小和坐标信息，并将信息呈现在 <xref:System.Windows.Controls.TextBox> 矩形下面的中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-151">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BottomRight">
      <MemberSignature Language="C#" Value="public System.Windows.Point BottomRight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point BottomRight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.BottomRight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BottomRight As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point BottomRight { System::Windows::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.BottomRight : System.Windows.Point" Usage="System.Windows.Rect.BottomRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6b18f-152">获取矩形的右下角位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-152">Gets the position of the bottom-right corner of the rectangle.</span></span></summary>
        <value><span data-ttu-id="6b18f-153">矩形的左下角位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-153">The position of the bottom-right corner of the rectangle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-154">矩形的右下角位置等于 (<xref:System.Windows.Rect.X%2A>  +  <xref:System.Windows.Rect.Width%2A> ， <xref:System.Windows.Rect.Y%2A>  +  <xref:System.Windows.Rect.Height%2A>) 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-154">The position of the bottom-right corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A> + <xref:System.Windows.Rect.Width%2A>, <xref:System.Windows.Rect.Y%2A> + <xref:System.Windows.Rect.Height%2A>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-155">下面的示例演示如何使用代码创建一个矩形，并将其添加到页面中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-155">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="6b18f-156">该示例还演示了如何查找有关新矩形的大小和坐标信息，并将信息呈现在 <xref:System.Windows.Controls.TextBox> 矩形下面的中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-156">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6b18f-157">指示矩形中是否包含指定的点或矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-157">Indicates whether the rectangle contains the specified point or rectangle.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Contains(System.Windows.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (point As Point) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Point -&gt; bool" Usage="rect.Contains point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point"><span data-ttu-id="6b18f-158">要检查的点。</span><span class="sxs-lookup"><span data-stu-id="6b18f-158">The point to check.</span></span></param>
        <summary><span data-ttu-id="6b18f-159">指示矩形中是否包含指定点。</span><span class="sxs-lookup"><span data-stu-id="6b18f-159">Indicates whether the rectangle contains the specified point.</span></span></summary>
        <returns><span data-ttu-id="6b18f-160">如果矩形中包含指定点，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-160"><see langword="true" /> if the rectangle contains the specified point; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6b18f-161">下面的示例演示如何使用 <xref:System.Windows.Rect.Contains%28System.Windows.Point%29> 方法来确定矩形是否包含指定的 <xref:System.Windows.Point> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-161">The following example shows how to use the <xref:System.Windows.Rect.Contains%28System.Windows.Point%29> method to determine if the rectangle contains the specified <xref:System.Windows.Point>.</span></span>  
  
 [!code-csharp[RectExamples_snip#ContainsExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#containsexample1_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Rect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(valuetype System.Windows.Rect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Contains(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (rect As Rect) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Rect rect);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Rect -&gt; bool" Usage="rect.Contains rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect"><span data-ttu-id="6b18f-162">要检查的矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-162">The rectangle to check.</span></span></param>
        <summary><span data-ttu-id="6b18f-163">指示矩形中是否包含指定矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-163">Indicates whether the rectangle contains the specified rectangle.</span></span></summary>
        <returns><span data-ttu-id="6b18f-164">如果 <paramref name="rect" /> 完全包含在矩形中，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-164"><see langword="true" /> if <paramref name="rect" /> is entirely contained by the rectangle; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6b18f-165">下面的示例演示如何使用 <xref:System.Windows.Rect.Contains%28System.Windows.Rect%29> 方法来确定一个矩形是否包含在另一个矩形中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-165">The following example shows how to use the <xref:System.Windows.Rect.Contains%28System.Windows.Rect%29> method to determine if one rectangle is contained by another rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#ContainsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#containsexample2_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Contains(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (x As Double, y As Double) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(double x, double y);" />
      <MemberSignature Language="F#" Value="member this.Contains : double * double -&gt; bool" Usage="rect.Contains (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="6b18f-166">要检查的点的 x 坐标。</span><span class="sxs-lookup"><span data-stu-id="6b18f-166">The x-coordinate of the point to check.</span></span></param>
        <param name="y"><span data-ttu-id="6b18f-167">要检查的点的 y 坐标。</span><span class="sxs-lookup"><span data-stu-id="6b18f-167">The y-coordinate of the point to check.</span></span></param>
        <summary><span data-ttu-id="6b18f-168">指示矩形中是否包含指定的 x 坐标和 y 坐标。</span><span class="sxs-lookup"><span data-stu-id="6b18f-168">Indicates whether the rectangle contains the specified x-coordinate and y-coordinate.</span></span></summary>
        <returns><span data-ttu-id="6b18f-169">如果（<paramref name="x" />、<paramref name="y" />）包含在矩形中，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-169"><see langword="true" /> if (<paramref name="x" />, <paramref name="y" />) is contained by the rectangle; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6b18f-170">下面的示例演示如何使用 <xref:System.Windows.Rect.Contains%28System.Double%2CSystem.Double%29> 方法来确定矩形是否包含由给定的 x 坐标和 y 坐标指定的点。</span><span class="sxs-lookup"><span data-stu-id="6b18f-170">The following example shows how to use the <xref:System.Windows.Rect.Contains%28System.Double%2CSystem.Double%29> method to determine if the rectangle contains the point specified by the given x-coordinate and y-coordinate.</span></span>  
  
 [!code-csharp[RectExamples_snip#ContainsExample3_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#containsexample3_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Rect Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Rect Empty { System::Windows::Rect get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Windows.Rect" Usage="System.Windows.Rect.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6b18f-171">获取一个特殊值，该值表示没有位置或区域的矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-171">Gets a special value that represents a rectangle with no position or area.</span></span></summary>
        <value><span data-ttu-id="6b18f-172">空矩形，其 <see cref="P:System.Windows.Rect.X" /> 和 <see cref="P:System.Windows.Rect.Y" /> 属性值为 <see cref="F:System.Double.PositiveInfinity" />，<see cref="P:System.Windows.Rect.Width" /> 和 <see cref="P:System.Windows.Rect.Height" /> 属性值为 <see cref="F:System.Double.NegativeInfinity" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-172">The empty rectangle, which has <see cref="P:System.Windows.Rect.X" /> and <see cref="P:System.Windows.Rect.Y" /> property values of <see cref="F:System.Double.PositiveInfinity" />, and has <see cref="P:System.Windows.Rect.Width" /> and <see cref="P:System.Windows.Rect.Height" /> property values of <see cref="F:System.Double.NegativeInfinity" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-173">避免数学计算涉及空矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-173">Avoid mathematical computations involving empty rectangles.</span></span> <span data-ttu-id="6b18f-174">由于 <xref:System.Windows.Rect.X%2A> 和 <xref:System.Windows.Rect.Y%2A> 都是无限值，因此这些操作严重影响处理器操作。</span><span class="sxs-lookup"><span data-stu-id="6b18f-174">Because both <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> are infinite values, processor operations are severely impaired by these operations.</span></span> <span data-ttu-id="6b18f-175">涉及这些值的比较不会影响应用程序性能。</span><span class="sxs-lookup"><span data-stu-id="6b18f-175">Comparisons involving these values will not affect application performance.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Rect.IsEmpty" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6b18f-176">指示两个矩形是否相等。</span><span class="sxs-lookup"><span data-stu-id="6b18f-176">Indicates whether two rectangles are equal.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="rect.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="6b18f-177">要与当前矩形进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="6b18f-177">The object to compare to the current rectangle.</span></span></param>
        <summary><span data-ttu-id="6b18f-178">指示指定对象是否等于当前矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-178">Indicates whether the specified object is equal to the current rectangle.</span></span></summary>
        <returns><span data-ttu-id="6b18f-179">如果 <paramref name="o" /> 为 <see cref="T:System.Windows.Rect" />，并且具有与当前矩形相同的 <see cref="P:System.Windows.Rect.Location" /> 和 <see cref="P:System.Windows.Rect.Size" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-179"><see langword="true" /> if <paramref name="o" /> is a <see cref="T:System.Windows.Rect" /> and has the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values as the current rectangle; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-180">此操作测试对象是否相等。</span><span class="sxs-lookup"><span data-stu-id="6b18f-180">This operation tests for object equality.</span></span>  
  
 <span data-ttu-id="6b18f-181">在这种比较中，的两个实例被 <xref:System.Double.NaN?displayProperty=nameWithType> 视为相等。</span><span class="sxs-lookup"><span data-stu-id="6b18f-181">In this comparison, two instances of <xref:System.Double.NaN?displayProperty=nameWithType> are considered equal.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6b18f-182">矩形的位置和尺寸按值进行描述 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-182">A rectangle's position and dimensions are described by <xref:System.Double> values.</span></span> <span data-ttu-id="6b18f-183">由于 <xref:System.Double> 值在操作时可能会丢失精度，因此，逻辑上相等的两个值之间的比较可能会失败。</span><span class="sxs-lookup"><span data-stu-id="6b18f-183">Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-184">下面的示例演示如何使用 <xref:System.Windows.Rect.Equals%28System.Object%29> 方法来确定某个矩形是否与指定的对象相等。</span><span class="sxs-lookup"><span data-stu-id="6b18f-184">The following example shows how to use the <xref:System.Windows.Rect.Equals%28System.Object%29> method to determine if a rectangle is equal to a specified object.</span></span>  
  
 [!code-csharp[RectExamples_snip#EqualsExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#equalsexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)" />
        <altmember cref="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.Rect value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.Rect value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Equals(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As Rect) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Windows::Rect value);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Windows.Rect -&gt; bool" Usage="rect.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6b18f-185">要与当前矩形进行比较的矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-185">The rectangle to compare to the current rectangle.</span></span></param>
        <summary><span data-ttu-id="6b18f-186">指示指定矩形是否等于当前矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-186">Indicates whether the specified rectangle is equal to the current rectangle.</span></span></summary>
        <returns><span data-ttu-id="6b18f-187">如果指定矩形具有与当前矩形相同的 <see cref="P:System.Windows.Rect.Location" /> 和 <see cref="P:System.Windows.Rect.Size" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-187"><see langword="true" /> if the specified rectangle has the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values as the current rectangle; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-188">此操作测试对象是否相等。</span><span class="sxs-lookup"><span data-stu-id="6b18f-188">This operation tests for object equality.</span></span>  
  
 <span data-ttu-id="6b18f-189">在这种比较中，的两个实例被 <xref:System.Double.NaN?displayProperty=nameWithType> 视为相等。</span><span class="sxs-lookup"><span data-stu-id="6b18f-189">In this comparison, two instances of <xref:System.Double.NaN?displayProperty=nameWithType> are considered equal.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6b18f-190">矩形的位置和尺寸按值进行描述 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-190">A rectangle's position and dimensions are described by <xref:System.Double> values.</span></span> <span data-ttu-id="6b18f-191">由于 <xref:System.Double> 值在操作时可能会丢失精度，因此，逻辑上相等的两个值之间的比较可能会失败。</span><span class="sxs-lookup"><span data-stu-id="6b18f-191">Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-192">下面的示例演示如何使用 <xref:System.Windows.Rect.Equals%28System.Windows.Rect%29> 方法来确定矩形是否与指定的矩形相等。</span><span class="sxs-lookup"><span data-stu-id="6b18f-192">The following example shows how to use the <xref:System.Windows.Rect.Equals%28System.Windows.Rect%29> method to determine if a rectangle is equal to a specified rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#EqualsExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#equalsexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)" />
        <altmember cref="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (System.Windows.Rect rect1, System.Windows.Rect rect2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.Windows.Rect rect1, valuetype System.Windows.Rect rect2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (rect1 As Rect, rect2 As Rect) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::Windows::Rect rect1, System::Windows::Rect rect2);" />
      <MemberSignature Language="F#" Value="static member Equals : System.Windows.Rect * System.Windows.Rect -&gt; bool" Usage="System.Windows.Rect.Equals (rect1, rect2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect1" Type="System.Windows.Rect" />
        <Parameter Name="rect2" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect1"><span data-ttu-id="6b18f-193">要比较的第一个矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-193">The first rectangle to compare.</span></span></param>
        <param name="rect2"><span data-ttu-id="6b18f-194">要比较的第二个矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-194">The second rectangle to compare.</span></span></param>
        <summary><span data-ttu-id="6b18f-195">指示指定的矩形是否相等。</span><span class="sxs-lookup"><span data-stu-id="6b18f-195">Indicates whether the specified rectangles are equal.</span></span></summary>
        <returns><span data-ttu-id="6b18f-196">如果这些矩形具有相同的 <see cref="P:System.Windows.Rect.Location" /> 和 <see cref="P:System.Windows.Rect.Size" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-196"><see langword="true" /> if the rectangles have the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-197">此操作测试对象是否相等。</span><span class="sxs-lookup"><span data-stu-id="6b18f-197">This operation tests for object equality.</span></span>  
  
 <span data-ttu-id="6b18f-198">在这种比较中，的两个实例被 <xref:System.Double.NaN?displayProperty=nameWithType> 视为相等。</span><span class="sxs-lookup"><span data-stu-id="6b18f-198">In this comparison, two instances of <xref:System.Double.NaN?displayProperty=nameWithType> are considered equal.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6b18f-199">矩形的位置和尺寸按值进行描述 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-199">A rectangle's position and dimensions are described by <xref:System.Double> values.</span></span> <span data-ttu-id="6b18f-200">由于 <xref:System.Double> 值在操作时可能会丢失精度，因此，逻辑上相等的两个值之间的比较可能会失败。</span><span class="sxs-lookup"><span data-stu-id="6b18f-200">Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-201">下面的示例演示如何使用 <xref:System.Windows.Rect.Equals%28System.Windows.Rect%2CSystem.Windows.Rect%29> 方法来确定一个矩形是否等于另一个矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-201">The following example shows how to use the <xref:System.Windows.Rect.Equals%28System.Windows.Rect%2CSystem.Windows.Rect%29> method to determine if one rectangle is equal to another.</span></span>  
  
 [!code-csharp[RectExamples_snip#EqualsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#equalsexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)" />
        <altmember cref="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="rect.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6b18f-202">创建矩形的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="6b18f-202">Creates a hash code for the rectangle.</span></span></summary>
        <returns><span data-ttu-id="6b18f-203">当前 <see cref="T:System.Windows.Rect" /> 结构的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="6b18f-203">A hash code for the current <see cref="T:System.Windows.Rect" /> structure.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-204">此方法通过使用 <xref:System.Windows.Rect.X%2A> 、 <xref:System.Windows.Rect.Y%2A> 、 <xref:System.Windows.Rect.Width%2A> 和 <xref:System.Windows.Rect.Height%2A> 属性值创建哈希代码。</span><span class="sxs-lookup"><span data-stu-id="6b18f-204">This method creates a hash code by using the <xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>, <xref:System.Windows.Rect.Width%2A>, and <xref:System.Windows.Rect.Height%2A> property values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-205">下面的示例演示如何使用 <xref:System.Windows.Rect.GetHashCode%2A> 方法获取的哈希代码 <xref:System.Windows.Rect> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-205">The following example shows how to use the <xref:System.Windows.Rect.GetHashCode%2A> method to get the hash code of a <xref:System.Windows.Rect>.</span></span>  
  
 [!code-csharp[RectExamples_snip#GetHashCodeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#gethashcodeexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public double Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Height { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Height : double with get, set" Usage="System.Windows.Rect.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6b18f-206">获取或设置矩形的高度。</span><span class="sxs-lookup"><span data-stu-id="6b18f-206">Gets or sets the height of the rectangle.</span></span></summary>
        <value><span data-ttu-id="6b18f-207">一个正数，表示矩形的高度。</span><span class="sxs-lookup"><span data-stu-id="6b18f-207">A positive number that represents the height of the rectangle.</span></span> <span data-ttu-id="6b18f-208">默认值为 0。</span><span class="sxs-lookup"><span data-stu-id="6b18f-208">The default is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-209"><xref:System.Windows.Rect.Empty%2A>矩形的为 <xref:System.Windows.Rect.Height%2A> <xref:System.Double.NegativeInfinity> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-209">The <xref:System.Windows.Rect.Empty%2A> rectangle has a <xref:System.Windows.Rect.Height%2A> of <xref:System.Double.NegativeInfinity>.</span></span> <span data-ttu-id="6b18f-210">该 <xref:System.Windows.Rect.Empty%2A> 矩形是只读的; <xref:System.Windows.Rect.Height%2A> 无法更改。</span><span class="sxs-lookup"><span data-stu-id="6b18f-210">The <xref:System.Windows.Rect.Empty%2A> rectangle is read-only; its <xref:System.Windows.Rect.Height%2A> cannot not be changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-211">下面的示例演示如何使用 <xref:System.Windows.Rect> XAML 来指定矩形的尺寸和位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-211">The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.</span></span>  
  
 [!code-csharp[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/CSharp/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/visualbasic/rectexample.vb#rectexamplewholepage)]
 [!code-xaml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/xaml/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/XAML/RectExample.xaml#rectexamplewholepage)]  
  
 <span data-ttu-id="6b18f-212">下面的示例演示如何使用代码创建一个矩形，并将其添加到页面中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-212">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="6b18f-213">该示例还演示了如何查找有关新矩形的大小和坐标信息，并将信息呈现在 <xref:System.Windows.Controls.TextBox> 矩形下面的中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-213">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6b18f-214"><see cref="P:System.Windows.Rect.Height" /> 设置为一个负值。</span><span class="sxs-lookup"><span data-stu-id="6b18f-214"><see cref="P:System.Windows.Rect.Height" /> is set to a negative value.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6b18f-215">在 <see cref="P:System.Windows.Rect.Height" /> 矩形上设置 <see cref="P:System.Windows.Rect.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-215"><see cref="P:System.Windows.Rect.Height" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
        <altmember cref="P:System.Windows.Rect.Width" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Inflate">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6b18f-216">创建一个矩形，该矩形是通过将一个矩形放大或缩小指定量而得到的。</span><span class="sxs-lookup"><span data-stu-id="6b18f-216">Creates a rectangle that results from expanding or shrinking a rectangle by the specified amount.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Inflate">
      <MemberSignature Language="C#" Value="public void Inflate (System.Windows.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Inflate(valuetype System.Windows.Size size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Inflate(System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Inflate (size As Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Inflate(System::Windows::Size size);" />
      <MemberSignature Language="F#" Value="member this.Inflate : System.Windows.Size -&gt; unit" Usage="rect.Inflate size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="size"><span data-ttu-id="6b18f-217">指定矩形的放大量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-217">Specifies the amount to expand the rectangle.</span></span> <span data-ttu-id="6b18f-218"><see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Width" /> 属性指定矩形的 <see cref="P:System.Windows.Rect.Left" /> 和 <see cref="P:System.Windows.Rect.Right" /> 属性的增量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-218">The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Width" /> property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Left" /> and <see cref="P:System.Windows.Rect.Right" /> properties.</span></span> <span data-ttu-id="6b18f-219"><see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Height" /> 属性指定矩形的 <see cref="P:System.Windows.Rect.Top" /> 和 <see cref="P:System.Windows.Rect.Bottom" /> 属性的增量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-219">The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Height" /> property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Top" /> and <see cref="P:System.Windows.Rect.Bottom" /> properties.</span></span></param>
        <summary><span data-ttu-id="6b18f-220">使用指定的 <see cref="T:System.Windows.Size" /> 向所有方向放大矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-220">Expands the rectangle by using the specified <see cref="T:System.Windows.Size" />, in all directions.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-221">所 <xref:System.Windows.Rect.Width%2A> 生成矩形的将增加指定的结构的两倍 <xref:System.Windows.Size.Width%2A> <xref:System.Windows.Size> ，因为矩形的左右两边都进行了放大。</span><span class="sxs-lookup"><span data-stu-id="6b18f-221">The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Width%2A> of the specified <xref:System.Windows.Size> structure, because both the left and right sides of the rectangle are inflated.</span></span> <span data-ttu-id="6b18f-222">同样，生成的矩形的将 <xref:System.Windows.Rect.Height%2A> 增加指定的结构的两倍 <xref:System.Windows.Size.Height%2A> <xref:System.Windows.Size> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-222">Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Height%2A> of the specified <xref:System.Windows.Size> structure.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-223">下面的示例演示如何使用 <xref:System.Windows.Rect.Inflate%28System.Windows.Size%29> 方法来增加矩形的大小。</span><span class="sxs-lookup"><span data-stu-id="6b18f-223">The following example shows how to use the <xref:System.Windows.Rect.Inflate%28System.Windows.Size%29> method to increase the size of a rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#InflateExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#inflateexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6b18f-224">对 <see cref="P:System.Windows.Rect.Empty" /> 矩形调用此方法。</span><span class="sxs-lookup"><span data-stu-id="6b18f-224">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
        <altmember cref="M:System.Windows.Rect.Scale(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Inflate">
      <MemberSignature Language="C#" Value="public void Inflate (double width, double height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Inflate(float64 width, float64 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Inflate(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Inflate (width As Double, height As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Inflate(double width, double height);" />
      <MemberSignature Language="F#" Value="member this.Inflate : double * double -&gt; unit" Usage="rect.Inflate (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Double" />
        <Parameter Name="height" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="width"><span data-ttu-id="6b18f-225">矩形左边和右边的放大或缩小量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-225">The amount by which to expand or shrink the left and right sides of the rectangle.</span></span></param>
        <param name="height"><span data-ttu-id="6b18f-226">矩形上边和下边的放大或缩小量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-226">The amount by which to expand or shrink the top and bottom sides of the rectangle.</span></span></param>
        <summary><span data-ttu-id="6b18f-227">使用指定的宽度和高度量向所有方向放大或缩小矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-227">Expands or shrinks the rectangle by using the specified width and height amounts, in all directions.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-228">所 <xref:System.Windows.Rect.Width%2A> 生成矩形的将按指定的宽度偏移量增加或减少两倍，因为它同时应用于矩形的左侧和右侧。</span><span class="sxs-lookup"><span data-stu-id="6b18f-228">The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle.</span></span> <span data-ttu-id="6b18f-229">同样，生成的矩形的将 <xref:System.Windows.Rect.Height%2A> 按指定的高度增加或减少两倍。</span><span class="sxs-lookup"><span data-stu-id="6b18f-229">Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased or decreased by twice the specified height.</span></span>  
  
 <span data-ttu-id="6b18f-230">如果指定的宽度或高度将矩形缩小到了其当前的或高度，则 <xref:System.Windows.Rect.Width%2A> <xref:System.Windows.Rect.Height%2A> 为矩形指定了负值，矩形将成为 <xref:System.Windows.Rect.Empty%2A> 矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-230">If the specified width or height shrink the rectangle by more than its current <xref:System.Windows.Rect.Width%2A> or <xref:System.Windows.Rect.Height%2A> - giving the rectangle a negative area - the rectangle becomes the <xref:System.Windows.Rect.Empty%2A> rectangle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-231">下面的示例演示如何使用 <xref:System.Windows.Rect.Inflate%28System.Double%2CSystem.Double%29> 方法更改矩形的大小。</span><span class="sxs-lookup"><span data-stu-id="6b18f-231">The following example shows how to use the <xref:System.Windows.Rect.Inflate%28System.Double%2CSystem.Double%29> method to change the size of a rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#InflateExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#inflateexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6b18f-232">对 <see cref="P:System.Windows.Rect.Empty" /> 矩形调用此方法。</span><span class="sxs-lookup"><span data-stu-id="6b18f-232">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
        <altmember cref="M:System.Windows.Rect.Scale(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Inflate">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Inflate (System.Windows.Rect rect, System.Windows.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Inflate(valuetype System.Windows.Rect rect, valuetype System.Windows.Size size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Inflate (rect As Rect, size As Size) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Rect Inflate(System::Windows::Rect rect, System::Windows::Size size);" />
      <MemberSignature Language="F#" Value="static member Inflate : System.Windows.Rect * System.Windows.Size -&gt; System.Windows.Rect" Usage="System.Windows.Rect.Inflate (rect, size)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
        <Parameter Name="size" Type="System.Windows.Size" />
      </Parameters>
      <Docs>
        <param name="rect"><span data-ttu-id="6b18f-233">要修改的 <see cref="T:System.Windows.Rect" /> 结构。</span><span class="sxs-lookup"><span data-stu-id="6b18f-233">The <see cref="T:System.Windows.Rect" /> structure to modify.</span></span></param>
        <param name="size"><span data-ttu-id="6b18f-234">指定矩形的放大量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-234">Specifies the amount to expand the rectangle.</span></span> <span data-ttu-id="6b18f-235"><see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Width" /> 属性指定矩形的 <see cref="P:System.Windows.Rect.Left" /> 和 <see cref="P:System.Windows.Rect.Right" /> 属性的增量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-235">The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Width" /> property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Left" /> and <see cref="P:System.Windows.Rect.Right" /> properties.</span></span> <span data-ttu-id="6b18f-236"><see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Height" /> 属性指定矩形的 <see cref="P:System.Windows.Rect.Top" /> 和 <see cref="P:System.Windows.Rect.Bottom" /> 属性的增量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-236">The <see cref="T:System.Windows.Size" /> structure's <see cref="P:System.Windows.Size.Height" /> property specifies the amount to increase the rectangle's <see cref="P:System.Windows.Rect.Top" /> and <see cref="P:System.Windows.Rect.Bottom" /> properties.</span></span></param>
        <summary><span data-ttu-id="6b18f-237">返回矩形，该矩形是通过将指定矩形向所有方向放大指定 <see cref="T:System.Windows.Size" /> 而得到的。</span><span class="sxs-lookup"><span data-stu-id="6b18f-237">Returns the rectangle that results from expanding the specified rectangle by the specified <see cref="T:System.Windows.Size" />, in all directions.</span></span></summary>
        <returns><span data-ttu-id="6b18f-238">所得矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-238">The resulting rectangle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-239">所 <xref:System.Windows.Rect.Width%2A> 生成矩形的将增加指定的结构的两倍 <xref:System.Windows.Size.Width%2A> <xref:System.Windows.Size> ，因为矩形的左右两边都进行了放大。</span><span class="sxs-lookup"><span data-stu-id="6b18f-239">The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Width%2A> of the specified <xref:System.Windows.Size> structure, because both the left and right sides of the rectangle are inflated.</span></span> <span data-ttu-id="6b18f-240">同样，生成的矩形的将 <xref:System.Windows.Rect.Height%2A> 增加指定的结构的两倍 <xref:System.Windows.Size.Height%2A> <xref:System.Windows.Size> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-240">Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased by twice the <xref:System.Windows.Size.Height%2A> of the specified <xref:System.Windows.Size> structure.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-241">下面的示例演示如何使用 <xref:System.Windows.Rect.Inflate%28System.Windows.Rect%2CSystem.Windows.Size%29> 方法更改矩形的大小。</span><span class="sxs-lookup"><span data-stu-id="6b18f-241">The following example shows how to use the <xref:System.Windows.Rect.Inflate%28System.Windows.Rect%2CSystem.Windows.Size%29> method to change the size of a rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#InflateExample3_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#inflateexample3_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6b18f-242"><paramref name="rect" /> 是 <see cref="P:System.Windows.Rect.Empty" /> 矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-242"><paramref name="rect" /> is an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
        <altmember cref="M:System.Windows.Rect.Scale(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Inflate">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Inflate (System.Windows.Rect rect, double width, double height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Inflate(valuetype System.Windows.Rect rect, float64 width, float64 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Inflate (rect As Rect, width As Double, height As Double) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Rect Inflate(System::Windows::Rect rect, double width, double height);" />
      <MemberSignature Language="F#" Value="static member Inflate : System.Windows.Rect * double * double -&gt; System.Windows.Rect" Usage="System.Windows.Rect.Inflate (rect, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
        <Parameter Name="width" Type="System.Double" />
        <Parameter Name="height" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="rect"><span data-ttu-id="6b18f-243">要修改的 <see cref="T:System.Windows.Rect" /> 结构。</span><span class="sxs-lookup"><span data-stu-id="6b18f-243">The <see cref="T:System.Windows.Rect" /> structure to modify.</span></span></param>
        <param name="width"><span data-ttu-id="6b18f-244">矩形左边和右边的放大或缩小量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-244">The amount by which to expand or shrink the left and right sides of the rectangle.</span></span></param>
        <param name="height"><span data-ttu-id="6b18f-245">矩形上边和下边的放大或缩小量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-245">The amount by which to expand or shrink the top and bottom sides of the rectangle.</span></span></param>
        <summary><span data-ttu-id="6b18f-246">创建一个矩形，该矩形是通过将指定矩形向所有方向放大或缩小指定宽度和高度而得到的。</span><span class="sxs-lookup"><span data-stu-id="6b18f-246">Creates a rectangle that results from expanding or shrinking the specified rectangle by the specified width and height amounts, in all directions.</span></span></summary>
        <returns><span data-ttu-id="6b18f-247">所得矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-247">The resulting rectangle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-248">所 <xref:System.Windows.Rect.Width%2A> 生成矩形的将按指定的宽度偏移量增加或减少两倍，因为它同时应用于矩形的左侧和右侧。</span><span class="sxs-lookup"><span data-stu-id="6b18f-248">The <xref:System.Windows.Rect.Width%2A> of the resulting rectangle is increased or decreased by twice the specified width offset, because it is applied to both the left and right sides of the rectangle.</span></span> <span data-ttu-id="6b18f-249">同样，生成的矩形的将 <xref:System.Windows.Rect.Height%2A> 按指定的高度增加或减少两倍。</span><span class="sxs-lookup"><span data-stu-id="6b18f-249">Likewise, the <xref:System.Windows.Rect.Height%2A> of the resulting rectangle is increased or decreased by twice the specified height.</span></span>  
  
 <span data-ttu-id="6b18f-250">如果指定的宽度或高度修饰符将矩形缩小到最新的，或者将矩形指定 <xref:System.Windows.Rect.Width%2A> <xref:System.Windows.Rect.Height%2A> 为负值，则此方法返回 <xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-250">If the specified width or height modifiers shrink the rectangle by more than its current <xref:System.Windows.Rect.Width%2A> or <xref:System.Windows.Rect.Height%2A> - giving the rectangle a negative area - this method returns <xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-251">下面的示例演示如何使用 <xref:System.Windows.Rect.Inflate%28System.Windows.Rect%2CSystem.Double%2CSystem.Double%29> 方法更改矩形的大小。</span><span class="sxs-lookup"><span data-stu-id="6b18f-251">The following example shows how to use the <xref:System.Windows.Rect.Inflate%28System.Windows.Rect%2CSystem.Double%2CSystem.Double%29> method to change the size of a rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#InflateExample4_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#inflateexample4_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6b18f-252"><paramref name="rect" /> 是 <see cref="P:System.Windows.Rect.Empty" /> 矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-252"><paramref name="rect" /> is an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
        <altmember cref="M:System.Windows.Rect.Scale(System.Double,System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Intersect">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6b18f-253">查找两个矩形的交集。</span><span class="sxs-lookup"><span data-stu-id="6b18f-253">Finds the intersection of two rectangles.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public void Intersect (System.Windows.Rect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Intersect(valuetype System.Windows.Rect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Intersect(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Intersect (rect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Intersect(System::Windows::Rect rect);" />
      <MemberSignature Language="F#" Value="member this.Intersect : System.Windows.Rect -&gt; unit" Usage="rect.Intersect rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect"><span data-ttu-id="6b18f-254">要与当前矩形相交的矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-254">The rectangle to intersect with the current rectangle.</span></span></param>
        <summary><span data-ttu-id="6b18f-255">查找当前矩形和指定矩形的交集，并将结果存储为当前矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-255">Finds the intersection of the current rectangle and the specified rectangle, and stores the result as the current rectangle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-256">如果不存在交集，则当前矩形变为 <xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-256">If no intersection exists, the current rectangle becomes <xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-257">下面的示例演示如何使用 <xref:System.Windows.Rect.Intersect%28System.Windows.Rect%29> 方法来查找两个矩形的交集，并将结果存储为一个矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-257">The following example shows how to use the <xref:System.Windows.Rect.Intersect%28System.Windows.Rect%29> method to find the intersection of two rectangles and store the result as a rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#IntersectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#intersectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Rect.IntersectsWith(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Intersect (System.Windows.Rect rect1, System.Windows.Rect rect2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Intersect(valuetype System.Windows.Rect rect1, valuetype System.Windows.Rect rect2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Intersect (rect1 As Rect, rect2 As Rect) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Rect Intersect(System::Windows::Rect rect1, System::Windows::Rect rect2);" />
      <MemberSignature Language="F#" Value="static member Intersect : System.Windows.Rect * System.Windows.Rect -&gt; System.Windows.Rect" Usage="System.Windows.Rect.Intersect (rect1, rect2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect1" Type="System.Windows.Rect" />
        <Parameter Name="rect2" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect1"><span data-ttu-id="6b18f-258">要比较的第一个矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-258">The first rectangle to compare.</span></span></param>
        <param name="rect2"><span data-ttu-id="6b18f-259">要比较的第二个矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-259">The second rectangle to compare.</span></span></param>
        <summary><span data-ttu-id="6b18f-260">返回指定矩形的交集。</span><span class="sxs-lookup"><span data-stu-id="6b18f-260">Returns the intersection of the specified rectangles.</span></span></summary>
        <returns><span data-ttu-id="6b18f-261">两个矩形的交集；如果不存在任何交集，则为 <see cref="P:System.Windows.Rect.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-261">The intersection of the two rectangles, or <see cref="P:System.Windows.Rect.Empty" /> if no intersection exists.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-262">下面的示例演示如何使用 <xref:System.Windows.Rect.Intersect%28System.Windows.Rect%2CSystem.Windows.Rect%29> 方法来查找两个矩形的交集。</span><span class="sxs-lookup"><span data-stu-id="6b18f-262">The following example shows how to use the <xref:System.Windows.Rect.Intersect%28System.Windows.Rect%2CSystem.Windows.Rect%29> method to find the intersection of two rectangles.</span></span>  
  
 [!code-csharp[RectExamples_snip#IntersectExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#intersectexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Rect.IntersectsWith(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="IntersectsWith">
      <MemberSignature Language="C#" Value="public bool IntersectsWith (System.Windows.Rect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IntersectsWith(valuetype System.Windows.Rect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.IntersectsWith(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Function IntersectsWith (rect As Rect) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IntersectsWith(System::Windows::Rect rect);" />
      <MemberSignature Language="F#" Value="member this.IntersectsWith : System.Windows.Rect -&gt; bool" Usage="rect.IntersectsWith rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect"><span data-ttu-id="6b18f-263">要检查的矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-263">The rectangle to check.</span></span></param>
        <summary><span data-ttu-id="6b18f-264">指示指定矩形是否与当前矩形相交。</span><span class="sxs-lookup"><span data-stu-id="6b18f-264">Indicates whether the specified rectangle intersects with the current rectangle.</span></span></summary>
        <returns><span data-ttu-id="6b18f-265">如果指定矩形与当前矩形相交，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-265"><see langword="true" /> if the specified rectangle intersects with the current rectangle; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6b18f-266">下面的示例演示如何使用 <xref:System.Windows.Rect.IntersectsWith%2A> 方法来确定两个矩形是否相交。</span><span class="sxs-lookup"><span data-stu-id="6b18f-266">The following example shows how to use the <xref:System.Windows.Rect.IntersectsWith%2A> method to determine if two rectangles intersect.</span></span>  
  
 [!code-csharp[RectExamples_snip#IntersectsWithExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#intersectswithexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.IsEmpty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEmpty { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmpty : bool" Usage="System.Windows.Rect.IsEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6b18f-267">获取一个值，该值指示矩形是否为 <see cref="P:System.Windows.Rect.Empty" /> 矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-267">Gets a value that indicates whether the rectangle is the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></summary>
        <value><span data-ttu-id="6b18f-268">如果矩形为 <see cref="P:System.Windows.Rect.Empty" /> 矩形，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-268"><see langword="true" /> if the rectangle is the <see cref="P:System.Windows.Rect.Empty" /> rectangle; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-269">不要使用此属性来测试零区域;具有零区域的矩形不一定是 <xref:System.Windows.Rect.Empty%2A> 矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-269">Do not use this property to test for zero area; a rectangle with zero area is not necessarily the <xref:System.Windows.Rect.Empty%2A> rectangle.</span></span> <span data-ttu-id="6b18f-270">有关更多信息，请参见 <xref:System.Windows.Rect.Empty%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="6b18f-270">For more information, see the <xref:System.Windows.Rect.Empty%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Rect.Empty" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public double Left { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Left" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.Left" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Left As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Left { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Left : double" Usage="System.Windows.Rect.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6b18f-271">获取矩形左边的 x 轴值。</span><span class="sxs-lookup"><span data-stu-id="6b18f-271">Gets the x-axis value of the left side of the rectangle.</span></span></summary>
        <value><span data-ttu-id="6b18f-272">矩形左边的 x 轴值。</span><span class="sxs-lookup"><span data-stu-id="6b18f-272">The x-axis value of the left side of the rectangle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-273">获取此属性等效于获取 <xref:System.Windows.Rect.X%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="6b18f-273">Getting this property is equivalent to getting the <xref:System.Windows.Rect.X%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-274">下面的示例演示如何使用代码创建一个矩形，并将其添加到页面中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-274">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="6b18f-275">该示例还演示了如何查找有关新矩形的大小和坐标信息，并将信息呈现在 <xref:System.Windows.Controls.TextBox> 矩形下面的中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-275">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Rect.X" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public System.Windows.Point Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point Location" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.Location" />
      <MemberSignature Language="VB.NET" Value="Public Property Location As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point Location { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberSignature Language="F#" Value="member this.Location : System.Windows.Point with get, set" Usage="System.Windows.Rect.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6b18f-276">获取或设置矩形的左上角位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-276">Gets or sets the position of the top-left corner of the rectangle.</span></span></summary>
        <value><span data-ttu-id="6b18f-277">矩形的左上角位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-277">The position of the top-left corner of the rectangle.</span></span> <span data-ttu-id="6b18f-278">默认值为 (0, 0)。</span><span class="sxs-lookup"><span data-stu-id="6b18f-278">The default is (0, 0).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-279">矩形的左上角位置等于 (<xref:System.Windows.Rect.X%2A> ， <xref:System.Windows.Rect.Y%2A>) 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-279">The position of the top-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-280">下面的示例演示如何使用 <xref:System.Windows.Rect> XAML 来指定矩形的尺寸和位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-280">The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.</span></span>  
  
 [!code-csharp[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/CSharp/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/visualbasic/rectexample.vb#rectexamplewholepage)]
 [!code-xaml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/xaml/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/XAML/RectExample.xaml#rectexamplewholepage)]  
  
 <span data-ttu-id="6b18f-281">下面的示例演示如何使用代码创建一个矩形，并将其添加到页面中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-281">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="6b18f-282">该示例还演示了如何查找有关新矩形的大小和坐标信息，并将信息呈现在 <xref:System.Windows.Controls.TextBox> 矩形下面的中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-282">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6b18f-283">在 <see cref="P:System.Windows.Rect.Location" /> 矩形上设置 <see cref="P:System.Windows.Rect.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-283"><see cref="P:System.Windows.Rect.Location" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Offset">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6b18f-284">将矩形移动指定的量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-284">Moves a rectangle by the specified amount.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public void Offset (System.Windows.Vector offsetVector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Offset(valuetype System.Windows.Vector offsetVector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Offset(System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Offset (offsetVector As Vector)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Offset(System::Windows::Vector offsetVector);" />
      <MemberSignature Language="F#" Value="member this.Offset : System.Windows.Vector -&gt; unit" Usage="rect.Offset offsetVector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offsetVector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="offsetVector"><span data-ttu-id="6b18f-285">一个向量，指定矩形沿水平和垂直方向移动的量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-285">A vector that specifies the horizontal and vertical amounts to move the rectangle.</span></span></param>
        <summary><span data-ttu-id="6b18f-286">将矩形移动指定向量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-286">Moves the rectangle by the specified vector.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-287">不允许)  (在空矩形上调用此方法 <xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-287">Calling this method on an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType>) is not allowed.</span></span>  
  
 <span data-ttu-id="6b18f-288">请注意， <xref:System.Windows.Rect.Offset%2A> 仅当可以直接更改和属性时，调用方法才会起作用 <xref:System.Windows.Rect.X%2A> <xref:System.Windows.Rect.Y%2A> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-288">Note that calling the <xref:System.Windows.Rect.Offset%2A> method will only have an effect if you can change the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> properties directly.</span></span> <span data-ttu-id="6b18f-289">由于 <xref:System.Windows.Rect> 是一个值类型，因此，如果 <xref:System.Windows.Rect> 使用属性或索引器引用对象，则会获得对象的副本，而不是对对象的引用。</span><span class="sxs-lookup"><span data-stu-id="6b18f-289">Because <xref:System.Windows.Rect> is a value type, if you reference a <xref:System.Windows.Rect> object by using a property or indexer, you get a copy of the object, not a reference to the object.</span></span> <span data-ttu-id="6b18f-290">如果尝试对 <xref:System.Windows.Rect.X%2A> <xref:System.Windows.Rect.Y%2A> 属性或索引器引用进行更改，则会出现编译器错误。</span><span class="sxs-lookup"><span data-stu-id="6b18f-290">If you attempt to change <xref:System.Windows.Rect.X%2A> or <xref:System.Windows.Rect.Y%2A> on a property or indexer reference, a compiler error occurs.</span></span> <span data-ttu-id="6b18f-291">同样， <xref:System.Windows.Rect.Offset%2A> 对属性或索引器调用将不会更改基础对象。</span><span class="sxs-lookup"><span data-stu-id="6b18f-291">Similarly, calling <xref:System.Windows.Rect.Offset%2A> on the property or indexer will not change the underlying object.</span></span>  <span data-ttu-id="6b18f-292">如果要更改被 <xref:System.Windows.Rect> 引用为属性或索引器的的值，请创建新的 <xref:System.Windows.Rect> ，修改其字段，然后将 <xref:System.Windows.Rect> 返回回属性或索引器。</span><span class="sxs-lookup"><span data-stu-id="6b18f-292">If you want to change the value of a <xref:System.Windows.Rect> that is referenced as a property or indexer, create a new <xref:System.Windows.Rect>, modify its fields, and then assign the <xref:System.Windows.Rect> back to the property or indexer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-293">下面的示例演示如何使用 <xref:System.Windows.Rect.Offset%28System.Windows.Vector%29> 方法更改矩形的位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-293">The following example shows how to use the <xref:System.Windows.Rect.Offset%28System.Windows.Vector%29> method to change the position of a rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#OffsetExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#offsetexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6b18f-294">对 <see cref="P:System.Windows.Rect.Empty" /> 矩形调用此方法。</span><span class="sxs-lookup"><span data-stu-id="6b18f-294">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public void Offset (double offsetX, double offsetY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Offset(float64 offsetX, float64 offsetY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Offset(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Offset (offsetX As Double, offsetY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Offset(double offsetX, double offsetY);" />
      <MemberSignature Language="F#" Value="member this.Offset : double * double -&gt; unit" Usage="rect.Offset (offsetX, offsetY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offsetX" Type="System.Double" />
        <Parameter Name="offsetY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="offsetX"><span data-ttu-id="6b18f-295">水平移动矩形的量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-295">The amount to move the rectangle horizontally.</span></span></param>
        <param name="offsetY"><span data-ttu-id="6b18f-296">垂直移动矩形的量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-296">The amount to move the rectangle vertically.</span></span></param>
        <summary><span data-ttu-id="6b18f-297">将矩形沿水平和垂直方向移动指定的量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-297">Moves the rectangle by the specified horizontal and vertical amounts.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-298">不允许)  (在空矩形上调用此方法 <xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-298">Calling this method on an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType>) is not allowed.</span></span>  
  
 <span data-ttu-id="6b18f-299">请注意， <xref:System.Windows.Rect.Offset%2A> 仅当可以直接更改和属性时，调用方法才会起作用 <xref:System.Windows.Rect.X%2A> <xref:System.Windows.Rect.Y%2A> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-299">Note that calling the <xref:System.Windows.Rect.Offset%2A> method will only have an effect if you can change the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Y%2A> properties directly.</span></span> <span data-ttu-id="6b18f-300">由于 <xref:System.Windows.Rect> 是一个值类型，因此，如果 <xref:System.Windows.Rect> 使用属性或索引器引用对象，则会获得对象的副本，而不是对对象的引用。</span><span class="sxs-lookup"><span data-stu-id="6b18f-300">Because <xref:System.Windows.Rect> is a value type, if you reference a <xref:System.Windows.Rect> object by using a property or indexer, you get a copy of the object, not a reference to the object.</span></span> <span data-ttu-id="6b18f-301">如果尝试对 <xref:System.Windows.Rect.X%2A> <xref:System.Windows.Rect.Y%2A> 属性或索引器引用进行更改，则会出现编译器错误。</span><span class="sxs-lookup"><span data-stu-id="6b18f-301">If you attempt to change <xref:System.Windows.Rect.X%2A> or <xref:System.Windows.Rect.Y%2A> on a property or indexer reference, a compiler error occurs.</span></span> <span data-ttu-id="6b18f-302">同样， <xref:System.Windows.Rect.Offset%2A> 对属性或索引器调用将不会更改基础对象。</span><span class="sxs-lookup"><span data-stu-id="6b18f-302">Similarly, calling <xref:System.Windows.Rect.Offset%2A> on the property or indexer will not change the underlying object.</span></span>  <span data-ttu-id="6b18f-303">如果要更改被 <xref:System.Windows.Rect> 引用为属性或索引器的的值，请创建新的 <xref:System.Windows.Rect> ，修改其字段，然后将 <xref:System.Windows.Rect> 返回回属性或索引器。</span><span class="sxs-lookup"><span data-stu-id="6b18f-303">If you want to change the value of a <xref:System.Windows.Rect> that is referenced as a property or indexer, create a new <xref:System.Windows.Rect>, modify its fields, and then assign the <xref:System.Windows.Rect> back to the property or indexer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-304">下面的示例演示如何使用 <xref:System.Windows.Rect.Offset%28System.Double%2CSystem.Double%29> 方法更改矩形的位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-304">The following example shows how to use the <xref:System.Windows.Rect.Offset%28System.Double%2CSystem.Double%29> method to change the position of a rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#OffsetExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#offsetexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6b18f-305">对 <see cref="P:System.Windows.Rect.Empty" /> 矩形调用此方法。</span><span class="sxs-lookup"><span data-stu-id="6b18f-305">This method is called on the <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Offset (System.Windows.Rect rect, System.Windows.Vector offsetVector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Offset(valuetype System.Windows.Rect rect, valuetype System.Windows.Vector offsetVector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Offset (rect As Rect, offsetVector As Vector) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Rect Offset(System::Windows::Rect rect, System::Windows::Vector offsetVector);" />
      <MemberSignature Language="F#" Value="static member Offset : System.Windows.Rect * System.Windows.Vector -&gt; System.Windows.Rect" Usage="System.Windows.Rect.Offset (rect, offsetVector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
        <Parameter Name="offsetVector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="rect"><span data-ttu-id="6b18f-306">原始矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-306">The original rectangle.</span></span></param>
        <param name="offsetVector"><span data-ttu-id="6b18f-307">一个向量，指定新矩形的水平和垂直偏移量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-307">A vector that specifies the horizontal and vertical offsets for the new rectangle.</span></span></param>
        <summary><span data-ttu-id="6b18f-308">返回一个矩形，该矩形是通过将指定矩形偏移指定向量而得到的。</span><span class="sxs-lookup"><span data-stu-id="6b18f-308">Returns a rectangle that is offset from the specified rectangle by using the specified vector.</span></span></summary>
        <returns><span data-ttu-id="6b18f-309">所得矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-309">The resulting rectangle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-310">不允许)  (为空矩形调用此方法 <xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-310">Calling this method with an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType>) is not allowed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-311">下面的示例演示如何使用 <xref:System.Windows.Rect.Offset%28System.Windows.Rect%2CSystem.Windows.Vector%29> 方法更改矩形的位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-311">The following example shows how to use the <xref:System.Windows.Rect.Offset%28System.Windows.Rect%2CSystem.Windows.Vector%29> method to change the position of a rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#OffsetExample3_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#offsetexample3_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6b18f-312"><paramref name="rect" /> 为 <see cref="P:System.Windows.Rect.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-312"><paramref name="rect" /> is <see cref="P:System.Windows.Rect.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Offset (System.Windows.Rect rect, double offsetX, double offsetY);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Offset(valuetype System.Windows.Rect rect, float64 offsetX, float64 offsetY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Offset (rect As Rect, offsetX As Double, offsetY As Double) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Rect Offset(System::Windows::Rect rect, double offsetX, double offsetY);" />
      <MemberSignature Language="F#" Value="static member Offset : System.Windows.Rect * double * double -&gt; System.Windows.Rect" Usage="System.Windows.Rect.Offset (rect, offsetX, offsetY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
        <Parameter Name="offsetX" Type="System.Double" />
        <Parameter Name="offsetY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="rect"><span data-ttu-id="6b18f-313">要移动的矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-313">The rectangle to move.</span></span></param>
        <param name="offsetX"><span data-ttu-id="6b18f-314">新矩形的水平偏移量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-314">The horizontal offset for the new rectangle.</span></span></param>
        <param name="offsetY"><span data-ttu-id="6b18f-315">新矩形的垂直偏移量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-315">The vertical offset for the new rectangle.</span></span></param>
        <summary><span data-ttu-id="6b18f-316">返回一个矩形，该矩形是通过将指定矩形偏移指定的水平和垂直量而得到的。</span><span class="sxs-lookup"><span data-stu-id="6b18f-316">Returns a rectangle that is offset from the specified rectangle by using the specified horizontal and vertical amounts.</span></span></summary>
        <returns><span data-ttu-id="6b18f-317">所得矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-317">The resulting rectangle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-318">不允许)  (为空矩形调用此方法 <xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-318">Calling this method with an empty rectangle (<xref:System.Windows.Rect.Empty%2A?displayProperty=nameWithType>) is not allowed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-319">下面的示例演示如何使用 <xref:System.Windows.Rect.Offset%28System.Windows.Rect%2CSystem.Double%2CSystem.Double%29> 方法更改矩形的位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-319">The following example shows how to use the <xref:System.Windows.Rect.Offset%28System.Windows.Rect%2CSystem.Double%2CSystem.Double%29> method to change the position of a rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#OffsetExample4_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#offsetexample4_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6b18f-320"><paramref name="rect" /> 为 <see cref="P:System.Windows.Rect.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-320"><paramref name="rect" /> is <see cref="P:System.Windows.Rect.Empty" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Rect rect1, System.Windows.Rect rect2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.Rect rect1, valuetype System.Windows.Rect rect2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (rect1 As Rect, rect2 As Rect) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Rect rect1, System::Windows::Rect rect2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Rect * System.Windows.Rect -&gt; bool" Usage="rect1 = rect2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect1" Type="System.Windows.Rect" />
        <Parameter Name="rect2" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect1"><span data-ttu-id="6b18f-321">要比较的第一个矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-321">The first rectangle to compare.</span></span></param>
        <param name="rect2"><span data-ttu-id="6b18f-322">要比较的第二个矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-322">The second rectangle to compare.</span></span></param>
        <summary><span data-ttu-id="6b18f-323">比较两个矩形是否完全相等。</span><span class="sxs-lookup"><span data-stu-id="6b18f-323">Compares two rectangles for exact equality.</span></span></summary>
        <returns><span data-ttu-id="6b18f-324">如果这些矩形具有相同的 <see cref="P:System.Windows.Rect.Location" /> 和 <see cref="P:System.Windows.Rect.Size" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-324"><see langword="true" /> if the rectangles have the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-325">此操作测试对象是否相等。</span><span class="sxs-lookup"><span data-stu-id="6b18f-325">This operation tests for object equality.</span></span>  
  
 <span data-ttu-id="6b18f-326">在这种比较中，的两个实例被 <xref:System.Double.NaN?displayProperty=nameWithType> 视为相等。</span><span class="sxs-lookup"><span data-stu-id="6b18f-326">In this comparison, two instances of <xref:System.Double.NaN?displayProperty=nameWithType> are considered equal.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6b18f-327">矩形的位置和尺寸按值进行描述 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-327">A rectangle's position and dimensions are described by <xref:System.Double> values.</span></span> <span data-ttu-id="6b18f-328">由于 <xref:System.Double> 值在操作时可能会丢失精度，因此，逻辑上相等的两个值之间的比较可能会失败。</span><span class="sxs-lookup"><span data-stu-id="6b18f-328">Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.</span></span>  
  
 <span data-ttu-id="6b18f-329">此运算符的等效方法是 <xref:System.Windows.Rect.Equals%28System.Windows.Rect%2CSystem.Windows.Rect%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="6b18f-329">The equivalent method for this operator is <xref:System.Windows.Rect.Equals%28System.Windows.Rect%2CSystem.Windows.Rect%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="6b18f-330">下面的示例演示如何使用 <xref:System.Windows.Rect.op_Equality%2A> 运算符确定两个矩形是否完全相等。</span><span class="sxs-lookup"><span data-stu-id="6b18f-330">The following example shows how to use the <xref:System.Windows.Rect.op_Equality%2A> operator to determine if two rectangles are exactly equal.</span></span>  
  
 [!code-csharp[RectExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#overloadedequalityoperatorexample)]
 [!code-vb[RectExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RectExamples_snip/visualbasic/rectexample.vb#overloadedequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Rect rect1, System.Windows.Rect rect2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.Rect rect1, valuetype System.Windows.Rect rect2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (rect1 As Rect, rect2 As Rect) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Rect rect1, System::Windows::Rect rect2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Rect * System.Windows.Rect -&gt; bool" Usage="System.Windows.Rect.op_Inequality (rect1, rect2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect1" Type="System.Windows.Rect" />
        <Parameter Name="rect2" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect1"><span data-ttu-id="6b18f-331">要比较的第一个矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-331">The first rectangle to compare.</span></span></param>
        <param name="rect2"><span data-ttu-id="6b18f-332">要比较的第二个矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-332">The second rectangle to compare.</span></span></param>
        <summary><span data-ttu-id="6b18f-333">比较两个矩形是否不相等。</span><span class="sxs-lookup"><span data-stu-id="6b18f-333">Compares two rectangles for inequality.</span></span></summary>
        <returns><span data-ttu-id="6b18f-334">如果这些矩形具有不相同的 <see cref="P:System.Windows.Rect.Location" /> 和 <see cref="P:System.Windows.Rect.Size" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-334"><see langword="true" /> if the rectangles do not have the same <see cref="P:System.Windows.Rect.Location" /> and <see cref="P:System.Windows.Rect.Size" /> values; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-335">此操作测试对象是否不相等。</span><span class="sxs-lookup"><span data-stu-id="6b18f-335">This operation tests for object inequality.</span></span>  
  
 <span data-ttu-id="6b18f-336">在这种比较中，的两个实例被 <xref:System.Double.NaN?displayProperty=nameWithType> 视为相等。</span><span class="sxs-lookup"><span data-stu-id="6b18f-336">In this comparison, two instances of <xref:System.Double.NaN?displayProperty=nameWithType> are considered equal.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="6b18f-337">矩形的位置和尺寸按值进行描述 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-337">A rectangle's position and dimensions are described by <xref:System.Double> values.</span></span> <span data-ttu-id="6b18f-338">由于 <xref:System.Double> 值在操作时可能会丢失精度，因此，逻辑上相等的两个值之间的比较可能会失败。</span><span class="sxs-lookup"><span data-stu-id="6b18f-338">Because <xref:System.Double> values can lose precision when operated upon, a comparison between two values that are logically equal might fail.</span></span>  
  
 <span data-ttu-id="6b18f-339">此运算符的等效方法是 <xref:System.Windows.Rect.Equals%28System.Windows.Rect%2CSystem.Windows.Rect%29?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="6b18f-339">The equivalent method for this operator is <xref:System.Windows.Rect.Equals%28System.Windows.Rect%2CSystem.Windows.Rect%29?displayProperty=nameWithType></span></span>  
  
## Examples  
 <span data-ttu-id="6b18f-340">下面的示例演示如何使用 <xref:System.Windows.Rect.op_Inequality%2A> 运算符确定两个矩形是否不完全相等。</span><span class="sxs-lookup"><span data-stu-id="6b18f-340">The following example shows how to use the <xref:System.Windows.Rect.op_Inequality%2A> operator to determine if two rectangles are not exactly equal.</span></span>  
  
 [!code-csharp[RectExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#overloadedinequalityoperatorexample)]
 [!code-vb[RectExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RectExamples_snip/visualbasic/rectexample.vb#overloadedinequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Parse (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Parse(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (source As String) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Rect Parse(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Windows.Rect" Usage="System.Windows.Rect.Parse source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6b18f-341">矩形的字符串表示形式，格式为“x, y, width, height”。</span><span class="sxs-lookup"><span data-stu-id="6b18f-341">The string representation of the rectangle, in the form "x, y, width, height".</span></span></param>
        <summary><span data-ttu-id="6b18f-342">根据指定的字符串表示形式创建新的矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-342">Creates a new rectangle from the specified string representation.</span></span></summary>
        <returns><span data-ttu-id="6b18f-343">所得矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-343">The resulting rectangle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6b18f-344">下面的示例演示如何使用 <xref:System.Windows.Rect.Parse%2A> 方法将矩形的字符串表示形式转换为 <xref:System.Windows.Rect> 结构。</span><span class="sxs-lookup"><span data-stu-id="6b18f-344">The following example shows how to use the <xref:System.Windows.Rect.Parse%2A> method to convert a string representation of a rectangle into a <xref:System.Windows.Rect> structure.</span></span>  
  
 [!code-csharp[RectExamples_snip#ParseExample](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#parseexample)]
 [!code-vb[RectExamples_snip#ParseExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RectExamples_snip/visualbasic/rectexample.vb#parseexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public double Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Right" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.Right" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Right As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Right { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Right : double" Usage="System.Windows.Rect.Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6b18f-345">获取矩形右边的 x 轴值。</span><span class="sxs-lookup"><span data-stu-id="6b18f-345">Gets the x-axis value of the right side of the rectangle.</span></span></summary>
        <value><span data-ttu-id="6b18f-346">矩形右边的 x 轴值。</span><span class="sxs-lookup"><span data-stu-id="6b18f-346">The x-axis value of the right side of the rectangle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-347">该矩形右边的 x 轴值等于 <xref:System.Windows.Rect.X%2A> 和属性的和 <xref:System.Windows.Rect.Width%2A> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-347">The x-axis value of the right side of the rectangle is equal to the sum of the <xref:System.Windows.Rect.X%2A> and <xref:System.Windows.Rect.Width%2A> properties.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-348">下面的示例演示如何使用代码创建一个矩形，并将其添加到页面中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-348">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="6b18f-349">该示例还演示了如何查找有关新矩形的大小和坐标信息，并将信息呈现在 <xref:System.Windows.Controls.TextBox> 矩形下面的中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-349">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (double scaleX, double scaleY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float64 scaleX, float64 scaleY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Scale(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Scale (scaleX As Double, scaleY As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Scale(double scaleX, double scaleY);" />
      <MemberSignature Language="F#" Value="member this.Scale : double * double -&gt; unit" Usage="rect.Scale (scaleX, scaleY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scaleX" Type="System.Double" />
        <Parameter Name="scaleY" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="scaleX"><span data-ttu-id="6b18f-350">x 方向的比例因子。</span><span class="sxs-lookup"><span data-stu-id="6b18f-350">The scale factor in the x-direction.</span></span></param>
        <param name="scaleY"><span data-ttu-id="6b18f-351">y 方向的比例因子。</span><span class="sxs-lookup"><span data-stu-id="6b18f-351">The scale factor in the y-direction.</span></span></param>
        <summary><span data-ttu-id="6b18f-352">将当前矩形的大小与指定的 x 和 y 值相乘。</span><span class="sxs-lookup"><span data-stu-id="6b18f-352">Multiplies the size of the current rectangle by the specified x and y values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6b18f-353">下面的示例演示如何使用方法将 <xref:System.Windows.Rect.Scale%2A> 矩形的宽度和高度乘以指定的量。</span><span class="sxs-lookup"><span data-stu-id="6b18f-353">The following example shows how to use the <xref:System.Windows.Rect.Scale%2A> method to multiply the width and height of a rectangle by the specified amount.</span></span>  
  
 [!code-csharp[RectExamples_snip#ScaleExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#scaleexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Rect.Inflate(System.Double,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Windows.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size Size { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberSignature Language="F#" Value="member this.Size : System.Windows.Size with get, set" Usage="System.Windows.Rect.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6b18f-354">获取或设置矩形的宽度和高度。</span><span class="sxs-lookup"><span data-stu-id="6b18f-354">Gets or sets the width and height of the rectangle.</span></span></summary>
        <value><span data-ttu-id="6b18f-355">一个 <see cref="T:System.Windows.Size" /> 结构，指定矩形的宽度和高度。</span><span class="sxs-lookup"><span data-stu-id="6b18f-355">A <see cref="T:System.Windows.Size" /> structure that specifies the width and height of the rectangle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6b18f-356">下面的示例演示如何使用 <xref:System.Windows.Rect> XAML 来指定矩形的尺寸和位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-356">The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.</span></span>  
  
 [!code-csharp[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/CSharp/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/visualbasic/rectexample.vb#rectexamplewholepage)]
 [!code-xaml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/xaml/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/XAML/RectExample.xaml#rectexamplewholepage)]  
  
 <span data-ttu-id="6b18f-357">下面的示例演示如何使用代码创建一个矩形，并将其添加到页面中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-357">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="6b18f-358">该示例还演示了如何查找有关新矩形的大小和坐标信息，并将信息呈现在 <xref:System.Windows.Controls.TextBox> 矩形下面的中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-358">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6b18f-359">在 <see cref="P:System.Windows.Rect.Size" /> 矩形上设置 <see cref="P:System.Windows.Rect.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-359"><see cref="P:System.Windows.Rect.Size" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberSignature Language="F#" Value="abstract member System.IFormattable.ToString : string * IFormatProvider -&gt; string&#xA;override this.System.IFormattable.ToString : string * IFormatProvider -&gt; string" Usage="rect.System.IFormattable.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="6b18f-360">要使用的格式。</span><span class="sxs-lookup"><span data-stu-id="6b18f-360">The format to use.</span></span>  
  
<span data-ttu-id="6b18f-361">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6b18f-361">-or-</span></span> 
<span data-ttu-id="6b18f-362">null 引用（在 Visual Basic 中为 <see langword="Nothing" />），用于使用为 <see cref="T:System.IFormattable" /> 实现的类型定义的默认格式。</span><span class="sxs-lookup"><span data-stu-id="6b18f-362">A null reference (<see langword="Nothing" /> in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</span></span></param>
        <param name="provider"><span data-ttu-id="6b18f-363">要用于格式化值的提供程序。</span><span class="sxs-lookup"><span data-stu-id="6b18f-363">The provider to use to format the value.</span></span>  
  
<span data-ttu-id="6b18f-364">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6b18f-364">-or-</span></span> 
<span data-ttu-id="6b18f-365">null 引用（在 Visual Basic 中为 <see langword="Nothing" />），用于从操作系统的当前区域设置获取数字格式信息。</span><span class="sxs-lookup"><span data-stu-id="6b18f-365">A null reference (<see langword="Nothing" /> in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</span></span></param>
        <summary><span data-ttu-id="6b18f-366">使用指定格式对当前实例的值设置格式。</span><span class="sxs-lookup"><span data-stu-id="6b18f-366">Formats the value of the current instance using the specified format.</span></span></summary>
        <returns><span data-ttu-id="6b18f-367">矩形的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="6b18f-367">A string representation of the rectangle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-368">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="6b18f-368">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="6b18f-369">它只能在 <xref:System.Windows.Rect> 实例被强制转换为 <xref:System.IFormattable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="6b18f-369">It can be used only when the <xref:System.Windows.Rect> instance is cast to an <xref:System.IFormattable> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public double Top { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Top" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.Top" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Top As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Top { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Top : double" Usage="System.Windows.Rect.Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6b18f-370">获取矩形顶边的 y 轴位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-370">Gets the y-axis position of the top of the rectangle.</span></span></summary>
        <value><span data-ttu-id="6b18f-371">矩形顶边的 y 轴位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-371">The y-axis position of the top of the rectangle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-372">获取此属性等效于获取 <xref:System.Windows.Rect.Y%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="6b18f-372">Getting this property is equivalent to getting the <xref:System.Windows.Rect.Y%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-373">下面的示例演示如何使用代码创建一个矩形，并将其添加到页面中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-373">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="6b18f-374">该示例还演示了如何查找有关新矩形的大小和坐标信息，并将信息呈现在 <xref:System.Windows.Controls.TextBox> 矩形下面的中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-374">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Rect.Y" />
      </Docs>
    </Member>
    <Member MemberName="TopLeft">
      <MemberSignature Language="C#" Value="public System.Windows.Point TopLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point TopLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.TopLeft" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TopLeft As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point TopLeft { System::Windows::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.TopLeft : System.Windows.Point" Usage="System.Windows.Rect.TopLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6b18f-375">获取矩形的左上角位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-375">Gets the position of the top-left corner of the rectangle.</span></span></summary>
        <value><span data-ttu-id="6b18f-376">矩形的左上角位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-376">The position of the top-left corner of the rectangle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-377">矩形的左上角位置等于 (<xref:System.Windows.Rect.X%2A> ， <xref:System.Windows.Rect.Y%2A>) 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-377">The position of the top-left corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A>, <xref:System.Windows.Rect.Y%2A>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-378">下面的示例演示如何使用代码创建一个矩形，并将其添加到页面中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-378">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="6b18f-379">该示例还演示了如何查找有关新矩形的大小和坐标信息，并将信息呈现在 <xref:System.Windows.Controls.TextBox> 矩形下面的中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-379">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TopRight">
      <MemberSignature Language="C#" Value="public System.Windows.Point TopRight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point TopRight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.TopRight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TopRight As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point TopRight { System::Windows::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.TopRight : System.Windows.Point" Usage="System.Windows.Rect.TopRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6b18f-380">获取矩形的右上角位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-380">Gets the position of the top-right corner of the rectangle.</span></span></summary>
        <value><span data-ttu-id="6b18f-381">矩形的右上角位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-381">The position of the top-right corner of the rectangle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-382">矩形的右上角位置等于 (<xref:System.Windows.Rect.X%2A>  +  <xref:System.Windows.Rect.Width%2A> ， <xref:System.Windows.Rect.Y%2A>) 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-382">The position of the top-right corner of the rectangle is equal to (<xref:System.Windows.Rect.X%2A> + <xref:System.Windows.Rect.Width%2A>, <xref:System.Windows.Rect.Y%2A>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-383">下面的示例演示如何使用代码创建一个矩形，并将其添加到页面中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-383">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="6b18f-384">该示例还演示了如何查找有关新矩形的大小和坐标信息，并将信息呈现在 <xref:System.Windows.Controls.TextBox> 矩形下面的中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-384">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6b18f-385">返回矩形的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="6b18f-385">Returns a string representation of the rectangle.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="rect.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6b18f-386">返回矩形的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="6b18f-386">Returns a string representation of the rectangle.</span></span></summary>
        <returns><span data-ttu-id="6b18f-387">当前矩形的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="6b18f-387">A string representation of the current rectangle.</span></span> <span data-ttu-id="6b18f-388">此字符串采用以下格式："<see cref="P:System.Windows.Rect.X" />,<see cref="P:System.Windows.Rect.Y" />,<see cref="P:System.Windows.Rect.Width" />,<see cref="P:System.Windows.Rect.Height" />"。</span><span class="sxs-lookup"><span data-stu-id="6b18f-388">The string has the following form: "<see cref="P:System.Windows.Rect.X" />,<see cref="P:System.Windows.Rect.Y" />,<see cref="P:System.Windows.Rect.Width" />,<see cref="P:System.Windows.Rect.Height" />".</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6b18f-389">下面的示例演示如何使用 <xref:System.Windows.Rect.ToString> 方法获取结构的字符串表示形式 <xref:System.Windows.Rect> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-389">The following example shows how to use the <xref:System.Windows.Rect.ToString> method to get a string representation of a <xref:System.Windows.Rect> structure.</span></span>  
  
 [!code-csharp[RectExamples_snip#ToStringExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#tostringexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="rect.ToString provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="6b18f-390">区域性特定的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="6b18f-390">Culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="6b18f-391">使用指定的格式提供程序返回矩形的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="6b18f-391">Returns a string representation of the rectangle by using the specified format provider.</span></span></summary>
        <returns><span data-ttu-id="6b18f-392">当前矩形的字符串表示形式，由指定的格式提供程序确定。</span><span class="sxs-lookup"><span data-stu-id="6b18f-392">A string representation of the current rectangle that is determined by the specified format provider.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6b18f-393">使用指定的矩阵转换矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-393">Transforms a rectangle by using the specified matrix.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Transform(System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (matrix As Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Windows::Media::Matrix matrix);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Windows.Media.Matrix -&gt; unit" Usage="rect.Transform matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix"><span data-ttu-id="6b18f-394">指定将应用转换的矩阵。</span><span class="sxs-lookup"><span data-stu-id="6b18f-394">A matrix that specifies the transformation to apply.</span></span></param>
        <summary><span data-ttu-id="6b18f-395">通过应用指定矩阵来转换矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-395">Transforms the rectangle by applying the specified matrix.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6b18f-396">下面的示例演示如何使用 <xref:System.Windows.Rect.Transform%28System.Windows.Media.Matrix%29> 方法 <xref:System.Windows.Rect> 通过使用转换结构 <xref:System.Windows.Media.Matrix> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-396">The following example shows how to use the <xref:System.Windows.Rect.Transform%28System.Windows.Media.Matrix%29> method to transform a <xref:System.Windows.Rect> structure by using a <xref:System.Windows.Media.Matrix>.</span></span>  
  
 [!code-csharp[RectExamples_snip#TransformExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#transformexample1_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Transform (System.Windows.Rect rect, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Transform(valuetype System.Windows.Rect rect, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Transform (rect As Rect, matrix As Matrix) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Rect Transform(System::Windows::Rect rect, System::Windows::Media::Matrix matrix);" />
      <MemberSignature Language="F#" Value="static member Transform : System.Windows.Rect * System.Windows.Media.Matrix -&gt; System.Windows.Rect" Usage="System.Windows.Rect.Transform (rect, matrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="rect"><span data-ttu-id="6b18f-397">作为转换基础的矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-397">A rectangle that is the basis for the transformation.</span></span></param>
        <param name="matrix"><span data-ttu-id="6b18f-398">指定将应用转换的矩阵。</span><span class="sxs-lookup"><span data-stu-id="6b18f-398">A matrix that specifies the transformation to apply.</span></span></param>
        <summary><span data-ttu-id="6b18f-399">返回矩形，该矩形是通过向指定矩形应用指定矩阵而得到的。</span><span class="sxs-lookup"><span data-stu-id="6b18f-399">Returns the rectangle that results from applying the specified matrix to the specified rectangle.</span></span></summary>
        <returns><span data-ttu-id="6b18f-400">此操作生成的矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-400">The rectangle that results from the operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6b18f-401">下面的示例演示如何使用 <xref:System.Windows.Rect.Transform%28System.Windows.Rect%2CSystem.Windows.Media.Matrix%29> 方法创建一个新的 <xref:System.Windows.Rect> 结构，该结构是通过将应用 <xref:System.Windows.Media.Matrix> 于现有矩形而生成的。</span><span class="sxs-lookup"><span data-stu-id="6b18f-401">The following example shows how to use the <xref:System.Windows.Rect.Transform%28System.Windows.Rect%2CSystem.Windows.Media.Matrix%29> method to create a new <xref:System.Windows.Rect> structure that results from applying a <xref:System.Windows.Media.Matrix> to an existing rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#TransformExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#transformexample2_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Union">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6b18f-402">创建一个矩形，该矩形的大小刚好足以包含给定矩形和指定点或第二个矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-402">Creates a rectangle that is exactly large enough to contain a given rectangle and a specified point or second rectangle.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public void Union (System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Union(valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Union(System.Windows.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Union (point As Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Union(System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="member this.Union : System.Windows.Point -&gt; unit" Usage="rect.Union point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="point"><span data-ttu-id="6b18f-403">要包含的点。</span><span class="sxs-lookup"><span data-stu-id="6b18f-403">The point to include.</span></span></param>
        <summary><span data-ttu-id="6b18f-404">放大当前矩形，使其刚好足以包含指定点。</span><span class="sxs-lookup"><span data-stu-id="6b18f-404">Expands the current rectangle exactly enough to contain the specified point.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6b18f-405">下面的示例演示如何使用 <xref:System.Windows.Rect.Union%28System.Windows.Point%29> 方法来扩展当前矩形，使其刚好足以包含给定的 <xref:System.Windows.Point> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-405">The following example shows how to use the <xref:System.Windows.Rect.Union%28System.Windows.Point%29> method to expand the current rectangle exactly enough to contain a given <xref:System.Windows.Point>.</span></span>  
  
 [!code-csharp[RectExamples_snip#UnionExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#unionexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Rect.Contains(System.Windows.Point)" />
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public void Union (System.Windows.Rect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Union(valuetype System.Windows.Rect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Union(System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Union (rect As Rect)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Union(System::Windows::Rect rect);" />
      <MemberSignature Language="F#" Value="member this.Union : System.Windows.Rect -&gt; unit" Usage="rect.Union rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect"><span data-ttu-id="6b18f-406">要包含的矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-406">The rectangle to include.</span></span></param>
        <summary><span data-ttu-id="6b18f-407">放大当前矩形，使其刚好足以包含指定矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-407">Expands the current rectangle exactly enough to contain the specified rectangle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6b18f-408">下面的示例演示如何使用 <xref:System.Windows.Rect.Union%28System.Windows.Rect%29> 方法来扩展当前矩形，使其刚好足以包含指定的矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-408">The following example shows how to use the <xref:System.Windows.Rect.Union%28System.Windows.Rect%29> method to expand the current rectangle exactly enough to contain the specified rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#UnionExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#unionexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Rect.Contains(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Union (System.Windows.Rect rect, System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Union(valuetype System.Windows.Rect rect, valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Union (rect As Rect, point As Point) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Rect Union(System::Windows::Rect rect, System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="static member Union : System.Windows.Rect * System.Windows.Point -&gt; System.Windows.Rect" Usage="System.Windows.Rect.Union (rect, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Windows.Rect" />
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="rect"><span data-ttu-id="6b18f-409">要包含的矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-409">The rectangle to include.</span></span></param>
        <param name="point"><span data-ttu-id="6b18f-410">要包含的点。</span><span class="sxs-lookup"><span data-stu-id="6b18f-410">The point to include.</span></span></param>
        <summary><span data-ttu-id="6b18f-411">创建一个矩形，该矩形的大小刚好足以包含指定矩形和指定点。</span><span class="sxs-lookup"><span data-stu-id="6b18f-411">Creates a rectangle that is exactly large enough to include the specified rectangle and the specified point.</span></span></summary>
        <returns><span data-ttu-id="6b18f-412">大小刚好足以包含指定矩形和指定点的矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-412">A rectangle that is exactly large enough to contain the specified rectangle and the specified point.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6b18f-413">下面的示例演示如何使用 <xref:System.Windows.Rect.Union%28System.Windows.Rect%2CSystem.Windows.Point%29> 方法创建一个矩形，该矩形的大小刚好足以包含给定矩形和给定的 <xref:System.Windows.Point> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-413">The following example shows how to use the <xref:System.Windows.Rect.Union%28System.Windows.Rect%2CSystem.Windows.Point%29> method to create a rectangle that is exactly large enough to contain a given rectangle and a given <xref:System.Windows.Point>.</span></span>  
  
 [!code-csharp[RectExamples_snip#UnionExample3_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#unionexample3_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Rect.Contains(System.Windows.Point)" />
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public static System.Windows.Rect Union (System.Windows.Rect rect1, System.Windows.Rect rect2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Rect Union(valuetype System.Windows.Rect rect1, valuetype System.Windows.Rect rect2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Union (rect1 As Rect, rect2 As Rect) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Rect Union(System::Windows::Rect rect1, System::Windows::Rect rect2);" />
      <MemberSignature Language="F#" Value="static member Union : System.Windows.Rect * System.Windows.Rect -&gt; System.Windows.Rect" Usage="System.Windows.Rect.Union (rect1, rect2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect1" Type="System.Windows.Rect" />
        <Parameter Name="rect2" Type="System.Windows.Rect" />
      </Parameters>
      <Docs>
        <param name="rect1"><span data-ttu-id="6b18f-414">要包含的第一个矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-414">The first rectangle to include.</span></span></param>
        <param name="rect2"><span data-ttu-id="6b18f-415">要包含的第二个矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-415">The second rectangle to include.</span></span></param>
        <summary><span data-ttu-id="6b18f-416">创建一个矩形，该矩形的大小刚好足以包含两个指定矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-416">Creates a rectangle that is exactly large enough to contain the two specified rectangles.</span></span></summary>
        <returns><span data-ttu-id="6b18f-417">所得矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-417">The resulting rectangle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6b18f-418">下面的示例演示如何使用 <xref:System.Windows.Rect.Union%28System.Windows.Rect%2CSystem.Windows.Rect%29> 方法创建一个矩形，该矩形的大小刚好足以包含两个给定矩形。</span><span class="sxs-lookup"><span data-stu-id="6b18f-418">The following example shows how to use the <xref:System.Windows.Rect.Union%28System.Windows.Rect%2CSystem.Windows.Rect%29> method to create a rectangle that is exactly large enough to contain two given rectangles.</span></span>  
  
 [!code-csharp[RectExamples_snip#UnionExample4_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#unionexample4_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Rect.Contains(System.Windows.Rect)" />
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public double Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Width { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Width : double with get, set" Usage="System.Windows.Rect.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6b18f-419">获取或设置矩形的宽度。</span><span class="sxs-lookup"><span data-stu-id="6b18f-419">Gets or sets the width of the rectangle.</span></span></summary>
        <value><span data-ttu-id="6b18f-420">一个正数，表示矩形的宽度。</span><span class="sxs-lookup"><span data-stu-id="6b18f-420">A positive number that represents the width of the rectangle.</span></span> <span data-ttu-id="6b18f-421">默认值为 0。</span><span class="sxs-lookup"><span data-stu-id="6b18f-421">The default is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-422"><xref:System.Windows.Rect.Empty%2A>矩形的为 <xref:System.Windows.Rect.Width%2A> <xref:System.Double.NegativeInfinity> 。</span><span class="sxs-lookup"><span data-stu-id="6b18f-422">The <xref:System.Windows.Rect.Empty%2A> rectangle has a <xref:System.Windows.Rect.Width%2A> of <xref:System.Double.NegativeInfinity>.</span></span> <span data-ttu-id="6b18f-423">该 <xref:System.Windows.Rect.Empty%2A> 矩形是只读的; <xref:System.Windows.Rect.Width%2A> 无法更改。</span><span class="sxs-lookup"><span data-stu-id="6b18f-423">The <xref:System.Windows.Rect.Empty%2A> rectangle is read-only; its <xref:System.Windows.Rect.Width%2A> cannot not be changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-424">下面的示例演示如何使用 <xref:System.Windows.Rect> XAML 来指定矩形的尺寸和位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-424">The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.</span></span>  
  
 [!code-csharp[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/CSharp/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/visualbasic/rectexample.vb#rectexamplewholepage)]
 [!code-xaml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/xaml/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/XAML/RectExample.xaml#rectexamplewholepage)]  
  
 <span data-ttu-id="6b18f-425">下面的示例演示如何使用代码创建一个矩形，并将其添加到页面中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-425">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="6b18f-426">该示例还演示了如何查找有关新矩形的大小和坐标信息，并将信息呈现在 <xref:System.Windows.Controls.TextBox> 矩形下面的中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-426">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="6b18f-427"><see cref="P:System.Windows.Rect.Width" /> 设置为一个负值。</span><span class="sxs-lookup"><span data-stu-id="6b18f-427"><see cref="P:System.Windows.Rect.Width" /> is set to a negative value.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6b18f-428">在 <see cref="P:System.Windows.Rect.Width" /> 矩形上设置 <see cref="P:System.Windows.Rect.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-428"><see cref="P:System.Windows.Rect.Width" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
        <altmember cref="P:System.Windows.Rect.Height" />
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public double X { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.X" />
      <MemberSignature Language="VB.NET" Value="Public Property X As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double X { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.X : double with get, set" Usage="System.Windows.Rect.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6b18f-429">获取或设置矩形左边的 x 轴值。</span><span class="sxs-lookup"><span data-stu-id="6b18f-429">Gets or sets the x-axis value of the left side of the rectangle.</span></span></summary>
        <value><span data-ttu-id="6b18f-430">矩形左边的 x 轴值。</span><span class="sxs-lookup"><span data-stu-id="6b18f-430">The x-axis value of the left side of the rectangle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-431">获取此属性等效于获取 <xref:System.Windows.Rect.Left%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="6b18f-431">Getting this property is equivalent to getting the <xref:System.Windows.Rect.Left%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-432">下面的示例演示如何使用 <xref:System.Windows.Rect> XAML 来指定矩形的尺寸和位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-432">The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.</span></span>  
  
 [!code-csharp[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/CSharp/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/visualbasic/rectexample.vb#rectexamplewholepage)]
 [!code-xaml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/xaml/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/XAML/RectExample.xaml#rectexamplewholepage)]  
  
 <span data-ttu-id="6b18f-433">下面的示例演示如何使用代码创建一个矩形，并将其添加到页面中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-433">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="6b18f-434">该示例还演示了如何查找有关新矩形的大小和坐标信息，并将信息呈现在 <xref:System.Windows.Controls.TextBox> 矩形下面的中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-434">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6b18f-435">在 <see cref="P:System.Windows.Rect.X" /> 矩形上设置 <see cref="P:System.Windows.Rect.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-435"><see cref="P:System.Windows.Rect.X" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
        <altmember cref="P:System.Windows.Rect.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public double Y { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Rect.Y" />
      <MemberSignature Language="VB.NET" Value="Public Property Y As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Y { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Y : double with get, set" Usage="System.Windows.Rect.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6b18f-436">获取或设置矩形顶边的 y 轴值。</span><span class="sxs-lookup"><span data-stu-id="6b18f-436">Gets or sets the y-axis value of the top side of the rectangle.</span></span></summary>
        <value><span data-ttu-id="6b18f-437">矩形顶边的 y 轴值。</span><span class="sxs-lookup"><span data-stu-id="6b18f-437">The y-axis value of the top side of the rectangle.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6b18f-438">获取此属性等效于获取 <xref:System.Windows.Rect.Top%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="6b18f-438">Getting this property is equivalent to getting the <xref:System.Windows.Rect.Top%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6b18f-439">下面的示例演示如何使用 <xref:System.Windows.Rect> XAML 来指定矩形的尺寸和位置。</span><span class="sxs-lookup"><span data-stu-id="6b18f-439">The following example shows how to use a <xref:System.Windows.Rect> structure to specify the dimensions and location of a rectangle using XAML.</span></span>  
  
 [!code-csharp[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/CSharp/RectExample.cs#rectexamplewholepage)]
 [!code-vb[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/visualbasic/rectexample.vb#rectexamplewholepage)]
 [!code-xaml[GeometriesMiscSnippets_snip#RectExampleWholePage](~/samples/snippets/xaml/VS_Snippets_Wpf/GeometriesMiscSnippets_snip/XAML/RectExample.xaml#rectexamplewholepage)]  
  
 <span data-ttu-id="6b18f-440">下面的示例演示如何使用代码创建一个矩形，并将其添加到页面中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-440">The following example shows how to use code to create a rectangle and add it to the page.</span></span> <span data-ttu-id="6b18f-441">该示例还演示了如何查找有关新矩形的大小和坐标信息，并将信息呈现在 <xref:System.Windows.Controls.TextBox> 矩形下面的中。</span><span class="sxs-lookup"><span data-stu-id="6b18f-441">The example also illustrates how to find size and coordinate information about the new rectangle and render the information in a <xref:System.Windows.Controls.TextBox> below the rectangle.</span></span>  
  
 [!code-csharp[RectExamples_snip#CreateRectExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/RectExamples_snip/CSharp/RectExample.cs#createrectexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="6b18f-442">在 <see cref="P:System.Windows.Rect.Y" /> 矩形上设置 <see cref="P:System.Windows.Rect.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="6b18f-442"><see cref="P:System.Windows.Rect.Y" /> is set on an <see cref="P:System.Windows.Rect.Empty" /> rectangle.</span></span></exception>
        <altmember cref="P:System.Windows.Rect.X" />
      </Docs>
    </Member>
  </Members>
</Type>
