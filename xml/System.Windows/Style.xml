<Type Name="Style" FullName="System.Windows.Style">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4efa5d2cb6421af7f38d97e09f88fc10c9050b01" /><Meta Name="ms.sourcegitcommit" Value="ec905a25e6dd05a6a3ffa7f30bf59f3095a8cd67" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/01/2020" /><Meta Name="ms.locfileid" Value="89251475" /></Metadata><TypeSignature Language="C#" Value="public class Style : System.Windows.Threading.DispatcherObject, System.Windows.Markup.IAddChild, System.Windows.Markup.INameScope, System.Windows.Markup.IQueryAmbient" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Style extends System.Windows.Threading.DispatcherObject implements class System.Windows.Markup.IAddChild, class System.Windows.Markup.INameScope, class System.Windows.Markup.IQueryAmbient" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Style" />
  <TypeSignature Language="VB.NET" Value="Public Class Style&#xA;Inherits DispatcherObject&#xA;Implements IAddChild, INameScope, IQueryAmbient" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="public ref class Style : System::Windows::Threading::DispatcherObject, System::Windows::Markup::IAddChild, System::Windows::Markup::INameScope, System::Windows::Markup::IQueryAmbient" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type Style = class&#xA;    inherit DispatcherObject&#xA;    interface IAddChild&#xA;    interface INameScope&#xA;    interface IQueryAmbient" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="C#" Value="public class Style : System.Windows.Threading.DispatcherObject, System.Windows.Markup.IAddChild, System.Windows.Markup.INameScope" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Style extends System.Windows.Threading.DispatcherObject implements class System.Windows.Markup.IAddChild, class System.Windows.Markup.INameScope" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="VB.NET" Value="Public Class Style&#xA;Inherits DispatcherObject&#xA;Implements IAddChild, INameScope" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="C++ CLI" Value="public ref class Style : System::Windows::Threading::DispatcherObject, System::Windows::Markup::IAddChild, System::Windows::Markup::INameScope" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="F#" Value="type Style = class&#xA;    inherit DispatcherObject&#xA;    interface INameScope&#xA;    interface IAddChild" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Style extends System.Windows.Threading.DispatcherObject implements class System.Windows.Markup.IAddChild, class System.Windows.Markup.INameScope, class System.Windows.Markup.IQueryAmbient" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type Style = class&#xA;    inherit DispatcherObject&#xA;    interface INameScope&#xA;    interface IAddChild&#xA;    interface IQueryAmbient" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Threading.DispatcherObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Markup.IAddChild</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Markup.INameScope</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Windows.Markup.ContentProperty("Setters")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.ContentProperty("Setters")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Windows.Markup.DictionaryKeyProperty("TargetType")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.DictionaryKeyProperty("TargetType")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8e5cb-101">在类型的不同实例之间共享属性、资源和事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-101">Enables the sharing of properties, resources, and event handlers between instances of a type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e5cb-102">可以 <xref:System.Windows.Style> 在从或派生的任何元素上设置 <xref:System.Windows.FrameworkElement> <xref:System.Windows.FrameworkContentElement> 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-102">You can set a <xref:System.Windows.Style> on any element that derives from <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>.</span></span> <span data-ttu-id="8e5cb-103">样式最常声明为节内的资源 <xref:System.Windows.Application.Resources%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-103">A style is most commonly declared as a resource inside the <xref:System.Windows.Application.Resources%2A> section.</span></span> <span data-ttu-id="8e5cb-104">由于样式是资源，因此它们遵循适用于所有资源的相同范围规则，因此，声明样式会影响其应用位置。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-104">Because styles are resources, they obey the same scoping rules that apply to all resources, so where you declare a style affects where it can be applied.</span></span> <span data-ttu-id="8e5cb-105">例如，如果在应用程序定义文件的根元素中声明样式 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ，则该样式可用于应用程序中的任何位置。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-105">If, for instance, you declare the style in the root element of your application definition [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] file, the style can be used anywhere in your application.</span></span> <span data-ttu-id="8e5cb-106">如果正在创建导航应用程序并在应用程序的一个文件中声明样式 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ，则该样式仅可用于该 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 文件。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-106">If you are creating a navigation application and declare the style in one of the application's [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] files, the style can be used only in that [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] file.</span></span> <span data-ttu-id="8e5cb-107">有关资源的范围规则的详细信息，请参阅 [XAML 资源](/dotnet/framework/wpf/advanced/xaml-resources)。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-107">For more information on scoping rules for resources, see [XAML Resources](/dotnet/framework/wpf/advanced/xaml-resources).</span></span>  
  
 <span data-ttu-id="8e5cb-108">样式声明包含一个 <xref:System.Windows.Style> 对象，该对象包含一个或多个对象的集合 <xref:System.Windows.Setter> 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-108">The style declaration consists of a <xref:System.Windows.Style> object that contains a collection of one or more <xref:System.Windows.Setter> objects.</span></span> <span data-ttu-id="8e5cb-109">每个都 <xref:System.Windows.Setter> 包含一个 <xref:System.Windows.Setter.Property%2A> 和一个 <xref:System.Windows.Setter.Value%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-109">Each <xref:System.Windows.Setter> consists of a <xref:System.Windows.Setter.Property%2A> and a <xref:System.Windows.Setter.Value%2A>.</span></span> <span data-ttu-id="8e5cb-110">属性是样式要应用到的元素的属性的名称。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-110">The property is the name of the property of the element the style is to apply to.</span></span> <span data-ttu-id="8e5cb-111">将样式声明为资源后，就可以像引用任何其他资源一样对其进行引用。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-111">After the style is declared as a resource, it can then be referenced just like any other resource.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8e5cb-112">如果 setter 集合中有多个具有相同 <xref:System.Windows.Setter.Property%2A> 属性值的 setter，则使用最后声明的 setter。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-112">If there is more than one setter in the setter collection with the same <xref:System.Windows.Setter.Property%2A> property value, the setter that is declared last is used.</span></span> <span data-ttu-id="8e5cb-113">同样，如果为样式中的相同属性和直接在元素上设置了值，则直接在元素上设置的值优先。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-113">Similarly, if you set a value for the same property in a style and on an element directly, the value set on the element directly takes precedence.</span></span>  
  
 <span data-ttu-id="8e5cb-114">[!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)]样式设置和模板化模型允许维护和共享外观，并使展示与逻辑分离。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-114">The [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] styling and templating model allows maintenance and sharing of a look as well as the separation of presentation and logic.</span></span> <span data-ttu-id="8e5cb-115">样式设置和模板化模型包含一套功能，使你能够自定义你的 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-115">The styling and templating model includes a suite of features that enable you to customize your [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)].</span></span> <span data-ttu-id="8e5cb-116">此功能套件包括 <xref:System.Windows.Style> 类以及以下内容：</span><span class="sxs-lookup"><span data-stu-id="8e5cb-116">This suite of features includes the <xref:System.Windows.Style> class as well as the following:</span></span>  
  
-   <xref:System.Windows.Trigger>  
  
-   <span data-ttu-id="8e5cb-117"><xref:System.Windows.EventTrigger> 和 <xref:System.Windows.Media.Animation.Storyboard></span><span class="sxs-lookup"><span data-stu-id="8e5cb-117"><xref:System.Windows.EventTrigger> and <xref:System.Windows.Media.Animation.Storyboard></span></span>  
  
-   <xref:System.Windows.Controls.ControlTemplate>  
  
-   <xref:System.Windows.DataTemplate>  
  
 <span data-ttu-id="8e5cb-118">有关详细信息，请参阅 [样式设置和模板化](/dotnet/framework/wpf/controls/styling-and-templating)。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-118">For more information, see [Styling and Templating](/dotnet/framework/wpf/controls/styling-and-templating).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e5cb-119">下面的示例演示将影响的属性的样式声明 <xref:System.Windows.Controls.Control.Background%2A> <xref:System.Windows.Controls.Control> 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-119">The following example shows a style declaration that will affect the <xref:System.Windows.Controls.Control.Background%2A> property of a <xref:System.Windows.Controls.Control>.</span></span>  
  
 [!code-xaml[StyleOvw01#StyleSimple](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#stylesimple)]   
  
 <span data-ttu-id="8e5cb-120">若要应用以上样式，请执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="8e5cb-120">To apply the above style, do the following:</span></span>  
  
 [!code-xaml[StyleOvw01#StyleSimpleApplied](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#stylesimpleapplied)]
  
 <span data-ttu-id="8e5cb-121">还可以通过使用属性将样式应用于给定类型的所有元素 <xref:System.Windows.Style.TargetType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-121">You can also apply styles to all elements of a given type by using the <xref:System.Windows.Style.TargetType%2A> property.</span></span> <span data-ttu-id="8e5cb-122">将目标类型添加到样式意味着不再需要完全限定使用语法设置的属性 `ClassName.PropertyName` 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-122">Adding the target type to the style means that you no longer have to fully qualify the property you are setting with the `ClassName.PropertyName` syntax.</span></span> <span data-ttu-id="8e5cb-123">下面的示例定义了将应用于每个元素的样式 <xref:System.Windows.Controls.TextBlock> 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-123">The following example defines a style that will be applied to every <xref:System.Windows.Controls.TextBlock> element.</span></span>  
  
 [!code-xaml[PhotoStoreDemoStyled#1](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#1)]   
  
> [!NOTE]
>  <span data-ttu-id="8e5cb-124">许多 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 控件包含其他控件的组合 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] ，因此，创建适用于某个类型的所有控件的样式可能会产生很大的影响。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-124">Many [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls consist of a combination of other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls, so creating a style that applies to all controls of a type can have broad impact.</span></span> <span data-ttu-id="8e5cb-125">例如，如果您创建一个样式，该样式面向 <xref:System.Windows.Controls.TextBlock> 中的控件 <xref:System.Windows.Controls.Canvas> ，则该样式将应用于 <xref:System.Windows.Controls.TextBlock> 画布中的所有控件，即使 <xref:System.Windows.Controls.TextBlock> 是另一个控件（例如）的一部分 <xref:System.Windows.Controls.ListBox> 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-125">For instance, if you create a style that targets the <xref:System.Windows.Controls.TextBlock> controls in a <xref:System.Windows.Controls.Canvas>, the style is applied to all <xref:System.Windows.Controls.TextBlock> controls in the canvas, even if the <xref:System.Windows.Controls.TextBlock> is part of another control, such as a <xref:System.Windows.Controls.ListBox>.</span></span>  
  
 <span data-ttu-id="8e5cb-126">有关如何从定义的样式扩展或继承的信息，请参阅 <xref:System.Windows.Style.BasedOn%2A> 页。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-126">For information on how to extend or inherit from a defined style, see the <xref:System.Windows.Style.BasedOn%2A> page.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/desktop-wpf/xaml-services/xkey-directive"><span data-ttu-id="8e5cb-127">X：Key 特性</span><span class="sxs-lookup"><span data-stu-id="8e5cb-127">x:Key Attribute</span></span></related>
    <related type="Article" href="/dotnet/desktop-wpf/xaml-services/xtype-markup-extension"><span data-ttu-id="8e5cb-128">x:Type 标记扩展</span><span class="sxs-lookup"><span data-stu-id="8e5cb-128">x:Type Markup Extension</span></span></related>
    <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010"><span data-ttu-id="8e5cb-129">样式设置和模板化示例简介</span><span class="sxs-lookup"><span data-stu-id="8e5cb-129">Introduction to Styling and Templating Sample</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8e5cb-130">初始化 <see cref="T:System.Windows.Style" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-130">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Style();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8e5cb-131">初始化 <see cref="T:System.Windows.Style" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-131">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e5cb-132">此构造函数调用需要延迟验证 <xref:System.Windows.Style.TargetType%2A> 和 <xref:System.Windows.Style.BasedOn%2A> 样式类型。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-132">This constructor call requires delayed validation of <xref:System.Windows.Style.TargetType%2A> and <xref:System.Windows.Style.BasedOn%2A> style type.</span></span> <span data-ttu-id="8e5cb-133">如果此在分析器的上下文之外使用，则行为是不确定的。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-133">If this is used outside the context of the parser, behavior is undefined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style (Type targetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Style(Type ^ targetType);" />
      <MemberSignature Language="F#" Value="new System.Windows.Style : Type -&gt; System.Windows.Style" Usage="new System.Windows.Style targetType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="targetType"><span data-ttu-id="8e5cb-134">要应用该样式的类型。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-134">The type to which the style will apply.</span></span></param>
        <summary><span data-ttu-id="8e5cb-135">初始化 <see cref="T:System.Windows.Style" /> 类的一个新实例，以便在指定的 <see cref="T:System.Type" /> 上使用。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-135">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class to use on the specified <see cref="T:System.Type" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Style (Type targetType, System.Windows.Style basedOn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type targetType, class System.Windows.Style basedOn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.#ctor(System.Type,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetType As Type, basedOn As Style)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Style(Type ^ targetType, System::Windows::Style ^ basedOn);" />
      <MemberSignature Language="F#" Value="new System.Windows.Style : Type * System.Windows.Style -&gt; System.Windows.Style" Usage="new System.Windows.Style (targetType, basedOn)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetType" Type="System.Type" />
        <Parameter Name="basedOn" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="targetType"><span data-ttu-id="8e5cb-136">要应用该样式的类型。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-136">The type to which the style will apply.</span></span></param>
        <param name="basedOn"><span data-ttu-id="8e5cb-137">此样式所基于的样式。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-137">The style to base this style on.</span></span></param>
        <summary><span data-ttu-id="8e5cb-138">基于指定的 <see cref="T:System.Windows.Style" /> 初始化 <see cref="T:System.Type" /> 类的一个新实例，以便在指定的 <see cref="T:System.Windows.Style" /> 上使用。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-138">Initializes a new instance of the <see cref="T:System.Windows.Style" /> class to use on the specified <see cref="T:System.Type" /> and based on the specified <see cref="T:System.Windows.Style" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BasedOn">
      <MemberSignature Language="C#" Value="public System.Windows.Style BasedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style BasedOn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.BasedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property BasedOn As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ BasedOn { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BasedOn : System.Windows.Style with get, set" Usage="System.Windows.Style.BasedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Windows.Markup.Ambient]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Windows.Markup.Ambient&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8e5cb-139">获取或设置一个作为当前样式的基准的已定义样式。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-139">Gets or sets a defined style that is the basis of the current style.</span></span></summary>
        <value><span data-ttu-id="8e5cb-140">一个作为当前样式的基准的已定义样式。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-140">A defined style that is the basis of the current style.</span></span> <span data-ttu-id="8e5cb-141">默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-141">The default value is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e5cb-142">每个样式仅支持一个 <xref:System.Windows.Style.BasedOn%2A> 值。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-142">Each style only supports one <xref:System.Windows.Style.BasedOn%2A> value.</span></span>  
  
<a name="xamlAttributeUsage_BasedOn"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="8e5cb-143">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="8e5cb-143">XAML Attribute Usage</span></span>  
  
```  
<object BasedOn="myStyle" .../>  
```  
  
<a name="xamlValues_BasedOn"></a>   
## <a name="xaml-values"></a><span data-ttu-id="8e5cb-144">XAML 值</span><span class="sxs-lookup"><span data-stu-id="8e5cb-144">XAML Values</span></span>  
 <span data-ttu-id="8e5cb-145">*myStyle*</span><span class="sxs-lookup"><span data-stu-id="8e5cb-145">*myStyle*</span></span>  
 <span data-ttu-id="8e5cb-146">现有样式。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-146">An existing style.</span></span> <span data-ttu-id="8e5cb-147">通常，使用 [标记扩展和 WPF XAML](/dotnet/framework/wpf/advanced/markup-extensions-and-wpf-xaml) 来引用现有样式。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-147">Typically, you use the [Markup Extensions and WPF XAML](/dotnet/framework/wpf/advanced/markup-extensions-and-wpf-xaml) to refer to an existing style.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e5cb-148">可以通过多种方式来 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 扩展或继承中的样式。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-148">There are several ways that styles in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] can be extended or inherited.</span></span> <span data-ttu-id="8e5cb-149">样式可基于通过此属性的其他样式。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-149">Styles can be based on other styles through this property.</span></span> <span data-ttu-id="8e5cb-150">使用此属性时，新样式将继承未在新样式中显式重新定义的原始样式的值。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-150">When you use this property, the new style will inherit the values of the original style that are not explicitly redefined in the new style.</span></span> <span data-ttu-id="8e5cb-151">在下面的示例中， `Style2` 继承的 <xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType> 值 `Yellow` ，并添加 <xref:System.Windows.Controls.Control.Foreground%2A?displayProperty=nameWithType> 值 `Blue` 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-151">In the following example, `Style2` inherits the <xref:System.Windows.Controls.Control.Background%2A?displayProperty=nameWithType> value of `Yellow`, and adds a <xref:System.Windows.Controls.Control.Foreground%2A?displayProperty=nameWithType> value of `Blue`.</span></span>  
  
 [!code-xaml[StyleOvw01#ExtendingStyle](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#extendingstyle)]   
  
 <span data-ttu-id="8e5cb-152">同样，样式可以基于现有元素的样式 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] ，如下面的示例所示，其中新样式基于元素的样式 <xref:System.Windows.Controls.TextBlock> 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-152">Similarly, styles can be based on the style of an existing [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] element, as in the following example where the new style is based on the style of a <xref:System.Windows.Controls.TextBlock> element.</span></span>  
  
 [!code-xaml[PhotoStoreDemoStyled#2](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#2)]   
  
> [!NOTE]
>  <span data-ttu-id="8e5cb-153">如果创建了一个具有属性的样式， <xref:System.Windows.Style.TargetType%2A> 并将其基于另一个同时定义属性的样式 <xref:System.Windows.Style.TargetType%2A> ，则派生样式的目标类型必须与基样式的类型相同或派生。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-153">If you create a style with a <xref:System.Windows.Style.TargetType%2A> property and base it on another style that also defines a <xref:System.Windows.Style.TargetType%2A> property, the target type of the derived style must be the same as or be derived from the type of the base style.</span></span>  
  
 <span data-ttu-id="8e5cb-154">为特定类型定义的样式也可以基于其他样式，如以下示例中所示。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-154">Styles defined for specific types can also be based on other styles, as in the following example.</span></span>  
  
 [!code-xaml[StyleOvw01#ExtendingStyleTargetType](~/samples/snippets/csharp/VS_Snippets_Wpf/StyleOvw01/CS/Page1.xaml#extendingstyletargettype)]   
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010"><span data-ttu-id="8e5cb-155">样式设置和模板化示例简介</span><span class="sxs-lookup"><span data-stu-id="8e5cb-155">Introduction to Styling and Templating Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="style.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8e5cb-156">返回此 <see cref="T:System.Windows.Style" /> 的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-156">Returns the hash code for this <see cref="T:System.Windows.Style" />.</span></span></summary>
        <returns><span data-ttu-id="8e5cb-157">此 <see cref="T:System.Windows.Style" /> 的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-157">The hash code for this <see cref="T:System.Windows.Style" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Windows.Style.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8e5cb-158">获取一个值，该值指示样式是否为只读（无法更改）。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-158">Gets a value that indicates whether the style is read-only and cannot be changed.</span></span></summary>
        <value><span data-ttu-id="8e5cb-159">如果样式是密封的，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-159"><see langword="true" /> if the style is sealed; otherwise <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e5cb-160">当其他样式基于它或第一次应用样式时，将会密封样式。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-160">A style is sealed when another style is based on it or when it is applied for the first time.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Style.BasedOn" />
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="abstract member RegisterName : string * obj -&gt; unit&#xA;override this.RegisterName : string * obj -&gt; unit" Usage="style.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8e5cb-161">要注册的名称。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-161">The name to register.</span></span></param>
        <param name="scopedElement"><span data-ttu-id="8e5cb-162">要映射到指定 <paramref name="name" /> 的对象。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-162">The object to map to the specified <paramref name="name" />.</span></span></param>
        <summary><span data-ttu-id="8e5cb-163">在当前名称领域内注册一个新的名称-对象对。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-163">Registers a new name-object pair in the current namescope.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Resources : System.Windows.ResourceDictionary with get, set" Usage="System.Windows.Style.Resources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Windows.Markup.Ambient]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Windows.Markup.Ambient&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8e5cb-164">获取或设置可在此样式的范围内使用的资源的集合。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-164">Gets or sets the collection of resources that can be used within the scope of this style.</span></span></summary>
        <value><span data-ttu-id="8e5cb-165">可在此样式的范围内使用的资源。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-165">The resources that can be used within the scope of this style.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="8e5cb-166">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="8e5cb-166">XAML Property Element Usage</span></span>  
  
```xaml
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>
```

<span data-ttu-id="8e5cb-167">\- 或 -</span><span class="sxs-lookup"><span data-stu-id="8e5cb-167">-or-</span></span>

```xaml
<object>  
  <object.Resources>  
    <ResourceDictionary Source="externalDictionarySource"/>  
  </object.Resources>  
</object>  
```

<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a><span data-ttu-id="8e5cb-168">XAML 值</span><span class="sxs-lookup"><span data-stu-id="8e5cb-168">XAML Values</span></span>  
 <span data-ttu-id="8e5cb-169">*oneOrMoreResourceElements*</span><span class="sxs-lookup"><span data-stu-id="8e5cb-169">*oneOrMoreResourceElements*</span></span>  
 <span data-ttu-id="8e5cb-170">一个或多个资源元素。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-170">One or more resource elements.</span></span> <span data-ttu-id="8e5cb-171">若要在中的 [StaticResource 标记扩展](/dotnet/framework/wpf/advanced/staticresource-markup-extension) 或 [DynamicResource 标记扩展](/dotnet/framework/wpf/advanced/dynamicresource-markup-extension) 语法中稍后引用 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ，资源元素必须具有 `x:Key` 特性。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-171">To be referenced later in either [StaticResource Markup Extension](/dotnet/framework/wpf/advanced/staticresource-markup-extension) or [DynamicResource Markup Extension](/dotnet/framework/wpf/advanced/dynamicresource-markup-extension) syntax in [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)], a resource element must have an `x:Key` attribute.</span></span>  
  
 \<ResourceDictionary Source=" *externalDictionarySource*"/>  
 <span data-ttu-id="8e5cb-172">外部字典源。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-172">An external dictionary source.</span></span> <span data-ttu-id="8e5cb-173">有关详细信息，请参阅 [合并资源字典](/dotnet/framework/wpf/advanced/merged-resource-dictionaries)。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-173">For details, see [Merged Resource Dictionaries](/dotnet/framework/wpf/advanced/merged-resource-dictionaries).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seal">
      <MemberSignature Language="C#" Value="public void Seal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.Seal" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seal ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Seal();" />
      <MemberSignature Language="F#" Value="member this.Seal : unit -&gt; unit" Usage="style.Seal " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8e5cb-174">锁定此样式和所有工厂与触发器，使得它们无法被更改。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-174">Locks this style and all factories and triggers so they cannot be changed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Setters">
      <MemberSignature Language="C#" Value="public System.Windows.SetterBaseCollection Setters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.SetterBaseCollection Setters" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Setters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Setters As SetterBaseCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::SetterBaseCollection ^ Setters { System::Windows::SetterBaseCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Setters : System.Windows.SetterBaseCollection" Usage="System.Windows.Style.Setters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.SetterBaseCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8e5cb-175">获取 <see cref="T:System.Windows.Setter" /> 和 <see cref="T:System.Windows.EventSetter" /> 对象的集合。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-175">Gets a collection of <see cref="T:System.Windows.Setter" /> and <see cref="T:System.Windows.EventSetter" /> objects.</span></span></summary>
        <value><span data-ttu-id="8e5cb-176"><see cref="T:System.Windows.Setter" /> 和 <see cref="T:System.Windows.EventSetter" /> 对象的集合。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-176">A collection of <see cref="T:System.Windows.Setter" /> and <see cref="T:System.Windows.EventSetter" /> objects.</span></span> <span data-ttu-id="8e5cb-177">默认值为空集合。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-177">The default is an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e5cb-178"><xref:System.Windows.Style.Setters%2A>对象的属性只能 <xref:System.Windows.Style> 包含可分配给的对象 <xref:System.Windows.SetterBase> 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-178">The <xref:System.Windows.Style.Setters%2A> property of a <xref:System.Windows.Style> object can consist only of objects assignable to <xref:System.Windows.SetterBase>.</span></span> <span data-ttu-id="8e5cb-179">将 <xref:System.Windows.SetterBase> 子对象添加到 <xref:System.Windows.Style> 对象会将该子级隐式添加到 <xref:System.Windows.SetterBaseCollection> 对象的 <xref:System.Windows.Style> 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-179">Adding a <xref:System.Windows.SetterBase> child to a <xref:System.Windows.Style> object implicitly adds it to the <xref:System.Windows.SetterBaseCollection> for the <xref:System.Windows.Style> object.</span></span>  
  
 <span data-ttu-id="8e5cb-180">的显式属性元素用法 <xref:System.Windows.Style.Setters%2A> 也相对较常见。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-180">An explicit property element usage  for <xref:System.Windows.Style.Setters%2A> is also relatively common.</span></span> <span data-ttu-id="8e5cb-181">这是一种标记样式决策，有时有助于区分 <xref:System.Windows.Style.Setters%2A> <xref:System.Windows.Style.Resources%2A> 复杂样式中的和 <xref:System.Windows.Style.Triggers%2A> 项。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-181">This is a markup style decision that can sometimes help distinguish <xref:System.Windows.Style.Setters%2A> from <xref:System.Windows.Style.Resources%2A> and <xref:System.Windows.Style.Triggers%2A> items in a complex style.</span></span> <span data-ttu-id="8e5cb-182">例如：</span><span class="sxs-lookup"><span data-stu-id="8e5cb-182">For example:</span></span>  
  
```  
<Style>  
  <Style.Setters>  
    <!--one or more SetterBase derived object elements here-->  
  </Style.Setters>  
</Style>  
```  
  
<a name="xamlPropertyElementUsage_Setters"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="8e5cb-183">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="8e5cb-183">XAML Property Element Usage</span></span>  
  
```  
<object>  
  oneOrMoreSetters  
</object>  
```  
  
<a name="xamlValues_Setters"></a>   
## <a name="xaml-values"></a><span data-ttu-id="8e5cb-184">XAML 值</span><span class="sxs-lookup"><span data-stu-id="8e5cb-184">XAML Values</span></span>  
 <span data-ttu-id="8e5cb-185">*oneOrMoreSetters*</span><span class="sxs-lookup"><span data-stu-id="8e5cb-185">*oneOrMoreSetters*</span></span>  
 <span data-ttu-id="8e5cb-186">一个或多个 <xref:System.Windows.Setter> 或 <xref:System.Windows.EventSetter> 对象。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-186">One or more <xref:System.Windows.Setter> or <xref:System.Windows.EventSetter> objects.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e5cb-187">下面的示例演示如何使用此属性。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-187">The following example shows how to use this property.</span></span>  
  
 [!code-csharp[listboxitemstyle#1](~/samples/snippets/csharp/VS_Snippets_Wpf/ListBoxItemStyle/CSharp/Pane1.xaml.cs#1)]
 [!code-vb[listboxitemstyle#1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ListBoxItemStyle/VisualBasic/Pane1.xaml.vb#1)]  
  
 <span data-ttu-id="8e5cb-188">将 <xref:System.Windows.SetterBase> 子对象添加到 <xref:System.Windows.Style> 对象会将该子级隐式添加到 <xref:System.Windows.SetterBaseCollection> 对象的 <xref:System.Windows.Style> 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-188">Adding a <xref:System.Windows.SetterBase> child to a <xref:System.Windows.Style> object implicitly adds it to the <xref:System.Windows.SetterBaseCollection> for the <xref:System.Windows.Style> object.</span></span> <span data-ttu-id="8e5cb-189">以下 <xref:System.Windows.EventSetter> 内容将隐式添加到 <xref:System.Windows.SetterBaseCollection> 样式的中：</span><span class="sxs-lookup"><span data-stu-id="8e5cb-189">The following <xref:System.Windows.EventSetter> is implicitly added to the <xref:System.Windows.SetterBaseCollection> of the style:</span></span>  
  
 [!code-xaml[eventovwsupport#XAML2](~/samples/snippets/csharp/VS_Snippets_Wpf/EventOvwSupport/CSharp/page2.xaml#xaml2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Setter" />
        <altmember cref="T:System.Windows.EventSetter" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010"><span data-ttu-id="8e5cb-190">样式设置和模板化示例简介</span><span class="sxs-lookup"><span data-stu-id="8e5cb-190">Introduction to Styling and Templating Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddChild">
      <MemberSignature Language="C#" Value="void IAddChild.AddChild (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddChild(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub AddChild (value As Object) Implements IAddChild.AddChild" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddChild(System::Object ^ value) = System::Windows::Markup::IAddChild::AddChild;" />
      <MemberSignature Language="F#" Value="abstract member System.Windows.Markup.IAddChild.AddChild : obj -&gt; unit&#xA;override this.System.Windows.Markup.IAddChild.AddChild : obj -&gt; unit" Usage="style.System.Windows.Markup.IAddChild.AddChild value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddChild(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="8e5cb-191">要添加的子对象。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-191">The child object to add.</span></span></param>
        <summary><span data-ttu-id="8e5cb-192">添加子对象。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-192">Adds a child object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e5cb-193">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-193">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8e5cb-194">它只能在 <xref:System.Windows.Style> 实例被强制转换为 <xref:System.Windows.Markup.IAddChild> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-194">It can be used only when the <xref:System.Windows.Style> instance is cast to an <xref:System.Windows.Markup.IAddChild> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IAddChild.AddText">
      <MemberSignature Language="C#" Value="void IAddChild.AddText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Markup.IAddChild.AddText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IAddChild#AddText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Sub AddText (text As String) Implements IAddChild.AddText" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Markup.IAddChild.AddText(System::String ^ text) = System::Windows::Markup::IAddChild::AddText;" />
      <MemberSignature Language="F#" Value="abstract member System.Windows.Markup.IAddChild.AddText : string -&gt; unit&#xA;override this.System.Windows.Markup.IAddChild.AddText : string -&gt; unit" Usage="style.System.Windows.Markup.IAddChild.AddText text" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IAddChild.AddText(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="8e5cb-195">要添加到对象的文本。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-195">The text to add to the object.</span></span></param>
        <summary><span data-ttu-id="8e5cb-196">将节点的文本内容添加到对象。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-196">Adds the text content of a node to the object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e5cb-197">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-197">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8e5cb-198">它只能在 <xref:System.Windows.Style> 实例被强制转换为 <xref:System.Windows.Markup.IAddChild> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-198">It can be used only when the <xref:System.Windows.Style> instance is cast to an <xref:System.Windows.Markup.IAddChild> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.INameScope.FindName">
      <MemberSignature Language="C#" Value="object INameScope.FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Windows.Markup.INameScope.FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#INameScope#FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function FindName (name As String) As Object Implements INameScope.FindName" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Windows.Markup.INameScope.FindName(System::String ^ name) = System::Windows::Markup::INameScope::FindName;" />
      <MemberSignature Language="F#" Value="abstract member System.Windows.Markup.INameScope.FindName : string -&gt; obj&#xA;override this.System.Windows.Markup.INameScope.FindName : string -&gt; obj" Usage="style.System.Windows.Markup.INameScope.FindName name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.INameScope.FindName(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8e5cb-199">发出请求的对象的名称标识符。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-199">The name identifier for the object being requested.</span></span></param>
        <summary><span data-ttu-id="8e5cb-200">返回具有提供的标识名称的对象。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-200">Returns an object that has the provided identifying name.</span></span></summary>
        <returns><span data-ttu-id="8e5cb-201">对象（如果找到）。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-201">The object, if found.</span></span> <span data-ttu-id="8e5cb-202">如果找不到该名称的对象，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-202">Returns <see langword="null" /> if no object of that name was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e5cb-203">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-203">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="8e5cb-204">它只能在 <xref:System.Windows.Style> 实例被强制转换为 <xref:System.Windows.Markup.INameScope> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-204">It can be used only when the <xref:System.Windows.Style> instance is cast to an <xref:System.Windows.Markup.INameScope> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberSignature Language="F#" Value="abstract member System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable : string -&gt; bool&#xA;override this.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable : string -&gt; bool" Usage="style.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable propertyName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="8e5cb-205">请求的环境属性的名称。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-205">The name of the requested ambient property.</span></span></param>
        <summary><span data-ttu-id="8e5cb-206">查询当前范围中是否有指定的环境属性。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-206">Queries whether a specified ambient property is available in the current scope.</span></span></summary>
        <returns><span data-ttu-id="8e5cb-207">如果有所请求的环境属性，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-207"><see langword="true" /> if the requested ambient property is available; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Markup.IQueryAmbient" />
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public Type TargetType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ TargetType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetType : Type with get, set" Usage="System.Windows.Style.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Windows.Markup.Ambient]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Windows.Markup.Ambient&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8e5cb-208">获取或设置此样式所针对的类型。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-208">Gets or sets the type for which this style is intended.</span></span></summary>
        <value><span data-ttu-id="8e5cb-209">此样式的目标类型。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-209">The target type for this style.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e5cb-210">可以对从或派生的任何元素设置样式 <xref:System.Windows.FrameworkElement> <xref:System.Windows.FrameworkContentElement> 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-210">You can set a style on any element that derives from <xref:System.Windows.FrameworkElement> or <xref:System.Windows.FrameworkContentElement>.</span></span> <span data-ttu-id="8e5cb-211">因此，目标类型可以是这些元素中的任何一个。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-211">Therefore, your target type can be any of those elements.</span></span> <span data-ttu-id="8e5cb-212">但是，如果您创建一个具有属性的样式 <xref:System.Windows.Style.TargetType%2A> ，并基于另一个同时定义属性的样式 <xref:System.Windows.Style.TargetType%2A> ，则该派生样式的目标类型必须与基样式的目标类型相同或派生。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-212">However, if you create a style with a <xref:System.Windows.Style.TargetType%2A> property and base it on another style that also defines a <xref:System.Windows.Style.TargetType%2A> property, the target type of the derived style must be the same as or be derived from the target type of the base style.</span></span>  
  
 <span data-ttu-id="8e5cb-213">如果未指定 <xref:System.Windows.Style.TargetType%2A> ，则必须为指定， `x:Key` 还应 <xref:System.Windows.Style> 使用类名称限定样式中的属性。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-213">If you do not specify a <xref:System.Windows.Style.TargetType%2A>, then you must specify an `x:Key` for your <xref:System.Windows.Style> and also qualify the properties in your style with a class name.</span></span>  
  
<a name="xamlAttributeUsage_TargetType"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="8e5cb-214">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="8e5cb-214">XAML Attribute Usage</span></span>  
  
```  
<object  TargetType="{x:Type typeName}"/>  
-or-  
<object  TargetType="typeName"/>  
```  
  
<a name="xamlValues_TargetType"></a>   
## <a name="xaml-values"></a><span data-ttu-id="8e5cb-215">XAML 值</span><span class="sxs-lookup"><span data-stu-id="8e5cb-215">XAML Values</span></span>  
 `{x:Type ...}`  
 <span data-ttu-id="8e5cb-216">[X:Type 标记扩展](/dotnet/framework/xaml-services/x-type-markup-extension)标记扩展用法。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-216">An [x:Type Markup Extension](/dotnet/framework/xaml-services/x-type-markup-extension) markup extension usage.</span></span>  
  
 <span data-ttu-id="8e5cb-217">*typeName*</span><span class="sxs-lookup"><span data-stu-id="8e5cb-217">*typeName*</span></span>  
 <span data-ttu-id="8e5cb-218">类的类型名称。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-218">The type name of the class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e5cb-219">下面的示例定义了将应用于元素的所有实例的样式 <xref:System.Windows.Controls.TextBlock> 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-219">The following example defines a style that will be applied to all instances of the <xref:System.Windows.Controls.TextBlock> element.</span></span>  
  
 [!code-xaml[PhotoStoreDemoStyled#1](~/samples/snippets/csharp/VS_Snippets_Wpf/PhotoStoreDemoStyled/CS/window1.xaml#1)]   
  
 <span data-ttu-id="8e5cb-220">如果将 <xref:System.Windows.Style.TargetType%2A> 属性设置为 <xref:System.Windows.Controls.TextBlock> 类型，而不将设置设置为 `x:Key` ，则将隐式设置 `x:Key` 为 `{x:Type TextBlock}` 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-220">Setting the <xref:System.Windows.Style.TargetType%2A> property to the <xref:System.Windows.Controls.TextBlock> type without setting an `x:Key` implicitly sets the `x:Key` to `{x:Type TextBlock}`.</span></span> <span data-ttu-id="8e5cb-221">这也意味着，如果给出的 <xref:System.Windows.Style> `x:Key` 值不是，则不会 `{x:Type TextBlock}` <xref:System.Windows.Style> 自动应用于所有 <xref:System.Windows.Controls.TextBlock> 元素。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-221">This also means that if you give the above <xref:System.Windows.Style> an `x:Key` value of anything other than `{x:Type TextBlock}`, the <xref:System.Windows.Style> would not be applied to all <xref:System.Windows.Controls.TextBlock> elements automatically.</span></span> <span data-ttu-id="8e5cb-222">相反，需要显式将样式应用到 <xref:System.Windows.Controls.TextBlock> 元素。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-222">Instead, you need to apply the style to the <xref:System.Windows.Controls.TextBlock> elements explicitly.</span></span>  
  
 <span data-ttu-id="8e5cb-223">许多 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 控件包含其他控件的组合 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] ，因此，创建适用于某个类型的所有控件的样式可能会产生很大的影响。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-223">Many [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls consist of a combination of other [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] controls, so creating a style that applies to all controls of a type can have broad impact.</span></span> <span data-ttu-id="8e5cb-224">例如，如果您创建一个样式，该样式面向 <xref:System.Windows.Controls.TextBox> 中的控件 <xref:System.Windows.Controls.Canvas> ，则该样式将应用于 <xref:System.Windows.Controls.TextBox> 画布中的所有控件，即使 <xref:System.Windows.Controls.TextBox> 是另一个控件（例如）的一部分 <xref:System.Windows.Controls.ComboBox> 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-224">For instance, if you create a style that targets the <xref:System.Windows.Controls.TextBox> controls in a <xref:System.Windows.Controls.Canvas>, the style is applied to all <xref:System.Windows.Controls.TextBox> controls in the canvas, even if the <xref:System.Windows.Controls.TextBox> is part of another control, such as a <xref:System.Windows.Controls.ComboBox>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010"><span data-ttu-id="8e5cb-225">样式设置和模板化示例简介</span><span class="sxs-lookup"><span data-stu-id="8e5cb-225">Introduction to Styling and Templating Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public System.Windows.TriggerCollection Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.TriggerCollection Triggers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Style.Triggers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Triggers As TriggerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::TriggerCollection ^ Triggers { System::Windows::TriggerCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Triggers : System.Windows.TriggerCollection" Usage="System.Windows.Style.Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.TriggerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8e5cb-226">获取基于指定条件应用属性值的 <see cref="T:System.Windows.TriggerBase" /> 对象的集合。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-226">Gets a collection of <see cref="T:System.Windows.TriggerBase" /> objects that apply property values based on specified conditions.</span></span></summary>
        <value><span data-ttu-id="8e5cb-227"><see cref="T:System.Windows.TriggerBase" /> 对象的集合。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-227">A collection of <see cref="T:System.Windows.TriggerBase" /> objects.</span></span> <span data-ttu-id="8e5cb-228">默认值为空集合。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-228">The default is an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8e5cb-229">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]样式设置和模板化模型使你能够在中指定触发器 <xref:System.Windows.Style> 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-229">The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] styling and templating model enables you to specify triggers within your <xref:System.Windows.Style>.</span></span> <span data-ttu-id="8e5cb-230">实质上，触发器是使你能够在某些情况下应用更改的对象，例如当某个属性值变为时 `true` ，或满足某个事件时)  (。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-230">Essentially, triggers are objects that enable you to apply changes when certain conditions (such as when a certain property value becomes `true`, or when an event occurs) are satisfied.</span></span>  
  
<a name="xamlPropertyElementUsage_Triggers"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="8e5cb-231">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="8e5cb-231">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Triggers>  
    oneOrMoreTriggers  
  </object.Triggers>  
</object>  
```  
  
<a name="xamlValues_Triggers"></a>   
## <a name="xaml-values"></a><span data-ttu-id="8e5cb-232">XAML 值</span><span class="sxs-lookup"><span data-stu-id="8e5cb-232">XAML Values</span></span>  
 <span data-ttu-id="8e5cb-233">*oneOrMoreTriggers*</span><span class="sxs-lookup"><span data-stu-id="8e5cb-233">*oneOrMoreTriggers*</span></span>  
 <span data-ttu-id="8e5cb-234">零个或多个是派生自的类的对象元素 <xref:System.Windows.TriggerBase> 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-234">Zero or more object elements that are classes deriving from <xref:System.Windows.TriggerBase>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8e5cb-235">下面的示例演示了一个名 <xref:System.Windows.Style> 为的可用于 <xref:System.Windows.Controls.Button> 控件的。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-235">The following example shows a named <xref:System.Windows.Style> available to <xref:System.Windows.Controls.Button> controls.</span></span> <span data-ttu-id="8e5cb-236"><xref:System.Windows.Style>定义一个 <xref:System.Windows.Trigger> 元素，该元素 <xref:System.Windows.Controls.Control.Foreground%2A> 在属性为时更改按钮的属性 <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-236">The <xref:System.Windows.Style> defines a <xref:System.Windows.Trigger> element that changes the <xref:System.Windows.Controls.Control.Foreground%2A> property of a button when the <xref:System.Windows.Controls.Primitives.ButtonBase.IsPressed%2A> property is `true`.</span></span>  
  
 [!code-xaml[BtnStyles#2](~/samples/snippets/csharp/VS_Snippets_Wpf/BtnStyles/CS/app.xaml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.DataTrigger" />
        <altmember cref="T:System.Windows.EventTrigger" />
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkID=160010"><span data-ttu-id="8e5cb-237">样式设置和模板化示例简介</span><span class="sxs-lookup"><span data-stu-id="8e5cb-237">Introduction to Styling and Templating Sample</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Style.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member UnregisterName : string -&gt; unit&#xA;override this.UnregisterName : string -&gt; unit" Usage="style.UnregisterName name" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.INameScope.UnregisterName(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="8e5cb-238">要删除的映射的名称。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-238">The name of the mapping to remove.</span></span></param>
        <summary><span data-ttu-id="8e5cb-239">从名称领域内移除名称-对象映射。</span><span class="sxs-lookup"><span data-stu-id="8e5cb-239">Removes a name-object mapping from the namescope.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
