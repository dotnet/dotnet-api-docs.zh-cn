<Type Name="Vector" FullName="System.Windows.Vector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="43bc18d4dd0ad187a017a51310af2a1428b39004" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="86987709" /></Metadata><TypeSignature Language="C#" Value="public struct Vector : IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit Vector extends System.ValueType implements class System.IFormattable" FrameworkAlternate="netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Vector" />
  <TypeSignature Language="VB.NET" Value="Public Structure Vector&#xA;Implements IFormattable" />
  <TypeSignature Language="C++ CLI" Value="public value class Vector : IFormattable" />
  <TypeSignature Language="F#" Value="type Vector = struct&#xA;    interface IFormattable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable sealed beforefieldinit Vector extends System.ValueType implements class System.IFormattable" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IFormattable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Windows.VectorConverter))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Windows.VectorConverter))&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.VectorValueSerializer))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.VectorValueSerializer))&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="6324a-101">表示二维空间中的位移。</span><span class="sxs-lookup"><span data-stu-id="6324a-101">Represents a displacement in 2-D space.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6324a-102"><xref:System.Windows.Point>表示固定位置，但 <xref:System.Windows.Vector> 表示方向和量 (例如，速度或加速度) 。</span><span class="sxs-lookup"><span data-stu-id="6324a-102">A <xref:System.Windows.Point> represents a fixed position, but a <xref:System.Windows.Vector> represents a direction and a magnitude (for example, velocity or acceleration).</span></span> <span data-ttu-id="6324a-103">因此，直线段的端点为点，但它们的区别在于矢量;即线段的方向和长度。</span><span class="sxs-lookup"><span data-stu-id="6324a-103">Thus, the endpoints of a line segment are points but their difference is a vector; that is, the direction and length of that line segment.</span></span>  
  
 <span data-ttu-id="6324a-104">在 XAML 中，和值之间的分隔符 <xref:System.Windows.Vector.X%2A> <xref:System.Windows.Vector.Y%2A> 可以是 <xref:System.Windows.Vector> 逗号或空格。</span><span class="sxs-lookup"><span data-stu-id="6324a-104">In XAML, the delimiter between the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> values of a <xref:System.Windows.Vector> can be either a comma or a space.</span></span>  
  
 <span data-ttu-id="6324a-105">某些区域性可能使用逗号字符作为小数分隔符，而不是句点字符。</span><span class="sxs-lookup"><span data-stu-id="6324a-105">Some cultures might use the comma character as the decimal delimiter instead of the period character.</span></span> <span data-ttu-id="6324a-106">在大多数 XAML 处理器实现中，用于固定区域性的 XAML 处理默认为 en-us，并期望句点是小数分隔符。</span><span class="sxs-lookup"><span data-stu-id="6324a-106">XAML processing for invariant culture defaults to en-US in most XAML processor implementations, and expects the period to be the decimal delimiter.</span></span> <span data-ttu-id="6324a-107">如果在 XAML 中指定了，则应避免使用逗号字符作为小数分隔符 <xref:System.Windows.Vector> ，因为这将与 <xref:System.Windows.Vector> 属性值到 <xref:System.Windows.Vector.X%2A> 和组件的字符串类型转换冲突 <xref:System.Windows.Vector.Y%2A> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-107">You should avoid using the comma character as the decimal delimiter if specifying a <xref:System.Windows.Vector> in XAML, because that will clash with the string type conversion of a <xref:System.Windows.Vector> attribute value into the <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> components.</span></span>  
  
<a name="xamlAttributeUsage_Vector"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="6324a-108">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="6324a-108">XAML Attribute Usage</span></span>  
  
```  
<object property="x,y"/>  
-or-  
<object property="x y"/>  
```  
  
<a name="xamlValues_Vector"></a>   
## <a name="xaml-values"></a><span data-ttu-id="6324a-109">XAML 值</span><span class="sxs-lookup"><span data-stu-id="6324a-109">XAML Values</span></span>  
 <span data-ttu-id="6324a-110">*x*</span><span class="sxs-lookup"><span data-stu-id="6324a-110">*x*</span></span>  
 <span data-ttu-id="6324a-111">向量的 X 分量。</span><span class="sxs-lookup"><span data-stu-id="6324a-111">The vector's X component.</span></span> <span data-ttu-id="6324a-112">有关更多信息，请参见 <xref:System.Windows.Vector.X%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="6324a-112">For more information, see the <xref:System.Windows.Vector.X%2A> property.</span></span>  
  
 <span data-ttu-id="6324a-113">*y*</span><span class="sxs-lookup"><span data-stu-id="6324a-113">*y*</span></span>  
 <span data-ttu-id="6324a-114">向量的 Y 分量。</span><span class="sxs-lookup"><span data-stu-id="6324a-114">The vector's Y component.</span></span> <span data-ttu-id="6324a-115">有关更多信息，请参见 <xref:System.Windows.Vector.Y%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="6324a-115">For more information, see the <xref:System.Windows.Vector.Y%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6324a-116">下面的示例演示如何添加两个 <xref:System.Windows.Vector> 结构。</span><span class="sxs-lookup"><span data-stu-id="6324a-116">The following example shows how to add two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorSample#10](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorSample/CSharp/Window1.xaml.cs#10)]
 [!code-vb[VectorSample#10](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorSample/visualbasic/window1.xaml.vb#10)]  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Windows.Vector.Add" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Vector (double x, double y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float64 x, float64 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.#ctor(System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (x As Double, y As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Vector(double x, double y);" />
      <MemberSignature Language="F#" Value="new System.Windows.Vector : double * double -&gt; System.Windows.Vector" Usage="new System.Windows.Vector (x, y)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="x" Type="System.Double" />
        <Parameter Name="y" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="6324a-117">新 <see cref="P:System.Windows.Vector.X" /> 的 <see cref="T:System.Windows.Vector" /> 偏移量。</span><span class="sxs-lookup"><span data-stu-id="6324a-117">The <see cref="P:System.Windows.Vector.X" />-offset of the new <see cref="T:System.Windows.Vector" />.</span></span></param>
        <param name="y"><span data-ttu-id="6324a-118">新 <see cref="P:System.Windows.Vector.Y" /> 的 <see cref="T:System.Windows.Vector" /> 偏移量。</span><span class="sxs-lookup"><span data-stu-id="6324a-118">The <see cref="P:System.Windows.Vector.Y" />-offset of the new <see cref="T:System.Windows.Vector" />.</span></span></param>
        <summary><span data-ttu-id="6324a-119">初始化 <see cref="T:System.Windows.Vector" /> 结构的新实例。</span><span class="sxs-lookup"><span data-stu-id="6324a-119">Initializes a new instance of the <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-120">下面的示例演示如何创建两个矢量并将它们一起添加。</span><span class="sxs-lookup"><span data-stu-id="6324a-120">The following example shows how to create two vectors and add them together.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddTwoVectorsExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addtwovectorsexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6324a-121">将向量添加到点或其他向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-121">Adds a vector to a point or to another vector.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Windows.Point Add (System.Windows.Vector vector, System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Point Add(valuetype System.Windows.Vector vector, valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (vector As Vector, point As Point) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point Add(System::Windows::Vector vector, System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="static member Add : System.Windows.Vector * System.Windows.Point -&gt; System.Windows.Point" Usage="System.Windows.Vector.Add (vector, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="6324a-122">指定点的平移量。</span><span class="sxs-lookup"><span data-stu-id="6324a-122">The amount to translate the specified point.</span></span></param>
        <param name="point"><span data-ttu-id="6324a-123">要平移的点。</span><span class="sxs-lookup"><span data-stu-id="6324a-123">The point to translate.</span></span></param>
        <summary><span data-ttu-id="6324a-124">按指定向量平移指定点，并返回结果点。</span><span class="sxs-lookup"><span data-stu-id="6324a-124">Translates the specified point by the specified vector and returns the resulting point.</span></span></summary>
        <returns><span data-ttu-id="6324a-125">按 <paramref name="point" /> 平移 <paramref name="vector" /> 的结果。</span><span class="sxs-lookup"><span data-stu-id="6324a-125">The result of translating <paramref name="point" /> by <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-126">下面的示例演示如何使用此方法将 <xref:System.Windows.Point> 结构添加到 <xref:System.Windows.Vector> 结构。</span><span class="sxs-lookup"><span data-stu-id="6324a-126">The following example shows how to use this method to add a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddPointAndVectorExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addpointandvectorexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Add (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Add(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Add(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Add : System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Add (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="6324a-127">要相加的第一个向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-127">The first vector to add.</span></span></param>
        <param name="vector2"><span data-ttu-id="6324a-128">要相加的第二个向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-128">The second vector to add.</span></span></param>
        <summary><span data-ttu-id="6324a-129">将两个向量相加并将结果以 <see cref="T:System.Windows.Vector" /> 结构的形式返回。</span><span class="sxs-lookup"><span data-stu-id="6324a-129">Adds two vectors and returns the result as a <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
        <returns><span data-ttu-id="6324a-130"><paramref name="vector1" /> 与 <paramref name="vector2" /> 的和。</span><span class="sxs-lookup"><span data-stu-id="6324a-130">The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-131">下面的示例演示如何使用此方法添加两个 <xref:System.Windows.Vector> 结构。</span><span class="sxs-lookup"><span data-stu-id="6324a-131">The following example shows how to use this method to add two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AddTwoVectorsExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#addtwovectorsexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="AngleBetween">
      <MemberSignature Language="C#" Value="public static double AngleBetween (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 AngleBetween(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AngleBetween (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double AngleBetween(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member AngleBetween : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="System.Windows.Vector.AngleBetween (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="6324a-132">要计算的第一个向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-132">The first vector to evaluate.</span></span></param>
        <param name="vector2"><span data-ttu-id="6324a-133">要计算的第二个向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-133">The second vector to evaluate.</span></span></param>
        <summary><span data-ttu-id="6324a-134">检索两个指定向量之间的角度（用度表示）。</span><span class="sxs-lookup"><span data-stu-id="6324a-134">Retrieves the angle, expressed in degrees, between the two specified vectors.</span></span></summary>
        <returns><span data-ttu-id="6324a-135"><paramref name="vector1" /> 和 <paramref name="vector2" /> 之间的角度（以度为单位）。</span><span class="sxs-lookup"><span data-stu-id="6324a-135">The angle, in degrees, between <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-136">下面的示例演示如何使用此方法来获取两个结构之间的角度 <xref:System.Windows.Vector> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-136">The following example shows how to use this method to get the angle between two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#AngleBetweenExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#anglebetweenexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CrossProduct">
      <MemberSignature Language="C#" Value="public static double CrossProduct (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 CrossProduct(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CrossProduct (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double CrossProduct(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member CrossProduct : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="System.Windows.Vector.CrossProduct (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="6324a-137">要计算的第一个向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-137">The first vector to evaluate.</span></span></param>
        <param name="vector2"><span data-ttu-id="6324a-138">要计算的第二个向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-138">The second vector to evaluate.</span></span></param>
        <summary><span data-ttu-id="6324a-139">计算两个向量的叉积。</span><span class="sxs-lookup"><span data-stu-id="6324a-139">Calculates the cross product of two vectors.</span></span></summary>
        <returns><span data-ttu-id="6324a-140"><paramref name="vector1" /> 和 <paramref name="vector2" /> 的叉乘积。</span><span class="sxs-lookup"><span data-stu-id="6324a-140">The cross product of <paramref name="vector1" /> and <paramref name="vector2" />.</span></span> <span data-ttu-id="6324a-141">可使用下面的公式计算叉乘积：</span><span class="sxs-lookup"><span data-stu-id="6324a-141">The following formula is used to calculate the cross product:</span></span> 
 <span data-ttu-id="6324a-142"><c>(Vector1.X \* Vector2.Y) - (Vector1.Y \* Vector2.X)</c></span><span class="sxs-lookup"><span data-stu-id="6324a-142"><c>(Vector1.X \* Vector2.Y) - (Vector1.Y \* Vector2.X)</c></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-143">下面的示例演示如何使用此方法来计算两个结构的叉积 <xref:System.Windows.Vector> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-143">The following example shows how to use this method to calculate the cross product of two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#CrossProductExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#crossproductexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Determinant">
      <MemberSignature Language="C#" Value="public static double Determinant (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Determinant(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Determinant (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Determinant(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Determinant : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="System.Windows.Vector.Determinant (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="6324a-144">要计算的第一个向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-144">The first vector to evaluate.</span></span></param>
        <param name="vector2"><span data-ttu-id="6324a-145">要计算的第二个向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-145">The second vector to evaluate.</span></span></param>
        <summary><span data-ttu-id="6324a-146">计算两个向量的行列式。</span><span class="sxs-lookup"><span data-stu-id="6324a-146">Calculates the determinant of two vectors.</span></span></summary>
        <returns><span data-ttu-id="6324a-147"><paramref name="vector1" /> 和 <paramref name="vector2" /> 的行列式。</span><span class="sxs-lookup"><span data-stu-id="6324a-147">The determinant of <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-148">下面的示例演示如何计算两个结构的行列式 <xref:System.Windows.Vector> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-148">The following example shows how to calculate the determinant of two <xref:System.Windows.Vector> structures.</span></span>  
  
 [!code-csharp[VectorExamples_snip#DeterminantExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#determinantexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Divide (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Divide(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (vector As Vector, scalar As Double) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Divide(System::Windows::Vector vector, double scalar);" />
      <MemberSignature Language="F#" Value="static member Divide : System.Windows.Vector * double -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Divide (vector, scalar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="6324a-149">作为除数的向量结构。</span><span class="sxs-lookup"><span data-stu-id="6324a-149">The vector structure to divide.</span></span></param>
        <param name="scalar"><span data-ttu-id="6324a-150"><paramref name="vector" /> 的被除量。</span><span class="sxs-lookup"><span data-stu-id="6324a-150">The amount by which <paramref name="vector" /> is divided.</span></span></param>
        <summary><span data-ttu-id="6324a-151">将指定向量除以指定标量，并将结果以 <see cref="T:System.Windows.Vector" /> 形式返回。</span><span class="sxs-lookup"><span data-stu-id="6324a-151">Divides the specified vector by the specified scalar and returns the result as a <see cref="T:System.Windows.Vector" />.</span></span></summary>
        <returns><span data-ttu-id="6324a-152"><paramref name="vector" /> 除以 <paramref name="scalar" /> 的结果。</span><span class="sxs-lookup"><span data-stu-id="6324a-152">The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-153">下面的示例演示如何使用此方法除以 <xref:System.Windows.Vector> 标量。</span><span class="sxs-lookup"><span data-stu-id="6324a-153">The following example shows how to use this method to divide a <xref:System.Windows.Vector> by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#DivideExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#divideexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6324a-154">比较两个向量是否相等。</span><span class="sxs-lookup"><span data-stu-id="6324a-154">Compares two vectors for equality.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6324a-155"><xref:System.Windows.Vector.X%2A> <xref:System.Windows.Vector.Y%2A> 使用值描述矢量的和属性 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-155">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="6324a-156">因为在 <xref:System.Double> 执行算术运算时，的值可能会丢失精度，因此，逻辑上相等的两个结构之间的比较 <xref:System.Double> 可能会失败。</span><span class="sxs-lookup"><span data-stu-id="6324a-156">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="vector.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o"><span data-ttu-id="6324a-157">要比较的向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-157">The vector to compare.</span></span></param>
        <summary><span data-ttu-id="6324a-158">确定指定的 <see cref="T:System.Object" /> 是不是 <see cref="T:System.Windows.Vector" /> 结构，如果是，则确定其是否与此向量具有相同的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值。</span><span class="sxs-lookup"><span data-stu-id="6324a-158">Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Vector" /> structure and, if it is, whether it has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector.</span></span></summary>
        <returns><span data-ttu-id="6324a-159">如果 <paramref name="o" /> 是 <see cref="T:System.Windows.Vector" /> 并具有与此向量相同的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6324a-159"><see langword="true" /> if <paramref name="o" /> is a <see cref="T:System.Windows.Vector" /> and has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6324a-160"><xref:System.Windows.Vector.X%2A> <xref:System.Windows.Vector.Y%2A> 使用值描述矢量的和属性 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-160">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="6324a-161">因为在 <xref:System.Double> 执行算术运算时，的值可能会丢失精度，因此，逻辑上相等的两个结构之间的比较 <xref:System.Windows.Vector> 可能会失败。</span><span class="sxs-lookup"><span data-stu-id="6324a-161">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6324a-162">下面的示例演示如何使用此方法检查 <xref:System.Windows.Vector> 和是否 <xref:System.Object> 相等。</span><span class="sxs-lookup"><span data-stu-id="6324a-162">The following example shows how to use this method to check whether a <xref:System.Windows.Vector> and an <xref:System.Object> are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.Vector value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.Vector value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (value As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Windows::Vector value);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Windows.Vector -&gt; bool" Usage="vector.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="6324a-163">要与此向量比较的向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-163">The vector to compare with this vector.</span></span></param>
        <summary><span data-ttu-id="6324a-164">比较两个向量是否相等。</span><span class="sxs-lookup"><span data-stu-id="6324a-164">Compares two vectors for equality.</span></span></summary>
        <returns><span data-ttu-id="6324a-165">如果 <paramref name="value" /> 具有与此向量相同的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6324a-165"><see langword="true" /> if <paramref name="value" /> has the same <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values as this vector; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6324a-166"><xref:System.Windows.Vector.X%2A> <xref:System.Windows.Vector.Y%2A> 使用值描述矢量的和属性 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-166">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="6324a-167">因为在 <xref:System.Double> 执行算术运算时，的值可能会丢失精度，因此，逻辑上相等的两个结构之间的比较 <xref:System.Windows.Vector> 可能会失败。</span><span class="sxs-lookup"><span data-stu-id="6324a-167">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6324a-168">下面的示例演示如何使用此方法检查两个结构是否 <xref:System.Windows.Vector> 相等。</span><span class="sxs-lookup"><span data-stu-id="6324a-168">The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public static bool Equals (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equals (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Equals(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Equals : System.Windows.Vector * System.Windows.Vector -&gt; bool" Usage="System.Windows.Vector.Equals (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="6324a-169">要比较的第一个向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-169">The first vector to compare.</span></span></param>
        <param name="vector2"><span data-ttu-id="6324a-170">要比较的第二个向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-170">The second vector to compare.</span></span></param>
        <summary><span data-ttu-id="6324a-171">比较两个指定向量是否相等。</span><span class="sxs-lookup"><span data-stu-id="6324a-171">Compares the two specified vectors for equality.</span></span></summary>
        <returns><span data-ttu-id="6324a-172">如果 <paramref name="vector1" /> 和 <paramref name="vector2" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 分量相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6324a-172"><see langword="true" /> if t he <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6324a-173"><xref:System.Windows.Vector.X%2A> <xref:System.Windows.Vector.Y%2A> 使用值描述矢量的和属性 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-173">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="6324a-174">因为在 <xref:System.Double> 执行算术运算时，的值可能会丢失精度，因此，逻辑上相等的两个结构之间的比较 <xref:System.Double> 可能会失败。</span><span class="sxs-lookup"><span data-stu-id="6324a-174">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Double> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6324a-175">下面的示例演示如何使用此方法检查两个结构是否 <xref:System.Windows.Vector> 相等。</span><span class="sxs-lookup"><span data-stu-id="6324a-175">The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#EqualsExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#equalsexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="vector.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6324a-176">返回此向量的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="6324a-176">Returns the hash code for this vector.</span></span></summary>
        <returns><span data-ttu-id="6324a-177">此实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="6324a-177">The hash code for this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-178">下面的示例演示如何获取的哈希代码 <xref:System.Windows.Vector> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-178">The following example shows how to get the hash code of a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#GetHashCodeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#gethashcodeexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public double Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Length { double get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : double" Usage="System.Windows.Vector.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6324a-179">获取此向量的长度。</span><span class="sxs-lookup"><span data-stu-id="6324a-179">Gets the length of this vector.</span></span></summary>
        <value><span data-ttu-id="6324a-180">此向量的长度。</span><span class="sxs-lookup"><span data-stu-id="6324a-180">The length of this vector.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6324a-181">向量的长度有时也称为大小。</span><span class="sxs-lookup"><span data-stu-id="6324a-181">The length of a vector is sometimes referred to as the magnitude.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6324a-182">下面的示例演示如何使用此属性来获取向量的长度。</span><span class="sxs-lookup"><span data-stu-id="6324a-182">The following example shows how use this property to get the length of a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#LengthExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#lengthexample)]
 [!code-vb[VectorExamples_snip#LengthExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#lengthexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LengthSquared">
      <MemberSignature Language="C#" Value="public double LengthSquared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 LengthSquared" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.LengthSquared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LengthSquared As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double LengthSquared { double get(); };" />
      <MemberSignature Language="F#" Value="member this.LengthSquared : double" Usage="System.Windows.Vector.LengthSquared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6324a-183">获取此向量的长度的平方。</span><span class="sxs-lookup"><span data-stu-id="6324a-183">Gets the square of the length of this vector.</span></span></summary>
        <value><span data-ttu-id="6324a-184">此向量的 <see cref="P:System.Windows.Vector.Length" /> 的平方。</span><span class="sxs-lookup"><span data-stu-id="6324a-184">The square of the <see cref="P:System.Windows.Vector.Length" /> of this vector.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6324a-185">矢量的长度有时也称为其量值。</span><span class="sxs-lookup"><span data-stu-id="6324a-185">The length of a vector is sometimes referred to as its magnitude.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6324a-186">下面的示例演示如何使用此属性来获取向量的长度的平方。</span><span class="sxs-lookup"><span data-stu-id="6324a-186">The following example shows how to use this property to get the square of the length of a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#LengthSquaredExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#lengthsquaredexample)]
 [!code-vb[VectorExamples_snip#LengthSquaredExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#lengthsquaredexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Multiply">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6324a-187">将指定向量与指定的 <see cref="T:System.Double" />、<see cref="T:System.Windows.Media.Matrix" /> 或 <see cref="T:System.Windows.Vector" /> 相乘并将结果以 <see cref="T:System.Windows.Vector" /> 或 <see cref="T:System.Double" /> 形式返回。</span><span class="sxs-lookup"><span data-stu-id="6324a-187">Multiplies the specified vector by the specified <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />, or <see cref="T:System.Windows.Vector" /> and returns the result as a <see cref="T:System.Windows.Vector" /> or <see cref="T:System.Double" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (double scalar, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(float64 scalar, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (scalar As Double, vector As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(double scalar, System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member Multiply : double * System.Windows.Vector -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Multiply (scalar, vector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Double" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="scalar"><span data-ttu-id="6324a-188">要乘以的标量。</span><span class="sxs-lookup"><span data-stu-id="6324a-188">The scalar to multiply.</span></span></param>
        <param name="vector"><span data-ttu-id="6324a-189">要相乘的向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-189">The vector to multiply.</span></span></param>
        <summary><span data-ttu-id="6324a-190">将指定标量与指定向量相乘，并返回结果 <see cref="T:System.Windows.Vector" />。</span><span class="sxs-lookup"><span data-stu-id="6324a-190">Multiplies the specified scalar by the specified vector and returns the resulting <see cref="T:System.Windows.Vector" />.</span></span></summary>
        <returns><span data-ttu-id="6324a-191"><paramref name="scalar" /> 与 <paramref name="vector" /> 相乘的结果。</span><span class="sxs-lookup"><span data-stu-id="6324a-191">The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-192">下面的示例演示如何使用此方法将标量乘以 <xref:System.Windows.Vector> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-192">The following example shows how to use this method to multiply a scalar by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByScalarExample2_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbyscalarexample2_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (vector As Vector, scalar As Double) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(System::Windows::Vector vector, double scalar);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Windows.Vector * double -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Multiply (vector, scalar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="6324a-193">要相乘的向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-193">The vector to multiply.</span></span></param>
        <param name="scalar"><span data-ttu-id="6324a-194">要乘以的标量。</span><span class="sxs-lookup"><span data-stu-id="6324a-194">The scalar to multiply.</span></span></param>
        <summary><span data-ttu-id="6324a-195">将指定向量与指定标量相乘，并返回结果 <see cref="T:System.Windows.Vector" />。</span><span class="sxs-lookup"><span data-stu-id="6324a-195">Multiplies the specified vector by the specified scalar and returns the resulting <see cref="T:System.Windows.Vector" />.</span></span></summary>
        <returns><span data-ttu-id="6324a-196"><paramref name="vector" /> 与 <paramref name="scalar" /> 相乘的结果。</span><span class="sxs-lookup"><span data-stu-id="6324a-196">The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-197">下面的示例演示如何使用此方法将与标量相乘 <xref:System.Windows.Vector> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-197">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByScalarExample1_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbyscalarexample1_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Multiply (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Multiply(valuetype System.Windows.Vector vector, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (vector As Vector, matrix As Matrix) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Multiply(System::Windows::Vector vector, System::Windows::Media::Matrix matrix);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Windows.Vector * System.Windows.Media.Matrix -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Multiply (vector, matrix)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="6324a-198">要变换的向量结构。</span><span class="sxs-lookup"><span data-stu-id="6324a-198">The vector structure to transform.</span></span></param>
        <param name="matrix"><span data-ttu-id="6324a-199">要应用于 <paramref name="vector" /> 的变换。</span><span class="sxs-lookup"><span data-stu-id="6324a-199">The transformation to apply to <paramref name="vector" />.</span></span></param>
        <summary><span data-ttu-id="6324a-200">使用指定的 <see cref="T:System.Windows.Media.Matrix" /> 变换指定向量的坐标空间。</span><span class="sxs-lookup"><span data-stu-id="6324a-200">Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</span></span></summary>
        <returns><span data-ttu-id="6324a-201">按 <paramref name="vector" /> 变换 <paramref name="matrix" /> 的结果。</span><span class="sxs-lookup"><span data-stu-id="6324a-201">The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-202">下面的示例演示如何使用此方法将与相乘 <xref:System.Windows.Vector> <xref:System.Windows.Media.Matrix> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-202">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Media.Matrix>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#MultiplyVectorByMatrixExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#multiplyvectorbymatrixexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static double Multiply (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Multiply(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Multiply(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Multiply : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="System.Windows.Vector.Multiply (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="6324a-203">要相乘的第一个向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-203">The first vector to multiply.</span></span></param>
        <param name="vector2"><span data-ttu-id="6324a-204">要相乘的第二个向量结构。</span><span class="sxs-lookup"><span data-stu-id="6324a-204">The second vector structure to multiply.</span></span></param>
        <summary><span data-ttu-id="6324a-205">计算两个指定向量的点积并将结果以 <see cref="T:System.Double" /> 形式返回。</span><span class="sxs-lookup"><span data-stu-id="6324a-205">Calculates the dot product of the two specified vectors and returns the result as a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="6324a-206">一个 <see cref="T:System.Double" />，其中包含 <paramref name="vector1" /> 和 <paramref name="vector2" /> 的标量点积，标量点积可通过下面的公式计算得出：</span><span class="sxs-lookup"><span data-stu-id="6324a-206">A <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:</span></span> 
 <span data-ttu-id="6324a-207"><c>(vector1.X \* vector2.X) + (vector1.Y \* vector2.Y)</c></span><span class="sxs-lookup"><span data-stu-id="6324a-207"><c>(vector1.X \* vector2.X) + (vector1.Y \* vector2.Y)</c></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-208">下面的示例演示如何使用此方法将与相乘 <xref:System.Windows.Vector> <xref:System.Windows.Vector> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-208">The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#GetDotProductExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#getdotproductexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public void Negate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Negate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Negate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Negate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Negate();" />
      <MemberSignature Language="F#" Value="member this.Negate : unit -&gt; unit" Usage="vector.Negate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6324a-209">对此向量求反。</span><span class="sxs-lookup"><span data-stu-id="6324a-209">Negates this vector.</span></span> <span data-ttu-id="6324a-210">向量的大小与以前相同，但现在的方向与以前相反。</span><span class="sxs-lookup"><span data-stu-id="6324a-210">The vector has the same magnitude as before, but its direction is now opposite.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-211">下面的示例演示如何使用此方法来否定矢量。</span><span class="sxs-lookup"><span data-stu-id="6324a-211">The following example shows how to use this method to negate a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#NegateExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#negateexample_csharp)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="Normalize">
      <MemberSignature Language="C#" Value="public void Normalize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Normalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Normalize" />
      <MemberSignature Language="VB.NET" Value="Public Sub Normalize ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Normalize();" />
      <MemberSignature Language="F#" Value="member this.Normalize : unit -&gt; unit" Usage="vector.Normalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6324a-212">规范化此向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-212">Normalizes this vector.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6324a-213">规范化向量保持其方向，但其 <xref:System.Windows.Vector.Length%2A> 变为1。</span><span class="sxs-lookup"><span data-stu-id="6324a-213">A normalized vector maintains its direction but its <xref:System.Windows.Vector.Length%2A> becomes 1.</span></span> <span data-ttu-id="6324a-214">生成的向量通常称为单位矢量。</span><span class="sxs-lookup"><span data-stu-id="6324a-214">The resulting vector is often called a unit vector.</span></span> <span data-ttu-id="6324a-215">使用向量除以向量，将向量标准化 <xref:System.Windows.Vector.Length%2A> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-215">A vector is normalized by dividing the vector by its own <xref:System.Windows.Vector.Length%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6324a-216">下面的示例演示如何使用此方法规范化向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-216">The following example shows how to use this method to normalize a vector.</span></span>  
  
 [!code-csharp[VectorExamples_snip#NormalizeExample_csharp](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#normalizeexample_csharp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Addition">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6324a-217">将向量添加到点或其他向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-217">Adds a vector to a point or to another vector.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Windows.Point operator + (System.Windows.Vector vector, System.Windows.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Addition(valuetype System.Windows.Vector vector, valuetype System.Windows.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (vector As Vector, point As Point) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Point operator +(System::Windows::Vector vector, System::Windows::Point point);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Windows.Vector * System.Windows.Point -&gt; System.Windows.Point" Usage="vector + point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="point" Type="System.Windows.Point" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="6324a-218">用于平移 <paramref name="point" /> 的向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-218">The vector used to translate <paramref name="point" />.</span></span></param>
        <param name="point"><span data-ttu-id="6324a-219">要平移的点。</span><span class="sxs-lookup"><span data-stu-id="6324a-219">The point to translate.</span></span></param>
        <summary><span data-ttu-id="6324a-220">按指定向量平移点，并返回结果点。</span><span class="sxs-lookup"><span data-stu-id="6324a-220">Translates a point by the specified vector and returns the resulting point.</span></span></summary>
        <returns><span data-ttu-id="6324a-221">按 <paramref name="point" /> 平移 <paramref name="vector" /> 的结果。</span><span class="sxs-lookup"><span data-stu-id="6324a-221">The result of translating <paramref name="point" /> by <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-222">下面的示例演示如何使用此运算符 (+) 将 <xref:System.Windows.Point> 结构转换为 <xref:System.Windows.Vector> 结构。</span><span class="sxs-lookup"><span data-stu-id="6324a-222">The following example shows how to use this operator (+) to translate a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedadditionoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedadditionoperatorexample2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator + (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Addition(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator + (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator +(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member ( + ) : System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Vector" Usage="vector1 + vector2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="6324a-223">要相加的第一个向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-223">The first vector to add.</span></span></param>
        <param name="vector2"><span data-ttu-id="6324a-224">要相加的第二个向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-224">The second vector to add.</span></span></param>
        <summary><span data-ttu-id="6324a-225">将两个向量相加并将结果以向量形式返回。</span><span class="sxs-lookup"><span data-stu-id="6324a-225">Adds two vectors and returns the result as a vector.</span></span></summary>
        <returns><span data-ttu-id="6324a-226"><paramref name="vector1" /> 与 <paramref name="vector2" /> 的和。</span><span class="sxs-lookup"><span data-stu-id="6324a-226">The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-227">下面的示例演示如何使用此运算符 (+) 来添加两个 <xref:System.Windows.Vector> 结构并返回 <xref:System.Windows.Vector> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-227">The following example shows how to use this operator (+) to add two <xref:System.Windows.Vector> structures and return a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedadditionoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedadditionoperatorexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Add" />
      </Docs>
    </Member>
    <Member MemberName="op_Division">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator / (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Division(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator / (vector As Vector, scalar As Double) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator /(System::Windows::Vector vector, double scalar);" />
      <MemberSignature Language="F#" Value="static member ( / ) : System.Windows.Vector * double -&gt; System.Windows.Vector" Usage="vector / scalar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="6324a-228">作为除数的向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-228">The vector to divide.</span></span></param>
        <param name="scalar"><span data-ttu-id="6324a-229"><paramref name="vector" /> 将除以的标量。</span><span class="sxs-lookup"><span data-stu-id="6324a-229">The scalar by which <paramref name="vector" /> will be divided.</span></span></param>
        <summary><span data-ttu-id="6324a-230">将指定向量除以指定标量，并返回结果向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-230">Divides the specified vector by the specified scalar and returns the resulting vector.</span></span></summary>
        <returns><span data-ttu-id="6324a-231"><paramref name="vector" /> 除以 <paramref name="scalar" /> 的结果。</span><span class="sxs-lookup"><span data-stu-id="6324a-231">The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-232">下面的示例演示如何使用此运算符 (/) 将 <xref:System.Windows.Vector> 结构除以标量。</span><span class="sxs-lookup"><span data-stu-id="6324a-232">The following example shows how to use this operator (/) to divide a <xref:System.Windows.Vector> structure by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedDivisionOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadeddivisionoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedDivisionOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadeddivisionoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Vector * System.Windows.Vector -&gt; bool" Usage="vector1 = vector2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="6324a-233">要比较的第一个向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-233">The first vector to compare.</span></span></param>
        <param name="vector2"><span data-ttu-id="6324a-234">要比较的第二个向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-234">The second vector to compare.</span></span></param>
        <summary><span data-ttu-id="6324a-235">比较两个向量是否相等。</span><span class="sxs-lookup"><span data-stu-id="6324a-235">Compares two vectors for equality.</span></span></summary>
        <returns><span data-ttu-id="6324a-236">如果 <paramref name="vector1" /> 和 <paramref name="vector2" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 分量相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6324a-236"><see langword="true" /> if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6324a-237"><xref:System.Windows.Vector.X%2A> <xref:System.Windows.Vector.Y%2A> 使用值描述矢量的和属性 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-237">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="6324a-238">因为在 <xref:System.Double> 执行算术运算时，的值可能会丢失精度，因此，逻辑上相等的两个结构之间的比较 <xref:System.Windows.Vector> 可能会失败。</span><span class="sxs-lookup"><span data-stu-id="6324a-238">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6324a-239">下面的示例演示如何使用此运算符 (= =) 检查两个结构是否 <xref:System.Windows.Vector> 相等。</span><span class="sxs-lookup"><span data-stu-id="6324a-239">The following example shows how to use this operator (==) to check whether two <xref:System.Windows.Vector> structures are equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedequalityoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedEqualityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Windows.Vector.Equals" />
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Explicit">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6324a-240">将向量转换为 <see cref="T:System.Windows.Size" /> 或 <see cref="T:System.Windows.Point" />。</span><span class="sxs-lookup"><span data-stu-id="6324a-240">Converts a vector into a <see cref="T:System.Windows.Size" /> or a <see cref="T:System.Windows.Point" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Windows.Point (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Point op_Explicit(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (vector As Vector) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Windows::Point(System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Windows.Vector -&gt; System.Windows.Point" Usage="System.Windows.Vector.op_Explicit vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="6324a-241">要变换的向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-241">The vector to convert.</span></span></param>
        <summary><span data-ttu-id="6324a-242">使用此向量的 <see cref="T:System.Windows.Point" /> 和 <see cref="P:System.Windows.Vector.X" /> 值创建 <see cref="P:System.Windows.Vector.Y" />。</span><span class="sxs-lookup"><span data-stu-id="6324a-242">Creates a <see cref="T:System.Windows.Point" /> with the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this vector.</span></span></summary>
        <returns><span data-ttu-id="6324a-243">一个点，其 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 坐标值与 <paramref name="vector" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 偏移值相等。</span><span class="sxs-lookup"><span data-stu-id="6324a-243">A point with <see cref="P:System.Windows.Point.X" />- and <see cref="P:System.Windows.Point.Y" />-coordinate values equal to the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> offset values of <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-244">下面的示例演示如何将转换为 <xref:System.Windows.Vector> <xref:System.Windows.Point> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-244">The following example shows how to convert a <xref:System.Windows.Vector> into a <xref:System.Windows.Point>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedExplicitOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedexplicitoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedExplicitOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedexplicitoperatorexample2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Explicit">
      <MemberSignature Language="C#" Value="public static explicit operator System.Windows.Size (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Size op_Explicit(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size" />
      <MemberSignature Language="VB.NET" Value="Public Shared Narrowing Operator CType (vector As Vector) As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static explicit operator System::Windows::Size(System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member op_Explicit : System.Windows.Vector -&gt; System.Windows.Size" Usage="System.Windows.Vector.op_Explicit vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="6324a-245">要变换的向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-245">The vector to convert.</span></span></param>
        <summary><span data-ttu-id="6324a-246">根据此向量的偏移量创建 <see cref="T:System.Windows.Size" />。</span><span class="sxs-lookup"><span data-stu-id="6324a-246">Creates a <see cref="T:System.Windows.Size" /> from the offsets of this vector.</span></span></summary>
        <returns><span data-ttu-id="6324a-247">一个 <see cref="T:System.Windows.Size" />，其 <see cref="P:System.Windows.Size.Width" /> 等于此向量的 <see cref="P:System.Windows.Vector.X" /> 属性的绝对值，其 <see cref="P:System.Windows.Size.Height" /> 等于此向量的 <see cref="P:System.Windows.Vector.Y" /> 属性的绝对值。</span><span class="sxs-lookup"><span data-stu-id="6324a-247">A <see cref="T:System.Windows.Size" /> with a <see cref="P:System.Windows.Size.Width" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.X" /> property and a <see cref="P:System.Windows.Size.Height" /> equal to the absolute value of this vector's <see cref="P:System.Windows.Vector.Y" /> property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-248">下面的示例演示如何将显式转换为 <xref:System.Windows.Vector> <xref:System.Windows.Size> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-248">The following example shows how to explicitly convert a <xref:System.Windows.Vector> into a <xref:System.Windows.Size>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedExplicitOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedexplicitoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedExplicitOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedexplicitoperatorexample1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (vector1 As Vector, vector2 As Vector) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Vector * System.Windows.Vector -&gt; bool" Usage="System.Windows.Vector.op_Inequality (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="6324a-249">要比较的第一个向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-249">The first vector to compare.</span></span></param>
        <param name="vector2"><span data-ttu-id="6324a-250">要比较的第二个向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-250">The second vector to compare.</span></span></param>
        <summary><span data-ttu-id="6324a-251">比较两个向量是否不相等。</span><span class="sxs-lookup"><span data-stu-id="6324a-251">Compares two vectors for inequality.</span></span></summary>
        <returns><span data-ttu-id="6324a-252">如果 <paramref name="vector1" /> 和 <paramref name="vector2" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 分量不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6324a-252"><see langword="true" /> if the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are different; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="6324a-253"><xref:System.Windows.Vector.X%2A> <xref:System.Windows.Vector.Y%2A> 使用值描述矢量的和属性 <xref:System.Double> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-253">A vector's <xref:System.Windows.Vector.X%2A> and <xref:System.Windows.Vector.Y%2A> properties are described using <xref:System.Double> values.</span></span> <span data-ttu-id="6324a-254">因为在 <xref:System.Double> 执行算术运算时，的值可能会丢失精度，因此，逻辑上相等的两个结构之间的比较 <xref:System.Windows.Vector> 可能会失败。</span><span class="sxs-lookup"><span data-stu-id="6324a-254">Because the value of a <xref:System.Double> can lose precision when arithmetic operations are performed on it, a comparison between two <xref:System.Windows.Vector> structures that are logically equal might fail.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="6324a-255">下面的示例演示如何使用此运算符 (！ =) 检查两个结构是否 <xref:System.Windows.Vector> 不相等。</span><span class="sxs-lookup"><span data-stu-id="6324a-255">The following example shows how to use this operator (!=) to check whether two <xref:System.Windows.Vector> structures are not equal.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedinequalityoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedInequalityOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedinequalityoperatorexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="op_Multiply">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6324a-256">将指定 <see cref="T:System.Windows.Vector" /> 与指定 <see cref="T:System.Double" />、<see cref="T:System.Windows.Media.Matrix" /> 或 <see cref="T:System.Windows.Vector" /> 相乘并返回结果。</span><span class="sxs-lookup"><span data-stu-id="6324a-256">Multiplies the specified <see cref="T:System.Windows.Vector" /> by the specified <see cref="T:System.Double" />, <see cref="T:System.Windows.Media.Matrix" />, or <see cref="T:System.Windows.Vector" /> and returns the result.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (double scalar, System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(float64 scalar, valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (scalar As Double, vector As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(double scalar, System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member ( * ) : double * System.Windows.Vector -&gt; System.Windows.Vector" Usage="scalar * vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scalar" Type="System.Double" />
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="scalar"><span data-ttu-id="6324a-257">要乘以的标量。</span><span class="sxs-lookup"><span data-stu-id="6324a-257">The scalar to multiply.</span></span></param>
        <param name="vector"><span data-ttu-id="6324a-258">要相乘的向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-258">The vector to multiply.</span></span></param>
        <summary><span data-ttu-id="6324a-259">将指定标量与指定向量相乘，并返回结果向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-259">Multiplies the specified scalar by the specified vector and returns the resulting vector.</span></span></summary>
        <returns><span data-ttu-id="6324a-260"><paramref name="scalar" /> 与 <paramref name="vector" /> 相乘的结果。</span><span class="sxs-lookup"><span data-stu-id="6324a-260">The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-261">下面的示例演示如何使用此运算符 ( \* ) 将标量乘以 <xref:System.Windows.Vector> 结构。</span><span class="sxs-lookup"><span data-stu-id="6324a-261">The following example shows how to use this operator (\*) to multiply a scalar by a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplicationoperatorexample2)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplicationoperatorexample2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (System.Windows.Vector vector, double scalar);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(valuetype System.Windows.Vector vector, float64 scalar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (vector As Vector, scalar As Double) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(System::Windows::Vector vector, double scalar);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Windows.Vector * double -&gt; System.Windows.Vector" Usage="vector * scalar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="scalar" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="6324a-262">要相乘的向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-262">The vector to multiply.</span></span></param>
        <param name="scalar"><span data-ttu-id="6324a-263">要乘以的标量。</span><span class="sxs-lookup"><span data-stu-id="6324a-263">The scalar to multiply.</span></span></param>
        <summary><span data-ttu-id="6324a-264">将指定向量与指定标量相乘，并返回结果向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-264">Multiplies the specified vector by the specified scalar and returns the resulting vector.</span></span></summary>
        <returns><span data-ttu-id="6324a-265"><paramref name="vector" /> 与 <paramref name="scalar" /> 相乘的结果。</span><span class="sxs-lookup"><span data-stu-id="6324a-265">The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-266">下面的示例演示如何使用此运算符 ( \* ) 将 <xref:System.Windows.Vector> 结构与标量相乘。</span><span class="sxs-lookup"><span data-stu-id="6324a-266">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a scalar.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplicationoperatorexample1)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplicationoperatorexample1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator * (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Multiply(valuetype System.Windows.Vector vector, valuetype System.Windows.Media.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (vector As Vector, matrix As Matrix) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator *(System::Windows::Vector vector, System::Windows::Media::Matrix matrix);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Windows.Vector * System.Windows.Media.Matrix -&gt; System.Windows.Vector" Usage="vector * matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
        <Parameter Name="matrix" Type="System.Windows.Media.Matrix" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="6324a-267">要转换的向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-267">The vector to transform.</span></span></param>
        <param name="matrix"><span data-ttu-id="6324a-268">要应用于 <paramref name="vector" /> 的变换。</span><span class="sxs-lookup"><span data-stu-id="6324a-268">The transformation to apply to <paramref name="vector" />.</span></span></param>
        <summary><span data-ttu-id="6324a-269">使用指定的 <see cref="T:System.Windows.Media.Matrix" /> 变换指定向量的坐标空间。</span><span class="sxs-lookup"><span data-stu-id="6324a-269">Transforms the coordinate space of the specified vector using the specified <see cref="T:System.Windows.Media.Matrix" />.</span></span></summary>
        <returns><span data-ttu-id="6324a-270">按 <paramref name="vector" /> 变换 <paramref name="matrix" /> 的结果。</span><span class="sxs-lookup"><span data-stu-id="6324a-270">The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-271">下面的示例演示如何使用此运算符 ( \* ) 将结构与结构相乘 <xref:System.Windows.Vector> <xref:System.Windows.Media.Matrix> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-271">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Media.Matrix> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedmultiplyvectorbymatrixoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedmultiplyvectorbymatrixoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static double operator * (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname float64 op_Multiply(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator * (vector1 As Vector, vector2 As Vector) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double operator *(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member ( * ) : System.Windows.Vector * System.Windows.Vector -&gt; double" Usage="vector1 * vector2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="6324a-272">要相乘的第一个向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-272">The first vector to multiply.</span></span></param>
        <param name="vector2"><span data-ttu-id="6324a-273">要相乘的第二个向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-273">The second vector to multiply.</span></span></param>
        <summary><span data-ttu-id="6324a-274">计算两个指定向量结构的点积并将结果以 <see cref="T:System.Double" /> 形式返回。</span><span class="sxs-lookup"><span data-stu-id="6324a-274">Calculates the dot product of the two specified vector structures and returns the result as a <see cref="T:System.Double" />.</span></span></summary>
        <returns><span data-ttu-id="6324a-275">返回一个 <see cref="T:System.Double" />，其中包含 <paramref name="vector1" /> 和 <paramref name="vector2" /> 的标量点积，标量点积可通过下面的公式计算得出：</span><span class="sxs-lookup"><span data-stu-id="6324a-275">Returns a <see cref="T:System.Double" /> containing the scalar dot product of <paramref name="vector1" /> and <paramref name="vector2" />, which is calculated using the following formula:</span></span> 
 <span data-ttu-id="6324a-276"><c>vector1.X \* vector2.X + vector1.Y \* vector2.Y</c></span><span class="sxs-lookup"><span data-stu-id="6324a-276"><c>vector1.X \* vector2.X + vector1.Y \* vector2.Y</c></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-277">下面的示例演示如何使用此运算符 ( \* ) 将结构与进行相乘 <xref:System.Windows.Vector> <xref:System.Windows.Vector> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-277">The following example shows how to use this operator (\*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedoperatorgetdotproductexample)]
 [!code-vb[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedoperatorgetdotproductexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_Subtraction">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator - (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_Subtraction(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator -(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member ( - ) : System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Vector" Usage="vector1 - vector2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="6324a-278">从其中减去 <paramref name="vector2" /> 的向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-278">The vector from which <paramref name="vector2" /> is subtracted.</span></span></param>
        <param name="vector2"><span data-ttu-id="6324a-279">要从 <paramref name="vector1" /> 中减去的向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-279">The vector to subtract from <paramref name="vector1" />.</span></span></param>
        <summary><span data-ttu-id="6324a-280">从一个指定向量中减去另一个指定向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-280">Subtracts one specified vector from another.</span></span></summary>
        <returns><span data-ttu-id="6324a-281"><paramref name="vector1" /> 和 <paramref name="vector2" /> 之间的差值。</span><span class="sxs-lookup"><span data-stu-id="6324a-281">The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-282">下面的示例演示如何使用此运算符 ( ) <xref:System.Windows.Vector> 从结构中减去结构 <xref:System.Windows.Vector> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-282">The following example shows how to use this operator (-) to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadedsubtractionoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadedsubtractionoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="op_UnaryNegation">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector operator - (System.Windows.Vector vector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype System.Windows.Vector op_UnaryNegation(valuetype System.Windows.Vector vector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator - (vector As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector operator -(System::Windows::Vector vector);" />
      <MemberSignature Language="F#" Value="static member ( ~- ) : System.Windows.Vector -&gt; System.Windows.Vector" Usage="- vector" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector"><span data-ttu-id="6324a-283">要求反的向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-283">The vector to negate.</span></span></param>
        <summary><span data-ttu-id="6324a-284">对指定向量求反。</span><span class="sxs-lookup"><span data-stu-id="6324a-284">Negates the specified vector.</span></span></summary>
        <returns><span data-ttu-id="6324a-285">一个向量，其 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值与 <paramref name="vector" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值相反。</span><span class="sxs-lookup"><span data-stu-id="6324a-285">A vector with <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values opposite of the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of <paramref name="vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-286">下面的示例演示如何使用此否定运算符来否定 <xref:System.Windows.Vector> 结构。</span><span class="sxs-lookup"><span data-stu-id="6324a-286">The following example shows how to use this negation operator to negate a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#OverloadedNegationOperatorExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#overloadednegationoperatorexample)]
 [!code-vb[VectorExamples_snip#OverloadedNegationOperatorExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#overloadednegationoperatorexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.Negate" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Parse (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Parse(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (source As String) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Parse(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Parse source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="6324a-287">向量的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="6324a-287">The string representation of the vector.</span></span></param>
        <summary><span data-ttu-id="6324a-288">将向量的字符串表示形式转换为等效的 <see cref="T:System.Windows.Vector" /> 结构。</span><span class="sxs-lookup"><span data-stu-id="6324a-288">Converts a string representation of a vector into the equivalent <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
        <returns><span data-ttu-id="6324a-289">等效的 <see cref="T:System.Windows.Vector" /> 结构。</span><span class="sxs-lookup"><span data-stu-id="6324a-289">The equivalent <see cref="T:System.Windows.Vector" /> structure.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-290">下面的示例演示如何使用此方法将矢量的字符串表示形式转换为 <xref:System.Windows.Vector> 结构。</span><span class="sxs-lookup"><span data-stu-id="6324a-290">The following example shows how to use this method to convert a string representation of a vector into a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#ParseExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#parseexample)]
 [!code-vb[VectorExamples_snip#ParseExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#parseexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Windows.Vector Subtract (System.Windows.Vector vector1, System.Windows.Vector vector2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.Vector Subtract(valuetype System.Windows.Vector vector1, valuetype System.Windows.Vector vector2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (vector1 As Vector, vector2 As Vector) As Vector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Vector Subtract(System::Windows::Vector vector1, System::Windows::Vector vector2);" />
      <MemberSignature Language="F#" Value="static member Subtract : System.Windows.Vector * System.Windows.Vector -&gt; System.Windows.Vector" Usage="System.Windows.Vector.Subtract (vector1, vector2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Vector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector1" Type="System.Windows.Vector" />
        <Parameter Name="vector2" Type="System.Windows.Vector" />
      </Parameters>
      <Docs>
        <param name="vector1"><span data-ttu-id="6324a-291">从其中减去 <paramref name="vector2" /> 的向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-291">The vector from which <paramref name="vector2" /> is subtracted.</span></span></param>
        <param name="vector2"><span data-ttu-id="6324a-292">要从 <paramref name="vector1" /> 中减去的向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-292">The vector to subtract from <paramref name="vector1" />.</span></span></param>
        <summary><span data-ttu-id="6324a-293">从一个指定向量中减去另一个指定向量。</span><span class="sxs-lookup"><span data-stu-id="6324a-293">Subtracts the specified vector from another specified vector.</span></span></summary>
        <returns><span data-ttu-id="6324a-294"><paramref name="vector1" /> 和 <paramref name="vector2" /> 之间的差值。</span><span class="sxs-lookup"><span data-stu-id="6324a-294">The difference between <paramref name="vector1" /> and <paramref name="vector2" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-295">下面的示例演示如何使用此方法 <xref:System.Windows.Vector> 从结构中减去结构 <xref:System.Windows.Vector> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-295">The following example shows how to use this method to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.</span></span>  
  
 [!code-csharp[VectorExamples_snip#SubtractExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#subtractexample)]
 [!code-vb[VectorExamples_snip#SubtractExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#subtractexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)" />
      </Docs>
    </Member>
    <Member MemberName="System.IFormattable.ToString">
      <MemberSignature Language="C#" Value="string IFormattable.ToString (string format, IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.IFormattable.ToString(string format, class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Function ToString (format As String, provider As IFormatProvider) As String Implements IFormattable.ToString" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.IFormattable.ToString(System::String ^ format, IFormatProvider ^ provider) = IFormattable::ToString;" />
      <MemberSignature Language="F#" Value="abstract member System.IFormattable.ToString : string * IFormatProvider -&gt; string&#xA;override this.System.IFormattable.ToString : string * IFormatProvider -&gt; string" Usage="vector.System.IFormattable.ToString (format, provider)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormattable.ToString(System.String,System.IFormatProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format"><span data-ttu-id="6324a-296">指定要使用的格式的字符串。</span><span class="sxs-lookup"><span data-stu-id="6324a-296">The string specifying the format to use.</span></span>  
  
<span data-ttu-id="6324a-297">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6324a-297">-or-</span></span> 
 <span data-ttu-id="6324a-298"><see langword="null" />，表示使用为 <see cref="T:System.IFormattable" /> 实现的类型定义的默认格式。</span><span class="sxs-lookup"><span data-stu-id="6324a-298"><see langword="null" /> to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</span></span></param>
        <param name="provider"><span data-ttu-id="6324a-299">用于格式化该值的 <see langword="IFormatProvider" />。</span><span class="sxs-lookup"><span data-stu-id="6324a-299">The <see langword="IFormatProvider" /> to use to format the value.</span></span>  
  
<span data-ttu-id="6324a-300">- 或 -</span><span class="sxs-lookup"><span data-stu-id="6324a-300">-or-</span></span> 
 <span data-ttu-id="6324a-301">从操作系统的当前区域设置中获取数字格式信息的 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="6324a-301"><see langword="null" /> to obtain the numeric format information from the current locale setting of the operating system.</span></span></param>
        <summary><span data-ttu-id="6324a-302">此成员支持 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 基础结构，但不能在代码中直接使用。</span><span class="sxs-lookup"><span data-stu-id="6324a-302">This member supports the [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] infrastructure and is not intended to be used directly from your code.</span></span> <span data-ttu-id="6324a-303">有关此成员的说明，请参见 <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />。</span><span class="sxs-lookup"><span data-stu-id="6324a-303">For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</span></span></summary>
        <returns><span data-ttu-id="6324a-304">一个字符串，包含采用指定格式的当前实例的值。</span><span class="sxs-lookup"><span data-stu-id="6324a-304">A string containing the value of the current instance in the specified format.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="6324a-305">返回此 <see cref="T:System.Windows.Vector" /> 结构的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="6324a-305">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="vector.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6324a-306">返回此 <see cref="T:System.Windows.Vector" /> 结构的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="6324a-306">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure.</span></span></summary>
        <returns><span data-ttu-id="6324a-307">一个字符串，表示此 <see cref="P:System.Windows.Vector.X" /> 的 <see cref="P:System.Windows.Vector.Y" /> 和 <see cref="T:System.Windows.Vector" /> 值。</span><span class="sxs-lookup"><span data-stu-id="6324a-307">A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-308">下面的示例演示如何使用此方法获取的字符串表示形式 <xref:System.Windows.Vector> 。</span><span class="sxs-lookup"><span data-stu-id="6324a-308">The following example shows how to use this method to get a string representation of a <xref:System.Windows.Vector>.</span></span>  
  
 [!code-csharp[VectorExamples_snip#ToStringExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#tostringexample)]
 [!code-vb[VectorExamples_snip#ToStringExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#tostringexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Vector.ToString(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString (provider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="override this.ToString : IFormatProvider -&gt; string" Usage="vector.ToString provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider"><span data-ttu-id="6324a-309">特定于区域的格式设置信息。</span><span class="sxs-lookup"><span data-stu-id="6324a-309">The culture-specific formatting information.</span></span></param>
        <summary><span data-ttu-id="6324a-310">使用指定的格式设置信息返回此 <see cref="T:System.Windows.Vector" /> 结构的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="6324a-310">Returns the string representation of this <see cref="T:System.Windows.Vector" /> structure with the specified formatting information.</span></span></summary>
        <returns><span data-ttu-id="6324a-311">一个字符串，表示此 <see cref="P:System.Windows.Vector.X" /> 的 <see cref="P:System.Windows.Vector.Y" /> 和 <see cref="T:System.Windows.Vector" /> 值。</span><span class="sxs-lookup"><span data-stu-id="6324a-311">A string that represents the <see cref="P:System.Windows.Vector.X" /> and <see cref="P:System.Windows.Vector.Y" /> values of this <see cref="T:System.Windows.Vector" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.String" />
      </Docs>
    </Member>
    <Member MemberName="X">
      <MemberSignature Language="C#" Value="public double X { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 X" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.X" />
      <MemberSignature Language="VB.NET" Value="Public Property X As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double X { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.X : double with get, set" Usage="System.Windows.Vector.X" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6324a-312">获取或设置此向量的 <see cref="P:System.Windows.Vector.X" /> 分量。</span><span class="sxs-lookup"><span data-stu-id="6324a-312">Gets or sets the <see cref="P:System.Windows.Vector.X" /> component of this vector.</span></span></summary>
        <value><span data-ttu-id="6324a-313">此向量的 <see cref="P:System.Windows.Vector.X" /> 分量。</span><span class="sxs-lookup"><span data-stu-id="6324a-313">The <see cref="P:System.Windows.Vector.X" /> component of this vector.</span></span> <span data-ttu-id="6324a-314">默认值为 0。</span><span class="sxs-lookup"><span data-stu-id="6324a-314">The default value is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-315">下面的示例演示如何检查两个 <xref:System.Windows.Vector> 结构是否相等。</span><span class="sxs-lookup"><span data-stu-id="6324a-315">The following example shows how to check two <xref:System.Windows.Vector> structures for equality.</span></span>  
  
 [!code-csharp[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#vectorequalityexample)]
 [!code-vb[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#vectorequalityexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Vector.Y" />
      </Docs>
    </Member>
    <Member MemberName="Y">
      <MemberSignature Language="C#" Value="public double Y { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Y" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Vector.Y" />
      <MemberSignature Language="VB.NET" Value="Public Property Y As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Y { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Y : double with get, set" Usage="System.Windows.Vector.Y" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6324a-316">获取或设置此向量的 <see cref="P:System.Windows.Vector.Y" /> 分量。</span><span class="sxs-lookup"><span data-stu-id="6324a-316">Gets or sets the <see cref="P:System.Windows.Vector.Y" /> component of this vector.</span></span></summary>
        <value><span data-ttu-id="6324a-317">此向量的 <see cref="P:System.Windows.Vector.Y" /> 分量。</span><span class="sxs-lookup"><span data-stu-id="6324a-317">The <see cref="P:System.Windows.Vector.Y" /> component of this vector.</span></span> <span data-ttu-id="6324a-318">默认值为 0。</span><span class="sxs-lookup"><span data-stu-id="6324a-318">The default value is 0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="6324a-319">下面的示例演示如何检查两个 <xref:System.Windows.Vector> 结构是否相等。</span><span class="sxs-lookup"><span data-stu-id="6324a-319">The following example shows how to check two <xref:System.Windows.Vector> structures for equality.</span></span>  
  
 [!code-csharp[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/csharp/VS_Snippets_Wpf/VectorExamples_snip/CSharp/VectorExample.cs#vectorequalityexample)]
 [!code-vb[VectorExamples_snip#VectorEqualityExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/VectorExamples_snip/visualbasic/vectorexample.vb#vectorequalityexample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Vector.X" />
      </Docs>
    </Member>
  </Members>
</Type>
