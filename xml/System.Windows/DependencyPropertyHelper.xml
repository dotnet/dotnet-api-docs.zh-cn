<Type Name="DependencyPropertyHelper" FullName="System.Windows.DependencyPropertyHelper">
  <Metadata><Meta Name="ms.openlocfilehash" Value="30352aacc0f10bdf6c93ccfac686316f80820dcc" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89723831" /></Metadata><TypeSignature Language="C#" Value="public static class DependencyPropertyHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DependencyPropertyHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.DependencyPropertyHelper" />
  <TypeSignature Language="VB.NET" Value="Public Class DependencyPropertyHelper" />
  <TypeSignature Language="C++ CLI" Value="public ref class DependencyPropertyHelper abstract sealed" />
  <TypeSignature Language="F#" Value="type DependencyPropertyHelper = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一个帮助器方法 (<see cref="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />)，用于报告依赖属性的有效值的属性系统源。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]属性系统相当复杂，它依赖于建立的值确定优先级，合理化可能来自各种输入的值。 由于这些源可能来自运行时代码、已编译的标记，甚至来自运行时用户设置，因此，准确了解依赖项属性值系统中的哪个参与者建立了在 <xref:System.Windows.DependencyObject.GetValue%2A> 运行时对该属性调用时获取的值非常有用。 如果值来自于预期之外的其他源，可能需要调整应用程序的某个方面。 值源可能是样式、主题、本地值、动画、绑定或基于运行时的值（例如系统设置通过主题或系统资源）。 有关详细信息，请参阅[依赖属性值优先级](/dotnet/framework/wpf/advanced/dependency-property-value-precedence)。  
  
 通常情况下，对属性进行报告的另一种机制是属性元数据，而不是对象上的属性的特定实例。 属性元数据是通过调用 <xref:System.Windows.DependencyProperty.GetMetadata%2A> 和检查返回的 <xref:System.Windows.PropertyMetadata> (或返回的属性元数据可转换为) 的几个可能的派生类之一 findable 的。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetValueSource">
      <MemberSignature Language="C#" Value="public static System.Windows.ValueSource GetValueSource (System.Windows.DependencyObject dependencyObject, System.Windows.DependencyProperty dependencyProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Windows.ValueSource GetValueSource(class System.Windows.DependencyObject dependencyObject, class System.Windows.DependencyProperty dependencyProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyHelper.GetValueSource(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetValueSource (dependencyObject As DependencyObject, dependencyProperty As DependencyProperty) As ValueSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::ValueSource GetValueSource(System::Windows::DependencyObject ^ dependencyObject, System::Windows::DependencyProperty ^ dependencyProperty);" />
      <MemberSignature Language="F#" Value="static member GetValueSource : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; System.Windows.ValueSource" Usage="System.Windows.DependencyPropertyHelper.GetValueSource (dependencyObject, dependencyProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.ValueSource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dependencyObject" Type="System.Windows.DependencyObject" />
        <Parameter Name="dependencyProperty" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dependencyObject">包含要报告其相关信息的 <paramref name="dependencyProperty" /> 的元素。</param>
        <param name="dependencyProperty">要报告其相关信息的依赖项属性的标识符。</param>
        <summary>返回一种结构，该结构报告特定 <see cref="T:System.Windows.DependencyObject" /> 上指定依赖属性的各种元数据和属性系统特征。</summary>
        <returns>报告特定信息的 <see cref="T:System.Windows.ValueSource" /> 结构。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应在上下文中调用此方法，以便属性值确定中的后期参与者能够对属性进行操作。 例如，绑定在属性上可能不处于活动状态，除非元素树中的所有参与者元素都已加载并传播异步绑定，并且绑定源对象已连接。 同样，包括所有必要主题字典的资源应该可用。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.ValueSource" />
      </Docs>
    </Member>
    <Member MemberName="IsTemplatedValueDynamic">
      <MemberSignature Language="C#" Value="public static bool IsTemplatedValueDynamic (System.Windows.DependencyObject elementInTemplate, System.Windows.DependencyProperty dependencyProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsTemplatedValueDynamic(class System.Windows.DependencyObject elementInTemplate, class System.Windows.DependencyProperty dependencyProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.DependencyPropertyHelper.IsTemplatedValueDynamic(System.Windows.DependencyObject,System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsTemplatedValueDynamic (elementInTemplate As DependencyObject, dependencyProperty As DependencyProperty) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsTemplatedValueDynamic(System::Windows::DependencyObject ^ elementInTemplate, System::Windows::DependencyProperty ^ dependencyProperty);" />
      <MemberSignature Language="F#" Value="static member IsTemplatedValueDynamic : System.Windows.DependencyObject * System.Windows.DependencyProperty -&gt; bool" Usage="System.Windows.DependencyPropertyHelper.IsTemplatedValueDynamic (elementInTemplate, dependencyProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementInTemplate" Type="System.Windows.DependencyObject" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="dependencyProperty" Type="System.Windows.DependencyProperty" Index="1" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="elementInTemplate">一个属于模板实例的元素。</param>
        <param name="dependencyProperty">一个依赖属性。</param>
        <summary>指示指定元素是否属于某个模板的实例，该实例定义可在运行时根据其他位置的更改而更改的指定属性的值。</summary>
        <returns>如果 <paramref name="elementInTemplate" /> 属于某个模板的实例（该实例定义可在运行时根据其他位置的更改而更改的指定属性的值），则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
在运行时根据其他位置的更改可能更改的值的示例为由 <xref:System.Windows.Data.Binding> 、 <xref:System.Windows.TemplateBindingExtension> 和对象设置的值 <xref:System.Windows.DynamicResourceExtension> 。

此方法在属性的值为的情况下提供更详细的信息 <xref:System.Windows.ValueSource.BaseValueSource?displayProperty=nameWithType> <xref:System.Windows.BaseValueSource.ParentTemplate?displayProperty=nameWithType> 。
此信息主要用于诊断工具。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
