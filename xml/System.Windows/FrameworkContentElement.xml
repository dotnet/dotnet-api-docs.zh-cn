<Type Name="FrameworkContentElement" FullName="System.Windows.FrameworkContentElement">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d58c0870b37fe06ceca79f7d09b4f4248c2176b2" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102061128" /></Metadata><TypeSignature Language="C#" Value="public class FrameworkContentElement : System.Windows.ContentElement, System.ComponentModel.ISupportInitialize, System.Windows.IFrameworkInputElement, System.Windows.Markup.IQueryAmbient" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FrameworkContentElement extends System.Windows.ContentElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement, class System.Windows.Markup.IQueryAmbient" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Windows.FrameworkContentElement" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkContentElement&#xA;Inherits ContentElement&#xA;Implements IFrameworkInputElement, IQueryAmbient, ISupportInitialize" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkContentElement : System::Windows::ContentElement, System::ComponentModel::ISupportInitialize, System::Windows::IFrameworkInputElement, System::Windows::Markup::IQueryAmbient" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type FrameworkContentElement = class&#xA;    inherit ContentElement&#xA;    interface ISupportInitialize&#xA;    interface IFrameworkInputElement&#xA;    interface IInputElement&#xA;    interface IQueryAmbient" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="C#" Value="public class FrameworkContentElement : System.Windows.ContentElement, System.ComponentModel.ISupportInitialize, System.Windows.IFrameworkInputElement" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FrameworkContentElement extends System.Windows.ContentElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="VB.NET" Value="Public Class FrameworkContentElement&#xA;Inherits ContentElement&#xA;Implements IFrameworkInputElement, ISupportInitialize" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="C++ CLI" Value="public ref class FrameworkContentElement : System::Windows::ContentElement, System::ComponentModel::ISupportInitialize, System::Windows::IFrameworkInputElement" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="F#" Value="type FrameworkContentElement = class&#xA;    inherit ContentElement&#xA;    interface IFrameworkInputElement&#xA;    interface IInputElement&#xA;    interface ISupportInitialize" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi FrameworkContentElement extends System.Windows.ContentElement implements class System.ComponentModel.ISupportInitialize, class System.Windows.IFrameworkInputElement, class System.Windows.IInputElement, class System.Windows.Markup.IQueryAmbient" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type FrameworkContentElement = class&#xA;    inherit ContentElement&#xA;    interface IFrameworkInputElement&#xA;    interface IInputElement&#xA;    interface ISupportInitialize&#xA;    interface IQueryAmbient" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.ContentElement</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IFrameworkInputElement</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.IInputElement</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <InterfaceName>System.Windows.Markup.IQueryAmbient</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Windows.Markup.RuntimeNameProperty("Name")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.RuntimeNameProperty("Name")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Windows.Markup.UsableDuringInitialization(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.UsableDuringInitialization(true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Windows.Markup.XmlLangProperty("Language")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.XmlLangProperty("Language")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Windows.StyleTypedProperty(Property="FocusVisualStyle", StyleTargetType=typeof(System.Windows.Controls.Control))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.StyleTypedProperty(Property="FocusVisualStyle", StyleTargetType=typeof(System.Windows.Controls.Control))&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="a2648-101"><see cref="T:System.Windows.FrameworkContentElement" /> 是 <see cref="T:System.Windows.ContentElement" /> 基类的 WPF 框架级别的实现和扩展。</span><span class="sxs-lookup"><span data-stu-id="a2648-101"><see cref="T:System.Windows.FrameworkContentElement" /> is the WPF framework-level implementation and expansion of the <see cref="T:System.Windows.ContentElement" /> base class.</span></span> <span data-ttu-id="a2648-102"><see cref="T:System.Windows.FrameworkContentElement" /> 增加了针对下列各项的支持：附加输入 API（包括工具提示和上下文菜单）、演示图板、用于数据绑定的数据上下文、格式支持和逻辑树帮助程序 API。</span><span class="sxs-lookup"><span data-stu-id="a2648-102"><see cref="T:System.Windows.FrameworkContentElement" /> adds support for additional input APIs (including tooltips and context menus), storyboards, data context for data binding, styles support, and logical tree helper APIs.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-103"><xref:System.Windows.FrameworkContentElement> 尚未定义自己的呈现行为; <xref:System.Windows.FrameworkContentElement> 可以在代码或标记中实例化实际类实例，但不会在 WPF 应用程序用户界面中 (UI) 中显示任何内容。</span><span class="sxs-lookup"><span data-stu-id="a2648-103"><xref:System.Windows.FrameworkContentElement> does not yet define its own rendering behavior; instantiating an actual <xref:System.Windows.FrameworkContentElement> class instance in code or markup is possible but displays nothing in a WPF application user interface (UI).</span></span> <span data-ttu-id="a2648-104">呈现逻辑必须由 <xref:System.Windows.FrameworkContentElement> 作为其内容模型或派生类中的子元素的类提供 <xref:System.Windows.FrameworkContentElement> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-104">Rendering logic must be provided by classes that take <xref:System.Windows.FrameworkContentElement> child elements as part of their content model, or in <xref:System.Windows.FrameworkContentElement> derived classes.</span></span>  
  
 <span data-ttu-id="a2648-105"><xref:System.Windows.FrameworkContentElement> 有意将多个相同的 Api 与相同 <xref:System.Windows.FrameworkElement> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-105"><xref:System.Windows.FrameworkContentElement> deliberately parallels many of the same APIs as <xref:System.Windows.FrameworkElement>.</span></span> <span data-ttu-id="a2648-106">请注意，在上找到的某些 Api <xref:System.Windows.FrameworkElement> 将不具有 <xref:System.Windows.FrameworkContentElement> 等效的。</span><span class="sxs-lookup"><span data-stu-id="a2648-106">Note that certain APIs found on <xref:System.Windows.FrameworkElement> will not have a <xref:System.Windows.FrameworkContentElement> equivalent.</span></span> <span data-ttu-id="a2648-107">几个 <xref:System.Windows.FrameworkElement> api 用于某些功能，如几何表示法或布局，它们与不相关 <xref:System.Windows.FrameworkContentElement> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-107">Several of the <xref:System.Windows.FrameworkElement> APIs are for functionality such as geometry representation or layout, which are not relevant for a <xref:System.Windows.FrameworkContentElement>.</span></span>  
  
 <span data-ttu-id="a2648-108">大多数现有的 <xref:System.Windows.FrameworkContentElement> 派生类将在命名空间中找到 <xref:System.Windows.Documents> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-108">The majority of existing <xref:System.Windows.FrameworkContentElement> derived classes will be found in the <xref:System.Windows.Documents> namespace.</span></span> <span data-ttu-id="a2648-109">其中许多派生类实现了流文档模型的元素。</span><span class="sxs-lookup"><span data-stu-id="a2648-109">Many of these derived classes implement elements for the flow document model.</span></span> <span data-ttu-id="a2648-110">某些派生类（例如） <xref:System.Windows.Documents.Hyperlink> 具有一些类似控件的功能，但派生自， <xref:System.Windows.FrameworkContentElement> 因此，类似控件的元素仍可参与流文档模型。</span><span class="sxs-lookup"><span data-stu-id="a2648-110">Certain derived classes such as <xref:System.Windows.Documents.Hyperlink> have some control-like functionality, but are derived from <xref:System.Windows.FrameworkContentElement> such that the control-like elements can still participate in the flow document model.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.FrameworkElement" />
    <altmember cref="T:System.Windows.ContentElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FrameworkContentElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FrameworkContentElement();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a2648-111">初始化 <see cref="T:System.Windows.FrameworkContentElement" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="a2648-111">Initializes a new instance of the <see cref="T:System.Windows.FrameworkContentElement" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void AddLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AddLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.AddLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AddLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AddLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.AddLogicalChild : obj -&gt; unit" Usage="frameworkContentElement.AddLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child"><span data-ttu-id="a2648-112">要添加的子元素。</span><span class="sxs-lookup"><span data-stu-id="a2648-112">The child element to be added.</span></span></param>
        <summary><span data-ttu-id="a2648-113">将提供的元素添加为此元素的子元素。</span><span class="sxs-lookup"><span data-stu-id="a2648-113">Adds the provided element as a child of this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-114">如果在另一个进程循环访问逻辑树时调用，则此方法可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="a2648-114">This method can throw an exception if called at a time when the logical tree is being iterated by another process.</span></span>  
  
 <span data-ttu-id="a2648-115">大多数 <xref:System.Windows.FrameworkContentElement> 派生类公开专用集合，这些集合负责 (例如， <xref:System.Windows.Documents.Span.Inlines%2A> 在 <xref:System.Windows.Documents.Span> 类上; 在 <xref:System.Windows.Documents.Section.Blocks%2A> <xref:System.Windows.Documents.Section> 类) 上。</span><span class="sxs-lookup"><span data-stu-id="a2648-115">Most <xref:System.Windows.FrameworkContentElement> derived classes expose dedicated collections that are responsible for containment (for example, <xref:System.Windows.Documents.Span.Inlines%2A> on the <xref:System.Windows.Documents.Span> class; <xref:System.Windows.Documents.Section.Blocks%2A> on the <xref:System.Windows.Documents.Section> class).</span></span> <span data-ttu-id="a2648-116">如果改为从这些类派生，则通常可以避免任何需要直接操作逻辑树。</span><span class="sxs-lookup"><span data-stu-id="a2648-116">You can typically avoid any need to manipulate the logical tree directly if you derive from these classes instead.</span></span> <span data-ttu-id="a2648-117">使用 content 元素的逻辑树是一种高级方案，可能需要专用分析器或专用分析器 <xref:System.Windows.FrameworkElement> 作为 (内容宿主) 的父呈现元素。</span><span class="sxs-lookup"><span data-stu-id="a2648-117">Working with the logical tree for content elements is an advanced scenario that may require a specialized parser or a specialized <xref:System.Windows.FrameworkElement> that acts as the parent rendering element (content host).</span></span>  
  
 <span data-ttu-id="a2648-118">有关如何使用和的详细信息 <xref:System.Windows.FrameworkContentElement.LogicalChildren%2A> <xref:System.Windows.FrameworkContentElement.AddLogicalChild%2A> ，请参阅 [WPF 中的树](/dotnet/framework/wpf/advanced/trees-in-wpf)。</span><span class="sxs-lookup"><span data-stu-id="a2648-118">For more information about how to use <xref:System.Windows.FrameworkContentElement.LogicalChildren%2A> and <xref:System.Windows.FrameworkContentElement.AddLogicalChild%2A>, see [Trees in WPF](/dotnet/framework/wpf/advanced/trees-in-wpf).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkElement.AddLogicalChild(System.Object)" />
        <altmember cref="P:System.Windows.FrameworkContentElement.LogicalChildren" />
        <altmember cref="T:System.Windows.LogicalTreeHelper" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public virtual void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="frameworkContentElement.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a2648-119">已在初始化元素之前调用。</span><span class="sxs-lookup"><span data-stu-id="a2648-119">Called before an element is initialized.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a2648-120">重写此方法以提供在元素加载过程中初始化元素之前应发生的特殊处理。</span><span class="sxs-lookup"><span data-stu-id="a2648-120">Override this method to provide special handling that should occur before your element is initialized during the element loading process.</span></span>  
  
<span data-ttu-id="a2648-121">你的实现应调用基实现，因为基础 (默认值) 实现设置某些内部标志以跟踪初始化。</span><span class="sxs-lookup"><span data-stu-id="a2648-121">Your implementation should call the base implementation, because the base (default) implementation sets some internal flags to keep track of initialization.</span></span>  
  
<span data-ttu-id="a2648-122">如果在 <see cref="M:System.Windows.FrameworkContentElement.BeginInit" /> 到达之前调用了同一元素上的多个时间，则基实现将引发异常 <see cref="M:System.Windows.FrameworkContentElement.EndInit" /> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-122">The base implementation will throw an exception if <see cref="M:System.Windows.FrameworkContentElement.BeginInit" /> is called more than one time on the same element prior to reaching <see cref="M:System.Windows.FrameworkContentElement.EndInit" />.</span></span></para></block>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginStoryboard">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a2648-123">开始所提供的演示图板中包含的操作序列。</span><span class="sxs-lookup"><span data-stu-id="a2648-123">Begins the sequence of actions that are contained in the provided storyboard.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginStoryboard (storyboard As Storyboard)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard -&gt; unit" Usage="frameworkContentElement.BeginStoryboard storyboard" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
      </Parameters>
      <Docs>
        <param name="storyboard"><span data-ttu-id="a2648-124">要开始的演示图板。</span><span class="sxs-lookup"><span data-stu-id="a2648-124">The storyboard to begin.</span></span></param>
        <summary><span data-ttu-id="a2648-125">开始所提供的演示图板中包含的操作序列。</span><span class="sxs-lookup"><span data-stu-id="a2648-125">Begins the sequence of actions that are contained in the provided storyboard.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-126">对于不使用 `isControllable` 、参数或指定了该参数的签名 `false` ，与动画关联的时间线时钟一旦到达 "填充" 时间段就会被删除。</span><span class="sxs-lookup"><span data-stu-id="a2648-126">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks associated with the animation are removed as soon as it reaches the "Fill" period.</span></span> <span data-ttu-id="a2648-127">因此，在运行一次后无法重新启动动画。</span><span class="sxs-lookup"><span data-stu-id="a2648-127">Therefore the animation cannot be restarted after being run once.</span></span> <span data-ttu-id="a2648-128">请注意，控制动画还要求情节提要作为代码中的实例进行命名或访问。</span><span class="sxs-lookup"><span data-stu-id="a2648-128">Note that controlling an animation also requires that the storyboard be named or accessible as an instance in code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginStoryboard (storyboard As Storyboard, handoffBehavior As HandoffBehavior)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior -&gt; unit" Usage="frameworkContentElement.BeginStoryboard (storyboard, handoffBehavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
      </Parameters>
      <Docs>
        <param name="storyboard"><span data-ttu-id="a2648-129">要开始的演示图板。</span><span class="sxs-lookup"><span data-stu-id="a2648-129">The storyboard to begin.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="a2648-130">一个枚举值，该值描述演示图板中描述的属性在经过动画处理后要使用的行为。</span><span class="sxs-lookup"><span data-stu-id="a2648-130">A value of the enumeration that describes behavior to use if a property described in the storyboard is already animated.</span></span></param>
        <summary><span data-ttu-id="a2648-131">开始所提供的演示图板中包含的操作序列，其中指定了在该属性经过动画处理后要发生的行为的选项。</span><span class="sxs-lookup"><span data-stu-id="a2648-131">Begins the sequence of actions that are contained in the provided storyboard, with options specified for what should occur if the property is already animated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-132">对于不使用 `isControllable` 、参数或指定了该参数的签名 `false` ，与动画关联的时间线时钟一旦到达 "填充" 时间段就会被删除。</span><span class="sxs-lookup"><span data-stu-id="a2648-132">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks associated with the animation are removed as soon as it reaches the "Fill" period.</span></span> <span data-ttu-id="a2648-133">因此，在运行一次后无法重新启动动画。</span><span class="sxs-lookup"><span data-stu-id="a2648-133">Therefore the animation cannot be restarted after being run once.</span></span> <span data-ttu-id="a2648-134">请注意，控制动画还要求情节提要作为代码中的实例进行命名或访问。</span><span class="sxs-lookup"><span data-stu-id="a2648-134">Note that controlling an animation also requires that the storyboard be named or accessible as an instance in code.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="a2648-135">使用撰写 HandoffBehavior</span><span class="sxs-lookup"><span data-stu-id="a2648-135">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="a2648-136"><xref:System.Windows.Media.Animation.Storyboard>使用将、或应用 <xref:System.Windows.Media.Animation.AnimationTimeline> <xref:System.Windows.Media.Animation.AnimationClock> 到属性时 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior> ， <xref:System.Windows.Media.Animation.Clock> 以前与该属性关联的任何对象将继续使用系统资源; 计时系统不会自动删除时钟。</span><span class="sxs-lookup"><span data-stu-id="a2648-136">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove the clocks automatically.</span></span>  
  
 <span data-ttu-id="a2648-137">若要避免在使用应用大量时钟时出现性能问题 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> ，应在完成后从动画属性中删除组合时钟。</span><span class="sxs-lookup"><span data-stu-id="a2648-137">To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="a2648-138">有几种方法可以删除时钟：</span><span class="sxs-lookup"><span data-stu-id="a2648-138">There are several ways to remove a clock:</span></span>  
  
-   <span data-ttu-id="a2648-139">若要从属性中删除所有时钟，请 <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> 使用 <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> 动画对象的或方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-139">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="a2648-140">将要进行动画处理的属性指定为第一个参数，并将指定 `null` 为第二个参数。</span><span class="sxs-lookup"><span data-stu-id="a2648-140">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="a2648-141">这将从属性中移除所有动画时钟。</span><span class="sxs-lookup"><span data-stu-id="a2648-141">This removes all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="a2648-142">若要从时钟列表中删除特定的 <xref:System.Windows.Media.Animation.AnimationClock> ，请使用 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 的属性 <xref:System.Windows.Media.Animation.AnimationClock> 来检索 <xref:System.Windows.Media.Animation.ClockController> ，然后调用的 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> 方法 <xref:System.Windows.Media.Animation.ClockController> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-142">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="a2648-143">通常在 <xref:System.Windows.Media.Animation.Clock.Completed> 时钟的事件处理程序中完成此操作。</span><span class="sxs-lookup"><span data-stu-id="a2648-143">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="a2648-144">请注意，只能通过控制根时钟， <xref:System.Windows.Media.Animation.ClockController> <xref:System.Windows.Media.Animation.Clock.Controller%2A> 子时钟的属性返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="a2648-144">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`.</span></span> <span data-ttu-id="a2648-145">另请注意， <xref:System.Windows.Media.Animation.Clock.Completed> 如果时钟的有效持续时间是永久性的，则不会引发事件。</span><span class="sxs-lookup"><span data-stu-id="a2648-145">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="a2648-146">在这种情况下，用户必须确定何时调用 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-146">In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="a2648-147">此动画问题主要出现在生存期较长的对象上。</span><span class="sxs-lookup"><span data-stu-id="a2648-147">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="a2648-148">当对对象进行垃圾回收时，还会断开其时钟的连接并对其进行垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="a2648-148">When an object is garbage collected, its clocks are also disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="a2648-149">有关时钟对象的详细信息，请参阅 [动画和计时系统概述](/dotnet/framework/wpf/graphics-multimedia/animation-and-timing-system-overview)。</span><span class="sxs-lookup"><span data-stu-id="a2648-149">For more information about clock objects, see [Animation and Timing System Overview](/dotnet/framework/wpf/graphics-multimedia/animation-and-timing-system-overview).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginStoryboard">
      <MemberSignature Language="C#" Value="public void BeginStoryboard (System.Windows.Media.Animation.Storyboard storyboard, System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginStoryboard(class System.Windows.Media.Animation.Storyboard storyboard, valuetype System.Windows.Media.Animation.HandoffBehavior handoffBehavior, bool isControllable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginStoryboard (storyboard As Storyboard, handoffBehavior As HandoffBehavior, isControllable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginStoryboard(System::Windows::Media::Animation::Storyboard ^ storyboard, System::Windows::Media::Animation::HandoffBehavior handoffBehavior, bool isControllable);" />
      <MemberSignature Language="F#" Value="member this.BeginStoryboard : System.Windows.Media.Animation.Storyboard * System.Windows.Media.Animation.HandoffBehavior * bool -&gt; unit" Usage="frameworkContentElement.BeginStoryboard (storyboard, handoffBehavior, isControllable)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storyboard" Type="System.Windows.Media.Animation.Storyboard" />
        <Parameter Name="handoffBehavior" Type="System.Windows.Media.Animation.HandoffBehavior" />
        <Parameter Name="isControllable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="storyboard"><span data-ttu-id="a2648-150">要开始的演示图板。</span><span class="sxs-lookup"><span data-stu-id="a2648-150">The storyboard to begin.</span></span></param>
        <param name="handoffBehavior"><span data-ttu-id="a2648-151">一个枚举值，该值描述演示图板中描述的属性在经过动画处理后要使用的行为。</span><span class="sxs-lookup"><span data-stu-id="a2648-151">A value of the enumeration that describes behavior to use if a  property described in the storyboard is already animated.</span></span></param>
        <param name="isControllable"><span data-ttu-id="a2648-152">声明在动画开始后是否仍可以对它进行控制（可以暂停）。</span><span class="sxs-lookup"><span data-stu-id="a2648-152">Declares whether the animation is controllable (can be paused) after it is started.</span></span></param>
        <summary><span data-ttu-id="a2648-153">开始所提供的演示图板中包含的操作序列，其中指定了在动画开始之后动画控件的状态。</span><span class="sxs-lookup"><span data-stu-id="a2648-153">Begins the sequence of actions that are contained in the provided storyboard, with specified state for control of the animation after it is started.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-154">对于不使用 `isControllable` 、参数或指定了该参数的签名 `false` ，与动画关联的时间线时钟一旦到达 "填充" 时间段就会被删除。</span><span class="sxs-lookup"><span data-stu-id="a2648-154">For the signatures that do not use the `isControllable`, parameter, or when that parameter is specified `false`, the timeline clocks associated with the animation are removed as soon as it reaches the "Fill" period.</span></span> <span data-ttu-id="a2648-155">因此，在运行一次后无法重新启动动画。</span><span class="sxs-lookup"><span data-stu-id="a2648-155">Therefore the animation cannot be restarted after being run once.</span></span> <span data-ttu-id="a2648-156">请注意，控制动画还要求情节提要作为代码中的实例进行命名或访问。</span><span class="sxs-lookup"><span data-stu-id="a2648-156">Note that controlling an animation also requires that the storyboard be named or accessible as an instance in code.</span></span>  
  
## <a name="using-the-compose-handoffbehavior"></a><span data-ttu-id="a2648-157">使用撰写 HandoffBehavior</span><span class="sxs-lookup"><span data-stu-id="a2648-157">Using the Compose HandoffBehavior</span></span>  
 <span data-ttu-id="a2648-158"><xref:System.Windows.Media.Animation.Storyboard>使用将、或应用 <xref:System.Windows.Media.Animation.AnimationTimeline> <xref:System.Windows.Media.Animation.AnimationClock> 到属性时 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior> ， <xref:System.Windows.Media.Animation.Clock> 以前与该属性关联的任何对象将继续使用系统资源; 计时系统不会自动删除这些时钟。</span><span class="sxs-lookup"><span data-stu-id="a2648-158">When you apply a <xref:System.Windows.Media.Animation.Storyboard>, <xref:System.Windows.Media.Animation.AnimationTimeline>, or <xref:System.Windows.Media.Animation.AnimationClock> to a property by using the <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> <xref:System.Windows.Media.Animation.HandoffBehavior>, any <xref:System.Windows.Media.Animation.Clock> objects previously associated with that property continue to consume system resources; the timing system does not remove these clocks automatically.</span></span>  
  
 <span data-ttu-id="a2648-159">若要避免在使用应用大量时钟时出现性能问题 <xref:System.Windows.Media.Animation.HandoffBehavior.Compose> ，应在完成后从动画属性中删除组合时钟。</span><span class="sxs-lookup"><span data-stu-id="a2648-159">To avoid performance issues when you apply a large number of clocks by using <xref:System.Windows.Media.Animation.HandoffBehavior.Compose>, you should remove composing clocks from the animated property after they complete.</span></span> <span data-ttu-id="a2648-160">有几种方法可以删除时钟：</span><span class="sxs-lookup"><span data-stu-id="a2648-160">There are several ways to remove a clock:</span></span>  
  
-   <span data-ttu-id="a2648-161">若要从属性中删除所有时钟，请 <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> 使用 <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> 动画对象的或方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-161">To remove all clocks from a property, use the <xref:System.Windows.Media.Animation.Animatable.ApplyAnimationClock%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationClock%29> or <xref:System.Windows.Media.Animation.Animatable.BeginAnimation%28System.Windows.DependencyProperty%2CSystem.Windows.Media.Animation.AnimationTimeline%29> method of the animated object.</span></span> <span data-ttu-id="a2648-162">将要进行动画处理的属性指定为第一个参数，并将指定 `null` 为第二个参数。</span><span class="sxs-lookup"><span data-stu-id="a2648-162">Specify the property being animated as the first parameter, and `null` as the second.</span></span> <span data-ttu-id="a2648-163">这将从属性中移除所有动画时钟。</span><span class="sxs-lookup"><span data-stu-id="a2648-163">This removes all animation clocks from the property.</span></span>  
  
-   <span data-ttu-id="a2648-164">若要从时钟列表中删除特定的 <xref:System.Windows.Media.Animation.AnimationClock> ，请使用 <xref:System.Windows.Media.Animation.Clock.Controller%2A> 的属性 <xref:System.Windows.Media.Animation.AnimationClock> 来检索 <xref:System.Windows.Media.Animation.ClockController> ，然后调用的 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> 方法 <xref:System.Windows.Media.Animation.ClockController> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-164">To remove a specific <xref:System.Windows.Media.Animation.AnimationClock> from a list of clocks, use the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of the <xref:System.Windows.Media.Animation.AnimationClock> to retrieve a <xref:System.Windows.Media.Animation.ClockController>, then call the <xref:System.Windows.Media.Animation.ClockController.Remove%2A> method of the <xref:System.Windows.Media.Animation.ClockController>.</span></span> <span data-ttu-id="a2648-165">通常在 <xref:System.Windows.Media.Animation.Clock.Completed> 时钟的事件处理程序中完成此操作。</span><span class="sxs-lookup"><span data-stu-id="a2648-165">This is typically done in the <xref:System.Windows.Media.Animation.Clock.Completed> event handler for a clock.</span></span> <span data-ttu-id="a2648-166">请注意，只能通过控制根时钟， <xref:System.Windows.Media.Animation.ClockController> <xref:System.Windows.Media.Animation.Clock.Controller%2A> 子时钟的属性返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="a2648-166">Note that only root clocks can be controlled by a <xref:System.Windows.Media.Animation.ClockController>; the <xref:System.Windows.Media.Animation.Clock.Controller%2A> property of a child clock returns `null`.</span></span> <span data-ttu-id="a2648-167">另请注意， <xref:System.Windows.Media.Animation.Clock.Completed> 如果时钟的有效持续时间是永久性的，则不会引发事件。</span><span class="sxs-lookup"><span data-stu-id="a2648-167">Note also that the <xref:System.Windows.Media.Animation.Clock.Completed> event is not raised if the effective duration of the clock is forever.</span></span>  <span data-ttu-id="a2648-168">在这种情况下，用户必须确定何时调用 <xref:System.Windows.Media.Animation.ClockController.Remove%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-168">In that case, the user must determine when to call <xref:System.Windows.Media.Animation.ClockController.Remove%2A>.</span></span>  
  
 <span data-ttu-id="a2648-169">此动画问题主要出现在生存期较长的对象上。</span><span class="sxs-lookup"><span data-stu-id="a2648-169">This is primarily an issue for animations on objects that have a long lifetime.</span></span>  <span data-ttu-id="a2648-170">当对对象进行垃圾回收时，还会断开其时钟的连接并对其进行垃圾回收。</span><span class="sxs-lookup"><span data-stu-id="a2648-170">When an object is garbage collected, its clocks are also disconnected and garbage collected.</span></span>  
  
 <span data-ttu-id="a2648-171">有关时钟对象的详细信息，请参阅 [动画和计时系统概述](/dotnet/framework/wpf/graphics-multimedia/animation-and-timing-system-overview)。</span><span class="sxs-lookup"><span data-stu-id="a2648-171">For more information about clock objects, see [Animation and Timing System Overview](/dotnet/framework/wpf/graphics-multimedia/animation-and-timing-system-overview).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroup">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingGroup BindingGroup { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Data.BindingGroup BindingGroup" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.BindingGroup" />
      <MemberSignature Language="VB.NET" Value="Public Property BindingGroup As BindingGroup" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Data::BindingGroup ^ BindingGroup { System::Windows::Data::BindingGroup ^ get(); void set(System::Windows::Data::BindingGroup ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BindingGroup : System.Windows.Data.BindingGroup with get, set" Usage="System.Windows.FrameworkContentElement.BindingGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-172">获取或设置用于该元素的 <see cref="T:System.Windows.Data.BindingGroup" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-172">Gets or sets the <see cref="T:System.Windows.Data.BindingGroup" /> that is used for the element.</span></span></summary>
        <value><span data-ttu-id="a2648-173">用于该元素的 <see cref="T:System.Windows.Data.BindingGroup" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-173">The <see cref="T:System.Windows.Data.BindingGroup" /> that is used for the element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-174"><xref:System.Windows.Data.BindingGroup>可用于验证对象的多个属性的值。</span><span class="sxs-lookup"><span data-stu-id="a2648-174">A <xref:System.Windows.Data.BindingGroup> can be used to validate the values of multiple properties of an object.</span></span> <span data-ttu-id="a2648-175">例如，假设应用程序提示用户输入地址，然后使用用户提供的值填充类型为的对象 `Address` ，该对象具有属性 `Street` 、 `City` 、 `ZipCode` 和 `Country` 。</span><span class="sxs-lookup"><span data-stu-id="a2648-175">For example, suppose that an application prompts the user to enter an address and then populates an object of type `Address`, which has the properties `Street`, `City`, `ZipCode`, and `Country`, with the values that the user provided.</span></span> <span data-ttu-id="a2648-176">应用程序有一个面板，其中包含四个 <xref:System.Windows.Controls.TextBox> 控件，其中每个控件都绑定到对象的一个属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-176">The application has a panel that contains four <xref:System.Windows.Controls.TextBox> controls, each of which is bound to one of the object's properties.</span></span> <span data-ttu-id="a2648-177">可以 <xref:System.Windows.Controls.ValidationRule> 在中使用 <xref:System.Windows.Data.BindingGroup> 来验证 `Address` 对象。</span><span class="sxs-lookup"><span data-stu-id="a2648-177">You can use a <xref:System.Windows.Controls.ValidationRule> in a <xref:System.Windows.Data.BindingGroup> to validate the `Address` object.</span></span> <span data-ttu-id="a2648-178">例如， <xref:System.Windows.Controls.ValidationRule> 可以确保邮政编码对地址的国家/地区有效。</span><span class="sxs-lookup"><span data-stu-id="a2648-178">For example, the <xref:System.Windows.Controls.ValidationRule> can ensure that the zip code is valid for the country/region of the address.</span></span>  
  
 <span data-ttu-id="a2648-179">子元素继承 <xref:System.Windows.Data.BindingGroup> 其父元素，就像任何其他可继承的属性一样。</span><span class="sxs-lookup"><span data-stu-id="a2648-179">Child elements inherit the <xref:System.Windows.Data.BindingGroup> from their parent elements, just as with any other inheritable property.</span></span>  
  
<a name="dependencyPropertyInfo_BindingGroup"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="a2648-180">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="a2648-180">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="a2648-181">标识符字段</span><span class="sxs-lookup"><span data-stu-id="a2648-181">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.BindingGroupProperty>|  
|<span data-ttu-id="a2648-182">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="a2648-182">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingGroupProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BindingGroupProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BindingGroupProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.BindingGroupProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly BindingGroupProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ BindingGroupProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable BindingGroupProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.BindingGroupProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-183">标识 <see cref="P:System.Windows.FrameworkContentElement.BindingGroup" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-183">Identifies the <see cref="P:System.Windows.FrameworkContentElement.BindingGroup" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BringIntoView">
      <MemberSignature Language="C#" Value="public void BringIntoView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringIntoView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.BringIntoView" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringIntoView ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringIntoView();" />
      <MemberSignature Language="F#" Value="member this.BringIntoView : unit -&gt; unit" Usage="frameworkContentElement.BringIntoView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a2648-184">尝试将此元素放入其所在的任何可滚动区域内的视图中。</span><span class="sxs-lookup"><span data-stu-id="a2648-184">Attempts to bring this element into view, within any scrollable regions it is contained within.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-185">通过调用此方法，您可以有效地 <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> 在包含元素 (父可滚动区域上调用 <xref:System.Windows.FrameworkElement> ，而不是 <xref:System.Windows.FrameworkContentElement>) 。</span><span class="sxs-lookup"><span data-stu-id="a2648-185">By calling this method, you effectively will call <xref:System.Windows.Controls.ScrollContentPresenter.MakeVisible%2A> on any parent scrollable area that contains the element (the parent may very well be a <xref:System.Windows.FrameworkElement>, not a <xref:System.Windows.FrameworkContentElement>).</span></span> <span data-ttu-id="a2648-186">如果此元素不包含在可滚动区域中，则仍会引发该事件，但不会产生任何影响。</span><span class="sxs-lookup"><span data-stu-id="a2648-186">If this element is not contained in a scrollable area, the event is still raised, but there will be no effect.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-3.5/ms752352(v=vs.90)"><span data-ttu-id="a2648-187">如何：创建 ScrollViewer</span><span class="sxs-lookup"><span data-stu-id="a2648-187">How to: Create a ScrollViewer</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ContextMenu ContextMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.ContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Property ContextMenu As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ContextMenu ^ ContextMenu { System::Windows::Controls::ContextMenu ^ get(); void set(System::Windows::Controls::ContextMenu ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenu : System.Windows.Controls.ContextMenu with get, set" Usage="System.Windows.FrameworkContentElement.ContextMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-188">获取或设置上下文菜单元素，此元素应在每次通过用户界面请求上下文菜单时， (UI) 从此元素中显示。</span><span class="sxs-lookup"><span data-stu-id="a2648-188">Gets or sets the context menu element that should appear whenever the context menu is requested via user interface (UI) from within this element.</span></span></summary>
        <value><span data-ttu-id="a2648-189">此元素使用的上下文菜单。</span><span class="sxs-lookup"><span data-stu-id="a2648-189">The context menu that this element uses.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="dependencyPropertyInfo_ContextMenu"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="a2648-190">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="a2648-190">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="a2648-191">标识符字段</span><span class="sxs-lookup"><span data-stu-id="a2648-191">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ContextMenuProperty>|  
|<span data-ttu-id="a2648-192">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="a2648-192">Metadata properties set to `true`</span></span>|<span data-ttu-id="a2648-193">无</span><span class="sxs-lookup"><span data-stu-id="a2648-193">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="a2648-194">下面的示例将放置 <xref:System.Windows.Controls.ContextMenu> 在上 <xref:System.Windows.Documents.Paragraph> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-194">The following example places a <xref:System.Windows.Controls.ContextMenu> on a <xref:System.Windows.Documents.Paragraph>.</span></span>  
  
 [!code-xaml[ContentElementsSmorgasbord#ContextMenu](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml#contextmenu)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
        <altmember cref="T:System.Windows.Controls.ContextMenuService" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.ContextMenuClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuClosing As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuClosing;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuClosing : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-195">在元素上的任何上下文菜单关闭之前发生。</span><span class="sxs-lookup"><span data-stu-id="a2648-195">Occurs just before any context menu on the element is closed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-196">若要取消关闭上下文菜单，该事件的处理程序应将其标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="a2648-196">To suppress closing context menus, handlers of the event should mark it as handled.</span></span>  
  
 <span data-ttu-id="a2648-197">若要 <xref:System.Windows.EventTrigger> 在样式中使用此事件，必须引用基础服务事件标识符：</span><span class="sxs-lookup"><span data-stu-id="a2648-197">To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying service event identifier:</span></span>  
  
 [!code-xaml[CorePseudocode#FEContextMenuClosing](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuclosing)]  
  
 <span data-ttu-id="a2648-198"> (这种用法是必需的，因为 <xref:System.Windows.FrameworkContentElement> 公开基础服务事件的中的事件实现不会正确映射 <xref:System.Windows.FrameworkContentElement.ContextMenuClosing> 用于触发器) 的标识符。</span><span class="sxs-lookup"><span data-stu-id="a2648-198">(This usage is required because the event implementation on <xref:System.Windows.FrameworkContentElement> that exposes the underlying service event does not correctly map the <xref:System.Windows.FrameworkContentElement.ContextMenuClosing> identifier for use in triggers).</span></span>  
  
<a name="routedEventInfo_ContextMenuClosing"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="a2648-199">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="a2648-199">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="a2648-200">标识符字段</span><span class="sxs-lookup"><span data-stu-id="a2648-200">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ContextMenuClosingEvent>|  
|<span data-ttu-id="a2648-201">路由策略</span><span class="sxs-lookup"><span data-stu-id="a2648-201">Routing strategy</span></span>|<span data-ttu-id="a2648-202">冒泡</span><span class="sxs-lookup"><span data-stu-id="a2648-202">Bubbling</span></span>|  
|<span data-ttu-id="a2648-203">委托</span><span class="sxs-lookup"><span data-stu-id="a2648-203">Delegate</span></span>|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
   
  
## Examples  
 <span data-ttu-id="a2648-204">下面的示例实现了一个处理程序，该处理程序将光标更改为命名区域， `DisplayArea` (未显示) 。</span><span class="sxs-lookup"><span data-stu-id="a2648-204">The following example implements a handler that changes the cursor over a named region `DisplayArea` (not shown).</span></span> <span data-ttu-id="a2648-205">使用中的注释提示 <xref:System.Windows.UIElement> ，但实际上，如果是，则此示例是相同的 `DisplayArea` <xref:System.Windows.FrameworkContentElement> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-205">The comment hints at a <xref:System.Windows.UIElement> usage, but in fact this sample would be identical if `DisplayArea` were a <xref:System.Windows.FrameworkContentElement>.</span></span>  
  
 [!code-csharp[cursors#ChangeCursorsSample](~/samples/snippets/csharp/VS_Snippets_Wpf/cursors/CSharp/Window1.xaml.cs#changecursorssample)]
 [!code-vb[cursors#ChangeCursorsSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/cursors/VisualBasic/Window1.xaml.vb#changecursorssample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenuService" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ContextMenuClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkContentElement.ContextMenuClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-206">标识 <see cref="E:System.Windows.FrameworkContentElement.ContextMenuClosing" /> [路由事件概述](/dotnet/framework/wpf/advanced/routed-events-overview)。</span><span class="sxs-lookup"><span data-stu-id="a2648-206">Identifies the <see cref="E:System.Windows.FrameworkContentElement.ContextMenuClosing" /> [Routed Events Overview](/dotnet/framework/wpf/advanced/routed-events-overview).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-207">事件标识符对象是在注册路由事件时创建的 (请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) ，然后可用于添加类处理程序 (参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>) 。</span><span class="sxs-lookup"><span data-stu-id="a2648-207">Event identifier objects are created when routed events are registered (see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) and can then be used to add class handlers (see <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span></span> <span data-ttu-id="a2648-208">标识符对象包含标识名称、所有者类型、处理程序类型、路由策略和用于为事件添加所有者的实用工具方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-208">Identifier objects contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ContextMenuEventHandler ContextMenuOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.ContextMenuOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuOpening As ContextMenuEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ContextMenuEventHandler ^ ContextMenuOpening;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " Usage="member this.ContextMenuOpening : System.Windows.Controls.ContextMenuEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ContextMenuEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-209">在元素上的任何上下文菜单打开时发生。</span><span class="sxs-lookup"><span data-stu-id="a2648-209">Occurs when any context menu on the element is opened.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-210">若要手动打开上下文菜单，事件的处理程序应将相关事件标记为 "已处理"。</span><span class="sxs-lookup"><span data-stu-id="a2648-210">To manually open context menus, handlers of the events should mark the relevant event as handled.</span></span> <span data-ttu-id="a2648-211">否则， <xref:System.Windows.FrameworkContentElement.ContextMenu%2A> 将使用属性的现有值自动打开上下文菜单。</span><span class="sxs-lookup"><span data-stu-id="a2648-211">Otherwise, the existing value of the <xref:System.Windows.FrameworkContentElement.ContextMenu%2A> property will be used to automatically open a context menu.</span></span> <span data-ttu-id="a2648-212">将事件标记为已处理会有效地取消默认操作，并且可能会有机会重置属性的值， <xref:System.Windows.FrameworkContentElement.ContextMenu%2A> 然后打开新的 <xref:System.Windows.Controls.ContextMenu> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-212">Marking the event handled will effectively cancel the default action, and could be an opportunity to reset the value of the <xref:System.Windows.FrameworkContentElement.ContextMenu%2A> property and then open the new <xref:System.Windows.Controls.ContextMenu>.</span></span> <span data-ttu-id="a2648-213">但是，有一个应该注意的计时问题。</span><span class="sxs-lookup"><span data-stu-id="a2648-213">However, there is a timing issue you should be aware of.</span></span> <span data-ttu-id="a2648-214">为了通过处理程序完全替换上下文菜单 <xref:System.Windows.FrameworkContentElement.ContextMenuOpening> ，初始上下文菜单不得为 null/空。</span><span class="sxs-lookup"><span data-stu-id="a2648-214">In order to completely replace the context menu through a <xref:System.Windows.FrameworkContentElement.ContextMenuOpening> handler, the initial context menu must not be null / empty.</span></span> <span data-ttu-id="a2648-215">或者，您可能需要处理事件，然后手动打开新的上下文菜单。</span><span class="sxs-lookup"><span data-stu-id="a2648-215">Alternatively, you might need to handle the event and then manually open a new context menu.</span></span> <span data-ttu-id="a2648-216">有关详细信息，请参阅 [如何：处理 ContextMenuOpening 事件](/dotnet/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event)。</span><span class="sxs-lookup"><span data-stu-id="a2648-216">For details, see [How to: Handle the ContextMenuOpening Event](/dotnet/framework/wpf/advanced/how-to-handle-the-contextmenuopening-event).</span></span>  
  
 <span data-ttu-id="a2648-217">若要 <xref:System.Windows.EventTrigger> 在样式中使用此事件，必须引用基础服务事件标识符：</span><span class="sxs-lookup"><span data-stu-id="a2648-217">To use this event as an <xref:System.Windows.EventTrigger> in a style, you must reference the underlying service event identifier:</span></span>  
  
 [!code-xaml[CorePseudocode#FEContextMenuOpening](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/pseudocode.xaml#fecontextmenuopening)]  
  
 <span data-ttu-id="a2648-218"> (这种用法是必需的，因为 <xref:System.Windows.FrameworkContentElement> 公开基础服务事件的中的事件实现不会正确映射 <xref:System.Windows.FrameworkContentElement.ContextMenuOpening> 用于触发器) 的标识符。</span><span class="sxs-lookup"><span data-stu-id="a2648-218">(This usage is required because the event implementation on <xref:System.Windows.FrameworkContentElement> that exposes the underlying service event does not correctly map the <xref:System.Windows.FrameworkContentElement.ContextMenuOpening> identifier for use in triggers).</span></span>  
  
<a name="routedEventInfo_ContextMenuOpening"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="a2648-219">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="a2648-219">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="a2648-220">标识符字段</span><span class="sxs-lookup"><span data-stu-id="a2648-220">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ContextMenuOpeningEvent>|  
|<span data-ttu-id="a2648-221">路由策略</span><span class="sxs-lookup"><span data-stu-id="a2648-221">Routing strategy</span></span>|<span data-ttu-id="a2648-222">冒泡</span><span class="sxs-lookup"><span data-stu-id="a2648-222">Bubbling</span></span>|  
|<span data-ttu-id="a2648-223">委托</span><span class="sxs-lookup"><span data-stu-id="a2648-223">Delegate</span></span>|<xref:System.Windows.Controls.ContextMenuEventHandler>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.ContextMenuService" />
        <altmember cref="T:System.Windows.Controls.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ContextMenuOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ContextMenuOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ContextMenuOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ContextMenuOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkContentElement.ContextMenuOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-224">标识 <see cref="E:System.Windows.FrameworkContentElement.ContextMenuOpening" /> [路由事件概述](/dotnet/framework/wpf/advanced/routed-events-overview)。</span><span class="sxs-lookup"><span data-stu-id="a2648-224">Identifies the <see cref="E:System.Windows.FrameworkContentElement.ContextMenuOpening" /> [Routed Events Overview](/dotnet/framework/wpf/advanced/routed-events-overview).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-225">事件标识符对象是在注册路由事件时创建的 (请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) ，然后可用于添加类处理程序 (参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>) 。</span><span class="sxs-lookup"><span data-stu-id="a2648-225">Event identifier objects are created when routed events are registered (see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) and can then be used to add class handlers (see <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span></span> <span data-ttu-id="a2648-226">标识符对象包含标识名称、所有者类型、处理程序类型、路由策略和用于为事件添加所有者的实用工具方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-226">Identifier objects contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ContextMenuProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ContextMenuProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ContextMenuProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ContextMenuProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ContextMenuProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ContextMenuProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.ContextMenuProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-227">标识 <see cref="P:System.Windows.FrameworkContentElement.ContextMenu" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-227">Identifies the <see cref="P:System.Windows.FrameworkContentElement.ContextMenu" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Cursor ^ Cursor { System::Windows::Input::Cursor ^ get(); void set(System::Windows::Input::Cursor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cursor : System.Windows.Input.Cursor with get, set" Usage="System.Windows.FrameworkContentElement.Cursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-228">获取或设置在鼠标指针位于此元素上时显示的光标。</span><span class="sxs-lookup"><span data-stu-id="a2648-228">Gets or sets the cursor that displays when the mouse pointer is over this element.</span></span></summary>
        <value><span data-ttu-id="a2648-229">要显示的光标。</span><span class="sxs-lookup"><span data-stu-id="a2648-229">The cursor to display.</span></span> <span data-ttu-id="a2648-230">按此依赖属性，默认值定义为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-230">The default value is defined as <see langword="null" /> per this dependency property.</span></span> <span data-ttu-id="a2648-231">但是，运行时的实际默认值将受到多种因素的影响。</span><span class="sxs-lookup"><span data-stu-id="a2648-231">However, the practical default at run time will come from a variety of factors.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-232">在 XAML 中设置此属性时，XAML 处理器依赖于类的类型转换 <xref:System.Windows.Input.Cursor> 来计算字符串。</span><span class="sxs-lookup"><span data-stu-id="a2648-232">When setting this property in XAML, the XAML processor relies on type conversion for the <xref:System.Windows.Input.Cursor> class to evaluate the string.</span></span> <span data-ttu-id="a2648-233">提供的字符串的计算结果应为 <xref:System.Windows.Input.CursorType> 值。</span><span class="sxs-lookup"><span data-stu-id="a2648-233">The provided string should evaluate to a <xref:System.Windows.Input.CursorType> value.</span></span> <span data-ttu-id="a2648-234">有关详细信息，请参阅<xref:System.Windows.Input.Cursor>。</span><span class="sxs-lookup"><span data-stu-id="a2648-234">See <xref:System.Windows.Input.Cursor> for details.</span></span>  
  
 <span data-ttu-id="a2648-235">当鼠标指针位于此元素上时，是否显示此属性所建立的光标也依赖于该属性的值 <xref:System.Windows.FrameworkContentElement.ForceCursor%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-235">Whether the cursor as established by this property will or will not display when the mouse pointer is over this element is also dependent on the value of the <xref:System.Windows.FrameworkContentElement.ForceCursor%2A> property.</span></span> <span data-ttu-id="a2648-236">此外，与事件相关的注意事项，如活动拖动、鼠标捕获、控件内的文本编辑模式等，也会影响其优先级高于在此属性中指定的值的光标。</span><span class="sxs-lookup"><span data-stu-id="a2648-236">Also, event-related considerations such as an active drag, mouse capture, text editing modes within controls, and so on, will also affect the cursor with higher priority than the value you specify in this property.</span></span>  
  
 <span data-ttu-id="a2648-237">若要将此属性的设置方式恢复为最终的默认值，请将其重新设置为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="a2648-237">To revert the behavior of setting this property to the eventual default, set it to `null` again.</span></span>  
  
 <span data-ttu-id="a2648-238">`null`默认情况下，这意味着确定实际游标值是在此处推迟的，应从其他位置获得。</span><span class="sxs-lookup"><span data-stu-id="a2648-238">The `null` default really means that determination of the practical cursor value is deferred here and should be obtained from elsewhere.</span></span> <span data-ttu-id="a2648-239">如果未在任何源中显示任何编程值，则 Windows Presentation Foundation (WPF) 应用程序的默认光标将为箭头。</span><span class="sxs-lookup"><span data-stu-id="a2648-239">If presented with no programmatic values from any source, the default cursor over a Windows Presentation Foundation (WPF) application will be an arrow.</span></span>  
  
 <span data-ttu-id="a2648-240">鼠标在 WPF 应用程序上的每个移动都将引发一个 <xref:System.Windows.ContentElement.QueryCursor> 事件。</span><span class="sxs-lookup"><span data-stu-id="a2648-240">Each movement of the mouse over a WPF application raises a <xref:System.Windows.ContentElement.QueryCursor> event.</span></span> <span data-ttu-id="a2648-241">事件冒泡，路由中的任何元素都有机会处理事件，并通过此事件的参数设置光标的值。</span><span class="sxs-lookup"><span data-stu-id="a2648-241">The event bubbles, and any element along the route has the opportunity to handle the event and to set the value of the cursor via the arguments of this event.</span></span> <span data-ttu-id="a2648-242">如果发生这种情况，则处理事件并在参数中具有更改的值的事实将优先于 <xref:System.Windows.FrameworkContentElement.Cursor%2A> 任何级别的属性的值，除非 <xref:System.Windows.FrameworkContentElement.ForceCursor%2A> 已设置。</span><span class="sxs-lookup"><span data-stu-id="a2648-242">If that happens, the fact that the event is handled and has a changed value in the arguments takes precedence over the value of the <xref:System.Windows.FrameworkContentElement.Cursor%2A> property at any level, unless <xref:System.Windows.FrameworkContentElement.ForceCursor%2A> is set.</span></span>  
  
 <span data-ttu-id="a2648-243">如果未创建自定义游标，通常会将此属性设置为类的静态属性值 <xref:System.Windows.Input.Cursors> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-243">If not creating a custom cursor, typically you set this property to a static property value of the <xref:System.Windows.Input.Cursors> class.</span></span>  
  
 <span data-ttu-id="a2648-244"><xref:System.Windows.Input.Cursor>在部分信任环境中未启用将设置为自定义值。</span><span class="sxs-lookup"><span data-stu-id="a2648-244">Setting the <xref:System.Windows.Input.Cursor> to a custom value is not enabled in partial trust.</span></span> <span data-ttu-id="a2648-245">有关自定义游标的详细信息，请参阅 [输入概述](/dotnet/framework/wpf/advanced/input-overview)。</span><span class="sxs-lookup"><span data-stu-id="a2648-245">For more information on custom cursors, see [Input Overview](/dotnet/framework/wpf/advanced/input-overview).</span></span>  
  
<a name="dependencyPropertyInfo_Cursor"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="a2648-246">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="a2648-246">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="a2648-247">标识符字段</span><span class="sxs-lookup"><span data-stu-id="a2648-247">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.CursorProperty>|  
|<span data-ttu-id="a2648-248">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="a2648-248">Metadata properties set to `true`</span></span>|<span data-ttu-id="a2648-249">无</span><span class="sxs-lookup"><span data-stu-id="a2648-249">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="a2648-250">下面的示例将光标设置为自定义值。</span><span class="sxs-lookup"><span data-stu-id="a2648-250">The following example sets the cursor to a custom value.</span></span>  
  
 [!code-csharp[cursors#ChangeCursorsSample](~/samples/snippets/csharp/VS_Snippets_Wpf/cursors/CSharp/Window1.xaml.cs#changecursorssample)]
 [!code-vb[cursors#ChangeCursorsSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/cursors/VisualBasic/Window1.xaml.vb#changecursorssample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.ContentElement.QueryCursor" />
        <altmember cref="P:System.Windows.FrameworkContentElement.ForceCursor" />
        <altmember cref="P:System.Windows.Input.Mouse.OverrideCursor" />
      </Docs>
    </Member>
    <Member MemberName="CursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.CursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.CursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-251">标识 <see cref="P:System.Windows.FrameworkContentElement.Cursor" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-251">Identifies the <see cref="P:System.Windows.FrameworkContentElement.Cursor" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContext">
      <MemberSignature Language="C#" Value="public object DataContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.DataContext" />
      <MemberSignature Language="VB.NET" Value="Public Property DataContext As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataContext { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataContext : obj with get, set" Usage="System.Windows.FrameworkContentElement.DataContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-252">获取或设置元素参与数据绑定时的数据上下文。</span><span class="sxs-lookup"><span data-stu-id="a2648-252">Gets or sets the data context for an element when it participates in data binding.</span></span></summary>
        <value><span data-ttu-id="a2648-253">要用作数据上下文的对象。</span><span class="sxs-lookup"><span data-stu-id="a2648-253">The object to use as data context.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-254">*数据上下文* 是一种概念，允许元素从父元素继承有关用于绑定的绑定源的信息，以及绑定的其他特征（如路径）。</span><span class="sxs-lookup"><span data-stu-id="a2648-254">*Data context* is a concept that allows elements to inherit information from their parent elements about the binding source that is used for binding, as well as other characteristics of the binding such as the path.</span></span>  
  
 <span data-ttu-id="a2648-255">可以直接将数据上下文设置为公共语言运行时 (CLR) 对象，并将绑定计算为该对象的属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-255">Data context can be set directly to a common language runtime (CLR) object, with the bindings evaluating to properties of that object.</span></span> <span data-ttu-id="a2648-256">或者，您可以将数据上下文设置为 <xref:System.Windows.Data.DataSourceProvider> 对象。</span><span class="sxs-lookup"><span data-stu-id="a2648-256">Alternatively, you can set the data context to a <xref:System.Windows.Data.DataSourceProvider> object.</span></span>  
  
 <span data-ttu-id="a2648-257">此依赖属性继承属性值。</span><span class="sxs-lookup"><span data-stu-id="a2648-257">This dependency property inherits property values.</span></span> <span data-ttu-id="a2648-258">如果有子元素没有 <xref:System.Windows.FrameworkContentElement.DataContext%2A> 通过本地值或样式建立的其他值，则属性系统会将该值设置为 <xref:System.Windows.FrameworkContentElement.DataContext%2A> 已分配此值的最近父元素的值。</span><span class="sxs-lookup"><span data-stu-id="a2648-258">If there are child elements with no other value for <xref:System.Windows.FrameworkContentElement.DataContext%2A> established through local values or styles, the property system will set the value to be the <xref:System.Windows.FrameworkContentElement.DataContext%2A> value of the nearest parent element with this value assigned.</span></span>  
  
 <span data-ttu-id="a2648-259">或者，您可以使用类的下列属性之一 <xref:System.Windows.Data.Binding> 显式指定绑定源： <xref:System.Windows.Data.Binding.ElementName%2A> 、 <xref:System.Windows.Data.Binding.Source%2A> 或 <xref:System.Windows.Data.Binding.RelativeSource%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-259">Alternatively, you can use one of the following properties of the <xref:System.Windows.Data.Binding> class to specify the binding source explicitly: <xref:System.Windows.Data.Binding.ElementName%2A>, <xref:System.Windows.Data.Binding.Source%2A>, or <xref:System.Windows.Data.Binding.RelativeSource%2A>.</span></span> <span data-ttu-id="a2648-260">有关详细信息，请参阅 [如何：指定绑定源](/dotnet/framework/wpf/data/how-to-specify-the-binding-source)。</span><span class="sxs-lookup"><span data-stu-id="a2648-260">For more information, see [How to: Specify the Binding Source](/dotnet/framework/wpf/data/how-to-specify-the-binding-source).</span></span>  
  
 <span data-ttu-id="a2648-261">在 XAML 中， <xref:System.Windows.FrameworkContentElement.DataContext%2A> 最常将设置为作为 <xref:System.Windows.Data.Binding> 声明。</span><span class="sxs-lookup"><span data-stu-id="a2648-261">In XAML, <xref:System.Windows.FrameworkContentElement.DataContext%2A> is most commonly set to as a <xref:System.Windows.Data.Binding> declaration.</span></span> <span data-ttu-id="a2648-262">您可以使用属性元素语法或特性语法。</span><span class="sxs-lookup"><span data-stu-id="a2648-262">You can use either property element syntax or attribute syntax.</span></span> <span data-ttu-id="a2648-263">此页上的示例显示了特性语法。</span><span class="sxs-lookup"><span data-stu-id="a2648-263">Attribute syntax is shown in the example on this page.</span></span> <span data-ttu-id="a2648-264">你还可以 <xref:System.Windows.FrameworkContentElement.DataContext%2A> 在代码中设置。</span><span class="sxs-lookup"><span data-stu-id="a2648-264">You can also set <xref:System.Windows.FrameworkContentElement.DataContext%2A> in code.</span></span>  
  
<a name="xamlPropertyElementUsage_DataContext"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="a2648-265">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="a2648-265">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.DataContext>  
    <dataContextObject />  
  </object.DataContext>  
</object>  
```  
  
<a name="xamlAttributeUsage_DataContext"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a2648-266">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="a2648-266">XAML Attribute Usage</span></span>  
  
```xaml
<object DataContext="bindingUsage"/>  
```

<span data-ttu-id="a2648-267">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a2648-267">-or-</span></span>

```xaml
<object DataContext="{resourceExtension contextResourceKey}"/>  
```

<a name="xamlValues_DataContext"></a>   
## <a name="xaml-values"></a><span data-ttu-id="a2648-268">XAML 值</span><span class="sxs-lookup"><span data-stu-id="a2648-268">XAML Values</span></span>  
 <span data-ttu-id="a2648-269">*dataContextObject*</span><span class="sxs-lookup"><span data-stu-id="a2648-269">*dataContextObject*</span></span>  
 <span data-ttu-id="a2648-270">作为父元素中任何绑定的数据上下文的直接嵌入对象。</span><span class="sxs-lookup"><span data-stu-id="a2648-270">A directly embedded object that serves as data context for any bindings within the parent element.</span></span> <span data-ttu-id="a2648-271">通常，此对象是 <xref:System.Windows.Data.Binding> 或其他 <xref:System.Windows.Data.BindingBase> 子类。</span><span class="sxs-lookup"><span data-stu-id="a2648-271">Typically, this object is a <xref:System.Windows.Data.Binding> or another <xref:System.Windows.Data.BindingBase> subclass.</span></span> <span data-ttu-id="a2648-272">或者，可将用于绑定的任何 CLR 对象类型的原始数据放置在此处，并在以后定义实际绑定。</span><span class="sxs-lookup"><span data-stu-id="a2648-272">Alternatively, raw data of any CLR object type intended for binding may be placed here, with the actual bindings defined later.</span></span>  
  
 <span data-ttu-id="a2648-273">*bindingUsage*</span><span class="sxs-lookup"><span data-stu-id="a2648-273">*bindingUsage*</span></span>  
 <span data-ttu-id="a2648-274">计算结果为适当数据上下文的绑定使用情况。</span><span class="sxs-lookup"><span data-stu-id="a2648-274">A binding usage that evaluates to an appropriate data context.</span></span> <span data-ttu-id="a2648-275">有关详细信息，请参阅 [Binding 标记扩展](/dotnet/framework/wpf/advanced/binding-markup-extension)。</span><span class="sxs-lookup"><span data-stu-id="a2648-275">For details, see [Binding Markup Extension](/dotnet/framework/wpf/advanced/binding-markup-extension).</span></span>  
  
 <span data-ttu-id="a2648-276">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="a2648-276">*resourceExtension*</span></span>  
 <span data-ttu-id="a2648-277">以下项之一： `StaticResource` 、或 `DynamicResource` 。</span><span class="sxs-lookup"><span data-stu-id="a2648-277">One of the following: `StaticResource`, or `DynamicResource`.</span></span> <span data-ttu-id="a2648-278">当引用定义为资源中的对象的原始数据时，将使用此用法。</span><span class="sxs-lookup"><span data-stu-id="a2648-278">This usage is used when referring to raw data defined as an object in resources.</span></span> <span data-ttu-id="a2648-279">请参阅 [XAML 资源](/dotnet/framework/wpf/advanced/xaml-resources)。</span><span class="sxs-lookup"><span data-stu-id="a2648-279">See [XAML Resources](/dotnet/framework/wpf/advanced/xaml-resources).</span></span>  
  
 <span data-ttu-id="a2648-280">*contextResourceKey*</span><span class="sxs-lookup"><span data-stu-id="a2648-280">*contextResourceKey*</span></span>  
 <span data-ttu-id="a2648-281">要从中请求的对象的键标识符 <xref:System.Windows.ResourceDictionary> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-281">The key identifier for the object being requested from within a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
<a name="dependencyPropertyInfo_DataContext"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="a2648-282">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="a2648-282">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="a2648-283">标识符字段</span><span class="sxs-lookup"><span data-stu-id="a2648-283">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.DataContextProperty>|  
|<span data-ttu-id="a2648-284">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="a2648-284">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="a2648-285">下面的示例 <xref:System.Windows.Documents.Paragraph> 通过创建一个新的自定义数据对象，将该对象建立为 <xref:System.Windows.FrameworkContentElement.DataContext%2A> ，并将绑定路径设置为其中的属性，来设置对元素的绑定。</span><span class="sxs-lookup"><span data-stu-id="a2648-285">The following example sets a binding on a <xref:System.Windows.Documents.Paragraph> element, by creating a new custom data object, establishing that object as <xref:System.Windows.FrameworkContentElement.DataContext%2A>, and setting the binding path to a property within it.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#DataContext](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#datacontext)]
 [!code-vb[ContentElementsSmorgasbord#DataContext](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#datacontext)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContextChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.DependencyPropertyChangedEventHandler DataContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.DependencyPropertyChangedEventHandler DataContextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.DataContextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DataContextChanged As DependencyPropertyChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::DependencyPropertyChangedEventHandler ^ DataContextChanged;" />
      <MemberSignature Language="F#" Value="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " Usage="member this.DataContextChanged : System.Windows.DependencyPropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyPropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-286">当此元素的数据上下文更改时发生。</span><span class="sxs-lookup"><span data-stu-id="a2648-286">Occurs when this element's data context changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-287">有关数据上下文和数据绑定的说明，请参阅 [数据绑定概述](/dotnet/framework/wpf/data/data-binding-overview)。</span><span class="sxs-lookup"><span data-stu-id="a2648-287">For an explanation of data contexts and data binding, see [Data Binding Overview](/dotnet/framework/wpf/data/data-binding-overview).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="a2648-288">当某个元素 <xref:System.Windows.FrameworkContentElement.DataContext%2A> 发生更改时，此元素上的所有数据绑定属性都可能会受到影响。</span><span class="sxs-lookup"><span data-stu-id="a2648-288">When an element's <xref:System.Windows.FrameworkContentElement.DataContext%2A> changes, all data-bound properties on this element are potentially affected.</span></span> <span data-ttu-id="a2648-289">这适用于作为当前元素的子代元素的所有元素，这些元素继承数据上下文以及当前元素本身。</span><span class="sxs-lookup"><span data-stu-id="a2648-289">This applies to any elements that are descendant elements of the current element, which inherit the data context, and also the current element itself.</span></span> <span data-ttu-id="a2648-290">所有此类绑定都会重新解释新的 <xref:System.Windows.FrameworkContentElement.DataContext%2A> ，以反映绑定中的新值。</span><span class="sxs-lookup"><span data-stu-id="a2648-290">All such bindings re-interpret the new <xref:System.Windows.FrameworkContentElement.DataContext%2A> to reflect the new value in bindings.</span></span> <span data-ttu-id="a2648-291">相对于引发事件，不能保证这些更改的顺序 <xref:System.Windows.FrameworkContentElement.DataContextChanged> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-291">There is no guarantee made about the order of these changes relative to the raising of the <xref:System.Windows.FrameworkContentElement.DataContextChanged> event.</span></span>  <span data-ttu-id="a2648-292">更改可以在事件之前、事件之后或任何组合中发生。</span><span class="sxs-lookup"><span data-stu-id="a2648-292">The changes can occur before the event, after the event, or in any mixture.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataContextProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty DataContextProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty DataContextProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.DataContextProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DataContextProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ DataContextProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DataContextProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.DataContextProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-293">标识 <see cref="P:System.Windows.FrameworkContentElement.DataContext" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-293">Identifies the <see cref="P:System.Windows.FrameworkContentElement.DataContext" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKey">
      <MemberSignature Language="C#" Value="protected internal object DefaultStyleKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultStyleKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.DefaultStyleKey" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property DefaultStyleKey As Object" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Object ^ DefaultStyleKey { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultStyleKey : obj with get, set" Usage="System.Windows.FrameworkContentElement.DefaultStyleKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-294">获取或设置用于在主题中查找此控件的样式模板的键。</span><span class="sxs-lookup"><span data-stu-id="a2648-294">Gets or sets the key to use to find the style template for this control in themes.</span></span></summary>
        <value><span data-ttu-id="a2648-295">样式键。</span><span class="sxs-lookup"><span data-stu-id="a2648-295">The style key.</span></span> <span data-ttu-id="a2648-296">为了在主题样式查找中正确工作，此值应为样式化元素的 <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-296">To work correctly as part of theme style lookup, this value is expected to be the <see cref="T:System.Type" /> of the element being styled.</span></span> <span data-ttu-id="a2648-297"><see langword="null" /> 在特定情况下，是可接受的值。</span><span class="sxs-lookup"><span data-stu-id="a2648-297"><see langword="null" /> is an accepted value for a certain case.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-298">此属性通常不通过其任何直接的 setter 设置。</span><span class="sxs-lookup"><span data-stu-id="a2648-298">This property is typically not set through any of its direct setters.</span></span> <span data-ttu-id="a2648-299">相反，每次创建新子类时，都要重写此依赖项属性的特定于类型的元数据。</span><span class="sxs-lookup"><span data-stu-id="a2648-299">Instead, you override the type-specific metadata of this dependency property every time you create a new subclass.</span></span> <span data-ttu-id="a2648-300">在对子类的 <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> <xref:System.Windows.FrameworkContentElement.DefaultStyleKeyProperty> 静态构造函数中，对标识符调用方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-300">When you subclass, call the <xref:System.Windows.DependencyProperty.OverrideMetadata%2A> method against the <xref:System.Windows.FrameworkContentElement.DefaultStyleKeyProperty> identifier, within the static constructor of the control subclass.</span></span>  
  
 <span data-ttu-id="a2648-301">例如，像这样的内联类 <xref:System.Windows.Documents.Bold> 实际上 <xref:System.Windows.FrameworkContentElement.DefaultStyleKey%2A> 在其静态构造函数中重写元数据并公开了多个实例构造函数的实现非常少。</span><span class="sxs-lookup"><span data-stu-id="a2648-301">For instance, an inline class such as <xref:System.Windows.Documents.Bold> actually has very little implementation beyond overriding the <xref:System.Windows.FrameworkContentElement.DefaultStyleKey%2A> metadata in its static constructor, and exposing several instance constructors.</span></span> <span data-ttu-id="a2648-302">通过 <xref:System.Windows.Documents.Bold> <xref:System.Windows.Documents.TextElement.FontWeight%2A> 将的 <xref:System.Windows.FontWeights.Bold%2A> 默认值设置为，在引用的主题样式内实现了标记 <xref:System.Windows.FrameworkContentElement.DefaultStyleKey%2A> 周围的元素获得的属性 `typeof(Bold)` 。</span><span class="sxs-lookup"><span data-stu-id="a2648-302">The fact that elements surrounded by the <xref:System.Windows.Documents.Bold> tag gain a <xref:System.Windows.Documents.TextElement.FontWeight%2A> property of <xref:System.Windows.FontWeights.Bold%2A> is implemented within the theme style that was referenced by setting the default value of <xref:System.Windows.FrameworkContentElement.DefaultStyleKey%2A> to `typeof(Bold)`.</span></span>  
  
 <span data-ttu-id="a2648-303">如果希望你的元素或控件特意不使用主题样式，请将 <xref:System.Windows.FrameworkContentElement.OverridesDefaultStyle%2A> 属性设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="a2648-303">If you want your element or control to deliberately not use theme styles, set the <xref:System.Windows.FrameworkContentElement.OverridesDefaultStyle%2A> property to `true`.</span></span>  
  
<a name="dependencyPropertyInfo_DefaultStyleKey"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="a2648-304">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="a2648-304">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="a2648-305">标识符字段</span><span class="sxs-lookup"><span data-stu-id="a2648-305">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.DefaultStyleKeyProperty>|  
|<span data-ttu-id="a2648-306">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="a2648-306">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStyleKeyProperty">
      <MemberSignature Language="C#" Value="protected internal static readonly System.Windows.DependencyProperty DefaultStyleKeyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field familyorassembly static initonly class System.Windows.DependencyProperty DefaultStyleKeyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.DefaultStyleKeyProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Shared ReadOnly DefaultStyleKeyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="protected public: static initonly System::Windows::DependencyProperty ^ DefaultStyleKeyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultStyleKeyProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.DefaultStyleKeyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-307">标识 <see cref="P:System.Windows.FrameworkContentElement.DefaultStyleKey" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-307">Identifies the <see cref="P:System.Windows.FrameworkContentElement.DefaultStyleKey" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public virtual void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="frameworkContentElement.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a2648-308">已在初始化元素后立即调用。</span><span class="sxs-lookup"><span data-stu-id="a2648-308">Called immediately after an element is initialized.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-309">实现此方法可提供在元素加载过程中初始化元素时应发生的特殊处理。</span><span class="sxs-lookup"><span data-stu-id="a2648-309">Implement this method to provide special handling that should occur when your element is initialized during the element loading process.</span></span>  
  
 <span data-ttu-id="a2648-310">你的实现应调用基实现，因为基础 (默认值) 实现设置某些内部标志以跟踪初始化。</span><span class="sxs-lookup"><span data-stu-id="a2648-310">Your implementation should call the base implementation, because the base (default) implementation sets some internal flags to keep track of initialization.</span></span>  
  
 <span data-ttu-id="a2648-311">如果 <xref:System.Windows.FrameworkContentElement.BeginInit%2A> 以前调用过，则基实现将引发 <xref:System.Windows.FrameworkContentElement.Initialized> 事件。</span><span class="sxs-lookup"><span data-stu-id="a2648-311">If <xref:System.Windows.FrameworkContentElement.BeginInit%2A> was previously called, the base implementation will raise the <xref:System.Windows.FrameworkContentElement.Initialized> event.</span></span> <span data-ttu-id="a2648-312">否则，如果 <xref:System.Windows.FrameworkContentElement.BeginInit%2A> 未调用或无法确定是否调用了，则 <xref:System.Windows.FrameworkContentElement.BeginInit%2A> 不会引发事件。</span><span class="sxs-lookup"><span data-stu-id="a2648-312">Otherwise, if <xref:System.Windows.FrameworkContentElement.BeginInit%2A> was not called or it could not be determined whether <xref:System.Windows.FrameworkContentElement.BeginInit%2A> was called, the event is not raised.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindName">
      <MemberSignature Language="C#" Value="public object FindName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.FindName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindName (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.FindName : string -&gt; obj" Usage="frameworkContentElement.FindName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="a2648-313">要搜索的元素的名称。</span><span class="sxs-lookup"><span data-stu-id="a2648-313">Name of the element to search for.</span></span></param>
        <summary><span data-ttu-id="a2648-314">查找具有提供的标识符名的元素。</span><span class="sxs-lookup"><span data-stu-id="a2648-314">Finds an element that has the provided identifier name.</span></span></summary>
        <returns><span data-ttu-id="a2648-315">请求的元素。</span><span class="sxs-lookup"><span data-stu-id="a2648-315">The requested element.</span></span> <span data-ttu-id="a2648-316">如果未找到匹配的元素，则可以为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-316">May be <see langword="null" /> if no matching element was found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-317">如果此元素包含子元素，则会以递归方式搜索所请求的命名元素的子元素。</span><span class="sxs-lookup"><span data-stu-id="a2648-317">If this element has child elements, these child elements are all searched recursively for the requested named element.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2648-318">下面的示例在页上引用的元素中设置按名称找到的元素的属性 <xref:System.Windows.Documents.FlowDocument> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-318">The following example sets a property on an element found by name within a referenced <xref:System.Windows.Documents.FlowDocument> on a page.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#FindName](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#findname)]
 [!code-vb[ContentElementsSmorgasbord#FindName](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#findname)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindResource">
      <MemberSignature Language="C#" Value="public object FindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object FindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.FindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ FindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.FindResource : obj -&gt; obj" Usage="frameworkContentElement.FindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey"><span data-ttu-id="a2648-319">要查找的资源的键标识符。</span><span class="sxs-lookup"><span data-stu-id="a2648-319">Key identifier of the resource to be found.</span></span></param>
        <summary><span data-ttu-id="a2648-320">搜索具有指定键的资源，如果找不到请求的资源，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="a2648-320">Searches for a resource with the specified key, and will throw an exception if the requested resource is not found.</span></span></summary>
        <returns><span data-ttu-id="a2648-321">找到的资源，如果找不到任何匹配资源，则为 <see langword="null" />（如果为 <see langword="null" />，则还会引发异常）。</span><span class="sxs-lookup"><span data-stu-id="a2648-321">The found resource, or <see langword="null" /> if no matching resource was found (but will also throw an exception if <see langword="null" />).</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <span data-ttu-id="a2648-322">如果对找不到的键调用此方法，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="a2648-322">If you call this method for a key that cannot be found, an exception is thrown.</span></span> <span data-ttu-id="a2648-323">如果你不希望处理此情况的异常，则应改为调用 <xref:System.Windows.FrameworkContentElement.TryFindResource%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-323">If you do not want to handle exceptions for this case, you should instead call <xref:System.Windows.FrameworkContentElement.TryFindResource%2A>.</span></span> <span data-ttu-id="a2648-324"><xref:System.Windows.FrameworkContentElement.TryFindResource%2A>`null`如果未找到资源，则返回，并且不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="a2648-324"><xref:System.Windows.FrameworkContentElement.TryFindResource%2A> returns `null` when no resource is found, and does not throw an exception.</span></span>  
  
 <span data-ttu-id="a2648-325">如果在调用元素上找不到该资源，则使用逻辑树搜索父树，其方式与在运行时该键请求资源时搜索树的方式相同。</span><span class="sxs-lookup"><span data-stu-id="a2648-325">If the resource is not found on the calling element, the parent tree is searched using the logical tree, in the same way that the tree would be searched if a resource were requested by key at run-time.</span></span>  
  
 <span data-ttu-id="a2648-326">通常，您会立即将返回值强制转换为您尝试通过返回的资源值设置的属性的类型。</span><span class="sxs-lookup"><span data-stu-id="a2648-326">Typically you would immediately cast the return value to the type of the property that you were attempting to set with the returned resource value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2648-327">下面的示例查找标记中定义的资源，并将其应用到元素的特定属性，以响应路由事件。</span><span class="sxs-lookup"><span data-stu-id="a2648-327">The following example finds a resource as defined in markup and applies it to a certain property of an element in response to a routed event.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#FindResource](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#findresource)]
 [!code-vb[ContentElementsSmorgasbord#FindResource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#findresource)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Windows.ResourceReferenceKeyNotFoundException"><span data-ttu-id="a2648-328">找不到请求的资源键。</span><span class="sxs-lookup"><span data-stu-id="a2648-328">The requested resource key was not found.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="a2648-329"><paramref name="resourceKey" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-329"><paramref name="resourceKey" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style FocusVisualStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style FocusVisualStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.FocusVisualStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusVisualStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ FocusVisualStyle { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FocusVisualStyle : System.Windows.Style with get, set" Usage="System.Windows.FrameworkContentElement.FocusVisualStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-330">获取或设置一个对象，该对象允许自定义此元素在捕获到键盘焦点时要应用于此元素的外观、效果或其他样式特征。</span><span class="sxs-lookup"><span data-stu-id="a2648-330">Gets or sets an object that enables customization of appearance, effects, or other style characteristics that will apply to this element when it captures keyboard focus.</span></span></summary>
        <value><span data-ttu-id="a2648-331">要应用于焦点的所需样式。</span><span class="sxs-lookup"><span data-stu-id="a2648-331">The desired style to apply on focus.</span></span> <span data-ttu-id="a2648-332">该依赖属性中声明的默认值是一个空的静态 <see cref="T:System.Windows.Style" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-332">The default value as declared in the dependency property is an empty static <see cref="T:System.Windows.Style" />.</span></span> <span data-ttu-id="a2648-333">但是，运行时的有效值通常是（但并非总是）控件的主题支持所提供的样式。</span><span class="sxs-lookup"><span data-stu-id="a2648-333">However, the effective value at run time is often (but not always) a style as supplied by theme support for controls.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-334">在 XAML 中设置此属性时，样式几乎始终定义为资源，而不是作为元素内联，并且该资源通常作为引用 <xref:System.Windows.StaticResourceExtension> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-334">When setting this property in XAML, styles are almost always defined as a resource, rather than inline as an element, and that resource is usually referenced as a <xref:System.Windows.StaticResourceExtension>.</span></span>  
  
 <span data-ttu-id="a2648-335">请注意，此属性会影响视觉外观，但不会在元数据中进行报告。</span><span class="sxs-lookup"><span data-stu-id="a2648-335">Note that this property affects visual appearance but does not report so in metadata.</span></span> <span data-ttu-id="a2648-336">这是因为视觉外观更改是事件驱动的，可能不会在任何时候都适用，因此通常不会在元数据中报告任何视觉对象或布局信息。</span><span class="sxs-lookup"><span data-stu-id="a2648-336">This is because the visual appearance change is event-driven and may not apply at all times, and thus should not generally report any visual or layout information in metadata.</span></span>  
  
 <span data-ttu-id="a2648-337">从概念上讲，应用于控件的焦点的视觉行为应该与元素相关。</span><span class="sxs-lookup"><span data-stu-id="a2648-337">Conceptually, the visual behavior of focus applied to a control should be coherent from element to element.</span></span> <span data-ttu-id="a2648-338">强制一致性的最明智方式是仅在编写整个主题时更改焦点视觉样式。</span><span class="sxs-lookup"><span data-stu-id="a2648-338">The most sensible way to enforce coherence is to only change the focus visual style if you are composing an entire theme.</span></span> <span data-ttu-id="a2648-339">对单独的样式设置此属性，而不是主题的一部分，这并不是此属性的预期用法，因为这可能会导致与键盘焦点有关的用户体验混乱。</span><span class="sxs-lookup"><span data-stu-id="a2648-339">Setting this property on individual styles and not as part of a theme is not the intended usage of this property, because it may lead to a confusing user experience regarding keyboard focus.</span></span> <span data-ttu-id="a2648-340">如果您要采用特意在主题上不一致的特定于元素的行为，更好的方法是使用各个输入状态属性（如或）的样式中的触发器， <xref:System.Windows.UIElement.IsFocused%2A> <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A> 并以不会直观干扰任何现有焦点视觉样式的方式来执行此操作。</span><span class="sxs-lookup"><span data-stu-id="a2648-340">If you are intending element-specific behavior that is deliberately not coherent across a theme, a much better approach is to use triggers in styles for individual input state properties, such as <xref:System.Windows.UIElement.IsFocused%2A> or <xref:System.Windows.UIElement.IsKeyboardFocusWithin%2A>, and to do so in a way that does not visually interfere with any existing focus visual style.</span></span> <span data-ttu-id="a2648-341">有关和替代焦点属性的设计意图的详细信息 <xref:System.Windows.FrameworkContentElement.FocusVisualStyle%2A> ，请参阅 [在控件中的焦点样式和 FocusVisualStyle](/dotnet/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle)。</span><span class="sxs-lookup"><span data-stu-id="a2648-341">For more information on the design intention of <xref:System.Windows.FrameworkContentElement.FocusVisualStyle%2A> and alternative focus properties, see [Styling for Focus in Controls, and FocusVisualStyle](/dotnet/framework/wpf/advanced/styling-for-focus-in-controls-and-focusvisualstyle).</span></span>  
  
<a name="xamlAttributeUsage_FocusVisualStyle"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a2648-342">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="a2648-342">XAML Attribute Usage</span></span>  
  
```  
<object FocusVisualStyle="{resourceExtension styleResourceKey}"/>  
```  
  
<a name="xamlPropertyElementUsage_FocusVisualStyle"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="a2648-343">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="a2648-343">XAML Property Element Usage</span></span>  
  
<a name="xamlValues_FocusVisualStyle"></a>   
## <a name="xaml-values"></a><span data-ttu-id="a2648-344">XAML 值</span><span class="sxs-lookup"><span data-stu-id="a2648-344">XAML Values</span></span>  
 <span data-ttu-id="a2648-345">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="a2648-345">*resourceExtension*</span></span>  
 <span data-ttu-id="a2648-346">以下项之一：、或。</span><span class="sxs-lookup"><span data-stu-id="a2648-346">One of the following: , or .</span></span> <span data-ttu-id="a2648-347">请参阅 [XAML 资源](/dotnet/framework/wpf/advanced/xaml-resources)。</span><span class="sxs-lookup"><span data-stu-id="a2648-347">See [XAML Resources](/dotnet/framework/wpf/advanced/xaml-resources).</span></span>  
  
 <span data-ttu-id="a2648-348">*styleResourceKey*</span><span class="sxs-lookup"><span data-stu-id="a2648-348">*styleResourceKey*</span></span>  
 <span data-ttu-id="a2648-349">标识所请求的样式的键。</span><span class="sxs-lookup"><span data-stu-id="a2648-349">The key that identifies the style being requested.</span></span> <span data-ttu-id="a2648-350">键引用中的现有资源 <xref:System.Windows.ResourceDictionary> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-350">The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a2648-351">属性元素语法在技术上是可行的，但不建议这样做。</span><span class="sxs-lookup"><span data-stu-id="a2648-351">Property element syntax is technically possible, but not recommended.</span></span> <span data-ttu-id="a2648-352">请参阅 [内联样式和模板](/dotnet/framework/wpf/advanced/inline-styles-and-templates)。</span><span class="sxs-lookup"><span data-stu-id="a2648-352">See [Inline Styles and Templates](/dotnet/framework/wpf/advanced/inline-styles-and-templates).</span></span>  <span data-ttu-id="a2648-353">使用 [TemplateBinding](/dotnet/framework/wpf/advanced/templatebinding-markup-extension) 或的绑定引用 <xref:System.Windows.Data.Binding> 也可能发生，但情况并不常见。</span><span class="sxs-lookup"><span data-stu-id="a2648-353">A binding reference using [TemplateBinding](/dotnet/framework/wpf/advanced/templatebinding-markup-extension) or <xref:System.Windows.Data.Binding> is also possible, but uncommon.</span></span>  
  
<a name="dependencyPropertyInfo_FocusVisualStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="a2648-354">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="a2648-354">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="a2648-355">标识符字段</span><span class="sxs-lookup"><span data-stu-id="a2648-355">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.FocusVisualStyleProperty>|  
|<span data-ttu-id="a2648-356">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="a2648-356">Metadata properties set to `true`</span></span>|<span data-ttu-id="a2648-357">无</span><span class="sxs-lookup"><span data-stu-id="a2648-357">None</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusVisualStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FocusVisualStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FocusVisualStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.FocusVisualStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly FocusVisualStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ FocusVisualStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable FocusVisualStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.FocusVisualStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-358">标识 <see cref="P:System.Windows.FrameworkContentElement.FocusVisualStyle" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-358">Identifies the <see cref="P:System.Windows.FrameworkContentElement.FocusVisualStyle" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceCursor">
      <MemberSignature Language="C#" Value="public bool ForceCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ForceCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.ForceCursor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForceCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ForceCursor { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ForceCursor : bool with get, set" Usage="System.Windows.FrameworkContentElement.ForceCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-359">获取或设置一个值，该值指示此是否 <see cref="T:System.Windows.FrameworkContentElement" /> 应强制用户界面 (UI) 按照此实例的属性所声明的方式呈现光标 <see cref="P:System.Windows.FrameworkContentElement.Cursor" /> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-359">Gets or sets a value indicating whether this <see cref="T:System.Windows.FrameworkContentElement" /> should force the user interface (UI) to render the cursor as declared by this instance's <see cref="P:System.Windows.FrameworkContentElement.Cursor" /> property.</span></span></summary>
        <value><span data-ttu-id="a2648-360">在光标位于此元素上时，强制光标呈现以将此实例的设置用于光标（包括在所有子元素上），则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-360"><see langword="true" /> to force cursor presentation while over this element to use this instance's setting for the cursor (including on all child elements); otherwise <see langword="false" />.</span></span> <span data-ttu-id="a2648-361">默认值是 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-361">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-362">将此属性设置为 `true` 将覆盖由子元素建立的游标首选项。</span><span class="sxs-lookup"><span data-stu-id="a2648-362">Setting this property to `true` will override the cursor preferences established by child elements.</span></span> <span data-ttu-id="a2648-363">通常，在应用程序 UI 中执行此操作可能会使用户感到困惑，特别是当子元素尝试指定游标时。</span><span class="sxs-lookup"><span data-stu-id="a2648-363">Doing so in general application UI might be confusing for the user, particularly if child elements are attempting to specify cursors.</span></span> <span data-ttu-id="a2648-364">设置 <xref:System.Windows.FrameworkElement.ForceCursor%2A> 更适用于控件子类或复合方案。</span><span class="sxs-lookup"><span data-stu-id="a2648-364">Setting <xref:System.Windows.FrameworkElement.ForceCursor%2A> is more appropriate in control subclassing or compositing scenarios.</span></span>  
  
<a name="dependencyPropertyInfo_ForceCursor"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="a2648-365">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="a2648-365">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="a2648-366">标识符字段</span><span class="sxs-lookup"><span data-stu-id="a2648-366">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ForceCursorProperty>|  
|<span data-ttu-id="a2648-367">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="a2648-367">Metadata properties set to `true`</span></span>|<span data-ttu-id="a2648-368">无</span><span class="sxs-lookup"><span data-stu-id="a2648-368">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="a2648-369">下面的示例在元素上强制游标。</span><span class="sxs-lookup"><span data-stu-id="a2648-369">The following example forces the cursor while over the element.</span></span>  
  
 [!code-xaml[ForceCursor#ForceCursor](~/samples/snippets/csharp/VS_Snippets_Wpf/ForceCursor/CS/default.xaml#forcecursor)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceCursorProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ForceCursorProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ForceCursorProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ForceCursorProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ForceCursorProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ForceCursorProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ForceCursorProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.ForceCursorProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-370">标识 <see cref="P:System.Windows.FrameworkContentElement.ForceCursor" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-370">Identifies the <see cref="P:System.Windows.FrameworkContentElement.ForceCursor" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBindingExpression">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression GetBindingExpression (System.Windows.DependencyProperty dp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression GetBindingExpression(class System.Windows.DependencyProperty dp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.GetBindingExpression(System.Windows.DependencyProperty)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBindingExpression (dp As DependencyProperty) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ GetBindingExpression(System::Windows::DependencyProperty ^ dp);" />
      <MemberSignature Language="F#" Value="member this.GetBindingExpression : System.Windows.DependencyProperty -&gt; System.Windows.Data.BindingExpression" Usage="frameworkContentElement.GetBindingExpression dp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="a2648-371">从中获取绑定的目标 <see cref="T:System.Windows.DependencyProperty" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-371">The target <see cref="T:System.Windows.DependencyProperty" /> from which to get the binding.</span></span></param>
        <summary><span data-ttu-id="a2648-372">获取指定属性的绑定的 <see cref="T:System.Windows.Data.BindingExpression" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-372">Gets the <see cref="T:System.Windows.Data.BindingExpression" /> for the specified property's binding.</span></span></summary>
        <returns><span data-ttu-id="a2648-373">如果目标为数据绑定，则返回 <see cref="T:System.Windows.Data.BindingExpression" />；否则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-373">Returns a <see cref="T:System.Windows.Data.BindingExpression" /> if the target is data bound; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="a2648-374">下面的示例通过查询属性来检索绑定。</span><span class="sxs-lookup"><span data-stu-id="a2648-374">The following example retrieves a binding by querying a property.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#GetBindingExpression](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#getbindingexpression)]
 [!code-vb[ContentElementsSmorgasbord#GetBindingExpression](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#getbindingexpression)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUIParentCore">
      <MemberSignature Language="C#" Value="protected internal override System.Windows.DependencyObject GetUIParentCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Windows.DependencyObject GetUIParentCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.GetUIParentCore" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetUIParentCore () As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Windows::DependencyObject ^ GetUIParentCore();" />
      <MemberSignature Language="F#" Value="override this.GetUIParentCore : unit -&gt; System.Windows.DependencyObject" Usage="frameworkContentElement.GetUIParentCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a2648-375">如果没有视觉父级，则返回此元素的备用逻辑父级。</span><span class="sxs-lookup"><span data-stu-id="a2648-375">Returns an alternative logical parent for this element if there is no visual parent.</span></span> <span data-ttu-id="a2648-376">在这种情况下，<see cref="T:System.Windows.FrameworkContentElement" /> 父级始终与 <see cref="P:System.Windows.FrameworkContentElement.Parent" /> 属性具有相同值。</span><span class="sxs-lookup"><span data-stu-id="a2648-376">In this case, a <see cref="T:System.Windows.FrameworkContentElement" /> parent is always the same value as the <see cref="P:System.Windows.FrameworkContentElement.Parent" /> property.</span></span></summary>
        <returns><span data-ttu-id="a2648-377">当此方法的 WPF 框架级别实现具有非视觉父级连接时，即返回 <see langword="null" /> 之外的内容。</span><span class="sxs-lookup"><span data-stu-id="a2648-377">Returns something other than <see langword="null" /> whenever a WPF framework-level implementation of this method has a non-visual parent connection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-378">默认实现返回预期的单个可视父级。</span><span class="sxs-lookup"><span data-stu-id="a2648-378">The default implementation returns the expected single visual parent.</span></span> <span data-ttu-id="a2648-379">自定义实现可能返回备用的父关系。</span><span class="sxs-lookup"><span data-stu-id="a2648-379">Custom implementations might return alternate parent relationships.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Initialized;" />
      <MemberSignature Language="F#" Value="member this.Initialized : EventHandler " Usage="member this.Initialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-380">初始化此 <see cref="T:System.Windows.FrameworkContentElement" /> 时发生。</span><span class="sxs-lookup"><span data-stu-id="a2648-380">Occurs when this <see cref="T:System.Windows.FrameworkContentElement" /> is initialized.</span></span> <span data-ttu-id="a2648-381">这与 <see cref="P:System.Windows.FrameworkContentElement.IsInitialized" /> 属性值从 <see langword="false" />（或未定义）更改为 <see langword="true" /> 的情况相符。</span><span class="sxs-lookup"><span data-stu-id="a2648-381">This coincides with cases where the value of the <see cref="P:System.Windows.FrameworkContentElement.IsInitialized" /> property changes from <see langword="false" /> (or undefined) to <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-382">当 <xref:System.Windows.FrameworkContentElement.EndInit%2A> 调用或方法时，将引发此事件 <xref:System.Windows.FrameworkContentElement.OnInitialized%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-382">This event will be raised whenever the <xref:System.Windows.FrameworkContentElement.EndInit%2A> or <xref:System.Windows.FrameworkContentElement.OnInitialized%2A> methods are called.</span></span> <span data-ttu-id="a2648-383">对这些方法的调用可能已被有意的代码或 XAML) 加载过程的 Extensible Application Markup Language (。</span><span class="sxs-lookup"><span data-stu-id="a2648-383">Calls to these methods could have been made by deliberate code, or by the Extensible Application Markup Language (XAML) loading process.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputScope">
      <MemberSignature Language="C#" Value="public System.Windows.Input.InputScope InputScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputScope InputScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.InputScope" />
      <MemberSignature Language="VB.NET" Value="Public Property InputScope As InputScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::InputScope ^ InputScope { System::Windows::Input::InputScope ^ get(); void set(System::Windows::Input::InputScope ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InputScope : System.Windows.Input.InputScope with get, set" Usage="System.Windows.FrameworkContentElement.InputScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-384">获取或设置此 <see cref="T:System.Windows.FrameworkContentElement" /> 使用的输入的上下文。</span><span class="sxs-lookup"><span data-stu-id="a2648-384">Gets or sets the context for input used by this <see cref="T:System.Windows.FrameworkContentElement" />.</span></span></summary>
        <value><span data-ttu-id="a2648-385">解释输入范围，在该输入范围内修改从其他输入法输入的方式。</span><span class="sxs-lookup"><span data-stu-id="a2648-385">The input scope, which modifies how input from alternative input methods is interpreted.</span></span> <span data-ttu-id="a2648-386">默认值为 <see langword="null" />（这将导致对命令的默认处理）。</span><span class="sxs-lookup"><span data-stu-id="a2648-386">The default value is <see langword="null" /> (which results in a default handling of commands).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-387">此依赖属性继承属性值。</span><span class="sxs-lookup"><span data-stu-id="a2648-387">This dependency property inherits property values.</span></span> <span data-ttu-id="a2648-388">如果有子元素没有 <xref:System.Windows.FrameworkElement.InputScope%2A> 通过本地值或样式建立的其他值，则属性系统会将该值设置为 <xref:System.Windows.FrameworkElement.InputScope%2A> 已分配此值的最近父元素的值。</span><span class="sxs-lookup"><span data-stu-id="a2648-388">If there are child elements with no other value for <xref:System.Windows.FrameworkElement.InputScope%2A> established through local values or styles, the property system will set the value to be the <xref:System.Windows.FrameworkElement.InputScope%2A> value of the nearest parent element with this value assigned.</span></span>  
  
 <span data-ttu-id="a2648-389">尽管列出了 XAML 语法用法并在语法上允许使用，但在 XAML 中设置此属性并不常见。</span><span class="sxs-lookup"><span data-stu-id="a2648-389">Although a XAML syntax usage is listed and is syntactically allowed, setting this property in XAML is not common.</span></span>  
  
<a name="dependencyPropertyInfo_InputScope"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="a2648-390">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="a2648-390">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="a2648-391">标识符字段</span><span class="sxs-lookup"><span data-stu-id="a2648-391">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.InputScopeProperty>|  
|<span data-ttu-id="a2648-392">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="a2648-392">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputScopeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty InputScopeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty InputScopeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.InputScopeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InputScopeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ InputScopeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable InputScopeProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.InputScopeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-393">标识 <see cref="P:System.Windows.FrameworkContentElement.InputScope" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-393">Identifies the <see cref="P:System.Windows.FrameworkContentElement.InputScope" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitialized : bool" Usage="System.Windows.FrameworkContentElement.IsInitialized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-394">获取一个值，该值指示此元素是否已初始化，无论是作为 Extensible Application Markup Language (XAML) 加载的，还是显式调用其 <see cref="M:System.Windows.FrameworkContentElement.EndInit" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-394">Gets a value indicating whether this element has been initialized, either by being loaded as Extensible Application Markup Language (XAML), or by explicitly having its <see cref="M:System.Windows.FrameworkContentElement.EndInit" /> method called.</span></span></summary>
        <value><span data-ttu-id="a2648-395">如果已通过上述加载或方法调用初始化了此元素，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-395"><see langword="true" /> if the element is initialized per the aforementioned loading or method calls; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-396">`true`如果此元素已在元素树中移动，使其具有新的父元素，并因此再次加载，则此属性也可能为。</span><span class="sxs-lookup"><span data-stu-id="a2648-396">This property may also be `true` if this element has been moved within the element tree such that it has a new parent element, and therefore becomes reloaded again.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkContentElement.BeginInit" />
      </Docs>
    </Member>
    <Member MemberName="IsLoaded">
      <MemberSignature Language="C#" Value="public bool IsLoaded { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoaded" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.IsLoaded" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLoaded As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLoaded { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLoaded : bool" Usage="System.Windows.FrameworkContentElement.IsLoaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-397">获取一个值，该值指示是否已加载此元素以供显示。</span><span class="sxs-lookup"><span data-stu-id="a2648-397">Gets a value indicating whether this element has been loaded for presentation.</span></span></summary>
        <value><span data-ttu-id="a2648-398">如果当前元素附加到元素树且已呈现，则为 <see langword="true" />；如果元素从未附加到加载的元素树中，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-398"><see langword="true" /> if the current element is attached to an element tree and has been rendered; <see langword="false" /> if the element has never been attached to a loaded element tree.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-399">从新构造的实例开始，此属性 `false` 将会启动，并且在 `true` 设置为之后仍保持不变， `true` 即使随后由代码删除也是如此。</span><span class="sxs-lookup"><span data-stu-id="a2648-399">From a newly constructed instance, this property starts off `false`, and remains `true` once it is set to `true`, even if subsequently removed by  code.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2648-400">下面的示例代码使用 <xref:System.Windows.FrameworkContentElement.IsLoaded%2A> 作为条件检查来确保 `displayData` (未显示的函数) 将在该页面上加载要处理的有效元素（作为按需处理程序的一部分）。</span><span class="sxs-lookup"><span data-stu-id="a2648-400">The following example code uses <xref:System.Windows.FrameworkContentElement.IsLoaded%2A> as a conditional check to assure that a function `displayData` (not shown) will have valid elements loaded on the page to work against, as part of an on-demand handler.</span></span> <span data-ttu-id="a2648-401">相同的逻辑作为的事件处理程序运行 <xref:System.Windows.FrameworkContentElement.Loaded> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-401">That same logic is run as an event handler for <xref:System.Windows.FrameworkContentElement.Loaded>.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#IsLoaded](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#isloaded)]
 [!code-vb[ContentElementsSmorgasbord#IsLoaded](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#isloaded)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.FrameworkContentElement.Loaded" />
      </Docs>
    </Member>
    <Member MemberName="Language">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.XmlLanguage Language { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.XmlLanguage Language" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Language" />
      <MemberSignature Language="VB.NET" Value="Public Property Language As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::XmlLanguage ^ Language { System::Windows::Markup::XmlLanguage ^ get(); void set(System::Windows::Markup::XmlLanguage ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Language : System.Windows.Markup.XmlLanguage with get, set" Usage="System.Windows.FrameworkContentElement.Language" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-402">获取或设置应用于单个元素的本地化/全球化语言信息。</span><span class="sxs-lookup"><span data-stu-id="a2648-402">Gets or sets localization/globalization language information that applies to an individual element.</span></span></summary>
        <value><span data-ttu-id="a2648-403">此元素的区域性信息。</span><span class="sxs-lookup"><span data-stu-id="a2648-403">The culture information for this element.</span></span> <span data-ttu-id="a2648-404">默认值是一个 <see cref="T:System.Windows.Markup.XmlLanguage" /> 实例，它的 <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> 值设置为字符串“en-US”。</span><span class="sxs-lookup"><span data-stu-id="a2648-404">The default value is an <see cref="T:System.Windows.Markup.XmlLanguage" /> instance with its <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> value set to the string "en-US".</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-405">字符串格式遵循 RFC 3066 标准。</span><span class="sxs-lookup"><span data-stu-id="a2648-405">The string formats follow the RFC 3066 standard.</span></span> <span data-ttu-id="a2648-406">例如，美国英语为 "en-us"。</span><span class="sxs-lookup"><span data-stu-id="a2648-406">For example, U.S. English is "en-US".</span></span> <span data-ttu-id="a2648-407"><xref:System.Windows.Markup.XmlLanguage>有关值和格式的详细信息，请参阅。</span><span class="sxs-lookup"><span data-stu-id="a2648-407">See <xref:System.Windows.Markup.XmlLanguage> for more information on the values and format.</span></span>  
  
 <span data-ttu-id="a2648-408">此依赖属性继承属性值。</span><span class="sxs-lookup"><span data-stu-id="a2648-408">This dependency property inherits property values.</span></span> <span data-ttu-id="a2648-409">如果有子元素没有 <xref:System.Windows.FrameworkElement.Language%2A> 通过本地值或样式建立的其他值，则属性系统会将该值设置为 <xref:System.Windows.FrameworkElement.Language%2A> 已分配此值的最近父元素的值。</span><span class="sxs-lookup"><span data-stu-id="a2648-409">If there are child elements with no other value for <xref:System.Windows.FrameworkElement.Language%2A> established through local values or styles, the property system will set the value to be the <xref:System.Windows.FrameworkElement.Language%2A> value of the nearest parent element with this value assigned.</span></span>  
  
<a name="dependencyPropertyInfo_CultureInfo"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="a2648-410">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="a2648-410">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="a2648-411">标识符字段</span><span class="sxs-lookup"><span data-stu-id="a2648-411">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.LanguageProperty>|  
|<span data-ttu-id="a2648-412">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="a2648-412">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LanguageProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LanguageProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LanguageProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.LanguageProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LanguageProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ LanguageProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable LanguageProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.LanguageProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-413">标识 <see cref="P:System.Windows.FrameworkContentElement.Language" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-413">Identifies the <see cref="P:System.Windows.FrameworkContentElement.Language" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Loaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Loaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.Loaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Loaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Loaded;" />
      <MemberSignature Language="F#" Value="member this.Loaded : System.Windows.RoutedEventHandler " Usage="member this.Loaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-414">当对元素进行布局、呈现，且可将其用于交互时发生。</span><span class="sxs-lookup"><span data-stu-id="a2648-414">Occurs when the element is laid out, rendered, and ready for interaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-415">直接路由事件不遵循路由，它们只能在引发它们的同一元素内进行处理。</span><span class="sxs-lookup"><span data-stu-id="a2648-415">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="a2648-416">直接路由事件支持其他路由事件行为：它们支持可访问的处理程序集合，并且可用作 <xref:System.Windows.EventTrigger> 样式中的。</span><span class="sxs-lookup"><span data-stu-id="a2648-416">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
<a name="routedEventInfo_Loaded"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="a2648-417">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="a2648-417">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="a2648-418">标识符字段</span><span class="sxs-lookup"><span data-stu-id="a2648-418">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.LoadedEvent>|  
|<span data-ttu-id="a2648-419">路由策略</span><span class="sxs-lookup"><span data-stu-id="a2648-419">Routing strategy</span></span>|<span data-ttu-id="a2648-420">直接</span><span class="sxs-lookup"><span data-stu-id="a2648-420">Direct</span></span>|  
|<span data-ttu-id="a2648-421">委托</span><span class="sxs-lookup"><span data-stu-id="a2648-421">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent LoadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent LoadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.LoadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly LoadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ LoadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable LoadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkContentElement.LoadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-422">标识 <see cref="E:System.Windows.FrameworkContentElement.Loaded" /> [路由事件概述](/dotnet/framework/wpf/advanced/routed-events-overview)。</span><span class="sxs-lookup"><span data-stu-id="a2648-422">Identifies the <see cref="E:System.Windows.FrameworkContentElement.Loaded" /> [Routed Events Overview](/dotnet/framework/wpf/advanced/routed-events-overview).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-423">事件标识符对象是在注册路由事件时创建的 (请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) ，然后可用于添加类处理程序 (参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>) 。</span><span class="sxs-lookup"><span data-stu-id="a2648-423">Event identifier objects are created when routed events are registered (see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) and can then be used to add class handlers (see <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span></span> <span data-ttu-id="a2648-424">标识符对象包含标识名称、所有者类型、处理程序类型、路由策略和用于为事件添加所有者的实用工具方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-424">Identifier objects contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Collections.IEnumerator LogicalChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator LogicalChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.LogicalChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property LogicalChildren As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property System::Collections::IEnumerator ^ LogicalChildren { System::Collections::IEnumerator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalChildren : System.Collections.IEnumerator" Usage="System.Windows.FrameworkContentElement.LogicalChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-425">获取此元素的逻辑子元素的一个枚举数。</span><span class="sxs-lookup"><span data-stu-id="a2648-425">Gets an enumerator for the logical child elements of this element.</span></span></summary>
        <value><span data-ttu-id="a2648-426">此元素的逻辑子元素的一个枚举数。</span><span class="sxs-lookup"><span data-stu-id="a2648-426">An enumerator for logical child elements of this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-427">有关如何使用和的详细信息 <xref:System.Windows.FrameworkContentElement.LogicalChildren%2A> <xref:System.Windows.FrameworkContentElement.AddLogicalChild%2A> ，请参阅 [WPF 中的树](/dotnet/framework/wpf/advanced/trees-in-wpf)。</span><span class="sxs-lookup"><span data-stu-id="a2648-427">For more information on how to use <xref:System.Windows.FrameworkContentElement.LogicalChildren%2A> and <xref:System.Windows.FrameworkContentElement.AddLogicalChild%2A>, see [Trees in WPF](/dotnet/framework/wpf/advanced/trees-in-wpf).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveFocus">
      <MemberSignature Language="C#" Value="public override sealed bool MoveFocus (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveFocus(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function MoveFocus (request As TraversalRequest) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveFocus(System::Windows::Input::TraversalRequest ^ request);" />
      <MemberSignature Language="F#" Value="override this.MoveFocus : System.Windows.Input.TraversalRequest -&gt; bool" Usage="frameworkContentElement.MoveFocus request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request"><span data-ttu-id="a2648-428">焦点要移动的方向，作为一个枚举值。</span><span class="sxs-lookup"><span data-stu-id="a2648-428">The direction that focus is to be moved, as a value of the enumeration.</span></span></param>
        <summary><span data-ttu-id="a2648-429">将键盘焦点从此元素移到另一个元素。</span><span class="sxs-lookup"><span data-stu-id="a2648-429">Moves the keyboard focus from this element to another element.</span></span></summary>
        <returns><span data-ttu-id="a2648-430">如果焦点成功移动，则返回 <see langword="true" />；如果指定方向上的目标元素不存在，则返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-430">Returns <see langword="true" /> if focus is moved successfully; <see langword="false" /> if the target element in direction as specified does not exist.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.ContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.FrameworkContentElement.Name" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.IFrameworkInputElement.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.MergableProperty(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.MergableProperty(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-431">获取或设置元素的标识名称。</span><span class="sxs-lookup"><span data-stu-id="a2648-431">Gets or sets the identifying name of the element.</span></span> <span data-ttu-id="a2648-432">该名称提供实例引用，以便编程代码隐藏（如事件处理程序代码）可以引用在 XAML 的分析过程中构造的元素。</span><span class="sxs-lookup"><span data-stu-id="a2648-432">The name provides an instance reference so that programmatic code-behind, such as event handler code, can refer to an element once it is constructed during parsing of XAML.</span></span></summary>
        <value><span data-ttu-id="a2648-433">元素的名称。</span><span class="sxs-lookup"><span data-stu-id="a2648-433">The name of the element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-434">此属性最常见的用法是在标记中指定 XAML 元素名称。</span><span class="sxs-lookup"><span data-stu-id="a2648-434">The most common usage of this property is when specifying a XAML element name in markup.</span></span>  
  
 <span data-ttu-id="a2648-435">此属性实质上提供了一个 WPF 框架级别的方便属性来设置 XAML [X：Name 指令](/dotnet/framework/xaml-services/x-name-directive)。</span><span class="sxs-lookup"><span data-stu-id="a2648-435">This property essentially provides a WPF framework-level convenience property to set the XAML [x:Name Directive](/dotnet/framework/xaml-services/x-name-directive).</span></span>  
  
 <span data-ttu-id="a2648-436"><xref:System.Windows.FrameworkContentElement.Name%2A>从代码中获取并不常见，因为如果你在代码中具有相应的引用，则可以只调用元素引用上的方法和属性，并且通常不需要 <xref:System.Windows.FrameworkContentElement.Name%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-436">Getting a <xref:System.Windows.FrameworkContentElement.Name%2A> from code is not common, because if you have the appropriate reference in code already, you can just call methods and properties on the element reference and do not generally need the <xref:System.Windows.FrameworkContentElement.Name%2A>.</span></span> <span data-ttu-id="a2648-437">如果字符串具有一些重载含义（例如，如果在用户界面中显示该名称很有用），则异常。</span><span class="sxs-lookup"><span data-stu-id="a2648-437">An exception is if the string has some overloaded meaning, for instance if it is useful to display that name in UI.</span></span> <span data-ttu-id="a2648-438"><xref:System.Windows.FrameworkContentElement.Name%2A>如果也不建议从标记中设置原始的代码 <xref:System.Windows.FrameworkContentElement.Name%2A> ，则更改属性不会更改对象引用。</span><span class="sxs-lookup"><span data-stu-id="a2648-438">Setting a <xref:System.Windows.FrameworkContentElement.Name%2A> from code if the original <xref:System.Windows.FrameworkContentElement.Name%2A> was set from markup is also not recommended, and changing the property will not change the object reference.</span></span> <span data-ttu-id="a2648-439">仅当在 XAML 加载过程中显式创建了基础名称范围时，才会创建此类对象引用。</span><span class="sxs-lookup"><span data-stu-id="a2648-439">Such object references are created only when the underlying namescopes are explicitly created during XAML loading.</span></span>  
  
 <span data-ttu-id="a2648-440">您必须专门调用 <xref:System.Windows.FrameworkContentElement.RegisterName%2A> 以对已加载的元素的属性进行有效更改 <xref:System.Windows.FrameworkContentElement.Name%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-440">You must specifically call <xref:System.Windows.FrameworkContentElement.RegisterName%2A> to make an effective change on the <xref:System.Windows.FrameworkContentElement.Name%2A> property of an already loaded element.</span></span>  
  
 <span data-ttu-id="a2648-441">从代码中进行设置的一个明显情况 <xref:System.Windows.FrameworkContentElement.Name%2A> 是，对要针对其运行情节提要的元素进行命名。</span><span class="sxs-lookup"><span data-stu-id="a2648-441">One notable case where setting <xref:System.Windows.FrameworkContentElement.Name%2A> from  code is important is for naming elements that storyboards will run against.</span></span> <span data-ttu-id="a2648-442">注册名称之前，可能还需要实例化并分配 <xref:System.Windows.NameScope> 实例。</span><span class="sxs-lookup"><span data-stu-id="a2648-442">Before you can register a name, might also need to instantiate and assign a <xref:System.Windows.NameScope> instance.</span></span> <span data-ttu-id="a2648-443">请参阅 "示例" 部分或 [情节提要概述](/dotnet/framework/wpf/graphics-multimedia/storyboards-overview)。</span><span class="sxs-lookup"><span data-stu-id="a2648-443">See the Example section, or [Storyboards Overview](/dotnet/framework/wpf/graphics-multimedia/storyboards-overview).</span></span>  
  
 <span data-ttu-id="a2648-444"><xref:System.Windows.FrameworkContentElement.Name%2A>从代码设置具有有限的应用程序，但按名称查找元素更常见，尤其是在使用导航模型时，页面将重新加载到应用程序中，而运行时代码不一定是相应页的代码隐藏。</span><span class="sxs-lookup"><span data-stu-id="a2648-444">Setting <xref:System.Windows.FrameworkContentElement.Name%2A> from code has limited applications, but looking up an element by name is more common, particularly if you are employing a navigation model where pages reload into the application and the run-time code is not necessarily the code-behind of that respective page.</span></span> <span data-ttu-id="a2648-445">实用工具方法 <xref:System.Windows.FrameworkContentElement.FindName%2A> （可从任何方法获取 <xref:System.Windows.FrameworkContentElement> ）可以以 <xref:System.Windows.FrameworkContentElement.Name%2A> 递归方式找到该元素的逻辑树中的任何元素。</span><span class="sxs-lookup"><span data-stu-id="a2648-445">The utility method <xref:System.Windows.FrameworkContentElement.FindName%2A>, which is available from any <xref:System.Windows.FrameworkContentElement>, can find any element by <xref:System.Windows.FrameworkContentElement.Name%2A> in that element's logical tree recursively.</span></span> <span data-ttu-id="a2648-446">您也可以使用的 <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> 静态方法 <xref:System.Windows.LogicalTreeHelper> ，该方法也会将 <xref:System.Windows.FrameworkContentElement.Name%2A> 字符串作为参数。</span><span class="sxs-lookup"><span data-stu-id="a2648-446">Or you can use the <xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A> static method of <xref:System.Windows.LogicalTreeHelper>, which also takes the <xref:System.Windows.FrameworkContentElement.Name%2A> string as an argument.</span></span>  
  
 <span data-ttu-id="a2648-447"> (的常用根元素 <xref:System.Windows.Window> ， <xref:System.Windows.Controls.Page> 例如) 实现接口 <xref:System.Windows.Markup.INameScope> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-447">Commonly used root elements (<xref:System.Windows.Window>, <xref:System.Windows.Controls.Page> for example) implement the interface <xref:System.Windows.Markup.INameScope>.</span></span> <span data-ttu-id="a2648-448">此接口的实现应强制要求名称在其范围内明确。</span><span class="sxs-lookup"><span data-stu-id="a2648-448">Implementations of this interface are expected to enforce that names be unambiguous within their scope.</span></span>  
  
<a name="dependencyPropertyInfo_Name"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="a2648-449">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="a2648-449">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="a2648-450">标识符字段</span><span class="sxs-lookup"><span data-stu-id="a2648-450">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.NameProperty>|  
|<span data-ttu-id="a2648-451">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="a2648-451">Metadata properties set to `true`</span></span>|<xref:System.Windows.UIPropertyMetadata.IsAnimationProhibited%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="NameProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty NameProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty NameProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.NameProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NameProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ NameProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable NameProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.NameProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-452">标识 <see cref="P:System.Windows.FrameworkContentElement.Name" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-452">Identifies the <see cref="P:System.Windows.FrameworkContentElement.Name" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuClosing (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuClosing(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuClosing (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuClosing(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuClosing : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkContentElement.OnContextMenuClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a2648-453">提供与事件有关的数据。</span><span class="sxs-lookup"><span data-stu-id="a2648-453">Provides data about the event.</span></span></param>
        <summary><span data-ttu-id="a2648-454">每当 <see cref="E:System.Windows.FrameworkContentElement.ContextMenuClosing" /> 路由事件在其路由中到达此类时调用。</span><span class="sxs-lookup"><span data-stu-id="a2648-454">Invoked whenever the <see cref="E:System.Windows.FrameworkContentElement.ContextMenuClosing" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="a2648-455">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="a2648-455">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-456">此方法没有默认实现。</span><span class="sxs-lookup"><span data-stu-id="a2648-456">This method has no default implementation.</span></span> <span data-ttu-id="a2648-457">如果继承中的中间类已经实现了此方法，则仍应调用基实现。</span><span class="sxs-lookup"><span data-stu-id="a2648-457">You should still call the base implementation in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="a2648-458">此方法的目的与公共语言运行时 (CLR) 上的事件模式 \* 方法相同：它提供了用类处理程序而不是实例处理程序来处理来自派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-458">The purpose of this method is somewhat similar to common language runtime (CLR) event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="a2648-459">在这种情况下，匹配事件是路由事件。</span><span class="sxs-lookup"><span data-stu-id="a2648-459">In this case the matching event is a routed event.</span></span> <span data-ttu-id="a2648-460">对于路由事件，On \* 方法的实现模式是不同的，因为路由事件可能由子元素引发，而不一定是将调用处理程序的元素。</span><span class="sxs-lookup"><span data-stu-id="a2648-460">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers.</span></span> <span data-ttu-id="a2648-461">因此，在大多数情况下，实现都必须将事件参数的源属性纳入 (并且不应尝试重新引发事件) 。</span><span class="sxs-lookup"><span data-stu-id="a2648-461">Therefore, your implementation will have to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="a2648-462">如果在 <xref:System.Windows.FrameworkContentElement> 路由中收到事件，则的子类可以选择调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-462">Subclasses of <xref:System.Windows.FrameworkContentElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="a2648-463">一种可能的情况是获取事件的参数，并特意将事件标记为已处理以缩短路由。</span><span class="sxs-lookup"><span data-stu-id="a2648-463">One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuOpening (System.Windows.Controls.ContextMenuEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuOpening(class System.Windows.Controls.ContextMenuEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuOpening (e As ContextMenuEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuOpening(System::Windows::Controls::ContextMenuEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit&#xA;override this.OnContextMenuOpening : System.Windows.Controls.ContextMenuEventArgs -&gt; unit" Usage="frameworkContentElement.OnContextMenuOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ContextMenuEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a2648-464">事件的事件数据。</span><span class="sxs-lookup"><span data-stu-id="a2648-464">Event data for the event.</span></span></param>
        <summary><span data-ttu-id="a2648-465">每当 <see cref="E:System.Windows.FrameworkContentElement.ContextMenuOpening" /> 路由事件在其路由中到达此类时调用。</span><span class="sxs-lookup"><span data-stu-id="a2648-465">Invoked whenever the <see cref="E:System.Windows.FrameworkContentElement.ContextMenuOpening" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="a2648-466">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="a2648-466">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-467">此方法没有默认实现。</span><span class="sxs-lookup"><span data-stu-id="a2648-467">This method has no default implementation.</span></span> <span data-ttu-id="a2648-468">如果继承中的中间类已经实现了此方法，则仍应调用基 () 。</span><span class="sxs-lookup"><span data-stu-id="a2648-468">You should still call base() in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="a2648-469">此方法的目的与公共语言运行时 (CLR) 上的事件模式 \* 方法相同：它提供了用类处理程序而不是实例处理程序来处理来自派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-469">The purpose of this method is somewhat similar to common language runtime (CLR) event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="a2648-470">在这种情况下，匹配事件是路由事件。</span><span class="sxs-lookup"><span data-stu-id="a2648-470">In this case the matching event is a routed event.</span></span> <span data-ttu-id="a2648-471">对于路由事件，On \* 方法的实现模式是不同的，因为路由事件可能是由子元素（而不是将调用处理程序的元素）引发的，因此，实现必须将事件参数的源属性纳入 (并且在大多数情况下都不应尝试重新引发事件) 。</span><span class="sxs-lookup"><span data-stu-id="a2648-471">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will have to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="a2648-472">如果在 <xref:System.Windows.FrameworkContentElement> 路由中收到事件，则的子类可以选择调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-472">Subclasses of <xref:System.Windows.FrameworkContentElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="a2648-473">一种可能的情况是获取事件的参数，并特意将事件标记为已处理以缩短路由。</span><span class="sxs-lookup"><span data-stu-id="a2648-473">One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (System.Windows.RoutedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.Windows.RoutedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnGotFocus(System.Windows.RoutedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As RoutedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(System::Windows::RoutedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnGotFocus : System.Windows.RoutedEventArgs -&gt; unit" Usage="frameworkContentElement.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.RoutedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a2648-474">事件的事件数据。</span><span class="sxs-lookup"><span data-stu-id="a2648-474">Event data for the event.</span></span></param>
        <summary><span data-ttu-id="a2648-475"><see cref="E:System.Windows.ContentElement.GotFocus" /> 事件的类处理程序。</span><span class="sxs-lookup"><span data-stu-id="a2648-475">Class handler for the <see cref="E:System.Windows.ContentElement.GotFocus" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-476">如果事件源自此元素，则此类处理程序将在此元素上设置相应的焦点行为。</span><span class="sxs-lookup"><span data-stu-id="a2648-476">This class handler sets appropriate focus behavior on this element if the event originated from this element.</span></span> <span data-ttu-id="a2648-477">如果事件的源是树中的另一个元素，则处理程序不执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="a2648-477">If the event's source was another element in the tree, the handler does nothing.</span></span>  
  
 <span data-ttu-id="a2648-478">重写此方法，以便在元素上更改这些默认焦点行为。</span><span class="sxs-lookup"><span data-stu-id="a2648-478">Override this method in order to change these default focusing behavior on your element.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInitialized">
      <MemberSignature Language="C#" Value="protected virtual void OnInitialized (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitialized(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnInitialized(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitialized (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitialized(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInitialized : EventArgs -&gt; unit&#xA;override this.OnInitialized : EventArgs -&gt; unit" Usage="frameworkContentElement.OnInitialized e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a2648-479">事件的事件数据。</span><span class="sxs-lookup"><span data-stu-id="a2648-479">Event data for the event.</span></span></param>
        <summary><span data-ttu-id="a2648-480">引发 <see cref="E:System.Windows.FrameworkContentElement.Initialized" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="a2648-480">Raises the <see cref="E:System.Windows.FrameworkContentElement.Initialized" /> event.</span></span> <span data-ttu-id="a2648-481">只要将 <see cref="P:System.Windows.FrameworkContentElement.IsInitialized" /> 设置为 <see langword="true" />，就可以调用此方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-481">This method is invoked whenever <see cref="P:System.Windows.FrameworkContentElement.IsInitialized" /> is set to <see langword="true" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-482">此虚方法的默认实现将引发事件，如本主题前面所述。</span><span class="sxs-lookup"><span data-stu-id="a2648-482">The default implementation of this virtual method raises the event as described earlier in this topic.</span></span> <span data-ttu-id="a2648-483">重写应调用基 () 以保留此行为。</span><span class="sxs-lookup"><span data-stu-id="a2648-483">Overrides should call base() to preserve this behavior.</span></span>  
  
 <span data-ttu-id="a2648-484">请注意， <xref:System.Windows.FrameworkContentElement.IsInitialized%2A> 属性是只读的。</span><span class="sxs-lookup"><span data-stu-id="a2648-484">Note that the <xref:System.Windows.FrameworkContentElement.IsInitialized%2A> property is read-only.</span></span> <span data-ttu-id="a2648-485">因此，不能将其设置为强制执行初始化行为。</span><span class="sxs-lookup"><span data-stu-id="a2648-485">Therefore, you cannot set it to force initialization behavior that way.</span></span> <span data-ttu-id="a2648-486">初始化设置仅供 Windows Presentation Foundation (WPF) 框架中完成。</span><span class="sxs-lookup"><span data-stu-id="a2648-486">Initialization setting is intended to be done only by the Windows Presentation Foundation (WPF) framework.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected override void OnPropertyChanged (System.Windows.DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnPropertyChanged(valuetype System.Windows.DependencyPropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnPropertyChanged (e As DependencyPropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnPropertyChanged(System::Windows::DependencyPropertyChangedEventArgs e);" />
      <MemberSignature Language="F#" Value="override this.OnPropertyChanged : System.Windows.DependencyPropertyChangedEventArgs -&gt; unit" Usage="frameworkContentElement.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.DependencyPropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a2648-487">描述已更改的属性的事件数据，包括旧值和新值。</span><span class="sxs-lookup"><span data-stu-id="a2648-487">The event data that describes the property that changed, including the old and new values.</span></span></param>
        <summary><span data-ttu-id="a2648-488">每当更新此 <see cref="T:System.Windows.FrameworkContentElement" /> 的任何依赖属性的有效值时调用。</span><span class="sxs-lookup"><span data-stu-id="a2648-488">Invoked whenever the effective value of any dependency property on this <see cref="T:System.Windows.FrameworkContentElement" /> has been updated.</span></span> <span data-ttu-id="a2648-489">将在自变量参数中报告已更改的特定依赖属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-489">The specific dependency property that changed is reported in the arguments parameter.</span></span> <span data-ttu-id="a2648-490">重写 <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-490">Overrides <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-491">此方法并不用于通常检测属性更改或失效。</span><span class="sxs-lookup"><span data-stu-id="a2648-491">This method is not intended to generally detect property changes or invalidations.</span></span> <span data-ttu-id="a2648-492">它用于在了解有关属性的广泛分类的特定信息时进行常规失效模式的修改。</span><span class="sxs-lookup"><span data-stu-id="a2648-492">It is instead intended for modifications of the general invalidation pattern if certain information is known about wide classifications of properties.</span></span>  
  
 <span data-ttu-id="a2648-493">在对象的整个生存期内，可能会多次调用此方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-493">This method is potentially invoked many times during the life of an object.</span></span> <span data-ttu-id="a2648-494">因此，如果你重写特定属性的元数据，然后 <xref:System.Windows.CoerceValueCallback> 为单个属性附加或函数，则可以获得更好 <xref:System.Windows.PropertyChangedCallback> 的性能。</span><span class="sxs-lookup"><span data-stu-id="a2648-494">Therefore, you can achieve better performance if you override the metadata of specific properties and then attach <xref:System.Windows.CoerceValueCallback> or <xref:System.Windows.PropertyChangedCallback> functions for individual properties.</span></span> <span data-ttu-id="a2648-495">但是，如果 <xref:System.Windows.FrameworkContentElement> 包含大量与值相关的依赖项属性，则可以使用此方法，或者，如果包含的逻辑（如呈现行为）必须针对属性失效的几个相关事例重新运行，则应使用此方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-495">However, you would use this method if a <xref:System.Windows.FrameworkContentElement> includes a significant number of value-interrelated dependency properties, or if it includes logic such as rendering behavior that must be rerun for several related cases of property invalidations.</span></span>  
  
 <span data-ttu-id="a2648-496">请注意，有一个 `OnPropertyChanged` 具有不同签名的具有相同名称的方法 (参数类型 <xref:System.ComponentModel.PropertyChangedEventArgs>) ，可以出现在多个类中。</span><span class="sxs-lookup"><span data-stu-id="a2648-496">Note that there is an identically named `OnPropertyChanged` method with a different signature (the parameter type is <xref:System.ComponentModel.PropertyChangedEventArgs>) that can appear on a number of classes.</span></span> <span data-ttu-id="a2648-497">`OnPropertyChanged`用于数据对象通知，并且是的协定的一部分 <xref:System.ComponentModel.INotifyPropertyChanged> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-497">That `OnPropertyChanged` is used for data object notifications, and is part of the contract for <xref:System.ComponentModel.INotifyPropertyChanged>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a2648-498">始终调用基实现，作为实现中的第一个操作。</span><span class="sxs-lookup"><span data-stu-id="a2648-498">Always call the base implementation, as the first operation in your implementation.</span></span> <span data-ttu-id="a2648-499">如果不这样做，将明显禁用整个 WPF 属性系统，这将导致报告不正确的值。</span><span class="sxs-lookup"><span data-stu-id="a2648-499">Failure to do this will significantly disable the entire WPF property system, which causes incorrect values to be reported.</span></span></para></block>
        <altmember cref="M:System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
        <altmember cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected internal virtual void OnStyleChanged (System.Windows.Style oldStyle, System.Windows.Style newStyle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnStyleChanged(class System.Windows.Style oldStyle, class System.Windows.Style newStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnStyleChanged (oldStyle As Style, newStyle As Style)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnStyleChanged(System::Windows::Style ^ oldStyle, System::Windows::Style ^ newStyle);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit&#xA;override this.OnStyleChanged : System.Windows.Style * System.Windows.Style -&gt; unit" Usage="frameworkContentElement.OnStyleChanged (oldStyle, newStyle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldStyle" Type="System.Windows.Style" />
        <Parameter Name="newStyle" Type="System.Windows.Style" />
      </Parameters>
      <Docs>
        <param name="oldStyle"><span data-ttu-id="a2648-500">旧样式。</span><span class="sxs-lookup"><span data-stu-id="a2648-500">The old style.</span></span></param>
        <param name="newStyle"><span data-ttu-id="a2648-501">新样式。</span><span class="sxs-lookup"><span data-stu-id="a2648-501">The new style.</span></span></param>
        <summary><span data-ttu-id="a2648-502">在此元素上使用的样式更改时调用。</span><span class="sxs-lookup"><span data-stu-id="a2648-502">Invoked when the style that is in use on this element changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-503">此方法具有一个默认实现，该实现将设置一个指示样式更改条件的内部标志。</span><span class="sxs-lookup"><span data-stu-id="a2648-503">This method has a default implementation that sets an internal flag noting the style changed condition.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="a2648-504">始终调用基实现，否则不能应用样式。</span><span class="sxs-lookup"><span data-stu-id="a2648-504">Always call the base implementation, otherwise styles cannot be applied.</span></span> <span data-ttu-id="a2648-505">如果派生类具有专用样式选择器或缓存样式值，则重写此方法的方案可能包括。</span><span class="sxs-lookup"><span data-stu-id="a2648-505">Scenarios for overriding this method might include if your derived class has a specialized style selector, or caches style values.</span></span> <span data-ttu-id="a2648-506">主题更改可能会调用此方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-506">Theme changes will potentially invoke this method.</span></span></para></block>
        <altmember cref="P:System.Windows.FrameworkContentElement.Style" />
      </Docs>
    </Member>
    <Member MemberName="OnToolTipClosing">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipClosing (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipClosing(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipClosing (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipClosing(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipClosing : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkContentElement.OnToolTipClosing e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a2648-507">提供与事件有关的数据。</span><span class="sxs-lookup"><span data-stu-id="a2648-507">Provides data about the event.</span></span></param>
        <summary><span data-ttu-id="a2648-508">每当 <see cref="E:System.Windows.FrameworkContentElement.ToolTipClosing" /> 路由事件在其路由中到达此类时调用。</span><span class="sxs-lookup"><span data-stu-id="a2648-508">Invoked whenever the <see cref="E:System.Windows.FrameworkContentElement.ToolTipClosing" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="a2648-509">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="a2648-509">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-510">此方法没有默认实现。</span><span class="sxs-lookup"><span data-stu-id="a2648-510">This method has no default implementation.</span></span> <span data-ttu-id="a2648-511">如果继承中的中间类已经实现了此方法，则仍应调用基 () 。</span><span class="sxs-lookup"><span data-stu-id="a2648-511">You should still call base() in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="a2648-512">此方法的目的与公共语言运行时 (CLR) 上的事件模式 \* 方法相同：它提供了用类处理程序而不是实例处理程序来处理来自派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-512">The purpose of this method is somewhat similar to common language runtime (CLR) event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="a2648-513">在这种情况下，匹配事件是路由事件。</span><span class="sxs-lookup"><span data-stu-id="a2648-513">In this case the matching event is a routed event.</span></span> <span data-ttu-id="a2648-514">对于路由事件，On \* 方法的实现模式是不同的，因为路由事件可能是由子元素（而不是将调用处理程序的元素）引发的，因此，实现必须将事件参数的源属性纳入 (并且在大多数情况下都不应尝试重新引发事件) 。</span><span class="sxs-lookup"><span data-stu-id="a2648-514">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will have to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="a2648-515">如果在 <xref:System.Windows.FrameworkContentElement> 路由中收到事件，则的子类可以选择调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-515">Subclasses of <xref:System.Windows.FrameworkContentElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="a2648-516">一种可能的情况是获取事件的参数，并特意将事件标记为已处理以缩短路由。</span><span class="sxs-lookup"><span data-stu-id="a2648-516">One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnToolTipOpening">
      <MemberSignature Language="C#" Value="protected virtual void OnToolTipOpening (System.Windows.Controls.ToolTipEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnToolTipOpening(class System.Windows.Controls.ToolTipEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnToolTipOpening (e As ToolTipEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnToolTipOpening(System::Windows::Controls::ToolTipEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit&#xA;override this.OnToolTipOpening : System.Windows.Controls.ToolTipEventArgs -&gt; unit" Usage="frameworkContentElement.OnToolTipOpening e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Controls.ToolTipEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="a2648-517">提供与事件有关的数据。</span><span class="sxs-lookup"><span data-stu-id="a2648-517">Provides data about the event.</span></span></param>
        <summary><span data-ttu-id="a2648-518">每当 <see cref="E:System.Windows.FrameworkContentElement.ToolTipOpening" /> 路由事件在其路由中到达此类时调用。</span><span class="sxs-lookup"><span data-stu-id="a2648-518">Invoked whenever the <see cref="E:System.Windows.FrameworkContentElement.ToolTipOpening" /> routed event reaches this class in its route.</span></span> <span data-ttu-id="a2648-519">实现此方法可为此事件添加类处理。</span><span class="sxs-lookup"><span data-stu-id="a2648-519">Implement this method to add class handling for this event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-520">此方法没有默认实现。</span><span class="sxs-lookup"><span data-stu-id="a2648-520">This method has no default implementation.</span></span> <span data-ttu-id="a2648-521">如果继承中的中间类已经实现了此方法，则仍应调用基 () 。</span><span class="sxs-lookup"><span data-stu-id="a2648-521">You should still call base() in case an intermediate class in the inheritance has implemented this method.</span></span>  
  
 <span data-ttu-id="a2648-522">此方法的目的与公共语言运行时 (CLR) 上的事件模式 \* 方法相同：它提供了用类处理程序而不是实例处理程序来处理来自派生类的匹配事件的方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-522">The purpose of this method is somewhat similar to common language runtime (CLR) event pattern On\* methods: it provides the means to handle the matching event from derived classes with a class handler instead of an instance handler.</span></span> <span data-ttu-id="a2648-523">在这种情况下，匹配事件是路由事件。</span><span class="sxs-lookup"><span data-stu-id="a2648-523">In this case the matching event is a routed event.</span></span> <span data-ttu-id="a2648-524">对于路由事件，On \* 方法的实现模式是不同的，因为路由事件可能由子元素引发，而不一定是将调用处理程序的元素，因此，实现需要将事件参数的源属性纳入 (并且在大多数情况下都不应尝试重新引发事件) 。</span><span class="sxs-lookup"><span data-stu-id="a2648-524">The implementation pattern of the On\* methods is different for routed events because the routed event may have been raised by a child element, not necessarily the element that will invoke handlers, so your implementation will need to take the event arguments' source properties into account (and should not try to re-raise the event in most cases).</span></span> <span data-ttu-id="a2648-525">如果在 <xref:System.Windows.FrameworkContentElement> 路由中收到事件，则的子类可以选择调用私有类处理程序方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-525">Subclasses of <xref:System.Windows.FrameworkContentElement> could choose to call private class handler methods when the event is received along the route.</span></span> <span data-ttu-id="a2648-526">一种可能的情况是获取事件的参数，并特意将事件标记为已处理以缩短路由。</span><span class="sxs-lookup"><span data-stu-id="a2648-526">One potential scenario is to take the arguments of the event and deliberately mark the event as handled to shorten the route.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyle">
      <MemberSignature Language="C#" Value="public bool OverridesDefaultStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OverridesDefaultStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.OverridesDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property OverridesDefaultStyle As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OverridesDefaultStyle { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OverridesDefaultStyle : bool with get, set" Usage="System.Windows.FrameworkContentElement.OverridesDefaultStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-527">获取或设置一个值，该值指示此元素是否合并了主题样式的样式属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-527">Gets or sets a value indicating whether this element incorporates style properties from theme styles.</span></span></summary>
        <value><span data-ttu-id="a2648-528">如果此元素不使用主题样式属性，则为 <see langword="true" />；所有源于样式的属性均来自本地应用程序样式，不会应用主题样式属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-528"><see langword="true" /> if this element does not use theme style properties; all style-originating properties come from local application styles, and theme style properties do not apply.</span></span> <span data-ttu-id="a2648-529">如果首先应用了应用程序样式，然后将主题样式应用于未在应用程序样式中专门设置的属性，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-529"><see langword="false" /> if application styles apply first, and then theme styles apply for properties that were not specifically set in application styles.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-530">此属性最常见的用法是在提供主题样式的样式的资源库中间接使用。</span><span class="sxs-lookup"><span data-stu-id="a2648-530">The most common usage of this property is an indirect usage within the setter of a style that is supplying a themed style.</span></span>  
  
<a name="dependencyPropertyInfo_OverridesDefaultStyle"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="a2648-531">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="a2648-531">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="a2648-532">标识符字段</span><span class="sxs-lookup"><span data-stu-id="a2648-532">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.OverridesDefaultStyleProperty>|  
|<span data-ttu-id="a2648-533">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="a2648-533">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkContentElement.DefaultStyleKey" />
      </Docs>
    </Member>
    <Member MemberName="OverridesDefaultStyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty OverridesDefaultStyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty OverridesDefaultStyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.OverridesDefaultStyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly OverridesDefaultStyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ OverridesDefaultStyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable OverridesDefaultStyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.OverridesDefaultStyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-534">标识 <see cref="P:System.Windows.FrameworkContentElement.OverridesDefaultStyle" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-534">Identifies the <see cref="P:System.Windows.FrameworkContentElement.OverridesDefaultStyle" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Parent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkContentElement.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-535">获取此元素的逻辑树中的父级。</span><span class="sxs-lookup"><span data-stu-id="a2648-535">Gets the parent in the logical tree for this element.</span></span></summary>
        <value><span data-ttu-id="a2648-536">此元素的逻辑父级。</span><span class="sxs-lookup"><span data-stu-id="a2648-536">The logical parent for this element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-537">请注意，根据应用程序功能，元素的逻辑父级可能会发生更改，并且保持此属性的值将不会反映此更改。</span><span class="sxs-lookup"><span data-stu-id="a2648-537">Note that the logical parent of an element can potentially change depending on your application functionality, and keeping the value of this property will not reflect that change.</span></span> <span data-ttu-id="a2648-538">通常应在需要之前立即获取值。</span><span class="sxs-lookup"><span data-stu-id="a2648-538">You typically should get the value immediately before you need it.</span></span>  
  
 <span data-ttu-id="a2648-539">有关遍历逻辑树的详细信息，请参阅 [WPF 中的树](/dotnet/framework/wpf/advanced/trees-in-wpf) 和适用于元素发现的情况。</span><span class="sxs-lookup"><span data-stu-id="a2648-539">See [Trees in WPF](/dotnet/framework/wpf/advanced/trees-in-wpf) for more information about traversing logical trees, and the scenarios where taking this approach towards element discovery is appropriate.</span></span>  
  
 <span data-ttu-id="a2648-540">属性系统在重定父级后可能会重新计算某个元素的所有属性值，因为某些属性通过逻辑树继承值。</span><span class="sxs-lookup"><span data-stu-id="a2648-540">The property system will potentially recalculate all property values of an element when it is reparented, because some properties inherit values through the logical tree.</span></span> <span data-ttu-id="a2648-541"><xref:System.Windows.FrameworkContentElement.DataContext%2A>当对元素进行重定父级时，适用于绑定的也可能更改。</span><span class="sxs-lookup"><span data-stu-id="a2648-541">The <xref:System.Windows.FrameworkContentElement.DataContext%2A> that applies for bindings can also change when elements are reparented.</span></span>  
  
 <span data-ttu-id="a2648-542">通常仅通过操作集合、使用专用的 add 或 remove 方法或通过设置元素的内容属性来更改元素的父元素。</span><span class="sxs-lookup"><span data-stu-id="a2648-542">Changing an element's parent is typically only done through manipulation of collections, by using dedicated add or remove methods, or through setting content properties of elements.</span></span>  
  
 <span data-ttu-id="a2648-543">使用属性的最典型方案 <xref:System.Windows.FrameworkContentElement.Parent%2A> 是获取引用，然后 <xref:System.Windows.FrameworkContentElement> 从父级获取各种属性值。</span><span class="sxs-lookup"><span data-stu-id="a2648-543">The most typical scenario for using the <xref:System.Windows.FrameworkContentElement.Parent%2A> property is to obtain a reference and then get various <xref:System.Windows.FrameworkContentElement> property values from the parent.</span></span> <span data-ttu-id="a2648-544">对于模板， <xref:System.Windows.FrameworkContentElement.Parent%2A> 模板的最终将是 `null` 。</span><span class="sxs-lookup"><span data-stu-id="a2648-544">For templates, the <xref:System.Windows.FrameworkContentElement.Parent%2A> of the template eventually will be `null`.</span></span> <span data-ttu-id="a2648-545">若要过去此点并扩展到实际应用模板的逻辑树，请使用 <xref:System.Windows.FrameworkContentElement.TemplatedParent%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-545">To get past this point and extend into the logical tree where the template is actually applied, use <xref:System.Windows.FrameworkContentElement.TemplatedParent%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2648-546">下面的示例检查的是否 <xref:System.Windows.FrameworkContentElement.Parent%2A> <xref:System.Windows.Documents.TextPointer> 为特定类型。</span><span class="sxs-lookup"><span data-stu-id="a2648-546">The following example checks to see whether the <xref:System.Windows.FrameworkContentElement.Parent%2A> of a <xref:System.Windows.Documents.TextPointer> is of a particular type.</span></span>  
  
 [!code-csharp[TextPointer_snippets#FCEParent](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#fceparent)]
 [!code-vb[TextPointer_snippets#FCEParent](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#fceparent)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkContentElement.TemplatedParent" />
      </Docs>
    </Member>
    <Member MemberName="PredictFocus">
      <MemberSignature Language="C#" Value="public override sealed System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Windows.DependencyObject PredictFocus(valuetype System.Windows.Input.FocusNavigationDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function PredictFocus (direction As FocusNavigationDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Windows::DependencyObject ^ PredictFocus(System::Windows::Input::FocusNavigationDirection direction);" />
      <MemberSignature Language="F#" Value="override this.PredictFocus : System.Windows.Input.FocusNavigationDirection -&gt; System.Windows.DependencyObject" Usage="frameworkContentElement.PredictFocus direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Input.FocusNavigationDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><span data-ttu-id="a2648-547">应确定其预期焦点更改的方向。</span><span class="sxs-lookup"><span data-stu-id="a2648-547">The direction for which a prospective focus change should be determined.</span></span></param>
        <summary><span data-ttu-id="a2648-548">根据提供的焦点移动方向，确定在此元素之后接收焦点的下一个元素，但不实际移动焦点。</span><span class="sxs-lookup"><span data-stu-id="a2648-548">Determines the next element that would receive focus relative to this element for a provided focus movement direction, but does not actually move the focus.</span></span> <span data-ttu-id="a2648-549">此方法是密封的，不能对其进行重写。</span><span class="sxs-lookup"><span data-stu-id="a2648-549">This method is sealed and cannot be overridden.</span></span></summary>
        <returns><span data-ttu-id="a2648-550">如果实际遍历了焦点，则为焦点将要移到的下一个元素。</span><span class="sxs-lookup"><span data-stu-id="a2648-550">The next element that focus would move to if focus were actually traversed.</span></span> <span data-ttu-id="a2648-551">如果焦点不能按提供的方向相对于此元素移动，则可能返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-551">May return <see langword="null" /> if focus cannot be moved relative to this element for the provided direction.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-552"><xref:System.Windows.FrameworkContentElement.MoveFocus%2A> 是实际移动焦点的相关方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-552"><xref:System.Windows.FrameworkContentElement.MoveFocus%2A> is the related method that actually does move focus.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="a2648-553">在 <see cref="T:System.Windows.Input.TraversalRequest" /> 中指定了以下方向之一：<see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />、<see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />、<see cref="F:System.Windows.Input.FocusNavigationDirection.First" />、<see cref="F:System.Windows.Input.FocusNavigationDirection.Last" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-553">Specified one of the following directions in the <see cref="T:System.Windows.Input.TraversalRequest" />: <see cref="F:System.Windows.Input.FocusNavigationDirection.Next" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Previous" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.First" />, <see cref="F:System.Windows.Input.FocusNavigationDirection.Last" />.</span></span> <span data-ttu-id="a2648-554">对于 <see cref="M:System.Windows.FrameworkContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> 来说，这些方向是非法的（但对于 <see cref="M:System.Windows.FrameworkContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" /> 来说是合法的）。</span><span class="sxs-lookup"><span data-stu-id="a2648-554">These directions are not legal for <see cref="M:System.Windows.FrameworkContentElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> (but they are legal for <see cref="M:System.Windows.FrameworkContentElement.MoveFocus(System.Windows.Input.TraversalRequest)" />).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="RegisterName">
      <MemberSignature Language="C#" Value="public void RegisterName (string name, object scopedElement);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterName(string name, object scopedElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.RegisterName(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterName (name As String, scopedElement As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterName(System::String ^ name, System::Object ^ scopedElement);" />
      <MemberSignature Language="F#" Value="member this.RegisterName : string * obj -&gt; unit" Usage="frameworkContentElement.RegisterName (name, scopedElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="scopedElement" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="a2648-555">要在指定的名称-对象映射中使用的名称。</span><span class="sxs-lookup"><span data-stu-id="a2648-555">Name to use for the specified name-object mapping.</span></span></param>
        <param name="scopedElement"><span data-ttu-id="a2648-556">映射的对象。</span><span class="sxs-lookup"><span data-stu-id="a2648-556">Object for the mapping.</span></span></param>
        <summary><span data-ttu-id="a2648-557">提供一个可简化对 <see cref="T:System.Windows.NameScope" /> 注册方法访问的访问器。</span><span class="sxs-lookup"><span data-stu-id="a2648-557">Provides an accessor that simplifies access to the <see cref="T:System.Windows.NameScope" /> registration method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-558">此方法是一种方便调用的方法 <xref:System.Windows.NameScope.RegisterName%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-558">This method is a convenience method for calling <xref:System.Windows.NameScope.RegisterName%2A>.</span></span> <span data-ttu-id="a2648-559">该实现将检查后续的父元素，直到它找到适用的 <xref:System.Windows.NameScope> 实现（通过查找实现的元素找到） <xref:System.Windows.Markup.INameScope> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-559">The implementation will check successive parent elements until it finds the applicable <xref:System.Windows.NameScope> implementation, which is found by finding an element that implements <xref:System.Windows.Markup.INameScope>.</span></span> <span data-ttu-id="a2648-560">有关名称范围的详细信息，请参阅 [WPF XAML 名称范围](/dotnet/framework/wpf/advanced/wpf-xaml-namescopes)。</span><span class="sxs-lookup"><span data-stu-id="a2648-560">For more information about namescopes, see [WPF XAML Namescopes](/dotnet/framework/wpf/advanced/wpf-xaml-namescopes).</span></span>  
  
 <span data-ttu-id="a2648-561"><xref:System.Windows.FrameworkContentElement.RegisterName%2A>若要在代码中创建应用程序时正确地挂钩动画情节提要，则调用是必需的。</span><span class="sxs-lookup"><span data-stu-id="a2648-561">Calling <xref:System.Windows.FrameworkContentElement.RegisterName%2A> is necessary in order to correctly hook up animation storyboards for applications when created in code.</span></span> <span data-ttu-id="a2648-562">这是因为其中一个密钥情节提要属性 <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A> 使用了运行时名称查找，而不是能够引用目标元素。</span><span class="sxs-lookup"><span data-stu-id="a2648-562">This is because one of the key storyboard properties, <xref:System.Windows.Media.Animation.Storyboard.TargetName%2A>, uses a run-time name lookup instead of being able to take a reference to a target element.</span></span> <span data-ttu-id="a2648-563">即使可通过代码引用访问该元素，也是如此。</span><span class="sxs-lookup"><span data-stu-id="a2648-563">This is true even if that element is accessible by reference from the code.</span></span> <span data-ttu-id="a2648-564">有关为何需要为情节提要目标注册名称的详细信息，请参阅 [情节提要概述](/dotnet/framework/wpf/graphics-multimedia/storyboards-overview)。</span><span class="sxs-lookup"><span data-stu-id="a2648-564">For more information on why you need to register names for storyboard targets, see [Storyboards Overview](/dotnet/framework/wpf/graphics-multimedia/storyboards-overview).</span></span> <span data-ttu-id="a2648-565">内容元素的动画比控件上的动画更常见， [演示图板概述重点介绍](/dotnet/framework/wpf/graphics-multimedia/storyboards-overview) 了控制方案。</span><span class="sxs-lookup"><span data-stu-id="a2648-565">Animations for content elements are less common than animations on controls, the [Storyboards Overview](/dotnet/framework/wpf/graphics-multimedia/storyboards-overview) concentrates on control scenarios.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkContentElement.UnregisterName(System.String)" />
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="RemoveLogicalChild">
      <MemberSignature Language="C#" Value="protected internal void RemoveLogicalChild (object child);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RemoveLogicalChild(object child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.RemoveLogicalChild(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RemoveLogicalChild (child As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RemoveLogicalChild(System::Object ^ child);" />
      <MemberSignature Language="F#" Value="member this.RemoveLogicalChild : obj -&gt; unit" Usage="frameworkContentElement.RemoveLogicalChild child" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="child"><span data-ttu-id="a2648-566">要移除的元素。</span><span class="sxs-lookup"><span data-stu-id="a2648-566">The element to remove.</span></span></param>
        <summary><span data-ttu-id="a2648-567">从该元素的逻辑树中移除指定的元素。</span><span class="sxs-lookup"><span data-stu-id="a2648-567">Removes the specified element from the logical tree for this element.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-568">添加对子集合支持时，此 API 主要与类派生方案相关。</span><span class="sxs-lookup"><span data-stu-id="a2648-568">This API is mainly relevant for class deriving scenarios, when adding support for child collections.</span></span>  
  
 <span data-ttu-id="a2648-569">大多数 <xref:System.Windows.FrameworkContentElement> 派生类公开专用集合，这些集合负责 (例如， <xref:System.Windows.Documents.Span.Inlines%2A> 在 <xref:System.Windows.Documents.Span> 类上; 在 <xref:System.Windows.Documents.Section.Blocks%2A> <xref:System.Windows.Documents.Section> 类) 上。</span><span class="sxs-lookup"><span data-stu-id="a2648-569">Most <xref:System.Windows.FrameworkContentElement> derived classes expose dedicated collections that are responsible for containment (for example, <xref:System.Windows.Documents.Span.Inlines%2A> on the <xref:System.Windows.Documents.Span> class; <xref:System.Windows.Documents.Section.Blocks%2A> on the <xref:System.Windows.Documents.Section> class).</span></span> <span data-ttu-id="a2648-570">从这类类派生通常可以避免任何需要直接操作逻辑树。</span><span class="sxs-lookup"><span data-stu-id="a2648-570">Deriving from such classes typically can avoid any need to manipulate the logical tree directly.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.LogicalTreeHelper" />
      </Docs>
    </Member>
    <Member MemberName="Resources">
      <MemberSignature Language="C#" Value="public System.Windows.ResourceDictionary Resources { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.ResourceDictionary Resources" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Resources" />
      <MemberSignature Language="VB.NET" Value="Public Property Resources As ResourceDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::ResourceDictionary ^ Resources { System::Windows::ResourceDictionary ^ get(); void set(System::Windows::ResourceDictionary ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Resources : System.Windows.ResourceDictionary with get, set" Usage="System.Windows.FrameworkContentElement.Resources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Windows.Markup.Ambient]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Windows.Markup.Ambient&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.ResourceDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-571">获取或设置当前本地定义的资源字典。</span><span class="sxs-lookup"><span data-stu-id="a2648-571">Gets or sets the current locally-defined resource dictionary.</span></span></summary>
        <value><span data-ttu-id="a2648-572">当前本地定义的资源。</span><span class="sxs-lookup"><span data-stu-id="a2648-572">The current locally-defined resources.</span></span> <span data-ttu-id="a2648-573">这是一本资源字典，可通过键来访问字典中的资源。</span><span class="sxs-lookup"><span data-stu-id="a2648-573">This is a dictionary of resources, where resources within the dictionary are accessed by key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-574">可以完全或部分地在 Extensible Application Markup Language (XAML) 中定义的资源字典通常创建为属性元素，并且通常位于任何单个页面或应用程序的根元素上。</span><span class="sxs-lookup"><span data-stu-id="a2648-574">Resource dictionaries that can be defined completely or partially in Extensible Application Markup Language (XAML) are typically created as a property element, and are typically on the root element for any individual page or for the application.</span></span> <span data-ttu-id="a2648-575">如果将资源字典放置在此级别，则可在应用程序) 中的 (或任何页中更轻松地查找各个子元素。</span><span class="sxs-lookup"><span data-stu-id="a2648-575">Placing the resource dictionary at this level makes it easier to find from individual child elements in the page (or from any page, in the application case).</span></span> <span data-ttu-id="a2648-576">在大多数应用程序方案中，我们建议将样式定义为资源字典中的对象元素，或将样式定义为外部资源，以便整个样式资源可以是独立的 (这种方法可通过将需要编辑) 的物理文件分离，帮助将设计器责任与开发人员责任区分开来。</span><span class="sxs-lookup"><span data-stu-id="a2648-576">In most application scenarios, we recommend that styles be defined as object elements within a resource dictionary, or be defined as external resources so that the entire style resource can be self-contained (this approach helps separate designer responsibilities from developer responsibilities by separating the physical files that need to be edited).</span></span>  
  
 <span data-ttu-id="a2648-577">请注意，此属性仅返回直接在该元素中声明的资源字典。</span><span class="sxs-lookup"><span data-stu-id="a2648-577">Note that this property returns only the resource dictionary declared directly within that element.</span></span> <span data-ttu-id="a2648-578">这不同于实际资源查找过程，其中，子元素可以访问每个父元素中定义的任何资源，并以递归方式向上搜索。</span><span class="sxs-lookup"><span data-stu-id="a2648-578">This is different than the actual resource lookup process, where a child element can access any of the resources defined in each parent element, searching recursively upwards.</span></span>  
  
 <span data-ttu-id="a2648-579">还可以通过代码从集合中引用资源，但请注意，在声明字典的元素引发后，在 XAML 中创建的资源将无法访问 <xref:System.Windows.FrameworkContentElement.Loaded> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-579">Resources can also be referenced by code from within the collection, but be aware that resources created in XAML will definitely not be accessible until after <xref:System.Windows.FrameworkContentElement.Loaded> is raised by the element that declares the dictionary.</span></span> <span data-ttu-id="a2648-580">事实上，资源是异步分析的，甚至不能 <xref:System.Windows.FrameworkContentElement.Loaded> 保证可以引用 XAML 定义资源的事件。</span><span class="sxs-lookup"><span data-stu-id="a2648-580">In fact, resources are parsed asynchronously, and not even the <xref:System.Windows.FrameworkContentElement.Loaded> event is an assurance that you can reference a XAML defined resource.</span></span> <span data-ttu-id="a2648-581">出于此原因，通常只应作为运行时代码的一部分或通过其他 XAML 技术（如属性值的样式或资源扩展引用）访问 XAML 定义的资源。</span><span class="sxs-lookup"><span data-stu-id="a2648-581">For this reason you should generally only access XAML defined resources as part of run-time code, or through other XAML techniques such as styles or resource extension references for attribute values.</span></span> <span data-ttu-id="a2648-582">通过代码访问资源时，它实质上等效于从 XAML 进行的 [DynamicResource](/dotnet/framework/wpf/advanced/dynamicresource-markup-extension) 引用。</span><span class="sxs-lookup"><span data-stu-id="a2648-582">When you access resources through code, it is essentially equivalent to a [DynamicResource](/dotnet/framework/wpf/advanced/dynamicresource-markup-extension) reference made from XAML.</span></span>  
  
 <span data-ttu-id="a2648-583">基础 <xref:System.Windows.ResourceDictionary> 支持使用代码在集合中添加、删除或查询资源所需的方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-583">The underlying <xref:System.Windows.ResourceDictionary> supports the methods required to add, remove, or query resources from within the collection by using code.</span></span> <span data-ttu-id="a2648-584">可以 <xref:System.Windows.FrameworkContentElement.Resources%2A> 设置属性，以支持将元素的资源集合完全替换为新的或不同的方案 <xref:System.Windows.ResourceDictionary> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-584">The <xref:System.Windows.FrameworkContentElement.Resources%2A> property is settable to support the scenario of completely replacing the resources collection of an element to be a new or different <xref:System.Windows.ResourceDictionary>.</span></span>  
  
 <span data-ttu-id="a2648-585">请注意，所示的 XAML 语法不包含的元素 <xref:System.Windows.ResourceDictionary> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-585">Notice that the XAML syntax shown does not include an element for the <xref:System.Windows.ResourceDictionary>.</span></span> <span data-ttu-id="a2648-586">这是隐式集合语法的示例;可以省略表示集合元素的标记。</span><span class="sxs-lookup"><span data-stu-id="a2648-586">This is an example of implicit collection syntax; a tag representing the collection element can be omitted.</span></span> <span data-ttu-id="a2648-587">改为指定作为项添加到集合中的元素。</span><span class="sxs-lookup"><span data-stu-id="a2648-587">The elements that are added as items to the collection are specified instead.</span></span> <span data-ttu-id="a2648-588">有关隐式集合和 XAML 的详细信息，请参阅 [XAML 语法详述](/dotnet/framework/wpf/advanced/xaml-syntax-in-detail)。</span><span class="sxs-lookup"><span data-stu-id="a2648-588">For more information about implicit collections and XAML, see [XAML Syntax In Detail](/dotnet/framework/wpf/advanced/xaml-syntax-in-detail).</span></span> <span data-ttu-id="a2648-589"><xref:System.Windows.ResourceDictionary>如果要引入合并字典，则仍显式指定为元素的一种情况是，在这种情况下，通常没有任何子元素 <xref:System.Windows.ResourceDictionary> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-589">One case where a <xref:System.Windows.ResourceDictionary> is still specified explicitly as an element is if you are introducing a merged dictionary, in which case there are typically no child elements for that <xref:System.Windows.ResourceDictionary>.</span></span> <span data-ttu-id="a2648-590">有关详细信息，请参阅 [合并资源字典](/dotnet/framework/wpf/advanced/merged-resource-dictionaries)。</span><span class="sxs-lookup"><span data-stu-id="a2648-590">For details, see [Merged Resource Dictionaries](/dotnet/framework/wpf/advanced/merged-resource-dictionaries).</span></span>  
  
<a name="xamlPropertyElementUsage_Resources"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="a2648-591">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="a2648-591">XAML Property Element Usage</span></span>  
  
```  
<object>  
  <object.Resources>  
    oneOrMoreResourceElements  
  </object.Resources>  
</object>  
```  
  
<a name="xamlValues_Resources"></a>   
## <a name="xaml-values"></a><span data-ttu-id="a2648-592">XAML 值</span><span class="sxs-lookup"><span data-stu-id="a2648-592">XAML Values</span></span>  
 <span data-ttu-id="a2648-593">*oneOrMoreResourceElements*</span><span class="sxs-lookup"><span data-stu-id="a2648-593">*oneOrMoreResourceElements*</span></span>  
 <span data-ttu-id="a2648-594">一个或多个对象元素，每个元素都定义一个资源。</span><span class="sxs-lookup"><span data-stu-id="a2648-594">One or more object elements, each of which defines a resource.</span></span> <span data-ttu-id="a2648-595">每个资源属性元素都 <xref:System.Windows.ResourceDictionary> 必须具有一个唯一值，用于 " [X：Key" 指令](/dotnet/framework/xaml-services/x-key-directive)，该指令用作从中检索值时的唯一键 <xref:System.Windows.ResourceDictionary> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-595">Each resource property element within each <xref:System.Windows.ResourceDictionary> must have a unique value for the [x:Key Directive](/dotnet/framework/xaml-services/x-key-directive), which serves as the unique key when values are retrieved from the <xref:System.Windows.ResourceDictionary>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2648-596">下面的示例 <xref:System.Windows.FrameworkContentElement.Resources%2A> 在根元素上建立集合 <xref:System.Windows.Documents.FlowDocument> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-596">The following example establishes a <xref:System.Windows.FrameworkContentElement.Resources%2A> collection on a <xref:System.Windows.Documents.FlowDocument> root element.</span></span> <span data-ttu-id="a2648-597"><xref:System.Windows.Documents.FlowDocument> 是典型的选择，因为它是可作为根元素的几个类中的一种 <xref:System.Windows.FrameworkContentElement> ，而资源通常存储在页根或更高级别（如应用程序中）。</span><span class="sxs-lookup"><span data-stu-id="a2648-597"><xref:System.Windows.Documents.FlowDocument> is a typical choice because it is one of the few <xref:System.Windows.FrameworkContentElement> classes that make sense as a root element, and resources are generally stored at the page root or at even higher levels such as in the application.</span></span>  
  
 [!code-xaml[ContentElementsSmorgasbord#FCEResources](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page2.xaml#fceresources)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Application.Resources" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBinding">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="a2648-598">为指定的依赖属性向此元素附加一个绑定。</span><span class="sxs-lookup"><span data-stu-id="a2648-598">Attaches a binding to this element for the specified dependency property.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpression SetBinding (System.Windows.DependencyProperty dp, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpression SetBinding(class System.Windows.DependencyProperty dp, string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.SetBinding(System.Windows.DependencyProperty,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, path As String) As BindingExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpression ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * string -&gt; System.Windows.Data.BindingExpression" Usage="frameworkContentElement.SetBinding (dp, path)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="a2648-599">标识绑定属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-599">Identifies the bound property.</span></span></param>
        <param name="path"><span data-ttu-id="a2648-600">源属性名称或用于绑定的属性的路径。</span><span class="sxs-lookup"><span data-stu-id="a2648-600">The source property name or the path to the property used for the binding.</span></span></param>
        <summary><span data-ttu-id="a2648-601">将提供的源属性名作为数据源的路径限定，从而将绑定附加到此元素上。</span><span class="sxs-lookup"><span data-stu-id="a2648-601">Attaches a binding to this element, based on the provided source property name as a path qualification to the data source.</span></span></summary>
        <returns><span data-ttu-id="a2648-602">记录绑定的条件。</span><span class="sxs-lookup"><span data-stu-id="a2648-602">Records the conditions of the binding.</span></span> <span data-ttu-id="a2648-603">此返回值可用于错误检查。</span><span class="sxs-lookup"><span data-stu-id="a2648-603">This return value can be useful for error checking.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-604">此方法是一种方便调用的方法 <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType> ，它将当前实例作为传递 <xref:System.Windows.DependencyObject> ，并 <xref:System.Windows.Data.Binding> 基于提供的参数创建新的 `path` 。</span><span class="sxs-lookup"><span data-stu-id="a2648-604">This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, which passes the current instance as the <xref:System.Windows.DependencyObject>, and creates a new <xref:System.Windows.Data.Binding> based on the provided `path` parameter.</span></span> <span data-ttu-id="a2648-605">如果要建立简单的默认绑定，此签名更方便。</span><span class="sxs-lookup"><span data-stu-id="a2648-605">This signature is more convenient if you are establishing a simple default binding.</span></span> <span data-ttu-id="a2648-606">如果需要指定任何非默认条件的绑定属性，或者要使用 <xref:System.Windows.Data.MultiBinding> 或 <xref:System.Windows.Data.PriorityBinding> ，则应使用 <xref:System.Windows.FrameworkContentElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> 签名。</span><span class="sxs-lookup"><span data-stu-id="a2648-606">If you need to specify any binding properties to non-default conditions, or want to use a <xref:System.Windows.Data.MultiBinding> or <xref:System.Windows.Data.PriorityBinding>,you should use the <xref:System.Windows.FrameworkContentElement.SetBinding%28System.Windows.DependencyProperty%2CSystem.Windows.Data.BindingBase%29> signature.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2648-607">下面的示例 <xref:System.Windows.Documents.Paragraph> 通过创建一个新的自定义数据对象，将该对象建立为 <xref:System.Windows.FrameworkContentElement.DataContext%2A> ，并将绑定路径设置为其中的属性，来设置对元素的绑定。</span><span class="sxs-lookup"><span data-stu-id="a2648-607">The following example sets a binding on a <xref:System.Windows.Documents.Paragraph> element, by creating a new custom data object, establishing that object as <xref:System.Windows.FrameworkContentElement.DataContext%2A>, and setting the binding path to a property within it.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#DataContext](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#datacontext)]
 [!code-vb[ContentElementsSmorgasbord#DataContext](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#datacontext)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBinding">
      <MemberSignature Language="C#" Value="public System.Windows.Data.BindingExpressionBase SetBinding (System.Windows.DependencyProperty dp, System.Windows.Data.BindingBase binding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Data.BindingExpressionBase SetBinding(class System.Windows.DependencyProperty dp, class System.Windows.Data.BindingBase binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetBinding (dp As DependencyProperty, binding As BindingBase) As BindingExpressionBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Data::BindingExpressionBase ^ SetBinding(System::Windows::DependencyProperty ^ dp, System::Windows::Data::BindingBase ^ binding);" />
      <MemberSignature Language="F#" Value="member this.SetBinding : System.Windows.DependencyProperty * System.Windows.Data.BindingBase -&gt; System.Windows.Data.BindingExpressionBase" Usage="frameworkContentElement.SetBinding (dp, binding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Data.BindingExpressionBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="binding" Type="System.Windows.Data.BindingBase" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="a2648-608">标识绑定属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-608">Identifies the bound property.</span></span></param>
        <param name="binding"><span data-ttu-id="a2648-609">表示数据绑定。</span><span class="sxs-lookup"><span data-stu-id="a2648-609">Represents a data binding.</span></span></param>
        <summary><span data-ttu-id="a2648-610">基于已提供的绑定对象将一个绑定附加到此元素上。</span><span class="sxs-lookup"><span data-stu-id="a2648-610">Attaches a binding to this element, based on the provided binding object.</span></span></summary>
        <returns><span data-ttu-id="a2648-611">记录绑定的条件。</span><span class="sxs-lookup"><span data-stu-id="a2648-611">Records the conditions of the binding.</span></span> <span data-ttu-id="a2648-612">此返回值可用于错误检查。</span><span class="sxs-lookup"><span data-stu-id="a2648-612">This return value can be useful for error checking.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-613">此方法是一种方便调用的方法 <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType> ，它将当前实例作为传递 <xref:System.Windows.DependencyObject> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-613">This method is a convenience method for calling <xref:System.Windows.Data.BindingOperations.SetBinding%2A?displayProperty=nameWithType>, which passes the current instance as the <xref:System.Windows.DependencyObject>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2648-614">下面的示例 <xref:System.Windows.Documents.Paragraph> 通过创建新的 <xref:System.Windows.Data.Binding> 并将源设置为新生成的对象，对元素设置绑定 `DateTime` 。</span><span class="sxs-lookup"><span data-stu-id="a2648-614">The following example sets a binding on a <xref:System.Windows.Documents.Paragraph> element, by creating a new <xref:System.Windows.Data.Binding> and setting the source to a newly built `DateTime` object.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#SetBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#setbinding)]
 [!code-vb[ContentElementsSmorgasbord#SetBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#setbinding)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetResourceReference">
      <MemberSignature Language="C#" Value="public void SetResourceReference (System.Windows.DependencyProperty dp, object name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetResourceReference(class System.Windows.DependencyProperty dp, object name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetResourceReference (dp As DependencyProperty, name As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetResourceReference(System::Windows::DependencyProperty ^ dp, System::Object ^ name);" />
      <MemberSignature Language="F#" Value="member this.SetResourceReference : System.Windows.DependencyProperty * obj -&gt; unit" Usage="frameworkContentElement.SetResourceReference (dp, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dp" Type="System.Windows.DependencyProperty" />
        <Parameter Name="name" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dp"><span data-ttu-id="a2648-615">资源绑定到的属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-615">The property to which the resource is bound.</span></span></param>
        <param name="name"><span data-ttu-id="a2648-616">资源的名称。</span><span class="sxs-lookup"><span data-stu-id="a2648-616">The name of the resource.</span></span></param>
        <summary><span data-ttu-id="a2648-617">搜索具有指定名称的资源，并且为指定的属性设置一个指向该资源的资源引用。</span><span class="sxs-lookup"><span data-stu-id="a2648-617">Searches for a resource with the specified name and sets up a resource reference to it for the specified property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-618">资源引用类似于在标记中使用 [DynamicResource 标记扩展](/dotnet/framework/wpf/advanced/dynamicresource-markup-extension) 。</span><span class="sxs-lookup"><span data-stu-id="a2648-618">A resource reference is similar to the use of a [DynamicResource Markup Extension](/dotnet/framework/wpf/advanced/dynamicresource-markup-extension) in markup.</span></span> <span data-ttu-id="a2648-619">资源引用创建一个在运行时延迟时提供指定属性值的内部表达式。</span><span class="sxs-lookup"><span data-stu-id="a2648-619">The resource reference creates an internal expression that supplies the value of the specified property on a run-time deferred basis.</span></span> <span data-ttu-id="a2648-620">每当资源字典通过内部事件指示已更改的值，或在 (父元素重定父级时，将重新计算表达式) 。</span><span class="sxs-lookup"><span data-stu-id="a2648-620">The expression will be re-evaluated whenever the resource dictionary indicates a changed value through internal events, or whenever the current element is reparented (a parent change would change the dictionary lookup path).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkContentElement.FindResource(System.Object)" />
        <altmember cref="P:System.Windows.Application.Resources" />
        <altmember cref="P:System.Windows.FrameworkElement.Resources" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeResources">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeResources ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.ShouldSerializeResources" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeResources () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeResources();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeResources : unit -&gt; bool" Usage="frameworkContentElement.ShouldSerializeResources " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a2648-621">返回序列化进程是否应在此类的实例上序列化 <see cref="P:System.Windows.FrameworkContentElement.Resources" /> 属性的内容。</span><span class="sxs-lookup"><span data-stu-id="a2648-621">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkContentElement.Resources" /> property on instances of this class.</span></span></summary>
        <returns><span data-ttu-id="a2648-622">如果应当序列化 <see cref="P:System.Windows.FrameworkContentElement.Resources" /> 属性值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-622"><see langword="true" /> if the <see cref="P:System.Windows.FrameworkContentElement.Resources" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-623">这会返回 `true` ，前提是本地中至少有一个键控资源 <xref:System.Windows.FrameworkContentElement.Resources%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-623">This will return `true` so long as there is at least one keyed resource in the local <xref:System.Windows.FrameworkContentElement.Resources%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeStyle">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.ShouldSerializeStyle" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeStyle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeStyle();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeStyle : unit -&gt; bool" Usage="frameworkContentElement.ShouldSerializeStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a2648-624">返回序列化进程是否应在此类的实例上序列化 <see cref="P:System.Windows.FrameworkContentElement.Style" /> 属性的内容。</span><span class="sxs-lookup"><span data-stu-id="a2648-624">Returns whether serialization processes should serialize the contents of the <see cref="P:System.Windows.FrameworkContentElement.Style" /> property on instances of this class.</span></span></summary>
        <returns><span data-ttu-id="a2648-625">如果应当序列化 <see cref="P:System.Windows.FrameworkContentElement.Style" /> 属性值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-625"><see langword="true" /> if the <see cref="P:System.Windows.FrameworkContentElement.Style" /> property value should be serialized; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-626">`true`如果 <xref:System.Windows.Style> 是本地设置的，则会返回。</span><span class="sxs-lookup"><span data-stu-id="a2648-626">This will return `true` if the <xref:System.Windows.Style> is locally set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; SourceUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.SourceUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SourceUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ SourceUpdated;" />
      <MemberSignature Language="F#" Value="member this.SourceUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.SourceUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-627">当参与此元素上的绑定的任意关联数据源更改时发生。</span><span class="sxs-lookup"><span data-stu-id="a2648-627">Occurs when any associated data source participating in a binding on this element changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-628">此事件 <xref:System.Windows.Data.Binding.SourceUpdated> 表示 <xref:System.Windows.Data.Binding> 与此元素关联的任何引发的事件。</span><span class="sxs-lookup"><span data-stu-id="a2648-628">This event surfaces the <xref:System.Windows.Data.Binding.SourceUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element.</span></span>  
  
<a name="xamlAttributeUsage_SourceUpdated"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a2648-629">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="a2648-629">XAML Attribute Usage</span></span>  
  
```  
<object SourceUpdated="EventHandler"/>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Windows.Style Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style Style" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Style" />
      <MemberSignature Language="VB.NET" Value="Public Property Style As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ Style { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Style : System.Windows.Style with get, set" Usage="System.Windows.FrameworkContentElement.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-630">获取或设置此元素要使用的样式。</span><span class="sxs-lookup"><span data-stu-id="a2648-630">Gets or sets the style to be used by this element.</span></span></summary>
        <value><span data-ttu-id="a2648-631">若存在，则为此元素适用的非默认样式。</span><span class="sxs-lookup"><span data-stu-id="a2648-631">The applied, nondefault style for the element, if present.</span></span> <span data-ttu-id="a2648-632">否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-632">Otherwise, <see langword="null" />.</span></span> <span data-ttu-id="a2648-633">对于默认构造的 <see cref="T:System.Windows.FrameworkContentElement" />，其默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-633">The default for a default-constructed <see cref="T:System.Windows.FrameworkContentElement" /> is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-634">当前样式通常由主题中的默认样式提供，或从通常应用于按页面或应用程序级别的资源应用于该类型的对象的样式， (隐式样式) 。</span><span class="sxs-lookup"><span data-stu-id="a2648-634">The current style is often provided by a default style from theming, or from styles generally applied to objects of that type by resources at page or application level (an implicit style).</span></span> <span data-ttu-id="a2648-635">此属性未设置或返回默认 (主题) 样式，但它确实返回了隐式样式或显式样式。</span><span class="sxs-lookup"><span data-stu-id="a2648-635">This property does not set or return default (theme) styles, but it does return the implicit style or an explicit style.</span></span> <span data-ttu-id="a2648-636">对于隐式或显式样式，无论样式是作为资源访问的还是在本地定义的，都不重要。</span><span class="sxs-lookup"><span data-stu-id="a2648-636">In the case of implicit or explicit styles, it does not matter whether the style is accessed as a resource or defined locally.</span></span>  
  
 <span data-ttu-id="a2648-637">设置样式有一些限制。</span><span class="sxs-lookup"><span data-stu-id="a2648-637">Setting the styles has some restrictions.</span></span> <span data-ttu-id="a2648-638">可随时将整个属性重置 <xref:System.Windows.FrameworkContentElement.Style%2A> 为新的 <xref:System.Windows.Style> ，这将强制进行布局重新组合。</span><span class="sxs-lookup"><span data-stu-id="a2648-638">You can reset the entire <xref:System.Windows.FrameworkContentElement.Style%2A> property to a new <xref:System.Windows.Style> at any time, which will force a layout recomposition.</span></span> <span data-ttu-id="a2648-639">但是，一旦加载的元素使用该样式，就 <xref:System.Windows.Style> 应将其视为密封。</span><span class="sxs-lookup"><span data-stu-id="a2648-639">However, as soon as that style is placed in use by a loaded element, the <xref:System.Windows.Style> should be considered sealed.</span></span> <span data-ttu-id="a2648-640">尝试对使用中的样式的任何单个属性进行更改 (如) 集合内的任何内容 <xref:System.Windows.Style.Setters%2A> 会导致引发异常。</span><span class="sxs-lookup"><span data-stu-id="a2648-640">Attempting to make a change to any individual property of an in-use style (such as anything within the collection of <xref:System.Windows.Style.Setters%2A>) causes an exception to be thrown.</span></span> <span data-ttu-id="a2648-641">在标记中定义的样式会在从资源字典中加载时立即被视为)  (资源，或者将其包含在其中的页面加载 (用于) 内联样式。</span><span class="sxs-lookup"><span data-stu-id="a2648-641">A style that is defined in markup is considered to be in use as soon as it is loaded from a resource dictionary (for resources), or the page it is contained within is loaded (for inline styles).</span></span>  
  
 <span data-ttu-id="a2648-642"><xref:System.Windows.FrameworkContentElement.Style%2A> 是具有特殊优先级的依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-642"><xref:System.Windows.FrameworkContentElement.Style%2A> is a dependency property with special precedence.</span></span> <span data-ttu-id="a2648-643">本地设置的样式通常在属性系统中具有最高的优先级。</span><span class="sxs-lookup"><span data-stu-id="a2648-643">The locally set style generally operates at the highest precedence in the property system.</span></span> <span data-ttu-id="a2648-644">如果 <xref:System.Windows.FrameworkContentElement.Style%2A> 此时为 null，则在加载过程中，将属性系统检查隐式样式作为指定该类型的定义资源。</span><span class="sxs-lookup"><span data-stu-id="a2648-644">If the <xref:System.Windows.FrameworkContentElement.Style%2A> is null at this point, during loading the property system checks for implicit styles as defined resources that specify that type.</span></span> <span data-ttu-id="a2648-645">如果在执行此步骤后样式仍然为 null，则样式来自默认 (主题) 样式，但在属性值中不返回默认样式 <xref:System.Windows.FrameworkContentElement.Style%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-645">If the style is still null after this step, then the style comes from the default (theme) style, but the default style is not returned in the <xref:System.Windows.FrameworkContentElement.Style%2A> property value.</span></span> <span data-ttu-id="a2648-646">请参阅 [依赖属性值优先级](/dotnet/framework/wpf/advanced/dependency-property-value-precedence)。</span><span class="sxs-lookup"><span data-stu-id="a2648-646">See [Dependency Property Value Precedence](/dotnet/framework/wpf/advanced/dependency-property-value-precedence).</span></span>  
  
<a name="xamlAttributeUsage_Style"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a2648-647">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="a2648-647">XAML Attribute Usage</span></span>  
  
```  
<object Style="{resourceExtension StyleResourceKey}"/>  
```  
  
<a name="xamlValues_Style"></a>   
## <a name="xaml-values"></a><span data-ttu-id="a2648-648">XAML 值</span><span class="sxs-lookup"><span data-stu-id="a2648-648">XAML Values</span></span>  
 <span data-ttu-id="a2648-649">*resourceExtension*</span><span class="sxs-lookup"><span data-stu-id="a2648-649">*resourceExtension*</span></span>  
 <span data-ttu-id="a2648-650">以下项之一：、或。</span><span class="sxs-lookup"><span data-stu-id="a2648-650">One of the following: , or .</span></span> <span data-ttu-id="a2648-651">请参阅 [XAML 资源](/dotnet/framework/wpf/advanced/xaml-resources)。</span><span class="sxs-lookup"><span data-stu-id="a2648-651">See [XAML Resources](/dotnet/framework/wpf/advanced/xaml-resources).</span></span>  
  
 <span data-ttu-id="a2648-652">*styleResourceKey*</span><span class="sxs-lookup"><span data-stu-id="a2648-652">*styleResourceKey*</span></span>  
 <span data-ttu-id="a2648-653">标识所请求的样式的键。</span><span class="sxs-lookup"><span data-stu-id="a2648-653">The key that identifies the style being requested.</span></span> <span data-ttu-id="a2648-654">键引用中的现有资源 <xref:System.Windows.ResourceDictionary> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-654">The key refers to an existing resource in a <xref:System.Windows.ResourceDictionary>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="a2648-655">属性元素语法在技术上是可行的，但不建议这样做。</span><span class="sxs-lookup"><span data-stu-id="a2648-655">Property element syntax is technically possible, but not recommended.</span></span> <span data-ttu-id="a2648-656">请参阅 [内联样式和模板](/dotnet/framework/wpf/advanced/inline-styles-and-templates)。</span><span class="sxs-lookup"><span data-stu-id="a2648-656">See [Inline Styles and Templates](/dotnet/framework/wpf/advanced/inline-styles-and-templates).</span></span>  <span data-ttu-id="a2648-657">使用 [TemplateBinding](/dotnet/framework/wpf/advanced/templatebinding-markup-extension) 或的绑定引用 <xref:System.Windows.Data.Binding> 也可能发生，但情况并不常见。</span><span class="sxs-lookup"><span data-stu-id="a2648-657">A binding reference using [TemplateBinding](/dotnet/framework/wpf/advanced/templatebinding-markup-extension) or <xref:System.Windows.Data.Binding> is also possible, but uncommon.</span></span>  
  
<a name="dependencyPropertyInfo_Style"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="a2648-658">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="a2648-658">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="a2648-659">标识符字段</span><span class="sxs-lookup"><span data-stu-id="a2648-659">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.StyleProperty>|  
|<span data-ttu-id="a2648-660">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="a2648-660">Metadata properties set to `true`</span></span>|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## Examples  
 <span data-ttu-id="a2648-661">下面的示例 <xref:System.Windows.FrameworkContentElement.Resources%2A> 在根元素上建立一个集合 <xref:System.Windows.Documents.FlowDocument> ，然后将其作为一个作为的特定样式的资源进行引用 <xref:System.Windows.Documents.Paragraph> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-661">The following example establishes a <xref:System.Windows.FrameworkContentElement.Resources%2A> collection on a <xref:System.Windows.Documents.FlowDocument> root element and then references it as a resource as a specific style for a <xref:System.Windows.Documents.Paragraph>.</span></span>  
  
 [!code-xaml[ContentElementsSmorgasbord#FCEResources](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page2.xaml#fceresources)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty StyleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty StyleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.StyleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly StyleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ StyleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable StyleProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.StyleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-662">标识 <see cref="P:System.Windows.FrameworkContentElement.Style" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-662">Identifies the <see cref="P:System.Windows.FrameworkContentElement.Style" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="bool IQueryAmbient.IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function IsAmbientPropertyAvailable (propertyName As String) As Boolean Implements IQueryAmbient.IsAmbientPropertyAvailable" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System::String ^ propertyName) = System::Windows::Markup::IQueryAmbient::IsAmbientPropertyAvailable;" />
      <MemberSignature Language="F#" Value="abstract member System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable : string -&gt; bool&#xA;override this.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable : string -&gt; bool" Usage="frameworkContentElement.System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable propertyName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="propertyName"><span data-ttu-id="a2648-663">请求的环境属性的名称。</span><span class="sxs-lookup"><span data-stu-id="a2648-663">The name of the requested ambient property.</span></span></param>
        <summary><span data-ttu-id="a2648-664">有关此成员的说明，请参见 <see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-664">For a description of this member, see the <see cref="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" /> method.</span></span></summary>
        <returns><span data-ttu-id="a2648-665">如果 <paramref name="propertyName" /> 可用，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-665"><see langword="true" /> if <paramref name="propertyName" /> is available; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-666">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="a2648-666">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="a2648-667">它只能在 <xref:System.Windows.FrameworkContentElement> 实例被强制转换为 <xref:System.Windows.Markup.IQueryAmbient> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="a2648-667">It can be used only when the <xref:System.Windows.FrameworkContentElement> instance is cast to an <xref:System.Windows.Markup.IQueryAmbient> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.FrameworkContentElement.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-668">获取或设置任意对象值，该值可用于存储关于此元素的自定义信息。</span><span class="sxs-lookup"><span data-stu-id="a2648-668">Gets or sets an arbitrary object value that can be used to store custom information about this element.</span></span></summary>
        <value><span data-ttu-id="a2648-669">预期值。</span><span class="sxs-lookup"><span data-stu-id="a2648-669">The intended value.</span></span> <span data-ttu-id="a2648-670">此属性没有默认值。</span><span class="sxs-lookup"><span data-stu-id="a2648-670">This property has no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-671">此属性类似于其他 Microsoft 编程模型中的标记属性，如 Visual Basic for Applications 或 Windows 窗体。</span><span class="sxs-lookup"><span data-stu-id="a2648-671">This property is analogous to Tag properties in other Microsoft programming models, such as Visual Basic for Applications or Windows Forms.</span></span> <span data-ttu-id="a2648-672">它旨在提供一个预先存在的位置来存储有关任何元素的一些基本自定义信息，而不会强制应用程序开发人员使用子类。</span><span class="sxs-lookup"><span data-stu-id="a2648-672">It is intended to provide a pre-existing place to store some basic custom information about any element without forcing application developers to subclass.</span></span>  
  
<a name="xamlValues_Tag"></a>   
## <a name="xaml-values"></a><span data-ttu-id="a2648-673">XAML 值</span><span class="sxs-lookup"><span data-stu-id="a2648-673">XAML Values</span></span>  
 <span data-ttu-id="a2648-674">由于此属性采用对象，因此您需要使用属性元素用法，以便将 <xref:System.Windows.FrameworkContentElement.Tag%2A> XAML 中的属性设置为具有已知的内置类型转换器的对象（如字符串）。</span><span class="sxs-lookup"><span data-stu-id="a2648-674">Because this property takes an object, you need to use the property element usage in order to set the <xref:System.Windows.FrameworkContentElement.Tag%2A> property in XAML to anything other than an object with a known and built-in type converter, such as a string.</span></span> <span data-ttu-id="a2648-675">以这种方式使用的对象通常不在标准 WPF 命名空间中，因此可能需要将命名空间映射到外部命名空间才能作为 XAML 元素引入。</span><span class="sxs-lookup"><span data-stu-id="a2648-675">Objects used in this way are typically not within the standard WPF namespaces and therefore may require namespace mapping to the external namespace in order to be introduced as XAML elements.</span></span>  
  
<a name="dependencyPropertyInfo_Tag"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="a2648-676">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="a2648-676">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="a2648-677">标识符字段</span><span class="sxs-lookup"><span data-stu-id="a2648-677">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.TagProperty>|  
|<span data-ttu-id="a2648-678">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="a2648-678">Metadata properties set to `true`</span></span>|<span data-ttu-id="a2648-679">无</span><span class="sxs-lookup"><span data-stu-id="a2648-679">None</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.FrameworkContentElement.Name" />
      </Docs>
    </Member>
    <Member MemberName="TagProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TagProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TagProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.TagProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly TagProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ TagProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable TagProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.TagProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-680">标识 <see cref="P:System.Windows.FrameworkContentElement.Tag" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-680">Identifies the <see cref="P:System.Windows.FrameworkContentElement.Tag" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Data.DataTransferEventArgs&gt; TargetUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.TargetUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TargetUpdated As EventHandler(Of DataTransferEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Data::DataTransferEventArgs ^&gt; ^ TargetUpdated;" />
      <MemberSignature Language="F#" Value="member this.TargetUpdated : EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " Usage="member this.TargetUpdated : System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Data.DataTransferEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-681">当参与此元素上的绑定的任意关联目标属性更改时发生。</span><span class="sxs-lookup"><span data-stu-id="a2648-681">Occurs when any associated target property participating in a binding on this element changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-682">此事件 <xref:System.Windows.Data.Binding.TargetUpdated> 表示 <xref:System.Windows.Data.Binding> 与此元素关联的任何引发的事件。</span><span class="sxs-lookup"><span data-stu-id="a2648-682">This event surfaces the <xref:System.Windows.Data.Binding.TargetUpdated> event that is raised by any <xref:System.Windows.Data.Binding> associated with this element.</span></span> <span data-ttu-id="a2648-683">这通常意味着所涉及的绑定是一个双向绑定，而绑定的依赖项属性确认属性所支持的任何验证或缓存方案的以前的属性值无效。</span><span class="sxs-lookup"><span data-stu-id="a2648-683">This usually means that the binding in question is a two-way binding, and that the bound  dependency property affirms an invalidation of the previous property value per any validation or caching scheme that the property supports.</span></span>  
  
 <span data-ttu-id="a2648-684">此事件的事件参数将通知你更改了哪个绑定属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-684">The event arguments of this event will inform you which bound property was changed.</span></span>  
  
<a name="xamlAttributeUsage_TargetUpdated"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a2648-685">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="a2648-685">XAML Attribute Usage</span></span>  
  
```  
<object TargetUpdated="EventHandler"/>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TemplatedParent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject TemplatedParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject TemplatedParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.TemplatedParent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemplatedParent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ TemplatedParent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TemplatedParent : System.Windows.DependencyObject" Usage="System.Windows.FrameworkContentElement.TemplatedParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-686">获取对此元素的模板父级的引用。</span><span class="sxs-lookup"><span data-stu-id="a2648-686">Gets a reference to the template parent of this element.</span></span> <span data-ttu-id="a2648-687">如果该元素不是通过模板创建的，则此属性无关。</span><span class="sxs-lookup"><span data-stu-id="a2648-687">This property is not relevant if the element was not created through a template.</span></span></summary>
        <value><span data-ttu-id="a2648-688">元素的 <see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" /> 导致要创建此元素。</span><span class="sxs-lookup"><span data-stu-id="a2648-688">The element whose <see cref="T:System.Windows.FrameworkTemplate" /><see cref="P:System.Windows.FrameworkTemplate.VisualTree" /> caused this element to be created.</span></span> <span data-ttu-id="a2648-689">此值通常为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-689">This value is frequently <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-690">模板实际上是共享对象，模板的内容仅创建一次。</span><span class="sxs-lookup"><span data-stu-id="a2648-690">Templates are actually shared objects, where the contents of the template are created only once.</span></span> <span data-ttu-id="a2648-691">因此，如果您获取对来自模板的元素的对象引用，则可能会发现明显的逻辑树不会到达页根。</span><span class="sxs-lookup"><span data-stu-id="a2648-691">Therefore, if you obtain an object reference to an element that came from a template, you may find that the apparent logical tree does not reach to the page root.</span></span> <span data-ttu-id="a2648-692">为了将此类模板引用连接到页面的逻辑树，您应该获取 <xref:System.Windows.FrameworkContentElement.TemplatedParent%2A> 值，并根据需要继续导航该元素树。</span><span class="sxs-lookup"><span data-stu-id="a2648-692">In order to connect such a template reference to the page's logical tree, you should get the <xref:System.Windows.FrameworkContentElement.TemplatedParent%2A> value and continue to navigate that element tree as desired.</span></span>  
  
 <span data-ttu-id="a2648-693"><xref:System.Windows.FrameworkContentElement.TemplatedParent%2A> 经常 `null` 用于常见对象，因为如果从应用程序中的页面外获取了对象引用（通过典型方法），则该元素可能不是通过模板创建的。</span><span class="sxs-lookup"><span data-stu-id="a2648-693"><xref:System.Windows.FrameworkContentElement.TemplatedParent%2A> will frequently be `null` for common objects, because if you have obtained an object reference from out of a page in your application through typical means, that element probably was not created from a template.</span></span> <span data-ttu-id="a2648-694"><xref:System.Windows.FrameworkContentElement.TemplatedParent%2A>可能不会 `null` 包括命中测试、某些低级输入事件的事件处理或使用枚举器等操作，这些情况可能已返回来自模板的元素。</span><span class="sxs-lookup"><span data-stu-id="a2648-694">Cases where <xref:System.Windows.FrameworkContentElement.TemplatedParent%2A> might not be `null` would include operations such as hit-testing, event handling for certain low-level input events, or working with enumerators, which may have returned elements that came from templates.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public object ToolTip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ToolTip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.FrameworkContentElement.ToolTip" />
      <MemberSignature Language="VB.NET" Value="Public Property ToolTip As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ToolTip { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ToolTip : obj with get, set" Usage="System.Windows.FrameworkContentElement.ToolTip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Bindable(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Bindable(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Category("Appearance")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Category("Appearance")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-695">获取或设置在用户界面 (UI) 中为此元素显示的工具提示对象。</span><span class="sxs-lookup"><span data-stu-id="a2648-695">Gets or sets the tool-tip object that is displayed for this element in the user interface (UI).</span></span></summary>
        <value><span data-ttu-id="a2648-696">工具提示对象。</span><span class="sxs-lookup"><span data-stu-id="a2648-696">The tooltip object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-697">如果此属性的值为类型，则 <xref:System.Windows.Controls.ToolTip> 是将在 UI 中使用的工具提示。</span><span class="sxs-lookup"><span data-stu-id="a2648-697">If the value of this property is of type <xref:System.Windows.Controls.ToolTip>, then that is the tool-tip that will be used in the UI.</span></span>  <span data-ttu-id="a2648-698">如果值为任何其他类型，则该值将用作 <xref:System.Windows.Controls.ToolTip> 系统) 构造的 (所提供的内容。</span><span class="sxs-lookup"><span data-stu-id="a2648-698">If the value is of any other type, then that value will be used as the *content* for a <xref:System.Windows.Controls.ToolTip> provided (constructed) by the system.</span></span> <span data-ttu-id="a2648-699">有关更多信息，请参见<xref:System.Windows.Controls.ToolTipService>。</span><span class="sxs-lookup"><span data-stu-id="a2648-699">For more information see <xref:System.Windows.Controls.ToolTipService>.</span></span> <span data-ttu-id="a2648-700">服务类提供附加属性，这些属性可用于进一步自定义工具提示。</span><span class="sxs-lookup"><span data-stu-id="a2648-700">The service class provides attached properties that can be used to further customize a tool-tip.</span></span>  
  
<a name="xamlAttributeUsage_ToolTip"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="a2648-701">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="a2648-701">XAML Attribute Usage</span></span>  
  
```  
<object ToolTip="toolTipContent"/>  
```  
  
<a name="xamlPropertyElementUsage_ToolTip"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="a2648-702">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="a2648-702">XAML Property Element Usage</span></span>  
  
```xaml 
<object>  
  <object.ToolTip>  
    <ToolTip .../>  
  </object.ToolTip>  
</object>  
```

<span data-ttu-id="a2648-703">- 或 -</span><span class="sxs-lookup"><span data-stu-id="a2648-703">-or-</span></span>

```xaml
<object>  
  <object.ToolTip>  
    toolTipObjectContent  
  </object.ToolTip>  
</object>  
```

<a name="xamlValues_ToolTip"></a>   
## <a name="xaml-values"></a><span data-ttu-id="a2648-704">XAML 值</span><span class="sxs-lookup"><span data-stu-id="a2648-704">XAML Values</span></span>  
 <span data-ttu-id="a2648-705">*toolTipContent*</span><span class="sxs-lookup"><span data-stu-id="a2648-705">*toolTipContent*</span></span>  
 <span data-ttu-id="a2648-706">一个字符串，该字符串将成为的显示文本 <xref:System.Windows.FrameworkContentElement.ToolTip%2A> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-706">A string that becomes the display text for the <xref:System.Windows.FrameworkContentElement.ToolTip%2A>.</span></span>  
  
 <span data-ttu-id="a2648-707">*toolTipObjectContent*</span><span class="sxs-lookup"><span data-stu-id="a2648-707">*toolTipObjectContent*</span></span>  
 <span data-ttu-id="a2648-708">某些对象（以对象元素形式提供）应用作的内容 <xref:System.Windows.FrameworkContentElement> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-708">Some object, provided in object element form, that should be used as the content for the <xref:System.Windows.FrameworkContentElement>.</span></span> <span data-ttu-id="a2648-709">通常，这是一个 <xref:System.Windows.FrameworkElement> 或一些其他元素，它将创建的布局合成 <xref:System.Windows.FrameworkContentElement.ToolTip%2A> ，最终包含组合内的文本内容。</span><span class="sxs-lookup"><span data-stu-id="a2648-709">Typically this would be a <xref:System.Windows.FrameworkElement> or some other element that creates layout compositing for the <xref:System.Windows.FrameworkContentElement.ToolTip%2A>, eventually containing text content within the compositing.</span></span> <span data-ttu-id="a2648-710">在此用法中， <xref:System.Windows.Controls.ToolTip> 元素是从分析的 XAML 隐式创建的，而 *toolTipObjectContent* 内容则设置为其 <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-710">In this usage, the <xref:System.Windows.Controls.ToolTip> element is created implicitly from the parsed XAML, and the *toolTipObjectContent* content is set as its <xref:System.Windows.Controls.ContentControl.Content%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="a2648-711"><`ToolTip` .../></span><span class="sxs-lookup"><span data-stu-id="a2648-711"><`ToolTip` .../></span></span>  
 <span data-ttu-id="a2648-712">请参阅 <xref:System.Windows.Controls.ToolTip>。</span><span class="sxs-lookup"><span data-stu-id="a2648-712">See <xref:System.Windows.Controls.ToolTip>.</span></span>  
  
<a name="dependencyPropertyInfo_ToolTip"></a>   
## <a name="dependency-property-information"></a><span data-ttu-id="a2648-713">依赖项属性信息</span><span class="sxs-lookup"><span data-stu-id="a2648-713">Dependency Property Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="a2648-714">标识符字段</span><span class="sxs-lookup"><span data-stu-id="a2648-714">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ToolTipProperty>|  
|<span data-ttu-id="a2648-715">元数据属性设置为 `true`</span><span class="sxs-lookup"><span data-stu-id="a2648-715">Metadata properties set to `true`</span></span>|<span data-ttu-id="a2648-716">无</span><span class="sxs-lookup"><span data-stu-id="a2648-716">None</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="a2648-717">下面的示例将属性的值 <xref:System.Windows.FrameworkElement.ToolTip%2A> 直接设置为字符串。</span><span class="sxs-lookup"><span data-stu-id="a2648-717">The following example sets the value of the <xref:System.Windows.FrameworkElement.ToolTip%2A> property directly to a string.</span></span>  
  
 [!code-csharp[TableSnippets2#_Table_RowGroups_ManipRows](~/samples/snippets/csharp/VS_Snippets_Wpf/TableSnippets2/CSharp/Window1.xaml.cs#_table_rowgroups_maniprows)]
 [!code-vb[TableSnippets2#_Table_RowGroups_ManipRows](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TableSnippets2/visualbasic/window1.xaml.vb#_table_rowgroups_maniprows)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosing">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipClosing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipClosing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.ToolTipClosing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipClosing As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipClosing;" />
      <MemberSignature Language="F#" Value="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipClosing : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-718">在元素上的任何工具提示关闭之前发生。</span><span class="sxs-lookup"><span data-stu-id="a2648-718">Occurs just before any tooltip on the element is closed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-719">若要禁止关闭工具提示，事件的处理程序应将其标记为已处理。</span><span class="sxs-lookup"><span data-stu-id="a2648-719">To suppress closing the tooltip, handlers of the event should mark it as handled.</span></span>  
  
 <span data-ttu-id="a2648-720">此事件不能 <xref:System.Windows.EventTrigger> 在样式中为。</span><span class="sxs-lookup"><span data-stu-id="a2648-720">This event cannot be an <xref:System.Windows.EventTrigger> in a style.</span></span> <span data-ttu-id="a2648-721">这是因为此事件的 "标识符" 字段会重新使用服务中的实现，该实现不会公开事件的添加/移除方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-721">This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove methods on the event.</span></span>  
  
<a name="routedEventInfo_ToolTipClosing"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="a2648-722">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="a2648-722">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="a2648-723">标识符字段</span><span class="sxs-lookup"><span data-stu-id="a2648-723">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ToolTipClosingEvent>|  
|<span data-ttu-id="a2648-724">路由策略</span><span class="sxs-lookup"><span data-stu-id="a2648-724">Routing strategy</span></span>|<span data-ttu-id="a2648-725">直接</span><span class="sxs-lookup"><span data-stu-id="a2648-725">Direct</span></span>|  
|<span data-ttu-id="a2648-726">委托</span><span class="sxs-lookup"><span data-stu-id="a2648-726">Delegate</span></span>|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipClosingEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipClosingEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipClosingEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ToolTipClosingEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipClosingEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipClosingEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipClosingEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkContentElement.ToolTipClosingEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-727">标识 <see cref="E:System.Windows.FrameworkContentElement.ToolTipClosing" /> [路由事件概述](/dotnet/framework/wpf/advanced/routed-events-overview)。</span><span class="sxs-lookup"><span data-stu-id="a2648-727">Identifies the <see cref="E:System.Windows.FrameworkContentElement.ToolTipClosing" /> [Routed Events Overview](/dotnet/framework/wpf/advanced/routed-events-overview).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-728">事件标识符对象是在注册路由事件时创建的 (请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) ，然后可用于添加类处理程序 (参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>) 。</span><span class="sxs-lookup"><span data-stu-id="a2648-728">Event identifier objects are created when routed events are registered (see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) and can then be used to add class handlers (see <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span></span> <span data-ttu-id="a2648-729">标识符对象包含标识名称、所有者类型、处理程序类型、路由策略和用于为事件添加所有者的实用工具方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-729">Identifier objects contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpening">
      <MemberSignature Language="C#" Value="public event System.Windows.Controls.ToolTipEventHandler ToolTipOpening;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Controls.ToolTipEventHandler ToolTipOpening" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.ToolTipOpening" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ToolTipOpening As ToolTipEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Controls::ToolTipEventHandler ^ ToolTipOpening;" />
      <MemberSignature Language="F#" Value="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " Usage="member this.ToolTipOpening : System.Windows.Controls.ToolTipEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ToolTipEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-730">在元素上的任何工具提示打开时发生。</span><span class="sxs-lookup"><span data-stu-id="a2648-730">Occurs when any tooltip on the element is opened.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-731">若要手动打开工具提示，事件处理程序应将相关事件标记为 "已处理"。</span><span class="sxs-lookup"><span data-stu-id="a2648-731">To manually open tooltips, handlers of the events should mark the relevant event as handled.</span></span> <span data-ttu-id="a2648-732">否则，属性的值 <xref:System.Windows.FrameworkContentElement.ToolTip%2A> 将用于自动打开上下文菜单。</span><span class="sxs-lookup"><span data-stu-id="a2648-732">Otherwise, the value of the <xref:System.Windows.FrameworkContentElement.ToolTip%2A> property will be used to automatically open a context menu.</span></span> <span data-ttu-id="a2648-733">将事件标记为已处理会有效地取消默认操作，并且可能会有机会重置属性的值， <xref:System.Windows.FrameworkContentElement.ToolTip%2A> 然后打开新的 <xref:System.Windows.Controls.ContextMenu> 。</span><span class="sxs-lookup"><span data-stu-id="a2648-733">Marking the event handled will effectively cancel the default action, and could be an opportunity to reset the value of the <xref:System.Windows.FrameworkContentElement.ToolTip%2A> property and then open the new <xref:System.Windows.Controls.ContextMenu>.</span></span> <span data-ttu-id="a2648-734">请注意，如果 <xref:System.Windows.FrameworkContentElement.ToolTip%2A> 为空引用或未设置，则不会引发此事件。</span><span class="sxs-lookup"><span data-stu-id="a2648-734">Note that this event will not be raised if <xref:System.Windows.FrameworkContentElement.ToolTip%2A> is a null reference or otherwise unset.</span></span>  
  
 <span data-ttu-id="a2648-735">此事件不能 <xref:System.Windows.EventTrigger> 在样式中为。</span><span class="sxs-lookup"><span data-stu-id="a2648-735">This event cannot be an <xref:System.Windows.EventTrigger> in a style.</span></span> <span data-ttu-id="a2648-736">这是因为此事件的 "标识符" 字段会重新使用服务中的实现，该实现不会公开事件的添加/移除方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-736">This is because the identifier field of this event re-uses an implementation from a service that does not expose add/remove methods on the event.</span></span>  
  
<a name="routedEventInfo_ToolTipOpening"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="a2648-737">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="a2648-737">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="a2648-738">标识符字段</span><span class="sxs-lookup"><span data-stu-id="a2648-738">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.ToolTipOpeningEvent>|  
|<span data-ttu-id="a2648-739">路由策略</span><span class="sxs-lookup"><span data-stu-id="a2648-739">Routing strategy</span></span>|<span data-ttu-id="a2648-740">直接</span><span class="sxs-lookup"><span data-stu-id="a2648-740">Direct</span></span>|  
|<span data-ttu-id="a2648-741">委托</span><span class="sxs-lookup"><span data-stu-id="a2648-741">Delegate</span></span>|<xref:System.Windows.Controls.ToolTipEventHandler>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipOpeningEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent ToolTipOpeningEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent ToolTipOpeningEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ToolTipOpeningEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipOpeningEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ ToolTipOpeningEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipOpeningEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkContentElement.ToolTipOpeningEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-742">标识 <see cref="E:System.Windows.FrameworkContentElement.ToolTipOpening" /> [路由事件概述](/dotnet/framework/wpf/advanced/routed-events-overview)。</span><span class="sxs-lookup"><span data-stu-id="a2648-742">Identifies the <see cref="E:System.Windows.FrameworkContentElement.ToolTipOpening" /> [Routed Events Overview](/dotnet/framework/wpf/advanced/routed-events-overview).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-743">事件标识符对象是在注册路由事件时创建的 (请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) ，然后可用于添加类处理程序 (参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>) 。</span><span class="sxs-lookup"><span data-stu-id="a2648-743">Event identifier objects are created when routed events are registered (see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) and can then be used to add class handlers (see <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span></span> <span data-ttu-id="a2648-744">标识符对象包含标识名称、所有者类型、处理程序类型、路由策略和用于为事件添加所有者的实用工具方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-744">Identifier objects contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTipProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ToolTipProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ToolTipProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.ToolTipProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ToolTipProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ToolTipProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ToolTipProperty : System.Windows.DependencyProperty" Usage="System.Windows.FrameworkContentElement.ToolTipProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-745">标识 <see cref="P:System.Windows.FrameworkContentElement.ToolTip" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="a2648-745">Identifies the <see cref="P:System.Windows.FrameworkContentElement.ToolTip" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFindResource">
      <MemberSignature Language="C#" Value="public object TryFindResource (object resourceKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object TryFindResource(object resourceKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.TryFindResource(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryFindResource (resourceKey As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ TryFindResource(System::Object ^ resourceKey);" />
      <MemberSignature Language="F#" Value="member this.TryFindResource : obj -&gt; obj" Usage="frameworkContentElement.TryFindResource resourceKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceKey" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="resourceKey"><span data-ttu-id="a2648-746">要查找的资源的键标识符。</span><span class="sxs-lookup"><span data-stu-id="a2648-746">Key identifier of the resource to be found.</span></span></param>
        <summary><span data-ttu-id="a2648-747">搜索具有指定键的资源，如果找到，则返回该资源。</span><span class="sxs-lookup"><span data-stu-id="a2648-747">Searches for a resource with the specified key, and returns that resource if found.</span></span></summary>
        <returns><span data-ttu-id="a2648-748">找到的资源。</span><span class="sxs-lookup"><span data-stu-id="a2648-748">The found resource.</span></span> <span data-ttu-id="a2648-749">如果找不到资源，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-749">If no resource was found, <see langword="null" /> is returned.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-750">如果在调用元素上找不到该资源，则使用逻辑树搜索父树，其方式与在运行时该键请求动态资源引用时搜索树的方式相同。</span><span class="sxs-lookup"><span data-stu-id="a2648-750">If the resource is not found on the calling element, the parent tree is searched using the logical tree, in the same way that the tree would be searched if a dynamic resource reference were requested by key at run-time.</span></span>  
  
 <span data-ttu-id="a2648-751">通常，您会立即将返回值强制转换为您尝试通过返回的资源值设置的属性的类型。</span><span class="sxs-lookup"><span data-stu-id="a2648-751">Typically you would immediately cast the return value to the type of the property that you were attempting to set with the returned resource value.</span></span>  
  
 <span data-ttu-id="a2648-752"><xref:System.Windows.FrameworkContentElement.FindResource%2A>方法具有类似的行为，只不过它会在找不到具有所提供键的资源时引发异常。</span><span class="sxs-lookup"><span data-stu-id="a2648-752">The <xref:System.Windows.FrameworkContentElement.FindResource%2A> method has similar behavior, except that it will throw an exception in the case of not finding a resource with the provided key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="a2648-753">下面的示例查找标记中定义的资源，并将其应用到元素的特定属性，以响应路由事件。</span><span class="sxs-lookup"><span data-stu-id="a2648-753">The following example finds a resource as defined in markup and applies it to a certain property of an element in response to a routed event.</span></span>  
  
 [!code-csharp[ContentElementsSmorgasbord#TryFindResource](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentElementsSmorgasbord/CSharp/page1.xaml.cs#tryfindresource)]
 [!code-vb[ContentElementsSmorgasbord#TryFindResource](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentElementsSmorgasbord/visualbasic/page1.xaml.vb#tryfindresource)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkContentElement.FindResource(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Unloaded">
      <MemberSignature Language="C#" Value="public event System.Windows.RoutedEventHandler Unloaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.RoutedEventHandler Unloaded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.FrameworkContentElement.Unloaded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unloaded As RoutedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::RoutedEventHandler ^ Unloaded;" />
      <MemberSignature Language="F#" Value="member this.Unloaded : System.Windows.RoutedEventHandler " Usage="member this.Unloaded : System.Windows.RoutedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-754">当从已加载元素的元素树中移除元素时发生。</span><span class="sxs-lookup"><span data-stu-id="a2648-754">Occurs when the element is removed from an element tree of loaded elements.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-755">直接路由事件不遵循路由，它们只能在引发它们的同一元素内进行处理。</span><span class="sxs-lookup"><span data-stu-id="a2648-755">Direct routed events do not follow a route, they are only handled within the same element on which they are raised.</span></span> <span data-ttu-id="a2648-756">直接路由事件支持其他路由事件行为：它们支持可访问的处理程序集合，并且可用作 <xref:System.Windows.EventTrigger> 样式中的。</span><span class="sxs-lookup"><span data-stu-id="a2648-756">Direct routed events do support other routed event behavior: they support an accessible handlers collection, and can be used as an <xref:System.Windows.EventTrigger> in a style.</span></span>  
  
<a name="routedEventInfo_Unloaded"></a>   
## <a name="routed-event-information"></a><span data-ttu-id="a2648-757">路由事件信息</span><span class="sxs-lookup"><span data-stu-id="a2648-757">Routed Event Information</span></span>  
  
|||  
|-|-|  
|<span data-ttu-id="a2648-758">标识符字段</span><span class="sxs-lookup"><span data-stu-id="a2648-758">Identifier field</span></span>|<xref:System.Windows.FrameworkContentElement.UnloadedEvent>|  
|<span data-ttu-id="a2648-759">路由策略</span><span class="sxs-lookup"><span data-stu-id="a2648-759">Routing strategy</span></span>|<span data-ttu-id="a2648-760">直接</span><span class="sxs-lookup"><span data-stu-id="a2648-760">Direct</span></span>|  
|<span data-ttu-id="a2648-761">委托</span><span class="sxs-lookup"><span data-stu-id="a2648-761">Delegate</span></span>|<xref:System.Windows.RoutedEventHandler>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnloadedEvent">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.RoutedEvent UnloadedEvent;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.RoutedEvent UnloadedEvent" />
      <MemberSignature Language="DocId" Value="F:System.Windows.FrameworkContentElement.UnloadedEvent" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly UnloadedEvent As RoutedEvent " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::RoutedEvent ^ UnloadedEvent;" />
      <MemberSignature Language="F#" Value=" staticval mutable UnloadedEvent : System.Windows.RoutedEvent" Usage="System.Windows.FrameworkContentElement.UnloadedEvent" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.RoutedEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="a2648-762">标识 <see cref="E:System.Windows.FrameworkContentElement.Unloaded" /> [路由事件概述](/dotnet/framework/wpf/advanced/routed-events-overview)。</span><span class="sxs-lookup"><span data-stu-id="a2648-762">Identifies the <see cref="E:System.Windows.FrameworkContentElement.Unloaded" /> [Routed Events Overview](/dotnet/framework/wpf/advanced/routed-events-overview).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-763">事件标识符对象是在注册路由事件时创建的 (请参阅 <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) ，然后可用于添加类处理程序 (参阅 <xref:System.Windows.EventManager.RegisterClassHandler%2A>) 。</span><span class="sxs-lookup"><span data-stu-id="a2648-763">Event identifier objects are created when routed events are registered (see <xref:System.Windows.EventManager.RegisterRoutedEvent%2A>) and can then be used to add class handlers (see <xref:System.Windows.EventManager.RegisterClassHandler%2A>).</span></span> <span data-ttu-id="a2648-764">标识符对象包含标识名称、所有者类型、处理程序类型、路由策略和用于为事件添加所有者的实用工具方法。</span><span class="sxs-lookup"><span data-stu-id="a2648-764">Identifier objects contain an identifying name, owner type, handler type, routing strategy, and a utility method for adding owners for the event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterName">
      <MemberSignature Language="C#" Value="public void UnregisterName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnregisterName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.UnregisterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub UnregisterName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UnregisterName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.UnregisterName : string -&gt; unit" Usage="frameworkContentElement.UnregisterName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="a2648-765">要从当前范围中移除的名称-对象对的名称。</span><span class="sxs-lookup"><span data-stu-id="a2648-765">Name of the name-object pair to remove from the current scope.</span></span></param>
        <summary><span data-ttu-id="a2648-766">简化对 <see cref="T:System.Windows.NameScope" /> 注销方法的访问。</span><span class="sxs-lookup"><span data-stu-id="a2648-766">Simplifies access to the <see cref="T:System.Windows.NameScope" /> de-registration method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="a2648-767">如果打算用同一名称重新注册另一个元素，则只需取消注册名称。</span><span class="sxs-lookup"><span data-stu-id="a2648-767">You only need to un-register names if you intend to re-register another element with that same name.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.FrameworkContentElement.RegisterName(System.String,System.Object)" />
        <altmember cref="T:System.Windows.NameScope" />
      </Docs>
    </Member>
    <Member MemberName="UpdateDefaultStyle">
      <MemberSignature Language="C#" Value="public void UpdateDefaultStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateDefaultStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.FrameworkContentElement.UpdateDefaultStyle" />
      <MemberSignature Language="VB.NET" Value="Public Sub UpdateDefaultStyle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void UpdateDefaultStyle();" />
      <MemberSignature Language="F#" Value="member this.UpdateDefaultStyle : unit -&gt; unit" Usage="frameworkContentElement.UpdateDefaultStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="a2648-768">将默认样式重新应用至当前 <see cref="T:System.Windows.FrameworkContentElement" />。</span><span class="sxs-lookup"><span data-stu-id="a2648-768">Reapplies the default style to the current <see cref="T:System.Windows.FrameworkContentElement" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
