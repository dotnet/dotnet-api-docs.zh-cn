<Type Name="VisualStateGroup" FullName="System.Windows.VisualStateGroup">
  <Metadata><Meta Name="ms.openlocfilehash" Value="29c1884696f6608d91637ff5e354a7552901d505" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89829924" /></Metadata><TypeSignature Language="C#" Value="public class VisualStateGroup : System.Windows.DependencyObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit VisualStateGroup extends System.Windows.DependencyObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.VisualStateGroup" />
  <TypeSignature Language="VB.NET" Value="Public Class VisualStateGroup&#xA;Inherits DependencyObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class VisualStateGroup : System::Windows::DependencyObject" />
  <TypeSignature Language="F#" Value="type VisualStateGroup = class&#xA;    inherit DependencyObject" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Windows.Markup.ContentProperty("States")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.ContentProperty("States")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Windows.Markup.RuntimeNameProperty("Name")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Markup.RuntimeNameProperty("Name")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>包含互斥的 <see cref="T:System.Windows.VisualState" /> 对象和用于从一种状态转移到另一种状态的 <see cref="T:System.Windows.VisualTransition" /> 对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个都 <xref:System.Windows.VisualStateGroup> 包含一个 <xref:System.Windows.VisualState> 对象的集合。 <xref:System.Windows.VisualState>包含 <xref:System.Windows.Media.Animation.Storyboard> 对象的集合，这些对象指定控件在处于某种状态时控件的外观如何变化。 例如， <xref:System.Windows.Controls.Button> 当按下时，外观可能略有不同于未按下状态。 定义的两个状态 <xref:System.Windows.Controls.Button> 在按下时对应于 (`"Pressed"`) ，而不 (`"Normal"`) 。  
  
 您可以 <xref:System.Windows.VisualState> 通过设置控件的附加属性来添加到控件 `VisualStateManager.VisualStateGroups` 。 您将在同一中放置彼此互斥的状态 <xref:System.Windows.VisualStateGroup> 。 例如， <xref:System.Windows.Controls.CheckBox> 有两个 <xref:System.Windows.VisualStateGroup> 对象。 其中一个包含状态、、、 `Normal` `MouseOver` `Pressed` 和 `Disabled` 。 另一个包含状态、、 `Checked` `UnChecked` 和 `Indeterminate` 。 <xref:System.Windows.Controls.CheckBox>可以同时处于状态 `MouseOver` `UnChecked` ，但它不能 `MouseOver` 同时处于和状态中 `Pressed` 。  
  
 虽然您可以将 <xref:System.Windows.VisualState> 对象添加到任何元素，但它们是使其他人可以重新定义的视觉行为的有用方法 <xref:System.Windows.Controls.Control> 。 如果创建使用的自定义控件 <xref:System.Windows.Controls.ControlTemplate> ，则可以通过 <xref:System.Windows.TemplateVisualStateAttribute> 在其类定义上添加来指定控件可以处于的状态。 然后，为控件创建新的任何人都 <xref:System.Windows.Controls.ControlTemplate> 可以将 <xref:System.Windows.VisualState> 对象添加到模板中。 <xref:System.Windows.TemplateVisualStateAttribute>启用设计器工具（如 Visual Studio 和 Blend for Visual Studio）来公开控件的状态。 同一中具有相同的状态 <xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=nameWithType> <xref:System.Windows.VisualStateGroup> 。  
  
 有关如何在中使用对象的详细信息 <xref:System.Windows.VisualStateGroup> <xref:System.Windows.Controls.ControlTemplate> ，请参阅 [通过创建 System.windows.controls.controltemplate> 自定义现有控件的外观](/dotnet/framework/wpf/controls/customizing-the-appearance-of-an-existing-control)。 有关如何创建使用的控件的详细信息 <xref:System.Windows.VisualStateManager> ，请参阅 [创建具有可自定义外观的控件](/dotnet/framework/wpf/controls/creating-a-control-that-has-a-customizable-appearance)。  
  
 <xref:System.Windows.VisualStateGroup.Transitions%2A>属性包含 <xref:System.Windows.VisualTransition> 对象，这些对象在控件在中定义的状态之间过渡时应用 <xref:System.Windows.VisualStateGroup> 。  
  
   
  
## Examples  
 下面的示例为包含一个的创建了一个简单 <xref:System.Windows.Controls.ControlTemplate> 的 <xref:System.Windows.Controls.Button> <xref:System.Windows.Controls.Grid> 。 它还包含一个 <xref:System.Windows.VisualStateGroup> 名为的 `CommonStates` ，用于定义 `MouseOver` 和 `Normal` 状态。 <xref:System.Windows.VisualStateGroup>还具有一个 <xref:System.Windows.VisualTransition> ，它指定在 <xref:System.Windows.Controls.Grid> 用户将鼠标指针移到上时，将从绿色更改为红色 <xref:System.Windows.Controls.Button> 。  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VisualStateGroup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.VisualStateGroup.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VisualStateGroup();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.VisualStateGroup" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentState">
      <MemberSignature Language="C#" Value="public System.Windows.VisualState CurrentState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.VisualState CurrentState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.CurrentState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentState As VisualState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::VisualState ^ CurrentState { System::Windows::VisualState ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentState : System.Windows.VisualState" Usage="System.Windows.VisualStateGroup.CurrentState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.VisualState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前应用到该控件的 <see cref="T:System.Windows.VisualState" />。</summary>
        <value>当前应用到该控件的 <see cref="T:System.Windows.VisualState" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.VisualStateGroup.CurrentStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CurrentStateChanged As EventHandler(Of VisualStateChangedEventArgs) " FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::VisualStateChangedEventArgs ^&gt; ^ CurrentStateChanged;" />
      <MemberSignature Language="F#" Value="member this.CurrentStateChanged : EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; " Usage="member this.CurrentStateChanged : System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event CurrentStateChanged As EventHandler(Of VisualStateChangedEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在控件转换为其他状态后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件在控件转换为新状态并发生事件后发生 <xref:System.Windows.VisualStateGroup.CurrentStateChanging> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentStateChanging">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.VisualStateChangedEventArgs&gt; CurrentStateChanging" />
      <MemberSignature Language="DocId" Value="E:System.Windows.VisualStateGroup.CurrentStateChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CurrentStateChanging As EventHandler(Of VisualStateChangedEventArgs) " FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::VisualStateChangedEventArgs ^&gt; ^ CurrentStateChanging;" />
      <MemberSignature Language="F#" Value="member this.CurrentStateChanging : EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; " Usage="member this.CurrentStateChanging : System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event CurrentStateChanging As EventHandler(Of VisualStateChangedEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.VisualStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在控件开始向其他状态转换时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 控件开始转换状态时发生此事件。 如果 <xref:System.Windows.VisualTransition> 应用于状态更改，则在转换开始时发生此事件。 如果 <xref:System.Windows.VisualTransition> 未应用，则此事件在控件转换为新状态之后但在事件之前发生 <xref:System.Windows.VisualStateGroup.CurrentStateChanged> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.VisualStateGroup.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Windows.VisualStateGroup" /> 的名称。</summary>
        <value><see cref="T:System.Windows.VisualStateGroup" /> 的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 控件作者通过 <xref:System.Windows.TemplateVisualStateAttribute> 在其类定义上添加来指定控件可以处于的状态。 同一中具有相同的状态 <xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=nameWithType> <xref:System.Windows.VisualStateGroup> 。 将的设置 <xref:System.Windows.VisualStateGroup.Name%2A> <xref:System.Windows.VisualStateGroup> 为属性的值 <xref:System.Windows.TemplateVisualStateAttribute.GroupName%2A?displayProperty=nameWithType> 。  
  
   
  
## Examples  
 下面的示例创建两个 <xref:System.Windows.VisualStateGroup> 名为和的对象 `CommonStates` `FocusStates` 。 控件将始终处于每个中的一种状态 <xref:System.Windows.VisualStateGroup> 。 有关完整示例，请参阅 [通过创建 System.windows.controls.controltemplate> 自定义现有控件的外观](/dotnet/framework/wpf/controls/customizing-the-appearance-of-an-existing-control)。  
  
 [!code-xaml[VSMButtonTemplate#5](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/skinnedbutton.xaml#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="States">
      <MemberSignature Language="C#" Value="public System.Collections.IList States { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList States" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.States" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property States As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ States { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.States : System.Collections.IList" Usage="System.Windows.VisualStateGroup.States" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取互斥 <see cref="T:System.Windows.VisualState" /> 对象的集合。</summary>
        <value>互斥 <see cref="T:System.Windows.VisualState" /> 对象的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例为包含一个的创建了一个简单 <xref:System.Windows.Controls.ControlTemplate> 的 <xref:System.Windows.Controls.Button> <xref:System.Windows.Controls.Grid> 。 它还包含一个 <xref:System.Windows.VisualStateGroup> 名为的 `CommonStates` ，用于定义 `MouseOver` 和 `Normal` 状态。 <xref:System.Windows.VisualStateGroup>还具有一个 <xref:System.Windows.VisualTransition> ，它指定在 <xref:System.Windows.Controls.Grid> 用户将鼠标指针移到上时，将从绿色更改为红色 <xref:System.Windows.Controls.Button> 。  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transitions">
      <MemberSignature Language="C#" Value="public System.Collections.IList Transitions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList Transitions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.VisualStateGroup.Transitions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Transitions As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ Transitions { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Transitions : System.Collections.IList" Usage="System.Windows.VisualStateGroup.Transitions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Windows.VisualTransition" /> 对象的集合。</summary>
        <value><see cref="T:System.Windows.VisualTransition" /> 对象的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.VisualTransition> <xref:System.Windows.VisualStateGroup.Transitions%2A> 当控件在中定义的状态之间过渡时，将应用中的对象 <xref:System.Windows.VisualStateGroup> 。  
  
   
  
## Examples  
 下面的示例为包含一个的创建了一个简单 <xref:System.Windows.Controls.ControlTemplate> 的 <xref:System.Windows.Controls.Button> <xref:System.Windows.Controls.Grid> 。 它还包含一个 <xref:System.Windows.VisualStateGroup> 名为的 `CommonStates` ，用于定义 `MouseOver` 和 `Normal` 状态。 <xref:System.Windows.VisualStateGroup>还具有一个 <xref:System.Windows.VisualTransition> ，它指定在 <xref:System.Windows.Controls.Grid> 用户将鼠标指针移到上时，将从绿色更改为红色 <xref:System.Windows.Controls.Button> 。  
  
 [!code-xaml[VSMButtonTemplate#11](~/samples/snippets/csharp/VS_Snippets_Wpf/vsmbuttontemplate/csharp/window1.xaml#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
