<Type Name="ClaimsAuthenticationManager" FullName="System.Security.Claims.ClaimsAuthenticationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="27c8eff9480ebd78c8c71a7eb2fffa5c849843fe" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83953263" /></Metadata><TypeSignature Language="C#" Value="public class ClaimsAuthenticationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthenticationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthenticationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthenticationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthenticationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthenticationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="86b56-101">定义身份验证管理器的基本实现。</span><span class="sxs-lookup"><span data-stu-id="86b56-101">Defines the base implementation for a claims authentication manager.</span></span> <span data-ttu-id="86b56-102">声明验证管理器在声明处理管道中提供某一位置以便将处理逻辑（筛选、验证、扩展）在执行到达您的应用程序代码之前应用于传入主体的声明集合。</span><span class="sxs-lookup"><span data-stu-id="86b56-102">The claims authentication manager provides a place in the claims processing pipeline for applying processing logic (filtering, validation, extension) to the claims collection in the incoming principal before execution reaches your application code.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b56-103">声明身份验证管理器提供应用程序声明处理管道中的一个扩展点，您可以使用该扩展点来验证、筛选、修改、传入声明，或在执行 RP 应用程序代码之前将新声明插入 <xref:System.Security.Claims.ClaimsPrincipal> 提供的声明集中。</span><span class="sxs-lookup"><span data-stu-id="86b56-103">The claims authentication manager provides an extensibility point in the application's claims processing pipeline that you can use to validate, filter, modify, incoming claims or inject new claims into the set of claims presented by a <xref:System.Security.Claims.ClaimsPrincipal> before the RP application code is executed.</span></span> <span data-ttu-id="86b56-104">如果 RP 应用程序需要，甚至可以返回 <xref:System.Security.Claims.ClaimsPrincipal> 的自定义实现。</span><span class="sxs-lookup"><span data-stu-id="86b56-104">You can even return a custom implementation of <xref:System.Security.Claims.ClaimsPrincipal> if your RP application requires it.</span></span> <span data-ttu-id="86b56-105"><xref:System.Security.Claims.ClaimsAuthenticationManager> 类提供的默认实现返回未修改的 <xref:System.Security.Claims.ClaimsPrincipal> 中的声明;但是，可以从此类派生并重写 <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> 方法，以修改 <xref:System.Security.Claims.ClaimsPrincipal> 中的声明（或返回自定义 <xref:System.Security.Claims.ClaimsPrincipal>）。</span><span class="sxs-lookup"><span data-stu-id="86b56-105">The default implementation provided by the <xref:System.Security.Claims.ClaimsAuthenticationManager> class returns the claims in the <xref:System.Security.Claims.ClaimsPrincipal> unmodified; however, you can derive from this class and override the <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> method to modify the claims in the <xref:System.Security.Claims.ClaimsPrincipal> (or to return a custom <xref:System.Security.Claims.ClaimsPrincipal>).</span></span>  
  
 <span data-ttu-id="86b56-106">创建自定义声明身份验证管理器的一个典型原因是，根据或不知道的信息添加、删除或转换声明，这可能会更好地由 RP 应用程序维护。</span><span class="sxs-lookup"><span data-stu-id="86b56-106">A typical reason for creating a custom claims authentication manager is to add, remove, or transform claims based on information that is only known by or is, perhaps, better maintained by the RP application.</span></span> <span data-ttu-id="86b56-107">例如，在购物车应用程序中购买客户的历史记录可能保存在由 RP 应用程序维护的数据基础中，然后根据传入主体中找到的名称声明的值将其添加到声明身份验证管理器返回的声明主体。</span><span class="sxs-lookup"><span data-stu-id="86b56-107">For example, a history of customer purchases in a shopping cart application might be kept in a data base maintained by the RP application and then added to the claims principal returned by the claims authentication manager based on the value of a name claim found in the incoming principal.</span></span>  
  
 <span data-ttu-id="86b56-108">你可以将应用程序配置为通过使用 <xref:System.IdentityModel.Configuration.IdentityConfiguration> 类或在配置中通过[&lt;claimsAuthenticationManager&gt;](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager)元素（该元素是[&lt;identityConfiguration&gt;](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration)元素的子元素）以编程方式使用 `ClaimsAuthenticationManager`。</span><span class="sxs-lookup"><span data-stu-id="86b56-108">You can configure your application to use a `ClaimsAuthenticationManager` either programmatically by using the <xref:System.IdentityModel.Configuration.IdentityConfiguration> class or in configuration through the [&lt;claimsAuthenticationManager&gt;](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager) element (which is a child element of the [&lt;identityConfiguration&gt;](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration) element).</span></span> <span data-ttu-id="86b56-109">您可以重写 <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> 方法，以便为自定义管理器可以配置的 `<claimsAuthenticationManager>` 元素的自定义子元素提供处理。</span><span class="sxs-lookup"><span data-stu-id="86b56-109">You can override the <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> method to provide processing for custom child elements of the `<claimsAuthenticationManager>` element through which your custom manager can be configured.</span></span> <span data-ttu-id="86b56-110"><xref:System.Security.Claims.ClaimsAuthenticationManager> 的基实现不处理任何子元素。</span><span class="sxs-lookup"><span data-stu-id="86b56-110">The base implementation of <xref:System.Security.Claims.ClaimsAuthenticationManager> does not handle any child elements.</span></span>  
  
 <span data-ttu-id="86b56-111">将应用程序配置为使用声明身份验证管理器可确保它将由 Windows Identity Foundation （WIF）从请求管道调用。</span><span class="sxs-lookup"><span data-stu-id="86b56-111">Configuring your application to use a claims authentication manager ensures that it will be invoked by Windows Identity Foundation (WIF) from the request pipeline.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="86b56-112">下面的代码演示了一个简单的声明身份验证管理器，它将角色声明添加到传入主体，而无需对传入声明执行任何检查。</span><span class="sxs-lookup"><span data-stu-id="86b56-112">The following code shows a simple claims authentication manager that adds a role claim to the incoming principal without performing any check on the incoming claims.</span></span> 
  
 [!code-csharp[WifWebApplication1#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifwebapplication1/cs/myclaimsauthenticationmanager/simpleclaimsauthenticatonmanager.cs#1)]  
  
 <span data-ttu-id="86b56-113">下面的 XML 演示 `<claimsAuthenticationManager>` 元素。</span><span class="sxs-lookup"><span data-stu-id="86b56-113">The following XML shows the `<claimsAuthenticationManager>` element.</span></span>  
  
```xml  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthenticationManager type="MyClaimsAuthenticationManager.SimpleClaimsAuthenticatonManager, MyClaimsAuthenticationManager" />  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthenticationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthenticationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="86b56-114">初始化 <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="86b56-114">Initializes a new instance of the <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public virtual System.Security.Claims.ClaimsPrincipal Authenticate (string resourceName, System.Security.Claims.ClaimsPrincipal incomingPrincipal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Claims.ClaimsPrincipal Authenticate(string resourceName, class System.Security.Claims.ClaimsPrincipal incomingPrincipal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Authenticate (resourceName As String, incomingPrincipal As ClaimsPrincipal) As ClaimsPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Claims::ClaimsPrincipal ^ Authenticate(System::String ^ resourceName, System::Security::Claims::ClaimsPrincipal ^ incomingPrincipal);" />
      <MemberSignature Language="F#" Value="abstract member Authenticate : string * System.Security.Claims.ClaimsPrincipal -&gt; System.Security.Claims.ClaimsPrincipal&#xA;override this.Authenticate : string * System.Security.Claims.ClaimsPrincipal -&gt; System.Security.Claims.ClaimsPrincipal" Usage="claimsAuthenticationManager.Authenticate (resourceName, incomingPrincipal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsPrincipal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="incomingPrincipal" Type="System.Security.Claims.ClaimsPrincipal" />
      </Parameters>
      <Docs>
        <param name="resourceName"><span data-ttu-id="86b56-115">请求的资源的地址。</span><span class="sxs-lookup"><span data-stu-id="86b56-115">The address of the resource that is being requested.</span></span></param>
        <param name="incomingPrincipal"><span data-ttu-id="86b56-116">表示正在尝试访问资源的经过身份验证的用户的声明主体。</span><span class="sxs-lookup"><span data-stu-id="86b56-116">The claims principal that represents the authenticated user that is attempting to access the resource.</span></span></param>
        <summary><span data-ttu-id="86b56-117">在派生中重写时，将返回与 RP 应用程序的要求一致的 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="86b56-117">When overridden in a derived class, returns a <see cref="T:System.Security.Claims.ClaimsPrincipal" /> object consistent with the requirements of the RP application.</span></span> <span data-ttu-id="86b56-118">默认实现未修改传入的 <see cref="T:System.Security.Claims.ClaimsPrincipal" />。</span><span class="sxs-lookup"><span data-stu-id="86b56-118">The default implementation does not modify the incoming <see cref="T:System.Security.Claims.ClaimsPrincipal" />.</span></span></summary>
        <returns><span data-ttu-id="86b56-119">包含 RP 应用程序所需任何修改的声明主体。</span><span class="sxs-lookup"><span data-stu-id="86b56-119">A claims principal that contains any modifications necessary for the RP application.</span></span> <span data-ttu-id="86b56-120">默认实现返回未被修改的传入声明主体。</span><span class="sxs-lookup"><span data-stu-id="86b56-120">The default implementation returns the incoming claims principal unmodified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b56-121">从请求处理管道调用 <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> 方法，你可以在派生类中重写此方法，以便根据 RP 应用程序的策略，筛选、修改或将声明注入声明主体。</span><span class="sxs-lookup"><span data-stu-id="86b56-121">The <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> method is called from the request processing pipeline You can override this method in a derived class to filter, modify, or inject claims into the claims principal according to the policy of your RP application.</span></span> <span data-ttu-id="86b56-122">你甚至可以返回 <xref:System.Security.Claims.ClaimsPrincipal>的自定义实现，具体取决于 RP 应用程序的要求。</span><span class="sxs-lookup"><span data-stu-id="86b56-122">Depending on the requirements of the RP application, you can even return a custom implementation of <xref:System.Security.Claims.ClaimsPrincipal>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthenticationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist"><span data-ttu-id="86b56-123">自定义配置元素。</span><span class="sxs-lookup"><span data-stu-id="86b56-123">The custom configuration elements.</span></span> <span data-ttu-id="86b56-124">列表中的每个节点都属于 <see cref="T:System.Xml.XmlElement" /> 类型。</span><span class="sxs-lookup"><span data-stu-id="86b56-124">Each node in the list is of type <see cref="T:System.Xml.XmlElement" />.</span></span></param>
        <summary><span data-ttu-id="86b56-125">在派生类中重写时，将从 XML 中加载自定义配置。</span><span class="sxs-lookup"><span data-stu-id="86b56-125">When overridden in a derived class, loads custom configuration from XML.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="86b56-126"><xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> 方法由配置基础结构调用。</span><span class="sxs-lookup"><span data-stu-id="86b56-126">The <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> method is called by the configuration infrastructure.</span></span> <span data-ttu-id="86b56-127">调用此方法时，`nodelist` 将包含配置文件中[&lt;claimsAuthenticationManager&gt;](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager)元素的顶级子元素。</span><span class="sxs-lookup"><span data-stu-id="86b56-127">When this method is called, the `nodelist` will contain the top-level child elements of the [&lt;claimsAuthenticationManager&gt;](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager) element from the configuration file.</span></span> <span data-ttu-id="86b56-128">其中每个元素反过来都包含特性或子元素，具体取决于为派生类定义的配置架构。</span><span class="sxs-lookup"><span data-stu-id="86b56-128">Each of these elements may, in turn, contain attributes or child elements depending on the configuration schema you define for your derived class.</span></span> <span data-ttu-id="86b56-129">如果未在配置文件中的 `<claimsAuthenticationManager>` 元素下显示任何子元素，则不会调用此方法。</span><span class="sxs-lookup"><span data-stu-id="86b56-129">If no child elements appear under the `<claimsAuthenticationManager>` element in the configuration file, this method is not called.</span></span>  
  
 <span data-ttu-id="86b56-130">默认实现引发 <xref:System.NotImplementedException>。</span><span class="sxs-lookup"><span data-stu-id="86b56-130">The default implementation throws a <xref:System.NotImplementedException>.</span></span> <span data-ttu-id="86b56-131">在派生类中重写此方法可以从配置文件中启用声明身份验证管理器的初始化。</span><span class="sxs-lookup"><span data-stu-id="86b56-131">Override this method in your derived class to enable initialization of your claims authentication manager from a configuration file.</span></span> <span data-ttu-id="86b56-132">例如，配置元素可以描述在对声明主体进行身份验证时要遵循的策略;还可以使用它们指向要将其他声明添加到主体中的属性存储。</span><span class="sxs-lookup"><span data-stu-id="86b56-132">For example, the configuration elements might describe a policy to be followed when authenticating a claims principal; or they might be used to point to an attribute store from which additional claims are to be added to the principal.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
