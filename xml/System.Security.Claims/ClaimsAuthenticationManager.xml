<Type Name="ClaimsAuthenticationManager" FullName="System.Security.Claims.ClaimsAuthenticationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="27c8eff9480ebd78c8c71a7eb2fffa5c849843fe" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83953263" /></Metadata><TypeSignature Language="C#" Value="public class ClaimsAuthenticationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthenticationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthenticationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthenticationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthenticationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthenticationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>定义身份验证管理器的基本实现。 声明验证管理器在声明处理管道中提供某一位置以便将处理逻辑（筛选、验证、扩展）在执行到达您的应用程序代码之前应用于传入主体的声明集合。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 声明身份验证管理器提供应用程序声明处理管道中的一个扩展点，您可以使用该扩展点来验证、筛选、修改传入声明，或将新的声明注入到 <xref:System.Security.Claims.ClaimsPrincipal> 执行 RP 应用程序代码之前由提供的声明集中。 如果 RP 应用程序需要，甚至可以返回的自定义实现 <xref:System.Security.Claims.ClaimsPrincipal> 。 类提供的默认实现 <xref:System.Security.Claims.ClaimsAuthenticationManager> 返回未修改的中的声明 <xref:System.Security.Claims.ClaimsPrincipal> ; 但是，您可以从此类派生并重写 <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A> 方法，以修改 <xref:System.Security.Claims.ClaimsPrincipal> （或返回自定义）中的声明 <xref:System.Security.Claims.ClaimsPrincipal> 。  
  
 创建自定义声明身份验证管理器的一个典型原因是，根据或不知道的信息添加、删除或转换声明，这可能会更好地由 RP 应用程序维护。 例如，在购物车应用程序中购买客户的历史记录可能保存在由 RP 应用程序维护的数据基础中，然后根据传入主体中找到的名称声明的值将其添加到声明身份验证管理器返回的声明主体。  
  
 可以通过 `ClaimsAuthenticationManager` <xref:System.IdentityModel.Configuration.IdentityConfiguration> [ &lt; claimsAuthenticationManager &gt; ](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager)元素（ [ &lt; identityConfiguration &gt; ](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration)元素的子元素）使用类或配置，将应用程序配置为以编程方式使用。 您可以重写 <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> 方法，以便为 `<claimsAuthenticationManager>` 可通过其配置自定义管理器的元素的自定义子元素提供处理。 的基实现 <xref:System.Security.Claims.ClaimsAuthenticationManager> 不处理任何子元素。  
  
 将应用程序配置为使用声明身份验证管理器可确保它将由 Windows Identity Foundation （WIF）从请求管道调用。  
  
   
  
## Examples  
 下面的代码演示了一个简单的声明身份验证管理器，它将角色声明添加到传入主体，而无需对传入声明执行任何检查。 
  
 [!code-csharp[WifWebApplication1#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifwebapplication1/cs/myclaimsauthenticationmanager/simpleclaimsauthenticatonmanager.cs#1)]  
  
 下面的 XML 显示 `<claimsAuthenticationManager>` 元素。  
  
```xml  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthenticationManager type="MyClaimsAuthenticationManager.SimpleClaimsAuthenticatonManager, MyClaimsAuthenticationManager" />  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthenticationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthenticationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Security.Claims.ClaimsAuthenticationManager" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public virtual System.Security.Claims.ClaimsPrincipal Authenticate (string resourceName, System.Security.Claims.ClaimsPrincipal incomingPrincipal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.Claims.ClaimsPrincipal Authenticate(string resourceName, class System.Security.Claims.ClaimsPrincipal incomingPrincipal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.Authenticate(System.String,System.Security.Claims.ClaimsPrincipal)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Authenticate (resourceName As String, incomingPrincipal As ClaimsPrincipal) As ClaimsPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::Claims::ClaimsPrincipal ^ Authenticate(System::String ^ resourceName, System::Security::Claims::ClaimsPrincipal ^ incomingPrincipal);" />
      <MemberSignature Language="F#" Value="abstract member Authenticate : string * System.Security.Claims.ClaimsPrincipal -&gt; System.Security.Claims.ClaimsPrincipal&#xA;override this.Authenticate : string * System.Security.Claims.ClaimsPrincipal -&gt; System.Security.Claims.ClaimsPrincipal" Usage="claimsAuthenticationManager.Authenticate (resourceName, incomingPrincipal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsPrincipal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="incomingPrincipal" Type="System.Security.Claims.ClaimsPrincipal" />
      </Parameters>
      <Docs>
        <param name="resourceName">请求的资源的地址。</param>
        <param name="incomingPrincipal">表示正在尝试访问资源的经过身份验证的用户的声明主体。</param>
        <summary>在派生中重写时，将返回与 RP 应用程序的要求一致的 <see cref="T:System.Security.Claims.ClaimsPrincipal" /> 对象。 默认实现未修改传入的 <see cref="T:System.Security.Claims.ClaimsPrincipal" />。</summary>
        <returns>包含 RP 应用程序所需任何修改的声明主体。 默认实现返回未被修改的传入声明主体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthenticationManager.Authenticate%2A>从请求处理管道调用方法，您可以在派生类中重写此方法，以便根据 RP 应用程序的策略筛选、修改或将声明注入声明主体。 你甚至可以返回的自定义实现，具体取决于 RP 应用程序的要求 <xref:System.Security.Claims.ClaimsPrincipal> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthenticationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">自定义配置元素。 列表中的每个节点都属于 <see cref="T:System.Xml.XmlElement" /> 类型。</param>
        <summary>在派生类中重写时，将从 XML 中加载自定义配置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此 <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> 方法由配置基础结构调用。 调用此方法时， `nodelist` 将包含配置文件中的[ &lt; claimsAuthenticationManager &gt; ](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthenticationmanager)元素的顶级子元素。 其中每个元素反过来都包含特性或子元素，具体取决于为派生类定义的配置架构。 如果在配置文件中的元素下未显示任何子元素 `<claimsAuthenticationManager>` ，则不会调用此方法。  
  
 默认实现引发 <xref:System.NotImplementedException> 。 在派生类中重写此方法可以从配置文件中启用声明身份验证管理器的初始化。 例如，配置元素可以描述在对声明主体进行身份验证时要遵循的策略;还可以使用它们指向要将其他声明添加到主体中的属性存储。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
