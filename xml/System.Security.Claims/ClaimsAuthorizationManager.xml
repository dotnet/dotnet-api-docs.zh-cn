<Type Name="ClaimsAuthorizationManager" FullName="System.Security.Claims.ClaimsAuthorizationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2502b02e9ef213860055f7bdb25c89cdb9f0b210" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89933499" /></Metadata><TypeSignature Language="C#" Value="public class ClaimsAuthorizationManager : System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ClaimsAuthorizationManager extends System.Object implements class System.IdentityModel.Configuration.ICustomIdentityConfiguration" />
  <TypeSignature Language="DocId" Value="T:System.Security.Claims.ClaimsAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ClaimsAuthorizationManager&#xA;Implements ICustomIdentityConfiguration" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClaimsAuthorizationManager : System::IdentityModel::Configuration::ICustomIdentityConfiguration" />
  <TypeSignature Language="F#" Value="type ClaimsAuthorizationManager = class&#xA;    interface ICustomIdentityConfiguration" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IdentityModel.Configuration.ICustomIdentityConfiguration</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>定义身份验证管理器的基本实现。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.Claims.ClaimsAuthorizationManager>类提供声明授权管理器的基实现。 声明授权管理器可用于以下两种方案：  
  
-   在基于 web 的应用程序和服务中，可以将声明授权管理器添加到处理管道，以提供一个扩展点，你可以在该扩展点中根据传入声明的值授权访问资源，然后才会调用实际实现请求资源的应用程序代码。  
  
-   当你 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> 在代码中使用类或类执行命令式或声明性的、基于声明的访问检查时，系统将调用为你的应用程序配置的声明授权管理器来执行检查。 可以在基于 web 的应用程序和桌面应用程序中执行基于声明的访问检查。  
  
 类提供的默认实现 <xref:System.Security.Claims.ClaimsAuthorizationManager> 会为提供的每个声明授予访问权限; 但是，您可以从此类派生并重写 <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> 方法以提供您自己的授权逻辑。  
  
 声明授权管理器的使用是可选的。 可以通过以下方式将应用程序配置为使用声明授权管理器：以编程方式使用 <xref:System.IdentityModel.Configuration.IdentityConfiguration> 类或声明方式使用： [ &lt; claimsAuthorizationManager &gt; ](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager)元素，该元素是应用程序配置文件中[ &lt; identityConfiguration &gt; ](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/identityconfiguration)元素的子元素。 如果你的应用程序是 Internet Information Services (IIS) 中承载的网站或 web 应用程序，则还必须 <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> 在 ASP.NET HTTP 模块集合中添加。  
  
> [!IMPORTANT]
>  使用 <xref:System.IdentityModel.Services.ClaimsPrincipalPermission> 类或 <xref:System.IdentityModel.Services.ClaimsPrincipalPermissionAttribute> 类时，用于执行访问检查的声明授权管理器是在标识配置中的属性下指定的授权管理器 <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=nameWithType> 。 在配置文件中，它是 `<identityConfiguration>` 从默认元素引用的部分 `<federationConfiguration>` 。 即使 Windows Communication Foundation (WCF) 服务和桌面应用程序，也是如此。  
  
 <xref:System.Security.Claims.ClaimsAuthorizationManager>基类不采用任何其他配置; 但是，你可以 <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> 在派生类中重写，以便从的子元素中提供声明授权管理器的初始化 `<claimsAuthorizationElement>` 。 典型的方案是使用这些子元素来指定授权策略，这些策略确定需要哪些声明类型和值才能获得对哪个资源的访问权限。 这并不是一种硬性要求，不过您可以随意定义实现所需的任何用法和语法。  
  
   
  
## Examples  
 本主题中使用的代码示例 <xref:System.Security.Claims.ClaimsAuthorizationManager> 摘自 `Claims Based Authorization` 示例。 此示例提供了一个自定义声明授权管理器，该管理器可以根据在配置中指定的策略授权主题。 自定义声明授权管理器由三个基本组件组成：派生自 <xref:System.Security.Claims.ClaimsAuthorizationManager> 的类，该类实现管理器、 `ResourceAction` 对资源和操作进行配对的类，以及读取和编译配置文件中指定的策略的策略读取器。 然后，声明授权管理器可以使用此编译的策略来评估主体，以便授予对资源的访问权限。 为了简洁起见，并未显示所有元素。 有关此示例和可供 WIF 使用的其他示例的信息，请参阅 [WIF 代码示例索引](https://docs.microsoft.com/previous-versions/dotnet/framework/security/wif-code-sample-index)。  
  
 下面的代码演示了自定义声明授权管理器的实现。 <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A>方法通过使用策略读取器帮助程序类从配置中读取和编译策略 (不显示) 并且 <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> 方法根据此策略授予或拒绝访问权限。  
  
 [!code-csharp[WifClaimsBasedAuthorization#2](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#2)]  
  
 下面的代码演示 `ResourceAction` 自定义声明管理器使用的类。  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 下面的 XML 演示如何为 IIS 7.5 中托管的 web 应用程序配置上面所示的声明授权管理器。 仅显示特定于声明授权管理器的配置的元素。 请注意， <xref:System.IdentityModel.Services.ClaimsAuthorizationModule> 必须将对类的引用添加到元素下的管道 `<system.Webserver>` 。 对于在 IIS 7 之前的 IIS 版本中托管的站点和应用程序，可将模块添加到元素下的管道中 `<system.Web>` 。 此配置将显示，但会被注释掉。  
  
 声明授权管理器使用的策略由 `<policy>` [ &lt; claimsAuthorizationManager &gt; ](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager)元素下的自定义元素指定。 在第一个策略中，主体必须拥有一个指定的声明，才能对指定的资源执行指定的操作。 在第二个策略中，主体必须拥有两个声明，才能在指定资源上执行指定的操作。 在所有其他情况下，会自动向主体授予访问权限，而不考虑它所拥有的任何声明。  
  
```  
<configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
        <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
          <or>  
            <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          </or>  
        </policy>  
        <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
          <and>  
            <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
            <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
          </and>  
        </policy>  
        <policy resource="http://localhost:28491/Default.aspx" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/" action="GET">  
        </policy>  
        <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
        </policy>  
      </claimsAuthorizationManager>  
  
      ...  
  
    </identityConfiguration>  
  </system.identityModel>  
  ...  
  
</configuration><configuration>  
  <configSections>  
    <!--WIF 4.5 sections -->  
    <section name="system.identityModel" type="System.IdentityModel.Configuration.SystemIdentityModelSection, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>  
    ...  
  
  </configSections>  
  
  ...  
  
  <system.web>  
    <httpModules>  
      <!--WIF 4.5 modules -->  
      <!--Not needed here for IIS >= 7 -->  
      <!--<add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>-->  
    </httpModules>  
  </system.web>  
  
  ...  
  
  <system.webServer>  
    <modules>  
      <!--WIF 4.5 modules -->  
      <add name="ClaimsAuthorizationModule" type="System.IdentityModel.Services.ClaimsAuthorizationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
  
  ...  
  
  <!-- WIF 4.5 s.im section-->  
  <system.identityModel>  
    <identityConfiguration>  
      <claimsAuthorizationManager type="MyClaimsAuthorizationManager.SimpleClaimsAuthorizationManager, MyClaimsAuthorizationManager" />  
      ...  
  
  </system.identityModel>  
  ...  
  
</configuration>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClaimsAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClaimsAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Security.Claims.ClaimsAuthorizationManager" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.Security.Claims.AuthorizationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.Security.Claims.AuthorizationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess(System.Security.Claims.AuthorizationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CheckAccess (context As AuthorizationContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::Security::Claims::AuthorizationContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool&#xA;override this.CheckAccess : System.Security.Claims.AuthorizationContext -&gt; bool" Usage="claimsAuthorizationManager.CheckAccess context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Security.Claims.AuthorizationContext" />
      </Parameters>
      <Docs>
        <param name="context">包含要为其检查身份授权的主题、资源和操作。</param>
        <summary>在派生类中实现时，检查对指定上下文中的主题的授权，以在指定资源上执行指定操作。</summary>
        <returns>如果授权该主题在指定的资源上执行指定操作，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基实现始终返回 `true` ，这将授予访问权限。 可以在派生类中重写此方法，以根据 RP 应用程序的要求授权访问权限。 如果此方法返回 `false` ，Windows Identity Foundation (WIF) 会向调用方返回未经授权的错误; 否则，将执行传递给 RP 应用程序。  
  
   
  
## Examples  
 本主题中使用的代码示例 <xref:System.Security.Claims.ClaimsAuthorizationManager> 摘自 `Claims Based Authorization` 示例。 此示例提供了一个自定义声明授权管理器，该管理器可以根据在配置中指定的策略授权主题。 自定义声明授权管理器由三个基本组件组成：派生自 <xref:System.Security.Claims.ClaimsAuthorizationManager> 的类，该类实现管理器、 `ResourceAction` 对资源和操作进行配对的类，以及读取和编译配置文件中指定的策略的策略读取器。 然后，声明授权管理器可以使用此编译的策略来评估主体，以便授予对资源的访问权限。 为了简洁起见，并未显示所有元素。 有关此示例和可供 WIF 使用的其他示例的信息，请参阅 [WIF 代码示例索引](https://docs.microsoft.com/previous-versions/dotnet/framework/security/wif-code-sample-index)。  
  
 下面的代码演示如何重写 <xref:System.Security.Claims.ClaimsAuthorizationManager.CheckAccess%2A> 方法。 此方法基于从配置文件读取和编译的策略授予或拒绝访问权限。  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#5)]  
  
 下面的代码演示 `ResourceAction` 自定义声明管理器使用的类。  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 声明授权管理器使用的策略由 `<policy>` [ &lt; claimsAuthorizationManager &gt; ](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager)元素下的自定义元素指定。 此策略由方法读取和编译 <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> 。 在第一个策略中，主体必须拥有一个指定的声明，才能对指定的资源执行指定的操作。 在第二个策略中，主体必须拥有两个声明，才能在指定资源上执行指定的操作。 在所有其他情况下，会自动向主体授予访问权限，而不考虑它所拥有的任何声明。  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCustomConfiguration">
      <MemberSignature Language="C#" Value="public virtual void LoadCustomConfiguration (System.Xml.XmlNodeList nodelist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadCustomConfiguration(class System.Xml.XmlNodeList nodelist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration(System.Xml.XmlNodeList)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub LoadCustomConfiguration (nodelist As XmlNodeList)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void LoadCustomConfiguration(System::Xml::XmlNodeList ^ nodelist);" />
      <MemberSignature Language="F#" Value="abstract member LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit&#xA;override this.LoadCustomConfiguration : System.Xml.XmlNodeList -&gt; unit" Usage="claimsAuthorizationManager.LoadCustomConfiguration nodelist" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IdentityModel.Configuration.ICustomIdentityConfiguration.LoadCustomConfiguration(System.Xml.XmlNodeList)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodelist" Type="System.Xml.XmlNodeList" />
      </Parameters>
      <Docs>
        <param name="nodelist">自定义配置元素。 列表中的每个节点都属于 <see cref="T:System.Xml.XmlElement" /> 类型。</param>
        <summary>在派生类中重写时，将从 XML 中加载自定义配置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此 <xref:System.Security.Claims.ClaimsAuthenticationManager.LoadCustomConfiguration%2A> 方法由配置基础结构调用。 调用此方法时， `nodelist` 将包含配置文件中的[ &lt; claimsAuthorizationManager &gt; ](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager)元素的顶级子元素。 其中每个元素反过来都包含特性或子元素，具体取决于为派生类定义的配置架构。 如果在配置文件中的元素下未显示任何子元素 `<claimsAuthorizationManager>` ，则不会调用此方法。  
  
 默认实现引发 <xref:System.NotImplementedException> 。 在派生类中重写此方法可以从配置文件中启用声明授权管理器的初始化。 通常，配置元素用于表示授权策略;不过，你可以根据应用程序的要求，以任何有意义的方式定义元素并使用这些元素。  
  
   
  
## Examples  
 本主题中使用的代码示例 <xref:System.Security.Claims.ClaimsAuthorizationManager> 摘自 `Claims Based Authorization` 示例。 此示例提供了一个自定义声明授权管理器，该管理器可以根据在配置中指定的策略授权主题。 自定义声明授权管理器由三个基本组件组成：派生自 <xref:System.Security.Claims.ClaimsAuthorizationManager> 的类，该类实现管理器、 `ResourceAction` 对资源和操作进行配对的类，以及读取和编译配置文件中指定的策略的策略读取器。 然后，声明授权管理器可以使用此编译的策略来评估主体，以便授予对资源的访问权限。 为了简洁起见，并未显示所有元素。 有关此示例和可供 WIF 使用的其他示例的信息，请参阅 [WIF 代码示例索引](https://docs.microsoft.com/previous-versions/dotnet/framework/security/wif-code-sample-index)。  
  
 下面的代码演示如何重写 <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> 方法。 此方法使用帮助器策略读取器类 (未显示) 来读取和编译配置文件中指定的授权策略。 策略将添加到字典中，并由从其 `ResourceAction` 所针对的资源和操作创建的密钥对象进行访问。  
  
 [!code-csharp[WifClaimsBasedAuthorization#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#3)]  
[!code-csharp[WifClaimsBasedAuthorization#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/myclaimsauthorizationmanager.cs#4)]  
  
 下面的代码演示 `ResourceAction` 自定义声明管理器使用的类。  
  
 [!code-csharp[WifClaimsBasedAuthorization#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifclaimsbasedauthorization/cs/claimsauthorizationlibrary/resourceaction.cs#1)]  
  
 声明授权管理器使用的策略由 `<policy>` [ &lt; claimsAuthorizationManager &gt; ](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/claimsauthorizationmanager)元素下的自定义元素指定。 此策略由方法读取和编译 <xref:System.Security.Claims.ClaimsAuthorizationManager.LoadCustomConfiguration%2A> 。 在第一个策略中，主体必须拥有一个指定的声明，才能对指定的资源执行指定的操作。 在第二个策略中，主体必须拥有两个声明，才能在指定资源上执行指定的操作。 在所有其他情况下，会自动向主体授予访问权限，而不考虑它所拥有的任何声明。  
  
```  
<system.identityModel>  
  <identityConfiguration>  
    <claimsAuthorizationManager type="ClaimsAuthorizationLibrary.MyClaimsAuthorizationManager, ClaimsAuthorizationLibrary">  
      <policy resource="http://localhost:28491/Developers.aspx" action="GET">  
        <or>  
          <claim claimType="http://schemas.microsoft.com/ws/2008/06/identity/claims/role" claimValue="developer" />  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
        </or>  
      </policy>  
      <policy resource="http://localhost:28491/Administrators.aspx" action="GET">  
        <and>  
          <claim claimType="http://schemas.xmlsoap.org/claims/Group" claimValue="Administrator" />  
          <claim claimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/country" claimValue="USA" />  
        </and>  
      </policy>  
      <policy resource="http://localhost:28491/Default.aspx" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/" action="GET">  
      </policy>  
      <policy resource="http://localhost:28491/Claims.aspx" action="GET">  
      </policy>  
    </claimsAuthorizationManager>  
  
    ...  
  
  </identityConfiguration>  
</system.identityModel>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
