<Type Name="PersistenceProvider" FullName="System.ServiceModel.Persistence.PersistenceProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2abe55fe46f1371c1433349ed861043aeb40fa72" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86570498" /></Metadata><TypeSignature Language="C#" Value="public abstract class PersistenceProvider : System.ServiceModel.Channels.CommunicationObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit PersistenceProvider extends System.ServiceModel.Channels.CommunicationObject" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Persistence.PersistenceProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class PersistenceProvider&#xA;Inherits CommunicationObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class PersistenceProvider abstract : System::ServiceModel::Channels::CommunicationObject" />
  <TypeSignature Language="F#" Value="type PersistenceProvider = class&#xA;    inherit CommunicationObject" />
  <AssemblyInfo>
    <AssemblyName>System.WorkflowServices</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ServiceModel.Channels.CommunicationObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Obsolete("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("The WF3 types are deprecated.  Instead, please use the new WF4 types from System.Activities.*")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7567e-101">从中派生所有持久性服务永久性提供程序的抽象基类。</span><span class="sxs-lookup"><span data-stu-id="7567e-101">The abstract base class from which all durable service persistence providers are derived.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7567e-102">用户可以创建从此类型派生的类，以创建使用自定义持久性存储区（如第三方数据库、文件系统或远程访问的存储系统）的持久性服务永久性提供程序。</span><span class="sxs-lookup"><span data-stu-id="7567e-102">Users can create classes derived from this type to create durable service persistence providers that use custom persistence stores, such as third-party databases, the file system, or storage systems accessed remotely.</span></span> <span data-ttu-id="7567e-103">若要创建使用 Microsoft SQL Server 作为持久性存储区的此类型的系统提供的实现，请参见 <xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory>。</span><span class="sxs-lookup"><span data-stu-id="7567e-103">To create a system-provided implementation of this type that uses Microsoft SQL Server as a persistence store, see <xref:System.ServiceModel.Persistence.SqlPersistenceProviderFactory>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7567e-104">在创建永久性提供程序实现时，必须在新提供程序的方法（如 <xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A>）中保留线程的原始标识。</span><span class="sxs-lookup"><span data-stu-id="7567e-104">When creating persistence provider implementations, it is important to maintain the thread's original identity in the new provider's methods (such as <xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A>.</span></span> <span data-ttu-id="7567e-105">否则会形成安全漏洞，因为在这种情况下，操作将会在错误的标识下运行。</span><span class="sxs-lookup"><span data-stu-id="7567e-105">Otherwise, security loopholes could be created, because operations would then run under the wrong identity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7567e-106">有关使用文件系统作为持久性存储区的此类型的实现，请参见 DurableServiceFactory SDK 示例中的 FilePersistenceProviderFactory.cs 文件。</span><span class="sxs-lookup"><span data-stu-id="7567e-106">For an implementation of this type that uses the file system as a persistence store, see the FilePersistenceProviderFactory.cs file in the DurableServiceFactory SDK sample.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected PersistenceProvider (Guid id);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.Guid id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.#ctor(System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (id As Guid)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; PersistenceProvider(Guid id);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.Persistence.PersistenceProvider : Guid -&gt; System.ServiceModel.Persistence.PersistenceProvider" Usage="new System.ServiceModel.Persistence.PersistenceProvider id" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="id" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="id"><span data-ttu-id="7567e-107">要保存的服务状态数据的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="7567e-107">The unique identifier of the service state data being saved.</span></span></param>
        <summary><span data-ttu-id="7567e-108">在派生类中实现时，初始化 <see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="7567e-108">When implemented in a derived class, initializes a new instance of the <see cref="T:System.ServiceModel.Persistence.PersistenceProvider" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7567e-109">下面的代码演示如何使用 <xref:System.ServiceModel.Persistence.PersistenceProvider> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="7567e-109">The following code demonstrates how to use the <xref:System.ServiceModel.Persistence.PersistenceProvider> constructor.</span></span> <span data-ttu-id="7567e-110">此代码示例摘自 FilePersistenceProviderFactory.cs 文件中的 DurableServiceFactory SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="7567e-110">This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</span></span> <span data-ttu-id="7567e-111">有关更多信息，请参见 DurableServiceFactory SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="7567e-111">For more information, see the DurableServiceFactory SDK sample.</span></span>  
  
 [!code-csharp[PersistenceProvider#0](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginCreate">
      <MemberSignature Language="C#" Value="public abstract IAsyncResult BeginCreate (object instance, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginCreate(object instance, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BeginCreate (instance As Object, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IAsyncResult ^ BeginCreate(System::Object ^ instance, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginCreate : obj * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="persistenceProvider.BeginCreate (instance, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="7567e-112">实际的实例状态。</span><span class="sxs-lookup"><span data-stu-id="7567e-112">The actual instance state.</span></span></param>
        <param name="timeout"><span data-ttu-id="7567e-113">时间段，永久性提供程序在该时间段后将中止此尝试。</span><span class="sxs-lookup"><span data-stu-id="7567e-113">The time period after which the persistence provider aborts this attempt.</span></span></param>
        <param name="callback"><span data-ttu-id="7567e-114">操作完成时将要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="7567e-114">The method to be called when the operation is completed.</span></span></param>
        <param name="state"><span data-ttu-id="7567e-115">一个用户提供的对象，该对象用于将此特定异步操作与其他操作区别开来。</span><span class="sxs-lookup"><span data-stu-id="7567e-115">A user-provided object that distinguishes this particular asynchronous operation from other operations.</span></span></param>
        <summary><span data-ttu-id="7567e-116">在派生类中实现时，表示“创建”阶段开始。</span><span class="sxs-lookup"><span data-stu-id="7567e-116">When implemented in a derived class, represents the beginning of the Create phase.</span></span> <span data-ttu-id="7567e-117">第一次在持久性存储区中创建服务实例记录时将进入“创建”阶段。</span><span class="sxs-lookup"><span data-stu-id="7567e-117">The Create phase occurs when service instance records are first created in the persistence store.</span></span></summary>
        <returns><span data-ttu-id="7567e-118"><see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /> 异步方法调用的状态。</span><span class="sxs-lookup"><span data-stu-id="7567e-118">The state of the <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /> asynchronous method call.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7567e-119">下面的代码演示如何实现 <xref:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7567e-119">The following code demonstrates how to implement the <xref:System.ServiceModel.Persistence.PersistenceProvider.BeginCreate%2A> method.</span></span>  
  
 [!code-csharp[PersistenceProvider#14](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDelete">
      <MemberSignature Language="C#" Value="public abstract IAsyncResult BeginDelete (object instance, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginDelete(object instance, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BeginDelete (instance As Object, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IAsyncResult ^ BeginDelete(System::Object ^ instance, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginDelete : obj * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="persistenceProvider.BeginDelete (instance, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="7567e-120">实际的实例状态。</span><span class="sxs-lookup"><span data-stu-id="7567e-120">The actual instance state.</span></span></param>
        <param name="timeout"><span data-ttu-id="7567e-121">时间段，永久性提供程序在该时间段后将中止此尝试。</span><span class="sxs-lookup"><span data-stu-id="7567e-121">The time period after which the persistence provider aborts this attempt.</span></span></param>
        <param name="callback"><span data-ttu-id="7567e-122">操作完成时将要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="7567e-122">The method to be called when the operation is completed.</span></span></param>
        <param name="state"><span data-ttu-id="7567e-123">一个用户提供的对象，该对象用于将此特定异步操作与其他操作区别开来。</span><span class="sxs-lookup"><span data-stu-id="7567e-123">A user-provided object that distinguishes this particular asynchronous operation from other operations.</span></span></param>
        <summary><span data-ttu-id="7567e-124">在派生类中实现时，表示“删除”阶段开始。</span><span class="sxs-lookup"><span data-stu-id="7567e-124">When implemented in a derived class, represents the beginning of the Delete phase.</span></span> <span data-ttu-id="7567e-125">将服务状态数据从持久性存储区中永久删除时将进入“删除”阶段。</span><span class="sxs-lookup"><span data-stu-id="7567e-125">The Delete phase occurs when service state data is permanently deleted from the persistence store.</span></span></summary>
        <returns><span data-ttu-id="7567e-126"><see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /> 异步方法调用的状态。</span><span class="sxs-lookup"><span data-stu-id="7567e-126">The state of the <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginDelete(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /> asynchronous method call.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7567e-127">下面的代码演示如何实现 `BeginDelete` 方法。</span><span class="sxs-lookup"><span data-stu-id="7567e-127">The following code demonstrates how to implement the `BeginDelete` method.</span></span> <span data-ttu-id="7567e-128">此代码示例摘自 FilePersistenceProviderFactory.cs 文件中的 DurableServiceFactory SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="7567e-128">This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</span></span> <span data-ttu-id="7567e-129">有关更多信息，请参见 DurableServiceFactory SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="7567e-129">For more information, see the DurableServiceFactory SDK sample.</span></span>  
  
 [!code-csharp[PersistenceProvider#6](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public abstract IAsyncResult BeginLoad (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginLoad(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BeginLoad (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IAsyncResult ^ BeginLoad(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginLoad : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="persistenceProvider.BeginLoad (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="7567e-130">时间段，永久性提供程序在该时间段后将中止此尝试。</span><span class="sxs-lookup"><span data-stu-id="7567e-130">The time period after which the persistence provider aborts this attempt.</span></span></param>
        <param name="callback"><span data-ttu-id="7567e-131">操作完成时将要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="7567e-131">The method to be called when the operation is completed.</span></span></param>
        <param name="state"><span data-ttu-id="7567e-132">一个用户提供的对象，该对象用于将此特定异步操作与其他操作区别开来。</span><span class="sxs-lookup"><span data-stu-id="7567e-132">A user-provided object that distinguishes this particular asynchronous operation from other operations.</span></span></param>
        <summary><span data-ttu-id="7567e-133">在派生类中实现时，表示“加载”阶段开始。</span><span class="sxs-lookup"><span data-stu-id="7567e-133">When implemented in a derived class, represents the beginning of the Load phase.</span></span> <span data-ttu-id="7567e-134">将状态数据从持久性存储区加载到永久性提供程序中时将进入“加载”阶段。</span><span class="sxs-lookup"><span data-stu-id="7567e-134">The Load phase occurs when state data is loaded into the persistence provider from the persistence store.</span></span></summary>
        <returns><span data-ttu-id="7567e-135"><see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)" /> 异步方法调用的状态。</span><span class="sxs-lookup"><span data-stu-id="7567e-135">The state of the <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoad(System.TimeSpan,System.AsyncCallback,System.Object)" /> asynchronous method call.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7567e-136">下面的代码演示如何实现 `BeginLoad` 方法。</span><span class="sxs-lookup"><span data-stu-id="7567e-136">The following code demonstrates how to implement the `BeginLoad` method.</span></span> <span data-ttu-id="7567e-137">此代码示例摘自 FilePersistenceProviderFactory.cs 文件中的 DurableServiceFactory SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="7567e-137">This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</span></span> <span data-ttu-id="7567e-138">有关更多信息，请参见 DurableServiceFactory SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="7567e-138">For more information, see the DurableServiceFactory SDK sample.</span></span>  
  
 [!code-csharp[PersistenceProvider#7](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoadIfChanged">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginLoadIfChanged (TimeSpan timeout, object instanceToken, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginLoadIfChanged(valuetype System.TimeSpan timeout, object instanceToken, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginLoadIfChanged (timeout As TimeSpan, instanceToken As Object, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginLoadIfChanged(TimeSpan timeout, System::Object ^ instanceToken, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginLoadIfChanged : TimeSpan * obj * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginLoadIfChanged : TimeSpan * obj * AsyncCallback * obj -&gt; IAsyncResult" Usage="persistenceProvider.BeginLoadIfChanged (timeout, instanceToken, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="instanceToken" Type="System.Object" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="7567e-139">时间段，永久性提供程序在该时间段后将中止此尝试。</span><span class="sxs-lookup"><span data-stu-id="7567e-139">The time period after which the persistence provider aborts this attempt.</span></span></param>
        <param name="instanceToken"><span data-ttu-id="7567e-140">先前的 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /> 或 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" /> 返回的标记，表示调用方具有的当前状态。</span><span class="sxs-lookup"><span data-stu-id="7567e-140">The token returned by a previous <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /> or <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" /> that represents the current state held by the caller.</span></span></param>
        <param name="callback"><span data-ttu-id="7567e-141">操作完成时将要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="7567e-141">The method to be called when the operation is completed.</span></span></param>
        <param name="state"><span data-ttu-id="7567e-142">一个用户提供的对象，该对象用于将此特定异步操作与其他操作区别开来。</span><span class="sxs-lookup"><span data-stu-id="7567e-142">A user-provided object that distinguishes this particular asynchronous operation from other operations.</span></span></param>
        <summary><span data-ttu-id="7567e-143">在派生类中实现时，表示“LoadIfChanged”阶段开始。</span><span class="sxs-lookup"><span data-stu-id="7567e-143">When implemented in a derived class, represents the beginning of the LoadIfChanged phase.</span></span> <span data-ttu-id="7567e-144">将状态数据从持久性存储区加载到永久性提供程序中，并且持久性存储区中的状态数据已更改时，将进入“LoadIfChanged”阶段。</span><span class="sxs-lookup"><span data-stu-id="7567e-144">The LoadIfChanged phase occurs when state data is loaded into the persistence provider from the persistence store, and the state data in the persistence store has been changed.</span></span></summary>
        <returns><span data-ttu-id="7567e-145"><see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)" /> 异步方法调用的状态。</span><span class="sxs-lookup"><span data-stu-id="7567e-145">The state of the <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged(System.TimeSpan,System.Object,System.AsyncCallback,System.Object)" /> asynchronous method call.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7567e-146">下面的代码演示如何实现 <xref:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7567e-146">The following code demonstrates how to implement the <xref:System.ServiceModel.Persistence.PersistenceProvider.BeginLoadIfChanged%2A> method.</span></span>  
  
 [!code-csharp[PersistenceProvider#11](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public abstract IAsyncResult BeginUpdate (object instance, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginUpdate(object instance, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function BeginUpdate (instance As Object, timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract IAsyncResult ^ BeginUpdate(System::Object ^ instance, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginUpdate : obj * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="persistenceProvider.BeginUpdate (instance, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="7567e-147">实际的实例状态。</span><span class="sxs-lookup"><span data-stu-id="7567e-147">The actual instance state.</span></span></param>
        <param name="timeout"><span data-ttu-id="7567e-148">时间段，永久性提供程序在该时间段后将中止此尝试。</span><span class="sxs-lookup"><span data-stu-id="7567e-148">The time period after which the persistence provider aborts this attempt.</span></span></param>
        <param name="callback"><span data-ttu-id="7567e-149">操作完成时将要调用的方法。</span><span class="sxs-lookup"><span data-stu-id="7567e-149">The method to be called when the operation is completed.</span></span></param>
        <param name="state"><span data-ttu-id="7567e-150">一个用户提供的对象，该对象用于将此特定异步操作与其他操作区别开来。</span><span class="sxs-lookup"><span data-stu-id="7567e-150">A user-provided object that distinguishes this particular asynchronous operation from other operations.</span></span></param>
        <summary><span data-ttu-id="7567e-151">在派生类中实现时，表示“更新”阶段开始。</span><span class="sxs-lookup"><span data-stu-id="7567e-151">When implemented in a derived class, represents the beginning of the Update phase.</span></span> <span data-ttu-id="7567e-152">在持久性存储区中更新服务状态数据时将进入“更新”阶段。</span><span class="sxs-lookup"><span data-stu-id="7567e-152">The Update phase occurs when service state data is updated in the persistence store.</span></span></summary>
        <returns><span data-ttu-id="7567e-153"><see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /> 异步方法调用的状态。</span><span class="sxs-lookup"><span data-stu-id="7567e-153">The state of the <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate(System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" /> asynchronous method call.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7567e-154">下面的代码演示如何实现 <xref:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7567e-154">The following code demonstrates how to implement the <xref:System.ServiceModel.Persistence.PersistenceProvider.BeginUpdate%2A> method.</span></span>  
  
 [!code-csharp[PersistenceProvider#17](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public abstract object Create (object instance, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Create(object instance, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Create (instance As Object, timeout As TimeSpan) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Create(System::Object ^ instance, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Create : obj * TimeSpan -&gt; obj" Usage="persistenceProvider.Create (instance, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="7567e-155">实际的实例状态。</span><span class="sxs-lookup"><span data-stu-id="7567e-155">The actual instance state.</span></span></param>
        <param name="timeout"><span data-ttu-id="7567e-156">时间段，永久性提供程序在该时间段后将中止此尝试。</span><span class="sxs-lookup"><span data-stu-id="7567e-156">The time period after which the persistence provider aborts this attempt.</span></span></param>
        <summary><span data-ttu-id="7567e-157">在派生类中实现时，在持久性存储区中创建服务状态记录。</span><span class="sxs-lookup"><span data-stu-id="7567e-157">When implemented in a derived class, creates a service state record in the persistence store.</span></span></summary>
        <returns><span data-ttu-id="7567e-158">与刚保存的状态相对应的实例标记。</span><span class="sxs-lookup"><span data-stu-id="7567e-158">The instance token corresponding to the state just saved.</span></span> <span data-ttu-id="7567e-159">可以将其传递给 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" />，以确定持久性存储区中的状态是否与调用 Create 时的状态不同。</span><span class="sxs-lookup"><span data-stu-id="7567e-159">This can be passed to <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /> to determine whether the state in the persistence store differs from the state when Create was called.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7567e-160">下面的代码演示如何实现 <xref:System.ServiceModel.Persistence.PersistenceProvider.Create%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7567e-160">The following code demonstrates how to implement the <xref:System.ServiceModel.Persistence.PersistenceProvider.Create%2A> method.</span></span>  
  
 [!code-csharp[PersistenceProvider#15](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public abstract void Delete (object instance, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Delete(object instance, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.Delete(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Delete (instance As Object, timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Delete(System::Object ^ instance, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Delete : obj * TimeSpan -&gt; unit" Usage="persistenceProvider.Delete (instance, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="7567e-161">实际的实例状态。</span><span class="sxs-lookup"><span data-stu-id="7567e-161">The actual instance state.</span></span></param>
        <param name="timeout"><span data-ttu-id="7567e-162">时间段，永久性提供程序在该时间段后将中止此尝试。</span><span class="sxs-lookup"><span data-stu-id="7567e-162">The time period after which the persistence provider aborts this attempt.</span></span></param>
        <summary><span data-ttu-id="7567e-163">在派生类中实现时，从持久性存储区中永久删除服务状态信息。</span><span class="sxs-lookup"><span data-stu-id="7567e-163">When implemented in a derived class, permanently deletes service state information from the persistence store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7567e-164">下面的代码演示如何实现 <xref:System.ServiceModel.Persistence.PersistenceProvider.Delete%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7567e-164">The following code demonstrates how to implement the <xref:System.ServiceModel.Persistence.PersistenceProvider.Delete%2A> method.</span></span> <span data-ttu-id="7567e-165">此代码示例摘自 FilePersistenceProviderFactory.cs 文件中的 DurableServiceFactory SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="7567e-165">This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</span></span> <span data-ttu-id="7567e-166">有关更多信息，请参见 DurableServiceFactory SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="7567e-166">For more information, see the DurableServiceFactory SDK sample.</span></span>  
  
 [!code-csharp[PersistenceProvider#9](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndCreate">
      <MemberSignature Language="C#" Value="public abstract object EndCreate (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndCreate(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.EndCreate(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EndCreate (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ EndCreate(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndCreate : IAsyncResult -&gt; obj" Usage="persistenceProvider.EndCreate result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="7567e-167">对操作结果的引用。</span><span class="sxs-lookup"><span data-stu-id="7567e-167">A reference to the result of the operation.</span></span></param>
        <summary><span data-ttu-id="7567e-168">在派生类中实现时，表示“创建”阶段结束。</span><span class="sxs-lookup"><span data-stu-id="7567e-168">When implemented in a derived class, represents the end of the Create phase.</span></span> <span data-ttu-id="7567e-169">第一次在持久性存储区中创建服务状态记录时将进入“创建”阶段。</span><span class="sxs-lookup"><span data-stu-id="7567e-169">The Create phase occurs when service state records are first created in the persistence store.</span></span></summary>
        <returns><span data-ttu-id="7567e-170">与刚保存的状态相对应的实例标记。</span><span class="sxs-lookup"><span data-stu-id="7567e-170">The instance token corresponding to the state just saved.</span></span> <span data-ttu-id="7567e-171">可以将其传递给 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" />，以确定持久性存储区中的状态是否与调用 Create 时的状态不同。</span><span class="sxs-lookup"><span data-stu-id="7567e-171">This can be passed to <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /> to determine whether the state in the persistence store differs from the state when Create was called.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7567e-172">下面的代码演示如何实现 <xref:System.ServiceModel.Persistence.PersistenceProvider.EndCreate%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7567e-172">The following code demonstrates how to implement the <xref:System.ServiceModel.Persistence.PersistenceProvider.EndCreate%2A> method.</span></span>  
  
 [!code-csharp[PersistenceProvider#16](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndDelete">
      <MemberSignature Language="C#" Value="public abstract void EndDelete (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndDelete(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.EndDelete(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub EndDelete (result As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void EndDelete(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndDelete : IAsyncResult -&gt; unit" Usage="persistenceProvider.EndDelete result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="7567e-173">对操作结果的引用。</span><span class="sxs-lookup"><span data-stu-id="7567e-173">A reference to the result of the operation.</span></span></param>
        <summary><span data-ttu-id="7567e-174">在派生类中实现时，表示“删除”阶段结束。</span><span class="sxs-lookup"><span data-stu-id="7567e-174">When implemented in a derived class, represents the end of the Delete phase.</span></span> <span data-ttu-id="7567e-175">将状态数据从持久性存储区中永久删除时将进入“删除”阶段。</span><span class="sxs-lookup"><span data-stu-id="7567e-175">The Delete phase occurs when state data is permanently deleted from the persistence store.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7567e-176">下面的代码演示如何实现 <xref:System.ServiceModel.Persistence.PersistenceProvider.EndDelete%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7567e-176">The following code demonstrates how to implement the <xref:System.ServiceModel.Persistence.PersistenceProvider.EndDelete%2A> method.</span></span> <span data-ttu-id="7567e-177">此代码示例摘自 FilePersistenceProviderFactory.cs 文件中的 DurableServiceFactory SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="7567e-177">This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</span></span> <span data-ttu-id="7567e-178">有关更多信息，请参见 DurableServiceFactory SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="7567e-178">For more information, see the DurableServiceFactory SDK sample.</span></span>  
  
 [!code-csharp[PersistenceProvider#5](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndLoad">
      <MemberSignature Language="C#" Value="public abstract object EndLoad (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndLoad(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoad(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EndLoad (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ EndLoad(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndLoad : IAsyncResult -&gt; obj" Usage="persistenceProvider.EndLoad result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="7567e-179">对操作结果的引用。</span><span class="sxs-lookup"><span data-stu-id="7567e-179">A reference to the result of the operation.</span></span></param>
        <summary><span data-ttu-id="7567e-180">在派生类中实现时，表示“加载”阶段结束。</span><span class="sxs-lookup"><span data-stu-id="7567e-180">When implemented in a derived class, represents the end of the Load phase.</span></span> <span data-ttu-id="7567e-181">将状态数据从持久性存储区加载到永久性提供程序中时将进入“加载”阶段。</span><span class="sxs-lookup"><span data-stu-id="7567e-181">The Load phase occurs when state data is loaded into the persistence provider from the persistence store.</span></span></summary>
        <returns><span data-ttu-id="7567e-182">服务状态信息。</span><span class="sxs-lookup"><span data-stu-id="7567e-182">The service state information.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7567e-183">下面的代码演示如何使用 `EndLoad` 方法。</span><span class="sxs-lookup"><span data-stu-id="7567e-183">The following code demonstrates how to use the `EndLoad` method.</span></span> <span data-ttu-id="7567e-184">此代码示例摘自 FilePersistenceProviderFactory.cs 文件中的 DurableServiceFactory SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="7567e-184">This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</span></span> <span data-ttu-id="7567e-185">有关更多信息，请参见 DurableServiceFactory SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="7567e-185">For more information, see the DurableServiceFactory SDK sample.</span></span>  
  
 [!code-csharp[PersistenceProvider#1](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndLoadIfChanged">
      <MemberSignature Language="C#" Value="public virtual bool EndLoadIfChanged (IAsyncResult result, out object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EndLoadIfChanged(class System.IAsyncResult result, [out] object&amp; instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged(System.IAsyncResult,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndLoadIfChanged (result As IAsyncResult, ByRef instance As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool EndLoadIfChanged(IAsyncResult ^ result, [Runtime::InteropServices::Out] System::Object ^ % instance);" />
      <MemberSignature Language="F#" Value="abstract member EndLoadIfChanged : IAsyncResult * obj -&gt; bool&#xA;override this.EndLoadIfChanged : IAsyncResult * obj -&gt; bool" Usage="persistenceProvider.EndLoadIfChanged (result, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
        <Parameter Name="instance" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="7567e-186">对操作结果的引用。</span><span class="sxs-lookup"><span data-stu-id="7567e-186">A reference to the result of the operation.</span></span></param>
        <param name="instance"><span data-ttu-id="7567e-187">实际的实例状态。</span><span class="sxs-lookup"><span data-stu-id="7567e-187">The actual instance state.</span></span></param>
        <summary><span data-ttu-id="7567e-188">在派生类中实现时，表示“LoadIfChanged”阶段结束。</span><span class="sxs-lookup"><span data-stu-id="7567e-188">When implemented in a derived class, represents the end of the LoadIfChanged phase.</span></span> <span data-ttu-id="7567e-189">将状态数据从持久性存储区加载到永久性提供程序中，并且持久性存储区中的状态数据已更改时，将进入“LoadIfChanged”阶段。</span><span class="sxs-lookup"><span data-stu-id="7567e-189">The LoadIfChanged phase occurs when state data is loaded into the persistence provider from the persistence store, and the state data in the persistence store has been changed.</span></span></summary>
        <returns><span data-ttu-id="7567e-190">如果使用持久性存储区中的最新副本设置实例 <see langword="true" /> 参数，则为 <see langword="out" />；如果本地缓存状态已经是最新的，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7567e-190"><see langword="true" /> if the instance <see langword="out" /> parameter has been set with the latest copy from the persistence store; <see langword="false" /> if the locally cached state is already up-to-date.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7567e-191">下面的代码演示如何实现 <xref:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7567e-191">The following code demonstrates how to implement the <xref:System.ServiceModel.Persistence.PersistenceProvider.EndLoadIfChanged%2A> method.</span></span>  
  
 [!code-csharp[PersistenceProvider#12](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public abstract object EndUpdate (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndUpdate(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function EndUpdate (result As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ EndUpdate(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndUpdate : IAsyncResult -&gt; obj" Usage="persistenceProvider.EndUpdate result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result"><span data-ttu-id="7567e-192">对操作结果的引用。</span><span class="sxs-lookup"><span data-stu-id="7567e-192">A reference to the result of the operation.</span></span></param>
        <summary><span data-ttu-id="7567e-193">表示“更新”阶段结束。</span><span class="sxs-lookup"><span data-stu-id="7567e-193">Represents the end of the Update phase.</span></span> <span data-ttu-id="7567e-194">在持久性存储区中更新服务状态记录时将进入“更新”阶段。</span><span class="sxs-lookup"><span data-stu-id="7567e-194">The Update phase occurs when service state records are updated in the persistence store.</span></span></summary>
        <returns><span data-ttu-id="7567e-195">与刚保存的状态相对应的实例标记。</span><span class="sxs-lookup"><span data-stu-id="7567e-195">The instance token corresponding to the state just saved.</span></span> <span data-ttu-id="7567e-196">可以将其传递给 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" />，以确定持久性存储区中的状态是否与调用 Create 时的状态不同。</span><span class="sxs-lookup"><span data-stu-id="7567e-196">This can be passed to <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /> to determine whether the state in the persistence store differs from the state when Create was called.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7567e-197">下面的代码演示如何实现 <xref:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7567e-197">The following code demonstrates how to implement the <xref:System.ServiceModel.Persistence.PersistenceProvider.EndUpdate%2A> method.</span></span>  
  
 [!code-csharp[PersistenceProvider#19](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public Guid Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid Id" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.Persistence.PersistenceProvider.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid Id { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : Guid" Usage="System.ServiceModel.Persistence.PersistenceProvider.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7567e-198">表示与此实例关联的 <see cref="T:System.Guid" />。</span><span class="sxs-lookup"><span data-stu-id="7567e-198">Represents the <see cref="T:System.Guid" /> associated with this instance.</span></span></summary>
        <value><span data-ttu-id="7567e-199">与此实例关联的 GUID。</span><span class="sxs-lookup"><span data-stu-id="7567e-199">The GUID associated with this instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7567e-200">下面的代码演示如何使用 <xref:System.ServiceModel.Persistence.PersistenceProvider.Id%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="7567e-200">The following code demonstrates how to use the <xref:System.ServiceModel.Persistence.PersistenceProvider.Id%2A> property.</span></span>  
  
 [!code-csharp[PersistenceProvider#10](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public abstract object Load (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Load(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.Load(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Load (timeout As TimeSpan) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Load(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Load : TimeSpan -&gt; obj" Usage="persistenceProvider.Load timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="7567e-201">时间段，永久性提供程序在该时间段后将中止此尝试。</span><span class="sxs-lookup"><span data-stu-id="7567e-201">The time period after which the persistence provider aborts this attempt.</span></span></param>
        <summary><span data-ttu-id="7567e-202">在派生类中实现时，从持久性存储区中加载服务状态信息。</span><span class="sxs-lookup"><span data-stu-id="7567e-202">When implemented in a derived class, loads service state information from the persistence store.</span></span></summary>
        <returns><span data-ttu-id="7567e-203">已加载的实例状态。</span><span class="sxs-lookup"><span data-stu-id="7567e-203">The loaded instance state.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7567e-204">对 <xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A> 方法中的安全令牌所做的更改在不进行恢复的情况下将对该消息的其余处理保持有效。</span><span class="sxs-lookup"><span data-stu-id="7567e-204">Changes made to the security token in the <xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A> method, if not reverted, stay in effect for the remainder of that message's processing.</span></span> <span data-ttu-id="7567e-205">这意味着服务操作的用户代码、通过调度程序的响应消息路径以及任何错误路径都将在已更改的安全上下文中运行。</span><span class="sxs-lookup"><span data-stu-id="7567e-205">This means that the service operation's user code, the response message path through the dispatcher, as well as any error paths, run in the changed security context.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7567e-206">下面的代码演示如何实现 <xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7567e-206">The following code demonstrates how to implement the <xref:System.ServiceModel.Persistence.PersistenceProvider.Load%2A> method.</span></span> <span data-ttu-id="7567e-207">此代码示例摘自 FilePersistenceProviderFactory.cs 文件中的 DurableServiceFactory SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="7567e-207">This code example is part of the DurableServiceFactory SDK sample from the FilePersistenceProviderFactory.cs file.</span></span> <span data-ttu-id="7567e-208">有关更多信息，请参见 DurableServiceFactory SDK 示例。</span><span class="sxs-lookup"><span data-stu-id="7567e-208">For more information, see the DurableServiceFactory SDK sample.</span></span>  
  
 [!code-csharp[PersistenceProvider#3](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadIfChanged">
      <MemberSignature Language="C#" Value="public virtual bool LoadIfChanged (TimeSpan timeout, object instanceToken, out object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool LoadIfChanged(valuetype System.TimeSpan timeout, object instanceToken, [out] object&amp; instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function LoadIfChanged (timeout As TimeSpan, instanceToken As Object, ByRef instance As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool LoadIfChanged(TimeSpan timeout, System::Object ^ instanceToken, [Runtime::InteropServices::Out] System::Object ^ % instance);" />
      <MemberSignature Language="F#" Value="abstract member LoadIfChanged : TimeSpan * obj * obj -&gt; bool&#xA;override this.LoadIfChanged : TimeSpan * obj * obj -&gt; bool" Usage="persistenceProvider.LoadIfChanged (timeout, instanceToken, instance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="instanceToken" Type="System.Object" />
        <Parameter Name="instance" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="timeout"><span data-ttu-id="7567e-209">时间段，永久性提供程序在该时间段后将中止此尝试。</span><span class="sxs-lookup"><span data-stu-id="7567e-209">The time period after which the persistence provider aborts this attempt.</span></span></param>
        <param name="instanceToken"><span data-ttu-id="7567e-210">先前的 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /> 或 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" /> 返回的标记，表示调用方具有的当前状态。</span><span class="sxs-lookup"><span data-stu-id="7567e-210">The token returned by a previous <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Create(System.Object,System.TimeSpan)" /> or <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" />, which represents the current state held by the caller.</span></span></param>
        <param name="instance"><span data-ttu-id="7567e-211">实际的实例状态。</span><span class="sxs-lookup"><span data-stu-id="7567e-211">The actual instance state.</span></span></param>
        <summary><span data-ttu-id="7567e-212">在派生类中实现时，如果服务状态信息数据发生了更改，则从持久性存储区中加载服务状态信息。</span><span class="sxs-lookup"><span data-stu-id="7567e-212">When implemented in a derived class, loads service state information from the persistence store if that data has been changed.</span></span></summary>
        <returns><span data-ttu-id="7567e-213">如果使用持久性存储区中的最新副本设置 <paramref name="instance" /><see langword="out" /> 参数，则为 <see langword="true" />，如果本地缓存状态已经是最新的，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7567e-213"><see langword="true" /> if the <paramref name="instance" /><see langword="out" /> parameter has been set with the latest copy from the persistence store; <see langword="false" /> if the locally cached state is already up to date.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7567e-214">下面的代码演示如何实现 <xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7567e-214">The following code demonstrates how to implement the <xref:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged%2A> method.</span></span>  
  
 [!code-csharp[PersistenceProvider#13](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public abstract object Update (object instance, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Update(object instance, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Persistence.PersistenceProvider.Update(System.Object,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Update (instance As Object, timeout As TimeSpan) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ Update(System::Object ^ instance, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="abstract member Update : obj * TimeSpan -&gt; obj" Usage="persistenceProvider.Update (instance, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.WorkflowServices</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="7567e-215">实际的实例状态。</span><span class="sxs-lookup"><span data-stu-id="7567e-215">The actual instance state.</span></span></param>
        <param name="timeout"><span data-ttu-id="7567e-216">时间段，永久性提供程序在该时间段后将中止此尝试。</span><span class="sxs-lookup"><span data-stu-id="7567e-216">The time period after which the persistence provider aborts this attempt.</span></span></param>
        <summary><span data-ttu-id="7567e-217">在派生类中实现时，在持久性存储区中更新服务状态记录。</span><span class="sxs-lookup"><span data-stu-id="7567e-217">When implemented in a derived class, updates service state records in the persistence store.</span></span></summary>
        <returns><span data-ttu-id="7567e-218">与刚保存的状态相对应的实例标记。</span><span class="sxs-lookup"><span data-stu-id="7567e-218">The instance token corresponding to the state just saved.</span></span> <span data-ttu-id="7567e-219">可以将其传递给 <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" />，以确定持久性存储区中的状态是否与调用 Create 时的状态不同。</span><span class="sxs-lookup"><span data-stu-id="7567e-219">This can be passed to <see cref="M:System.ServiceModel.Persistence.PersistenceProvider.LoadIfChanged(System.TimeSpan,System.Object,System.Object@)" /> to determine whether the state in the persistence store differs from the state when Create was called.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7567e-220">下面的代码演示如何实现 <xref:System.ServiceModel.Persistence.PersistenceProvider.Update%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="7567e-220">The following code demonstrates how to implement the <xref:System.ServiceModel.Persistence.PersistenceProvider.Update%2A> method.</span></span>  
  
 [!code-csharp[PersistenceProvider#18](~/samples/snippets/csharp/VS_Snippets_CFX/persistenceprovider/cs/filepersistenceprovider.cs#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
