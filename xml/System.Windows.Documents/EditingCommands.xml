<Type Name="EditingCommands" FullName="System.Windows.Documents.EditingCommands">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3952c6422d11625c3e926c21b1f329167434d4b1" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83948597" /></Metadata><TypeSignature Language="C#" Value="public static class EditingCommands" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EditingCommands extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.EditingCommands" />
  <TypeSignature Language="VB.NET" Value="Public Class EditingCommands" />
  <TypeSignature Language="C++ CLI" Value="public ref class EditingCommands abstract sealed" />
  <TypeSignature Language="F#" Value="type EditingCommands = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一组标准的与编辑相关的命令。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下表显示了编辑命令和关联的默认键笔势（其中包含来自 <xref:System.Windows.Input.Key> 和 <xref:System.Windows.Input.ModifierKeys> 枚举的键名）。  
  
|编辑命令|默认键笔势|  
|---------------------|-------------------------|  
|<xref:System.Windows.Documents.EditingCommands.AlignCenter%2A>|`Ctrl`+`E`|  
|<xref:System.Windows.Documents.EditingCommands.AlignJustify%2A>|`Ctrl`+`J`|  
|<xref:System.Windows.Documents.EditingCommands.AlignLeft%2A>|`Ctrl`+`L`|  
|<xref:System.Windows.Documents.EditingCommands.AlignRight%2A>|`Ctrl`+`R`|  
|<xref:System.Windows.Documents.EditingCommands.Backspace%2A>|`Backspace`|  
|<xref:System.Windows.Documents.EditingCommands.CorrectSpellingError%2A>|无默认键笔势|  
|<xref:System.Windows.Documents.EditingCommands.DecreaseFontSize%2A>|`Ctrl`+`OemOpenBrackets`|  
|<xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>|`Ctrl`+`Shift`+`T`|  
|<xref:System.Windows.Documents.EditingCommands.Delete%2A>|`Delete`|  
|<xref:System.Windows.Documents.EditingCommands.DeleteNextWord%2A>|`Ctrl`+`Delete`|  
|<xref:System.Windows.Documents.EditingCommands.DeletePreviousWord%2A>|`Ctrl`+`Backspace`|  
|<xref:System.Windows.Documents.EditingCommands.EnterLineBreak%2A>|`Shift`+`Enter`|  
|<xref:System.Windows.Documents.EditingCommands.EnterParagraphBreak%2A>|`Enter`|  
|<xref:System.Windows.Documents.EditingCommands.IgnoreSpellingError%2A>|无默认键笔势|  
|<xref:System.Windows.Documents.EditingCommands.IncreaseFontSize%2A>|`Ctrl`+`OemCloseBrackets`|  
|<xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>|`Ctrl`+`T`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByLine%2A>|`Down`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByPage%2A>|`PageDown`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByParagraph%2A>|`Ctrl`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>|`Left`|  
|<xref:System.Windows.Documents.EditingCommands.MoveLeftByWord%2A>|`Ctrl`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.MoveRightByCharacter%2A>|`Right`|  
|<xref:System.Windows.Documents.EditingCommands.MoveRightByWord%2A>|`Ctrl`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>|`Ctrl`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>|`Ctrl`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A>|`End`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToLineStart%2A>|`Home`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByLine%2A>|`Up`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByPage%2A>|`PageUp`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByParagraph%2A>|`Ctrl`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByLine%2A>|`Shift`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByPage%2A>|`Shift`+`PageDown`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByParagraph%2A>|`Ctrl`+`Shift`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>|`Shift`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>|`Ctrl`+`Shift`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.SelectRightByCharacter%2A>|`Shift`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>|`Ctrl`+`Shift`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToDocumentEnd%2A>|`Ctrl`+`Shift`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToDocumentStart%2A>|`Ctrl`+`Shift`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToLineEnd%2A>|`Shift`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToLineStart%2A>|`Shift`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByLine%2A>|`Shift`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByPage%2A>|`Shift`+`PageUp`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByParagraph%2A>|`Ctrl`+`Shift`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.TabBackward%2A>|`Shift`+`Tab`|  
|<xref:System.Windows.Documents.EditingCommands.TabForward%2A>|`Tab`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleBold%2A>|`Ctrl`+`B`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleBullets%2A>|`Ctrl`+`Shift`+`L`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleInsert%2A>|`Insert`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleItalic%2A>|`Ctrl`+`I`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleNumbering%2A>|`Ctrl`+`Shift`+`N`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleSubscript%2A>|`Ctrl`+`OemPlus`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleSuperscript%2A>|`Ctrl`+`Shift+OemPlus`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleUnderline%2A>|`Ctrl`+`U`|  
  
 脱字号移动命令和选择扩展命令共享一组通用的默认键笔势，一般差别在于添加了 <xref:System.Windows.Input.ModifierKeys.Shift> 键，以将选择的命令与插入符号移动命令区分开来。  例如，<xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A> 命令的默认键笔势为 <xref:System.Windows.Input.Key.Left>，相应的 <xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A> 命令的默认键笔势为 <xref:System.Windows.Input.ModifierKeys.Shift>+<xref:System.Windows.Input.Key.Left>。  
  
 通常，<xref:System.Windows.Documents.EditingCommands> 类提供的命令定义不使用命令参数（<xref:System.Windows.Input.ICommand.Execute%2A> 方法所需的 `parameter` 参数）。  
  
 有关命令和命令的详细信息，请参阅[输入概述](/dotnet/framework/wpf/advanced/input-overview)。  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.MediaCommands" />
    <altmember cref="T:System.Windows.Input.ApplicationCommands" />
    <altmember cref="T:System.Windows.Input.ComponentCommands" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
    <altmember cref="T:System.Windows.Input.NavigationCommands" />
  </Docs>
  <Members>
    <Member MemberName="AlignCenter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignCenter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignCenter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignCenter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignCenter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignCenter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignCenter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignCenter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.AlignCenter" /> 命令，该命令请求将当前段落或选中的段落居中。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="E" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令在 <xref:System.Windows.Documents.Paragraph> 级别操作。  如果对某个段落中的部分内容选择调用此命令（包括一个段落中插入符号的空选定内容），则将请求的效果应用于整个段落。  如果对跨多个段落的选定内容调用此命令，则会将效果应用于参与选定内容的每个段落的全部内容。  
  
 下图显示了一个居中内容的示例。  
  
 ![屏幕快照：中心的文本对齐属性值](~/add/media/flowdoc-textalign-center.png "屏幕快照：TextAlign 属性值 Center")  
  
 <xref:System.Windows.Controls.RichTextBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_AlignCenter"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="AlignCenter"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignLeft" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignJustify">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignJustify { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignJustify" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignJustify" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignJustify As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignJustify { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignJustify : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignJustify" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.AlignJustify" /> 命令，该命令请求将当前段落或选中的段落两端对齐。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="J" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令在 <xref:System.Windows.Documents.Paragraph> 级别操作。  如果对某个段落中的部分内容选择调用此命令（包括一个段落中插入符号的空选定内容），则将请求的效果应用于整个段落。  如果对跨多个段落的选定内容调用此命令，则会将效果应用于所选内容中的所有段落。  
  
 对齐内容时，将调整每个内容行内的水平间距，以使对齐的行的宽度相等或接近相等。  内容通常对齐，以在内容的侧面创建平滑边缘。  
  
 由于它通常比其余部分更短，因此，在调用此命令后，段落中的最后一行可能仍然对齐。  
  
 下图显示了对齐（左对齐）内容。  
  
 ![屏幕快照：内容是对齐](~/add/media/content-unjustified.png "屏幕快照：内容未对齐")  
  
 下图显示了两端的相同内容。  
  
 ![内容调整文本的屏幕截图](~/add/media/content-justified.png "内容对齐文本的屏幕快照")  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_AlignJustify"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="AlignJustify"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignLeft" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignLeft">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignLeft As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignLeft { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignLeft : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.AlignLeft" /> 命令，该命令请求将所选内容左对齐。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="L" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令在 <xref:System.Windows.Documents.Paragraph> 级别操作。  如果对某个段落中的部分内容选择调用此命令（包括一个段落中插入符号的空选定内容），则将请求的效果应用于整个段落。  如果对跨多个段落的选定内容调用此命令，则会将效果应用于参与选定内容的每个段落的全部内容。  
  
 下图显示了左对齐内容的示例。  
  
 ![屏幕快照：左对齐属性值](~/add/media/flowdoc-textalign-left.png "屏幕快照：左对齐属性值")  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_AlignLeft"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="AlignLeft"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignRight">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignRight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignRight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignRight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignRight As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignRight { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignRight : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.AlignRight" /> 命令，该命令请求将所选内容右对齐。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="R" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令在 <xref:System.Windows.Documents.Paragraph> 级别操作。  如果对某个段落中的部分内容选择调用此命令（包括一个段落中插入符号的空选定内容），则将请求的效果应用于整个段落。  如果对跨多个段落的选定内容调用此命令，则会将效果应用于参与选定内容的每个段落的全部内容。  
  
 下图显示了右对齐内容的示例。  
  
 ![屏幕快照： Right 的文本对齐值](~/add/media/flowdoc-textalign-right.png "屏幕快照：TextAlign 值 Right")  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_AlignRight"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="AlignRight"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="Backspace">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Backspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Backspace" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.Backspace" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Backspace As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Backspace { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Backspace : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.Backspace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.Backspace" /> 命令，该命令请求在当前位置或当前所选内容上输入一个退格。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Backspace" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对空选定内容调用时，此命令将删除插入符号前的字符或段落分隔符。 在非空选择上调用时，此命令将删除选择。  
  
 此命令将保留在调用此命令后立即插入到同一位置的内容的已删除选择内容中的任何格式。  与 <xref:System.Windows.Documents.EditingCommands.Delete%2A> 命令相反，它不会保留以前的格式设置。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_Backspace"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="Backspace"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CorrectSpellingError">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand CorrectSpellingError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand CorrectSpellingError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CorrectSpellingError As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ CorrectSpellingError { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CorrectSpellingError : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" /> 命令，该命令请求更正当前位置任何拼写错误的单词。</summary>
        <value>请求的命令。  此命令无默认键笔势。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
<a name="xamlAttributeUsage_CorrectSpellingError"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="CorrectSpellingError"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      </Docs>
    </Member>
    <Member MemberName="DecreaseFontSize">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseFontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecreaseFontSize As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DecreaseFontSize { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DecreaseFontSize : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" /> 命令，该命令请求将当前所选内容的字号缩小 1 磅。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="OemOpenBrackets" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果对插入点所在的空选定内容调用此命令，则将自动展开所选内容，将该命令应用于整个单词。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_DecreaseFontSize"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="DecreaseFontSize"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      </Docs>
    </Member>
    <Member MemberName="DecreaseIndentation">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseIndentation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseIndentation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecreaseIndentation As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DecreaseIndentation { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DecreaseIndentation : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" /> 命令，该命令请求将当前段落的缩进减少一个制表位。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="Shift" />+<see langword="T" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>本机支持此命令。  
  
> [!IMPORTANT]
>  此命令对文本元素不起任何作用，除非文本元素的 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> 属性设置为 `true`。  
  
<a name="xamlAttributeUsage_DecreaseIndentation"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="DecreaseIndentation"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Delete { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Delete" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Delete As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Delete { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.Delete" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.Delete" /> 命令，该命令请求删除当前所选内容。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Delete" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令从删除的选定内容中丢弃任何格式设置。  与 <xref:System.Windows.Documents.EditingCommands.Backspace%2A> 命令相比较，它保留在调用此命令后，立即插入到同一位置的内容的已删除选择的任何格式。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_Delete"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="Delete"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteNextWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DeleteNextWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DeleteNextWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DeleteNextWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DeleteNextWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DeleteNextWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteNextWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DeleteNextWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" /> 命令，该命令请求删除下一单词（相对于当前位置而言）。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="Delete" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果插入符号位于某个单词中，则将删除当前位置与单词末尾之间的单词的其余部分。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_DeleteNextWord"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="DeleteNextWord"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="DeletePreviousWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DeletePreviousWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DeletePreviousWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DeletePreviousWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DeletePreviousWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeletePreviousWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DeletePreviousWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" /> 命令，该命令请求删除上一单词（相对于当前位置而言）。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="Backspace" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果插入符号位于某个单词中，则将删除当前位置与单词开头之间的单词的其余部分。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_DeletePreviousWord"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="DeletePreviousWord"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="EnterLineBreak">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand EnterLineBreak { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand EnterLineBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.EnterLineBreak" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnterLineBreak As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ EnterLineBreak { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnterLineBreak : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.EnterLineBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" /> 命令，该命令请求在当前位置或当前所选内容上插入一个换行符。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Shift" />+<see langword="Enter" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于支持流内容的编辑器（如 <xref:System.Windows.Controls.RichTextBox>），此命令会导致在当前位置插入 <xref:System.Windows.Documents.LineBreak> 元素。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox> 和 <xref:System.Windows.Controls.TextBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_EnterLineBreak"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="EnterLineBreak"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      </Docs>
    </Member>
    <Member MemberName="EnterParagraphBreak">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand EnterParagraphBreak { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand EnterParagraphBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnterParagraphBreak As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ EnterParagraphBreak { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnterParagraphBreak : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" /> 命令，该命令请求在当前位置或当前所选内容上插入一个分段符。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Enter" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令等效于用户按下 ENTER 键。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox> 和 <xref:System.Windows.Controls.TextBox> （<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> 属性 `true`），本机支持此命令。  
  
> [!IMPORTANT]
>  此命令对文本元素不起任何作用，除非文本元素的 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> 属性设置为 `true`。  
  
<a name="xamlAttributeUsage_EnterParagraphBreak"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="EnterParagraphBreak"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreSpellingError">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IgnoreSpellingError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IgnoreSpellingError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IgnoreSpellingError As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IgnoreSpellingError { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreSpellingError : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" /> 命令，该命令请求忽略当前位置或当前所选内容中任何拼写错误的单词的实例。</summary>
        <value>请求的命令。  此命令无默认键笔势。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
<a name="xamlAttributeUsage_IgnoreSpellingError"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="IgnoreSpellingError"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      </Docs>
    </Member>
    <Member MemberName="IncreaseFontSize">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseFontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IncreaseFontSize As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IncreaseFontSize { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IncreaseFontSize : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" /> 命令，该命令请求将当前所选内容的字号增加 1 磅。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="OemCloseBrackets" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果对插入点所在的空选定内容调用此命令，则将展开所选内容以将该命令应用于整个单词。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_IncreaseFontSize"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="IncreaseFontSize"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      </Docs>
    </Member>
    <Member MemberName="IncreaseIndentation">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseIndentation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseIndentation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IncreaseIndentation As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IncreaseIndentation { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IncreaseIndentation : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" /> 命令，该命令请求将当前段落的缩进增加一个制表位。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="T" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>本机支持此命令。  
  
> [!IMPORTANT]
>  此命令对文本元素不起任何作用，除非文本元素的 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> 属性设置为 `true`。  
  
<a name="xamlAttributeUsage_IncreaseIndentation"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="IncreaseIndentation"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" /> 命令，该命令请求将插入符号向下移动一行。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Down" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox> 和 <xref:System.Windows.Controls.TextBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_MoveDownByLine"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="MoveDownByLine"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" /> 命令，该命令请求将插入符号向下移动一页。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="PageDown" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox> 和 <xref:System.Windows.Controls.TextBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_MoveDownByPage"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="MoveDownByPage"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" /> 命令，该命令请求将插入符号向下移动一个段落。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="Down" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令将插入符号定位到下一段落的开头。  
  
 当对 <xref:System.Windows.Controls.TextBox>调用此命令时，此命令的行为类似于 <xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox> 和 <xref:System.Windows.Controls.TextBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_MoveDownByParagraph"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="MoveDownByParagraph"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="MoveLeftByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveLeftByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveLeftByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveLeftByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveLeftByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveLeftByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" /> 命令，该命令请求将插入符号向左移动一个字符。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Left" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_MoveLeftByCharacter"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="MoveLeftByCharacter"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="MoveLeftByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveLeftByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveLeftByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveLeftByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveLeftByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveLeftByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" /> 命令，该命令请求将插入符号向左移动一个单词。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="Left" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果插入符号位于某个单词中，则此命令会将插入符号移动到该单词的开头。  否则，此命令会将插入符号移动到上一个词的开头。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_MoveLeftByWord"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="MoveLeftByWord"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      </Docs>
    </Member>
    <Member MemberName="MoveRightByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveRightByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveRightByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveRightByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveRightByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveRightByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" /> 命令，该命令请求将插入符号向右移动一个字符。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Right" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_MoveRightByCharacter"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="MoveRightByCharacter"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="MoveRightByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveRightByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveRightByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveRightByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveRightByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveRightByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveRightByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" /> 命令，该命令请求将插入符号向右移动一个单词。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="Right" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果插入符号位于某个单词内，此命令会将插入符号移动到该单词的结尾。  否则，此命令会将插入符号移动到下一个单词的开头。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_MoveRightByWord"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="MoveRightByWord"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="MoveToDocumentEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToDocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToDocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToDocumentEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToDocumentEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToDocumentEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" /> 命令，该命令请求将插入符号移至内容的末尾。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="End" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *文本容器*是构成手头内容最终边框的元素。  <xref:System.Windows.Controls.TextBlock> 和 <xref:System.Windows.Documents.FlowDocument> 是文本容器的示例。  文本容器内包含的内容统称为*文档*。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_MoveToDocumentEnd"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="MoveToDocumentEnd"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveToDocumentStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToDocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToDocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToDocumentStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToDocumentStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToDocumentStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" /> 命令，该命令请求将插入符号移至内容的开头。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="Home" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *文本容器*是构成手头内容最终边框的元素。  <xref:System.Windows.Controls.TextBlock> 和 <xref:System.Windows.Documents.FlowDocument> 是文本容器的示例。  文本容器内包含的内容统称为*文档*。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_MoveToDocumentStart"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="MoveToDocumentStart"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="MoveToLineEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToLineEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToLineEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToLineEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToLineEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToLineEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" /> 命令，该命令请求将插入符号移至当前行的末尾。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="End" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_MoveToLineEnd"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="MoveToLineEnd"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveToLineStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToLineStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToLineStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToLineStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToLineStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToLineStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToLineStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" /> 命令，该命令请求将插入符号移至当前行的开头。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Home" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_MoveToLineStart"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="MoveToLineStart"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" /> 命令，该命令请求将插入符号向上移动一行。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Up" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox> 和 <xref:System.Windows.Controls.TextBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_MoveUpByLine"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="MoveUpByLine"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" /> 命令，该命令请求将插入符号向上移动一页。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="PageUp" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox> 和 <xref:System.Windows.Controls.TextBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_MoveUpByPage"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="MoveUpByPage"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" /> 命令，该命令请求将插入符号向上移动一个段落。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="Up" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令将插入符号定位到下一段落的开头。  
  
 当对 <xref:System.Windows.Controls.TextBox>调用此命令时，此命令的行为类似于 <xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox> 和 <xref:System.Windows.Controls.TextBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_MoveUpByParagraph"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="MoveUpByParagraph"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" /> 命令，该命令请求将当前选择范围向下扩展一行。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Shift" />+<see langword="Down" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_SelectDownByLine"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="SelectDownByLine"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" /> 命令，该命令请求将当前选择范围向下扩展一页。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Shift" />+<see langword="PageDown" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_SelectDownByPage"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="SelectDownByPage"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" /> 命令，该命令请求将当前选择范围向下扩展一段。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Down" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令将所选内容扩展到下一段落的开头。  否则，此命令会将选定内容扩展到当前段的末尾。  展开的选定内容包括用于标记段落末尾的段落分隔符。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_SelectDownByParagraph"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="SelectDownByParagraph"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="SelectLeftByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectLeftByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectLeftByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectLeftByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectLeftByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectLeftByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" /> 命令，该命令请求将当前选择范围向左扩展一个字符。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Shift" />+<see langword="Left" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_SelectLeftByCharacter"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="SelectLeftByCharacter"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="SelectLeftByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectLeftByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectLeftByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectLeftByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectLeftByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectLeftByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" /> 命令，该命令请求将当前选择范围向左扩展一个单词。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Left" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果插入符号位于某个单词中，则此命令会将选定内容扩展到该单词的开头。  否则，此命令会将选定内容扩展到上一个词的开头。  
  
 扩展的选择不包含单词分隔符。  与 <xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>相反，它在展开的选定内容中包含单词分隔符。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_SelectLeftByWord"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="SelectLeftByWord"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      </Docs>
    </Member>
    <Member MemberName="SelectRightByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectRightByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectRightByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectRightByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectRightByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectRightByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" /> 命令，该命令请求将当前选择范围向右扩展一个字符。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Shift" />+<see langword="Right" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_SelectRightByCharacter"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="SelectRightByCharacter"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="SelectRightByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectRightByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectRightByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectRightByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectRightByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectRightByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectRightByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" /> 命令，该命令请求将当前选择范围向右扩展一个单词。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Right" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果插入符号位于某个单词中，则此命令会将选定内容扩展到该单词的结尾。  否则，此命令会将选定内容扩展到下一个单词的结尾。  
  
 扩展的选择包含单词分隔符。  与 <xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A> 相比，在扩展的选择中不包含单词分隔符。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_SelectRightByWord"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="SelectRightByWord"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="SelectToDocumentEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToDocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToDocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToDocumentEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToDocumentEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToDocumentEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" /> 命令，该命令请求将当前选择范围扩展到内容末尾处。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="Shift" />+<see langword="End" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *文本容器*是构成手头内容最终边框的元素。  <xref:System.Windows.Controls.TextBlock> 和 <xref:System.Windows.Documents.FlowDocument> 是文本容器的示例。  文本容器内包含的内容统称为*文档*。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_SelectToDocumentEnd"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="SelectToDocumentEnd"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="SelectToDocumentStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToDocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToDocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToDocumentStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToDocumentStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToDocumentStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" /> 命令，该命令请求将当前选择范围扩展到内容开头处。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Home" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *文本容器*是构成手头内容最终边框的元素。  <xref:System.Windows.Controls.TextBlock> 和 <xref:System.Windows.Documents.FlowDocument> 是文本容器的示例。  文本容器内包含的内容统称为*文档*。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_SelectToDocumentStart"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="SelectToDocumentStart"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="SelectToLineEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToLineEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToLineEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToLineEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToLineEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToLineEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" /> 命令，该命令请求将当前选择范围扩展到当前行的末尾。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Shift" />+<see langword="End" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_SelectToLineEnd"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="SelectToLineEnd"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="SelectToLineStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToLineStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToLineStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToLineStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToLineStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToLineStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToLineStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToLineStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" /> 命令，该命令请求将当前选择范围扩展到当前行的开头。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Shift" />+<see langword="Home" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_SelectToLineStart"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="SelectToLineStart"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" /> 命令，该命令请求将当前选择范围向上扩展一行。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Shift" />+<see langword="Up" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_SelectUpByLine"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="SelectUpByLine"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" /> 命令，该命令请求将当前选择范围向上扩展一页。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Shift" />+<see langword="PageUp" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_SelectUpByPage"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="SelectUpByPage"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" /> 命令，该命令请求将当前选择范围向上扩展一段。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Up" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果插入点位于段落的开头，则此命令将所选内容扩展到上一段落的开头。  否则，此命令会将选定内容扩展到当前段落的开头。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_SelectUpByParagraph"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="SelectUpByParagraph"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="TabBackward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand TabBackward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand TabBackward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.TabBackward" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TabBackward As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ TabBackward { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TabBackward : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.TabBackward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.TabBackward" /> 命令。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Shift" />+<see langword="Tab" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令的行为取决于当前所选内容。 如果选定内容不为空，则此命令等效于 <xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>。 如果插入符号位于表格单元格中（由 <xref:System.Windows.Documents.TableCell> 元素表示），则此命令会将插入符号移动到上一个单元格。 否则，将在当前位置插入一个制表符。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox> 和 <xref:System.Windows.Controls.TextBox> （<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> 属性 `true`），本机支持此命令。  
  
<a name="xamlAttributeUsage_TabBackward"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="TabBackward"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
```csharp  
RichTextBox rTB = new RichTextBox();  
  
EditingCommands.ToggleInsert.Execute(null, rTB);  
  
```  
  
```vb  
            Dim rTB As New RichTextBox()  
  
            EditingCommands.ToggleInsert.Execute(Nothing, rTB)  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.TabForward" />
      </Docs>
    </Member>
    <Member MemberName="TabForward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand TabForward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand TabForward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.TabForward" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TabForward As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ TabForward { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TabForward : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.TabForward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.TabForward" /> 命令。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Tab" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令的行为取决于当前所选内容。 如果选定内容为非空，或者如果选择为空，并且当前插入符号位置位于段落的开头，则此命令等效于 <xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>。 如果插入符号位于表格单元格中（由 <xref:System.Windows.Documents.TableCell> 元素表示），则此命令会将插入符号移动到下一个单元格。 如果插入符号位于表的最后一个单元格中，则此命令将使新行追加到表中，插入符号定位在新行的第一个单元格中。  否则，将在当前位置插入一个制表符。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox> 和 <xref:System.Windows.Controls.TextBox> （<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> 属性 `true`），本机支持此命令。  
  
<a name="xamlAttributeUsage_TabForward"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="TabForward"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
```csharp  
RichTextBox rTB = new RichTextBox();  
  
EditingCommands.ToggleInsert.Execute(null, rTB);  
  
```  
  
```vb  
            Dim rTB As New RichTextBox()  
  
            EditingCommands.ToggleInsert.Execute(Nothing, rTB)  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.TabBackward" />
      </Docs>
    </Member>
    <Member MemberName="ToggleBold">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleBold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleBold" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleBold" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleBold As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleBold { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleBold : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleBold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleBold" /> 命令，该命令请求对当前所选内容进行 <see cref="T:System.Windows.Documents.Bold" /> 格式切换。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="B" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果当前选择的 <xref:System.Windows.FontWeight> 在 <xref:System.Windows.FontWeights.Thin%2A> 到 <xref:System.Windows.FontWeights.SemiBold%2A>的范围内，则将 <xref:System.Windows.FontWeights.Bold%2A> 应用于当前选定内容。  否则，应用 <xref:System.Windows.FontWeights.Normal%2A>。  有关 <xref:System.Windows.FontWeight> 值的比较列表，请参阅 <xref:System.Windows.FontWeights>。  
  
 当所选内容为空且插入符号在某个单词内时，将展开所选内容以包含整个单词。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_ToggleBold"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="ToggleBold"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      </Docs>
    </Member>
    <Member MemberName="ToggleBullets">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleBullets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleBullets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleBullets" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleBullets As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleBullets { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleBullets : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleBullets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleBullets" /> 命令，该命令请求对当前所选内容进行无序列表（也称为项目符号列表）格式切换。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="Shift" />+<see langword="L" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令在 <xref:System.Windows.Documents.Paragraph> 级别操作。  如果对某个段落中的部分内容选择调用此命令（包括一个段落中插入符号的空选定内容），则将请求的效果应用于整个段落。  如果对跨多个段落的选定内容调用此命令，则会将效果应用于参与选定内容的每个段落的全部内容。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_ToggleBullets"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="ToggleBullets"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" />
      </Docs>
    </Member>
    <Member MemberName="ToggleInsert">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleInsert { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleInsert" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleInsert" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleInsert As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleInsert { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleInsert : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleInsert" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleInsert" /> 命令，该命令用于切换“插入”和“改写”键入模式。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Insert" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>、<xref:System.Windows.Controls.TextBox>和 <xref:System.Windows.Controls.PasswordBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_ToggleInsert"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="ToggleInsert"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToggleItalic">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleItalic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleItalic" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleItalic As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleItalic { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleItalic : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleItalic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" /> 命令，该命令请求对当前所选内容进行 <see cref="T:System.Windows.Documents.Italic" /> 格式切换。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="I" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果当前所选内容的 <xref:System.Windows.FontStyle> 为 <xref:System.Windows.FontStyles.Normal%2A>，则 <xref:System.Windows.FontStyles.Italic%2A> 应用于当前选定内容。  否则，应用 <xref:System.Windows.FontStyles.Normal%2A>。  
  
 当所选内容为空且插入符号在某个单词内时，将展开所选内容以包含整个单词。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_ToggleItalic"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="ToggleItalic"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleBold" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      </Docs>
    </Member>
    <Member MemberName="ToggleNumbering">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleNumbering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleNumbering" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleNumbering" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleNumbering As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleNumbering { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleNumbering : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleNumbering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" /> 命令，该命令请求对当前所选内容进行排序列表（也称为编号列表）格式切换。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="Shift" />+<see langword="N" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此命令在 <xref:System.Windows.Documents.Paragraph> 级别操作。  如果对某个段落中的部分内容选择调用此命令（包括一个段落中插入符号的空选定内容），则将请求的效果应用于整个段落。  如果对跨多个段落的选定内容调用此命令，则会将效果应用于参与选定内容的每个段落的全部内容。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_ToggleNumbering"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="ToggleNumbering"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      </Docs>
    </Member>
    <Member MemberName="ToggleSubscript">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleSubscript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleSubscript" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleSubscript" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleSubscript As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleSubscript { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleSubscript : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleSubscript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" /> 命令，该命令请求对当前所选内容进行下标格式切换。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="OemPlus" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
<a name="xamlAttributeUsage_ToggleSubscript"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="ToggleSubscript"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      </Docs>
    </Member>
    <Member MemberName="ToggleSuperscript">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleSuperscript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleSuperscript" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleSuperscript As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleSuperscript { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleSuperscript : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" /> 命令，该命令请求对当前所选内容进行上标格式切换。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="Shift" />+<see langword="OemPlus" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
<a name="xamlAttributeUsage_ToggleSuperscript"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="ToggleSuperscript"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" />
      </Docs>
    </Member>
    <Member MemberName="ToggleUnderline">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleUnderline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleUnderline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleUnderline As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleUnderline { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleUnderline : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleUnderline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" /> 命令，该命令请求对当前所选内容进行 <see cref="T:System.Windows.Documents.Underline" /> 格式切换。</summary>
        <value>请求的命令。  此命令的默认键笔势为 <see langword="Ctrl" />+<see langword="U" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当所选内容为空且插入符号在某个单词内时，将展开所选内容以包含整个单词。  
  
 在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。  
  
 <xref:System.Windows.Controls.RichTextBox>本机支持此命令。  
  
<a name="xamlAttributeUsage_ToggleUnderline"></a>   
## <a name="xaml-attribute-usage"></a>XAML 特性用法  
  
```  
<object property="ToggleUnderline"/>  
```  
  
   
  
## Examples  
 下面的示例演示如何在支持命令的对象上调用编辑命令。  
  
 在此示例中，<xref:System.Windows.Controls.RichTextBox> 用作命令目标。  请注意，<xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（从 <xref:System.Windows.FrameworkElement>继承），并且它包括对许多编辑命令的本机支持。  
  
 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 方法的第一个参数是命令参数。  大多数编辑命令忽略 command 参数;通常，应为编辑命令 `null` 此参数。  
  
 第二个参数指定要将命令路由到的对象。  此对象必须实现 <xref:System.Windows.IInputElement> 接口，并应包括指定命令的处理程序。  通常，在不处理命令的对象上调用命令时，将忽略该命令。  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleBold" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      </Docs>
    </Member>
  </Members>
</Type>
