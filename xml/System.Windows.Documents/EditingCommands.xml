<Type Name="EditingCommands" FullName="System.Windows.Documents.EditingCommands">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3952c6422d11625c3e926c21b1f329167434d4b1" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83948597" /></Metadata><TypeSignature Language="C#" Value="public static class EditingCommands" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit EditingCommands extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.EditingCommands" />
  <TypeSignature Language="VB.NET" Value="Public Class EditingCommands" />
  <TypeSignature Language="C++ CLI" Value="public ref class EditingCommands abstract sealed" />
  <TypeSignature Language="F#" Value="type EditingCommands = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="66a8b-101">提供一组标准的与编辑相关的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-101">Provides a standard set of editing related commands.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-102">下表显示了编辑命令和关联的默认键笔势（包含和枚举中的键 <xref:System.Windows.Input.Key> 名 <xref:System.Windows.Input.ModifierKeys> ）。</span><span class="sxs-lookup"><span data-stu-id="66a8b-102">The following table shows the editing commands and the associated default key gestures (with key names from the <xref:System.Windows.Input.Key> and <xref:System.Windows.Input.ModifierKeys> enumerations).</span></span>  
  
|<span data-ttu-id="66a8b-103">编辑命令</span><span class="sxs-lookup"><span data-stu-id="66a8b-103">Editing command</span></span>|<span data-ttu-id="66a8b-104">默认键笔势</span><span class="sxs-lookup"><span data-stu-id="66a8b-104">Default key gesture</span></span>|  
|---------------------|-------------------------|  
|<xref:System.Windows.Documents.EditingCommands.AlignCenter%2A>|`Ctrl`+`E`|  
|<xref:System.Windows.Documents.EditingCommands.AlignJustify%2A>|`Ctrl`+`J`|  
|<xref:System.Windows.Documents.EditingCommands.AlignLeft%2A>|`Ctrl`+`L`|  
|<xref:System.Windows.Documents.EditingCommands.AlignRight%2A>|`Ctrl`+`R`|  
|<xref:System.Windows.Documents.EditingCommands.Backspace%2A>|`Backspace`|  
|<xref:System.Windows.Documents.EditingCommands.CorrectSpellingError%2A>|<span data-ttu-id="66a8b-105">无默认键笔势</span><span class="sxs-lookup"><span data-stu-id="66a8b-105">no default key gesture</span></span>|  
|<xref:System.Windows.Documents.EditingCommands.DecreaseFontSize%2A>|`Ctrl`+`OemOpenBrackets`|  
|<xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>|`Ctrl`+`Shift`+`T`|  
|<xref:System.Windows.Documents.EditingCommands.Delete%2A>|`Delete`|  
|<xref:System.Windows.Documents.EditingCommands.DeleteNextWord%2A>|`Ctrl`+`Delete`|  
|<xref:System.Windows.Documents.EditingCommands.DeletePreviousWord%2A>|`Ctrl`+`Backspace`|  
|<xref:System.Windows.Documents.EditingCommands.EnterLineBreak%2A>|`Shift`+`Enter`|  
|<xref:System.Windows.Documents.EditingCommands.EnterParagraphBreak%2A>|`Enter`|  
|<xref:System.Windows.Documents.EditingCommands.IgnoreSpellingError%2A>|<span data-ttu-id="66a8b-106">无默认键笔势</span><span class="sxs-lookup"><span data-stu-id="66a8b-106">no default key gesture</span></span>|  
|<xref:System.Windows.Documents.EditingCommands.IncreaseFontSize%2A>|`Ctrl`+`OemCloseBrackets`|  
|<xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>|`Ctrl`+`T`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByLine%2A>|`Down`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByPage%2A>|`PageDown`|  
|<xref:System.Windows.Documents.EditingCommands.MoveDownByParagraph%2A>|`Ctrl`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>|`Left`|  
|<xref:System.Windows.Documents.EditingCommands.MoveLeftByWord%2A>|`Ctrl`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.MoveRightByCharacter%2A>|`Right`|  
|<xref:System.Windows.Documents.EditingCommands.MoveRightByWord%2A>|`Ctrl`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>|`Ctrl`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>|`Ctrl`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A>|`End`|  
|<xref:System.Windows.Documents.EditingCommands.MoveToLineStart%2A>|`Home`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByLine%2A>|`Up`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByPage%2A>|`PageUp`|  
|<xref:System.Windows.Documents.EditingCommands.MoveUpByParagraph%2A>|`Ctrl`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByLine%2A>|`Shift`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByPage%2A>|`Shift`+`PageDown`|  
|<xref:System.Windows.Documents.EditingCommands.SelectDownByParagraph%2A>|`Ctrl`+`Shift`+`Down`|  
|<xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>|`Shift`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>|`Ctrl`+`Shift`+`Left`|  
|<xref:System.Windows.Documents.EditingCommands.SelectRightByCharacter%2A>|`Shift`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>|`Ctrl`+`Shift`+`Right`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToDocumentEnd%2A>|`Ctrl`+`Shift`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToDocumentStart%2A>|`Ctrl`+`Shift`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToLineEnd%2A>|`Shift`+`End`|  
|<xref:System.Windows.Documents.EditingCommands.SelectToLineStart%2A>|`Shift`+`Home`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByLine%2A>|`Shift`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByPage%2A>|`Shift`+`PageUp`|  
|<xref:System.Windows.Documents.EditingCommands.SelectUpByParagraph%2A>|`Ctrl`+`Shift`+`Up`|  
|<xref:System.Windows.Documents.EditingCommands.TabBackward%2A>|`Shift`+`Tab`|  
|<xref:System.Windows.Documents.EditingCommands.TabForward%2A>|`Tab`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleBold%2A>|`Ctrl`+`B`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleBullets%2A>|`Ctrl`+`Shift`+`L`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleInsert%2A>|`Insert`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleItalic%2A>|`Ctrl`+`I`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleNumbering%2A>|`Ctrl`+`Shift`+`N`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleSubscript%2A>|`Ctrl`+`OemPlus`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleSuperscript%2A>|`Ctrl`+`Shift+OemPlus`|  
|<xref:System.Windows.Documents.EditingCommands.ToggleUnderline%2A>|`Ctrl`+`U`|  
  
 <span data-ttu-id="66a8b-107">脱字号移动命令和选择扩展命令共享一组通用的默认键笔势，一般差别在于添加 <xref:System.Windows.Input.ModifierKeys.Shift> 密钥来区分来自插入符号移动命令的选择命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-107">Caret movement commands and selection expanding commands share a common set of default key gestures, the general difference being the addition of the <xref:System.Windows.Input.ModifierKeys.Shift> key to differentiate selection commands from caret movement commands.</span></span>  <span data-ttu-id="66a8b-108">例如，命令的 <xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A> 默认键笔势为 <xref:System.Windows.Input.Key.Left> ，并且相应的 <xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A> 命令具有的默认键笔势 <xref:System.Windows.Input.ModifierKeys.Shift> + <xref:System.Windows.Input.Key.Left> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-108">For example, the <xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A> command has a default key gesture of <xref:System.Windows.Input.Key.Left>, and the corresponding <xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A> command has a default key gesture of <xref:System.Windows.Input.ModifierKeys.Shift>+<xref:System.Windows.Input.Key.Left>.</span></span>  
  
 <span data-ttu-id="66a8b-109">通常，类提供的命令定义 <xref:System.Windows.Documents.EditingCommands> 不使用命令参数（ `parameter` 方法所需的参数 <xref:System.Windows.Input.ICommand.Execute%2A> ）。</span><span class="sxs-lookup"><span data-stu-id="66a8b-109">In general, the command definitions provided by the <xref:System.Windows.Documents.EditingCommands> class do not make use of command parameters (the `parameter` parameter expected by the <xref:System.Windows.Input.ICommand.Execute%2A> method).</span></span>  
  
 <span data-ttu-id="66a8b-110">有关命令和命令的详细信息，请参阅[输入概述](/dotnet/framework/wpf/advanced/input-overview)。</span><span class="sxs-lookup"><span data-stu-id="66a8b-110">For more information on commands and commanding, see [Input Overview](/dotnet/framework/wpf/advanced/input-overview).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-111">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-111">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-112">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-112">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-113">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-113">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-114">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-114">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-115">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-115">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-116">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-116">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-117">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-117">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-118">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-118">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.MediaCommands" />
    <altmember cref="T:System.Windows.Input.ApplicationCommands" />
    <altmember cref="T:System.Windows.Input.ComponentCommands" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.RoutedUICommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
    <altmember cref="T:System.Windows.Input.NavigationCommands" />
  </Docs>
  <Members>
    <Member MemberName="AlignCenter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignCenter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignCenter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignCenter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignCenter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignCenter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignCenter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignCenter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-119">表示 <see cref="P:System.Windows.Documents.EditingCommands.AlignCenter" /> 命令，该命令请求将当前段落或选中的段落居中。</span><span class="sxs-lookup"><span data-stu-id="66a8b-119">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignCenter" /> command, which requests that the current paragraph or a selection of paragraphs be centered.</span></span></summary>
        <value><span data-ttu-id="66a8b-120">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-120">The requested command.</span></span>  <span data-ttu-id="66a8b-121">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="E" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-121">The default key gesture for this command is <see langword="Ctrl" />+<see langword="E" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-122">此命令在级别运行 <xref:System.Windows.Documents.Paragraph> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-122">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="66a8b-123">如果对某个段落中的部分内容选择调用此命令（包括一个段落中插入符号的空选定内容），则将请求的效果应用于整个段落。</span><span class="sxs-lookup"><span data-stu-id="66a8b-123">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="66a8b-124">如果对跨多个段落的选定内容调用此命令，则会将效果应用于参与选定内容的每个段落的全部内容。</span><span class="sxs-lookup"><span data-stu-id="66a8b-124">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="66a8b-125">下图显示了一个居中内容的示例。</span><span class="sxs-lookup"><span data-stu-id="66a8b-125">The following figure shows an example of centered content.</span></span>  
  
 <span data-ttu-id="66a8b-126">![屏幕快照：TextAlign 属性值 Center](~/add/media/flowdoc-textalign-center.png "屏幕快照：居中对齐的 TextAlign 属性值")</span><span class="sxs-lookup"><span data-stu-id="66a8b-126">![Screenshot: TextAlign property value of Center](~/add/media/flowdoc-textalign-center.png "Screenshot: TextAlign property value of Center")</span></span>  
  
 <span data-ttu-id="66a8b-127">此命令由本机支持 <xref:System.Windows.Controls.RichTextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-127">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignCenter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-128">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-128">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignCenter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-129">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-129">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-130">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-130">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-131">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-131">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-132">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-132">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-133">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-133">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-134">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-134">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-135">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-135">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-136">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-136">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignLeft" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignJustify">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignJustify { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignJustify" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignJustify" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignJustify As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignJustify { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignJustify : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignJustify" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-137">表示 <see cref="P:System.Windows.Documents.EditingCommands.AlignJustify" /> 命令，该命令请求将当前段落或选中的段落两端对齐。</span><span class="sxs-lookup"><span data-stu-id="66a8b-137">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignJustify" /> command, which requests that the current paragraph or a selection of paragraphs be justified.</span></span></summary>
        <value><span data-ttu-id="66a8b-138">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-138">The requested command.</span></span>  <span data-ttu-id="66a8b-139">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="J" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-139">The default key gesture for this command is <see langword="Ctrl" />+<see langword="J" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-140">此命令在级别运行 <xref:System.Windows.Documents.Paragraph> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-140">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="66a8b-141">如果对某个段落中的部分内容选择调用此命令（包括一个段落中插入符号的空选定内容），则将请求的效果应用于整个段落。</span><span class="sxs-lookup"><span data-stu-id="66a8b-141">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="66a8b-142">如果对跨多个段落的选定内容调用此命令，则会将效果应用于所选内容中的所有段落。</span><span class="sxs-lookup"><span data-stu-id="66a8b-142">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to all the paragraphs in the selection.</span></span>  
  
 <span data-ttu-id="66a8b-143">对齐内容时，将调整每个内容行内的水平间距，以使对齐的行的宽度相等或接近相等。</span><span class="sxs-lookup"><span data-stu-id="66a8b-143">When content is justified, the horizontal spacing within each line of content is adjusted so that the justified lines are of equal or near-equal width.</span></span>  <span data-ttu-id="66a8b-144">内容通常对齐，以在内容的侧面创建平滑边缘。</span><span class="sxs-lookup"><span data-stu-id="66a8b-144">Content is typically justified to create smooth edges on the sides of the content.</span></span>  
  
 <span data-ttu-id="66a8b-145">由于它通常比其余部分更短，因此，在调用此命令后，段落中的最后一行可能仍然对齐。</span><span class="sxs-lookup"><span data-stu-id="66a8b-145">Because it is often shorter than the rest, the last line in a paragraph may remain unjustified after this command is invoked.</span></span>  
  
 <span data-ttu-id="66a8b-146">下图显示了对齐（左对齐）内容。</span><span class="sxs-lookup"><span data-stu-id="66a8b-146">The following figure shows unjustified (left-aligned) content.</span></span>  
  
 <span data-ttu-id="66a8b-147">![屏幕快照：内容未对齐](~/add/media/content-unjustified.png "屏幕快照：内容未对齐")</span><span class="sxs-lookup"><span data-stu-id="66a8b-147">![Screenshot: Content is unjustified](~/add/media/content-unjustified.png "Screenshot: Content is unjustified")</span></span>  
  
 <span data-ttu-id="66a8b-148">下图显示了两端的相同内容。</span><span class="sxs-lookup"><span data-stu-id="66a8b-148">The following figure shows the same content after it has been justified.</span></span>  
  
 <span data-ttu-id="66a8b-149">![内容对齐文本的屏幕快照](~/add/media/content-justified.png "内容对齐文本的屏幕快照")</span><span class="sxs-lookup"><span data-stu-id="66a8b-149">![Screenshot of content justified text](~/add/media/content-justified.png "Screenshot of content justified text")</span></span>  
  
 <span data-ttu-id="66a8b-150">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-150">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-151">此命令由本机支持 <xref:System.Windows.Controls.RichTextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-151">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignJustify"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-152">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-152">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignJustify"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-153">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-153">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-154">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-154">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-155">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-155">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-156">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-156">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-157">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-157">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-158">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-158">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-159">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-159">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-160">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-160">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignLeft" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignLeft">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignLeft" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignLeft As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignLeft { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignLeft : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-161">表示 <see cref="P:System.Windows.Documents.EditingCommands.AlignLeft" /> 命令，该命令请求将所选内容左对齐。</span><span class="sxs-lookup"><span data-stu-id="66a8b-161">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignLeft" /> command, which requests that a selection of content be aligned left.</span></span></summary>
        <value><span data-ttu-id="66a8b-162">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-162">The requested command.</span></span>  <span data-ttu-id="66a8b-163">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="L" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-163">The default key gesture for this command is <see langword="Ctrl" />+<see langword="L" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-164">此命令在级别运行 <xref:System.Windows.Documents.Paragraph> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-164">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="66a8b-165">如果对某个段落中的部分内容选择调用此命令（包括一个段落中插入符号的空选定内容），则将请求的效果应用于整个段落。</span><span class="sxs-lookup"><span data-stu-id="66a8b-165">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="66a8b-166">如果对跨多个段落的选定内容调用此命令，则会将效果应用于参与选定内容的每个段落的全部内容。</span><span class="sxs-lookup"><span data-stu-id="66a8b-166">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="66a8b-167">下图显示了左对齐内容的示例。</span><span class="sxs-lookup"><span data-stu-id="66a8b-167">The following figure shows an example of left-aligned content.</span></span>  
  
 <span data-ttu-id="66a8b-168">![屏幕快照：左对齐属性值](~/add/media/flowdoc-textalign-left.png "屏幕快照：左对齐的 TextAlign 属性值")</span><span class="sxs-lookup"><span data-stu-id="66a8b-168">![Screenshot: TextAlign property value of Left](~/add/media/flowdoc-textalign-left.png "Screenshot: TextAlign property value of Left")</span></span>  
  
 <span data-ttu-id="66a8b-169">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-169">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-170">此命令由本机支持 <xref:System.Windows.Controls.RichTextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-170">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignLeft"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-171">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-171">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignLeft"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-172">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-172">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-173">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-173">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-174">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-174">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-175">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-175">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-176">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-176">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-177">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-177">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-178">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-178">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-179">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-179">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="AlignRight">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand AlignRight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand AlignRight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.AlignRight" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AlignRight As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ AlignRight { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AlignRight : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.AlignRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-180">表示 <see cref="P:System.Windows.Documents.EditingCommands.AlignRight" /> 命令，该命令请求将所选内容右对齐。</span><span class="sxs-lookup"><span data-stu-id="66a8b-180">Represents the <see cref="P:System.Windows.Documents.EditingCommands.AlignRight" /> command, which requests that a selection of content be aligned right.</span></span></summary>
        <value><span data-ttu-id="66a8b-181">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-181">The requested command.</span></span>  <span data-ttu-id="66a8b-182">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="R" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-182">The default key gesture for this command is <see langword="Ctrl" />+<see langword="R" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-183">此命令在级别运行 <xref:System.Windows.Documents.Paragraph> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-183">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="66a8b-184">如果对某个段落中的部分内容选择调用此命令（包括一个段落中插入符号的空选定内容），则将请求的效果应用于整个段落。</span><span class="sxs-lookup"><span data-stu-id="66a8b-184">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="66a8b-185">如果对跨多个段落的选定内容调用此命令，则会将效果应用于参与选定内容的每个段落的全部内容。</span><span class="sxs-lookup"><span data-stu-id="66a8b-185">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="66a8b-186">下图显示了右对齐内容的示例。</span><span class="sxs-lookup"><span data-stu-id="66a8b-186">The following figure shows an example of right-aligned content.</span></span>  
  
 <span data-ttu-id="66a8b-187">![屏幕快照：TextAlign 值 Right](~/add/media/flowdoc-textalign-right.png "屏幕快照：右对齐的 TextAlign 值")</span><span class="sxs-lookup"><span data-stu-id="66a8b-187">![Screenshot: TextAlign value of Right](~/add/media/flowdoc-textalign-right.png "Screenshot: TextAlign value of Right")</span></span>  
  
 <span data-ttu-id="66a8b-188">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-188">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-189">此命令由本机支持 <xref:System.Windows.Controls.RichTextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-189">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_AlignRight"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-190">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-190">XAML Attribute Usage</span></span>  
  
```  
<object property="AlignRight"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-191">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-191">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-192">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-192">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-193">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-193">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-194">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-194">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-195">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-195">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-196">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-196">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-197">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-197">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-198">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-198">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignCenter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignJustify" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.AlignRight" />
      </Docs>
    </Member>
    <Member MemberName="Backspace">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Backspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Backspace" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.Backspace" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Backspace As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Backspace { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Backspace : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.Backspace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-199">表示 <see cref="P:System.Windows.Documents.EditingCommands.Backspace" /> 命令，该命令请求在当前位置或当前所选内容上输入一个退格。</span><span class="sxs-lookup"><span data-stu-id="66a8b-199">Represents the <see cref="P:System.Windows.Documents.EditingCommands.Backspace" /> command, which requests that a backspace be entered at the current position or over the current selection.</span></span></summary>
        <value><span data-ttu-id="66a8b-200">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-200">The requested command.</span></span>  <span data-ttu-id="66a8b-201">此命令的默认键笔势为 <see langword="Backspace" />。</span><span class="sxs-lookup"><span data-stu-id="66a8b-201">The default key gesture for this command is <see langword="Backspace" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-202">对空选定内容调用时，此命令将删除插入符号前的字符或段落分隔符。</span><span class="sxs-lookup"><span data-stu-id="66a8b-202">When invoked on an empty selection, this command deletes the character or paragraph separator just before the caret.</span></span> <span data-ttu-id="66a8b-203">在非空选择上调用时，此命令将删除选择。</span><span class="sxs-lookup"><span data-stu-id="66a8b-203">When invoked on a non-empty selection, this command deletes the selection.</span></span>  
  
 <span data-ttu-id="66a8b-204">此命令将保留在调用此命令后立即插入到同一位置的内容的已删除选择内容中的任何格式。</span><span class="sxs-lookup"><span data-stu-id="66a8b-204">This command retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.</span></span>  <span data-ttu-id="66a8b-205">与命令相反 <xref:System.Windows.Documents.EditingCommands.Delete%2A> ，它不会保留以前的格式设置。</span><span class="sxs-lookup"><span data-stu-id="66a8b-205">Contrast with the <xref:System.Windows.Documents.EditingCommands.Delete%2A> command, which does not retain previous formatting.</span></span>  
  
 <span data-ttu-id="66a8b-206">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-206">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-207">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-207">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_Backspace"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-208">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-208">XAML Attribute Usage</span></span>  
  
```  
<object property="Backspace"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-209">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-209">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-210">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-210">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-211">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-211">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-212">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-212">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-213">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-213">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-214">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-214">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-215">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-215">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-216">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-216">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CorrectSpellingError">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand CorrectSpellingError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand CorrectSpellingError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CorrectSpellingError As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ CorrectSpellingError { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CorrectSpellingError : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-217">表示 <see cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" /> 命令，该命令请求更正当前位置任何拼写错误的单词。</span><span class="sxs-lookup"><span data-stu-id="66a8b-217">Represents the <see cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" /> command, which requests that any misspelled word at the current position be corrected.</span></span></summary>
        <value><span data-ttu-id="66a8b-218">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-218">The requested command.</span></span>  <span data-ttu-id="66a8b-219">此命令无默认键笔势。</span><span class="sxs-lookup"><span data-stu-id="66a8b-219">This command has no default key gesture.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-220">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-220">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_CorrectSpellingError"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-221">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-221">XAML Attribute Usage</span></span>  
  
```  
<object property="CorrectSpellingError"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      </Docs>
    </Member>
    <Member MemberName="DecreaseFontSize">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseFontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecreaseFontSize As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DecreaseFontSize { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DecreaseFontSize : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-222">表示 <see cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" /> 命令，该命令请求将当前所选内容的字号缩小 1 磅。</span><span class="sxs-lookup"><span data-stu-id="66a8b-222">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" /> command, which requests that the font size for the current selection be decreased by 1 point.</span></span></summary>
        <value><span data-ttu-id="66a8b-223">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-223">The requested command.</span></span>  <span data-ttu-id="66a8b-224">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="OemOpenBrackets" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-224">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemOpenBrackets" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-225">如果对插入点所在的空选定内容调用此命令，则将自动展开所选内容，将该命令应用于整个单词。</span><span class="sxs-lookup"><span data-stu-id="66a8b-225">If this command is invoked on an empty selection where the caret is within a word, the selection is automatically expanded to apply the command to the entire word.</span></span>  
  
 <span data-ttu-id="66a8b-226">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-226">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-227">此命令由本机支持 <xref:System.Windows.Controls.RichTextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-227">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_DecreaseFontSize"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-228">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-228">XAML Attribute Usage</span></span>  
  
```  
<object property="DecreaseFontSize"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-229">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-229">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-230">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-230">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-231">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-231">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-232">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-232">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-233">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-233">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-234">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-234">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-235">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-235">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-236">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-236">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      </Docs>
    </Member>
    <Member MemberName="DecreaseIndentation">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DecreaseIndentation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DecreaseIndentation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DecreaseIndentation As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DecreaseIndentation { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DecreaseIndentation : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-237">表示 <see cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" /> 命令，该命令请求将当前段落的缩进减少一个制表位。</span><span class="sxs-lookup"><span data-stu-id="66a8b-237">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" /> command, which requests that indentation for the current paragraph be decreased by one tab stop.</span></span></summary>
        <value><span data-ttu-id="66a8b-238">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-238">The requested command.</span></span>  <span data-ttu-id="66a8b-239">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="T" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-239">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="T" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-240">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-240">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-241">此命令由本机支持 <xref:System.Windows.Controls.RichTextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-241">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="66a8b-242">除非 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> 文本元素的属性设置为，否则此命令对文本元素不起作用 `true` 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-242">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_DecreaseIndentation"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-243">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-243">XAML Attribute Usage</span></span>  
  
```  
<object property="DecreaseIndentation"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-244">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-244">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-245">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-245">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-246">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-246">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-247">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-247">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-248">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-248">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-249">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-249">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-250">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-250">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-251">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-251">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand Delete { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand Delete" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.Delete" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Delete As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ Delete { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.Delete" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-252">表示 <see cref="P:System.Windows.Documents.EditingCommands.Delete" /> 命令，该命令请求删除当前所选内容。</span><span class="sxs-lookup"><span data-stu-id="66a8b-252">Represents the <see cref="P:System.Windows.Documents.EditingCommands.Delete" /> command, which requests that the current selection be deleted.</span></span></summary>
        <value><span data-ttu-id="66a8b-253">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-253">The requested command.</span></span>  <span data-ttu-id="66a8b-254">此命令的默认键笔势为 <see langword="Delete" />。</span><span class="sxs-lookup"><span data-stu-id="66a8b-254">The default key gesture for this command is <see langword="Delete" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-255">此命令从删除的选定内容中丢弃任何格式设置。</span><span class="sxs-lookup"><span data-stu-id="66a8b-255">This command discards any formatting from the deleted selection.</span></span>  <span data-ttu-id="66a8b-256">与命令相反 <xref:System.Windows.Documents.EditingCommands.Backspace%2A> ，它会在调用此命令后，保留从已删除的内容中立即插入到同一位置的内容的任何格式设置。</span><span class="sxs-lookup"><span data-stu-id="66a8b-256">Contrast with the <xref:System.Windows.Documents.EditingCommands.Backspace%2A> command, which retains any formatting from the deleted selection for content immediately inserted at the same location after this command is invoked.</span></span>  
  
 <span data-ttu-id="66a8b-257">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-257">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-258">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-258">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_Delete"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-259">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-259">XAML Attribute Usage</span></span>  
  
```  
<object property="Delete"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-260">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-260">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-261">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-261">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-262">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-262">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-263">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-263">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-264">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-264">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-265">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-265">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-266">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-266">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-267">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-267">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteNextWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DeleteNextWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DeleteNextWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DeleteNextWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DeleteNextWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DeleteNextWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteNextWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DeleteNextWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-268">表示 <see cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" /> 命令，该命令请求删除下一单词（相对于当前位置而言）。</span><span class="sxs-lookup"><span data-stu-id="66a8b-268">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" /> command, which requests that the next word (relative to a current position) be deleted.</span></span></summary>
        <value><span data-ttu-id="66a8b-269">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-269">The requested command.</span></span>  <span data-ttu-id="66a8b-270">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="Delete" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-270">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Delete" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-271">如果插入符号位于某个单词中，则将删除当前位置与单词末尾之间的单词的其余部分。</span><span class="sxs-lookup"><span data-stu-id="66a8b-271">If the caret is within a word, the remainder of the word between the current position and the end of the word is deleted.</span></span>  
  
 <span data-ttu-id="66a8b-272">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-272">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-273">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-273">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_DeleteNextWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-274">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-274">XAML Attribute Usage</span></span>  
  
```  
<object property="DeleteNextWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-275">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-275">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-276">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-276">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-277">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-277">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-278">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-278">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-279">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-279">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-280">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-280">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-281">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-281">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-282">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-282">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="DeletePreviousWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand DeletePreviousWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand DeletePreviousWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DeletePreviousWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ DeletePreviousWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeletePreviousWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.DeletePreviousWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-283">表示 <see cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" /> 命令，该命令请求删除上一单词（相对于当前位置而言）。</span><span class="sxs-lookup"><span data-stu-id="66a8b-283">Represents the <see cref="P:System.Windows.Documents.EditingCommands.DeletePreviousWord" /> command, which requests that the previous word (relative to a current position) be deleted.</span></span></summary>
        <value><span data-ttu-id="66a8b-284">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-284">The requested command.</span></span>  <span data-ttu-id="66a8b-285">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="Backspace" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-285">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Backspace" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-286">如果插入符号位于某个单词中，则将删除当前位置与单词开头之间的单词的其余部分。</span><span class="sxs-lookup"><span data-stu-id="66a8b-286">If the caret is within a word, the remainder of the word between the current position and the beginning of the word is deleted.</span></span>  
  
 <span data-ttu-id="66a8b-287">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-287">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-288">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-288">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_DeletePreviousWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-289">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-289">XAML Attribute Usage</span></span>  
  
```  
<object property="DeletePreviousWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-290">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-290">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-291">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-291">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-292">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-292">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-293">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-293">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-294">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-294">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-295">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-295">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-296">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-296">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-297">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-297">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DeleteNextWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="EnterLineBreak">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand EnterLineBreak { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand EnterLineBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.EnterLineBreak" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnterLineBreak As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ EnterLineBreak { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnterLineBreak : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.EnterLineBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-298">表示 <see cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" /> 命令，该命令请求在当前位置或当前所选内容上插入一个换行符。</span><span class="sxs-lookup"><span data-stu-id="66a8b-298">Represents the <see cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" /> command, which requests that a line break be inserted at the current position or over the current selection.</span></span></summary>
        <value><span data-ttu-id="66a8b-299">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-299">The requested command.</span></span>  <span data-ttu-id="66a8b-300">此命令的默认键笔势为 <see langword="Shift" /> + <see langword="Enter" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-300">The default key gesture for this command is <see langword="Shift" />+<see langword="Enter" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-301">对于支持流内容的编辑器（如 <xref:System.Windows.Controls.RichTextBox> ），此命令会导致 <xref:System.Windows.Documents.LineBreak> 在当前位置插入元素。</span><span class="sxs-lookup"><span data-stu-id="66a8b-301">For editors that support flow content, such as <xref:System.Windows.Controls.RichTextBox>, this command causes a <xref:System.Windows.Documents.LineBreak> element to be inserted at the current position.</span></span>  
  
 <span data-ttu-id="66a8b-302">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-302">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-303">和本身都支持此命令 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-303">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_EnterLineBreak"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-304">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-304">XAML Attribute Usage</span></span>  
  
```  
<object property="EnterLineBreak"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-305">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-305">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-306">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-306">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-307">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-307">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-308">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-308">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-309">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-309">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-310">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-310">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-311">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-311">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-312">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-312">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      </Docs>
    </Member>
    <Member MemberName="EnterParagraphBreak">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand EnterParagraphBreak { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand EnterParagraphBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property EnterParagraphBreak As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ EnterParagraphBreak { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnterParagraphBreak : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.EnterParagraphBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-313">表示 <see cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" /> 命令，该命令请求在当前位置或当前所选内容上插入一个分段符。</span><span class="sxs-lookup"><span data-stu-id="66a8b-313">Represents the <see cref="P:System.Windows.Documents.EditingCommands.EnterParagraphBreak" /> command, which requests that a paragraph break be inserted at the current position or over the current selection.</span></span></summary>
        <value><span data-ttu-id="66a8b-314">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-314">The requested command.</span></span>  <span data-ttu-id="66a8b-315">此命令的默认键笔势为 <see langword="Enter" />。</span><span class="sxs-lookup"><span data-stu-id="66a8b-315">The default key gesture for this command is <see langword="Enter" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-316">此命令等效于用户按下 ENTER 键。</span><span class="sxs-lookup"><span data-stu-id="66a8b-316">This command is equivalent to the user pressing the ENTER key.</span></span>  
  
 <span data-ttu-id="66a8b-317">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-317">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-318"><xref:System.Windows.Controls.RichTextBox>和 <xref:System.Windows.Controls.TextBox> （ <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> 属性为）本机支持此命令 `true` 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-318">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> property is `true`).</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="66a8b-319">除非 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> 文本元素的属性设置为，否则此命令对文本元素不起作用 `true` 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-319">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_EnterParagraphBreak"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-320">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-320">XAML Attribute Usage</span></span>  
  
```  
<object property="EnterParagraphBreak"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-321">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-321">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-322">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-322">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-323">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-323">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-324">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-324">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-325">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-325">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-326">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-326">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-327">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-327">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-328">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-328">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.EnterLineBreak" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreSpellingError">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IgnoreSpellingError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IgnoreSpellingError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IgnoreSpellingError As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IgnoreSpellingError { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreSpellingError : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IgnoreSpellingError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-329">表示 <see cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" /> 命令，该命令请求忽略当前位置或当前所选内容中任何拼写错误的单词的实例。</span><span class="sxs-lookup"><span data-stu-id="66a8b-329">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IgnoreSpellingError" /> command, which requests that any instances of misspelled words at the current position or in the current selection be ignored.</span></span></summary>
        <value><span data-ttu-id="66a8b-330">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-330">The requested command.</span></span>  <span data-ttu-id="66a8b-331">此命令无默认键笔势。</span><span class="sxs-lookup"><span data-stu-id="66a8b-331">This command has no default key gesture.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-332">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-332">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_IgnoreSpellingError"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-333">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-333">XAML Attribute Usage</span></span>  
  
```  
<object property="IgnoreSpellingError"/>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.CorrectSpellingError" />
      </Docs>
    </Member>
    <Member MemberName="IncreaseFontSize">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseFontSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IncreaseFontSize As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IncreaseFontSize { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IncreaseFontSize : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IncreaseFontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-334">表示 <see cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" /> 命令，该命令请求将当前所选内容的字号增加 1 磅。</span><span class="sxs-lookup"><span data-stu-id="66a8b-334">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IncreaseFontSize" /> command, which requests that the font size for the current selection be increased by 1 point.</span></span></summary>
        <value><span data-ttu-id="66a8b-335">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-335">The requested command.</span></span>  <span data-ttu-id="66a8b-336">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="OemCloseBrackets" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-336">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemCloseBrackets" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-337">如果对插入点所在的空选定内容调用此命令，则将展开所选内容以将该命令应用于整个单词。</span><span class="sxs-lookup"><span data-stu-id="66a8b-337">If this command is invoked on an empty selection where the caret is within a word, the selection is expanded to apply the command to the entire word.</span></span>  
  
 <span data-ttu-id="66a8b-338">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-338">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-339">此命令由本机支持 <xref:System.Windows.Controls.RichTextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-339">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_IncreaseFontSize"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-340">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-340">XAML Attribute Usage</span></span>  
  
```  
<object property="IncreaseFontSize"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-341">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-341">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-342">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-342">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-343">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-343">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-344">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-344">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-345">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-345">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-346">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-346">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-347">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-347">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-348">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-348">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DecreaseFontSize" />
      </Docs>
    </Member>
    <Member MemberName="IncreaseIndentation">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand IncreaseIndentation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand IncreaseIndentation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IncreaseIndentation As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ IncreaseIndentation { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IncreaseIndentation : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.IncreaseIndentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-349">表示 <see cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" /> 命令，该命令请求将当前段落的缩进增加一个制表位。</span><span class="sxs-lookup"><span data-stu-id="66a8b-349">Represents the <see cref="P:System.Windows.Documents.EditingCommands.IncreaseIndentation" /> command, which requests that indentation for the current paragraph be increased by one tab stop.</span></span></summary>
        <value><span data-ttu-id="66a8b-350">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-350">The requested command.</span></span>  <span data-ttu-id="66a8b-351">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="T" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-351">The default key gesture for this command is <see langword="Ctrl" />+<see langword="T" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-352">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-352">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-353">此命令由本机支持 <xref:System.Windows.Controls.RichTextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-353">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="66a8b-354">除非 <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> 文本元素的属性设置为，否则此命令对文本元素不起作用 `true` 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-354">This command has no effect on a text element unless the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property of the text element is set to `true`.</span></span>  
  
<a name="xamlAttributeUsage_IncreaseIndentation"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-355">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-355">XAML Attribute Usage</span></span>  
  
```  
<object property="IncreaseIndentation"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-356">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-356">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-357">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-357">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-358">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-358">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-359">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-359">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-360">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-360">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-361">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-361">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-362">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-362">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-363">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-363">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.DecreaseIndentation" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-364">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" /> 命令，该命令请求将插入符号向下移动一行。</span><span class="sxs-lookup"><span data-stu-id="66a8b-364">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" /> command, which requests that the caret move down by one line.</span></span></summary>
        <value><span data-ttu-id="66a8b-365">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-365">The requested command.</span></span>  <span data-ttu-id="66a8b-366">此命令的默认键笔势为 <see langword="Down" />。</span><span class="sxs-lookup"><span data-stu-id="66a8b-366">The default key gesture for this command is <see langword="Down" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-367">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-367">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-368">和本身都支持此命令 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-368">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-369">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-369">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-370">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-370">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-371">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-371">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-372">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-372">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-373">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-373">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-374">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-374">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-375">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-375">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-376">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-376">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-377">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-377">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-378">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" /> 命令，该命令请求将插入符号向下移动一页。</span><span class="sxs-lookup"><span data-stu-id="66a8b-378">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" /> command, which requests that the caret move down by one page.</span></span></summary>
        <value><span data-ttu-id="66a8b-379">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-379">The requested command.</span></span>  <span data-ttu-id="66a8b-380">此命令的默认键笔势为 <see langword="PageDown" />。</span><span class="sxs-lookup"><span data-stu-id="66a8b-380">The default key gesture for this command is <see langword="PageDown" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-381">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-381">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-382">和本身都支持此命令 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-382">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-383">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-383">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-384">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-384">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-385">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-385">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-386">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-386">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-387">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-387">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-388">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-388">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-389">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-389">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-390">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-390">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-391">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-391">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
      </Docs>
    </Member>
    <Member MemberName="MoveDownByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveDownByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveDownByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveDownByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveDownByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveDownByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-392">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" /> 命令，该命令请求将插入符号向下移动一个段落。</span><span class="sxs-lookup"><span data-stu-id="66a8b-392">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" /> command, which requests that the caret move down by one paragraph.</span></span></summary>
        <value><span data-ttu-id="66a8b-393">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-393">The requested command.</span></span>  <span data-ttu-id="66a8b-394">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="Down" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-394">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Down" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-395">此命令将插入符号定位到下一段落的开头。</span><span class="sxs-lookup"><span data-stu-id="66a8b-395">This command positions the caret at the beginning of the next paragraph.</span></span>  
  
 <span data-ttu-id="66a8b-396">此命令的行为类似于 <xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A> 在上调用时的行为 <xref:System.Windows.Controls.TextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-396">This command behaves like <xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A> when invoked on a <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 <span data-ttu-id="66a8b-397">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-397">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-398">和本身都支持此命令 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-398">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveDownByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-399">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-399">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveDownByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-400">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-400">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-401">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-401">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-402">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-402">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-403">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-403">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-404">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-404">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-405">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-405">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-406">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-406">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-407">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-407">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="MoveLeftByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveLeftByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveLeftByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveLeftByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveLeftByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveLeftByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-408">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" /> 命令，该命令请求将插入符号向左移动一个字符。</span><span class="sxs-lookup"><span data-stu-id="66a8b-408">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" /> command, which requests that the caret move one character left.</span></span></summary>
        <value><span data-ttu-id="66a8b-409">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-409">The requested command.</span></span>  <span data-ttu-id="66a8b-410">此命令的默认键笔势为 <see langword="Left" />。</span><span class="sxs-lookup"><span data-stu-id="66a8b-410">The default key gesture for this command is <see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-411">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-411">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-412">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-412">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveLeftByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-413">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-413">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveLeftByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-414">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-414">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-415">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-415">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-416">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-416">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-417">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-417">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-418">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-418">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-419">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-419">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-420">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-420">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-421">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-421">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="MoveLeftByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveLeftByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveLeftByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveLeftByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveLeftByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveLeftByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-422">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" /> 命令，该命令请求将插入符号向左移动一个单词。</span><span class="sxs-lookup"><span data-stu-id="66a8b-422">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" /> command, which requests that the caret move one word left.</span></span></summary>
        <value><span data-ttu-id="66a8b-423">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-423">The requested command.</span></span>  <span data-ttu-id="66a8b-424">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="Left" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-424">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-425">如果插入符号位于某个单词中，则此命令会将插入符号移动到该单词的开头。</span><span class="sxs-lookup"><span data-stu-id="66a8b-425">If the caret is within a word, this command moves the caret to the beginning of that word.</span></span>  <span data-ttu-id="66a8b-426">否则，此命令会将插入符号移动到上一个词的开头。</span><span class="sxs-lookup"><span data-stu-id="66a8b-426">Otherwise, this command moves the caret to the beginning of the previous word.</span></span>  
  
 <span data-ttu-id="66a8b-427">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-427">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-428">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-428">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveLeftByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-429">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-429">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveLeftByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-430">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-430">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-431">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-431">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-432">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-432">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-433">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-433">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-434">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-434">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-435">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-435">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-436">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-436">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-437">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-437">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      </Docs>
    </Member>
    <Member MemberName="MoveRightByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveRightByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveRightByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveRightByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveRightByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveRightByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-438">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" /> 命令，该命令请求将插入符号向右移动一个字符。</span><span class="sxs-lookup"><span data-stu-id="66a8b-438">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" /> command, which requests that the caret move one character right.</span></span></summary>
        <value><span data-ttu-id="66a8b-439">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-439">The requested command.</span></span>  <span data-ttu-id="66a8b-440">此命令的默认键笔势为 <see langword="Right" />。</span><span class="sxs-lookup"><span data-stu-id="66a8b-440">The default key gesture for this command is <see langword="Right" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-441">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-441">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-442">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-442">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveRightByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-443">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-443">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveRightByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-444">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-444">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-445">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-445">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-446">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-446">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-447">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-447">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-448">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-448">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-449">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-449">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-450">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-450">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-451">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-451">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="MoveRightByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveRightByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveRightByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveRightByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveRightByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveRightByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveRightByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-452">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" /> 命令，该命令请求将插入符号向右移动一个单词。</span><span class="sxs-lookup"><span data-stu-id="66a8b-452">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" /> command, which requests that the caret move right by one word.</span></span></summary>
        <value><span data-ttu-id="66a8b-453">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-453">The requested command.</span></span>  <span data-ttu-id="66a8b-454">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="Right" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-454">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Right" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-455">如果插入符号位于某个单词内，此命令会将插入符号移动到该单词的结尾。</span><span class="sxs-lookup"><span data-stu-id="66a8b-455">If the caret is within a word, this command moves the caret to the end of that word.</span></span>  <span data-ttu-id="66a8b-456">否则，此命令会将插入符号移动到下一个单词的开头。</span><span class="sxs-lookup"><span data-stu-id="66a8b-456">Otherwise, this command moves the caret to the beginning of the next word.</span></span>  
  
 <span data-ttu-id="66a8b-457">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-457">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-458">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-458">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveRightByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-459">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-459">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveRightByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-460">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-460">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-461">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-461">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-462">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-462">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-463">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-463">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-464">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-464">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-465">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-465">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-466">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-466">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-467">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-467">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="MoveToDocumentEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToDocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToDocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToDocumentEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToDocumentEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToDocumentEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-468">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" /> 命令，该命令请求将插入符号移至内容的末尾。</span><span class="sxs-lookup"><span data-stu-id="66a8b-468">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" /> command, which requests that the caret move to the very end of content.</span></span></summary>
        <value><span data-ttu-id="66a8b-469">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-469">The requested command.</span></span>  <span data-ttu-id="66a8b-470">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="End" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-470">The default key gesture for this command is <see langword="Ctrl" />+<see langword="End" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-471">*文本容器*是构成手头内容最终边框的元素。</span><span class="sxs-lookup"><span data-stu-id="66a8b-471">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="66a8b-472"><xref:System.Windows.Controls.TextBlock>和 <xref:System.Windows.Documents.FlowDocument> 是文本容器的示例。</span><span class="sxs-lookup"><span data-stu-id="66a8b-472"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="66a8b-473">文本容器内包含的内容统称为*文档*。</span><span class="sxs-lookup"><span data-stu-id="66a8b-473">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="66a8b-474">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-474">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-475">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-475">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToDocumentEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-476">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-476">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToDocumentEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-477">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-477">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-478">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-478">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-479">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-479">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-480">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-480">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-481">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-481">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-482">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-482">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-483">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-483">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-484">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-484">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveToDocumentStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToDocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToDocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToDocumentStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToDocumentStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToDocumentStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-485">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" /> 命令，该命令请求将插入符号移至内容的开头。</span><span class="sxs-lookup"><span data-stu-id="66a8b-485">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" /> command, which requests that the caret move to the very beginning of content.</span></span></summary>
        <value><span data-ttu-id="66a8b-486">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-486">The requested command.</span></span>  <span data-ttu-id="66a8b-487">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="Home" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-487">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Home" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-488">*文本容器*是构成手头内容最终边框的元素。</span><span class="sxs-lookup"><span data-stu-id="66a8b-488">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="66a8b-489"><xref:System.Windows.Controls.TextBlock>和 <xref:System.Windows.Documents.FlowDocument> 是文本容器的示例。</span><span class="sxs-lookup"><span data-stu-id="66a8b-489"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="66a8b-490">文本容器内包含的内容统称为*文档*。</span><span class="sxs-lookup"><span data-stu-id="66a8b-490">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="66a8b-491">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-491">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-492">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-492">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToDocumentStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-493">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-493">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToDocumentStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-494">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-494">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-495">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-495">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-496">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-496">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-497">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-497">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-498">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-498">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-499">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-499">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-500">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-500">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-501">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-501">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="MoveToLineEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToLineEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToLineEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToLineEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToLineEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToLineEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-502">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" /> 命令，该命令请求将插入符号移至当前行的末尾。</span><span class="sxs-lookup"><span data-stu-id="66a8b-502">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" /> command, which requests that the caret move to the end of the current line.</span></span></summary>
        <value><span data-ttu-id="66a8b-503">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-503">The requested command.</span></span>  <span data-ttu-id="66a8b-504">此命令的默认键笔势为 <see langword="End" />。</span><span class="sxs-lookup"><span data-stu-id="66a8b-504">The default key gesture for this command is <see langword="End" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-505">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-505">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-506">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-506">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToLineEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-507">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-507">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToLineEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-508">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-508">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-509">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-509">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-510">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-510">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-511">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-511">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-512">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-512">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-513">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-513">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-514">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-514">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-515">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-515">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveToLineStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveToLineStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveToLineStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveToLineStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveToLineStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveToLineStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveToLineStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-516">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" /> 命令，该命令请求将插入符号移至当前行的开头。</span><span class="sxs-lookup"><span data-stu-id="66a8b-516">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" /> command, which requests that the caret move to the beginning of the current line.</span></span></summary>
        <value><span data-ttu-id="66a8b-517">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-517">The requested command.</span></span>  <span data-ttu-id="66a8b-518">此命令的默认键笔势为 <see langword="Home" />。</span><span class="sxs-lookup"><span data-stu-id="66a8b-518">The default key gesture for this command is <see langword="Home" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-519">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-519">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-520">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-520">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveToLineStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-521">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-521">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveToLineStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-522">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-522">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-523">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-523">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-524">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-524">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-525">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-525">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-526">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-526">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-527">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-527">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-528">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-528">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-529">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-529">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-530">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" /> 命令，该命令请求将插入符号向上移动一行。</span><span class="sxs-lookup"><span data-stu-id="66a8b-530">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" /> command, which requests that the caret move up by one line.</span></span></summary>
        <value><span data-ttu-id="66a8b-531">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-531">The requested command.</span></span>  <span data-ttu-id="66a8b-532">此命令的默认键笔势为 <see langword="Up" />。</span><span class="sxs-lookup"><span data-stu-id="66a8b-532">The default key gesture for this command is <see langword="Up" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-533">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-533">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-534">和本身都支持此命令 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-534">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-535">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-535">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-536">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-536">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-537">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-537">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-538">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-538">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-539">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-539">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-540">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-540">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-541">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-541">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-542">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-542">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-543">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-543">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-544">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" /> 命令，该命令请求将插入符号向上移动一页。</span><span class="sxs-lookup"><span data-stu-id="66a8b-544">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" /> command, which requests that the caret move up by one page.</span></span></summary>
        <value><span data-ttu-id="66a8b-545">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-545">The requested command.</span></span>  <span data-ttu-id="66a8b-546">此命令的默认键笔势为 <see langword="PageUp" />。</span><span class="sxs-lookup"><span data-stu-id="66a8b-546">The default key gesture for this command is <see langword="PageUp" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-547">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-547">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-548">和本身都支持此命令 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-548">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-549">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-549">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-550">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-550">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-551">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-551">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-552">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-552">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-553">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-553">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-554">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-554">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-555">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-555">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-556">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-556">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-557">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-557">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
      </Docs>
    </Member>
    <Member MemberName="MoveUpByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand MoveUpByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand MoveUpByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MoveUpByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ MoveUpByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MoveUpByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-558">表示 <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" /> 命令，该命令请求将插入符号向上移动一个段落。</span><span class="sxs-lookup"><span data-stu-id="66a8b-558">Represents the <see cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" /> command, which requests that the caret move up by one paragraph.</span></span></summary>
        <value><span data-ttu-id="66a8b-559">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-559">The requested command.</span></span>  <span data-ttu-id="66a8b-560">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="Up" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-560">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Up" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-561">此命令将插入符号定位到下一段落的开头。</span><span class="sxs-lookup"><span data-stu-id="66a8b-561">This command positions the caret at the beginning of the next paragraph.</span></span>  
  
 <span data-ttu-id="66a8b-562">此命令的行为类似于 <xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A> 在上调用时的行为 <xref:System.Windows.Controls.TextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-562">This command behaves like <xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A> when invoked on a <xref:System.Windows.Controls.TextBox>.</span></span>  
  
 <span data-ttu-id="66a8b-563">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-563">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-564">和本身都支持此命令 <xref:System.Windows.Controls.RichTextBox> <xref:System.Windows.Controls.TextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-564">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox>.</span></span>  
  
<a name="xamlAttributeUsage_MoveUpByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-565">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-565">XAML Attribute Usage</span></span>  
  
```  
<object property="MoveUpByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-566">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-566">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-567">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-567">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-568">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-568">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-569">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-569">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-570">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-570">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-571">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-571">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-572">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-572">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-573">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-573">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-574">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" /> 命令，该命令请求将当前选择范围向下扩展一行。</span><span class="sxs-lookup"><span data-stu-id="66a8b-574">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" /> command, which requests that the current selection be expanded down by one line.</span></span></summary>
        <value><span data-ttu-id="66a8b-575">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-575">The requested command.</span></span>  <span data-ttu-id="66a8b-576">此命令的默认键笔势为 <see langword="Shift" /> + <see langword="Down" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-576">The default key gesture for this command is <see langword="Shift" />+<see langword="Down" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-577">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-577">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-578">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-578">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-579">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-579">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-580">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-580">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-581">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-581">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-582">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-582">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-583">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-583">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-584">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-584">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-585">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-585">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-586">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-586">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-587">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-587">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByLine" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-588">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" /> 命令，该命令请求将当前选择范围向下扩展一页。</span><span class="sxs-lookup"><span data-stu-id="66a8b-588">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" /> command, which requests that the current selection be expanded down by one page.</span></span></summary>
        <value><span data-ttu-id="66a8b-589">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-589">The requested command.</span></span>  <span data-ttu-id="66a8b-590">此命令的默认键笔势为 <see langword="Shift" /> + <see langword="PageDown" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-590">The default key gesture for this command is <see langword="Shift" />+<see langword="PageDown" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-591">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-591">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-592">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-592">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-593">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-593">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-594">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-594">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-595">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-595">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-596">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-596">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-597">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-597">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-598">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-598">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-599">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-599">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-600">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-600">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-601">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-601">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByPage" />
      </Docs>
    </Member>
    <Member MemberName="SelectDownByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectDownByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectDownByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectDownByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectDownByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectDownByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-602">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" /> 命令，该命令请求将当前选择范围向下扩展一段。</span><span class="sxs-lookup"><span data-stu-id="66a8b-602">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" /> command, which requests that the current selection be expanded down by one paragraph.</span></span></summary>
        <value><span data-ttu-id="66a8b-603">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-603">The requested command.</span></span>  <span data-ttu-id="66a8b-604">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="Down" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-604">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Down" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-605">此命令将所选内容扩展到下一段落的开头。</span><span class="sxs-lookup"><span data-stu-id="66a8b-605">This command expands the selection to the beginning of the next paragraph.</span></span>  <span data-ttu-id="66a8b-606">否则，此命令会将选定内容扩展到当前段的末尾。</span><span class="sxs-lookup"><span data-stu-id="66a8b-606">Otherwise, this command expands the selection to the end of the current paragraph.</span></span>  <span data-ttu-id="66a8b-607">展开的选定内容包括用于标记段落末尾的段落分隔符。</span><span class="sxs-lookup"><span data-stu-id="66a8b-607">The expanded selection includes the paragraph break that marks the end of the paragraph.</span></span>  
  
 <span data-ttu-id="66a8b-608">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-608">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-609">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-609">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectDownByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-610">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-610">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectDownByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-611">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-611">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-612">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-612">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-613">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-613">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-614">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-614">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-615">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-615">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-616">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-616">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-617">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-617">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-618">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-618">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveDownByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="SelectLeftByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectLeftByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectLeftByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectLeftByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectLeftByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectLeftByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-619">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" /> 命令，该命令请求将当前选择范围向左扩展一个字符。</span><span class="sxs-lookup"><span data-stu-id="66a8b-619">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" /> command, which requests that the current selection be expanded left by one character.</span></span></summary>
        <value><span data-ttu-id="66a8b-620">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-620">The requested command.</span></span>  <span data-ttu-id="66a8b-621">此命令的默认键笔势为 <see langword="Shift" /> + <see langword="Left" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-621">The default key gesture for this command is <see langword="Shift" />+<see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-622">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-622">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-623">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-623">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectLeftByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-624">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-624">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectLeftByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-625">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-625">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-626">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-626">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-627">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-627">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-628">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-628">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-629">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-629">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-630">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-630">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-631">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-631">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-632">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-632">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="SelectLeftByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectLeftByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectLeftByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectLeftByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectLeftByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectLeftByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectLeftByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-633">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" /> 命令，该命令请求将当前选择范围向左扩展一个单词。</span><span class="sxs-lookup"><span data-stu-id="66a8b-633">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" /> command, which requests that the current selection be expanded left by one word.</span></span></summary>
        <value><span data-ttu-id="66a8b-634">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-634">The requested command.</span></span>  <span data-ttu-id="66a8b-635">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="Left" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-635">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-636">如果插入符号位于某个单词中，则此命令会将选定内容扩展到该单词的开头。</span><span class="sxs-lookup"><span data-stu-id="66a8b-636">If the caret is within a word, this command expands the selection to the beginning of that word.</span></span>  <span data-ttu-id="66a8b-637">否则，此命令会将选定内容扩展到上一个词的开头。</span><span class="sxs-lookup"><span data-stu-id="66a8b-637">Otherwise, this command expands the selection to the beginning of the previous word.</span></span>  
  
 <span data-ttu-id="66a8b-638">扩展的选择不包含单词分隔符。</span><span class="sxs-lookup"><span data-stu-id="66a8b-638">The expanded selection does not include the word delimiter.</span></span>  <span data-ttu-id="66a8b-639">与比较 <xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A> ，它在展开的选定内容中包含单词分隔符。</span><span class="sxs-lookup"><span data-stu-id="66a8b-639">Contrast with <xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>, which does include the word delimiter in the expanded selection.</span></span>  
  
 <span data-ttu-id="66a8b-640">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-640">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-641">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-641">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectLeftByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-642">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-642">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectLeftByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-643">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-643">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-644">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-644">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-645">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-645">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-646">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-646">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-647">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-647">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-648">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-648">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-649">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-649">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-650">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-650">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveLeftByWord" />
      </Docs>
    </Member>
    <Member MemberName="SelectRightByCharacter">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectRightByCharacter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectRightByCharacter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectRightByCharacter As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectRightByCharacter { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectRightByCharacter : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-651">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" /> 命令，该命令请求将当前选择范围向右扩展一个字符。</span><span class="sxs-lookup"><span data-stu-id="66a8b-651">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" /> command, which requests that the current selection be expanded right by one character.</span></span></summary>
        <value><span data-ttu-id="66a8b-652">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-652">The requested command.</span></span>  <span data-ttu-id="66a8b-653">此命令的默认键笔势为 <see langword="Shift" /> + <see langword="Right" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-653">The default key gesture for this command is <see langword="Shift" />+<see langword="Right" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-654">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-654">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-655">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-655">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectRightByCharacter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-656">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-656">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectRightByCharacter"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-657">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-657">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-658">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-658">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-659">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-659">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-660">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-660">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-661">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-661">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-662">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-662">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-663">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-663">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-664">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-664">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByCharacter" />
      </Docs>
    </Member>
    <Member MemberName="SelectRightByWord">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectRightByWord { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectRightByWord" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectRightByWord" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectRightByWord As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectRightByWord { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectRightByWord : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectRightByWord" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-665">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" /> 命令，该命令请求将当前选择范围向右扩展一个单词。</span><span class="sxs-lookup"><span data-stu-id="66a8b-665">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectRightByWord" /> command, which requests that the current selection be expanded right by one word.</span></span></summary>
        <value><span data-ttu-id="66a8b-666">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-666">The requested command.</span></span>  <span data-ttu-id="66a8b-667">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="Right" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-667">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Right" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-668">如果插入符号位于某个单词中，则此命令会将选定内容扩展到该单词的结尾。</span><span class="sxs-lookup"><span data-stu-id="66a8b-668">If the caret is within a word, this command expands the selection to the end of that word.</span></span>  <span data-ttu-id="66a8b-669">否则，此命令会将选定内容扩展到下一个单词的结尾。</span><span class="sxs-lookup"><span data-stu-id="66a8b-669">Otherwise, this command expands the selection to the end of the next word.</span></span>  
  
 <span data-ttu-id="66a8b-670">扩展的选择包含单词分隔符。</span><span class="sxs-lookup"><span data-stu-id="66a8b-670">The expanded selection includes the word delimiter.</span></span>  <span data-ttu-id="66a8b-671">相比之下， <xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A> 它在展开的选定内容中不包含单词分隔符。</span><span class="sxs-lookup"><span data-stu-id="66a8b-671">Contrast with <xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A> which does not include the word delimiter in the expanded selection.</span></span>  
  
 <span data-ttu-id="66a8b-672">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-672">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-673">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-673">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectRightByWord"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-674">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-674">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectRightByWord"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-675">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-675">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-676">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-676">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-677">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-677">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-678">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-678">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-679">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-679">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-680">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-680">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-681">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-681">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-682">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-682">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectLeftByWord" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectRightByCharacter" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveRightByWord" />
      </Docs>
    </Member>
    <Member MemberName="SelectToDocumentEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToDocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToDocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToDocumentEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToDocumentEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToDocumentEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-683">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" /> 命令，该命令请求将当前选择范围扩展到内容末尾处。</span><span class="sxs-lookup"><span data-stu-id="66a8b-683">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" /> command, which requests that the current selection be expanded to the very end of content.</span></span></summary>
        <value><span data-ttu-id="66a8b-684">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-684">The requested command.</span></span>  <span data-ttu-id="66a8b-685">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="End" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-685">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="End" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-686">*文本容器*是构成手头内容最终边框的元素。</span><span class="sxs-lookup"><span data-stu-id="66a8b-686">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="66a8b-687"><xref:System.Windows.Controls.TextBlock>和 <xref:System.Windows.Documents.FlowDocument> 是文本容器的示例。</span><span class="sxs-lookup"><span data-stu-id="66a8b-687"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="66a8b-688">文本容器内包含的内容统称为*文档*。</span><span class="sxs-lookup"><span data-stu-id="66a8b-688">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="66a8b-689">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-689">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-690">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-690">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToDocumentEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-691">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-691">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToDocumentEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-692">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-692">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-693">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-693">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-694">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-694">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-695">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-695">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-696">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-696">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-697">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-697">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-698">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-698">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-699">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-699">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="SelectToDocumentStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToDocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToDocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToDocumentStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToDocumentStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToDocumentStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToDocumentStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-700">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" /> 命令，该命令请求将当前选择范围扩展到内容开头处。</span><span class="sxs-lookup"><span data-stu-id="66a8b-700">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentStart" /> command, which requests that the current selection be expanded to the very beginning of content.</span></span></summary>
        <value><span data-ttu-id="66a8b-701">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-701">The requested command.</span></span>  <span data-ttu-id="66a8b-702">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="Home" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-702">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Home" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-703">*文本容器*是构成手头内容最终边框的元素。</span><span class="sxs-lookup"><span data-stu-id="66a8b-703">A *text container* is the element that forms the ultimate border for the content at hand.</span></span>  <span data-ttu-id="66a8b-704"><xref:System.Windows.Controls.TextBlock>和 <xref:System.Windows.Documents.FlowDocument> 是文本容器的示例。</span><span class="sxs-lookup"><span data-stu-id="66a8b-704"><xref:System.Windows.Controls.TextBlock> and <xref:System.Windows.Documents.FlowDocument> are examples of text containers.</span></span>  <span data-ttu-id="66a8b-705">文本容器内包含的内容统称为*文档*。</span><span class="sxs-lookup"><span data-stu-id="66a8b-705">The content collectively contained within a text container is referred to as a *document*.</span></span>  
  
 <span data-ttu-id="66a8b-706">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-706">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-707">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-707">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToDocumentStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-708">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-708">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToDocumentStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-709">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-709">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-710">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-710">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-711">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-711">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-712">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-712">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-713">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-713">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-714">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-714">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-715">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-715">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-716">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-716">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToDocumentEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToDocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="SelectToLineEnd">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToLineEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToLineEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToLineEnd As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToLineEnd { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToLineEnd : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToLineEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-717">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" /> 命令，该命令请求将当前选择范围扩展到当前行的末尾。</span><span class="sxs-lookup"><span data-stu-id="66a8b-717">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" /> command, which requests that the current selection be expanded to the end of the current line.</span></span></summary>
        <value><span data-ttu-id="66a8b-718">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-718">The requested command.</span></span>  <span data-ttu-id="66a8b-719">此命令的默认键笔势为 <see langword="Shift" /> + <see langword="End" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-719">The default key gesture for this command is <see langword="Shift" />+<see langword="End" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-720">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-720">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-721">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-721">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToLineEnd"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-722">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-722">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToLineEnd"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-723">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-723">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-724">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-724">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-725">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-725">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-726">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-726">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-727">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-727">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-728">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-728">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-729">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-729">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-730">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-730">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineEnd" />
      </Docs>
    </Member>
    <Member MemberName="SelectToLineStart">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectToLineStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectToLineStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectToLineStart" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectToLineStart As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectToLineStart { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectToLineStart : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectToLineStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-731">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" /> 命令，该命令请求将当前选择范围扩展到当前行的开头。</span><span class="sxs-lookup"><span data-stu-id="66a8b-731">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectToLineStart" /> command, which requests that the current selection be expanded to the beginning of the current line.</span></span></summary>
        <value><span data-ttu-id="66a8b-732">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-732">The requested command.</span></span>  <span data-ttu-id="66a8b-733">此命令的默认键笔势为 <see langword="Shift" /> + <see langword="Home" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-733">The default key gesture for this command is <see langword="Shift" />+<see langword="Home" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-734">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-734">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-735">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-735">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectToLineStart"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-736">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-736">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectToLineStart"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-737">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-737">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-738">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-738">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-739">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-739">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-740">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-740">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-741">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-741">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-742">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-742">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-743">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-743">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-744">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-744">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectToLineEnd" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveToLineStart" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByLine">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByLine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByLine As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByLine { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByLine : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-745">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" /> 命令，该命令请求将当前选择范围向上扩展一行。</span><span class="sxs-lookup"><span data-stu-id="66a8b-745">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" /> command, which requests that the current selection be expanded up by one line.</span></span></summary>
        <value><span data-ttu-id="66a8b-746">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-746">The requested command.</span></span>  <span data-ttu-id="66a8b-747">此命令的默认键笔势为 <see langword="Shift" /> + <see langword="Up" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-747">The default key gesture for this command is <see langword="Shift" />+<see langword="Up" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-748">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-748">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-749">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-749">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByLine"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-750">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-750">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByLine"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-751">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-751">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-752">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-752">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-753">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-753">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-754">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-754">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-755">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-755">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-756">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-756">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-757">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-757">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-758">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-758">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByLine" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByPage">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByPage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByPage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByPage As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByPage { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByPage : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-759">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" /> 命令，该命令请求将当前选择范围向上扩展一页。</span><span class="sxs-lookup"><span data-stu-id="66a8b-759">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" /> command, which requests that the current selection be expanded  up by one page.</span></span></summary>
        <value><span data-ttu-id="66a8b-760">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-760">The requested command.</span></span>  <span data-ttu-id="66a8b-761">此命令的默认键笔势为 <see langword="Shift" /> + <see langword="PageUp" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-761">The default key gesture for this command is <see langword="Shift" />+<see langword="PageUp" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-762">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-762">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-763">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-763">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByPage"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-764">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-764">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByPage"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-765">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-765">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-766">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-766">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-767">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-767">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-768">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-768">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-769">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-769">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-770">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-770">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-771">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-771">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-772">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-772">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByPage" />
      </Docs>
    </Member>
    <Member MemberName="SelectUpByParagraph">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand SelectUpByParagraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand SelectUpByParagraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property SelectUpByParagraph As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ SelectUpByParagraph { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectUpByParagraph : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.SelectUpByParagraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-773">表示 <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" /> 命令，该命令请求将当前选择范围向上扩展一段。</span><span class="sxs-lookup"><span data-stu-id="66a8b-773">Represents the <see cref="P:System.Windows.Documents.EditingCommands.SelectUpByParagraph" /> command, which requests that the current selection be expanded up by one paragraph.</span></span></summary>
        <value><span data-ttu-id="66a8b-774">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-774">The requested command.</span></span>  <span data-ttu-id="66a8b-775">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="Up" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-775">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="Up" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-776">如果插入点位于段落的开头，则此命令将所选内容扩展到上一段落的开头。</span><span class="sxs-lookup"><span data-stu-id="66a8b-776">If the caret is at the beginning of a paragraph, this command expands the selection to the beginning of the previous paragraph.</span></span>  <span data-ttu-id="66a8b-777">否则，此命令会将选定内容扩展到当前段落的开头。</span><span class="sxs-lookup"><span data-stu-id="66a8b-777">Otherwise, this command expands the selection to the beginning of the current paragraph.</span></span>  
  
 <span data-ttu-id="66a8b-778">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-778">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-779">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-779">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_SelectUpByParagraph"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-780">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-780">XAML Attribute Usage</span></span>  
  
```  
<object property="SelectUpByParagraph"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-781">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-781">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-782">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-782">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-783">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-783">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-784">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-784">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-785">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-785">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-786">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-786">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-787">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-787">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-788">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-788">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectDownByParagraph" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByLine" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.SelectUpByPage" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.MoveUpByParagraph" />
      </Docs>
    </Member>
    <Member MemberName="TabBackward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand TabBackward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand TabBackward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.TabBackward" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TabBackward As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ TabBackward { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TabBackward : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.TabBackward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-789">表示 <see cref="P:System.Windows.Documents.EditingCommands.TabBackward" /> 命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-789">Represents the <see cref="P:System.Windows.Documents.EditingCommands.TabBackward" /> command.</span></span></summary>
        <value><span data-ttu-id="66a8b-790">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-790">The requested command.</span></span>  <span data-ttu-id="66a8b-791">此命令的默认键笔势为 <see langword="Shift" /> + <see langword="Tab" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-791">The default key gesture for this command is <see langword="Shift" />+<see langword="Tab" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-792">此命令的行为取决于当前所选内容。</span><span class="sxs-lookup"><span data-stu-id="66a8b-792">The behavior for this command depends on the current selection.</span></span> <span data-ttu-id="66a8b-793">如果选定内容不为空，则此命令等效于 <xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-793">If the selection is non-empty, this command is equivalent to <xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>.</span></span> <span data-ttu-id="66a8b-794">如果插入符号位于表格单元格中（由 <xref:System.Windows.Documents.TableCell> 元素表示），则此命令会将插入符号移动到上一个单元格。</span><span class="sxs-lookup"><span data-stu-id="66a8b-794">If the caret is in a table cell (represented by the <xref:System.Windows.Documents.TableCell> element), this command moves the caret to the previous cell.</span></span> <span data-ttu-id="66a8b-795">否则，将在当前位置插入一个制表符。</span><span class="sxs-lookup"><span data-stu-id="66a8b-795">Otherwise, a tab character is inserted in current position.</span></span>  
  
 <span data-ttu-id="66a8b-796">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-796">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-797"><xref:System.Windows.Controls.RichTextBox>和 <xref:System.Windows.Controls.TextBox> （ <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> 属性为）本机支持此命令 `true` 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-797">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property is `true`).</span></span>  
  
<a name="xamlAttributeUsage_TabBackward"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-798">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-798">XAML Attribute Usage</span></span>  
  
```  
<object property="TabBackward"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-799">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-799">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-800">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-800">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-801">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-801">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-802">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-802">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-803">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-803">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-804">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-804">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-805">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-805">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-806">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-806">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
```csharp  
RichTextBox rTB = new RichTextBox();  
  
EditingCommands.ToggleInsert.Execute(null, rTB);  
  
```  
  
```vb  
            Dim rTB As New RichTextBox()  
  
            EditingCommands.ToggleInsert.Execute(Nothing, rTB)  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.TabForward" />
      </Docs>
    </Member>
    <Member MemberName="TabForward">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand TabForward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand TabForward" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.TabForward" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TabForward As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ TabForward { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TabForward : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.TabForward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-807">表示 <see cref="P:System.Windows.Documents.EditingCommands.TabForward" /> 命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-807">Represents the <see cref="P:System.Windows.Documents.EditingCommands.TabForward" /> command.</span></span></summary>
        <value><span data-ttu-id="66a8b-808">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-808">The requested command.</span></span>  <span data-ttu-id="66a8b-809">此命令的默认键笔势为 <see langword="Tab" />。</span><span class="sxs-lookup"><span data-stu-id="66a8b-809">The default key gesture for this command is <see langword="Tab" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-810">此命令的行为取决于当前所选内容。</span><span class="sxs-lookup"><span data-stu-id="66a8b-810">The behavior for this command depends on the current selection.</span></span> <span data-ttu-id="66a8b-811">如果选定内容为非空，或者如果选择为空，且当前的插入符号位置位于段落的开头，则此命令等效于 <xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-811">If the selection is non-empty, or if the selection is empty and the current caret position is at the beginning of a  paragraph, this command is equivalent to <xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>.</span></span> <span data-ttu-id="66a8b-812">如果插入符号位于表格单元格中（由 <xref:System.Windows.Documents.TableCell> 元素表示），则此命令会将插入符号移动到下一个单元格。</span><span class="sxs-lookup"><span data-stu-id="66a8b-812">If the caret is in a table cell (represented by the <xref:System.Windows.Documents.TableCell> element), this command moves the caret to the next cell.</span></span> <span data-ttu-id="66a8b-813">如果插入符号位于表的最后一个单元格中，则此命令将使新行追加到表中，插入符号定位在新行的第一个单元格中。</span><span class="sxs-lookup"><span data-stu-id="66a8b-813">If the caret is in the last cell of a table, this command causes a new row to be appended to the table, with the caret positioned in the first cell of the new row.</span></span>  <span data-ttu-id="66a8b-814">否则，将在当前位置插入一个制表符。</span><span class="sxs-lookup"><span data-stu-id="66a8b-814">Otherwise, a tab character is inserted in current position.</span></span>  
  
 <span data-ttu-id="66a8b-815">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-815">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-816"><xref:System.Windows.Controls.RichTextBox>和 <xref:System.Windows.Controls.TextBox> （ <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> 属性为）本机支持此命令 `true` 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-816">This command is natively supported by <xref:System.Windows.Controls.RichTextBox> and <xref:System.Windows.Controls.TextBox> (when the <xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> property is `true`).</span></span>  
  
<a name="xamlAttributeUsage_TabForward"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-817">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-817">XAML Attribute Usage</span></span>  
  
```  
<object property="TabForward"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-818">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-818">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-819">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-819">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-820">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-820">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-821">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-821">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-822">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-822">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-823">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-823">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-824">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-824">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-825">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-825">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
```csharp  
RichTextBox rTB = new RichTextBox();  
  
EditingCommands.ToggleInsert.Execute(null, rTB);  
  
```  
  
```vb  
            Dim rTB As New RichTextBox()  
  
            EditingCommands.ToggleInsert.Execute(Nothing, rTB)  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.TabBackward" />
      </Docs>
    </Member>
    <Member MemberName="ToggleBold">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleBold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleBold" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleBold" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleBold As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleBold { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleBold : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleBold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-826">表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleBold" /> 命令，该命令请求对当前所选内容进行 <see cref="T:System.Windows.Documents.Bold" /> 格式切换。</span><span class="sxs-lookup"><span data-stu-id="66a8b-826">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleBold" /> command, which requests that <see cref="T:System.Windows.Documents.Bold" /> formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="66a8b-827">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-827">The requested command.</span></span>  <span data-ttu-id="66a8b-828">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="B" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-828">The default key gesture for this command is <see langword="Ctrl" />+<see langword="B" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-829">如果 <xref:System.Windows.FontWeight> 当前所选内容的范围介于 <xref:System.Windows.FontWeights.Thin%2A> 到之间 <xref:System.Windows.FontWeights.SemiBold%2A> ， <xref:System.Windows.FontWeights.Bold%2A> 则应用于当前选定内容。</span><span class="sxs-lookup"><span data-stu-id="66a8b-829">If the <xref:System.Windows.FontWeight> for the current selection is in the range from <xref:System.Windows.FontWeights.Thin%2A> to <xref:System.Windows.FontWeights.SemiBold%2A>, <xref:System.Windows.FontWeights.Bold%2A> is applied to the current selection.</span></span>  <span data-ttu-id="66a8b-830">否则， <xref:System.Windows.FontWeights.Normal%2A> 将应用。</span><span class="sxs-lookup"><span data-stu-id="66a8b-830">Otherwise, <xref:System.Windows.FontWeights.Normal%2A> is applied.</span></span>  <span data-ttu-id="66a8b-831">有关值的比较列表 <xref:System.Windows.FontWeight> ，请参阅 <xref:System.Windows.FontWeights> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-831">For a comparative list of <xref:System.Windows.FontWeight> values, see <xref:System.Windows.FontWeights>.</span></span>  
  
 <span data-ttu-id="66a8b-832">当所选内容为空且插入符号在某个单词内时，将展开所选内容以包含整个单词。</span><span class="sxs-lookup"><span data-stu-id="66a8b-832">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="66a8b-833">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-833">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-834">此命令由本机支持 <xref:System.Windows.Controls.RichTextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-834">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleBold"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-835">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-835">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleBold"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-836">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-836">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-837">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-837">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-838">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-838">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-839">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-839">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-840">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-840">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-841">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-841">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-842">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-842">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-843">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-843">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      </Docs>
    </Member>
    <Member MemberName="ToggleBullets">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleBullets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleBullets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleBullets" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleBullets As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleBullets { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleBullets : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleBullets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-844">表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleBullets" /> 命令，该命令请求对当前所选内容进行无序列表（也称为项目符号列表）格式切换。</span><span class="sxs-lookup"><span data-stu-id="66a8b-844">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleBullets" /> command, which requests that unordered list (also referred to as bulleted list) formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="66a8b-845">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-845">The requested command.</span></span>  <span data-ttu-id="66a8b-846">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="L" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-846">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="L" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-847">此命令在级别运行 <xref:System.Windows.Documents.Paragraph> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-847">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="66a8b-848">如果对某个段落中的部分内容选择调用此命令（包括一个段落中插入符号的空选定内容），则将请求的效果应用于整个段落。</span><span class="sxs-lookup"><span data-stu-id="66a8b-848">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="66a8b-849">如果对跨多个段落的选定内容调用此命令，则会将效果应用于参与选定内容的每个段落的全部内容。</span><span class="sxs-lookup"><span data-stu-id="66a8b-849">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="66a8b-850">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-850">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-851">此命令由本机支持 <xref:System.Windows.Controls.RichTextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-851">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleBullets"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-852">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-852">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleBullets"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-853">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-853">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-854">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-854">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-855">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-855">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-856">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-856">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-857">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-857">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-858">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-858">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-859">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-859">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-860">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-860">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" />
      </Docs>
    </Member>
    <Member MemberName="ToggleInsert">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleInsert { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleInsert" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleInsert" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleInsert As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleInsert { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleInsert : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleInsert" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-861">表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleInsert" /> 命令，该命令用于切换“插入”和“改写”键入模式。</span><span class="sxs-lookup"><span data-stu-id="66a8b-861">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleInsert" /> command, which toggles the typing mode between Insert and Overtype.</span></span></summary>
        <value><span data-ttu-id="66a8b-862">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-862">The requested command.</span></span>  <span data-ttu-id="66a8b-863">此命令的默认键笔势为 <see langword="Insert" />。</span><span class="sxs-lookup"><span data-stu-id="66a8b-863">The default key gesture for this command is <see langword="Insert" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-864">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-864">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-865">、和本身都支持此 <xref:System.Windows.Controls.RichTextBox> 命令 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.PasswordBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-865">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>, <xref:System.Windows.Controls.TextBox>, and <xref:System.Windows.Controls.PasswordBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleInsert"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-866">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-866">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleInsert"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-867">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-867">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-868">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-868">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-869">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-869">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-870">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-870">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-871">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-871">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-872">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-872">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-873">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-873">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-874">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-874">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToggleItalic">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleItalic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleItalic" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleItalic As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleItalic { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleItalic : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleItalic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-875">表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" /> 命令，该命令请求对当前所选内容进行 <see cref="T:System.Windows.Documents.Italic" /> 格式切换。</span><span class="sxs-lookup"><span data-stu-id="66a8b-875">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" /> command, which requests that <see cref="T:System.Windows.Documents.Italic" /> formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="66a8b-876">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-876">The requested command.</span></span>  <span data-ttu-id="66a8b-877">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="I" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-877">The default key gesture for this command is <see langword="Ctrl" />+<see langword="I" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-878">如果 <xref:System.Windows.FontStyle> 当前所选内容的为 <xref:System.Windows.FontStyles.Normal%2A> ， <xref:System.Windows.FontStyles.Italic%2A> 则应用于当前选定内容。</span><span class="sxs-lookup"><span data-stu-id="66a8b-878">If the <xref:System.Windows.FontStyle> for the current selection is <xref:System.Windows.FontStyles.Normal%2A>, <xref:System.Windows.FontStyles.Italic%2A> is applied to the current selection.</span></span>  <span data-ttu-id="66a8b-879">否则， <xref:System.Windows.FontStyles.Normal%2A> 将应用。</span><span class="sxs-lookup"><span data-stu-id="66a8b-879">Otherwise, <xref:System.Windows.FontStyles.Normal%2A> is applied.</span></span>  
  
 <span data-ttu-id="66a8b-880">当所选内容为空且插入符号在某个单词内时，将展开所选内容以包含整个单词。</span><span class="sxs-lookup"><span data-stu-id="66a8b-880">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="66a8b-881">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-881">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-882">此命令由本机支持 <xref:System.Windows.Controls.RichTextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-882">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleItalic"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-883">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-883">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleItalic"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-884">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-884">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-885">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-885">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-886">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-886">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-887">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-887">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-888">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-888">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-889">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-889">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-890">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-890">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-891">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-891">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleBold" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      </Docs>
    </Member>
    <Member MemberName="ToggleNumbering">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleNumbering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleNumbering" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleNumbering" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleNumbering As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleNumbering { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleNumbering : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleNumbering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-892">表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" /> 命令，该命令请求对当前所选内容进行排序列表（也称为编号列表）格式切换。</span><span class="sxs-lookup"><span data-stu-id="66a8b-892">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleNumbering" /> command, which requests that ordered list (also referred to as numbered list) formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="66a8b-893">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-893">The requested command.</span></span>  <span data-ttu-id="66a8b-894">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="N" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-894">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="N" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-895">此命令在级别运行 <xref:System.Windows.Documents.Paragraph> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-895">This command operates at the <xref:System.Windows.Documents.Paragraph> level.</span></span>  <span data-ttu-id="66a8b-896">如果对某个段落中的部分内容选择调用此命令（包括一个段落中插入符号的空选定内容），则将请求的效果应用于整个段落。</span><span class="sxs-lookup"><span data-stu-id="66a8b-896">If this command is invoked on a partial selection of content within a paragraph (including an empty selection where the caret is within a paragraph), the requested effect is applied to the entire paragraph.</span></span>  <span data-ttu-id="66a8b-897">如果对跨多个段落的选定内容调用此命令，则会将效果应用于参与选定内容的每个段落的全部内容。</span><span class="sxs-lookup"><span data-stu-id="66a8b-897">If this command is invoked on a selection that spans multiple paragraphs, the effect is applied to the entire contents of each paragraph that participates in the selection.</span></span>  
  
 <span data-ttu-id="66a8b-898">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-898">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-899">此命令由本机支持 <xref:System.Windows.Controls.RichTextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-899">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleNumbering"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-900">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-900">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleNumbering"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-901">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-901">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-902">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-902">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-903">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-903">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-904">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-904">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-905">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-905">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-906">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-906">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-907">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-907">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-908">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-908">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      </Docs>
    </Member>
    <Member MemberName="ToggleSubscript">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleSubscript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleSubscript" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleSubscript" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleSubscript As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleSubscript { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleSubscript : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleSubscript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-909">表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" /> 命令，该命令请求对当前所选内容进行下标格式切换。</span><span class="sxs-lookup"><span data-stu-id="66a8b-909">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" /> command, which requests that subscript formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="66a8b-910">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-910">The requested command.</span></span>  <span data-ttu-id="66a8b-911">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="OemPlus" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-911">The default key gesture for this command is <see langword="Ctrl" />+<see langword="OemPlus" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-912">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-912">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_ToggleSubscript"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-913">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-913">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleSubscript"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-914">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-914">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-915">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-915">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-916">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-916">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-917">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-917">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-918">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-918">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-919">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-919">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-920">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-920">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-921">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-921">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      </Docs>
    </Member>
    <Member MemberName="ToggleSuperscript">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleSuperscript { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleSuperscript" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleSuperscript As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleSuperscript { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleSuperscript : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleSuperscript" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-922">表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" /> 命令，该命令请求对当前所选内容进行上标格式切换。</span><span class="sxs-lookup"><span data-stu-id="66a8b-922">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleSuperscript" /> command, which requests that superscript formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="66a8b-923">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-923">The requested command.</span></span>  <span data-ttu-id="66a8b-924">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="Shift" /> + <see langword="OemPlus" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-924">The default key gesture for this command is <see langword="Ctrl" />+<see langword="Shift" />+<see langword="OemPlus" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-925">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-925">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
<a name="xamlAttributeUsage_ToggleSuperscript"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-926">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-926">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleSuperscript"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-927">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-927">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-928">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-928">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-929">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-929">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-930">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-930">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-931">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-931">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-932">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-932">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-933">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-933">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-934">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-934">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleSubscript" />
      </Docs>
    </Member>
    <Member MemberName="ToggleUnderline">
      <MemberSignature Language="C#" Value="public static System.Windows.Input.RoutedUICommand ToggleUnderline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Input.RoutedUICommand ToggleUnderline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.EditingCommands.ToggleUnderline" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ToggleUnderline As RoutedUICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Input::RoutedUICommand ^ ToggleUnderline { System::Windows::Input::RoutedUICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ToggleUnderline : System.Windows.Input.RoutedUICommand" Usage="System.Windows.Documents.EditingCommands.ToggleUnderline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RoutedUICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="66a8b-935">表示 <see cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" /> 命令，该命令请求对当前所选内容进行 <see cref="T:System.Windows.Documents.Underline" /> 格式切换。</span><span class="sxs-lookup"><span data-stu-id="66a8b-935">Represents the <see cref="P:System.Windows.Documents.EditingCommands.ToggleUnderline" /> command, which requests that <see cref="T:System.Windows.Documents.Underline" /> formatting be toggled on the current selection.</span></span></summary>
        <value><span data-ttu-id="66a8b-936">请求的命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-936">The requested command.</span></span>  <span data-ttu-id="66a8b-937">此命令的默认键笔势为 <see langword="Ctrl" /> + <see langword="U" /> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-937">The default key gesture for this command is <see langword="Ctrl" />+<see langword="U" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="66a8b-938">当所选内容为空且插入符号在某个单词内时，将展开所选内容以包含整个单词。</span><span class="sxs-lookup"><span data-stu-id="66a8b-938">When the selection is empty and the caret is within a word, the selection is expanded to include the entire word.</span></span>  
  
 <span data-ttu-id="66a8b-939">在任何给定的对象上，都不一定是响应此命令的实际实现;在许多情况下，响应命令的实现就是应用程序编写者的责任。</span><span class="sxs-lookup"><span data-stu-id="66a8b-939">There is not necessarily an actual implementation that responds to this command on any given object; in many cases the implementation that responds to a command is the responsibility of the application writer.</span></span>  
  
 <span data-ttu-id="66a8b-940">此命令由本机支持 <xref:System.Windows.Controls.RichTextBox> 。</span><span class="sxs-lookup"><span data-stu-id="66a8b-940">This command is natively supported by <xref:System.Windows.Controls.RichTextBox>.</span></span>  
  
<a name="xamlAttributeUsage_ToggleUnderline"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="66a8b-941">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="66a8b-941">XAML Attribute Usage</span></span>  
  
```  
<object property="ToggleUnderline"/>  
```  
  
   
  
## Examples  
 <span data-ttu-id="66a8b-942">下面的示例演示如何在支持命令的对象上调用编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-942">The following example demonstrates how to invoke an editing command on an object that supports the command.</span></span>  
  
 <span data-ttu-id="66a8b-943">在此示例中，用作 <xref:System.Windows.Controls.RichTextBox> 命令目标。</span><span class="sxs-lookup"><span data-stu-id="66a8b-943">For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.</span></span>  <span data-ttu-id="66a8b-944">请注意， <xref:System.Windows.Controls.RichTextBox> 实现 <xref:System.Windows.IInputElement> 接口（继承自 <xref:System.Windows.FrameworkElement> ），并且它包括对许多编辑命令的本机支持。</span><span class="sxs-lookup"><span data-stu-id="66a8b-944">Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-945">方法的第一个参数 <xref:System.Windows.Input.RoutedCommand.Execute%2A> 是命令参数。</span><span class="sxs-lookup"><span data-stu-id="66a8b-945">The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.</span></span>  <span data-ttu-id="66a8b-946">大多数编辑命令忽略 command 参数;通常，此参数应该 `null` 用于编辑命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-946">Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.</span></span>  
  
 <span data-ttu-id="66a8b-947">第二个参数指定要将命令路由到的对象。</span><span class="sxs-lookup"><span data-stu-id="66a8b-947">The second argument specifies the object to which the command will be routed.</span></span>  <span data-ttu-id="66a8b-948">此对象必须实现 <xref:System.Windows.IInputElement> 接口，并且应包括指定命令的处理程序。</span><span class="sxs-lookup"><span data-stu-id="66a8b-948">This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.</span></span>  <span data-ttu-id="66a8b-949">通常，在不处理命令的对象上调用命令时，将忽略该命令。</span><span class="sxs-lookup"><span data-stu-id="66a8b-949">Generally, a command is ignored when invoked on an object that does not handle the command.</span></span>  
  
 [!code-csharp[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/csharp/VS_Snippets_Wpf/RichTextBoxSnippets/CSharp/Window1.xaml.cs#_editingcommands_invoke)]
 [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/samples/snippets/visualbasic/VS_Snippets_Wpf/RichTextBoxSnippets/visualbasic/window1.xaml.vb#_editingcommands_invoke)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleBold" />
        <altmember cref="P:System.Windows.Documents.EditingCommands.ToggleItalic" />
      </Docs>
    </Member>
  </Members>
</Type>
