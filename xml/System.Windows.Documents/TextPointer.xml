<Type Name="TextPointer" FullName="System.Windows.Documents.TextPointer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bdd4b36d2c90eebad620705886b1c30d54b07ca4" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89870696" /></Metadata><TypeSignature Language="C#" Value="public class TextPointer : System.Windows.Documents.ContentPosition" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextPointer extends System.Windows.Documents.ContentPosition" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.TextPointer" />
  <TypeSignature Language="VB.NET" Value="Public Class TextPointer&#xA;Inherits ContentPosition" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextPointer : System::Windows::Documents::ContentPosition" />
  <TypeSignature Language="F#" Value="type TextPointer = class&#xA;    inherit ContentPosition" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Documents.ContentPosition</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示 <see cref="T:System.Windows.Documents.FlowDocument" /> 或 <see cref="T:System.Windows.Controls.TextBlock" /> 中的一个位置。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.TextPointer>类引入了以下术语：  
  
-   位置-本质上， <xref:System.Windows.Documents.TextPointer> 始终指向内容中的 *位置* 。  此类位置要么位于内容中的字符之间，要么位于为内容定义结构的流内容元素标记之间。  
  
-   当前位置-因为 <xref:System.Windows.Documents.TextPointer> 始终指示位置，并且可以通过执行的许多操作 <xref:System.Windows.Documents.TextPointer> 都是相对于当前指向的位置的 <xref:System.Windows.Documents.TextPointer> ，因此，只需引用由指示的位置 <xref:System.Windows.Documents.TextPointer> 作为 *当前位置*即可。  
  
-   插入位置- *插入* 位置是一个可以在其中添加新内容的位置，而不会破坏关联内容的任何语义规则。  在实际操作中，插入位置在内容中的任何位置都可以定位插入点。  不是插入位置的有效位置的一个示例 <xref:System.Windows.Documents.TextPointer> 是 (两个相邻标记之间的位置 <xref:System.Windows.Documents.Paragraph> ，即上一段的结束标记与下一段的开始标记之间的位置) 。  
  
-   符号-出于 <xref:System.Windows.Documents.TextPointer> 涉及符号的操作的目的，以下任一操作都被视为 *符号*：  
  
    -   元素的开始或结束标记 <xref:System.Windows.Documents.TextElement> 。  
  
    -   <xref:System.Windows.UIElement>包含在或中的 <xref:System.Windows.Documents.InlineUIContainer> 元素 <xref:System.Windows.Documents.BlockUIContainer> 。  请注意，此类 <xref:System.Windows.UIElement> 始终只计为一个符号; 包含的任何其他内容或元素 <xref:System.Windows.UIElement> 不计为符号。  
  
    -   [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]文本元素内的每个16位字符 <xref:System.Windows.Documents.Run> 。  
  
-   文本容器- *文本容器* 是窗体上的流内容最终边框的元素;指示的位置 <xref:System.Windows.Documents.TextPointer> 始终位于文本容器中。  当前，文本容器必须是 <xref:System.Windows.Documents.FlowDocument> 或 <xref:System.Windows.Controls.TextBlock> 。  一般而言， <xref:System.Windows.Documents.TextPointer> 不支持不同文本容器中的实例之间的操作。  
  
-   文档-文本容器中的内容称为 *文档*，如 <xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A> 方法和 <xref:System.Windows.Documents.TextPointer.DocumentStart%2A> 和属性中所示 <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> 。  
  
 <xref:System.Windows.Documents.TextPointer>类旨在帮助遍历和操作流内容元素所表示的内容 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] ; 通常情况下，此类元素派生自 <xref:System.Windows.Documents.TextElement> 。  <xref:System.Windows.Documents.TextPointer>有助于执行以下操作：  
  
-   对当前位置与第二个指定位置进行序号比较。  请参见 <xref:System.Windows.Documents.TextPointer.CompareTo%2A> 方法。  
  
-   确定指定方向上与当前位置相邻的内容的类型。  请参见 <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> 方法和 <xref:System.Windows.Documents.TextPointerContext> 枚举。  
  
-   获取 <xref:System.Windows.Documents.TextElement> 作用域或与当前位置相邻的。  请参阅 <xref:System.Windows.Documents.Paragraph> 和 <xref:System.Windows.Documents.TextPointer.GetAdjacentElement%2A> 方法。  
  
-   获取作用域为当前文档的文本容器。  请参阅 <xref:System.Windows.Documents.TextPointer.Parent%2A> 属性。  
  
-   在当前位置之前或之后获取指定数目的字符。  请参见 <xref:System.Windows.Documents.TextPointer.GetTextInRun%2A> 方法。  
  
-   在当前位置插入字符串。  请参见 <xref:System.Windows.Documents.TextPointer.InsertTextInRun%2A> 方法。  
  
-   在内容中查找行边界。  请参见 <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A> 方法和 <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> 属性。  
  
-   将 <xref:System.Windows.Documents.TextPointer> 位置和符号偏移量转换为内容。  请参阅 <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> 和 <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> 方法。  
  
-   通过转换 <xref:System.Windows.Documents.TextPointer> 位置和表示相对坐标来执行可视命中测试 <xref:System.Windows.Point> 。  
  
-   查找附近的插入位置，或检查当前位置是否为插入位置。  请参阅 <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> 和 <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> 方法和 <xref:System.Windows.Documents.TextPointer.IsAtInsertionPosition%2A> 属性。  
  
 对象的位置和 <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> 指示 <xref:System.Windows.Documents.TextPointer> 是不可变的。  在编辑或修改内容时，由指示的位置 <xref:System.Windows.Documents.TextPointer> 不会相对于周围文本更改; 而是根据内容的开头调整该位置的偏移量，以反映内容中的新相对位置。  例如， <xref:System.Windows.Documents.TextPointer> 指示给定段落开头位置的位置将继续指向该段的开头，即使在段落之前或之后插入或删除内容也是如此。  
  
 <xref:System.Windows.Documents.TextPointer>类不提供任何公共构造函数。  的实例 <xref:System.Windows.Documents.TextPointer> 是使用其他对象的属性或方法创建的， (包括 <xref:System.Windows.Documents.TextPointer>) 的其他对象。 下面的列表提供了一些方法和属性的示例，这些示例创建并返回 <xref:System.Windows.Documents.TextPointer> 。  此列表并不详尽：  
  
-   从 <xref:System.Windows.Documents.TextRange> ： <xref:System.Windows.Documents.TextRange.Start%2A> 和 <xref:System.Windows.Documents.TextRange.End%2A> 。  
  
-   从 <xref:System.Windows.Documents.TextElement> ：  <xref:System.Windows.Documents.TextElement.ContentStart%2A> 、 <xref:System.Windows.Documents.TextElement.ContentEnd%2A> 、 <xref:System.Windows.Documents.TextElement.ElementStart%2A> 和 <xref:System.Windows.Documents.TextElement.ElementEnd%2A> 。  
  
-   从 <xref:System.Windows.Controls.TextBlock> (文本容器) ： <xref:System.Windows.Controls.TextBlock.ContentStart%2A> 、 <xref:System.Windows.Controls.TextBlock.ContentEnd%2A> 和 <xref:System.Windows.Controls.TextBlock.GetPositionFromPoint%2A> 。  
  
-   从 <xref:System.Windows.Documents.FlowDocument> (文本容器) ： <xref:System.Windows.Documents.FlowDocument.ContentStart%2A> 和 <xref:System.Windows.Documents.FlowDocument.ContentEnd%2A>  
  
-   从现有的 <xref:System.Windows.Documents.TextPointer> ： <xref:System.Windows.Documents.TextPointer.DocumentStart%2A> 、 <xref:System.Windows.Documents.TextPointer.DocumentEnd%2A> 、 <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> 和 <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> 。  
  
   
  
## Examples  
 下面的示例演示如何使用在 <xref:System.Windows.Documents.TextPointer> <xref:System.Windows.Documents.Run> 指定的文本容器中的第一个元素内部查找位置。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_TextPointer1](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_textpointer1)]
 [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer1](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_textpointer1)]  
  
 下面的示例使用设施实现了一个简单的查找算法 <xref:System.Windows.Documents.TextPointer> 。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_TextPointer2](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_textpointer2)]
 [!code-vb[TextPointer_Snippets#_TextPointer_TextPointer2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_textpointer2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Documents.TextRange" />
    <altmember cref="T:System.Windows.Documents.TextPointerContext" />
    <altmember cref="T:System.Windows.Documents.TextElement" />
  </Docs>
  <Members>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (System.Windows.Documents.TextPointer position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CompareTo(class System.Windows.Documents.TextPointer position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.CompareTo(System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="VB.NET" Value="Public Function CompareTo (position As TextPointer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CompareTo(System::Windows::Documents::TextPointer ^ position);" />
      <MemberSignature Language="F#" Value="member this.CompareTo : System.Windows.Documents.TextPointer -&gt; int" Usage="textPointer.CompareTo position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="position">一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指定要与当前位置进行比较的位置。</param>
        <summary>对当前 <see cref="T:System.Windows.Documents.TextPointer" /> 和第二个指定 <see cref="T:System.Windows.Documents.TextPointer" /> 所表示位置的顺序进行比较。</summary>
        <returns>如果当前 <see cref="T:System.Windows.Documents.TextPointer" /> 位于 <paramref name="position" /> 之前，则为 -1；如果位置相同，则为 0；如果当前 <see cref="T:System.Windows.Documents.TextPointer" /> 位于 <paramref name="position" /> 之后，则为 +1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果值为-1，则指示当前指定的位置 <xref:System.Windows.Documents.TextPointer> 位于指定的位置之前 `position` 。  值0表示指示的位置相等。  如果值为正值 + 1，则指示当前指定的位置在 <xref:System.Windows.Documents.TextPointer> 指定的位置之后 `position` 。  
  
   
  
## Examples  
 下面的示例演示了此方法的用法。  在此示例中， <xref:System.Windows.Documents.TextPointer.CompareTo%2A> 方法与方法结合使用， <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> 以测试指定的是否为 <xref:System.Windows.Documents.TextElement> 空。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getinsertionposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getinsertionposition)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="position" /> 指定位于与当前位置相关联的文本容器之外的某个位置。</exception>
        <altmember cref="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)" />
      </Docs>
    </Member>
    <Member MemberName="DeleteTextInRun">
      <MemberSignature Language="C#" Value="public int DeleteTextInRun (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 DeleteTextInRun(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function DeleteTextInRun (count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int DeleteTextInRun(int count);" />
      <MemberSignature Language="F#" Value="member this.DeleteTextInRun : int -&gt; int" Usage="textPointer.DeleteTextInRun count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">从当前位置开始要删除的字符数。 指定正值将删除当前位置之后的字符；指定负值将删除当前位置之前的字符。</param>
        <summary>从当前 <see cref="T:System.Windows.Documents.TextPointer" /> 指示的位置开始删除指定数目的字符。</summary>
        <returns>实际删除的字符数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定一个正值，以删除当前位置后面的字符 (如) 中所示 <xref:System.Windows.Documents.LogicalDirection.Forward?displayProperty=nameWithType> ; 指定一个负值以删除当前位置前面的字符 (与) 中的相同 <xref:System.Windows.Documents.LogicalDirection.Backward?displayProperty=nameWithType> 。  
  
 实际删除的字符数可能小于指定的数目 `count` 。  如果指定的字符数超过了要删除的字符数，则会发生这种情况 `count` 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在不允许出现文本的位置处调用此方法。</exception>
        <altmember cref="Overload:System.Windows.Documents.TextPointer.GetTextInRun" />
        <altmember cref="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DocumentEnd">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer DocumentEnd { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.TextPointer DocumentEnd" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.DocumentEnd" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DocumentEnd As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::TextPointer ^ DocumentEnd { System::Windows::Documents::TextPointer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DocumentEnd : System.Windows.Documents.TextPointer" Usage="System.Windows.Documents.TextPointer.DocumentEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向文本容器中与当前位置相关联的内容的结束位置。</summary>
        <value>一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向文本容器中与当前位置相关联的内容的结束位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的的 <xref:System.Windows.Documents.TextPointer.Parent%2A> <xref:System.Windows.Documents.TextPointer> 始终是文本容器 (<xref:System.Windows.Controls.TextBlock> 或 <xref:System.Windows.Documents.FlowDocument>) ，而不是 <xref:System.Windows.Documents.TextElement> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.DocumentStart" />
      </Docs>
    </Member>
    <Member MemberName="DocumentStart">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer DocumentStart { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.TextPointer DocumentStart" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.DocumentStart" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DocumentStart As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::TextPointer ^ DocumentStart { System::Windows::Documents::TextPointer ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DocumentStart : System.Windows.Documents.TextPointer" Usage="System.Windows.Documents.TextPointer.DocumentStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向文本容器中与当前位置相关联的内容的开始位置。</summary>
        <value>一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向文本容器中与当前位置相关联的内容的开始位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性返回的位置作为基线位置，从该位置开始使用相对于其他位置的相对偏移量。  <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A>和 <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> 方法提供了一种在位置和位置偏移量之间进行转换的方法。  
  
 返回的的 <xref:System.Windows.Documents.TextPointer.Parent%2A> <xref:System.Windows.Documents.TextPointer> 始终是文本容器 (<xref:System.Windows.Controls.TextBlock> 或 <xref:System.Windows.Documents.FlowDocument>) ，而不是 <xref:System.Windows.Documents.TextElement> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.DocumentEnd" />
      </Docs>
    </Member>
    <Member MemberName="GetAdjacentElement">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject GetAdjacentElement (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.DependencyObject GetAdjacentElement(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetAdjacentElement(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjacentElement (direction As LogicalDirection) As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::DependencyObject ^ GetAdjacentElement(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetAdjacentElement : System.Windows.Documents.LogicalDirection -&gt; System.Windows.DependencyObject" Usage="textPointer.GetAdjacentElement direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定搜索相邻元素时的逻辑方向。</param>
        <summary>返回在指定逻辑方向上的边界正好位于当前 <see cref="T:System.Windows.Documents.TextPointer" /> 处的元素（如果有）。</summary>
        <returns>指定 <paramref name="direction" /> 上的相邻元素；或者，如果不存在任何相邻元素，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的元素通常为 <xref:System.Windows.Documents.TextElement> 。  <xref:System.Windows.UIElement>当 <xref:System.Windows.Documents.TextPointer> 指示 <xref:System.Windows.Documents.BlockUIContainer> 元素或元素内的位置时，可以返回 <xref:System.Windows.Documents.InlineUIContainer> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetCharacterRect">
      <MemberSignature Language="C#" Value="public System.Windows.Rect GetCharacterRect (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Rect GetCharacterRect(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetCharacterRect(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCharacterRect (direction As LogicalDirection) As Rect" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Rect GetCharacterRect(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetCharacterRect : System.Windows.Documents.LogicalDirection -&gt; System.Windows.Rect" Usage="textPointer.GetCharacterRect direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Rect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定查找内容边框时的逻辑方向。</param>
        <summary>返回在指定逻辑方向上的边界正好位于当前 <see cref="T:System.Windows.Rect" /> 处的内容的边框 (<see cref="T:System.Windows.Documents.TextPointer" />)。</summary>
        <returns>在指定方向上的边界正好位于当前 <see cref="T:System.Windows.Documents.TextPointer" /> 处的内容的边框；或者，如果当前没有可用的有效布局信息，则为 <see cref="P:System.Windows.Rect.Empty" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Documents.TextElement> 出于此方法的目的，边缘不被视为内容。  如果 <xref:System.Windows.Documents.TextPointer> 定位在 <xref:System.Windows.Documents.TextElement> 边缘之前，则返回值为指定方向下的下一个非内容的边界框 <xref:System.Windows.Documents.TextElement> 。  如果指定方向没有任何内容，则返回零宽度，其 <xref:System.Windows.Rect> 高度与前面任何内容的高度匹配。  
  
 此方法执行的操作取决于有效的布局。  必要时，此方法会在继续操作之前尝试自动重新生成有效的布局。  重新生成布局可能比较昂贵。  使用 <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A> 属性来检查有效的布局，然后执行可以重新生成布局的操作。  请参阅[布局](/dotnet/framework/wpf/advanced/layout)以了解详细信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.HasValidLayout" />
      </Docs>
    </Member>
    <Member MemberName="GetInsertionPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetInsertionPosition (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetInsertionPosition(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInsertionPosition (direction As LogicalDirection) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetInsertionPosition(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetInsertionPosition : System.Windows.Documents.LogicalDirection -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetInsertionPosition direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定搜索最近插入位置时的逻辑方向。</param>
        <summary>返回一个指向指定逻辑方向上的最近插入位置的 <see cref="T:System.Windows.Documents.TextPointer" />。</summary>
        <returns>一个指向指定方向上的最近插入位置的 <see cref="T:System.Windows.Documents.TextPointer" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 插入位置是可以在不破坏关联内容的任何语义规则的情况下添加新内容的位置。  在实际操作中，插入位置在内容中的任何位置都可以定位插入点。  不是插入位置的有效位置的一个示例 <xref:System.Windows.Documents.TextPointer> 是 (两个相邻标记之间的位置 <xref:System.Windows.Documents.Paragraph> ，即上一段的结束标记与下一段的开始标记之间的位置) 。  
  
 如果 <xref:System.Windows.Documents.TextPointer> 已指向有效插入位置，但非空格式化序列的结束标记在给定方向上直接位于该位置，则 <xref:System.Windows.Documents.TextPointer> 此方法返回的将调整为指向紧靠在格式设置序列结束后的插入位置。 例如，请考虑标记序列 `<Bold>a</Bold>b` 。 请注意，字母之间有两个插入位置，在结束标记前面有两个插入位置 `a` `b` `Bold` ，另一个在结束 `Bold` 标记之后。 如果 <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> 在上调用的 <xref:System.Windows.Documents.TextPointer> 位置紧靠在 `a` 结束标记之前、结束标记之前和的位置，则 `Bold` 会将返回的调整为 `direction` <xref:System.Windows.Documents.LogicalDirection.Forward> <xref:System.Windows.Documents.TextPointer> 指向 `b` 结束标记后紧靠字母之前的位置 `Bold` 。 当使用相对逻辑方向时，将会进行类似的调整来打开格式设置标记。 此方法旨在提供一种方法，用于在类似情况下在插入位置之间消除歧义。  
  
 当涉及一系列结构标记时，此方法还可用于选择插入点。 例如，在结束段落标记之间的某个位置时，可以使用 direction 参数选择上一 (段落开头的最近的插入点， (通过指定) 来指定 <xref:System.Windows.Documents.LogicalDirection.Forward?displayProperty=nameWithType>) 或上一段的末尾 <xref:System.Windows.Documents.LogicalDirection.Backward?displayProperty=nameWithType> 。  
  
 如果指针已位于插入位置，并且指定的中没有相邻的格式设置标记 `direction` ，则返回的 <xref:System.Windows.Documents.TextPointer> 指向与调用相同的位置 <xref:System.Windows.Documents.TextPointer> 。  
  
 相对于所指向的位置，不存在有效的插入位置 <xref:System.Windows.Documents.TextPointer> 。  如果引用的内容在结构上不完整（如在空表或列表中），则会发生这种情况。  在这种情况下，此方法只返回一个 <xref:System.Windows.Documents.TextPointer> 与 <xref:System.Windows.Documents.TextPointer> 调用此方法的相同位置。  此方法始终返回有效的 <xref:System.Windows.Documents.TextPointer> 。  
  
   
  
## Examples  
 此示例演示如何使用 <xref:System.Windows.Documents.TextPointer.GetInsertionPosition%2A> 方法检查指定的是否为 <xref:System.Windows.Documents.TextElement> 可打印内容的空。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getinsertionposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetInsertionPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getinsertionposition)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetLineStartPosition">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向相对于当前 <see cref="T:System.Windows.Documents.TextPointer" /> 指定的行的开始位置。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetLineStartPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetLineStartPosition (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetLineStartPosition(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLineStartPosition (count As Integer) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetLineStartPosition(int count);" />
      <MemberSignature Language="F#" Value="member this.GetLineStartPosition : int -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetLineStartPosition count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count">在确定要返回其开始位置的行时要跳过的行开始位置标记数。 负值指定前面的行，0 指定当前行，正值指定后面的行。</param>
        <summary>返回一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向相对于当前 <see cref="T:System.Windows.Documents.TextPointer" /> 指定的行的开始位置。</summary>
        <returns>一个指向指定行的开始位置的 <see cref="T:System.Windows.Documents.TextPointer" />（<see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /> 设置为 <see cref="F:System.Windows.Documents.LogicalDirection.Forward" />）；或者，如果指定行超出范围或无法定位，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指向的是不 <xref:System.Windows.Documents.TextPointer> 明确的位置（例如，在两行之间），则选择由指定的方向的线条 <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> 作为相对起始行。  
  
 此方法执行的操作取决于有效的布局。  必要时，此方法会在继续操作之前尝试自动重新生成有效的布局。  重新生成布局可能比较昂贵。  <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A>在执行可重新生成布局的操作之前，使用检查有效的布局。  请参阅[布局](/dotnet/framework/wpf/advanced/layout)以了解详细信息。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineStartPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetLineStartPosition (int count, out int actualCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetLineStartPosition(int32 count, [out] int32&amp; actualCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetLineStartPosition(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetLineStartPosition (count As Integer, ByRef actualCount As Integer) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetLineStartPosition(int count, [Runtime::InteropServices::Out] int % actualCount);" />
      <MemberSignature Language="F#" Value="member this.GetLineStartPosition : int * int -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetLineStartPosition (count, actualCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="actualCount" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="count">在确定要返回其开始位置的行时要跳过的行开始位置标记数。 负值指定前面的行，0 指定当前行，正值指定后面的行。</param>
        <param name="actualCount">此方法返回时，将包含在确定要返回其开始位置的行时所实际跳过的行开始位置标记数。  如果在跳过指定行数之前遇到内容的开始或结束位置，则此值可能小于 <paramref name="count" />。 此参数未经初始化即被传递。</param>
        <summary>返回一个指向相对于当前 <see cref="T:System.Windows.Documents.TextPointer" /> 所指定行的开始位置的 <see cref="T:System.Windows.Documents.TextPointer" />，并报告跳过的行数。</summary>
        <returns>一个指向指定行的开始位置的 <see cref="T:System.Windows.Documents.TextPointer" />（<see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /> 设置为 <see cref="F:System.Windows.Documents.LogicalDirection.Forward" />）；或者，如果指定行超出范围，则指向最靠近指定行的行的开始位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指向的是 <xref:System.Windows.Documents.TextPointer> 不明确的位置（例如，在两行之间），则选择由属性指定的方向上的线条 <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> 作为相对起始行。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextContextPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetNextContextPosition (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetNextContextPosition(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetNextContextPosition(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNextContextPosition (direction As LogicalDirection) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetNextContextPosition(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetNextContextPosition : System.Windows.Documents.LogicalDirection -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetNextContextPosition direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定搜索下一个符号时的逻辑方向。</param>
        <summary>返回一个指向指定逻辑方向上的下一个符号的指针。</summary>
        <returns>一个指向请求方向上的下一个符号的 <see cref="T:System.Windows.Documents.TextPointer" />；或者，如果当前 <see cref="T:System.Windows.Documents.TextPointer" /> 是内容开始或结束位置的边界，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下任何一项都被视为符号：  
  
-   元素的开始或结束标记 <xref:System.Windows.Documents.TextElement> 。  
  
-   <xref:System.Windows.UIElement>包含在或中的 <xref:System.Windows.Documents.InlineUIContainer> 元素 <xref:System.Windows.Documents.BlockUIContainer> 。  请注意，此类 <xref:System.Windows.UIElement> 始终只计为一个符号; 包含的任何其他内容或元素 <xref:System.Windows.UIElement> 不计为符号。  
  
-   [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]文本元素内的16位字符 <xref:System.Windows.Documents.Run> 。  
  
 如果下一个符号分类为 <xref:System.Windows.Documents.TextPointerContext.EmbeddedElement> 、 <xref:System.Windows.Documents.TextPointerContext.ElementStart> 或 <xref:System.Windows.Documents.TextPointerContext.ElementEnd> (由 <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> 方法) 标识，则 <xref:System.Windows.Documents.TextPointer> 此方法返回的仅从当前位置的一个符号前进。  
  
 如果下一个符号被归类为 <xref:System.Windows.Documents.TextPointerContext.Text> ，则 <xref:System.Windows.Documents.TextPointer> 此方法返回的将提前于文本到达下一个非文本符号 (即，下一个 <xref:System.Windows.Documents.TextPointerContext> 不) 的位置 <xref:System.Windows.Documents.TextPointerContext.Text> 。  可以通过调用方法提前计算跨越的确切符号计数 <xref:System.Windows.Documents.TextPointer.GetTextRunLength%2A> 。  
  
   
  
## Examples  
 下面的示例演示了此方法的用法。  此示例将 <xref:System.Windows.Documents.TextPointer.GetNextContextPosition%2A> 方法与方法结合使用， <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> 以便遍历和提取指定中的符号 <xref:System.Windows.Documents.TextElement> 。  
  
 尽管该示例可用于提取 [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)] 给定的内容的结构 <xref:System.Windows.Documents.TextElement> ，但它仅用于说明目的，不应在生产代码中使用。  请参阅 <xref:System.Xml> 命名空间，了解用于处理和处理 XML 的一组丰富类型。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getnextcontextposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetNextContextPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getnextcontextposition)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNextInsertionPosition">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetNextInsertionPosition (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetNextInsertionPosition(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNextInsertionPosition (direction As LogicalDirection) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetNextInsertionPosition(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetNextInsertionPosition : System.Windows.Documents.LogicalDirection -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetNextInsertionPosition direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定搜索下一个插入位置时的逻辑方向。</param>
        <summary>返回一个指向指定逻辑方向上的下一个插入位置的 <see cref="T:System.Windows.Documents.TextPointer" />。</summary>
        <returns>一个 <see cref="T:System.Windows.Documents.TextPointer" />，它标识所请求方向上的下一个插入位置；或者，如果找不到下一个插入位置，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 *插入位置*是可以在不破坏关联内容的任何语义规则的情况下添加新内容的位置。  在实际操作中，插入位置在内容中的任何位置都可以定位插入点。  不是插入位置的有效位置的一个示例 <xref:System.Windows.Documents.TextPointer> 是 (两个相邻标记之间的位置 <xref:System.Windows.Documents.Paragraph> ，即上一段的结束标记与下一段的开始标记之间的位置) 。  
  
   
  
## Examples  
 下面的示例演示了此方法的用法。 该示例使用 <xref:System.Windows.Documents.TextPointer.GetNextInsertionPosition%2A> 方法遍历内容元素边界，以便对 <xref:System.Windows.Documents.Paragraph> 两个指定实例之间存在的元素数进行计数 <xref:System.Windows.Documents.TextPointer> 。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getnextinsertionposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetNextInsertionPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getnextinsertionposition)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      </Docs>
    </Member>
    <Member MemberName="GetOffsetToPosition">
      <MemberSignature Language="C#" Value="public int GetOffsetToPosition (System.Windows.Documents.TextPointer position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetOffsetToPosition(class System.Windows.Documents.TextPointer position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOffsetToPosition (position As TextPointer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetOffsetToPosition(System::Windows::Documents::TextPointer ^ position);" />
      <MemberSignature Language="F#" Value="member this.GetOffsetToPosition : System.Windows.Documents.TextPointer -&gt; int" Usage="textPointer.GetOffsetToPosition position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="position">一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指定一个位置，将查找该位置与当前位置之间相距的距离（以符号数为单位）。</param>
        <summary>返回当前 <see cref="T:System.Windows.Documents.TextPointer" /> 与第二个指定 <see cref="T:System.Windows.Documents.TextPointer" /> 之间的符号数。</summary>
        <returns>当前 <see cref="T:System.Windows.Documents.TextPointer" /> 与 <paramref name="position" /> 之间的相对符号数。  负值指示当前 <see cref="T:System.Windows.Documents.TextPointer" /> 位于 <paramref name="position" /> 指定的位置之后，0 指示位置相同，正值指示当前 <see cref="T:System.Windows.Documents.TextPointer" /> 位于 <paramref name="position" /> 指定的位置之前。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下任何一项都被视为符号：  
  
-   元素的开始或结束标记 <xref:System.Windows.Documents.TextElement> 。  
  
-   <xref:System.Windows.UIElement>包含在或中的 <xref:System.Windows.Documents.InlineUIContainer> 元素 <xref:System.Windows.Documents.BlockUIContainer> 。  请注意，此类 <xref:System.Windows.UIElement> 始终只计为一个符号; 包含的任何其他内容或元素 <xref:System.Windows.UIElement> 不计为符号。  
  
-   [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]文本元素内的16位字符 <xref:System.Windows.Documents.Run> 。  
  
   
  
## Examples  
 下面的示例演示了此方法的用法。 该示例使用 <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> 方法来查找两个实例的偏移量 <xref:System.Windows.Documents.TextPointer> ，然后使用此信息来保存和还原中的选定内容 <xref:System.Windows.Controls.RichTextBox> 。  该示例假定在 <xref:System.Windows.Controls.RichTextBox> 选择保存和选择还原之间未更改的内容。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getoffsettoposition)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getoffsettoposition)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="position" /> 指定位于与当前位置相关联的文本容器之外的某个位置。</exception>
        <altmember cref="Overload:System.Windows.Documents.TextPointer.GetPositionAtOffset" />
        <altmember cref="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)" />
      </Docs>
    </Member>
    <Member MemberName="GetPointerContext">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointerContext GetPointerContext (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Documents.TextPointerContext GetPointerContext(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetPointerContext(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPointerContext (direction As LogicalDirection) As TextPointerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointerContext GetPointerContext(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetPointerContext : System.Windows.Documents.LogicalDirection -&gt; System.Windows.Documents.TextPointerContext" Usage="textPointer.GetPointerContext direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointerContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定确定相邻内容的类别时的逻辑方向。</param>
        <summary>返回在指定逻辑方向上与当前 <see cref="T:System.Windows.Documents.TextPointer" /> 相邻的内容的类别指示标志。</summary>
        <returns><see cref="T:System.Windows.Documents.TextPointerContext" /> 值之一，它指示指定逻辑方向上相邻内容的类别。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示了此方法的用法。 该示例使用 <xref:System.Windows.Documents.TextPointer.GetPointerContext%2A> 方法来实现一个算法，用于计算两个指定位置之间的开始和结束元素标记的平衡 <xref:System.Windows.Documents.TextPointer> 。  每个开始元素标记均计为 + 1，每个结束元素标记均计为-1。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getoffsettoposition2)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetOffsetToPosition2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getoffsettoposition2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPositionAtOffset">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向从内容开始位置计算的由指定偏移量（以符号数为单位）指示的位置。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPositionAtOffset">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetPositionAtOffset(int32 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPositionAtOffset (offset As Integer) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetPositionAtOffset(int offset);" />
      <MemberSignature Language="F#" Value="member this.GetPositionAtOffset : int -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetPositionAtOffset offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="offset">偏移量（以符号数为单位），使用它计算并返回位置。  如果偏移量为负，则在与 <see cref="P:System.Windows.Documents.TextPointer.LogicalDirection" /> 属性指示的方向相反的逻辑方向上计算位置。</param>
        <summary>返回一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向从当前 <see cref="T:System.Windows.Documents.TextPointer" /> 的开始位置计算的由指定偏移量（以符号数为单位）指示的位置。</summary>
        <returns>一个指向由指定偏移量指示的位置的 <see cref="T:System.Windows.Documents.TextPointer" />；或者，如果找不到对应位置，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下任何一项都被视为符号：  
  
-   元素的开始或结束标记 <xref:System.Windows.Documents.TextElement> 。  
  
-   <xref:System.Windows.UIElement>包含在或中的 <xref:System.Windows.Documents.InlineUIContainer> 元素 <xref:System.Windows.Documents.BlockUIContainer> 。  请注意，此类 <xref:System.Windows.UIElement> 始终只计为一个符号; 包含的任何其他内容或元素 <xref:System.Windows.UIElement> 不计为符号。  
  
-   [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]文本元素内的16位字符 <xref:System.Windows.Documents.Run> 。  
  
   
  
## Examples  
 下面的示例演示了此方法的用法。 该示例使用 <xref:System.Windows.Documents.TextPointer.GetPositionAtOffset%2A> 方法实现一对方法，其中一个方法用于计算相对于任何宿主段落的指定位置的偏移量，另一个方法用于返回 <xref:System.Windows.Documents.TextPointer> 指定段落中的指定偏移量。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_getpositionatoffset)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetPositionAtOffset](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_getpositionatoffset)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)" />
      </Docs>
    </Member>
    <Member MemberName="GetPositionAtOffset">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer GetPositionAtOffset (int offset, System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer GetPositionAtOffset(int32 offset, valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetPositionAtOffset(System.Int32,System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPositionAtOffset (offset As Integer, direction As LogicalDirection) As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ GetPositionAtOffset(int offset, System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetPositionAtOffset : int * System.Windows.Documents.LogicalDirection -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.GetPositionAtOffset (offset, direction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="offset">偏移量（以符号数为单位），使用它计算并返回位置。  如果偏移量为负，则返回的 <see cref="T:System.Windows.Documents.TextPointer" /> 位于当前 <see cref="T:System.Windows.Documents.TextPointer" /> 之前；否则，位于它之后。</param>
        <param name="direction"><see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定返回的 <see cref="T:System.Windows.Documents.TextPointer" /> 的逻辑方向。</param>
        <summary>返回一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指向从当前 <see cref="T:System.Windows.Documents.TextPointer" /> 的开始位置沿指定方向计算的由指定偏移量（以符号数为单位）指示的位置。</summary>
        <returns>一个指向由指定偏移量指示的位置的 <see cref="T:System.Windows.Documents.TextPointer" />；或者，如果偏移量超过了内容的结束位置，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下任何一项都被视为符号：  
  
-   元素的开始或结束标记 <xref:System.Windows.Documents.TextElement> 。  
  
-   <xref:System.Windows.UIElement>包含在或中的 <xref:System.Windows.Documents.InlineUIContainer> 元素 <xref:System.Windows.Documents.BlockUIContainer> 。  请注意，此类 <xref:System.Windows.UIElement> 始终只计为一个符号; 包含的任何其他内容或元素 <xref:System.Windows.UIElement> 不计为符号。  
  
-   [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]文本元素内的16位字符 <xref:System.Windows.Documents.Run> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetOffsetToPosition(System.Windows.Documents.TextPointer)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetTextInRun">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回与当前 <see cref="T:System.Windows.Documents.TextPointer" /> 相邻的文本。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetTextInRun">
      <MemberSignature Language="C#" Value="public string GetTextInRun (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetTextInRun(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTextInRun (direction As LogicalDirection) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetTextInRun(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetTextInRun : System.Windows.Documents.LogicalDirection -&gt; string" Usage="textPointer.GetTextInRun direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定查找并返回任何相邻文本时的逻辑方向。</param>
        <summary>返回一个字符串，其中包含在指定逻辑方向上与当前 <see cref="T:System.Windows.Documents.TextPointer" /> 相邻的任何文本。</summary>
        <returns>一个包含指定逻辑方向上的任何相邻文本的字符串；或者，如果找不到相邻文本，则为 <see cref="F:System.String.Empty" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法只返回不间断的文本运行。  如果除之外的任何符号类型 <xref:System.Windows.Documents.TextPointerContext.Text> 在指定方向上与当前相邻，则不返回任何内容 <xref:System.Windows.Documents.TextPointer> 。  同样，文本仅返回到下一个非文本符号。  
  
   
  
## Examples  
 下面的示例演示了此方法的用法。 该示例使用 <xref:System.Windows.Documents.TextPointer.GetTextInRun%2A> 方法来实现简单的文本提取程序。  方法返回两个指定实例之间的所有文本的字符串串联 <xref:System.Windows.Documents.TextPointer> 。  
  
 尽管该示例可用于提取两个实例之间的任何文本 <xref:System.Windows.Documents.TextPointer> ，但它仅用于说明目的，不应在生产代码中使用。  改用 <xref:System.Windows.Documents.TextRange.Text%2A?displayProperty=nameWithType> 属性。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_GetTextInRun](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_gettextinrun)]
 [!code-vb[TextPointer_Snippets#_TextPointer_GetTextInRun](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_gettextinrun)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)" />
        <altmember cref="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetTextInRun">
      <MemberSignature Language="C#" Value="public int GetTextInRun (System.Windows.Documents.LogicalDirection direction, char[] textBuffer, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTextInRun(valuetype System.Windows.Documents.LogicalDirection direction, char[] textBuffer, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetTextInRun(System.Windows.Documents.LogicalDirection,System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTextInRun (direction As LogicalDirection, textBuffer As Char(), startIndex As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTextInRun(System::Windows::Documents::LogicalDirection direction, cli::array &lt;char&gt; ^ textBuffer, int startIndex, int count);" />
      <MemberSignature Language="F#" Value="member this.GetTextInRun : System.Windows.Documents.LogicalDirection * char[] * int * int -&gt; int" Usage="textPointer.GetTextInRun (direction, textBuffer, startIndex, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
        <Parameter Name="textBuffer" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="direction"><see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定查找并复制任何相邻文本时的逻辑方向。</param>
        <param name="textBuffer">要向其中复制文本的缓冲区。</param>
        <param name="startIndex">一个索引，从该索引处开始将复制的文本写入 <paramref name="textBuffer" /> 中。</param>
        <param name="count">要复制的最大字符数。</param>
        <summary>将从指定方向上的任何相邻文本中提取的指定了最大数量的字符复制到由调用方提供的字符数组中。</summary>
        <returns>实际复制到 <paramref name="textBuffer" /> 中的字符数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法只返回不间断的文本运行。  如果除之外的任何符号类型 <xref:System.Windows.Documents.TextPointerContext.Text> 在指定方向上与当前相邻，则不返回任何内容 <xref:System.Windows.Documents.TextPointer> 。  同样，文本仅返回到下一个非文本符号。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="startIndex" /> 小于 0 或大于 <paramref name="textBuffer" /> 的 <see cref="P:System.Array.Length" /> 属性。  
  
- 或 - 
 <paramref name="count" /> 小于 0 或大于 <paramref name="textBuffer" /> 中的剩余空间（<paramref name="textBuffer" />.<see cref="P:System.Array.Length" /> 减去 <paramref name="startIndex" />）。</exception>
        <altmember cref="M:System.Windows.Documents.TextPointer.DeleteTextInRun(System.Int32)" />
        <altmember cref="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetTextRunLength">
      <MemberSignature Language="C#" Value="public int GetTextRunLength (System.Windows.Documents.LogicalDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetTextRunLength(valuetype System.Windows.Documents.LogicalDirection direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.GetTextRunLength(System.Windows.Documents.LogicalDirection)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTextRunLength (direction As LogicalDirection) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetTextRunLength(System::Windows::Documents::LogicalDirection direction);" />
      <MemberSignature Language="F#" Value="member this.GetTextRunLength : System.Windows.Documents.LogicalDirection -&gt; int" Usage="textPointer.GetTextRunLength direction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="System.Windows.Documents.LogicalDirection" />
      </Parameters>
      <Docs>
        <param name="direction"><see cref="T:System.Windows.Documents.LogicalDirection" /> 值之一，它指定计数字符数时的逻辑方向。</param>
        <summary>返回当前 <see cref="T:System.Windows.Documents.TextPointer" /> 与指定逻辑方向上的下一个非文本符号之间的 Unicode 字符数。</summary>
        <returns>当前 <see cref="T:System.Windows.Documents.TextPointer" /> 与下一个非文本符号之间的 Unicode 字符数。  如果没有相邻文本，则此数目可以为 0。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 以下任何一项都被视为符号：  
  
-   元素的开始或结束标记 <xref:System.Windows.Documents.TextElement> 。  
  
-   <xref:System.Windows.UIElement>包含在或中的 <xref:System.Windows.Documents.InlineUIContainer> 元素 <xref:System.Windows.Documents.BlockUIContainer> 。  请注意，此类 <xref:System.Windows.UIElement> 始终只计为一个符号; 包含的任何其他内容或元素 <xref:System.Windows.UIElement> 不计为符号。  
  
-   [!INCLUDE[TLA#tla_unicode](~/includes/tlasharptla-unicode-md.md)]文本元素内的16位字符 <xref:System.Windows.Documents.Run> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasValidLayout">
      <MemberSignature Language="C#" Value="public bool HasValidLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValidLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.HasValidLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasValidLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasValidLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValidLayout : bool" Usage="System.Windows.Documents.TextPointer.HasValidLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示与当前位置相关联的文本容器是否具有有效（最新）的布局。</summary>
        <value>如果布局是最新的而且有效，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 必要时，依赖于有效布局 (的操作（如 <xref:System.Windows.Documents.TextPointer.GetLineStartPosition%2A> 方法、 <xref:System.Windows.Documents.TextPointer.GetCharacterRect%2A> 方法和 <xref:System.Windows.Documents.TextPointer.IsAtLineStartPosition%2A> 属性) 尝试在继续操作之前自动重新生成有效的布局。  重新生成布局可能比较昂贵。  使用此属性可以在执行可能再生布局的操作前检查有效的布局。  请参阅[布局](/dotnet/framework/wpf/advanced/layout)以了解详细信息。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertLineBreak">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer InsertLineBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer InsertLineBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.InsertLineBreak" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertLineBreak () As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ InsertLineBreak();" />
      <MemberSignature Language="F#" Value="member this.InsertLineBreak : unit -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.InsertLineBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在当前位置插入一个换行符。</summary>
        <returns>紧接在由此方法插入的 <see cref="T:System.Windows.Documents.TextPointer" /> 元素之后的 <see cref="T:System.Windows.Documents.LineBreak" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParagraphBreak">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.TextPointer InsertParagraphBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Documents.TextPointer InsertParagraphBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.InsertParagraphBreak" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertParagraphBreak () As TextPointer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Documents::TextPointer ^ InsertParagraphBreak();" />
      <MemberSignature Language="F#" Value="member this.InsertParagraphBreak : unit -&gt; System.Windows.Documents.TextPointer" Usage="textPointer.InsertParagraphBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.TextPointer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在当前位置插入一个分段符。</summary>
        <returns>一个指向新段落开始位置 (<see cref="T:System.Windows.Documents.TextPointer" />) 的 <see cref="P:System.Windows.Documents.TextElement.ContentStart" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果当当前位置在现有元素内时调用此方法 <xref:System.Windows.Documents.Paragraph> ，则现有段落及其包含的任何内容会拆分为当前位置的两个段落。  如果当当前位置不在现有段落内时调用此方法，则插入一个新的空段落。  如果调用此方法的位置不适合拆分或插入段落 (例如，如果当前位置在 <xref:System.Windows.Documents.Hyperlink> 元素) 内，则会引发异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">应针对无法进行拆分以容纳一个新段落的位置调用此方法，例如在 <see cref="T:System.Windows.Documents.Hyperlink" /> 或 <see cref="T:System.Windows.Documents.InlineUIContainer" /> 的范围内。</exception>
      </Docs>
    </Member>
    <Member MemberName="InsertTextInRun">
      <MemberSignature Language="C#" Value="public void InsertTextInRun (string textData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertTextInRun(string textData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.InsertTextInRun(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertTextInRun (textData As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertTextInRun(System::String ^ textData);" />
      <MemberSignature Language="F#" Value="member this.InsertTextInRun : string -&gt; unit" Usage="textPointer.InsertTextInRun textData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textData" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textData">要插入的文本。</param>
        <summary>将指定文本插入到文本 <see cref="T:System.Windows.Documents.Run" /> 中的当前位置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果的 <xref:System.Windows.Documents.TextPointer> 作用域不是 <xref:System.Windows.Documents.Run> 元素， <xref:System.Windows.Documents.Run> 则会随一起插入 `textData` 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">当前位置没有位于 <see cref="T:System.Windows.Documents.Run" /> 元素内。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="textData" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAtInsertionPosition">
      <MemberSignature Language="C#" Value="public bool IsAtInsertionPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAtInsertionPosition" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.IsAtInsertionPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAtInsertionPosition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAtInsertionPosition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAtInsertionPosition : bool" Usage="System.Windows.Documents.TextPointer.IsAtInsertionPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示当前位置是否是一个插入位置。</summary>
        <value>如果当前位置是插入位置，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 插入位置是可以在不破坏关联内容的任何语义规则的情况下添加新内容的位置。  在实际操作中，插入位置在内容中的任何位置都可以定位插入点。  不是插入位置的有效位置的一个示例 <xref:System.Windows.Documents.TextPointer> 是 (两个相邻标记之间的位置 <xref:System.Windows.Documents.Paragraph> ，即上一段的结束标记与下一段的开始标记之间的位置) 。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Documents.TextPointer.GetInsertionPosition(System.Windows.Documents.LogicalDirection)" />
        <altmember cref="M:System.Windows.Documents.TextPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection)" />
      </Docs>
    </Member>
    <Member MemberName="IsAtLineStartPosition">
      <MemberSignature Language="C#" Value="public bool IsAtLineStartPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAtLineStartPosition" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.IsAtLineStartPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAtLineStartPosition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAtLineStartPosition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAtLineStartPosition : bool" Usage="System.Windows.Documents.TextPointer.IsAtLineStartPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示当前位置是否位于行的开始处。</summary>
        <value>如果当前位置位于行的开始处，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果指向的是 <xref:System.Windows.Documents.TextPointer> 不明确的位置（例如，在两行之间），则选择由属性指定的方向上的线条 <xref:System.Windows.Documents.TextPointer.LogicalDirection%2A> 作为相对起始行。  
  
 此属性执行的操作取决于有效的布局。  必要时，此方法会在继续操作之前尝试自动重新生成有效的布局。  重新生成布局可能比较昂贵。  使用 <xref:System.Windows.Documents.TextPointer.HasValidLayout%2A> 属性来检查有效的布局，然后执行可以重新生成布局的操作。  请参阅[布局](/dotnet/framework/wpf/advanced/layout)以了解详细信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.IsAtLineStartPosition" />
      </Docs>
    </Member>
    <Member MemberName="IsInSameDocument">
      <MemberSignature Language="C#" Value="public bool IsInSameDocument (System.Windows.Documents.TextPointer textPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInSameDocument(class System.Windows.Documents.TextPointer textPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.IsInSameDocument(System.Windows.Documents.TextPointer)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInSameDocument (textPosition As TextPointer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInSameDocument(System::Windows::Documents::TextPointer ^ textPosition);" />
      <MemberSignature Language="F#" Value="member this.IsInSameDocument : System.Windows.Documents.TextPointer -&gt; bool" Usage="textPointer.IsInSameDocument textPosition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textPosition" Type="System.Windows.Documents.TextPointer" />
      </Parameters>
      <Docs>
        <param name="textPosition">一个 <see cref="T:System.Windows.Documents.TextPointer" />，它指定要与当前位置进行比较的位置。</param>
        <summary>指示指定位置与当前位置是否位于相同的文本容器内。</summary>
        <returns>如果 <paramref name="textPosition" /> 指示的位置与当前位置位于相同的文本容器内，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 涉及多个实例的大多数操作仅在所涉及的 <xref:System.Windows.Documents.TextPointer> 实例指示位于同一文本容器范围内的位置时才有效。  例如 <xref:System.Windows.Documents.TextPointer.CompareTo%2A> ，和 <xref:System.Windows.Documents.TextPointer.GetOffsetToPosition%2A> 方法不能与一起用于与 <xref:System.Windows.Documents.TextPointer> 当前位置关联的文本容器之外的位置。  使用此方法可验证指定的 <xref:System.Windows.Documents.TextPointer> 与此类操作的当前位置是否兼容。  
  
   
  
## Examples  
 下面的示例演示了此方法的用法。  <xref:System.Windows.Documents.TextPointer.IsInSameDocument%2A> <xref:System.Windows.Documents.TextPointer> <xref:System.Windows.Documents.TextPointer> 当无法保证所有三个位置都属于同一文本容器时，此示例使用方法来检查是否在情况下的两个其他指定实例之间定位指定的。  
  
 [!code-csharp[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/samples/snippets/csharp/VS_Snippets_Wpf/TextPointer_Snippets/CSharp/Window1.xaml.cs#_textpointer_isinsamedocument)]
 [!code-vb[TextPointer_Snippets#_TextPointer_IsInSameDocument](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextPointer_Snippets/visualbasic/window1.xaml.vb#_textpointer_isinsamedocument)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="textPosition" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="LogicalDirection">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.LogicalDirection LogicalDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Documents.LogicalDirection LogicalDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.LogicalDirection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LogicalDirection As LogicalDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::LogicalDirection LogicalDirection { System::Windows::Documents::LogicalDirection get(); };" />
      <MemberSignature Language="F#" Value="member this.LogicalDirection : System.Windows.Documents.LogicalDirection" Usage="System.Windows.Documents.TextPointer.LogicalDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.LogicalDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与当前位置相关联的逻辑方向，用于消除与当前位置相关联内容的不确定性。</summary>
        <value>与当前位置相关联的 <see cref="T:System.Windows.Documents.LogicalDirection" /> 值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 作为如何使用此属性的示例， <xref:System.Windows.Documents.LogicalDirection> <xref:System.Windows.Documents.TextPointer> 由命中测试方法返回的会提供一个介于文本两个字符之间的命中。 逻辑方向指定实际命中了两个字符中的哪一个。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paragraph">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.Paragraph Paragraph { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.Paragraph Paragraph" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.Paragraph" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Paragraph As Paragraph" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Documents::Paragraph ^ Paragraph { System::Windows::Documents::Paragraph ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Paragraph : System.Windows.Documents.Paragraph" Usage="System.Windows.Documents.TextPointer.Paragraph" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.Paragraph</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取涵盖当前位置的段落（如果有）。</summary>
        <value><see cref="T:System.Windows.Documents.Paragraph" />作用域当前位置的， <see langword="null" /> 如果不存在此类段落，则为。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.Parent" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.DependencyObject Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DependencyObject Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.TextPointer.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As DependencyObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DependencyObject ^ Parent { System::Windows::DependencyObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.DependencyObject" Usage="System.Windows.Documents.TextPointer.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取涵盖当前位置的逻辑父项。</summary>
        <value>涵盖当前位置的逻辑父项。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Documents.TextPointer.Paragraph" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.TextPointer.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="textPointer.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>此类型或成员支持 [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] 基础结构，但不可直接在代码中使用。</summary>
        <returns>表示该对象的字符串。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
