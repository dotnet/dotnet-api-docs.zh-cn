<Type Name="TypedDataSetGenerator+GenerateOption" FullName="System.Data.Design.TypedDataSetGenerator+GenerateOption">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b486087e987a8e2bac6d3f1a45ab170aec16ab90" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89826331" /></Metadata><TypeSignature Language="C#" Value="public enum TypedDataSetGenerator.GenerateOption" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed TypedDataSetGenerator/GenerateOption extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Data.Design.TypedDataSetGenerator.GenerateOption" />
  <TypeSignature Language="VB.NET" Value="Public Enum TypedDataSetGenerator.GenerateOption" />
  <TypeSignature Language="C++ CLI" Value="public: enum class TypedDataSetGenerator::GenerateOption" />
  <TypeSignature Language="F#" Value="type TypedDataSetGenerator.GenerateOption = " />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Flags]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Flags&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>向 <see cref="T:System.Data.Design.TypedDataSetGenerator" /> 提供信息，用于创建可支持 LINQ to DataSet 和分层更新的类型化数据集。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.Design.TypedDataSetGenerator.GenerateOption>枚举提供了在 <xref:System.Data.Design.TypedDataSetGenerator> 调用方法时要创建的类型化数据集的类型信息 `TypedDataSetGenerator.Generate` 。  
  
 <xref:System.Data.Design.TypedDataSetGenerator.GenerateOption>枚举可用于实现类型化数据集中的新功能，而无需为该方法创建其他重载 `TypedDataSetGenerator.Generate` 。  
  
> [!NOTE]
>  LINQ to DataSet 和分层更新是中新增的功能 [!INCLUDE[vs_orcas_long](~/includes/vs-orcas-long-md.md)] 。  
>   
>  另请参阅 [分层更新概述](https://msdn.microsoft.com/library/c4f8e8b9-e4a5-4a02-8462-d03d1e8222d6)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="HierarchicalUpdate">
      <MemberSignature Language="C#" Value="HierarchicalUpdate" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.Design.TypedDataSetGenerator/GenerateOption HierarchicalUpdate = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Data.Design.TypedDataSetGenerator.GenerateOption.HierarchicalUpdate" />
      <MemberSignature Language="VB.NET" Value="HierarchicalUpdate" />
      <MemberSignature Language="C++ CLI" Value="HierarchicalUpdate" />
      <MemberSignature Language="F#" Value="HierarchicalUpdate = 1" Usage="System.Data.Design.TypedDataSetGenerator.GenerateOption.HierarchicalUpdate" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Design.TypedDataSetGenerator+GenerateOption</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>生成包含 TableAdapterManager 和关联方法的类型化数据集，以便启用分层更新。</summary>
      </Docs>
    </Member>
    <Member MemberName="LinqOverTypedDatasets">
      <MemberSignature Language="C#" Value="LinqOverTypedDatasets" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.Design.TypedDataSetGenerator/GenerateOption LinqOverTypedDatasets = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Data.Design.TypedDataSetGenerator.GenerateOption.LinqOverTypedDatasets" />
      <MemberSignature Language="VB.NET" Value="LinqOverTypedDatasets" />
      <MemberSignature Language="C++ CLI" Value="LinqOverTypedDatasets" />
      <MemberSignature Language="F#" Value="LinqOverTypedDatasets = 2" Usage="System.Data.Design.TypedDataSetGenerator.GenerateOption.LinqOverTypedDatasets" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Design.TypedDataSetGenerator+GenerateOption</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>生成包含从 <see cref="T:System.Data.TypedTableBase`1" /> 继承的数据表的类型化数据集，以便能够对数据表执行 LINQ 查询。</summary>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="None" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.Design.TypedDataSetGenerator/GenerateOption None = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Data.Design.TypedDataSetGenerator.GenerateOption.None" />
      <MemberSignature Language="VB.NET" Value="None" />
      <MemberSignature Language="C++ CLI" Value="None" />
      <MemberSignature Language="F#" Value="None = 0" Usage="System.Data.Design.TypedDataSetGenerator.GenerateOption.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Design.TypedDataSetGenerator+GenerateOption</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>生成与在早于 [!INCLUDE[vs_orcas_long](~/includes/vs-orcas-long-md.md)] 的 Visual Studio 版本中生成的类型化数据集兼容的类型化数据集。</summary>
      </Docs>
    </Member>
  </Members>
</Type>
