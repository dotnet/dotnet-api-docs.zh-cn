<Type Name="MemberInfo" FullName="System.Reflection.MemberInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d824485f55a1d9cf160959d17b775f13714f8146" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86788544" /></Metadata><TypeSignature Language="C#" Value="public abstract class MemberInfo" FrameworkAlternate="dotnet-uwp-10.0;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MemberInfo extends System.Object" FrameworkAlternate="dotnet-uwp-10.0;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MemberInfo" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MemberInfo" FrameworkAlternate="dotnet-uwp-10.0;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemberInfo abstract" FrameworkAlternate="dotnet-uwp-10.0;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4" />
  <TypeSignature Language="F#" Value="type MemberInfo = class" FrameworkAlternate="dotnet-uwp-10.0;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4" />
  <TypeSignature Language="C#" Value="public abstract class MemberInfo : System.Reflection.ICustomAttributeProvider" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MemberInfo extends System.Object implements class System.Reflection.ICustomAttributeProvider" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MemberInfo&#xA;Implements ICustomAttributeProvider" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemberInfo abstract : System::Reflection::ICustomAttributeProvider" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="F#" Value="type MemberInfo = class&#xA;    interface ICustomAttributeProvider" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public abstract class MemberInfo : System.Reflection.ICustomAttributeProvider, System.Runtime.InteropServices._MemberInfo" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit MemberInfo extends System.Object implements class System.Reflection.ICustomAttributeProvider, class System.Runtime.InteropServices._MemberInfo" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MemberInfo&#xA;Implements _MemberInfo, ICustomAttributeProvider" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemberInfo abstract : System::Reflection::ICustomAttributeProvider, System::Runtime::InteropServices::_MemberInfo" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type MemberInfo = class&#xA;    interface _MemberInfo&#xA;    interface ICustomAttributeProvider" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type MemberInfo = class&#xA;    interface ICustomAttributeProvider&#xA;    interface _MemberInfo" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Reflection" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Reflection" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Reflection" FromVersion="4.2.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Reflection" FromVersion="4.2.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Reflection" FromVersion="4.2.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.Reflection.ICustomAttributeProvider</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.Runtime.InteropServices._MemberInfo</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.None)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._MemberInfo))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComDefaultInterface(typeof(System.Runtime.InteropServices._MemberInfo))&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="78560-101">获取有关成员属性的信息并提供对成员元数据的访问权限。</span><span class="sxs-lookup"><span data-stu-id="78560-101">Obtains information about the attributes of a member and provides access to member metadata.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78560-102"><xref:System.Reflection.MemberInfo>类是类的抽象基类，用于获取有关类 (构造函数、事件、字段、方法和属性) 的所有成员的信息。</span><span class="sxs-lookup"><span data-stu-id="78560-102">The <xref:System.Reflection.MemberInfo> class is the abstract base class for classes used to obtain information about all members of a class (constructors, events, fields, methods, and properties).</span></span>  
  
 <span data-ttu-id="78560-103">此类引入所有成员提供的基本功能。</span><span class="sxs-lookup"><span data-stu-id="78560-103">This class introduces the basic functionality that all members provide.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78560-104">此示例演示如何使用各种反射类来分析包含在程序集中的元数据。</span><span class="sxs-lookup"><span data-stu-id="78560-104">This example shows how to use various reflection classes to analyze the metadata contained in an assembly.</span></span>  
  
 [!code-cpp[Reflection#1](~/samples/snippets/cpp/VS_Snippets_CLR/Reflection/CPP/reflection.cpp#1)]
 [!code-csharp[Reflection#1](~/samples/snippets/csharp/VS_Snippets_CLR/Reflection/CS/Reflection.cs#1)]
 [!code-vb[Reflection#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Reflection/VB/Reflection.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="78560-105">此类型是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="78560-105">This type is thread safe.</span></span></threadsafe>
    <block subset="none" type="overrides"><para><span data-ttu-id="78560-106">从继承时， <see cref="T:System.Reflection.MemberInfo" /> 必须重写以下成员： <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> 和 <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> 。</span><span class="sxs-lookup"><span data-stu-id="78560-106">When you inherit from <see cref="T:System.Reflection.MemberInfo" /> you must override the following members: <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> and <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />.</span></span></para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MemberInfo ();" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.1;net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.1;net-5.0" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.#ctor" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.1;net-5.0" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.1;net-5.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MemberInfo();" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netcore-3.1;net-5.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="78560-107">初始化 <see cref="T:System.Reflection.MemberInfo" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="78560-107">Initializes a new instance of the <see cref="T:System.Reflection.MemberInfo" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78560-108">只有派生类才能创建此 `MemberInfo` 类。</span><span class="sxs-lookup"><span data-stu-id="78560-108">Only a derived class can create this `MemberInfo` class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomAttributes">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Reflection.CustomAttributeData&gt; CustomAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.CustomAttributeData&gt; CustomAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.CustomAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CustomAttributes As IEnumerable(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IEnumerable&lt;System::Reflection::CustomAttributeData ^&gt; ^ CustomAttributes { System::Collections::Generic::IEnumerable&lt;System::Reflection::CustomAttributeData ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomAttributes : seq&lt;System.Reflection.CustomAttributeData&gt;" Usage="System.Reflection.MemberInfo.CustomAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78560-109">获取包含此成员自定义属性的集合。</span><span class="sxs-lookup"><span data-stu-id="78560-109">Gets a collection that contains this member's custom attributes.</span></span></summary>
        <value><span data-ttu-id="78560-110">包含此成员的自定义特性的集合。</span><span class="sxs-lookup"><span data-stu-id="78560-110">A collection that contains this member's custom attributes.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public abstract Type DeclaringType { get; }" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Reflection.MemberInfo.DeclaringType" />
      <MemberSignature Language="C#" Value="public abstract Type? DeclaringType { get; }" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">P:System.Runtime.InteropServices._MemberInfo.DeclaringType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78560-111">获取声明该成员的类。</span><span class="sxs-lookup"><span data-stu-id="78560-111">Gets the class that declares this member.</span></span></summary>
        <value><span data-ttu-id="78560-112">声明该成员的类的 <see langword="Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="78560-112">The <see langword="Type" /> object for the class that declares this member.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78560-113"><xref:System.Reflection.MemberInfo.DeclaringType%2A>属性检索对 <xref:System.Type> 声明此成员的类型的对象的引用。</span><span class="sxs-lookup"><span data-stu-id="78560-113">The <xref:System.Reflection.MemberInfo.DeclaringType%2A> property retrieves a reference to the <xref:System.Type> object for the type that declares this member.</span></span> <span data-ttu-id="78560-114">类型的成员既可以由类型声明，也可以从基类型继承，因此 `Type` 属性返回的对象 <xref:System.Reflection.MemberInfo.DeclaringType%2A> 可能与 `Type` 用于获取当前对象的对象不同 <xref:System.Reflection.MemberInfo> 。</span><span class="sxs-lookup"><span data-stu-id="78560-114">A member of a type is either declared by the type or inherited from a base type, so the `Type` object returned by the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property might not be the same as the `Type` object used to obtain the current <xref:System.Reflection.MemberInfo> object.</span></span>  
  
-   <span data-ttu-id="78560-115">如果从中 `Type` 获取此对象的对象 `MemberInfo` 未声明此成员，则该 <xref:System.Reflection.MemberInfo.DeclaringType%2A> 属性将表示其基类型之一。</span><span class="sxs-lookup"><span data-stu-id="78560-115">If the `Type` object from which this `MemberInfo` object was obtained did not declare this member, the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property will represent one of its base types.</span></span>  
  
-   <span data-ttu-id="78560-116">如果 `MemberInfo` 对象是全局成员 (即，如果它是从方法获取的（它 <xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType> 在模块) 上返回全局方法），则返回的 <xref:System.Reflection.MemberInfo.DeclaringType%2A> 将为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="78560-116">If the `MemberInfo` object is a global member (that is, if it was obtained from the <xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType> method, which returns global methods on a module), the returned <xref:System.Reflection.MemberInfo.DeclaringType%2A> will be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78560-117">下面的示例定义了一个 `IValue` 具有单个成员的接口 `GetValue` 。</span><span class="sxs-lookup"><span data-stu-id="78560-117">The following example defines an interface, `IValue`, with a single member, `GetValue`.</span></span> <span data-ttu-id="78560-118">它还定义了四个类：和 `A` 一个实现接口的基类;，它 `IValue` `B` `A` 从基类实现继承并隐藏其对的实现;，它从继承而来 `GetValue` `C` `A` `D` ，后者继承自 `A` 并重写其 `GetValue` 方法。</span><span class="sxs-lookup"><span data-stu-id="78560-118">It also defines four classes: `A`, a base class that implements the `IValue` interface; `B`, which inherits from `A` and hides its implementation of `GetValue` from the base class implementation; `C`, which simply inherits from `A`; and `D`, which inherits from `A` and overrides its `GetValue` method.</span></span>  <span data-ttu-id="78560-119">然后，该示例将 <xref:System.Reflection.MemberInfo> 为类型的每个成员检索一个对象 (包括继承自) 的成员 <xref:System.Object> ，并显示其属性的值 <xref:System.Reflection.MemberInfo.DeclaringType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="78560-119">The example then retrieves a <xref:System.Reflection.MemberInfo> object for each member of the type (including members inherited from <xref:System.Object>) and displays the value of its <xref:System.Reflection.MemberInfo.DeclaringType%2A> property.</span></span>  
  
 [!code-csharp[Classic MemberInfo.DeclaringType Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MemberInfo.DeclaringType Example/CS/Example2.cs#2)]
 [!code-vb[Classic MemberInfo.DeclaringType Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MemberInfo.DeclaringType Example/VB/Example2.vb#2)]  
  
 <span data-ttu-id="78560-120">请注意，的声明类型 `A.GetValue` 为 `A` ，其中 `B` 包括两个 `GetValue` 方法，一个由 `A` 和一个声明 `B` ，另一个是的声明类型 `D.GetValue` `D` 。</span><span class="sxs-lookup"><span data-stu-id="78560-120">Note that the declaring type of `A.GetValue` is `A`, that `B` includes two `GetValue` methods, one declared by `A` and one by `B`, and that the declaring type of `D.GetValue` is `D`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78560-121">`DeclaringType` 仅返回成员名称和其声明类型的名称。</span><span class="sxs-lookup"><span data-stu-id="78560-121">`DeclaringType` returns only the member names and the names of their declaring types.</span></span> <span data-ttu-id="78560-122">若要返回成员名称及其原型，请调用 `MemberInfo.ToString` 。</span><span class="sxs-lookup"><span data-stu-id="78560-122">To return the member names with their prototypes, call `MemberInfo.ToString`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="memberInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">M:System.Runtime.InteropServices._MemberInfo.Equals(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="78560-123">与此实例进行比较的对象，或为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="78560-123">An object to compare with this instance, or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="78560-124">返回一个值，该值指示此实例是否与指定的对象相等。</span><span class="sxs-lookup"><span data-stu-id="78560-124">Returns a value that indicates whether this instance is equal to a specified object.</span></span></summary>
        <returns><span data-ttu-id="78560-125">如果 <see langword="true" /> 等于此实例的类型和值，则为 <paramref name="obj" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="78560-125"><see langword="true" /> if <paramref name="obj" /> equals the type and value of this instance; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="78560-126">在派生类中重写时，返回应用于此成员的自定义属性。</span><span class="sxs-lookup"><span data-stu-id="78560-126">When overridden in a derived class, returns custom attributes applied to this member.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public abstract object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : bool -&gt; obj[]" Usage="memberInfo.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)</InterfaceMember>
        <InterfaceMember FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">M:System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="inherit"><span data-ttu-id="78560-127">如果要搜索此成员的继承链以查找属性，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="78560-127"><see langword="true" /> to search this member's inheritance chain to find the attributes; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="78560-128">会忽略属性和事件的此参数。</span><span class="sxs-lookup"><span data-stu-id="78560-128">This parameter is ignored for properties and events.</span></span></param>
        <summary><span data-ttu-id="78560-129">在派生类中重写时，返回应用于此成员的所有自定义属性的数组。</span><span class="sxs-lookup"><span data-stu-id="78560-129">When overridden in a derived class, returns an array of all custom attributes applied to this member.</span></span></summary>
        <returns><span data-ttu-id="78560-130">一个包含应用于此成员的所有自定义属性的数组，或者在未定义任何特性时为包含零个元素的数组。</span><span class="sxs-lookup"><span data-stu-id="78560-130">An array that contains all the custom attributes applied to this member, or an array with zero elements if no attributes are defined.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78560-131">此方法会忽略 `inherit` 属性和事件的参数。</span><span class="sxs-lookup"><span data-stu-id="78560-131">This method ignores the `inherit` parameter for properties and events.</span></span> <span data-ttu-id="78560-132">若要在继承链中搜索属性和事件的属性，请使用方法的适当重载 <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="78560-132">To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78560-133">在 .NET Framework 版本2.0 中，如果方法、构造函数和类型的安全属性以新的元数据格式存储，则此方法将返回这些属性。</span><span class="sxs-lookup"><span data-stu-id="78560-133">In the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if they are stored in the new metadata format.</span></span> <span data-ttu-id="78560-134">使用版本2.0 编译的程序集使用此格式。</span><span class="sxs-lookup"><span data-stu-id="78560-134">Assemblies compiled with version 2.0 use this format.</span></span> <span data-ttu-id="78560-135">使用早期版本的 .NET Framework 编译的动态程序集和程序集使用旧的 XML 格式。</span><span class="sxs-lookup"><span data-stu-id="78560-135">Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</span></span> <span data-ttu-id="78560-136">请参阅 [发出声明性安全特性](https://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)。</span><span class="sxs-lookup"><span data-stu-id="78560-136">See [Emitting Declarative Security Attributes](https://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78560-137">下面的示例定义了一个自定义属性，并将该属性与相关联 `MyClass.MyMethod` ，并在运行时检索该属性，并显示结果。</span><span class="sxs-lookup"><span data-stu-id="78560-137">The following example defines a custom attribute and associates the attribute with `MyClass.MyMethod`, retrieves the attribute at run time, and displays the result.</span></span>  
  
 [!code-cpp[MemberInfo_GetCustomAttributes1#1](~/samples/snippets/cpp/VS_Snippets_CLR/MemberInfo_GetCustomAttributes1/CPP/memberinfo_getcustomattributes1.cpp#1)]
 [!code-csharp[MemberInfo_GetCustomAttributes1#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemberInfo_GetCustomAttributes1/CS/memberinfo_getcustomattributes1.cs#1)]
 [!code-vb[MemberInfo_GetCustomAttributes1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MemberInfo_GetCustomAttributes1/VB/memberinfo_getcustomattributes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="78560-138">此成员属于加载到仅反射的上下文的类型。</span><span class="sxs-lookup"><span data-stu-id="78560-138">This member belongs to a type that is loaded into the reflection-only context.</span></span> <span data-ttu-id="78560-139">请参阅[如何：将程序集加载到仅反射上下文中](/dotnet/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context)。</span><span class="sxs-lookup"><span data-stu-id="78560-139">See [How to: Load Assemblies into the Reflection-Only Context](/dotnet/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context).</span></span></exception>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="78560-140">无法加载自定义属性类型。</span><span class="sxs-lookup"><span data-stu-id="78560-140">A custom attribute type could not be loaded.</span></span></exception>
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.Reflection.Emit.CustomAttributeBuilder" />
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public abstract object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : Type * bool -&gt; obj[]" Usage="memberInfo.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)</InterfaceMember>
        <InterfaceMember FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">M:System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="inherit" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="78560-141">要搜索的属性的类型。</span><span class="sxs-lookup"><span data-stu-id="78560-141">The type of attribute to search for.</span></span> <span data-ttu-id="78560-142">仅返回可分配给此类型的属性。</span><span class="sxs-lookup"><span data-stu-id="78560-142">Only attributes that are assignable to this type are returned.</span></span></param>
        <param name="inherit"><span data-ttu-id="78560-143">如果要搜索此成员的继承链以查找属性，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="78560-143"><see langword="true" /> to search this member's inheritance chain to find the attributes; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="78560-144">会忽略属性和事件的此参数。</span><span class="sxs-lookup"><span data-stu-id="78560-144">This parameter is ignored for properties and events.</span></span></param>
        <summary><span data-ttu-id="78560-145">在派生类中重写时，返回应用于此成员并由 <see cref="T:System.Type" /> 标识的自定义属性的数组。</span><span class="sxs-lookup"><span data-stu-id="78560-145">When overridden in a derived class, returns an array of custom attributes applied to this member and identified by <see cref="T:System.Type" />.</span></span></summary>
        <returns><span data-ttu-id="78560-146">应用于此成员的自定义属性的数组，如果未应用可分配给 <paramref name="attributeType" /> 的属性，则为含零元素的数组。</span><span class="sxs-lookup"><span data-stu-id="78560-146">An array of custom attributes applied to this member, or an array with zero elements if no attributes assignable to <paramref name="attributeType" /> have been applied.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78560-147">此方法会忽略 `inherit` 属性和事件的参数。</span><span class="sxs-lookup"><span data-stu-id="78560-147">This method ignores the `inherit` parameter for properties and events.</span></span> <span data-ttu-id="78560-148">若要在继承链中搜索属性和事件的属性，请使用方法的适当重载 <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="78560-148">To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78560-149">在 .NET Framework 版本2.0 中，如果属性以新的元数据格式存储，则此方法返回方法、构造函数和类型的安全属性。</span><span class="sxs-lookup"><span data-stu-id="78560-149">In the .NET Framework version 2.0, this method returns security attributes on methods, constructors, and types if the attributes are stored in the new metadata format.</span></span> <span data-ttu-id="78560-150">使用版本2.0 编译的程序集使用此格式。</span><span class="sxs-lookup"><span data-stu-id="78560-150">Assemblies compiled with version 2.0 use this format.</span></span> <span data-ttu-id="78560-151">使用早期版本的 .NET Framework 编译的动态程序集和程序集使用旧的 XML 格式。</span><span class="sxs-lookup"><span data-stu-id="78560-151">Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</span></span> <span data-ttu-id="78560-152">请参阅 [发出声明性安全特性](https://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)。</span><span class="sxs-lookup"><span data-stu-id="78560-152">See [Emitting Declarative Security Attributes](https://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78560-153">下面的示例定义一个名为 `BaseClass` 的类，该类具有两个非继承成员：一个名为的线程静态字段 `total` 和一个名为的不符合 CLS 的方法 `MethodA` 。</span><span class="sxs-lookup"><span data-stu-id="78560-153">The following example defines a class named `BaseClass` that has two non-inherited members: a thread static field named `total` and a non-CLS-compliant method named `MethodA`.</span></span>  <span data-ttu-id="78560-154">名为的类 `DerivedClass` 从继承 `BaseClass` ，并重写其 `MethodA` 方法。</span><span class="sxs-lookup"><span data-stu-id="78560-154">A class named `DerivedClass` inherits from `BaseClass` and overrides its `MethodA` method.</span></span> <span data-ttu-id="78560-155">请注意，不会将特性应用于的成员 `DerivedClass` 。</span><span class="sxs-lookup"><span data-stu-id="78560-155">Note that no attributes are applied to the members of `DerivedClass`.</span></span> <span data-ttu-id="78560-156">该示例将循环访问的成员 `DerivedClass` ，以确定 <xref:System.CLSCompliantAttribute> 或 <xref:System.ThreadStaticAttribute> 属性是否已应用于它们。</span><span class="sxs-lookup"><span data-stu-id="78560-156">The example iterates the members of `DerivedClass` to determine whether the <xref:System.CLSCompliantAttribute> or <xref:System.ThreadStaticAttribute> attribute as been applied to them.</span></span> <span data-ttu-id="78560-157">因为 `inherit` 为 `true` ，所以方法会搜索指定属性的的继承层次结构 `DerivedClass` 。</span><span class="sxs-lookup"><span data-stu-id="78560-157">Because `inherit` is `true`, the method searches the inheritance hierarchy of `DerivedClass` for the specified attribute.</span></span> <span data-ttu-id="78560-158">如示例中的输出所示，该 `total` 字段通过属性进行修饰 <xref:System.ThreadStaticAttribute> ， `MethodA` 方法用 <xref:System.CLSCompliantAttribute> 特性修饰。</span><span class="sxs-lookup"><span data-stu-id="78560-158">As the output from the example shows, the `total` field is decorated with the <xref:System.ThreadStaticAttribute> attribute, and the `MethodA` method is decorated with the <xref:System.CLSCompliantAttribute> attribute.</span></span>  
  
 [!code-csharp[System.Reflection.MemberInfo.GetCustomAttributes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Reflection.MemberInfo.GetCustomAttributes/cs/GetCustomAttributes1.cs#1)]
 [!code-vb[System.Reflection.MemberInfo.GetCustomAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Reflection.MemberInfo.GetCustomAttributes/vb/GetCustomAttributes1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="78560-159">无法加载自定义属性类型。</span><span class="sxs-lookup"><span data-stu-id="78560-159">A custom attribute type cannot be loaded.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="78560-160">如果 <paramref name="attributeType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="78560-160">If <paramref name="attributeType" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="78560-161">此成员属于加载到仅反射的上下文的类型。</span><span class="sxs-lookup"><span data-stu-id="78560-161">This member belongs to a type that is loaded into the reflection-only context.</span></span> <span data-ttu-id="78560-162">请参阅[如何：将程序集加载到仅反射上下文中](/dotnet/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context)。</span><span class="sxs-lookup"><span data-stu-id="78560-162">See [How to: Load Assemblies into the Reflection-Only Context](/dotnet/framework/reflection-and-codedom/how-to-load-assemblies-into-the-reflection-only-context).</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributesData">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt; GetCustomAttributesData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Reflection.CustomAttributeData&gt; GetCustomAttributesData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.GetCustomAttributesData" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomAttributesData () As IList(Of CustomAttributeData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IList&lt;System::Reflection::CustomAttributeData ^&gt; ^ GetCustomAttributesData();" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributesData : unit -&gt; System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;&#xA;override this.GetCustomAttributesData : unit -&gt; System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;" Usage="memberInfo.GetCustomAttributesData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.CustomAttributeData&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="78560-163">返回 <see cref="T:System.Reflection.CustomAttributeData" /> 对象列表，这些对象表示已应用到目标成员的特性相关数据。</span><span class="sxs-lookup"><span data-stu-id="78560-163">Returns a list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target member.</span></span></summary>
        <returns><span data-ttu-id="78560-164"><see cref="T:System.Reflection.CustomAttributeData" /> 对象的泛型列表，表示有关已应用于目标成员的特性的数据。</span><span class="sxs-lookup"><span data-stu-id="78560-164">A generic list of <see cref="T:System.Reflection.CustomAttributeData" /> objects representing data about the attributes that have been applied to the target member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78560-165">如果自定义属性本身是在加载到仅反射上下文中的代码中定义的，则使用此方法在仅反射上下文中检查代码的自定义属性。</span><span class="sxs-lookup"><span data-stu-id="78560-165">Use this method to examine the custom attributes of code in the reflection-only context, in cases where the custom attributes themselves are defined in code that is loaded into the reflection-only context.</span></span> <span data-ttu-id="78560-166"><xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> 在这种情况下，不能使用像和这样的方法，因为它们会创建特性的实例。</span><span class="sxs-lookup"><span data-stu-id="78560-166">Methods like <xref:System.Attribute.GetCustomAttributes%2A?displayProperty=nameWithType> and <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> cannot be used in such cases, because they create instances of the attributes.</span></span> <span data-ttu-id="78560-167">仅反射上下文中的代码无法执行。</span><span class="sxs-lookup"><span data-stu-id="78560-167">Code in the reflection-only context cannot be executed.</span></span> <span data-ttu-id="78560-168">有关详细信息和示例代码，请参阅 <xref:System.Reflection.CustomAttributeData> 类。</span><span class="sxs-lookup"><span data-stu-id="78560-168">For more information and for example code, see the <xref:System.Reflection.CustomAttributeData> class.</span></span>  
  
 <span data-ttu-id="78560-169">此方法获取类型、嵌套类型和类型成员的自定义特性数据，因为 <xref:System.Type> 表示类型成员的命名空间中的类和类 <xref:System.Reflection> 均派生自 <xref:System.Reflection.MemberInfo> 。</span><span class="sxs-lookup"><span data-stu-id="78560-169">This method gets custom attribute data for types, nested types, and type members, because the <xref:System.Type> class and the classes in the <xref:System.Reflection> namespace that represent type members all derive from <xref:System.Reflection.MemberInfo>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="memberInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">M:System.Runtime.InteropServices._MemberInfo.GetHashCode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="78560-170">返回此实例的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="78560-170">Returns the hash code for this instance.</span></span></summary>
        <returns><span data-ttu-id="78560-171">32 位有符号整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="78560-171">A 32-bit signed integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetType();" />
      <MemberSignature Language="F#" Value="override this.GetType : unit -&gt; Type" Usage="memberInfo.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="78560-172">发现成员的属性并提供对成员元数据的访问权限。</span><span class="sxs-lookup"><span data-stu-id="78560-172">Discovers the attributes of a member and provides access to member metadata.</span></span></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSameMetadataDefinitionAs">
      <MemberSignature Language="C#" Value="public virtual bool HasSameMetadataDefinitionAs (System.Reflection.MemberInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasSameMetadataDefinitionAs(class System.Reflection.MemberInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.HasSameMetadataDefinitionAs(System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function HasSameMetadataDefinitionAs (other As MemberInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool HasSameMetadataDefinitionAs(System::Reflection::MemberInfo ^ other);" />
      <MemberSignature Language="F#" Value="abstract member HasSameMetadataDefinitionAs : System.Reflection.MemberInfo -&gt; bool&#xA;override this.HasSameMetadataDefinitionAs : System.Reflection.MemberInfo -&gt; bool" Usage="memberInfo.HasSameMetadataDefinitionAs other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCollectible">
      <MemberSignature Language="C#" Value="public virtual bool IsCollectible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCollectible" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.IsCollectible" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsCollectible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsCollectible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCollectible : bool" Usage="System.Reflection.MemberInfo.IsCollectible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78560-173">获取一个值，该值指示此 <see cref="T:System.Reflection.MemberInfo" /> 对象是否是包含在可回收的 <see cref="T:System.Runtime.Loader.AssemblyLoadContext" /> 中的程序集的一部分。</span><span class="sxs-lookup"><span data-stu-id="78560-173">Gets a value that indicates whether this <see cref="T:System.Reflection.MemberInfo" /> object is part of an assembly held in a collectible <see cref="T:System.Runtime.Loader.AssemblyLoadContext" />.</span></span></summary>
        <value><span data-ttu-id="78560-174"><see langword="true" /> 如果 <see cref="T:System.Reflection.MemberInfo" /> 是保存在可回收程序集加载上下文中的程序集的一部分，则为; 否则为 <see langword="false" /> 。</span><span class="sxs-lookup"><span data-stu-id="78560-174"><see langword="true" /> if the <see cref="T:System.Reflection.MemberInfo" /> is part of an assembly held in a collectible assembly load context; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
<span data-ttu-id="78560-175">有关详细信息，请参阅[如何在 .NET Core 中使用和调试程序集可卸载性](/dotnet/standard/assembly/unloadability)。</span><span class="sxs-lookup"><span data-stu-id="78560-175">For more information, see [How to use and debug assembly unloadability in .NET Core](/dotnet/standard/assembly/unloadability).</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public abstract bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member IsDefined : Type * bool -&gt; bool" Usage="memberInfo.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)</InterfaceMember>
        <InterfaceMember FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">M:System.Runtime.InteropServices._MemberInfo.IsDefined(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="inherit" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="78560-176">要搜索的自定义属性的类型。</span><span class="sxs-lookup"><span data-stu-id="78560-176">The type of custom attribute to search for.</span></span> <span data-ttu-id="78560-177">该搜索包括派生类型。</span><span class="sxs-lookup"><span data-stu-id="78560-177">The search includes derived types.</span></span></param>
        <param name="inherit"><span data-ttu-id="78560-178">如果要搜索此成员的继承链以查找属性，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="78560-178"><see langword="true" /> to search this member's inheritance chain to find the attributes; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="78560-179">会忽略属性和事件的此参数。</span><span class="sxs-lookup"><span data-stu-id="78560-179">This parameter is ignored for properties and events.</span></span></param>
        <summary><span data-ttu-id="78560-180">在派生类中重写时，指示是否将指定类型或其派生类型的一个或多个特性应用于此成员。</span><span class="sxs-lookup"><span data-stu-id="78560-180">When overridden in a derived class, indicates whether one or more attributes of the specified type or of its derived types is applied to this member.</span></span></summary>
        <returns><span data-ttu-id="78560-181">如果将 <paramref name="attributeType" /> 或其任何派生类型的一个或多个实例应用于此成员，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="78560-181"><see langword="true" /> if one or more instances of <paramref name="attributeType" /> or any of its derived types is applied to this member; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78560-182">此方法会忽略 `inherit` 属性和事件的参数。</span><span class="sxs-lookup"><span data-stu-id="78560-182">This method ignores the `inherit` parameter for properties and events.</span></span> <span data-ttu-id="78560-183">若要在继承链中搜索属性和事件的属性，请使用方法的适当重载 <xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="78560-183">To search the inheritance chain for attributes on properties and events, use the appropriate overloads of the <xref:System.Attribute.IsDefined%2A?displayProperty=nameWithType> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78560-184">在 .NET Framework 版本2.0 中， `true` 如果类型、方法或构造函数具有以新的元数据格式存储的安全属性，则此方法返回。</span><span class="sxs-lookup"><span data-stu-id="78560-184">In the .NET Framework version 2.0, this method returns `true` if a type, method, or constructor has security attributes stored in the new metadata format.</span></span> <span data-ttu-id="78560-185">使用版本2.0 编译的程序集使用此格式。</span><span class="sxs-lookup"><span data-stu-id="78560-185">Assemblies compiled with version 2.0 use this format.</span></span> <span data-ttu-id="78560-186">使用早期版本的 .NET Framework 编译的动态程序集和程序集使用旧的 XML 格式。</span><span class="sxs-lookup"><span data-stu-id="78560-186">Dynamic assemblies and assemblies compiled with earlier versions of the .NET Framework use the old XML format.</span></span> <span data-ttu-id="78560-187">请参阅 [发出声明性安全特性](https://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5)。</span><span class="sxs-lookup"><span data-stu-id="78560-187">See [Emitting Declarative Security Attributes](https://msdn.microsoft.com/library/9eeddee8-ca89-4440-b84b-fd613f590cd5).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78560-188">下面的示例确定指定的特性是否应用于指定的成员。</span><span class="sxs-lookup"><span data-stu-id="78560-188">The following example determines whether the specified attribute is applied to the specified member.</span></span>  
  
 [!code-cpp[MemberInfo_GetCustomAttribute_IsDefined#1](~/samples/snippets/cpp/VS_Snippets_CLR/MemberInfo_GetCustomAttribute_IsDefined/CPP/memberinfo_getcustomattribute_isdefined.cpp#1)]
 [!code-csharp[MemberInfo_GetCustomAttribute_IsDefined#1](~/samples/snippets/csharp/VS_Snippets_CLR/MemberInfo_GetCustomAttribute_IsDefined/CS/memberinfo_getcustomattribute_isdefined.cs#1)]
 [!code-vb[MemberInfo_GetCustomAttribute_IsDefined#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MemberInfo_GetCustomAttribute_IsDefined/VB/memberinfo_getcustomattribute_isdefined.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Reflection.MemberInfo.MemberType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">P:System.Runtime.InteropServices._MemberInfo.MemberType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78560-189">在派生类中重写时，获取 <see cref="T:System.Reflection.MemberTypes" /> 值，该值指示成员类型 - 方法、构造函数、事件等。</span><span class="sxs-lookup"><span data-stu-id="78560-189">When overridden in a derived class, gets a <see cref="T:System.Reflection.MemberTypes" /> value indicating the type of the member - method, constructor, event, and so on.</span></span></summary>
        <value><span data-ttu-id="78560-190">指示成员类型的 <see cref="T:System.Reflection.MemberTypes" /> 值。</span><span class="sxs-lookup"><span data-stu-id="78560-190">A <see cref="T:System.Reflection.MemberTypes" /> value indicating the type of member.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78560-191">此属性在派生类中被重写，重写将返回相应的成员类型。</span><span class="sxs-lookup"><span data-stu-id="78560-191">This property is overridden in derived classes, and the override returns the appropriate member type.</span></span> <span data-ttu-id="78560-192">因此，在检查一组对象时（ <xref:System.Reflection.MemberInfo> 例如，由返回的数组）， <xref:System.Type.GetMembers%2A> <xref:System.Reflection.MemberInfo.MemberType%2A> 可以使用属性来确定任何给定成员的成员类型。</span><span class="sxs-lookup"><span data-stu-id="78560-192">Therefore, when you examine a set of <xref:System.Reflection.MemberInfo> objects - for example, the array returned by <xref:System.Type.GetMembers%2A> - the <xref:System.Reflection.MemberInfo.MemberType%2A> property can be used to determine the member type of any given member.</span></span>  
  
 <span data-ttu-id="78560-193">若要获取 `MemberType` 属性，请获取类 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="78560-193">To get the `MemberType` property, get the class <xref:System.Type>.</span></span> <span data-ttu-id="78560-194">从 `Type` 获取 <xref:System.Reflection.MethodInfo> 数组。</span><span class="sxs-lookup"><span data-stu-id="78560-194">From the `Type`, get the <xref:System.Reflection.MethodInfo> array.</span></span> <span data-ttu-id="78560-195">从 `MethodInfo` 数组中获取 `MemberTypes` 。</span><span class="sxs-lookup"><span data-stu-id="78560-195">From the `MethodInfo` array, get the `MemberTypes`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78560-196">下面的示例显示指定类的成员名称和类型。</span><span class="sxs-lookup"><span data-stu-id="78560-196">The following example displays the member name and type of a specified class.</span></span>  
  
 [!code-cpp[Classic MemberInfo.MemberType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MemberInfo.MemberType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MemberInfo.MemberType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MemberInfo.MemberType Example/CS/source.cs#1)]
 [!code-vb[Classic MemberInfo.MemberType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MemberInfo.MemberType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.MemberTypes" />
      </Docs>
    </Member>
    <Member MemberName="MetadataToken">
      <MemberSignature Language="C#" Value="public virtual int MetadataToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MetadataToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.MetadataToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MetadataToken As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MetadataToken { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MetadataToken : int" Usage="System.Reflection.MemberInfo.MetadataToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78560-197">获取一个值，该值标识元数据元素。</span><span class="sxs-lookup"><span data-stu-id="78560-197">Gets a value that identifies a metadata element.</span></span></summary>
        <value><span data-ttu-id="78560-198">结合 <see cref="P:System.Reflection.MemberInfo.Module" />，该值能够唯一标识元数据元素。</span><span class="sxs-lookup"><span data-stu-id="78560-198">A value which, in combination with <see cref="P:System.Reflection.MemberInfo.Module" />, uniquely identifies a metadata element.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78560-199">使用此属性获取的令牌可传递给非托管反射 API。</span><span class="sxs-lookup"><span data-stu-id="78560-199">The tokens obtained using this property can be passed to the unmanaged reflection API.</span></span> <span data-ttu-id="78560-200">有关详细信息，请参阅 [非托管反射 API](https://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8)。</span><span class="sxs-lookup"><span data-stu-id="78560-200">For more information, please see [Unmanaged Reflection API](https://msdn.microsoft.com/library/0c5bb9de-0cf6-438d-ba47-134e6c775fb8).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="78560-201">使用非托管反射 API 需要熟悉公共语言基础结构 (CLI) 文档，尤其是 "第二部分：元数据定义和语义" 和 "第三部分： CIL 指令集"。</span><span class="sxs-lookup"><span data-stu-id="78560-201">Using the unmanaged reflection API requires familiarity with the Common Language Infrastructure (CLI) documentation, especially "Partition II: Metadata Definition and Semantics" and "Partition III: CIL Instruction Set".</span></span> <span data-ttu-id="78560-202">可联机获取该文档；请参阅 MSDN 上的 [ECMA C# 和公共语言基础结构标准](https://go.microsoft.com/fwlink/?LinkID=99212)和 Ecma International 网站上的[标准 ECMA-335 - 公共语言基础结构 (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552)。</span><span class="sxs-lookup"><span data-stu-id="78560-202">The documentation is available online; see [ECMA C# and Common Language Infrastructure Standards](https://go.microsoft.com/fwlink/?LinkID=99212) on MSDN and [Standard ECMA-335 - Common Language Infrastructure (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) on the Ecma International Web site.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="78560-203">当前 <see cref="T:System.Reflection.MemberInfo" /> 表示数组方法（如 <see langword="Address" />），针对元素类型是尚未完成的动态类型的数组类型。</span><span class="sxs-lookup"><span data-stu-id="78560-203">The current <see cref="T:System.Reflection.MemberInfo" /> represents an array method, such as <see langword="Address" />, on an array type whose element type is a dynamic type that has not been completed.</span></span> <span data-ttu-id="78560-204">若要在这种情况下获取元数据标记，将 <see cref="T:System.Reflection.MemberInfo" /> 对象传递给 <see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)" /> 方法；或使用 <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> 方法直接获取标记，而不是首先使用 <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> 方法获取 <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="78560-204">To get a metadata token in this case, pass the <see cref="T:System.Reflection.MemberInfo" /> object to the <see cref="M:System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)" /> method; or use the <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> method to get the token directly, instead of using the <see cref="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])" /> method to get a <see cref="T:System.Reflection.MethodInfo" /> first.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public virtual System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.Module" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Reflection.MemberInfo.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78560-205">获取一个模块，在该模块中已经定义一个类型，该类型用于声明由当前 <see cref="T:System.Reflection.MemberInfo" /> 表示的成员。</span><span class="sxs-lookup"><span data-stu-id="78560-205">Gets the module in which the type that declares the member represented by the current <see cref="T:System.Reflection.MemberInfo" /> is defined.</span></span></summary>
        <value><span data-ttu-id="78560-206"><see cref="T:System.Reflection.Module" />，在其中已经定义一个类型，该类型用于声明由当前 <see cref="T:System.Reflection.MemberInfo" /> 表示的成员。</span><span class="sxs-lookup"><span data-stu-id="78560-206">The <see cref="T:System.Reflection.Module" /> in which the type that declares the member represented by the current <see cref="T:System.Reflection.MemberInfo" /> is defined.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78560-207">提供此属性是为了方便。</span><span class="sxs-lookup"><span data-stu-id="78560-207">This property is provided as a convenience.</span></span> <span data-ttu-id="78560-208">它等效于使用 <xref:System.Reflection.MemberInfo.DeclaringType%2A> 属性获取在其中声明该方法的类型，然后调用 <xref:System.Type.Module%2A> 生成的对象的属性 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="78560-208">It is equivalent to using the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property to get the type in which the method is declared, and then calling the <xref:System.Type.Module%2A> property of the resulting <xref:System.Type> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78560-209">下面的代码示例声明了继承 <xref:System.Object> 和重写的类 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="78560-209">The following code example declares a class that inherits <xref:System.Object> and overrides <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="78560-210">该示例获取 <xref:System.Reflection.MethodInfo> 类的 `ToString` 方法和继承的方法的对象 <xref:System.Object.GetHashCode%2A> ，并显示声明这两种方法的模块的名称。</span><span class="sxs-lookup"><span data-stu-id="78560-210">The example obtains <xref:System.Reflection.MethodInfo> objects for the class's `ToString` method and for the inherited <xref:System.Object.GetHashCode%2A> method, and displays the names of the modules in which the two methods are declared.</span></span>  
  
 [!code-cpp[System.Reflection.MemberInfo.Module#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Reflection.MemberInfo.Module/cpp/source.cpp#1)]
 [!code-csharp[System.Reflection.MemberInfo.Module#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Reflection.MemberInfo.Module/CS/source.cs#1)]
 [!code-vb[System.Reflection.MemberInfo.Module#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Reflection.MemberInfo.Module/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="78560-211">未实现此方法。</span><span class="sxs-lookup"><span data-stu-id="78560-211">This method is not implemented.</span></span></exception>
        <altmember cref="T:System.Reflection.Module" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Reflection.MemberInfo.Name" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">P:System.Runtime.InteropServices._MemberInfo.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78560-212">获取当前成员的名称。</span><span class="sxs-lookup"><span data-stu-id="78560-212">Gets the name of the current member.</span></span></summary>
        <value><span data-ttu-id="78560-213">包含此成员名称的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="78560-213">A <see cref="T:System.String" /> containing the name of this member.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78560-214">仅返回成员的简单名称，而不是完全限定名称。</span><span class="sxs-lookup"><span data-stu-id="78560-214">Only the simple name of the member is returned, not the fully qualified name.</span></span>  
  
 <span data-ttu-id="78560-215">若要获取 <xref:System.Reflection.MemberInfo.Name%2A> 属性，请获取类 <xref:System.Type> 。</span><span class="sxs-lookup"><span data-stu-id="78560-215">To get the <xref:System.Reflection.MemberInfo.Name%2A> property, get the class <xref:System.Type>.</span></span> <span data-ttu-id="78560-216">从 `Type` 获取 <xref:System.Reflection.MemberInfo> 数组。</span><span class="sxs-lookup"><span data-stu-id="78560-216">From the `Type`, get the <xref:System.Reflection.MemberInfo> array.</span></span> <span data-ttu-id="78560-217">从 `MemberInfo` 数组的元素中获取 `Name` 属性。</span><span class="sxs-lookup"><span data-stu-id="78560-217">From a `MemberInfo` element of the array, obtain the `Name` property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78560-218">此示例列出 `Name` `DeclaringType` 指定类的每个成员的和属性。</span><span class="sxs-lookup"><span data-stu-id="78560-218">This example lists the `Name` and `DeclaringType` property of each member of the specified class.</span></span>  
  
 [!code-cpp[Classic MemberInfo.Name Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MemberInfo.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MemberInfo.Name Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MemberInfo.Name Example/CS/source.cs#1)]
 [!code-vb[Classic MemberInfo.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MemberInfo.Name Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Reflection.MemberInfo left, System.Reflection.MemberInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Reflection.MemberInfo left, class System.Reflection.MemberInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.op_Equality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As MemberInfo, right As MemberInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Reflection::MemberInfo ^ left, System::Reflection::MemberInfo ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Reflection.MemberInfo * System.Reflection.MemberInfo -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="right" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="78560-219">要与 <paramref name="right" /> 进行比较的 <see cref="T:System.Reflection.MemberInfo" />。</span><span class="sxs-lookup"><span data-stu-id="78560-219">The <see cref="T:System.Reflection.MemberInfo" /> to compare to <paramref name="right" />.</span></span></param>
        <param name="right"><span data-ttu-id="78560-220">要与 <paramref name="left" /> 进行比较的 <see cref="T:System.Reflection.MemberInfo" />。</span><span class="sxs-lookup"><span data-stu-id="78560-220">The <see cref="T:System.Reflection.MemberInfo" /> to compare to <paramref name="left" />.</span></span></param>
        <summary><span data-ttu-id="78560-221">指示两个 <see cref="T:System.Reflection.MemberInfo" /> 对象是否相等。</span><span class="sxs-lookup"><span data-stu-id="78560-221">Indicates whether two <see cref="T:System.Reflection.MemberInfo" /> objects are equal.</span></span></summary>
        <returns><span data-ttu-id="78560-222">如果 <paramref name="left" /> 等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="78560-222"><see langword="true" /> if <paramref name="left" /> is equal to <paramref name="right" />; otherwise <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Reflection.MemberInfo left, System.Reflection.MemberInfo right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Reflection.MemberInfo left, class System.Reflection.MemberInfo right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.op_Inequality(System.Reflection.MemberInfo,System.Reflection.MemberInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As MemberInfo, right As MemberInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Reflection::MemberInfo ^ left, System::Reflection::MemberInfo ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Reflection.MemberInfo * System.Reflection.MemberInfo -&gt; bool" Usage="System.Reflection.MemberInfo.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Reflection.MemberInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="right" Type="System.Reflection.MemberInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="left"><span data-ttu-id="78560-223">要与 <paramref name="right" /> 进行比较的 <see cref="T:System.Reflection.MemberInfo" />。</span><span class="sxs-lookup"><span data-stu-id="78560-223">The <see cref="T:System.Reflection.MemberInfo" /> to compare to <paramref name="right" />.</span></span></param>
        <param name="right"><span data-ttu-id="78560-224">要与 <paramref name="left" /> 进行比较的 <see cref="T:System.Reflection.MemberInfo" />。</span><span class="sxs-lookup"><span data-stu-id="78560-224">The <see cref="T:System.Reflection.MemberInfo" /> to compare to <paramref name="left" />.</span></span></param>
        <summary><span data-ttu-id="78560-225">指示两个 <see cref="T:System.Reflection.MemberInfo" /> 对象是否不相等。</span><span class="sxs-lookup"><span data-stu-id="78560-225">Indicates whether two <see cref="T:System.Reflection.MemberInfo" /> objects are not equal.</span></span></summary>
        <returns><span data-ttu-id="78560-226">如果 <paramref name="left" /> 不等于 <paramref name="right" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="78560-226"><see langword="true" /> if <paramref name="left" /> is not equal to <paramref name="right" />; otherwise <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public abstract Type? ReflectedType { get; }" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MemberInfo.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Reflection.MemberInfo.ReflectedType" />
      <MemberSignature Language="C#" Value="public abstract Type ReflectedType { get; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">P:System.Runtime.InteropServices._MemberInfo.ReflectedType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="78560-227">获取用于获取 <see langword="MemberInfo" /> 的此实例的类对象。</span><span class="sxs-lookup"><span data-stu-id="78560-227">Gets the class object that was used to obtain this instance of <see langword="MemberInfo" />.</span></span></summary>
        <value><span data-ttu-id="78560-228"><see langword="Type" /> 对象，通过它获取了此 <see langword="MemberInfo" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="78560-228">The <see langword="Type" /> object through which this <see langword="MemberInfo" /> object was obtained.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78560-229">`ReflectedType`属性检索 <xref:System.Type> 用于获取的此实例的对象 `MemberInfo` 。</span><span class="sxs-lookup"><span data-stu-id="78560-229">The `ReflectedType` property retrieves the <xref:System.Type> object that was used to obtain this instance of `MemberInfo`.</span></span> <span data-ttu-id="78560-230"><xref:System.Reflection.MemberInfo.DeclaringType%2A>如果此 <xref:System.Reflection.MemberInfo> 对象表示继承自基类的成员，则这可能与属性的值不同。</span><span class="sxs-lookup"><span data-stu-id="78560-230">This may differ from the value of the <xref:System.Reflection.MemberInfo.DeclaringType%2A> property if this <xref:System.Reflection.MemberInfo> object represents a member that is inherited from a base class.</span></span>  
  
 <span data-ttu-id="78560-231">如果 `MemberInfo` 对象是全局成员 (即，如果它是从方法获取的（它 <xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType> 在模块) 上返回全局方法），则返回的 <xref:System.Reflection.MemberInfo.DeclaringType%2A> 将为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="78560-231">If the `MemberInfo` object is a global member (that is, if it was obtained from the <xref:System.Reflection.Module.GetMethods%2A?displayProperty=nameWithType> method, which returns global methods on a module), the returned <xref:System.Reflection.MemberInfo.DeclaringType%2A> will be `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="78560-232">下面的代码示例演示如何在从 <xref:System.Reflection.MemberInfo.ReflectedType%2A> 类型获得的中查看成员时进行更改 <xref:System.Object.ToString%2A?displayProperty=nameWithType> <xref:System.Reflection.MemberInfo> <xref:System.Object> ，以及从 <xref:System.Reflection.MemberInfo> <xref:System.Reflection.MemberInfo> 继承但不 <xref:System.Object> 重写的类 <xref:System.Object.ToString%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="78560-232">The following code example shows how the <xref:System.Reflection.MemberInfo.ReflectedType%2A> changes when the member <xref:System.Object.ToString%2A?displayProperty=nameWithType> is viewed from a <xref:System.Reflection.MemberInfo> obtained from type <xref:System.Object> and from a <xref:System.Reflection.MemberInfo> obtained from the <xref:System.Reflection.MemberInfo> class itself, which inherits <xref:System.Object> but does not override <xref:System.Object.ToString%2A?displayProperty=nameWithType>.</span></span>  
  
 [!code-cpp[Classic MemberInfo.ReflectedType Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic MemberInfo.ReflectedType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MemberInfo.ReflectedType Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic MemberInfo.ReflectedType Example/CS/source.cs#1)]
 [!code-vb[Classic MemberInfo.ReflectedType Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic MemberInfo.ReflectedType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.GetCustomAttributes">
      <MemberSignature Language="C#" Value="object[] ICustomAttributeProvider.GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function GetCustomAttributes (inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Object ^&gt; ^ System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool inherit) = System::Reflection::ICustomAttributeProvider::GetCustomAttributes;" />
      <MemberSignature Language="F#" Value="abstract member System.Reflection.ICustomAttributeProvider.GetCustomAttributes : bool -&gt; obj[]&#xA;override this.System.Reflection.ICustomAttributeProvider.GetCustomAttributes : bool -&gt; obj[]" Usage="memberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="inherit"><span data-ttu-id="78560-233">为 <see langword="true" /> 时，查找继承的自定义特性的层次结构链。</span><span class="sxs-lookup"><span data-stu-id="78560-233">When <see langword="true" />, look up the hierarchy chain for the inherited custom attribute.</span></span></param>
        <summary><span data-ttu-id="78560-234">返回在该成员上定义的所有自定义特性的数组（已命名的特性除外），如果没有自定义特性，则返回空数组。</span><span class="sxs-lookup"><span data-stu-id="78560-234">Returns an array of all of the custom attributes defined on this member, excluding named attributes, or an empty array if there are no custom attributes.</span></span></summary>
        <returns><span data-ttu-id="78560-235">表示自定义特性的对象数组或空数组。</span><span class="sxs-lookup"><span data-stu-id="78560-235">An array of Objects representing custom attributes, or an empty array.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.GetCustomAttributes">
      <MemberSignature Language="C#" Value="object[] ICustomAttributeProvider.GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object[] System.Reflection.ICustomAttributeProvider.GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Object ^&gt; ^ System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type ^ attributeType, bool inherit) = System::Reflection::ICustomAttributeProvider::GetCustomAttributes;" />
      <MemberSignature Language="F#" Value="abstract member System.Reflection.ICustomAttributeProvider.GetCustomAttributes : Type * bool -&gt; obj[]&#xA;override this.System.Reflection.ICustomAttributeProvider.GetCustomAttributes : Type * bool -&gt; obj[]" Usage="memberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.5;netstandard-1.6" />
        <Parameter Name="inherit" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="78560-236">自定义属性的类型。</span><span class="sxs-lookup"><span data-stu-id="78560-236">The type of the custom attributes.</span></span></param>
        <param name="inherit"><span data-ttu-id="78560-237">为 <see langword="true" /> 时，查找继承的自定义特性的层次结构链。</span><span class="sxs-lookup"><span data-stu-id="78560-237">When <see langword="true" />, look up the hierarchy chain for the inherited custom attribute.</span></span></param>
        <summary><span data-ttu-id="78560-238">返回在该成员上定义、由类型标识的自定义属性数组，如果没有该类型的自定义属性，则返回空数组。</span><span class="sxs-lookup"><span data-stu-id="78560-238">Returns an array of custom attributes defined on this member, identified by type, or an empty array if there are no custom attributes of that type.</span></span></summary>
        <returns><span data-ttu-id="78560-239">表示自定义特性的对象数组或空数组。</span><span class="sxs-lookup"><span data-stu-id="78560-239">An array of Objects representing custom attributes, or an empty array.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Reflection.ICustomAttributeProvider.IsDefined">
      <MemberSignature Language="C#" Value="bool ICustomAttributeProvider.IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Reflection.ICustomAttributeProvider.IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean Implements ICustomAttributeProvider.IsDefined" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Reflection.ICustomAttributeProvider.IsDefined(Type ^ attributeType, bool inherit) = System::Reflection::ICustomAttributeProvider::IsDefined;" />
      <MemberSignature Language="F#" Value="abstract member System.Reflection.ICustomAttributeProvider.IsDefined : Type * bool -&gt; bool&#xA;override this.System.Reflection.ICustomAttributeProvider.IsDefined : Type * bool -&gt; bool" Usage="memberInfo.System.Reflection.ICustomAttributeProvider.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.5;netstandard-1.6" />
        <Parameter Name="inherit" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netstandard-1.5;netstandard-1.6" />
      </Parameters>
      <Docs>
        <param name="attributeType"><span data-ttu-id="78560-240">自定义属性的类型。</span><span class="sxs-lookup"><span data-stu-id="78560-240">The type of the custom attributes.</span></span></param>
        <param name="inherit"><span data-ttu-id="78560-241">为 <see langword="true" /> 时，查找继承的自定义特性的层次结构链。</span><span class="sxs-lookup"><span data-stu-id="78560-241">When <see langword="true" />, look up the hierarchy chain for the inherited custom attribute.</span></span></param>
        <summary><span data-ttu-id="78560-242">指示是否在该成员上定义了一个或多个 <paramref name="attributeType" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="78560-242">Indicates whether one or more instance of <paramref name="attributeType" /> is defined on this member.</span></span></summary>
        <returns><span data-ttu-id="78560-243">如果在该成员上定义 <paramref name="attributeType" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="78560-243"><see langword="true" /> if the <paramref name="attributeType" /> is defined on this member; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MemberInfo.GetIDsOfNames">
      <MemberSignature Language="C#" Value="void _MemberInfo.GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr) Implements _MemberInfo.GetIDsOfNames" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId) = System::Runtime::InteropServices::_MemberInfo::GetIDsOfNames;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.InteropServices._MemberInfo.GetIDsOfNames : Guid * nativeint * uint32 * uint32 * nativeint -&gt; unit&#xA;override this.System.Runtime.InteropServices._MemberInfo.GetIDsOfNames : Guid * nativeint * uint32 * uint32 * nativeint -&gt; unit" Usage="memberInfo.System.Runtime.InteropServices._MemberInfo.GetIDsOfNames (riid, rgszNames, cNames, lcid, rgDispId)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rgszNames" Type="System.IntPtr" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="cNames" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="rgDispId" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="riid"><span data-ttu-id="78560-244">留待将来使用。</span><span class="sxs-lookup"><span data-stu-id="78560-244">Reserved for future use.</span></span> <span data-ttu-id="78560-245">必须为 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="78560-245">Must be IID_NULL.</span></span></param>
        <param name="rgszNames"><span data-ttu-id="78560-246">要映射的名称的传入数组。</span><span class="sxs-lookup"><span data-stu-id="78560-246">Passed-in array of names to be mapped.</span></span></param>
        <param name="cNames"><span data-ttu-id="78560-247">要映射的名称的计数。</span><span class="sxs-lookup"><span data-stu-id="78560-247">Count of the names to be mapped.</span></span></param>
        <param name="lcid"><span data-ttu-id="78560-248">要在其中解释名称的区域设置上下文。</span><span class="sxs-lookup"><span data-stu-id="78560-248">The locale context in which to interpret the names.</span></span></param>
        <param name="rgDispId"><span data-ttu-id="78560-249">调用方分配的数组，用于接收与名称对应的 ID。</span><span class="sxs-lookup"><span data-stu-id="78560-249">Caller-allocated array which receives the IDs corresponding to the names.</span></span></param>
        <summary><span data-ttu-id="78560-250">将一组名称映射为对应的一组调度标识符。</span><span class="sxs-lookup"><span data-stu-id="78560-250">Maps a set of names to a corresponding set of dispatch identifiers.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78560-251">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="78560-251">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="78560-252">有关的详细信息 `IDispatch::GetIDsOfNames` ，请参阅 MSDN library。</span><span class="sxs-lookup"><span data-stu-id="78560-252">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="78560-253">此方法称为使用 COM <c>IDispatch</c> 接口的后期绑定。</span><span class="sxs-lookup"><span data-stu-id="78560-253">The method is called late-bound using the COM <c>IDispatch</c> interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MemberInfo.GetType">
      <MemberSignature Language="C#" Value="Type _MemberInfo.GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Type System.Runtime.InteropServices._MemberInfo.GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType" />
      <MemberSignature Language="VB.NET" Value="Function GetType () As Type Implements _MemberInfo.GetType" />
      <MemberSignature Language="C++ CLI" Value=" virtual Type ^ System.Runtime.InteropServices._MemberInfo.GetType() = System::Runtime::InteropServices::_MemberInfo::GetType;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.InteropServices._MemberInfo.GetType : unit -&gt; Type&#xA;override this.System.Runtime.InteropServices._MemberInfo.GetType : unit -&gt; Type" Usage="memberInfo.System.Runtime.InteropServices._MemberInfo.GetType " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.GetType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="78560-254">获取一个表示 <see cref="T:System.Reflection.MemberInfo" /> 类的 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="78560-254">Gets a <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.MemberInfo" /> class.</span></span></summary>
        <returns><span data-ttu-id="78560-255">一个表示 <see cref="T:System.Reflection.MemberInfo" /> 类的 <see cref="T:System.Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="78560-255">A <see cref="T:System.Type" /> object representing the <see cref="T:System.Reflection.MemberInfo" /> class.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MemberInfo.GetTypeInfo">
      <MemberSignature Language="C#" Value="void _MemberInfo.GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr) Implements _MemberInfo.GetTypeInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo) = System::Runtime::InteropServices::_MemberInfo::GetTypeInfo;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.InteropServices._MemberInfo.GetTypeInfo : uint32 * uint32 * nativeint -&gt; unit&#xA;override this.System.Runtime.InteropServices._MemberInfo.GetTypeInfo : uint32 * uint32 * nativeint -&gt; unit" Usage="memberInfo.System.Runtime.InteropServices._MemberInfo.GetTypeInfo (iTInfo, lcid, ppTInfo)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="iTInfo"><span data-ttu-id="78560-256">要返回的类型信息。</span><span class="sxs-lookup"><span data-stu-id="78560-256">The type information to return.</span></span></param>
        <param name="lcid"><span data-ttu-id="78560-257">类型信息的区域设置标识符。</span><span class="sxs-lookup"><span data-stu-id="78560-257">The locale identifier for the type information.</span></span></param>
        <param name="ppTInfo"><span data-ttu-id="78560-258">接收一个指针，指向请求的类型信息对象。</span><span class="sxs-lookup"><span data-stu-id="78560-258">Receives a pointer to the requested type information object.</span></span></param>
        <summary><span data-ttu-id="78560-259">检索对象的类型信息，然后可以使用该信息获取接口的类型信息。</span><span class="sxs-lookup"><span data-stu-id="78560-259">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78560-260">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="78560-260">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="78560-261">有关的详细信息 `IDispatch::GetTypeInfo` ，请参阅 MSDN library。</span><span class="sxs-lookup"><span data-stu-id="78560-261">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="78560-262">此方法称为使用 COM <c>IDispatch</c> 接口的后期绑定。</span><span class="sxs-lookup"><span data-stu-id="78560-262">The method is called late-bound using the COM <c>IDispatch</c> interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount">
      <MemberSignature Language="C#" Value="void _MemberInfo.GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Sub GetTypeInfoCount (ByRef pcTInfo As UInteger) Implements _MemberInfo.GetTypeInfoCount" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo) = System::Runtime::InteropServices::_MemberInfo::GetTypeInfoCount;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount : uint32 -&gt; unit&#xA;override this.System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount : uint32 -&gt; unit" Usage="memberInfo.System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount pcTInfo" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(System.UInt32@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32" RefType="out" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pcTInfo"><span data-ttu-id="78560-263">指向一个位置，该位置接收对象提供的类型信息接口的数量。</span><span class="sxs-lookup"><span data-stu-id="78560-263">Points to a location that receives the number of type information interfaces provided by the object.</span></span></param>
        <summary><span data-ttu-id="78560-264">检索对象提供的类型信息接口的数量（0 或 1）。</span><span class="sxs-lookup"><span data-stu-id="78560-264">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78560-265">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="78560-265">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="78560-266">有关的详细信息 `IDispatch::GetTypeInfoCount` ，请参阅 MSDN library。</span><span class="sxs-lookup"><span data-stu-id="78560-266">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="78560-267">此方法称为使用 COM <c>IDispatch</c> 接口的后期绑定。</span><span class="sxs-lookup"><span data-stu-id="78560-267">The method is called late-bound using the COM <c>IDispatch</c> interface.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.InteropServices._MemberInfo.Invoke">
      <MemberSignature Language="C#" Value="void _MemberInfo.Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.InteropServices._MemberInfo.Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr) Implements _MemberInfo.Invoke" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.InteropServices._MemberInfo.Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr) = System::Runtime::InteropServices::_MemberInfo::Invoke;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.InteropServices._MemberInfo.Invoke : uint32 * Guid * uint32 * int16 * nativeint * nativeint * nativeint * nativeint -&gt; unit&#xA;override this.System.Runtime.InteropServices._MemberInfo.Invoke : uint32 * Guid * uint32 * int16 * nativeint * nativeint * nativeint * nativeint -&gt; unit" Usage="memberInfo.System.Runtime.InteropServices._MemberInfo.Invoke (dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.InteropServices._MemberInfo.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Reflection</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="riid" Type="System.Guid" RefType="ref" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="lcid" Type="System.UInt32" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="wFlags" Type="System.Int16" Index="3" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pDispParams" Type="System.IntPtr" Index="4" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pVarResult" Type="System.IntPtr" Index="5" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" Index="6" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="puArgErr" Type="System.IntPtr" Index="7" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dispIdMember"><span data-ttu-id="78560-268">标识成员。</span><span class="sxs-lookup"><span data-stu-id="78560-268">Identifies the member.</span></span></param>
        <param name="riid"><span data-ttu-id="78560-269">留待将来使用。</span><span class="sxs-lookup"><span data-stu-id="78560-269">Reserved for future use.</span></span> <span data-ttu-id="78560-270">必须为 IID_NULL。</span><span class="sxs-lookup"><span data-stu-id="78560-270">Must be IID_NULL.</span></span></param>
        <param name="lcid"><span data-ttu-id="78560-271">要在其中解释自变量的区域设置上下文。</span><span class="sxs-lookup"><span data-stu-id="78560-271">The locale context in which to interpret arguments.</span></span></param>
        <param name="wFlags"><span data-ttu-id="78560-272">描述调用的上下文的标志。</span><span class="sxs-lookup"><span data-stu-id="78560-272">Flags describing the context of the call.</span></span></param>
        <param name="pDispParams"><span data-ttu-id="78560-273">指向一个结构的指针，该结构包含一个参数数组、一个命名参数的 DISPID 参数数组和数组中元素数的计数。</span><span class="sxs-lookup"><span data-stu-id="78560-273">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span></span></param>
        <param name="pVarResult"><span data-ttu-id="78560-274">指向要存储结果的位置的指针。</span><span class="sxs-lookup"><span data-stu-id="78560-274">Pointer to the location where the result is to be stored.</span></span></param>
        <param name="pExcepInfo"><span data-ttu-id="78560-275">指向一个包含异常信息的结构的指针。</span><span class="sxs-lookup"><span data-stu-id="78560-275">Pointer to a structure that contains exception information.</span></span></param>
        <param name="puArgErr"><span data-ttu-id="78560-276">第一个出错参数的索引。</span><span class="sxs-lookup"><span data-stu-id="78560-276">The index of the first argument that has an error.</span></span></param>
        <summary><span data-ttu-id="78560-277">提供对某一对象公开的属性和方法的访问。</span><span class="sxs-lookup"><span data-stu-id="78560-277">Provides access to properties and methods exposed by an object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="78560-278">此方法用于从非托管代码访问托管类，不应从托管代码调用。</span><span class="sxs-lookup"><span data-stu-id="78560-278">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="78560-279">有关的详细信息 `IDispatch::Invoke` ，请参阅 MSDN library。</span><span class="sxs-lookup"><span data-stu-id="78560-279">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException"><span data-ttu-id="78560-280">此方法称为使用 COM <c>IDispatch</c> 接口的后期绑定。</span><span class="sxs-lookup"><span data-stu-id="78560-280">The method is called late-bound using the COM <c>IDispatch</c> interface.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
