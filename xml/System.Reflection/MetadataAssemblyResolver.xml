<Type Name="MetadataAssemblyResolver" FullName="System.Reflection.MetadataAssemblyResolver">
  <Metadata><Meta Name="ms.openlocfilehash" Value="35bb0362331365d098d34336352940f622b432df" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86788492" /></Metadata><TypeSignature Language="C#" Value="public abstract class MetadataAssemblyResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MetadataAssemblyResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MetadataAssemblyResolver" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MetadataAssemblyResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataAssemblyResolver abstract" />
  <TypeSignature Language="F#" Value="type MetadataAssemblyResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 <see cref="T:System.Reflection.MetadataLoadContext" /> 使用的绑定算法提供基类。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MetadataAssemblyResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataAssemblyResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MetadataAssemblyResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Reflection.MetadataAssemblyResolver" /> 的实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Assembly Resolve (System.Reflection.MetadataLoadContext context, System.Reflection.AssemblyName assemblyName);" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.Assembly Resolve(class System.Reflection.MetadataLoadContext context, class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataAssemblyResolver.Resolve(System.Reflection.MetadataLoadContext,System.Reflection.AssemblyName)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Resolve (context As MetadataLoadContext, assemblyName As AssemblyName) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Reflection::Assembly ^ Resolve(System::Reflection::MetadataLoadContext ^ context, System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="abstract member Resolve : System.Reflection.MetadataLoadContext * System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="metadataAssemblyResolver.Resolve (context, assemblyName)" />
      <MemberSignature Language="C#" Value="public abstract System.Reflection.Assembly? Resolve (System.Reflection.MetadataLoadContext context, System.Reflection.AssemblyName assemblyName);" FrameworkAlternate="dotnet-plat-ext-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Reflection.MetadataLoadContext" />
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="context">元数据加载上下文对象，表示为仅供检查目的而加载的 <see cref="T:System.Type" /> 对象的封闭范围。</param>
        <param name="assemblyName">程序集的名称。</param>
        <summary>根据给定程序集名称返回程序集。</summary>
        <returns>提供的 <paramref name="assemblyName" /> 的程序集。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

当 <xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyName%2A> 调用时或一个程序集中的某个类型依赖于其他程序集时，将会将程序集名称绑定到程序集。 重写应使用的处理程序 `Resolve` <xref:System.Reflection.MetadataLoadContext.LoadFromStream%2A?displayProperty=nameWithType> ， <xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath%2A?displayProperty=nameWithType> 或 <xref:System.Reflection.MetadataLoadContext.LoadFromByteArray%2A?displayProperty=nameWithType> 加载请求的程序集并返回它。

若要指示未能找到程序集，处理程序应返回， `null` 而不是引发异常。 返回 `null` 会提交失败，以便将来尝试加载该名称失败，而不会重新调用处理程序。

如果处理程序引发异常，则该异常将传递到调用触发绑定的操作的应用程序。 <xref:System.Reflection.MetadataLoadContext>不会捕获它，并且不会进行任何绑定。

通常，对于同一名称，处理程序将不会被调用一次，除非两个线程争用加载同一程序集。 即使在这种情况下，结果也会入选，并以原子方式绑定到名称。

<xref:System.Reflection.MetadataLoadContext>特意不在返回的程序集上执行任何引用匹配，因为构成了引用定义的匹配项是策略。 它也是一种尽力避免的任意限制 <xref:System.Reflection.MetadataLoadContext> 。

<xref:System.Reflection.MetadataLoadContext>不能使用其他元数据加载上下文中的程序集，也不能使用其他类型提供程序 (例如，基础运行时自身的反射系统) 。 如果处理程序返回此类程序集，则会 <xref:System.Reflection.MetadataLoadContext> 引发 <xref:System.IO.FileLoadException> 。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
