<Type Name="TypeFilter" FullName="System.Reflection.TypeFilter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="03817c41478ee9571c9c417cd57a4eda4e766fc7" /><Meta Name="ms.sourcegitcommit" Value="b6b9d5f3f9c7eb43f14a8a1a68d044603cb8ed73" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/18/2020" /><Meta Name="ms.locfileid" Value="83520188" /></Metadata><TypeSignature Language="C#" Value="public delegate bool TypeFilter(Type m, object filterCriteria);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed TypeFilter extends System.MulticastDelegate" FrameworkAlternate="net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.TypeFilter" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function TypeFilter(m As Type, filterCriteria As Object) As Boolean " />
  <TypeSignature Language="C++ CLI" Value="public delegate bool TypeFilter(Type ^ m, System::Object ^ filterCriteria);" />
  <TypeSignature Language="F#" Value="type TypeFilter = delegate of Type * obj -&gt; bool" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed TypeFilter extends System.MulticastDelegate" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Reflection" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Reflection" FromVersion="4.2.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Reflection" FromVersion="4.2.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Reflection" FromVersion="4.2.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="m" Type="System.Type" />
    <Parameter Name="filterCriteria" Type="System.Object" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="m"><span data-ttu-id="49a9d-101">对其应用筛选器的 <see langword="Type" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="49a9d-101">The <see langword="Type" /> object to which the filter is applied.</span></span></param>
    <param name="filterCriteria"><span data-ttu-id="49a9d-102">用于筛选列表的任意对象。</span><span class="sxs-lookup"><span data-stu-id="49a9d-102">An arbitrary object used to filter the list.</span></span></param>
    <summary><span data-ttu-id="49a9d-103">筛选 <see cref="T:System.Type" /> 对象数组中表示的类。</span><span class="sxs-lookup"><span data-stu-id="49a9d-103">Filters the classes represented in an array of <see cref="T:System.Type" /> objects.</span></span></summary>
    <returns><span data-ttu-id="49a9d-104">若要在筛选后的列表中包括 <see cref="T:System.Type" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="49a9d-104"><see langword="true" /> to include the <see cref="T:System.Type" /> in the filtered list; otherwise <see langword="false" />.</span></span></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49a9d-105">`TypeFilter` 委托用于筛选类的列表。</span><span class="sxs-lookup"><span data-stu-id="49a9d-105">The `TypeFilter` delegate is used to filter a list of classes.</span></span> <span data-ttu-id="49a9d-106">具体而言，可以使用它来筛选 <xref:System.Type> 对象数组中表示的类。</span><span class="sxs-lookup"><span data-stu-id="49a9d-106">Specifically, you use it to filter the classes represented in an array of <xref:System.Type> objects.</span></span> <span data-ttu-id="49a9d-107"><xref:System.Type.FindInterfaces%2A?displayProperty=nameWithType> 方法使用此委托来筛选它返回的接口的列表。</span><span class="sxs-lookup"><span data-stu-id="49a9d-107">The <xref:System.Type.FindInterfaces%2A?displayProperty=nameWithType> method uses this delegate to filter the list of interfaces that it returns.</span></span> <span data-ttu-id="49a9d-108"><xref:System.Delegate> 和 <xref:System.MulticastDelegate> 的每个派生类都具有构造函数和 `DynamicInvoke` 方法。</span><span class="sxs-lookup"><span data-stu-id="49a9d-108">Every derived class of <xref:System.Delegate> and <xref:System.MulticastDelegate> has a constructor and a `DynamicInvoke` method.</span></span> <span data-ttu-id="49a9d-109">请参阅 `Delegate`C++说明中给定的 Visual 代码示例。</span><span class="sxs-lookup"><span data-stu-id="49a9d-109">See the Visual C++ code example given in the description for `Delegate`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="49a9d-110">此示例演示如何定义一个与 <xref:System.Reflection.TypeFilter> 委托原型匹配的方法，该方法允许你使用反射来筛选或返回匹配项的子集。</span><span class="sxs-lookup"><span data-stu-id="49a9d-110">This example shows how to define a method matching the <xref:System.Reflection.TypeFilter> delegate prototype allowing you to use reflection to filter or return a subset of matching entries.</span></span>  
  
 [!code-vb[Typefilter#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/TypeFilter/VB/Typefilter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
    <altmember cref="T:System.Object" />
    <altmember cref="T:System.Delegate" />
    <altmember cref="T:System.MulticastDelegate" />
  </Docs>
</Type>
