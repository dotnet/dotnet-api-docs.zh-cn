<Type Name="MetadataLoadContext" FullName="System.Reflection.MetadataLoadContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="483d36d82360ba1ca86e8144cae50af883f5d66a" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83972266" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataLoadContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataLoadContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MetadataLoadContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataLoadContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataLoadContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataLoadContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="13f0a-101">表示为仅用于检查目的而加载的 Type 对象的封闭范围。</span><span class="sxs-lookup"><span data-stu-id="13f0a-101">Represents a closed universe of Type objects loaded for inspection-only purposes.</span></span> <span data-ttu-id="13f0a-102">每个 MetadataLoadContext 都可以拥有自己的绑定规则，并与所有其他 MetadataLoadContexts 隔离。</span><span class="sxs-lookup"><span data-stu-id="13f0a-102">Each MetadataLoadContext can have its own binding rules and is isolated from all other MetadataLoadContexts.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13f0a-103">`MetadataLoadContext` 用作一个字典，该字典将程序集名称绑定到以前加载到上下文中或需要加载 <xref:System.Reflection.Assembly> 实例。</span><span class="sxs-lookup"><span data-stu-id="13f0a-103">A `MetadataLoadContext` serves as a dictionary that binds assembly names to <xref:System.Reflection.Assembly> instances that were previously loaded into the context or need to be loaded.</span></span>

<span data-ttu-id="13f0a-104">程序集被严格对待为元数据。</span><span class="sxs-lookup"><span data-stu-id="13f0a-104">Assemblies are treated strictly as metadata.</span></span> <span data-ttu-id="13f0a-105">基于目标平台、CPU 体系结构或指针大小加载程序集没有任何限制。</span><span class="sxs-lookup"><span data-stu-id="13f0a-105">There are no restrictions on loading assemblies based on target platform, CPU architecture, or pointer size.</span></span> <span data-ttu-id="13f0a-106">对于指定为核心程序集（**mscorlib.dll**）的程序集没有任何限制。</span><span class="sxs-lookup"><span data-stu-id="13f0a-106">There are no restrictions on the assembly designated as the core assembly (**mscorlib**).</span></span>

<span data-ttu-id="13f0a-107">有关详细信息和示例，请参阅[如何：使用 MetadataLoadContext 检查程序集内容](/dotnet/standard/assembly/inspect-contents-using-metadataloadcontext)。</span><span class="sxs-lookup"><span data-stu-id="13f0a-107">For more information and examples, see [How to: Inspect assembly contents using MetadataLoadContext](/dotnet/standard/assembly/inspect-contents-using-metadataloadcontext).</span></span>

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataLoadContext (System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.#ctor(System.Reflection.MetadataAssemblyResolver,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As MetadataAssemblyResolver, Optional coreAssemblyName As String = null)" />
      <MemberSignature Language="F#" Value="new System.Reflection.MetadataLoadContext : System.Reflection.MetadataAssemblyResolver * string -&gt; System.Reflection.MetadataLoadContext" Usage="new System.Reflection.MetadataLoadContext (resolver, coreAssemblyName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Reflection.MetadataAssemblyResolver" />
        <Parameter Name="coreAssemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver"><span data-ttu-id="13f0a-108">一个 <see cref="T:System.Reflection.MetadataAssemblyResolver" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="13f0a-108">A <see cref="T:System.Reflection.MetadataAssemblyResolver" /> instance.</span></span></param>
        <param name="coreAssemblyName"><span data-ttu-id="13f0a-109">包含核心类型（例如 <see cref="T:System.Object" />）的程序集的名称。</span><span class="sxs-lookup"><span data-stu-id="13f0a-109">The name of the assembly that contains the core types such as <see cref="T:System.Object" />.</span></span> <span data-ttu-id="13f0a-110">通常情况下，这将是“mscorlib”。</span><span class="sxs-lookup"><span data-stu-id="13f0a-110">Typically, this would be "mscorlib".</span></span></param>
        <summary><span data-ttu-id="13f0a-111">创建新的 <see cref="T:System.Reflection.MetadataLoadContext" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="13f0a-111">Creates a new <see cref="T:System.Reflection.MetadataLoadContext" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly CoreAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly CoreAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoreAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ CoreAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CoreAssembly : System.Reflection.Assembly" Usage="System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="13f0a-112">获取或设置表示“系统程序集”的程序集，该程序集包含 <see cref="T:System.Int32" /> 等已知类型。</span><span class="sxs-lookup"><span data-stu-id="13f0a-112">Gets or sets the assembly that denotes the "system assembly" that houses the well-known types such as <see cref="T:System.Int32" />.</span></span></summary>
        <value><span data-ttu-id="13f0a-113">一个 <see cref="T:System.Reflection.Assembly" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="13f0a-113">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="13f0a-114">核心程序集的处理方式不同于其他程序集，因为对这些已知类型的引用不包括程序集引用，与普通类型不同。</span><span class="sxs-lookup"><span data-stu-id="13f0a-114">The core assembly is treated differently than other assemblies because references to these well-known types do not include the assembly reference, unlike normal types.</span></span>

<span data-ttu-id="13f0a-115">通常，此程序集命名为 "mscorlib" 或 "netstandard"。</span><span class="sxs-lookup"><span data-stu-id="13f0a-115">Typically, this assembly is named "mscorlib" or "netstandard".</span></span> <span data-ttu-id="13f0a-116">如果找不到核心程序集，则该值将为 `null`，许多其他反射方法（包括分析方法签名的方法）会引发异常。</span><span class="sxs-lookup"><span data-stu-id="13f0a-116">If the core assembly cannot be found, the value will be `null`, and many other reflection methods, including those that parse method signatures, will throw an exception.</span></span>

<span data-ttu-id="13f0a-117">`CoreAssembly` 通过将传递给 <xref:System.Reflection.MetadataAssemblyResolver> 构造函数的 `coreAssemblyName` 参数传递给 <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> 方法来确定。</span><span class="sxs-lookup"><span data-stu-id="13f0a-117">The `CoreAssembly` is determined by passing the `coreAssemblyName` parameter passed to the <xref:System.Reflection.MetadataAssemblyResolver> constructor to the <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> method.</span></span>

<span data-ttu-id="13f0a-118">如果未在 <xref:System.Reflection.MetadataLoadContext>的构造函数中指定 `coreAssemblyName` 参数，则使用默认值，包括 "mscorlib"、"netstandard" 和 ""。</span><span class="sxs-lookup"><span data-stu-id="13f0a-118">If no `coreAssemblyName` argument was specified in the constructor of <xref:System.Reflection.MetadataLoadContext>, then default values are used, including "mscorlib", "System.Runtime" and "netstandard".</span></span>

<span data-ttu-id="13f0a-119">指定的核心程序集不需要直接包含核心类型。</span><span class="sxs-lookup"><span data-stu-id="13f0a-119">The designated core assembly does not need to contain the core types directly.</span></span> <span data-ttu-id="13f0a-120">它可以将其转发给其他程序集。</span><span class="sxs-lookup"><span data-stu-id="13f0a-120">It can type forward them to other assemblies.</span></span> <span data-ttu-id="13f0a-121">因此，完全允许使用 mscorlib.dll 外观作为指定的核心程序集。</span><span class="sxs-lookup"><span data-stu-id="13f0a-121">Thus, it is perfectly permissible to use the mscorlib facade as the designated core assembly.</span></span>

<span data-ttu-id="13f0a-122">请注意，<xref:System.Runtime> 不是理想的核心程序集，因为它不包括某些与互操作相关的伪自定义属性类型，如 <xref:System.Runtime.InteropServices.DllImportAttribute>。</span><span class="sxs-lookup"><span data-stu-id="13f0a-122">Note that <xref:System.Runtime> is not an ideal core assembly because it excludes some of the interop-related pseudo-custom attribute types such as <xref:System.Runtime.InteropServices.DllImportAttribute>.</span></span> <span data-ttu-id="13f0a-123">但是，如果您对这些属性不感兴趣，则可以使用此服务。</span><span class="sxs-lookup"><span data-stu-id="13f0a-123">However, it can serve if you have no interest in those attributes.</span></span> <span data-ttu-id="13f0a-124">如果核心程序集不包含所需的类型，则 CustomAttributes API 将跳过这些特性。</span><span class="sxs-lookup"><span data-stu-id="13f0a-124">The CustomAttributes API will skip those attributes if the core assembly does not include the necessary types.</span></span>

<span data-ttu-id="13f0a-125">在必要之前，不会加载核心程序集。</span><span class="sxs-lookup"><span data-stu-id="13f0a-125">The core assembly is not loaded until necessary.</span></span> <span data-ttu-id="13f0a-126">以下 Api 不会触发核心程序集的搜索：</span><span class="sxs-lookup"><span data-stu-id="13f0a-126">The following APIs do not trigger the search for the core assembly:</span></span>

* <xref:System.Reflection.MetadataLoadContext.LoadFromStream%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromByteArray%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.FullName?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType>
* <xref:System.Type.Name?displayProperty=nameWithType>
* <xref:System.Type.FullName?displayProperty=nameWithType>
* <xref:System.Type.AssemblyQualifiedName?displayProperty=nameWithType>

<span data-ttu-id="13f0a-127">如果找不到核心程序集或核心程序集缺少类型，这将影响 <xref:System.Reflection.MetadataLoadContext> 的行为，如下所示：</span><span class="sxs-lookup"><span data-stu-id="13f0a-127">If a core assembly cannot be found or if the core assembly is missing types, this will affect the behavior of the <xref:System.Reflection.MetadataLoadContext> as follows:</span></span>

* <span data-ttu-id="13f0a-128">需要分析签名或 typespecs 的 Api，并将结果作为 <xref:System.Type> 对象返回时，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="13f0a-128">APIs that need to parse signatures or typespecs and return the results as <xref:System.Type> objects will throw an exception.</span></span> <span data-ttu-id="13f0a-129">例如：</span><span class="sxs-lookup"><span data-stu-id="13f0a-129">For example:</span></span>

  * <xref:System.Reflection.MethodInfo.ReturnType?displayProperty=nameWithType>
  * <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>
  * <xref:System.Type.BaseType?displayProperty=nameWithType>
  * <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType>

* <span data-ttu-id="13f0a-130">需要将类型与众所周知的核心类型进行比较的 Api 将不会引发异常，并且比较的计算结果将为 `false`。</span><span class="sxs-lookup"><span data-stu-id="13f0a-130">APIs that need to compare types to well-known core types will not throw an exception, and the comparison will evaluate to `false`.</span></span> <span data-ttu-id="13f0a-131">例如，如果不指定核心程序集，<xref:System.Type.IsPrimitive> 将 `false` 所有内容（甚至是名为 <xref:System.Int32>的类型）返回。</span><span class="sxs-lookup"><span data-stu-id="13f0a-131">For example, if you do not specify a core assembly, <xref:System.Type.IsPrimitive> will return `false` for everything, even types named <xref:System.Int32>.</span></span> <span data-ttu-id="13f0a-132">同样，<xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> 将返回所有内容的 <xref:System.TypeCode.Object>。</span><span class="sxs-lookup"><span data-stu-id="13f0a-132">Similarly, <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> will return <xref:System.TypeCode.Object> for everything.</span></span>

* <span data-ttu-id="13f0a-133">如果元数据实体将曲面设置为伪自定义属性，而核心程序集不包含伪自定义属性类型、所需的构造函数或构造函数的任何参数类型，则将不会引发 <xref:System.Reflection.MetadataLoadContext>。</span><span class="sxs-lookup"><span data-stu-id="13f0a-133">If a metadata entity sets flags that surface as a pseudo-custom attribute, and the core assembly does not contain the pseudo-custom attribute type, the necessary constructor or any of the parameter types of the constructor, the <xref:System.Reflection.MetadataLoadContext> will not throw.</span></span> <span data-ttu-id="13f0a-134">它将忽略返回属性列表中的伪自定义属性。</span><span class="sxs-lookup"><span data-stu-id="13f0a-134">It will omit the pseudo-custom attribute from the list of returned attributes.</span></span>
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataLoadContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13f0a-135">释放所有本机资源（例如程序集文件上的文件锁）。</span><span class="sxs-lookup"><span data-stu-id="13f0a-135">Releases any native resources (such as file locks on assembly files).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

<span data-ttu-id="13f0a-136">处理完成后，使用由 <xref:System.Reflection.MetadataLoadContext> 或这些 <xref:System.Reflection.Assembly> 对象分配的任何反射对象分配的任何 <xref:System.Reflection.Assembly> 对象是不安全的。</span><span class="sxs-lookup"><span data-stu-id="13f0a-136">After disposal, it is not safe to use any <xref:System.Reflection.Assembly> objects dispensed by the <xref:System.Reflection.MetadataLoadContext> or any reflection objects dispensed by those <xref:System.Reflection.Assembly> objects.</span></span>

<span data-ttu-id="13f0a-137">尽管 <xref:System.Reflection.MetadataLoadContext> 提供的对象会尽力引发 <xref:System.ObjectDisposedException>，但这并不保证。</span><span class="sxs-lookup"><span data-stu-id="13f0a-137">Though objects provided by the <xref:System.Reflection.MetadataLoadContext> strive to throw an <xref:System.ObjectDisposedException>, this is not guaranteed.</span></span>

<span data-ttu-id="13f0a-138">某些 Api 可能返回固定或以前缓存的数据。</span><span class="sxs-lookup"><span data-stu-id="13f0a-138">Some APIs may return fixed or previously cached data.</span></span> <span data-ttu-id="13f0a-139">在 <xref:System.Reflection.MetadataLoadContext.Dispose%2A> 方法调用*期间*访问对象可能会导致非托管访问冲突和 failfast。</span><span class="sxs-lookup"><span data-stu-id="13f0a-139">Accessing objects *during* a <xref:System.Reflection.MetadataLoadContext.Dispose%2A> method call may result in an unmanaged access violation and failfast.</span></span>
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As IEnumerable(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberSignature Language="F#" Value="member this.GetAssemblies : unit -&gt; seq&lt;System.Reflection.Assembly&gt;" Usage="metadataLoadContext.GetAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="13f0a-140">返回已加载到 <see cref="T:System.Reflection.MetadataLoadContext" /> 中的程序集的原子快照。</span><span class="sxs-lookup"><span data-stu-id="13f0a-140">Return an atomic snapshot of the assemblies that have been loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span></summary>
        <returns><span data-ttu-id="13f0a-141">
          <see xref="T:System.Reflection.Assembly" /> 对象的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="13f0a-141">An enumerable collection of <see xref="T:System.Reflection.Assembly" /> objects.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.Reflection.AssemblyName)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyName (assemblyName As AssemblyName) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="13f0a-142">一个 <see cref="T:System.Reflection.AssemblyName" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="13f0a-142">An <see cref="T:System.Reflection.AssemblyName" /> instance.</span></span></param>
        <summary><span data-ttu-id="13f0a-143">将提供的程序集名称解析为程序集。</span><span class="sxs-lookup"><span data-stu-id="13f0a-143">Resolves the supplied assembly name to an assembly.</span></span> <span data-ttu-id="13f0a-144">如果程序集先前已绑定到此名称，则返回该程序集。</span><span class="sxs-lookup"><span data-stu-id="13f0a-144">If an assembly was previously bound to this name, that assembly is returned.</span></span> <span data-ttu-id="13f0a-145">否则，<see cref="T:System.Reflection.MetadataLoadContext" /> 调用指定的 <see cref="T:System.Reflection.MetadataAssemblyResolver" />。</span><span class="sxs-lookup"><span data-stu-id="13f0a-145">Otherwise, the <see cref="T:System.Reflection.MetadataLoadContext" /> calls the specified <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span></span></summary>
        <returns><span data-ttu-id="13f0a-146">一个 <see cref="T:System.Reflection.Assembly" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="13f0a-146">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

<span data-ttu-id="13f0a-147">请注意，此方法的行为与 <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> 解析事件的行为匹配，但与 <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>的行为不匹配。</span><span class="sxs-lookup"><span data-stu-id="13f0a-147">Note that the behavior of this method matches the behavior of the <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> resolve event, but does not match the behavior of <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="13f0a-148">（后者放弃，而不引发其解决事件。）</span><span class="sxs-lookup"><span data-stu-id="13f0a-148">(The latter gives up without raising its resolve event.)</span></span>
          ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="13f0a-149">解析器返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13f0a-149">The resolver returns <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyName (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName"><span data-ttu-id="13f0a-150">表示程序集名称的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="13f0a-150">A <see cref="T:System.String" /> representing the assembly name.</span></span></param>
        <summary><span data-ttu-id="13f0a-151">将提供的程序集名称解析为程序集。</span><span class="sxs-lookup"><span data-stu-id="13f0a-151">Resolves the supplied assembly name to an assembly.</span></span> <span data-ttu-id="13f0a-152">如果程序集先前已绑定到此名称，则返回该程序集。</span><span class="sxs-lookup"><span data-stu-id="13f0a-152">If an assembly was previously bound to this name, that assembly is returned.</span></span> <span data-ttu-id="13f0a-153">否则，<see cref="T:System.Reflection.MetadataLoadContext" /> 调用指定的 <see cref="T:System.Reflection.MetadataAssemblyResolver" />。</span><span class="sxs-lookup"><span data-stu-id="13f0a-153">Otherwise, the <see cref="T:System.Reflection.MetadataLoadContext" /> calls the specified <see cref="T:System.Reflection.MetadataAssemblyResolver" />.</span></span></summary>
        <returns><span data-ttu-id="13f0a-154">一个 <see cref="T:System.Reflection.Assembly" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="13f0a-154">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

<span data-ttu-id="13f0a-155">请注意，此方法的行为与 <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> 解析事件的行为匹配，但与 <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>的行为不匹配。</span><span class="sxs-lookup"><span data-stu-id="13f0a-155">Note that the behavior of this method matches the behavior of the <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> resolve event but does not match the behavior of <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="13f0a-156">（后者放弃，而不引发其解决事件。）</span><span class="sxs-lookup"><span data-stu-id="13f0a-156">(The latter gives up without raising its resolve event.)</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="13f0a-157">解析器返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="13f0a-157">The resolver returns <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyPath">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyPath (string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyPath(string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyPath (assemblyPath As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyPath(System::String ^ assemblyPath);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyPath : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyPath assemblyPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyPath"><span data-ttu-id="13f0a-158">表示程序集路径的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="13f0a-158">A <see cref="T:System.String" /> representing the path to the assembly.</span></span></param>
        <summary><span data-ttu-id="13f0a-159">从磁盘上的特定路径加载程序集，并在 <see cref="T:System.Reflection.MetadataLoadContext" /> 中将程序集名称绑定到该程序集。</span><span class="sxs-lookup"><span data-stu-id="13f0a-159">Loads an assembly from a specific path on the disk and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="13f0a-160">如果已经将具有相同名称的先前程序集加载到 <see cref="T:System.Reflection.MetadataLoadContext" /> 中，则将返回先前的程序集。</span><span class="sxs-lookup"><span data-stu-id="13f0a-160">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns><span data-ttu-id="13f0a-161">一个 <see cref="T:System.Reflection.Assembly" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="13f0a-161">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="13f0a-162">这两个程序集没有相同的 Mvid。</span><span class="sxs-lookup"><span data-stu-id="13f0a-162">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromByteArray">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromByteArray (byte[] assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromByteArray(unsigned int8[] assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromByteArray(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromByteArray (assembly As Byte()) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromByteArray(cli::array &lt;System::Byte&gt; ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromByteArray : byte[] -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromByteArray assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="13f0a-163">包含程序集的字节数组。</span><span class="sxs-lookup"><span data-stu-id="13f0a-163">A byte array holding an assembly.</span></span></param>
        <summary><span data-ttu-id="13f0a-164">从字节数组加载程序集，并在 <see cref="T:System.Reflection.MetadataLoadContext" /> 中将程序集名称绑定到该程序集。</span><span class="sxs-lookup"><span data-stu-id="13f0a-164">Loads an assembly from a byte array and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="13f0a-165">如果已经将具有相同名称的先前程序集加载到 <see cref="T:System.Reflection.MetadataLoadContext" /> 中，则将返回先前的程序集。</span><span class="sxs-lookup"><span data-stu-id="13f0a-165">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns><span data-ttu-id="13f0a-166">一个 <see cref="T:System.Reflection.Assembly" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="13f0a-166">An <see cref="T:System.Reflection.Assembly" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="13f0a-167">这两个程序集没有相同的 Mvid。</span><span class="sxs-lookup"><span data-stu-id="13f0a-167">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromStream">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromStream (System.IO.Stream assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromStream(class System.IO.Stream assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromStream (assembly As Stream) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromStream(System::IO::Stream ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromStream : System.IO.Stream -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromStream assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="assembly"><span data-ttu-id="13f0a-168">一个包含程序集的 <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="13f0a-168">A <see cref="T:System.IO.Stream" /> holding an assembly.</span></span></param>
        <summary><span data-ttu-id="13f0a-169">从流加载程序集，并在 <see cref="T:System.Reflection.MetadataLoadContext" /> 中将程序集名称绑定到该程序集。</span><span class="sxs-lookup"><span data-stu-id="13f0a-169">Loads an assembly from a stream and binds its assembly name to it in the <see cref="T:System.Reflection.MetadataLoadContext" />.</span></span> <span data-ttu-id="13f0a-170">如果已经将具有相同名称的先前程序集加载到 <see cref="T:System.Reflection.MetadataLoadContext" /> 中，则将返回先前的程序集。</span><span class="sxs-lookup"><span data-stu-id="13f0a-170">If a prior assembly with the same name was already loaded into the <see cref="T:System.Reflection.MetadataLoadContext" />, the prior assembly will be returned.</span></span></summary>
        <returns><span data-ttu-id="13f0a-171">加载的程序集。</span><span class="sxs-lookup"><span data-stu-id="13f0a-171">The loaded assembly.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> <span data-ttu-id="13f0a-172"><xref:System.Reflection.MetadataLoadContext> 取得传入此方法的 <xref:System.IO.Stream> 的所有权。</span><span class="sxs-lookup"><span data-stu-id="13f0a-172">The <xref:System.Reflection.MetadataLoadContext> takes ownership of the <xref:System.IO.Stream> passed into this method.</span></span> <span data-ttu-id="13f0a-173">原始所有者不得改变其位置、释放 <xref:System.IO.Stream>或假定其位置保持不变。</span><span class="sxs-lookup"><span data-stu-id="13f0a-173">The original owner must not mutate its position, dispose the <xref:System.IO.Stream>, or assume that its position will stay unchanged.</span></span>

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException"><span data-ttu-id="13f0a-174">这两个程序集没有相同的 Mvid。</span><span class="sxs-lookup"><span data-stu-id="13f0a-174">The two assemblies do not have the same Mvid.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
