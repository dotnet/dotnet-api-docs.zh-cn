<Type Name="MetadataLoadContext" FullName="System.Reflection.MetadataLoadContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dbe1f9f922a0714774bf096c7d979beb21c909b1" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89681006" /></Metadata><TypeSignature Language="C#" Value="public sealed class MetadataLoadContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit MetadataLoadContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MetadataLoadContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class MetadataLoadContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MetadataLoadContext sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type MetadataLoadContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示为仅用于检查目的而加载的 Type 对象的封闭范围。 每个 MetadataLoadContext 都可以拥有自己的绑定规则，并与所有其他 MetadataLoadContexts 隔离。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

用作 `MetadataLoadContext` 一个字典，该字典将程序集名称绑定到 <xref:System.Reflection.Assembly> 以前加载到上下文中或需要加载的实例。

程序集被严格对待为元数据。 基于目标平台、CPU 体系结构或指针大小加载程序集没有任何限制。 对于指定为核心程序集 (**mscorlib**) 的程序集没有任何限制。

有关详细信息和示例，请参阅 [如何：使用 MetadataLoadContext 检查程序集内容](/dotnet/standard/assembly/inspect-contents-using-metadataloadcontext)。

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MetadataLoadContext (System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName = default);" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MetadataAssemblyResolver resolver, string coreAssemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.#ctor(System.Reflection.MetadataAssemblyResolver,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As MetadataAssemblyResolver, Optional coreAssemblyName As String = Nothing)" />
      <MemberSignature Language="F#" Value="new System.Reflection.MetadataLoadContext : System.Reflection.MetadataAssemblyResolver * string -&gt; System.Reflection.MetadataLoadContext" Usage="new System.Reflection.MetadataLoadContext (resolver, coreAssemblyName)" />
      <MemberSignature Language="C#" Value="public MetadataLoadContext (System.Reflection.MetadataAssemblyResolver resolver, string? coreAssemblyName = default);" FrameworkAlternate="dotnet-plat-ext-5.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Reflection.MetadataAssemblyResolver" />
        <Parameter Name="coreAssemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver">一个 <see cref="T:System.Reflection.MetadataAssemblyResolver" /> 实例。</param>
        <param name="coreAssemblyName">包含核心类型（例如 <see cref="T:System.Object" />）的程序集的名称。 通常情况下，这将是“mscorlib”。</param>
        <summary>创建一个新的 <see cref="T:System.Reflection.MetadataLoadContext" /> 对象。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly CoreAssembly { get; }" FrameworkAlternate="dotnet-plat-ext-3.0;dotnet-plat-ext-3.1" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly CoreAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CoreAssembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ CoreAssembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CoreAssembly : System.Reflection.Assembly" Usage="System.Reflection.MetadataLoadContext.CoreAssembly" />
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly? CoreAssembly { get; }" FrameworkAlternate="dotnet-plat-ext-5.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表示“系统程序集”的程序集，该程序集包含 <see cref="T:System.Int32" /> 等已知类型。</summary>
        <value>一个 <see cref="T:System.Reflection.Assembly" /> 实例。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

核心程序集的处理方式不同于其他程序集，因为对这些已知类型的引用不包括程序集引用，与普通类型不同。

通常，此程序集命名为 "mscorlib" 或 "netstandard"。 如果找不到核心程序集，则值为 `null` ，许多其他反射方法（包括分析方法签名的方法）会引发异常。

`CoreAssembly`通过将 `coreAssemblyName` 传递给构造函数的参数传递 <xref:System.Reflection.MetadataAssemblyResolver> 给方法来确定 <xref:System.Reflection.MetadataAssemblyResolver.Resolve%2A?displayProperty=nameWithType> 。

如果未 `coreAssemblyName` 在的构造函数中指定任何参数 <xref:System.Reflection.MetadataLoadContext> ，则使用默认值，包括 "mscorlib"、"netstandard" 和 ""。

指定的核心程序集不需要直接包含核心类型。 它可以将其转发给其他程序集。 因此，完全允许使用 mscorlib.dll 外观作为指定的核心程序集。

请注意，不 <xref:System.Runtime> 是理想的核心程序集，因为它不包括某些与互操作相关的伪自定义属性类型，例如 <xref:System.Runtime.InteropServices.DllImportAttribute> 。 但是，如果您对这些属性不感兴趣，则可以使用此服务。 如果核心程序集不包含所需的类型，则 CustomAttributes API 将跳过这些特性。

在必要之前，不会加载核心程序集。 以下 Api 不会触发核心程序集的搜索：

* <xref:System.Reflection.MetadataLoadContext.LoadFromStream%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath%2A?displayProperty=nameWithType>
* <xref:System.Reflection.MetadataLoadContext.LoadFromByteArray%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetName%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.FullName?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetReferencedAssemblies%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.DefinedTypes?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetExportedTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetForwardedTypes%2A?displayProperty=nameWithType>
* <xref:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)?displayProperty=nameWithType>
* <xref:System.Type.Name?displayProperty=nameWithType>
* <xref:System.Type.FullName?displayProperty=nameWithType>
* <xref:System.Type.AssemblyQualifiedName?displayProperty=nameWithType>

如果找不到核心程序集或核心程序集缺少类型，这将影响的行为，如下所示 <xref:System.Reflection.MetadataLoadContext> ：

* 需要分析签名或 typespecs 并将结果作为对象返回的 Api <xref:System.Type> 会引发异常。 例如：

  * <xref:System.Reflection.MethodInfo.ReturnType?displayProperty=nameWithType>
  * <xref:System.Reflection.MethodBase.GetParameters%2A?displayProperty=nameWithType>
  * <xref:System.Type.BaseType?displayProperty=nameWithType>
  * <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType>

* 需要将类型与众所周知的核心类型进行比较的 Api 不会引发异常，并且比较的计算结果将为 `false` 。 例如，如果不指定核心程序集， <xref:System.Type.IsPrimitive> 则将返回 `false` 所有内容，甚至是名为的类型 <xref:System.Int32> 。 同样， <xref:System.Type.GetTypeCode%2A?displayProperty=nameWithType> 将 <xref:System.TypeCode.Object> 为所有内容返回。

* 如果元数据实体将曲面设置为伪自定义属性，而核心程序集不包含伪自定义属性类型、所需的构造函数或构造函数的任何参数类型，则 <xref:System.Reflection.MetadataLoadContext> 将不会引发。 它将忽略返回属性列表中的伪自定义属性。
          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="metadataLoadContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放所有本机资源（例如程序集文件上的文件锁）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

处理完成后，使用 <xref:System.Reflection.Assembly> 由 <xref:System.Reflection.MetadataLoadContext> 或这些对象处置的任何反射对象所分配的任何对象是不安全的 <xref:System.Reflection.Assembly> 。

尽管由 <xref:System.Reflection.MetadataLoadContext> 尽力引发的对象 <xref:System.ObjectDisposedException> ，但不保证这样。

某些 Api 可能返回固定或以前缓存的数据。 在方法调用 *期间* 访问对象 <xref:System.Reflection.MetadataLoadContext.Dispose%2A> 可能会导致非托管访问冲突和 failfast。
         ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt; GetAssemblies ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.Assembly&gt; GetAssemblies() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.GetAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAssemblies () As IEnumerable(Of Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Reflection::Assembly ^&gt; ^ GetAssemblies();" />
      <MemberSignature Language="F#" Value="member this.GetAssemblies : unit -&gt; seq&lt;System.Reflection.Assembly&gt;" Usage="metadataLoadContext.GetAssemblies " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Reflection.Assembly&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回已加载到 <see cref="T:System.Reflection.MetadataLoadContext" /> 中的程序集的原子快照。</summary>
        <returns><see xref="T:System.Reflection.Assembly" /> 对象的可枚举集合。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.Reflection.AssemblyName)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyName (assemblyName As AssemblyName) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::Reflection::AssemblyName ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : System.Reflection.AssemblyName -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="assemblyName">一个 <see cref="T:System.Reflection.AssemblyName" /> 实例。</param>
        <summary>将提供的程序集名称解析为程序集。 如果程序集先前已绑定到此名称，则返回该程序集。 否则，<see cref="T:System.Reflection.MetadataLoadContext" /> 调用指定的 <see cref="T:System.Reflection.MetadataAssemblyResolver" />。</summary>
        <returns>一个 <see cref="T:System.Reflection.Assembly" /> 实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

请注意，此方法的行为与解析事件的行为匹配 <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> ，但不匹配的行为 <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType> 。  (后者放弃，而不引发其解决事件。 ) 
          ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">解析器返回 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyName">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyName (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyName(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyName (assemblyName As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyName(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyName : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyName assemblyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">表示程序集名称的 <see cref="T:System.String" />。</param>
        <summary>将提供的程序集名称解析为程序集。 如果程序集先前已绑定到此名称，则返回该程序集。 否则，<see cref="T:System.Reflection.MetadataLoadContext" /> 调用指定的 <see cref="T:System.Reflection.MetadataAssemblyResolver" />。</summary>
        <returns>一个 <see cref="T:System.Reflection.Assembly" /> 实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[
## Remarks

请注意，此方法的行为与解析事件的行为匹配， <xref:System.Runtime.Loader.AssemblyLoadContext.LoadFromAssemblyName%2A?displayProperty=nameWithType> 但不匹配的行为 <xref:System.Reflection.Assembly.ReflectionOnlyLoad%2A?displayProperty=nameWithType> 。  (后者放弃，而不引发其解决事件。 ) 

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">解析器返回 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromAssemblyPath">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromAssemblyPath (string assemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromAssemblyPath(string assemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromAssemblyPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromAssemblyPath (assemblyPath As String) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromAssemblyPath(System::String ^ assemblyPath);" />
      <MemberSignature Language="F#" Value="member this.LoadFromAssemblyPath : string -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromAssemblyPath assemblyPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyPath">表示程序集路径的 <see cref="T:System.String" />。</param>
        <summary>从磁盘上的特定路径加载程序集，并在 <see cref="T:System.Reflection.MetadataLoadContext" /> 中将程序集名称绑定到该程序集。 如果已经将具有相同名称的先前程序集加载到 <see cref="T:System.Reflection.MetadataLoadContext" /> 中，则将返回先前的程序集。</summary>
        <returns>一个 <see cref="T:System.Reflection.Assembly" /> 实例。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException">这两个程序集没有相同的 Mvid。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromByteArray">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromByteArray (byte[] assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromByteArray(unsigned int8[] assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromByteArray(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromByteArray (assembly As Byte()) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromByteArray(cli::array &lt;System::Byte&gt; ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromByteArray : byte[] -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromByteArray assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="assembly">包含程序集的字节数组。</param>
        <summary>从字节数组加载程序集，并在 <see cref="T:System.Reflection.MetadataLoadContext" /> 中将程序集名称绑定到该程序集。 如果已经将具有相同名称的先前程序集加载到 <see cref="T:System.Reflection.MetadataLoadContext" /> 中，则将返回先前的程序集。</summary>
        <returns>一个 <see cref="T:System.Reflection.Assembly" /> 实例。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.IO.FileLoadException">这两个程序集没有相同的 Mvid。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadFromStream">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly LoadFromStream (System.IO.Stream assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Reflection.Assembly LoadFromStream(class System.IO.Stream assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MetadataLoadContext.LoadFromStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadFromStream (assembly As Stream) As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::Assembly ^ LoadFromStream(System::IO::Stream ^ assembly);" />
      <MemberSignature Language="F#" Value="member this.LoadFromStream : System.IO.Stream -&gt; System.Reflection.Assembly" Usage="metadataLoadContext.LoadFromStream assembly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Reflection.MetadataLoadContext</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="assembly">一个包含程序集的 <see cref="T:System.IO.Stream" />。</param>
        <summary>从流加载程序集，并在 <see cref="T:System.Reflection.MetadataLoadContext" /> 中将程序集名称绑定到该程序集。 如果已经将具有相同名称的先前程序集加载到 <see cref="T:System.Reflection.MetadataLoadContext" /> 中，则将返回先前的程序集。</summary>
        <returns>加载的程序集。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!IMPORTANT]
> 将 <xref:System.Reflection.MetadataLoadContext> 的所有权 <xref:System.IO.Stream> 传递到此方法中。 原始所有者不得改变其位置、释放 <xref:System.IO.Stream> 或假设其位置保持不变。

]]></format>
        </remarks>
        <exception cref="T:System.IO.FileLoadException">这两个程序集没有相同的 Mvid。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
