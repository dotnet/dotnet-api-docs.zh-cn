<Type Name="ZipArchive" FullName="System.IO.Compression.ZipArchive">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3628faa07fba954aeeff384334270279c10ce64d" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83965082" /></Metadata><TypeSignature Language="C#" Value="public class ZipArchive : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ZipArchive extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IO.Compression.ZipArchive" />
  <TypeSignature Language="VB.NET" Value="Public Class ZipArchive&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ZipArchive : IDisposable" />
  <TypeSignature Language="F#" Value="type ZipArchive = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.IO.Compression</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.IO.Compression" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示 Zip 存档格式中的一个压缩文件包。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 用于处理 zip 存档及其文件项的方法分布在三个类中： <xref:System.IO.Compression.ZipFile>、<xref:System.IO.Compression.ZipArchive>和 <xref:System.IO.Compression.ZipArchiveEntry>。  
  
|至|使用|  
|--------|---------|  
|从目录创建 zip 存档|<xref:System.IO.Compression.ZipFile.CreateFromDirectory%2A?displayProperty=nameWithType>|  
|将 zip 存档的内容提取到目录|<xref:System.IO.Compression.ZipFile.ExtractToDirectory%2A?displayProperty=nameWithType>|  
|将新文件添加到现有 zip 存档|<xref:System.IO.Compression.ZipArchive.CreateEntry%2A?displayProperty=nameWithType>|  
|从 zip 存档中检索文件|<xref:System.IO.Compression.ZipArchive.GetEntry%2A?displayProperty=nameWithType>|  
|检索 zip 存档中的所有文件|<xref:System.IO.Compression.ZipArchive.Entries%2A?displayProperty=nameWithType>|  
|打开 zip 存档中包含的单个文件的流|<xref:System.IO.Compression.ZipArchiveEntry.Open%2A?displayProperty=nameWithType>|  
|删除 zip 存档中的文件|<xref:System.IO.Compression.ZipArchiveEntry.Delete%2A?displayProperty=nameWithType>|  
  
 当你创建新项时，该文件将被压缩并添加到 zip 包。 使用 <xref:System.IO.Compression.ZipArchive.CreateEntry%2A> 方法，您可以在添加项时指定目录层次结构。 在 zip 包中包含新项的相对路径。 例如，使用 `AddedFolder\NewFile.txt` 的相对路径创建新条目将在名为 AddedFolder 的目录中创建一个压缩的文本文件。  
  
 如果在项目中引用 `System.IO.Compression.FileSystem` 程序集，则可以访问 <xref:System.IO.Compression.ZipArchive> 类的四个扩展方法（来自 <xref:System.IO.Compression.ZipFileExtensions> 类）： <xref:System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(System.IO.Compression.ZipArchive,System.String,System.String)>、<xref:System.IO.Compression.ZipFileExtensions.CreateEntryFromFile(System.IO.Compression.ZipArchive,System.String,System.String,System.IO.Compression.CompressionLevel)>、<xref:System.IO.Compression.ZipFileExtensions.ExtractToDirectory(System.IO.Compression.ZipArchive,System.String)>和 <xref:System.IO.Compression.ZipFileExtensions.ExtractToDirectory(System.IO.Compression.ZipArchive,System.String,System.Boolean)> （可在 .NET Core 2.0 及更高版本中使用）。 使用这些扩展方法可以将项的内容压缩和解压缩到文件中。 `System.IO.Compression.FileSystem` 程序集不适用于 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 应用。 在 [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] 应用中，可以通过使用 <xref:System.IO.Compression.DeflateStream> 或 <xref:System.IO.Compression.GZipStream> 类来压缩和解压缩文件，也可以使用 [!INCLUDE[wrt](~/includes/wrt-md.md)] 类型[压缩机](https://go.microsoft.com/fwlink/p/?LinkID=246357)和[解压缩](https://go.microsoft.com/fwlink/p/?LinkID=246358)程序。  
  
   
  
## Examples  
 第一个示例演示如何使用流创建新条目并写入该条目。  
  
 [!code-csharp[System.IO.Compression.ZipArchiveMode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchivemode/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipArchiveMode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchivemode/vb/program1.vb#1)]  
  
 下面的示例演示如何打开 zip 存档并循环访问项的集合。  
  
 [!code-csharp[System.IO.Compression.ZipArchive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchive/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipArchive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchive/vb/program1.vb#1)]  
  
 第三个示例演示如何使用扩展方法从现有文件在 zip 存档中创建新条目，并提取存档内容。 若要执行代码，必须引用 `System.IO.Compression.FileSystem` 程序集。  
  
 [!code-csharp[System.IO.Compression.ZipArchive#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchive/cs/program3.cs#3)]
 [!code-vb[System.IO.Compression.ZipArchive#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchive/vb/program3.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IO.Compression.ZipFile" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.IO.Compression.ZipArchive" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ZipArchive (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipArchive.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ZipArchive(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new System.IO.Compression.ZipArchive : System.IO.Stream -&gt; System.IO.Compression.ZipArchive" Usage="new System.IO.Compression.ZipArchive stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">即包含待读取的存档的流。</param>
        <summary>从指定的流初始化 <see cref="T:System.IO.Compression.ZipArchive" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">该流已关闭或不支持读取。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.IO.InvalidDataException">流的内容不是 zip 存档格式。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ZipArchive (System.IO.Stream stream, System.IO.Compression.ZipArchiveMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, valuetype System.IO.Compression.ZipArchiveMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream, mode As ZipArchiveMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ZipArchive(System::IO::Stream ^ stream, System::IO::Compression::ZipArchiveMode mode);" />
      <MemberSignature Language="F#" Value="new System.IO.Compression.ZipArchive : System.IO.Stream * System.IO.Compression.ZipArchiveMode -&gt; System.IO.Compression.ZipArchive" Usage="new System.IO.Compression.ZipArchive (stream, mode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" />
      </Parameters>
      <Docs>
        <param name="stream">输入流或输出流。</param>
        <param name="mode">指示 zip 存档是否用于读取、创建或更新项的一个枚举值。</param>
        <summary>从指定的流并使用指定的模式初始化 <see cref="T:System.IO.Compression.ZipArchive" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `mode` 参数设置为 <xref:System.IO.Compression.ZipArchiveMode.Read>，则流必须支持读取。 如果 `mode` 参数设置为 <xref:System.IO.Compression.ZipArchiveMode.Create>，则流必须支持写入。 如果 `mode` 参数设置为 <xref:System.IO.Compression.ZipArchiveMode.Update>，则流必须支持读取、写入和查找。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">流已关闭，或流的功能与模式不相匹配。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 为无效值。</exception>
        <exception cref="T:System.IO.InvalidDataException">流的内容无法被解释为 zip 存档。  
  
- 或 - 
 <paramref name="mode" /> 是 <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />，但存档中缺少项，或者项已损坏且无法读取。  
  
- 或 - 
 <paramref name="mode" /> 是 <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />，但项太大，无法装入内存。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ZipArchive (System.IO.Stream stream, System.IO.Compression.ZipArchiveMode mode, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, valuetype System.IO.Compression.ZipArchiveMode mode, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream, mode As ZipArchiveMode, leaveOpen As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ZipArchive(System::IO::Stream ^ stream, System::IO::Compression::ZipArchiveMode mode, bool leaveOpen);" />
      <MemberSignature Language="F#" Value="new System.IO.Compression.ZipArchive : System.IO.Stream * System.IO.Compression.ZipArchiveMode * bool -&gt; System.IO.Compression.ZipArchive" Usage="new System.IO.Compression.ZipArchive (stream, mode, leaveOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">输入流或输出流。</param>
        <param name="mode">指示 zip 存档是否用于读取、创建或更新项的一个枚举值。</param>
        <param name="leaveOpen">如果在释放 <see cref="T:System.IO.Compression.ZipArchive" /> 对象后保持流处于打开状态，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>对于指定的模式，初始化指定流上的 <see cref="T:System.IO.Compression.ZipArchive" /> 类的新实例，并选择性地使流保持打开状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `mode` 参数设置为 <xref:System.IO.Compression.ZipArchiveMode.Read>，则流必须支持读取。 如果 `mode` 参数设置为 <xref:System.IO.Compression.ZipArchiveMode.Create>，则流必须支持写入。 如果 `mode` 参数设置为 <xref:System.IO.Compression.ZipArchiveMode.Update>，则流必须支持读取、写入和查找。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">流已关闭，或流的功能与模式不相匹配。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 为无效值。</exception>
        <exception cref="T:System.IO.InvalidDataException">流的内容无法被解释为 zip 存档。  
  
- 或 - 
 <paramref name="mode" /> 是 <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />，但存档中缺少项，或者项已损坏且无法读取。  
  
- 或 - 
 <paramref name="mode" /> 是 <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />，但项太大，无法装入内存。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ZipArchive (System.IO.Stream stream, System.IO.Compression.ZipArchiveMode mode, bool leaveOpen, System.Text.Encoding entryNameEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, valuetype System.IO.Compression.ZipArchiveMode mode, bool leaveOpen, class System.Text.Encoding entryNameEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (stream As Stream, mode As ZipArchiveMode, leaveOpen As Boolean, entryNameEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ZipArchive(System::IO::Stream ^ stream, System::IO::Compression::ZipArchiveMode mode, bool leaveOpen, System::Text::Encoding ^ entryNameEncoding);" />
      <MemberSignature Language="F#" Value="new System.IO.Compression.ZipArchive : System.IO.Stream * System.IO.Compression.ZipArchiveMode * bool * System.Text.Encoding -&gt; System.IO.Compression.ZipArchive" Usage="new System.IO.Compression.ZipArchive (stream, mode, leaveOpen, entryNameEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.IO.Compression.ZipArchiveMode" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
        <Parameter Name="entryNameEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream">输入流或输出流。</param>
        <param name="mode">指示 zip 存档是否用于读取、创建或更新项的一个枚举值。</param>
        <param name="leaveOpen">如果在释放 <see cref="T:System.IO.Compression.ZipArchive" /> 对象后保持流处于打开状态，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <param name="entryNameEncoding">在存档中读取或写入项名时使用的编码。 仅当需要针对具有不支持项名的 UTF-8 编码的 zip 归档工具和库的互操作性进行编码时，为此参数指定一个值。</param>
        <summary>对于指定的模式，初始化指定流上的 <see cref="T:System.IO.Compression.ZipArchive" /> 类的新实例，使用项名的指定编码，并选择性地使流保持打开状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `mode` 参数设置为 <xref:System.IO.Compression.ZipArchiveMode.Read>，则流必须支持读取。 如果 `mode` 参数设置为 <xref:System.IO.Compression.ZipArchiveMode.Create>，则流必须支持写入。 如果 `mode` 参数设置为 <xref:System.IO.Compression.ZipArchiveMode.Update>，则流必须支持读取、写入和查找。  
  
 打开要读取的 zip 存档文件并将 `entryNameEncoding` 设置为 `null`时，将根据以下规则对条目名称进行解码：  
  
-   如果未设置本地文件头的语言编码标志（位于本地文件头的通用位标志），则使用当前系统默认代码页对条目名称进行解码。  
  
-   如果设置了语言编码标志，则使用 UTF-8 对条目名称进行解码。  
  
 打开 zip 存档文件进行读取，并将 `entryNameEncoding` 设置为 `null`以外的值时，将根据以下规则对条目名称进行解码：  
  
-   如果未设置语言编码标志，则使用指定的 `entryNameEncoding` 对项名称进行解码。  
  
-   如果设置了语言编码标志，则使用 UTF-8 对条目名称进行解码。  
  
 写入存档文件并将 `entryNameEncoding` 设置为 `null`时，将根据以下规则对条目名称进行编码：  
  
-   对于包含 ASCII 范围外的字符的条目名称，设置语言编码标志，并使用 UTF-8 对条目名称进行编码。  
  
-   对于仅包含 ASCII 字符的条目名称，未设置语言编码标志，并且通过使用当前系统默认代码页对条目名称进行编码。  
  
 当你写入存档文件并且 `entryNameEncoding` 设置为 `null`以外的值时，将使用指定的 `entryNameEncoding` 将输入名称编码为个字节。 仅当指定的编码为 UTF-8 编码时，才设置语言编码标志（本地文件头的通用位标志）。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">流已关闭，或流的功能与模式不相匹配。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" /> 为无效值。</exception>
        <exception cref="T:System.IO.InvalidDataException">流的内容无法被解释为 zip 存档。  
  
- 或 - 
 <paramref name="mode" /> 是 <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />，但存档中缺少项，或者项已损坏且无法读取。  
  
- 或 - 
 <paramref name="mode" /> 是 <see cref="F:System.IO.Compression.ZipArchiveMode.Update" />，但项太大，无法装入内存。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateEntry">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在 zip 存档中创建空项。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateEntry">
      <MemberSignature Language="C#" Value="public System.IO.Compression.ZipArchiveEntry CreateEntry (string entryName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Compression.ZipArchiveEntry CreateEntry(string entryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipArchive.CreateEntry(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateEntry (entryName As String) As ZipArchiveEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Compression::ZipArchiveEntry ^ CreateEntry(System::String ^ entryName);" />
      <MemberSignature Language="F#" Value="member this.CreateEntry : string -&gt; System.IO.Compression.ZipArchiveEntry" Usage="zipArchive.CreateEntry entryName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchiveEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entryName">相对于存档的根的路径指定了要创建项的名称。</param>
        <summary>创建在 zip 存档中有指定路径和项名的空项。</summary>
        <returns>在 zip 存档中的空项。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `entryName` 字符串应反映要在 zip 存档中创建的条目的相对路径。 您提供的字符串没有限制。 但是，如果未将其格式化为相对路径，则会创建该条目，但当你提取 zip 存档的内容时，可能会出现异常。 如果存档中已存在具有指定路径和名称的条目，则将创建具有相同路径和名称的第二个条目。  
  
 新项的 <xref:System.IO.Compression.ZipArchiveEntry.LastWriteTime%2A> 属性的值将设置为当前时间。 使用基础压缩算法的默认压缩级别压缩条目。 如果要指定不同的压缩级别，请使用 <xref:System.IO.Compression.ZipArchive.CreateEntry%2A> 方法。  
  
   
  
## Examples  
 下面的示例演示如何使用流创建项并对其进行写入。  
  
 [!code-csharp[System.IO.Compression.ZipArchiveMode#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchivemode/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipArchiveMode#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchivemode/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="entryName" /> 为 <see cref="F:System.String.Empty" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="entryName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">zip 存档不支持写入。</exception>
        <exception cref="T:System.ObjectDisposedException">zip 存档已释放。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateEntry">
      <MemberSignature Language="C#" Value="public System.IO.Compression.ZipArchiveEntry CreateEntry (string entryName, System.IO.Compression.CompressionLevel compressionLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Compression.ZipArchiveEntry CreateEntry(string entryName, valuetype System.IO.Compression.CompressionLevel compressionLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipArchive.CreateEntry(System.String,System.IO.Compression.CompressionLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateEntry (entryName As String, compressionLevel As CompressionLevel) As ZipArchiveEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Compression::ZipArchiveEntry ^ CreateEntry(System::String ^ entryName, System::IO::Compression::CompressionLevel compressionLevel);" />
      <MemberSignature Language="F#" Value="member this.CreateEntry : string * System.IO.Compression.CompressionLevel -&gt; System.IO.Compression.ZipArchiveEntry" Usage="zipArchive.CreateEntry (entryName, compressionLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchiveEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryName" Type="System.String" />
        <Parameter Name="compressionLevel" Type="System.IO.Compression.CompressionLevel" />
      </Parameters>
      <Docs>
        <param name="entryName">相对于存档的根的路径指定了要创建项的名称。</param>
        <param name="compressionLevel">指示创建项时是否强调速度或压缩有效性的枚举值之一。</param>
        <summary>创建在 zip 存档中有指定项名和压缩级别的空项。</summary>
        <returns>在 zip 存档中的空项。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `entryName` 字符串应反映要在 zip 存档中创建的条目的相对路径。 您提供的字符串没有限制。 但是，如果未将其格式化为相对路径，则会创建该条目，但当你提取 zip 存档的内容时，可能会出现异常。 如果存档中已经存在具有指定名称的条目，则将使用相同的名称创建另一个条目。  
  
 新项的 <xref:System.IO.Compression.ZipArchiveEntry.LastWriteTime%2A> 属性的值将设置为当前时间。 如果希望尽可能压缩文件，请将 `compressionLevel` 参数设置为 <xref:System.IO.Compression.CompressionLevel.Optimal>。 仅当你担心压缩操作不会为你的方案迅速完成时，才将 `compressionLevel` 参数设置为 <xref:System.IO.Compression.CompressionLevel.Fastest>。  
  
   
  
## Examples  
 下面的示例演示如何创建具有最佳压缩级别的条目。 它还使用流写入新条目。  
  
 [!code-csharp[System.IO.Compression.ZipArchiveMode#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchivemode/cs/program2.cs#2)]
 [!code-vb[System.IO.Compression.ZipArchiveMode#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchivemode/vb/program2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="entryName" /> 为 <see cref="F:System.String.Empty" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="entryName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">zip 存档不支持写入。</exception>
        <exception cref="T:System.ObjectDisposedException">zip 存档已释放。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>释放 <see cref="T:System.IO.Compression.ZipArchive" /> 对象使用的所有资源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipArchive.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="zipArchive.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放 <see cref="T:System.IO.Compression.ZipArchive" /> 类的当前实例使用的资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法完成写入存档并释放 <xref:System.IO.Compression.ZipArchive> 对象使用的所有资源。 除非使用 <xref:System.IO.Compression.ZipArchive.%23ctor%28System.IO.Stream%2CSystem.IO.Compression.ZipArchiveMode%2CSystem.Boolean%29> 构造函数重载构造对象并将其 `leaveOpen` 参数设置为 `true`，否则，所有基础流都将关闭，并且不再可用于后续写入操作。  
  
 使用完 <xref:System.IO.Compression.ZipArchive>的实例后，调用 <xref:System.IO.Compression.ZipArchive.Dispose> 释放此实例使用的所有资源。 你应消除对此 <xref:System.IO.Compression.ZipArchive> 实例的进一步引用，以便垃圾回收器可以回收实例的内存，而不是使其处于活动状态以完成操作。  
  
 <xref:System.IO.Compression.ZipArchive.Dispose> 调用 <xref:System.IO.Compression.ZipArchive.Dispose%28System.Boolean%29> 方法，其中包含用于释放托管资源和非托管资源的代码。 有关详细信息，请参阅[实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)。
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipArchive.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="zipArchive.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" /> 表示完成存档的写入并释放未托管和托管资源；<see langword="false" /> 则仅释放未托管资源。</param>
        <summary>由 <see cref="M:System.IO.Compression.ZipArchive.Dispose" /> 和 <see cref="M:System.Object.Finalize" /> 方法调用，以释放 <see cref="T:System.IO.Compression.ZipArchive" /> 类的当前实例使用的未托管资源，并选择性地完成存档的写入和释放托管资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `disposing` 设置为 `true`，则所有基础流都将关闭，并且不再可用于后续写入操作，除非你使用 <xref:System.IO.Compression.ZipArchive.%23ctor%28System.IO.Stream%2CSystem.IO.Compression.ZipArchiveMode%2CSystem.Boolean%29> 构造函数重载构造对象并将其 `leaveOpen` 参数设置为 `true`。  
  
 此方法仅由公共 <xref:System.IO.Compression.ZipArchive.Dispose> 和 <xref:System.Object.Finalize> 方法调用;请勿直接调用此方法。  
  
 实现 dispose 模式时，应按如下所示使用 <xref:System.IO.Compression.ZipArchive.Dispose%28System.Boolean%29> 方法的布尔参数：  
  
-   当前对象的 <xref:System.IO.Compression.ZipArchive.Dispose> 方法应调用 <xref:System.IO.Compression.ZipArchive.Dispose%28System.Boolean%29> 并将布尔参数设置为 `true`，以释放托管资源和非托管资源。  
  
-   当前对象的 <xref:System.Object.Finalize> 方法应调用 <xref:System.IO.Compression.ZipArchive.Dispose%28System.Boolean%29> 将布尔参数设置为 `false`，以仅释放非托管资源。
  
 有关详细信息，请参阅[实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Entries">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.Compression.ZipArchiveEntry&gt; Entries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IO.Compression.ZipArchiveEntry&gt; Entries" />
      <MemberSignature Language="DocId" Value="P:System.IO.Compression.ZipArchive.Entries" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Entries As ReadOnlyCollection(Of ZipArchiveEntry)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IO::Compression::ZipArchiveEntry ^&gt; ^ Entries { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IO::Compression::ZipArchiveEntry ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Entries : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.Compression.ZipArchiveEntry&gt;" Usage="System.IO.Compression.ZipArchive.Entries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IO.Compression.ZipArchiveEntry&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 zip 存档中当前存在的项的集合。</summary>
        <value>在 zip 存档中当前存在的项的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.IO.Compression.ZipArchive.Entries%2A> 属性检索条目的整个集合。 使用 <xref:System.IO.Compression.ZipArchive.GetEntry%2A> 方法按名称检索单个条目。  
  
   
  
## Examples  
 下面的示例演示如何打开 zip 存档并循环访问项的集合。  
  
 [!code-csharp[System.IO.Compression.ZipArchive#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchive/cs/program1.cs#1)]
 [!code-vb[System.IO.Compression.ZipArchive#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchive/vb/program1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">zip 存档不支持读取。</exception>
        <exception cref="T:System.ObjectDisposedException">zip 存档已释放。</exception>
        <exception cref="T:System.IO.InvalidDataException">zip 存档已损坏，不能检索其项。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntry">
      <MemberSignature Language="C#" Value="public System.IO.Compression.ZipArchiveEntry GetEntry (string entryName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Compression.ZipArchiveEntry GetEntry(string entryName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Compression.ZipArchive.GetEntry(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEntry (entryName As String) As ZipArchiveEntry" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Compression::ZipArchiveEntry ^ GetEntry(System::String ^ entryName);" />
      <MemberSignature Language="F#" Value="member this.GetEntry : string -&gt; System.IO.Compression.ZipArchiveEntry" Usage="zipArchive.GetEntry entryName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchiveEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entryName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="entryName">识别要检索的项、相对于存档的根的路径。</param>
        <summary>在 zip 存档中检索指定项的包装。</summary>
        <returns>存档中指定项的包装器；如果存档中不存在此项，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果存档中存在多个具有指定名称的条目，则返回第一个条目。 使用序号比较将条目的名称与 `entryName` 进行比较。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.IO.Compression.ZipArchive.GetEntry%2A> 方法检索项。  
  
 [!code-csharp[System.IO.Compression.ZipArchiveEntry#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.io.compression.ziparchiveentry/cs/program2.cs#2)]
 [!code-vb[System.IO.Compression.ZipArchiveEntry#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.io.compression.ziparchiveentry/vb/program2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="entryName" /> 为 <see cref="F:System.String.Empty" />。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="entryName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">zip 存档不支持读取。</exception>
        <exception cref="T:System.ObjectDisposedException">zip 存档已释放。</exception>
        <exception cref="T:System.IO.InvalidDataException">zip 存档已损坏，不能检索其项。</exception>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public System.IO.Compression.ZipArchiveMode Mode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Compression.ZipArchiveMode Mode" />
      <MemberSignature Language="DocId" Value="P:System.IO.Compression.ZipArchive.Mode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Mode As ZipArchiveMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Compression::ZipArchiveMode Mode { System::IO::Compression::ZipArchiveMode get(); };" />
      <MemberSignature Language="F#" Value="member this.Mode : System.IO.Compression.ZipArchiveMode" Usage="System.IO.Compression.ZipArchive.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IO.Compression</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Compression.ZipArchiveMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取描述 zip 存档可在项上执行的操作类型的一个值。</summary>
        <value>描述 zip 存档可在项上执行的操作类型（读取、创建或更新）的一个枚举值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在创建 <xref:System.IO.Compression.ZipArchive> 类的实例时，为 <xref:System.IO.Compression.ZipArchive> 属性指定一个值。 使用 <xref:System.IO.Compression.ZipArchive.%23ctor%28System.IO.Stream%2CSystem.IO.Compression.ZipArchiveMode%29> 或 <xref:System.IO.Compression.ZipArchive.%23ctor%28System.IO.Stream%2CSystem.IO.Compression.ZipArchiveMode%2CSystem.Boolean%29> 构造函数提供 <xref:System.IO.Compression.ZipArchive.Mode%2A> 属性的值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
