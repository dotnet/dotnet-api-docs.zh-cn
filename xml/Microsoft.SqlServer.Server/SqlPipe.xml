<Type Name="SqlPipe" FullName="Microsoft.SqlServer.Server.SqlPipe">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2eacd1a5ec4707b956c3ddb1c43f6451deba47c3" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="70571398" /></Metadata><TypeSignature Language="C#" Value="public sealed class SqlPipe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlPipe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlPipe" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlPipe" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlPipe sealed" />
  <TypeSignature Language="F#" Value="type SqlPipe = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>允许托管存储过程在 SQL Server 数据库上进行进程内运行，以便将结果返回调用方。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此类的实例通过类的属性可用于托管存储过程 <xref:Microsoft.SqlServer.Server.SqlContext.Pipe%2A> <xref:Microsoft.SqlServer.Server.SqlContext> 。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Data.SqlClient.SqlConnection> 和 <xref:System.Data.SqlClient.SqlCommand> 从存储过程中的数据源中选择行。 然后，该示例使用 <xref:Microsoft.SqlServer.Server.SqlPipe> 执行命令，并将结果发送回客户端。  
  
 [!code-csharp[DataWorks SqlPipe#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecuteAndSend">
      <MemberSignature Language="C#" Value="public void ExecuteAndSend (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecuteAndSend(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.ExecuteAndSend(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecuteAndSend (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecuteAndSend(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberSignature Language="F#" Value="member this.ExecuteAndSend : System.Data.SqlClient.SqlCommand -&gt; unit" Usage="sqlPipe.ExecuteAndSend command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">要执行的 <see cref="T:System.Data.SqlClient.SqlCommand" /> 对象。</param>
        <summary>执行作为参数传递的命令，并将结果发送到客户端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 除了任何实际结果，其他消息和错误也直接发送到客户端。  
  
 输出参数和返回值不会发送到客户端;它们通过命令对象的参数集合可供调用方使用。  
  
 如果命令未绑定到进程内连接， <xref:System.InvalidOperationException> 则会引发。 对于绑定到进程外连接的命令，此方法不受支持。  
  
 如果提交的对象中存在错误，则会将 <xref:System.Data.SqlClient.SqlCommand> 异常发送到管道，但也会将副本发送到调用托管代码。 如果调用代码未捕获异常，则会将堆栈传播到 Transact-sql 代码，并在输出中出现两次。 如果调用代码捕获了异常，则管道使用者仍将看到错误，但不会出现重复的错误。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Data.SqlClient.SqlConnection> 和 <xref:System.Data.SqlClient.SqlCommand> 从存储过程中的数据源中选择行。 然后，该示例使用 <xref:Microsoft.SqlServer.Server.SqlPipe> 执行命令，并将结果发送回客户端。  
  
 [!code-csharp[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="command" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">对于绑定到进程外连接的命令，此方法不受支持。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSendingResults">
      <MemberSignature Language="C#" Value="public bool IsSendingResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSendingResults" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSendingResults As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSendingResults { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSendingResults : bool" Usage="Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> 是否处于将单个结果集发送回客户端的模式。 此属性是只读的。</summary>
        <value>如果已调用 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 方法，并且 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> 处于将单个结果集发送回客户端的模式，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将结果直接发送到客户端或当前输出使用者。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 **Send**方法将数据直接发送到客户端或调用方。 它通常是使用 **管道** 方法输出的客户端，但对于嵌套 CLR 存储过程，输出使用者也可以是存储过程。 例如，过程1> 调用 <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> 命令文本 "EXEC Procedure2"。 Procedure2 也是托管存储过程。 如果 Procedure2 现在调用 <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A> ，则会将行发送到 Procedure1's 读取器，而不是发送到客户端。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.Send : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.Send record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">发送到客户端的单行结果集：一个 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 对象。</param>
        <summary>将单行结果集直接发送到客户端或当前输出使用者。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="record" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Data.SqlClient.SqlDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Data.SqlClient.SqlDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.Data.SqlClient.SqlDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (reader As SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Data::SqlClient::SqlDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Send : System.Data.SqlClient.SqlDataReader -&gt; unit" Usage="sqlPipe.Send reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.SqlClient.SqlDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">要发送到客户端的多行结果集：一个 <see cref="T:System.Data.SqlClient.SqlDataReader" /> 对象。</param>
        <summary>将多行结果集直接发送到客户端或当前输出使用者。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Data.SqlClient.SqlDataReader> 作为参数传入的对象具有隐藏列，则不会将这些列传播到发送到客户端的结果集。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Send : string -&gt; unit" Usage="sqlPipe.Send message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要发送到客户端的消息字符串。</param>
        <summary>将字符串消息直接发送到客户端或当前输出使用者。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 消息字符串以信息性消息的形式发送到客户端。 客户端应用程序可以通过不同的机制侦听消息，具体取决于所使用的数据访问应用程序编程接口 (API) 。 例如，如果客户端使用的是 ADO.NET，消息将通过事件传输 <xref:System.Data.SqlClient.SqlConnection.InfoMessage> 。  
  
   
  
## Examples  
 下面的示例使用 <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A> 方法将消息字符串直接发送到客户端。  
  
 [!code-csharp[DataWorks SqlPipe.Send#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.Send#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="message" /> 大于4,000个字符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendResultsEnd">
      <MemberSignature Language="C#" Value="public void SendResultsEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsEnd ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsEnd();" />
      <MemberSignature Language="F#" Value="member this.SendResultsEnd : unit -&gt; unit" Usage="sqlPipe.SendResultsEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>标记结果集的结尾，并将 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> 实例返回到初始状态。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 托管存储过程可以将结果集发送到未实现的客户端 <xref:System.Data.SqlClient.SqlDataReader> 。 此方法与和一起 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> 允许存储过程将自定义结果集发送到客户端。  
  
   
  
## Examples  
 下面的示例创建一个新的和一个新的 <xref:Microsoft.SqlServer.Server.SqlDataRecord> <xref:Microsoft.SqlServer.Server.SqlMetaData> 。 然后，该示例使用方法标记结果集的开头 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> ，使用方法将包含示例数据的记录发送回客户端， <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> 并使用方法标记结果集的结尾 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> 。  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 方法以前未被调用过。</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsRow">
      <MemberSignature Language="C#" Value="public void SendResultsRow (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsRow(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsRow (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsRow(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsRow : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsRow record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record"><see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 对象，它具有要发送到客户端的行的列值。 记录的架构必须与传递给 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 方法的 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 的元数据所描述的架构相匹配。</param>
        <summary>将单行数据发送回客户端。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 托管存储过程可以将结果集发送到未实现的客户端 <xref:System.Data.SqlClient.SqlDataReader> 。 此方法与和一起 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> 允许存储过程将自定义结果集发送到客户端。  
  
 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>方法将单个数据行发送回客户端。 然后，可以通过调用将行返回到调用方 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> ，每次发送一行。 发送完所有行后， <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> 需要调用方法来标记结果集的末尾。  
  
   
  
## Examples  
 下面的示例创建一个新的和一个新的 <xref:Microsoft.SqlServer.Server.SqlDataRecord> <xref:Microsoft.SqlServer.Server.SqlMetaData> 。 然后，该示例使用方法标记结果集的开头 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> ，使用方法将包含示例数据的记录发送回客户端， <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> 并使用方法标记结果集的结尾 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> 。  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="record" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 方法以前未被调用过。</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsStart">
      <MemberSignature Language="C#" Value="public void SendResultsStart (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsStart(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsStart (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsStart(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberSignature Language="F#" Value="member this.SendResultsStart : Microsoft.SqlServer.Server.SqlDataRecord -&gt; unit" Usage="sqlPipe.SendResultsStart record" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record"><see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> 对象，元数据即是从中提取并用来描述结果集的。</param>
        <summary>标记要发送到客户端的结果集的开始，并使用记录参数构造描述结果集的元数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 托管存储过程可以将结果集发送到未实现的客户端 <xref:System.Data.SqlClient.SqlDataReader> 。 此方法与和一起 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> 允许存储过程将自定义结果集发送到客户端。  
  
 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>方法标记结果集的开头，并使用 record 参数来构造描述结果集的元数据。 使用方法发送的所有后续行 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> 都必须与该元数据定义匹配。  
  
 请注意，在调用后 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> ，只能 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> 调用和。 同一实例中的任何其他方法都 <xref:Microsoft.SqlServer.Server.SqlPipe> 将引发 <xref:System.InvalidOperationException> 。 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> 将设置 <xref:Microsoft.SqlServer.Server.SqlPipe> 回初始状态，以便可以调用其他方法。  
  
 在控件从 CLR 执行返回到 Transact-sql 后，不要尝试使用初始化为 CLR 内存的静态或局部变量。 例如，不要存储 in 进程类的实例，例如 `SQLDataRecord` ，在控件从 CLR 返回后将使用该实例。 一个例外情况是 `SQLMetaData` 在进程类中。  
  
   
  
## Examples  
 下面的示例创建一个新的和一个新的 <xref:Microsoft.SqlServer.Server.SqlDataRecord> <xref:Microsoft.SqlServer.Server.SqlMetaData> 。 然后，该示例使用方法标记结果集的开头 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> ，使用方法将包含示例数据的记录发送回客户端， <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> 并使用方法标记结果集的结尾 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> 。  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="record" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="record" /> 没有列或者还没有初始化。</exception>
        <exception cref="T:System.InvalidOperationException">在 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" /> 方法之后调用了一个 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" /> 或 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> 方法之外的方法。</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
  </Members>
</Type>
