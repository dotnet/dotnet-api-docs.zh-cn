<Type Name="SqlContext" FullName="Microsoft.SqlServer.Server.SqlContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="825d62a5e9710c1402283dbef5bd00b05faec9ce" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="70611929" /></Metadata><TypeSignature Language="C#" Value="public sealed class SqlContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlContext sealed" />
  <TypeSignature Language="F#" Value="type SqlContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="0d9cf-101">表示调用方上下文的抽象，该上下文提供对 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" />、<see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" /> 和 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象的访问。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-101">Represents an abstraction of the caller's context, which provides access to the <see cref="T:Microsoft.SqlServer.Server.SqlPipe" />, <see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" />, and <see cref="T:System.Security.Principal.WindowsIdentity" /> objects.</span></span> <span data-ttu-id="0d9cf-102">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d9cf-103"><xref:Microsoft.SqlServer.Server.SqlContext>对象可用于获取触发器上下文 (用于在触发器中执行的代码) 和 (可用的管道对象（如存储过程) 中）。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-103">The <xref:Microsoft.SqlServer.Server.SqlContext> object can be used to obtain the trigger context (for code executing in a trigger) and the pipe object (when available, such as in stored procedures).</span></span> <span data-ttu-id="0d9cf-104"><xref:System.Security.Principal.WindowsIdentity>如果客户端使用集成身份验证通过服务器进行身份验证，则还可以使用它来获取表示调用客户端的 Microsoft Windows 标识的对象。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-104">It can also be used to obtain a <xref:System.Security.Principal.WindowsIdentity> object that represents the Microsoft Windows identity of the calling client, if the client authenticated with the server using integrated authentication.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d9cf-105">下面的示例创建一个新的和一个新的 <xref:Microsoft.SqlServer.Server.SqlDataRecord> <xref:Microsoft.SqlServer.Server.SqlMetaData> 。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-105">The following example creates a new <xref:Microsoft.SqlServer.Server.SqlDataRecord> and its <xref:Microsoft.SqlServer.Server.SqlMetaData>.</span></span> <span data-ttu-id="0d9cf-106">然后，该示例使用方法标记结果集的开头 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> ，使用方法将包含示例数据的记录发送回客户端， <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> 并使用方法标记结果集的结尾 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> 。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-106">The example then marks the beginning of a result set using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> method, sends records with example data back to the client using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> method, and marks the end of the result set with the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> method.</span></span>  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsAvailable">
      <MemberSignature Language="C#" Value="public static bool IsAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsAvailable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.IsAvailable" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property IsAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool IsAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAvailable : bool" Usage="Microsoft.SqlServer.Server.SqlContext.IsAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d9cf-107">指定调用代码是否在 SQL Server 中运行，以及上下文连接是否可访问。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-107">Specifies whether the calling code is running within SQL Server, and if the context connection can be accessed.</span></span></summary>
        <value><span data-ttu-id="0d9cf-108">如果上下文连接可用，并且其他 <see cref="T:Microsoft.SqlServer.Server.SqlContext" /> 成员可访问，则为 <see langword="True" />。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-108"><see langword="True" /> if the context connection is available and the other <see cref="T:Microsoft.SqlServer.Server.SqlContext" /> members can be accessed.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d9cf-109">如果此属性返回 false，则所有其他 <xref:Microsoft.SqlServer.Server.SqlContext> 成员将引发（ <xref:System.InvalidOperationException> 如果使用）。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-109">If this property returns false, all the other <xref:Microsoft.SqlServer.Server.SqlContext> members throw an <xref:System.InvalidOperationException> if used.</span></span>  
  
 <span data-ttu-id="0d9cf-110">如果此属性返回 false，则任何打开连接字符串中包含 "context connection = true" 的连接对象的尝试都将失败。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-110">If this property returns false, any attempt to open a connection object that has "context connection=true" in the connection string fails.</span></span>  
  
 <span data-ttu-id="0d9cf-111">此属性为只读。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-111">This property is read-only.</span></span>  
  
 <span data-ttu-id="0d9cf-112">使用 ADO.NET 进行数据访问时，如果一段代码可以 (使用公共语言运行时集成) 和外部 SQL Server SQL Server 运行，则可以使用此属性检查上下文连接是否可用。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-112">When using ADO.NET for data-access, if a piece of code may run both inside SQL Server (using common language runtime integration) and outside SQL Server, this property can be used to check whether the context connection is available.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pipe">
      <MemberSignature Language="C#" Value="public static Microsoft.SqlServer.Server.SqlPipe Pipe { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.SqlServer.Server.SqlPipe Pipe" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.Pipe" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Pipe As SqlPipe" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::SqlServer::Server::SqlPipe ^ Pipe { Microsoft::SqlServer::Server::SqlPipe ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Pipe : Microsoft.SqlServer.Server.SqlPipe" Usage="Microsoft.SqlServer.Server.SqlContext.Pipe" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Server.SqlPipe</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d9cf-113">获取允许调用方将结果集、消息和命令的执行结果发送回客户端的管道对象。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-113">Gets the pipe object that allows the caller to send result sets, messages, and the results of executing commands back to the client.</span></span></summary>
        <value><span data-ttu-id="0d9cf-114">如果管道可用，则为 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> 的实例；如果在管道不可用的上下文中（如在用户定义的函数中）调用，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-114">An instance of <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> if a pipe is available, or <see langword="null" /> if called in a context where pipe is not available (for example, in a user-defined function).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d9cf-115">如果从 SQL Server 外部调用， <xref:System.NotSupportedException> 将引发。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-115">If invoked from outside SQL Server, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="0d9cf-116">此属性为只读。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-116">This property is read-only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TriggerContext">
      <MemberSignature Language="C#" Value="public static Microsoft.SqlServer.Server.SqlTriggerContext TriggerContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.SqlServer.Server.SqlTriggerContext TriggerContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.TriggerContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property TriggerContext As SqlTriggerContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::SqlServer::Server::SqlTriggerContext ^ TriggerContext { Microsoft::SqlServer::Server::SqlTriggerContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TriggerContext : Microsoft.SqlServer.Server.SqlTriggerContext" Usage="Microsoft.SqlServer.Server.SqlContext.TriggerContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Server.SqlTriggerContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d9cf-117">获取触发器上下文，该上下文用于向调用方提供有关导致触发器激发的原因的信息，以及被更新的列的映射。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-117">Gets the trigger context used to provide the caller with information about what caused the trigger to fire, and a map of the columns that were updated.</span></span></summary>
        <value><span data-ttu-id="0d9cf-118">如果触发器上下文可用，则为 <see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" /> 的实例；如果在触发器调用之外调用，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-118">An instance of <see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" /> if a trigger context is available, or <see langword="null" /> if called outside of a trigger invocation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d9cf-119"><xref:Microsoft.SqlServer.Server.SqlTriggerContext>只能从公共语言运行时触发器中检索对象。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-119">The <xref:Microsoft.SqlServer.Server.SqlTriggerContext> object can only be retrieved from within a common language runtime trigger.</span></span>  
  
 <span data-ttu-id="0d9cf-120">如果 <xref:Microsoft.SqlServer.Server.SqlContext.TriggerContext%2A> 从 SQL Server 之外访问属性， <xref:System.NotSupportedException> 则会引发。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-120">If the <xref:Microsoft.SqlServer.Server.SqlContext.TriggerContext%2A> property is accessed from outside of SQL Server, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="0d9cf-121">此属性为只读。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-121">This property is read-only.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowsIdentity">
      <MemberSignature Language="C#" Value="public static System.Security.Principal.WindowsIdentity WindowsIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Security.Principal.WindowsIdentity WindowsIdentity" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.WindowsIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property WindowsIdentity As WindowsIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Security::Principal::WindowsIdentity ^ WindowsIdentity { System::Security::Principal::WindowsIdentity ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WindowsIdentity : System.Security.Principal.WindowsIdentity" Usage="Microsoft.SqlServer.Server.SqlContext.WindowsIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.WindowsIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0d9cf-122">调用方的 Microsoft Windows 标识。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-122">The Microsoft Windows identity of the caller.</span></span></summary>
        <value><span data-ttu-id="0d9cf-123">表示调用方的 Windows 标识的 <see cref="T:System.Security.Principal.WindowsIdentity" /> 实例；如果客户端是使用“SQL Server 身份验证”进行身份验证的，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-123">A <see cref="T:System.Security.Principal.WindowsIdentity" /> instance representing the Windows identity of the caller, or <see langword="null" /> if the client was authenticated using SQL Server Authentication.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0d9cf-124">公共语言运行时 (CLR) 中的 SQL Server 代码始终在进程帐户的上下文中调用。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-124">Common language runtime (CLR) code inside SQL Server is always invoked in the context of the process account.</span></span> <span data-ttu-id="0d9cf-125">如果代码需要使用调用用户的标识而不是 SQL Server 进程标识来执行操作，则应通过此属性获取模拟标记。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-125">If it is necessary for the code to perform an action using calling user's identity instead of the SQL Server process identity, then an impersonation token should be obtained through this property.</span></span> <span data-ttu-id="0d9cf-126">获取 <xref:System.Security.Principal.WindowsIdentity> 对象之后，调用方可以模拟客户端帐户并代表调用方执行操作。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-126">After obtaining the <xref:System.Security.Principal.WindowsIdentity> object, callers can impersonate the client account and perform actions on their behalf.</span></span>  
  
 <span data-ttu-id="0d9cf-127">如果从 SQL Server 外部调用， <xref:System.NotSupportedException> 将引发。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-127">If invoked from outside SQL Server, a <xref:System.NotSupportedException> is thrown.</span></span>  
  
 <span data-ttu-id="0d9cf-128">只有用 `EXTERNAL_ACCESS` 或 `UNSAFE` 权限标记的程序集才能访问此属性。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-128">Only assemblies marked with `EXTERNAL_ACCESS` or `UNSAFE` permissions can access this property.</span></span>  
  
 <span data-ttu-id="0d9cf-129">此属性为只读。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-129">This property is read-only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0d9cf-130">下面的示例说明如何获取调用客户端的 Windows 标识并模拟该客户端。</span><span class="sxs-lookup"><span data-stu-id="0d9cf-130">The following example shows how to get the Windows identity of the calling client and impersonate the client.</span></span>
  
 [!code-csharp[DataWorks SqlContext.WindowsIdentity Sample#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlContext.WindowsIdentity Sample/CS/source.cs#1)]
 [!code-vb[DataWorks SqlContext.WindowsIdentity Sample#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlContext.WindowsIdentity Sample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
