<Type Name="WSFederationAuthenticationModule" FullName="System.IdentityModel.Services.WSFederationAuthenticationModule">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0108f43233e1a45b1b8e05000444b1cf8b2e64ee" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="86325479" /></Metadata><TypeSignature Language="C#" Value="public class WSFederationAuthenticationModule : System.IdentityModel.Services.HttpModuleBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WSFederationAuthenticationModule extends System.IdentityModel.Services.HttpModuleBase" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Services.WSFederationAuthenticationModule" />
  <TypeSignature Language="VB.NET" Value="Public Class WSFederationAuthenticationModule&#xA;Inherits HttpModuleBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class WSFederationAuthenticationModule : System::IdentityModel::Services::HttpModuleBase" />
  <TypeSignature Language="F#" Value="type WSFederationAuthenticationModule = class&#xA;    inherit HttpModuleBase" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IdentityModel.Services.HttpModuleBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.IdentityModel.Services.WSFederationAuthenticationModule" /> 是一个 HTTP 模块，它通过在传入请求中强制执行联合身份验证设置来保护 ASP.NET 应用程序。 <see cref="T:System.IdentityModel.Services.WSFederationAuthenticationModule" /> 是 WIF 提供的现成可用的主要模块，用于在 ASP.NET 应用程序中处理基于声明的标识访问。  
  
<see cref="T:System.IdentityModel.Services.WSFederationAuthenticationModule" /> 引发几个事件，它允许 ASP.NET 开发人员更改默认行为和控制身份验证和声明处理如何发生的细节。 <see cref="T:System.IdentityModel.Services.WSFederationAuthenticationModule" /> 功能被分为任务具体的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule>类实现称为 WS 联合身份验证模块 (WSFAM) 的 HTTP 模块。 WSFAM 通过 Windows Identity Foundation (WIF) 实现。 通过在 web.config 文件中输入项，可以将 WSFAM 添加到 ASP.NET 管道。 它派生自 <xref:System.IdentityModel.Services.HttpModuleBase> ，它实现 <xref:System.Web.IHttpModule> 。 它向 ASP.NET 运行时注册，以侦听 <xref:System.Web.HttpApplication.EndRequest> 和 <xref:System.Web.HttpApplication.AuthenticateRequest> 事件。 侦听 <xref:System.Web.HttpApplication.EndRequest> 事件时，允许 WSFAM 将客户端重定向到 security token service (STS) ，以便在请求的资源上授权失败时获取安全令牌。 如果侦听 <xref:System.Web.HttpApplication.AuthenticateRequest> 事件，WSFAM 可以监视来自 STS 的响应的 HTTP 请求，其中包含所请求的令牌。 如果此类标记存在且有效，它将 <xref:System.Security.Claims.ClaimsPrincipal> 使用令牌中存在的声明为已经过身份验证的用户创建实例。  
  
 当使用 WSFAM 时，会话管理由会话身份验证模块 (SAM) 提供，该类是类的实例 <xref:System.IdentityModel.Services.SessionAuthenticationModule> ，或者是派生自的类。 SAM 还会添加到配置文件中的 ASP.NET 管道。 SAM 监视) cookie (会话的身份验证请求。 如果这些 cookie 存在且有效，模块将 <xref:System.Security.Claims.ClaimsPrincipal> 从中提取经过身份验证的用户的， <xref:System.IdentityModel.Tokens.SessionSecurityToken> 并设置 <xref:System.Web.HttpContext.User%2A?displayProperty=nameWithType> 属性和线程主体 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> 属性。  
  
 WSFAM 提供：  
  
-   ASP.NET 应用程序通过使用 WS-FEDERATION 协议将身份验证外包给 security token service (STS) 的能力。 标识可跨一个或多个标识领域进行联合，并涉及多个 Sts。  
  
-   ASP.NET 应用程序的基于声明的标识。 在身份验证期间，WSFAM 从 STS 发送的安全令牌中的声明生成一个主体，并将此声明主体设置为线程主体。 然后，你可以使用此主体对你的代码中所代表的用户进行进一步的授权、演示和逻辑决策。  
  
 WSFAM 公开多个属性，这些属性提供要在 WS-FEDERATION 登录和注销请求中使用的默认消息参数。 这些属性通常是从配置文件中的[ &lt; wsFederation &gt; ](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/wsfederation)元素初始化的。 这些属性最重要的是：  
  
-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A>属性，指定要向其发送 WS 联合身份验证登录和注销请求 (STS) security token service 的地址。  
  
-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm%2A>属性，该属性指定要在 WS 联合身份验证登录请求中使用的 wtrealm 参数。 Wtrealm 参数将信赖方 (RP) 应用程序的安全领域标识到 STS。  
  
 还可以通过为事件提供事件处理程序委托，按请求来更改登录消息参数 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> 。  
  
 两个属性控制模块的行为。 这两个属性通常也是从 `<wsFederation>` 配置中的元素初始化的。  
  
-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.PassiveRedirectEnabled%2A>属性指定该模块是否应执行被动重定向到 STS 进行身份验证。  
  
-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.PersistentCookiesOnPassiveRedirects%2A>属性指定会话是否应为持久性会话。 如果将此属性设置为 true，则使用 SAM 将会话 cookie 写入客户端。 在来自客户端的后续请求中，SAM 通过使用会话 cookie 中保留的令牌提供身份验证。  
  
 WSFAM 会在登录和注销期间引发若干事件，这允许 ASP.NET 开发人员更改模块的默认行为，并控制如何进行身份验证和声明处理的详细信息。  
  
 在将 WS 联合身份验证登录请求发送到 STS 之前，将引发以下事件：  
  
-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.AuthorizationFailed>：在启用被动重定向且授权在请求的资源上失败时引发。  
  
-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider>： WSFAM 在将 WS 联合身份验证登录请求发送到 STS 之前引发。 可以使用此事件更改登录请求中的参数。  
  
 当从 STS 接收到 (颁发的安全令牌) 时，将引发以下事件：  
  
-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenReceived>：仅在 STS 发送的安全令牌从响应中读取后引发。  
  
-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenValidated>：在验证令牌后立即引发。 你可以使用此事件来筛选、转换声明，或将声明添加到声明主体 (<xref:System.Security.Claims.ClaimsPrincipal> 从安全令牌创建) 。  
  
-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated>：仅在 (<xref:System.IdentityModel.Tokens.SessionSecurityToken> 从声明主体创建的会话令牌) 用于设置线程主体和当前用户并将其写入会话 cookie 之前引发。 使您有机会修改会话令牌或启用或禁用写入会话 cookie。  
  
-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignedIn>：仅在已设置线程主体和当前用户后，在身份验证结束时引发。  
  
-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignInError>：如果在登录过程中发生异常，则引发。 您可以取消该请求并防止异常返回给调用方。  
  
 当从会话中注销或处理 WS-FEDERATION 注销清理请求 (wsignoutcleanup1.0 1.0) 时，将引发以下事件：  
  
-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SigningOut>：在删除会话之前引发，以使您能够执行可能依赖于会话或取消注销的任何清理。  
  
-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignedOut>：已删除会话后立即引发。  
  
-   <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutError>：在注销过程中发生异常时引发。您可以取消注销并防止异常返回给调用方。  
  
> [!NOTE]
>  当通过调用方法在 STS 上注销时，不会引发注销事件 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> 。  
  
 可以通过两种方式使用 WSFAM 登录到 STS。 第一种方法是通过属性启用被动重定向 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.PassiveRedirectEnabled%2A> 。 在这种情况下，当请求的资源的授权失败，而不是将 `401:Access Denied` 响应返回给客户端时，WSFAM 会基于其属性生成 WS 联合身份验证登录请求消息，并将客户端重定向到 STS 以检索安全令牌。 第二种方法是通过 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignIn%2A> 从应用程序中的网页或自定义控件调用方法，将客户端显式重定向到 STS。 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignIn%2A>方法还使用 WSFAM 的属性来构造登录请求。  
  
 可以使用任何重载 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%2A> 方法从会话中注销。 这会删除客户端上的会话 cookie。 它不会将 WS 联合身份验证注销消息 ( "wsignout1.0 1.0" ) 发送到 STS。 若要在 STS 中注销，必须使用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> 方法。  
  
 WSFAM 通过删除与客户端的会话来处理 "wsignoutcleanup1.0 1.0" ) 的 WS 联合身份验证注销 ( 请求。 如果未设置注销清除消息中的 wreply 参数，则 WSFAM 会将绿色复选标记的图像返回到发送该消息的 STS。 STS 可以使用此功能来确认 RP 是否已完成其注销。  
  
 WSFAM 通过多个任务特定的方法公开其功能，例如，其请求处理管道。 可以在派生类中重写这些方法，以更改 WSFAM 的行为。  
  
 若要使用该模块，必须将其添加到管道中，如下面的 XML 所示：  
  
```  
<configuration>  
  <system.webServer>  
    <modules>  
      <add name="WsFederationAuthenticationModule" type="System.IdentityModel.Services.WSFederationAuthenticationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"/>  
    </modules>  
  </system.webServer>  
</configuration>  
```  
  
 配置后，会 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule> 在处理 HTTP 请求的各个阶段引发事件。 ASP.NET 开发人员可以处理 global.asax 文件中的这些事件。  
  
   
  
## Examples  
 [!code-csharp[WifWSFAM#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifwsfam/cs/webapplication1/global.asax.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WSFederationAuthenticationModule ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WSFederationAuthenticationModule();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>由派生类中的构造函数调用，用于初始化 <see cref="T:System.IdentityModel.Services.WSFederationAuthenticationModule" /> 类。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthenticationType">
      <MemberSignature Language="C#" Value="public string AuthenticationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AuthenticationType" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.WSFederationAuthenticationModule.AuthenticationType" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AuthenticationType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AuthenticationType : string with get, set" Usage="System.IdentityModel.Services.WSFederationAuthenticationModule.AuthenticationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 WS 联合身份验证登录请求（“wsignin1.0”）中使用的 wauth 参数的值。</summary>
        <value>一个认证类型的 URI。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wauth 参数是可选的。 如果将 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.AuthenticationType%2A> 属性设置为 `null` 或空字符串，则登录请求中不包含 wauth 参数。  
  
 可以通过为事件添加处理程序，在每个 HTTP 请求上覆盖此设置 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> 。 此事件恰好在模块使用 WS 联合身份验证登录请求消息重定向到 security token service (STS) 之前引发。 STS 由 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> 属性指定。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthorizationFailed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.IdentityModel.Services.AuthorizationFailedEventArgs&gt; AuthorizationFailed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IdentityModel.Services.AuthorizationFailedEventArgs&gt; AuthorizationFailed" />
      <MemberSignature Language="DocId" Value="E:System.IdentityModel.Services.WSFederationAuthenticationModule.AuthorizationFailed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AuthorizationFailed As EventHandler(Of AuthorizationFailedEventArgs) " FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::IdentityModel::Services::AuthorizationFailedEventArgs ^&gt; ^ AuthorizationFailed;" />
      <MemberSignature Language="F#" Value="member this.AuthorizationFailed : EventHandler&lt;System.IdentityModel.Services.AuthorizationFailedEventArgs&gt; " Usage="member this.AuthorizationFailed : System.EventHandler&lt;System.IdentityModel.Services.AuthorizationFailedEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event AuthorizationFailed As EventHandler(Of AuthorizationFailedEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IdentityModel.Services.AuthorizationFailedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当模块确定是否应该重定向用户配置的颁布者验证时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.AuthorizationFailed>当 HTTP 请求的授权失败时，将引发事件。 它 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnEndRequest%2A> 通过调用方法从事件处理程序委托中引发 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthorizationFailed%2A> 。  
  
 可以设置 <xref:System.IdentityModel.Services.AuthorizationFailedEventArgs.RedirectToIdentityProvider%2A?displayProperty=nameWithType> 属性来控制是否将请求重定向到标识提供者。 如果用户已经过身份验证，框架会将此属性初始化为 `false` 。 在这种情况下，将属性设置为 `true` 可能会导致与 STS 的循环。  
  
> [!NOTE]
>  <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider>事件可用于修改 URL 或取消重定向。  
  
 若要在 ASP.NET 应用程序中处理此事件，请 `WSFederationAuthentication_AuthorizationFailed` 在 global.asax 文件中创建一个名为的方法。  
  
   
  
## Examples  
 [!code-csharp[WifWSFAM#7](~/samples/snippets/csharp/VS_Snippets_Misc/wifwsfam/cs/webapplication1/global.asax.cs#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CanReadSignInResponse">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回一个值，该值指示指定 HTTP 请求是否为 WS-Federation 登录响应消息。 如果消息为 WS 联合身份验证注销清理消息（“wsignoutcleanup1.0”），此方法处理请求。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 登录响应消息将发送到信赖方 (RP) ，security token service (STS) 来响应登录请求消息。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="CanReadSignInResponse">
      <MemberSignature Language="C#" Value="public bool CanReadSignInResponse (System.Web.HttpRequestBase request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanReadSignInResponse(class System.Web.HttpRequestBase request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse(System.Web.HttpRequestBase)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanReadSignInResponse (request As HttpRequestBase) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanReadSignInResponse(System::Web::HttpRequestBase ^ request);" />
      <MemberSignature Language="F#" Value="member this.CanReadSignInResponse : System.Web.HttpRequestBase -&gt; bool" Usage="wSFederationAuthenticationModule.CanReadSignInResponse request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Web.HttpRequestBase" />
      </Parameters>
      <Docs>
        <param name="request">传入的 HTTP 请求。</param>
        <summary>返回一个值，该值指示指定 HTTP 请求是否为 WS-Federation 登录响应消息。 如果消息为 WS 联合身份验证注销清理消息（“wsignoutcleanup1.0”），此方法处理请求。</summary>
        <returns>如果指定的 HTTP 请求包含 wa 参数设置为“wsignout1.0”并且 wresult 参数不为空的 FORM 发布，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法从请求处理管道中调用，以确定传入的 HTTP 请求是否为包含 WS 联合身份验证登录响应消息的窗体 post。  
  
 它调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse%28System.Web.HttpRequestBase%2CSystem.Boolean%29?displayProperty=nameWithType> 重载，并将 `onPage` 参数设置 `false` 为，指示调用在处理页时不产生。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="request" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest(System.Object,System.EventArgs)" />
        <altmember cref="M:System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse(System.Web.HttpRequestBase,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="CanReadSignInResponse">
      <MemberSignature Language="C#" Value="public virtual bool CanReadSignInResponse (System.Web.HttpRequestBase request, bool onPage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanReadSignInResponse(class System.Web.HttpRequestBase request, bool onPage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse(System.Web.HttpRequestBase,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanReadSignInResponse (request As HttpRequestBase, onPage As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanReadSignInResponse(System::Web::HttpRequestBase ^ request, bool onPage);" />
      <MemberSignature Language="F#" Value="abstract member CanReadSignInResponse : System.Web.HttpRequestBase * bool -&gt; bool&#xA;override this.CanReadSignInResponse : System.Web.HttpRequestBase * bool -&gt; bool" Usage="wSFederationAuthenticationModule.CanReadSignInResponse (request, onPage)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Web.HttpRequestBase" />
        <Parameter Name="onPage" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="request">传入的 HTTP 请求。</param>
        <param name="onPage">如果在处理页请求时开始调用，则为 <see langword="true" />。 如果调用方是 HTTP 模块，则为 <see langword="false" />。 如果传入消息是 WS 联合身份验证注销清理消息（“wsignoutcleanup1.0 ”），则该参数确定如何停止进程或发送重定向。</param>
        <summary>返回一个值，该值指示指定 HTTP 请求是否为 WS-Federation 登录响应消息。 如果消息为 WS 联合身份验证注销清理消息（“wsignoutcleanup1.0”），此方法处理请求。</summary>
        <returns>如果指定的 HTTP 请求包含 wa 参数设置为“wsignout1.0”并且 wresult 参数不为空的 FORM 发布，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法通过重载从请求处理管道调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse%28System.Web.HttpRequestBase%29?displayProperty=nameWithType> ，以确定传入的 HTTP 请求是否为包含 WS 联合身份验证登录响应消息的窗体 POST。  
  
 默认实现执行以下操作：  
  
-   如果传入请求是窗体发布，则会调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.IsSignInResponse%2A> 方法来确定窗体发布是否包含登录响应。  
  
-   如果传入的请求不是窗体 POST，并且请求包含 WS-FEDERATION 注销请求， (wa 参数是 "wsignoutcleanup1.0 1.0" ) ，则执行注销清理。 在这种情况下，将在 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%28System.Boolean%29?displayProperty=nameWithType> 参数设置为的情况下调用方法， `true` 以指示注销会话的注销)  (。 这也会导致引发注销事件。  
  
     接下来，如果注销清理请求包含 wreply 参数，则客户端将重定向到该方法返回的 URL <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignOutRedirectUrl%2A> ; 否则，会将绿色复选标记的图像返回到 STS。 此图像的接收可以由 STS 用于确认是否已接收并成功处理了 RP 的注销清理请求。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="request" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse(System.Web.HttpRequestBase)" />
      </Docs>
    </Member>
    <Member MemberName="CreateSignInRequest">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Services.SignInRequestMessage CreateSignInRequest (string uniqueId, string returnUrl, bool rememberMeSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IdentityModel.Services.SignInRequestMessage CreateSignInRequest(string uniqueId, string returnUrl, bool rememberMeSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateSignInRequest (uniqueId As String, returnUrl As String, rememberMeSet As Boolean) As SignInRequestMessage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IdentityModel::Services::SignInRequestMessage ^ CreateSignInRequest(System::String ^ uniqueId, System::String ^ returnUrl, bool rememberMeSet);" />
      <MemberSignature Language="F#" Value="member this.CreateSignInRequest : string * string * bool -&gt; System.IdentityModel.Services.SignInRequestMessage" Usage="wSFederationAuthenticationModule.CreateSignInRequest (uniqueId, returnUrl, rememberMeSet)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Services.SignInRequestMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
        <Parameter Name="returnUrl" Type="System.String" />
        <Parameter Name="rememberMeSet" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="uniqueId">WSFAM 保存请求中的 WS-Federation 标志 wctx 参数值; 但是，该模块在处理签入请求或sign-in反应时不使用它。 您可以将其设置为任何值。 它不必是唯一的。</param>
        <param name="returnUrl">模块应返回在身份验证的 URL。</param>
        <param name="rememberMeSet">WSFAM 保存请求中的 WS-Federation 标志 wctx 参数值; 但是，该模块在处理签入请求或sign-in反应时不使用它。 可以设置该 <see langword="true" /> 或 <see langword="false" />。</param>
        <summary>使用模块上配置的 WS-Federation 参数，在请求消息中创建 WS-Federation 符号。</summary>
        <returns>WS-Federation 登录请求消息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建由对象表示的 WS 联合身份验证登录请求 <xref:System.IdentityModel.Services.SignInRequestMessage> 。 新对象的属性 <xref:System.IdentityModel.Services.SignInRequestMessage> 设置如下：  
  
-   <xref:System.IdentityModel.Services.WSFederationMessage.Context%2A>Wctx 参数 (属性) 设置为使用方法参数创建的值。  
  
-   <xref:System.IdentityModel.Services.SignInRequestMessage.CurrentTime%2A>Wct 参数 (属性) 设置为当前时间。  
  
-   所有其他属性都是使用当前实例的等效属性进行设置的。  
  
 传递给方法的参数用于创建 wctx 消息参数。 这是具有以下格式的字符串： `ru=returnUrl&cx=SignInContext&rm=rememberMeSet&id=uniqueId` 。  
  
-   此 `ru` 值设置为 `returnUrl` 传递给方法的参数的值，并指定该模块应将浏览器定向到身份验证成功后的 URL。 这是存储在 WSFAM 使用的 wctx 字符串中的唯一值。 模块调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetReturnUrlFromResponse%2A> 方法，以便在处理 ws-federation 登录响应时从 wctx 参数提取此值。 不应将其与属性指定的 wreply message 参数混淆， <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Reply%2A> 后者在 RP (STS) 应将其响应定向 security token service 到的 RP 中提供地址。  
  
-   `cx`参数设置为属性的值 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignInContext%2A> 。 公开此属性是为了使你能够设置应用程序定义的任何应存储在 wctx 字符串中的上下文;但是，WSFAM 不公开方法以便在响应中提取此值。 如果应用程序需要该值，则必须提供代码来分析 wctx 字符串并在处理响应时读取此值。 您可以通过重写方法来实现此目的 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetReturnUrlFromResponse%2A> 。  
  
-   `rm`值（设置为参数的值 `rememberMeSet` ）和 `id` 参数（设置为参数的值） `uniqueId` 都不会由 WSFAM 使用。 这些值可以设置为任意值。  
  
 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest%2A>方法从方法中调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectToIdentityProvider%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer" /> 属性为 <see langword="null" /> 或空字符串。  
  
-或- 
<see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm" /> 属性为 <see langword="null" /> 或空字符串。</exception>
        <altmember cref="M:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectToIdentityProvider(System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="FederatedSignOut">
      <MemberSignature Language="C#" Value="public static void FederatedSignOut (Uri signOutUrl, Uri replyUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FederatedSignOut(class System.Uri signOutUrl, class System.Uri replyUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut(System.Uri,System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub FederatedSignOut (signOutUrl As Uri, replyUrl As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FederatedSignOut(Uri ^ signOutUrl, Uri ^ replyUrl);" />
      <MemberSignature Language="F#" Value="static member FederatedSignOut : Uri * Uri -&gt; unit" Usage="System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut (signOutUrl, replyUrl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signOutUrl" Type="System.Uri" />
        <Parameter Name="replyUrl" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="signOutUrl">接收 WS-Federation 注销请求消息的 STS 的 URL。 不能为 <see langword="null" />。</param>
        <param name="replyUrl">将作为 wreply 值发送的注销请求消息 URL。</param>
        <summary>使用 WS-Federation 协议，在指定的安全标记的服务 (STS) 中注销。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用此方法可将 WS 联合身份验证注销请求消息发送到指定的 STS。 您可以选择为注销请求中的 wreply 参数提供一个值。  
  
 该方法将执行以下操作：  
  
1.  使用指定的参数创建 WS 联合身份验证注销请求消息。  
  
2.  对 <xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A?displayProperty=nameWithType> SAM 调用方法以删除会话 cookie。  
  
3.  使用第一步中的注销请求消息重定向到 STS。  
  
 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SigningOut> <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignedOut> <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutError> 此方法不会引发任何注销事件：、或。 若要删除会话而不向 STS 发送注销请求消息，请调用重载的 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%2A> 方法之一。  
  
> [!NOTE]
>  若要使用会话令牌执行被动注销，该模块依赖于登录期间在属性中存储的值 <xref:System.IdentityModel.Tokens.SessionSecurityToken.Context%2A?displayProperty=nameWithType> 。有关详细信息，请参阅 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSessionTokenContext%2A> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="signOutUrl" /> 不是 <see langword="null" /> 并且不是绝对 URI。  
  
- 或 - 
 <paramref name="replyUrl" /> 不是 <see langword="null" /> 并且不是绝对 URI。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="signOutUrl" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut" />
        <altmember cref="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSessionTokenContext" />
      </Docs>
    </Member>
    <Member MemberName="Freshness">
      <MemberSignature Language="C#" Value="public string Freshness { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Freshness" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Freshness" />
      <MemberSignature Language="VB.NET" Value="Public Property Freshness As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Freshness { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Freshness : string with get, set" Usage="System.IdentityModel.Services.WSFederationAuthenticationModule.Freshness" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 WS 联合身份验证登录请求（“wsignin1.0”）中使用的 wfresh 参数的值。</summary>
        <value>身份验证请求所需的最大生存期（以分钟为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wfresh 参数是可选的。 如果将 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Freshness%2A> 属性设置为 `null` 或空字符串，则登录请求中不包含 wfresh 参数。  
  
 可以通过为事件添加处理程序，在每个 HTTP 请求上覆盖此设置 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> 。 此事件恰好在模块使用 WS 联合身份验证登录请求消息重定向到 security token service (STS) 之前引发。 STS 由 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> 属性指定。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFederationPassiveSignOutUrl">
      <MemberSignature Language="C#" Value="public static string GetFederationPassiveSignOutUrl (string issuer, string signOutReply, string signOutQueryString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetFederationPassiveSignOutUrl(string issuer, string signOutReply, string signOutQueryString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetFederationPassiveSignOutUrl(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFederationPassiveSignOutUrl (issuer As String, signOutReply As String, signOutQueryString As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetFederationPassiveSignOutUrl(System::String ^ issuer, System::String ^ signOutReply, System::String ^ signOutQueryString);" />
      <MemberSignature Language="F#" Value="static member GetFederationPassiveSignOutUrl : string * string * string -&gt; string" Usage="System.IdentityModel.Services.WSFederationAuthenticationModule.GetFederationPassiveSignOutUrl (issuer, signOutReply, signOutQueryString)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="issuer" Type="System.String" />
        <Parameter Name="signOutReply" Type="System.String" />
        <Parameter Name="signOutQueryString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="issuer">颁发者地址。 要将请求定向到的安全标记服务 (STS) 的地址。</param>
        <param name="signOutReply">一个 URL，该 URL 指定在注销后要返回到的地址。这将在注销请求中设置 wreply 参数。 如果没有应包含在生成的注销请求中的 wreply 参数，则可以为 <see langword="null" /> 或空。 这应该是绝对 URI。</param>
        <param name="signOutQueryString">注销请求包含的其他查询字符串参数。 如果生成的注销请求中没有包含附加参数，则可以为 <see langword="null" /> 或空。 这应该是相对 URI。</param>
        <summary>返回表示发送到指定的颁发者的 WS-Federation 注销请求，并包含指定的 wreply 参数和指定的附加参数的 URL。</summary>
        <returns>包含使用指定的参数生成的 WS-Federation 被动标志请求的 URL。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在返回的 URL 中：基本 URI 设置为 `issuer` ; wa 参数设置为 "wsignout1.0 1.0"; wreply 参数设置为 `signOutReply` ; 中指定的参数 `signOutQueryString` 作为附加查询字符串参数存在。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="issuer" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetReferencedResult">
      <MemberSignature Language="C#" Value="protected virtual string GetReferencedResult (string resultPtr);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetReferencedResult(string resultPtr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetReferencedResult(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetReferencedResult (resultPtr As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetReferencedResult(System::String ^ resultPtr);" />
      <MemberSignature Language="F#" Value="abstract member GetReferencedResult : string -&gt; string&#xA;override this.GetReferencedResult : string -&gt; string" Usage="wSFederationAuthenticationModule.GetReferencedResult resultPtr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resultPtr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resultPtr">指定颁布结果地址的 URL。</param>
        <summary>从指定的 URL 来获取颁发结果 (通常是颁发的令牌)。 解析登录响应消息中在 wresultptr 参数中指定的 URL。</summary>
        <returns>由 URL 引用的颁发结果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage%28System.IdentityModel.Services.SignInResponseMessage%29?displayProperty=nameWithType> 方法从处理管道内部调用，用于解析从 security token service (STS) 收到的登录响应消息中的 wresultptr 参数中指定的 URL。  
  
 默认情况下，此方法将引发 <xref:System.NotSupportedException> 。 在派生类中重写此方法，以支持 wresultptr 参数。 URL 指向颁发结果，该结果应为以下内容之一： `<wst:RequestSecurityTokenResponse>` 元素、 `<wst:RequestSecurityTokenResponseCollection>` 元素、soap 响应或 soap `<S:Fault>` 元素。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">基类不支持此方法。 必须在派生类中重写它。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetReturnUrlFromResponse">
      <MemberSignature Language="C#" Value="protected virtual string GetReturnUrlFromResponse (System.Web.HttpRequestBase request);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetReturnUrlFromResponse(class System.Web.HttpRequestBase request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetReturnUrlFromResponse(System.Web.HttpRequestBase)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetReturnUrlFromResponse (request As HttpRequestBase) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetReturnUrlFromResponse(System::Web::HttpRequestBase ^ request);" />
      <MemberSignature Language="F#" Value="abstract member GetReturnUrlFromResponse : System.Web.HttpRequestBase -&gt; string&#xA;override this.GetReturnUrlFromResponse : System.Web.HttpRequestBase -&gt; string" Usage="wSFederationAuthenticationModule.GetReturnUrlFromResponse request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Web.HttpRequestBase" />
      </Parameters>
      <Docs>
        <param name="request">包含一窗体 ，包括 WS-Federation 响应消息的 HTTP 请求。</param>
        <summary>提取登录响应中最初请求的页的 URL。</summary>
        <returns>用户最初请求的页 URL。 这是 URL（在依赖方）在成功登录后，客户端应被重定向。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法从请求处理管道调用， (<xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest%2A> 方法) 获取信赖方上的页面的 URL (RP) ，以便在成功登录后将客户端定向到该客户端。 这通常是客户端最初请求访问的 RP 资源的 URL。  
  
 默认情况下，WSFAM 会在将 WS 联合身份验证登录请求发送到 security token service (STS) 时，将返回 URL 保存在 wctx 消息参数内。 根据 WS 联合身份验证规范，将在消息通过的实体之间保留 wctx 参数，并在 STS 发送的 WS 联合身份验证登录响应消息中返回未修改的。  
  
 默认实现从登录响应中的 wctx 参数获取返回 URL。 有关 WSFAM 使用的 wctx 参数格式的详细信息，请参阅 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest%2A> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="request" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest(System.String,System.String,System.Boolean)" />
        <altmember cref="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSecurityToken">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从指定的请求读取安全令牌。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSecurityToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken GetSecurityToken (System.IdentityModel.Services.SignInResponseMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken GetSecurityToken(class System.IdentityModel.Services.SignInResponseMessage message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken(System.IdentityModel.Services.SignInResponseMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSecurityToken (message As SignInResponseMessage) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ GetSecurityToken(System::IdentityModel::Services::SignInResponseMessage ^ message);" />
      <MemberSignature Language="F#" Value="abstract member GetSecurityToken : System.IdentityModel.Services.SignInResponseMessage -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.GetSecurityToken : System.IdentityModel.Services.SignInResponseMessage -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="wSFederationAuthenticationModule.GetSecurityToken message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.IdentityModel.Services.SignInResponseMessage" />
      </Parameters>
      <Docs>
        <param name="message">从登录响应消息中读取标识。</param>
        <summary>从指定 WS Federation 登录响应消息读取安全标记。</summary>
        <returns>从该消息读取的安全令牌。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认实现调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage%28System.IdentityModel.Services.SignInResponseMessage%2CSystem.IdentityModel.Services.WSFederationSerializer%29?displayProperty=nameWithType> 方法以获取令牌，并使用配置的安全令牌处理程序中的相应处理程序来读取该令牌。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecurityToken">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Tokens.SecurityToken GetSecurityToken (System.Web.HttpRequestBase request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityToken GetSecurityToken(class System.Web.HttpRequestBase request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken(System.Web.HttpRequestBase)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSecurityToken (request As HttpRequestBase) As SecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Tokens::SecurityToken ^ GetSecurityToken(System::Web::HttpRequestBase ^ request);" />
      <MemberSignature Language="F#" Value="abstract member GetSecurityToken : System.Web.HttpRequestBase -&gt; System.IdentityModel.Tokens.SecurityToken&#xA;override this.GetSecurityToken : System.Web.HttpRequestBase -&gt; System.IdentityModel.Tokens.SecurityToken" Usage="wSFederationAuthenticationModule.GetSecurityToken request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Web.HttpRequestBase" />
      </Parameters>
      <Docs>
        <param name="request">从中读取标记的 HTTP。</param>
        <summary>从指定的 HTTP 请求读取安全令牌。</summary>
        <returns>读取的安全令牌。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从请求处理管道中调用，以将 WS 联合身份验证登录请求消息作为对象来获取 <xref:System.IdentityModel.Tokens.SecurityToken> 。  
  
 默认实现将调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignInResponseMessage%2A> 方法以获取 <xref:System.IdentityModel.Services.SignInResponseMessage> 对象，然后调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken%28System.IdentityModel.Services.SignInResponseMessage%29?displayProperty=nameWithType> 重载。  
  
 使用派生类解释特定类型的请求。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="request" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSessionTokenContext">
      <MemberSignature Language="C#" Value="protected virtual string GetSessionTokenContext ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetSessionTokenContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSessionTokenContext" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetSessionTokenContext () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetSessionTokenContext();" />
      <MemberSignature Language="F#" Value="abstract member GetSessionTokenContext : unit -&gt; string&#xA;override this.GetSessionTokenContext : unit -&gt; string" Usage="wSFederationAuthenticationModule.GetSessionTokenContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取在 <see cref="P:System.IdentityModel.Tokens.SessionSecurityToken.Context" /> 属性中应保持会话 Cookie 的字符串。</summary>
        <returns>保持的字符串在会话 Cookie 中。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSessionTokenContext%2A>当处理 ws-federation 登录响应消息时，将从请求处理管道中调用方法，以获取要在 <xref:System.IdentityModel.Tokens.SessionSecurityToken.Context%2A?displayProperty=nameWithType> 会话 cookie 内的属性中存储的值。  
  
 您可以重写此方法以提供应用程序特定的值，以将其存储在 cookie 中。 WSFAM 不公开任何方法来从 cookie 检索值。 如果需要，你必须在应用程序中提供逻辑，以便从 cookie 中读取值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer" /> 属性为 <see langword="null" />。</exception>
        <altmember cref="P:System.IdentityModel.Tokens.SessionSecurityToken.Context" />
      </Docs>
    </Member>
    <Member MemberName="GetSignInResponseMessage">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Services.SignInResponseMessage GetSignInResponseMessage (System.Web.HttpRequestBase request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Services.SignInResponseMessage GetSignInResponseMessage(class System.Web.HttpRequestBase request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignInResponseMessage(System.Web.HttpRequestBase)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetSignInResponseMessage (request As HttpRequestBase) As SignInResponseMessage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Services::SignInResponseMessage ^ GetSignInResponseMessage(System::Web::HttpRequestBase ^ request);" />
      <MemberSignature Language="F#" Value="abstract member GetSignInResponseMessage : System.Web.HttpRequestBase -&gt; System.IdentityModel.Services.SignInResponseMessage&#xA;override this.GetSignInResponseMessage : System.Web.HttpRequestBase -&gt; System.IdentityModel.Services.SignInResponseMessage" Usage="wSFederationAuthenticationModule.GetSignInResponseMessage request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Services.SignInResponseMessage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Web.HttpRequestBase" />
      </Parameters>
      <Docs>
        <param name="request">从响应消息中读取符号的 HTTP 请求。 应表示表格 POST 的请求。</param>
        <summary>从表示指定 HTTP 请求中表 POST 读取 <see cref="T:System.IdentityModel.Services.SignInResponseMessage" /> 对象。</summary>
        <returns>生成的登录响应信息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 从 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken%28System.Web.HttpRequestBase%29?displayProperty=nameWithType> 请求处理管道中的方法调用，以从包含在 HTTP 请求中的窗体 POST 中获取登录响应消息。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="request" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">无法从指定的请求中读取登录响应消息。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSignOutRedirectUrl">
      <MemberSignature Language="C#" Value="protected virtual string GetSignOutRedirectUrl (System.IdentityModel.Services.SignOutCleanupRequestMessage signOutMessage);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetSignOutRedirectUrl(class System.IdentityModel.Services.SignOutCleanupRequestMessage signOutMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSignOutRedirectUrl(System.IdentityModel.Services.SignOutCleanupRequestMessage)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetSignOutRedirectUrl (signOutMessage As SignOutCleanupRequestMessage) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetSignOutRedirectUrl(System::IdentityModel::Services::SignOutCleanupRequestMessage ^ signOutMessage);" />
      <MemberSignature Language="F#" Value="abstract member GetSignOutRedirectUrl : System.IdentityModel.Services.SignOutCleanupRequestMessage -&gt; string&#xA;override this.GetSignOutRedirectUrl : System.IdentityModel.Services.SignOutCleanupRequestMessage -&gt; string" Usage="wSFederationAuthenticationModule.GetSignOutRedirectUrl signOutMessage" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signOutMessage" Type="System.IdentityModel.Services.SignOutCleanupRequestMessage" />
      </Parameters>
      <Docs>
        <param name="signOutMessage">注销清理请求。</param>
        <summary>确定包含 wreply 参数的，处理 WS-Federation 注销清理请求(wsignoutcleanup1.0)的重新定位。</summary>
        <returns>要重定向到的 URL。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法从 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse%2A> 请求处理管道中的方法调用，以确定在处理 ws-federation 注销清除请求之后要重定向到的 URL。 仅当消息具有 wreply 参数时，才会调用此参数 (`signOutMessage` 参数包含 <xref:System.IdentityModel.Services.SignOutCleanupRequestMessage.Reply%2A> 既不是 `null` 也不为空) 的属性。  
  
 默认实现将验证消息中包含的回复 URL， (属性 <xref:System.IdentityModel.Services.SignOutCleanupRequestMessage.Reply%2A?displayProperty=nameWithType>) 指定的 security token service (STS) 的地址 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> 。 要使回复 URL 有效，必须满足以下条件：  
  
1.  回复 URL 是绝对 URL。  
  
2.  回复 URL 与颁发者的方案相同。  
  
3.  回复 URL 包含与颁发者相同的端口。  
  
4.  回复 URL 与颁发者具有相同的主机，或者 "答复 URL" 指定颁发者的子域。  
  
 如果所有这些条件都为 true，则返回回复 URL (回复) ;否则，将返回属性指定的 URL <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> 。  
  
 重写此方法以为回复 URL 提供额外的验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="signOutMessage" /> 具有一个为 <see langword="null" /> 或为空的 <see cref="P:System.IdentityModel.Services.SignOutCleanupRequestMessage.Reply" /> 属性。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="signOutMessage" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetXmlTokenFromMessage">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从指定 WS-Federation 登录响应消息提取发出标记。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetXmlTokenFromMessage">
      <MemberSignature Language="C#" Value="public virtual string GetXmlTokenFromMessage (System.IdentityModel.Services.SignInResponseMessage message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetXmlTokenFromMessage(class System.IdentityModel.Services.SignInResponseMessage message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage(System.IdentityModel.Services.SignInResponseMessage)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetXmlTokenFromMessage (message As SignInResponseMessage) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetXmlTokenFromMessage(System::IdentityModel::Services::SignInResponseMessage ^ message);" />
      <MemberSignature Language="F#" Value="abstract member GetXmlTokenFromMessage : System.IdentityModel.Services.SignInResponseMessage -&gt; string&#xA;override this.GetXmlTokenFromMessage : System.IdentityModel.Services.SignInResponseMessage -&gt; string" Usage="wSFederationAuthenticationModule.GetXmlTokenFromMessage message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.IdentityModel.Services.SignInResponseMessage" />
      </Parameters>
      <Docs>
        <param name="message">从登录响应消息中提取标记。 以响应包含 STS 问题的标记。</param>
        <summary>从指定 WS-Federation 登录响应消息提取发出标记。</summary>
        <returns>包含表示颁发的令牌的 XML 的字符串。 这是 <see langword="&lt;wst:RequestSecurityTokenResponse&gt;" /> 元素。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果登录响应消息中没有 wresult 参数，则 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetReferencedResult%2A> 调用方法来尝试使用 wresultptr 参数获取该令牌。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="message" />不包含标记。 （它不包含有效的 wresult 或 wresultptr 参数。）</exception>
      </Docs>
    </Member>
    <Member MemberName="GetXmlTokenFromMessage">
      <MemberSignature Language="C#" Value="public virtual string GetXmlTokenFromMessage (System.IdentityModel.Services.SignInResponseMessage message, System.IdentityModel.Services.WSFederationSerializer federationSerializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetXmlTokenFromMessage(class System.IdentityModel.Services.SignInResponseMessage message, class System.IdentityModel.Services.WSFederationSerializer federationSerializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.GetXmlTokenFromMessage(System.IdentityModel.Services.SignInResponseMessage,System.IdentityModel.Services.WSFederationSerializer)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetXmlTokenFromMessage (message As SignInResponseMessage, federationSerializer As WSFederationSerializer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetXmlTokenFromMessage(System::IdentityModel::Services::SignInResponseMessage ^ message, System::IdentityModel::Services::WSFederationSerializer ^ federationSerializer);" />
      <MemberSignature Language="F#" Value="abstract member GetXmlTokenFromMessage : System.IdentityModel.Services.SignInResponseMessage * System.IdentityModel.Services.WSFederationSerializer -&gt; string&#xA;override this.GetXmlTokenFromMessage : System.IdentityModel.Services.SignInResponseMessage * System.IdentityModel.Services.WSFederationSerializer -&gt; string" Usage="wSFederationAuthenticationModule.GetXmlTokenFromMessage (message, federationSerializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.IdentityModel.Services.SignInResponseMessage" />
        <Parameter Name="federationSerializer" Type="System.IdentityModel.Services.WSFederationSerializer" />
      </Parameters>
      <Docs>
        <param name="message">从登录响应消息中提取标记。 以响应包含 STS 问题的标记。</param>
        <param name="federationSerializer">用于序列化签入响应消息的 WS-Federation 序列化程序。</param>
        <summary>使用指定的 WS-Federation 序列化程序从指定的 WS-Federation 登录响应消息以提取颁发的令牌。</summary>
        <returns>包含表示颁发的令牌的 XML 的字符串。 这是 <see langword="&lt;wst:RequestSecurityTokenResponse&gt;" /> 元素。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="HomeRealm">
      <MemberSignature Language="C#" Value="public string HomeRealm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HomeRealm" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.WSFederationAuthenticationModule.HomeRealm" />
      <MemberSignature Language="VB.NET" Value="Public Property HomeRealm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HomeRealm { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HomeRealm : string with get, set" Usage="System.IdentityModel.Services.WSFederationAuthenticationModule.HomeRealm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 WS 联合身份验证登录请求（“wsignin1.0”）中使用的 whr 参数的值。</summary>
        <value>身份提供程序的地址。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 瓦时参数是可选的。 如果将 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.HomeRealm%2A> 属性设置为 `null` 或空字符串，则会在登录请求中包含瓦时参数。  
  
 可以通过为事件添加处理程序，在每个 HTTP 请求上覆盖此设置 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> 。 此事件恰好在模块使用 WS 联合身份验证登录请求消息重定向到 security token service (STS) 之前引发。 STS 由 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> 属性指定。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeModule">
      <MemberSignature Language="C#" Value="protected override void InitializeModule (System.Web.HttpApplication context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InitializeModule(class System.Web.HttpApplication context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.InitializeModule(System.Web.HttpApplication)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InitializeModule (context As HttpApplication)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InitializeModule(System::Web::HttpApplication ^ context);" />
      <MemberSignature Language="F#" Value="override this.InitializeModule : System.Web.HttpApplication -&gt; unit" Usage="wSFederationAuthenticationModule.InitializeModule context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpApplication" />
      </Parameters>
      <Docs>
        <param name="context">包含该模块的 HTTP 应用对程序对象。</param>
        <summary>初始化模块并为其从模块的 [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] 应用程序对象处理事件做好准备。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 按照下表为 ASP.NET 管道事件添加处理程序。  
  
|事件|Handler|  
|-----------|-------------|  
|<xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=nameWithType>|<xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest%2A>|  
|<xref:System.Web.HttpApplication.EndRequest?displayProperty=nameWithType>|<xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnEndRequest%2A>|  
|<xref:System.Web.HttpApplication.PostAuthenticateRequest?displayProperty=nameWithType>|<xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnPostAuthenticateRequest%2A>|  
  
> [!NOTE]
>  模块属性（例如 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> ）通过方法进行初始化 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.InitializePropertiesFromConfiguration%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="context" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.IdentityModel.Services.WSFederationAuthenticationModule.InitializePropertiesFromConfiguration" />
      </Docs>
    </Member>
    <Member MemberName="InitializePropertiesFromConfiguration">
      <MemberSignature Language="C#" Value="protected override void InitializePropertiesFromConfiguration ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InitializePropertiesFromConfiguration() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.InitializePropertiesFromConfiguration" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InitializePropertiesFromConfiguration ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InitializePropertiesFromConfiguration();" />
      <MemberSignature Language="F#" Value="override this.InitializePropertiesFromConfiguration : unit -&gt; unit" Usage="wSFederationAuthenticationModule.InitializePropertiesFromConfiguration " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>初始化模块属性，该模块属性是基于指定的 <see cref="P:System.IdentityModel.Services.HttpModuleBase.FederationConfiguration" /> 属性的配置。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 模块属性是使用属性指定的对象的等效属性进行初始化的 <xref:System.IdentityModel.Services.Configuration.WsFederationConfiguration> <xref:System.IdentityModel.Services.Configuration.FederationConfiguration.WsFederationConfiguration%2A?displayProperty=nameWithType> 。  
  
 可以通过[ &lt; wsFederation &gt; ](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/wsfederation)元素指定配置文件中的设置。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSignInResponse">
      <MemberSignature Language="C#" Value="public virtual bool IsSignInResponse (System.Web.HttpRequestBase request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSignInResponse(class System.Web.HttpRequestBase request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.IsSignInResponse(System.Web.HttpRequestBase)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsSignInResponse (request As HttpRequestBase) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsSignInResponse(System::Web::HttpRequestBase ^ request);" />
      <MemberSignature Language="F#" Value="abstract member IsSignInResponse : System.Web.HttpRequestBase -&gt; bool&#xA;override this.IsSignInResponse : System.Web.HttpRequestBase -&gt; bool" Usage="wSFederationAuthenticationModule.IsSignInResponse request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Web.HttpRequestBase" />
      </Parameters>
      <Docs>
        <param name="request">传入的 HTTP 请求。</param>
        <summary>获取指示指定请求是否为 WS-Federation 登录响应消息的值。</summary>
        <returns>如果请求为 WS 联合登录响应消息，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法从 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse%2A> 请求处理管道中的方法调用，以确定传入的 HTTP 请求是否为 ws-federation 登录响应消息。  
  
 `true`如果将 wa 参数设置为 "wsignin1.0 1.0"，则默认实现将返回，且不会同时设置 wreq 和 wreqptr 参数。  
  
 可以在派生类中重写此方法以执行其他验证。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="request" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Issuer">
      <MemberSignature Language="C#" Value="public string Issuer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Issuer" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer" />
      <MemberSignature Language="VB.NET" Value="Public Property Issuer As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Issuer { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Issuer : string with get, set" Usage="System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置标识安全标记的预期颁发者的 URI。</summary>
        <value>确认安全标记服务 (STS) 的 URI。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是必需的属性。 如果启用了被动重定向，则必须设置该设置。 它指定应向其发出 WS 联合身份验证请求 (STS) security token service 的 URL。  
  
 可以通过为事件添加处理程序，在每个 HTTP 请求上覆盖此设置 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> 。 此事件恰好在模块使用 WS 联合身份验证登录请求消息重定向到 security token service (STS) 之前引发。 STS 由 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> 属性指定。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">尝试将此属性设置为 <see langword="null" /> 或者空字符串。  
  
-或- 
尝试设置这个属性为一个值，该值不是有效的绝对 URI。</exception>
      </Docs>
    </Member>
    <Member MemberName="OnAuthenticateRequest">
      <MemberSignature Language="C#" Value="protected virtual void OnAuthenticateRequest (object sender, EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAuthenticateRequest(object sender, class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAuthenticateRequest (sender As Object, args As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAuthenticateRequest(System::Object ^ sender, EventArgs ^ args);" />
      <MemberSignature Language="F#" Value="abstract member OnAuthenticateRequest : obj * EventArgs -&gt; unit&#xA;override this.OnAuthenticateRequest : obj * EventArgs -&gt; unit" Usage="wSFederationAuthenticationModule.OnAuthenticateRequest (sender, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">事件的源。 这将是 <see cref="T:System.Web.HttpApplication" /> 对象。</param>
        <param name="args">事件的数据。</param>
        <summary>从 [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] 管道中处理的 <see cref="E:System.Web.HttpApplication.AuthenticateRequest" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest%2A>方法实现 ws-federation 请求处理管道。 它通过方法添加到 <xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=nameWithType> 管道中的事件 [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.InitializeModule%2A> 。  
  
 方法执行以下操作：  
  
1.  调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse%28System.Web.HttpRequestBase%29> 方法以确定是否已收到 WS 联合身份验证登录响应消息 ( "wsignin1.0 1.0" ) 。 如果响应为 WS 联合身份验证注销清理请求 ( "wsignoutcleanup1.0 1.0" ) ，则会 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse%28System.Web.HttpRequestBase%29> 处理该消息，并根据请求中的 ws-federation 参数终止请求并重定向客户端。 如果消息不是登录响应或注销清理请求，则该模块只返回;否则，它将执行以下步骤来处理登录响应。  
  
2.  调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetSecurityToken%28System.Web.HttpRequestBase%29> 方法来反序列化 <xref:System.IdentityModel.Tokens.SecurityToken> 请求中的对象。  
  
3.  引发 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenReceived> 事件。 您可以在此事件的处理程序中取消进一步处理或修改接收的安全令牌。 处理程序通常用于修改 <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A?displayProperty=nameWithType> 或 <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A?displayProperty=nameWithType> 属性。  
  
4.  验证安全令牌，并基于 <xref:System.Security.Claims.ClaimsPrincipal> 安全令牌中的声明创建一个对象。  
  
5.  引发 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenValidated> 事件。 您可以取消进一步处理或修改此事件的处理程序中的声明主体。  
  
6.  使用配置的会话身份验证模块 (SAM) 来创建 <xref:System.IdentityModel.Tokens.SessionSecurityToken> 对象。  (配置的 SAM 是 <xref:System.IdentityModel.Services.SessionAuthenticationModule> 由属性返回的对象 <xref:System.IdentityModel.Services.FederatedAuthentication.SessionAuthenticationModule%2A?displayProperty=nameWithType> 。 ) 使用步骤5中返回的声明主体创建会话令牌。 <xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidFrom%2A?displayProperty=nameWithType>和 <xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo%2A?displayProperty=nameWithType> 属性使用 <xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A> <xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A> 步骤3中返回的的和属性进行设置 <xref:System.IdentityModel.Tokens.SecurityToken> ，并根据当前时间和由 <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime%2A> <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A> <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> WSFAM 使用的令牌处理程序集合中的对象的属性指定的令牌生存期进行验证。 会话令牌处理程序的令牌生存期可以通过[ &lt; sessionTokenRequirement &gt; ](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/sessiontokenrequirement)元素在配置中指定。 注意： <xref:System.IdentityModel.Services.CookieHandler.PersistentSessionLifetime%2A> 不使用为 SAM 配置的 cookie 处理程序的属性。  
  
7.  调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SetPrincipalAndWriteSessionToken%2A> 具有会话令牌的方法以写入会话 cookie。 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SetPrincipalAndWriteSessionToken%2A>方法首先引发 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated> 事件。 你可以更改会话令牌的属性，或更改该 cookie 是否应保留在此事件的处理程序中。 引发事件后，该方法将使用 SAM 写入 cookie。  
  
    > [!NOTE]
    >  <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler>配置中的集不用于写入 cookie。  
  
8.  调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedIn%2A> 方法来引发 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignedIn> 事件。  
  
9. 调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetReturnUrlFromResponse%2A> 方法以获取要重定向客户端的 RP 页面。 默认情况下，此方法从登录响应中的 wctx 参数读取返回 URL。 有关 WSFAM 如何存储返回 URL 的详细信息，请参阅 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest%2A> 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAuthorizationFailed">
      <MemberSignature Language="C#" Value="protected virtual void OnAuthorizationFailed (System.IdentityModel.Services.AuthorizationFailedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAuthorizationFailed(class System.IdentityModel.Services.AuthorizationFailedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthorizationFailed(System.IdentityModel.Services.AuthorizationFailedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAuthorizationFailed (e As AuthorizationFailedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAuthorizationFailed(System::IdentityModel::Services::AuthorizationFailedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAuthorizationFailed : System.IdentityModel.Services.AuthorizationFailedEventArgs -&gt; unit&#xA;override this.OnAuthorizationFailed : System.IdentityModel.Services.AuthorizationFailedEventArgs -&gt; unit" Usage="wSFederationAuthenticationModule.OnAuthorizationFailed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IdentityModel.Services.AuthorizationFailedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">事件的数据。</param>
        <summary>引发 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.AuthorizationFailed" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnEndRequest%2A>如果授权失败，则从事件处理程序委托调用。  
  
 <xref:System.IdentityModel.Services.AuthorizationFailedEventArgs.RedirectToIdentityProvider%2A?displayProperty=nameWithType>如果用户已经过身份验证，则在引发事件之前初始化属性 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.AuthorizationFailed> ，以防循环重定向。 如果用户已经过身份验证，则将属性初始化为以 `false` 阻止重定向; 否则，将初始化为 `true` 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEndRequest">
      <MemberSignature Language="C#" Value="protected virtual void OnEndRequest (object sender, EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEndRequest(object sender, class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnEndRequest(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnEndRequest (sender As Object, args As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnEndRequest(System::Object ^ sender, EventArgs ^ args);" />
      <MemberSignature Language="F#" Value="abstract member OnEndRequest : obj * EventArgs -&gt; unit&#xA;override this.OnEndRequest : obj * EventArgs -&gt; unit" Usage="wSFederationAuthenticationModule.OnEndRequest (sender, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">事件的源。 这将是 <see cref="T:System.Web.HttpApplication" /> 对象。</param>
        <param name="args">事件的数据。</param>
        <summary>从 [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] 管道中处理的 <see cref="E:System.Web.HttpApplication.EndRequest" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 除非属性为，否则将忽略此事件 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.PassiveRedirectEnabled%2A> `true` 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPostAuthenticateRequest">
      <MemberSignature Language="C#" Value="protected virtual void OnPostAuthenticateRequest (object sender, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPostAuthenticateRequest(object sender, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnPostAuthenticateRequest(System.Object,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPostAuthenticateRequest (sender As Object, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPostAuthenticateRequest(System::Object ^ sender, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPostAuthenticateRequest : obj * EventArgs -&gt; unit&#xA;override this.OnPostAuthenticateRequest : obj * EventArgs -&gt; unit" Usage="wSFederationAuthenticationModule.OnPostAuthenticateRequest (sender, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="sender">事件的源。 这将是 <see cref="T:System.Web.HttpApplication" /> 对象。</param>
        <param name="e">事件的数据。</param>
        <summary>从 [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] 管道中处理的 <see cref="E:System.Web.HttpApplication.PostAuthenticateRequest" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，这是一个空的处理程序。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRedirectingToIdentityProvider">
      <MemberSignature Language="C#" Value="protected virtual void OnRedirectingToIdentityProvider (System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRedirectingToIdentityProvider(class System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnRedirectingToIdentityProvider(System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRedirectingToIdentityProvider (e As RedirectingToIdentityProviderEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRedirectingToIdentityProvider(System::IdentityModel::Services::RedirectingToIdentityProviderEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRedirectingToIdentityProvider : System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs -&gt; unit&#xA;override this.OnRedirectingToIdentityProvider : System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs -&gt; unit" Usage="wSFederationAuthenticationModule.OnRedirectingToIdentityProvider e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">事件的数据。</param>
        <summary>引发 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSessionSecurityTokenCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnSessionSecurityTokenCreated (System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSessionSecurityTokenCreated(class System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSessionSecurityTokenCreated(System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSessionSecurityTokenCreated (args As SessionSecurityTokenCreatedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSessionSecurityTokenCreated(System::IdentityModel::Services::SessionSecurityTokenCreatedEventArgs ^ args);" />
      <MemberSignature Language="F#" Value="abstract member OnSessionSecurityTokenCreated : System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs -&gt; unit&#xA;override this.OnSessionSecurityTokenCreated : System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs -&gt; unit" Usage="wSFederationAuthenticationModule.OnSessionSecurityTokenCreated args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">事件的数据。</param>
        <summary>引发 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSignedIn">
      <MemberSignature Language="C#" Value="protected virtual void OnSignedIn (EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSignedIn(class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedIn(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSignedIn (args As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSignedIn(EventArgs ^ args);" />
      <MemberSignature Language="F#" Value="abstract member OnSignedIn : EventArgs -&gt; unit&#xA;override this.OnSignedIn : EventArgs -&gt; unit" Usage="wSFederationAuthenticationModule.OnSignedIn args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="args">事件的数据。</param>
        <summary>引发 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SignedIn" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSignedOut">
      <MemberSignature Language="C#" Value="protected virtual void OnSignedOut (EventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSignedOut(class System.EventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedOut(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSignedOut (args As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSignedOut(EventArgs ^ args);" />
      <MemberSignature Language="F#" Value="abstract member OnSignedOut : EventArgs -&gt; unit&#xA;override this.OnSignedOut : EventArgs -&gt; unit" Usage="wSFederationAuthenticationModule.OnSignedOut args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="args">事件的数据。</param>
        <summary>引发 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SignedOut" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%28System.Boolean%29?displayProperty=nameWithType> 删除会话后立即从方法调用。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="OnSignInError">
      <MemberSignature Language="C#" Value="protected virtual void OnSignInError (System.IdentityModel.Services.ErrorEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSignInError(class System.IdentityModel.Services.ErrorEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignInError(System.IdentityModel.Services.ErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSignInError (args As ErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSignInError(System::IdentityModel::Services::ErrorEventArgs ^ args);" />
      <MemberSignature Language="F#" Value="abstract member OnSignInError : System.IdentityModel.Services.ErrorEventArgs -&gt; unit&#xA;override this.OnSignInError : System.IdentityModel.Services.ErrorEventArgs -&gt; unit" Usage="wSFederationAuthenticationModule.OnSignInError args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.IdentityModel.Services.ErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">事件的数据。</param>
        <summary>引发 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SignInError" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSigningOut">
      <MemberSignature Language="C#" Value="protected virtual void OnSigningOut (System.IdentityModel.Services.SigningOutEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSigningOut(class System.IdentityModel.Services.SigningOutEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSigningOut(System.IdentityModel.Services.SigningOutEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSigningOut (args As SigningOutEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSigningOut(System::IdentityModel::Services::SigningOutEventArgs ^ args);" />
      <MemberSignature Language="F#" Value="abstract member OnSigningOut : System.IdentityModel.Services.SigningOutEventArgs -&gt; unit&#xA;override this.OnSigningOut : System.IdentityModel.Services.SigningOutEventArgs -&gt; unit" Usage="wSFederationAuthenticationModule.OnSigningOut args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.IdentityModel.Services.SigningOutEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">事件的数据。</param>
        <summary>引发 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SigningOut" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%28System.Boolean%29?displayProperty=nameWithType> 删除会话之前从方法调用。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="OnSignOutError">
      <MemberSignature Language="C#" Value="protected virtual void OnSignOutError (System.IdentityModel.Services.ErrorEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSignOutError(class System.IdentityModel.Services.ErrorEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignOutError(System.IdentityModel.Services.ErrorEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSignOutError (args As ErrorEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSignOutError(System::IdentityModel::Services::ErrorEventArgs ^ args);" />
      <MemberSignature Language="F#" Value="abstract member OnSignOutError : System.IdentityModel.Services.ErrorEventArgs -&gt; unit&#xA;override this.OnSignOutError : System.IdentityModel.Services.ErrorEventArgs -&gt; unit" Usage="wSFederationAuthenticationModule.OnSignOutError args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="System.IdentityModel.Services.ErrorEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">事件的数据。</param>
        <summary>引发 <see cref="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutError" /> 事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%28System.Boolean%29?displayProperty=nameWithType>如果在处理过程中发生异常，则从方法调用。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="PassiveRedirectEnabled">
      <MemberSignature Language="C#" Value="public bool PassiveRedirectEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PassiveRedirectEnabled" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.WSFederationAuthenticationModule.PassiveRedirectEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property PassiveRedirectEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PassiveRedirectEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PassiveRedirectEnabled : bool with get, set" Usage="System.IdentityModel.Services.WSFederationAuthenticationModule.PassiveRedirectEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指定是否启用模块以启动 WS-Federation 协议重定向的值。</summary>
        <value>如果启用重定向，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果未启用此模式，该模块将不会启动 WS-FEDERATION 协议重定向。 如果此属性为 `true` ，则 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> 必须将属性设置为安全令牌服务的 URL， (STS) 应将调用方重定向到该 URL。  
  
> [!WARNING]
>  应用程序代码可以使用方法显式发出 WS 联合身份验证登录请求 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignIn%2A> ，而不考虑属性的值 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.PassiveRedirectEnabled%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.PersistentCookiesOnPassiveRedirects" />
      </Docs>
    </Member>
    <Member MemberName="PersistentCookiesOnPassiveRedirects">
      <MemberSignature Language="C#" Value="public bool PersistentCookiesOnPassiveRedirects { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PersistentCookiesOnPassiveRedirects" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.WSFederationAuthenticationModule.PersistentCookiesOnPassiveRedirects" />
      <MemberSignature Language="VB.NET" Value="Public Property PersistentCookiesOnPassiveRedirects As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PersistentCookiesOnPassiveRedirects { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PersistentCookiesOnPassiveRedirects : bool with get, set" Usage="System.IdentityModel.Services.WSFederationAuthenticationModule.PersistentCookiesOnPassiveRedirects" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指定是否对成功的身份验证颁发一致的会话 Cookie 的值。</summary>
        <value>如果发出持久性会话验证 Cookie，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以通过为事件添加处理程序，在每个 HTTP 请求上覆盖此设置 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated> 。 从 security token service (STS) 处理 WS-FEDERATION 登录响应消息时，从请求处理管道引发此事件。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.PassiveRedirectEnabled" />
      </Docs>
    </Member>
    <Member MemberName="Policy">
      <MemberSignature Language="C#" Value="public string Policy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Policy" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Policy" />
      <MemberSignature Language="VB.NET" Value="Public Property Policy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Policy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Policy : string with get, set" Usage="System.IdentityModel.Services.WSFederationAuthenticationModule.Policy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 WS 联合身份验证登录请求（“wsignin1.0”）中使用的 wp 参数的值。</summary>
        <value>标识使用策略的 URL。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wp 参数是可选的。 如果将 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Policy%2A> 属性设置为 `null` 或空字符串，则登录请求中不包含 wp 参数。  
  
 可以通过为事件添加处理程序，在每个 HTTP 请求上覆盖此设置 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> 。 此事件恰好在模块使用 WS 联合身份验证登录请求消息重定向到 security token service (STS) 之前引发。 STS 由 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> 属性指定。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Realm">
      <MemberSignature Language="C#" Value="public string Realm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Realm" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm" />
      <MemberSignature Language="VB.NET" Value="Public Property Realm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Realm { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Realm : string with get, set" Usage="System.IdentityModel.Services.WSFederationAuthenticationModule.Realm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 WS 联合身份验证登录请求（“wsignin1.0”）中使用的 wtrealm 参数的值。</summary>
        <value>标识安全标志服务 (STS)的该依赖方 (RP) 的 URI。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 这是 WS 联合身份验证登录请求的必需属性。 如果启用了被动重定向，则必须设置该设置。 URI 将 RP 标识到 STS。  (用于标识 RP 的 STS，请参阅 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> 属性) 。  
  
 此属性的值将被序列化为 WS 联合身份验证协议中的 wtrealm 查询字符串参数。 它将 RP 标识到 STS。 STS 使用它来确定要为令牌颁发应用的策略，以及在令牌颁发后要将用户重定向到的位置。  (用于标识 RP 的 STS，请参阅 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> 。 )   
  
 可以通过为事件添加处理程序，在每个 HTTP 请求上覆盖此设置 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> 。 此事件恰好在模块使用 WS 联合身份验证登录请求消息重定向到 security token service (STS) 之前引发。 STS 由 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> 属性指定。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">尝试将此属性设置为 <see langword="null" /> 或者空字符串。  
  
-或- 
尝试设置这个属性为一个值，该值不是有效的绝对 URI。</exception>
      </Docs>
    </Member>
    <Member MemberName="RedirectingToIdentityProvider">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs&gt; RedirectingToIdentityProvider;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs&gt; RedirectingToIdentityProvider" />
      <MemberSignature Language="DocId" Value="E:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RedirectingToIdentityProvider As EventHandler(Of RedirectingToIdentityProviderEventArgs) " FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::IdentityModel::Services::RedirectingToIdentityProviderEventArgs ^&gt; ^ RedirectingToIdentityProvider;" />
      <MemberSignature Language="F#" Value="member this.RedirectingToIdentityProvider : EventHandler&lt;System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs&gt; " Usage="member this.RedirectingToIdentityProvider : System.EventHandler&lt;System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event RedirectingToIdentityProvider As EventHandler(Of RedirectingToIdentityProviderEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当模块即将重定向用户标识提供程序时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以通过属性访问和修改 WS 联合身份验证登录请求 <xref:System.IdentityModel.Services.RedirectingToIdentityProviderEventArgs.SignInRequestMessage%2A?displayProperty=nameWithType> 。 例如，你可以修改 <xref:System.IdentityModel.Services.FederationMessage.BaseUri%2A> 登录消息中的属性，以更改将请求重定向到的标识提供者。 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider>事件为可取消的事件，你可以将 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 属性设置为， `true` 以取消重定向。  
  
 通过调用方法，从方法内部引发事件 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectToIdentityProvider%2A> <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnRedirectingToIdentityProvider%2A> 。  
  
 若要在 ASP.NET 应用程序中处理此事件，请 `WSFederationAuthentication_RedirectingToIdentityProvider` 在 global.asax 文件中创建一个名为的方法。  
  
   
  
## Examples  
 下面的代码演示如何 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> 在 global.asax 文件中的事件中为事件添加处理程序 `Application_Init` 。 此代码取自 `FederationForWebApps` 示例。 有关此示例的详细信息，请参阅[WIF 代码示例索引](https://docs.microsoft.com/previous-versions/dotnet/framework/security/wif-code-sample-index)。  
  
  
  
 下面的代码演示了 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> RP 的 global.asa 文件中的事件的处理程序。 该代码将检查传入的 HTTP 请求是否包含一个 $ 零参数，如果它存在，则将此参数设置为要发送到 STS 的 WS 联合身份验证登录请求。 此代码取自 `FederationForWebApps` 示例。 有关此示例的详细信息，请参阅[WIF 代码示例索引](https://docs.microsoft.com/previous-versions/dotnet/framework/security/wif-code-sample-index)。  
  
  
  
 下面的代码显示 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> 联合身份验证提供程序 STS 的 global.asa 文件中的事件的处理程序。 代码会检查传入的 HTTP 请求是否包含一个里瓦的参数。 如果请求包含瓦时参数，则会将客户端定向到用于登录的 IP-STS;如果不是，则会将客户端定向到 "主领域发现" 页，以选择要登录的 IP-STS。 此代码取自 `FederationForWebApps` 示例。 有关此示例的详细信息，请参阅[WIF 代码示例索引](https://docs.microsoft.com/previous-versions/dotnet/framework/security/wif-code-sample-index)。  
  
  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RedirectToIdentityProvider">
      <MemberSignature Language="C#" Value="public virtual void RedirectToIdentityProvider (string uniqueId, string returnUrl, bool persist);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RedirectToIdentityProvider(string uniqueId, string returnUrl, bool persist) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectToIdentityProvider(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RedirectToIdentityProvider (uniqueId As String, returnUrl As String, persist As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RedirectToIdentityProvider(System::String ^ uniqueId, System::String ^ returnUrl, bool persist);" />
      <MemberSignature Language="F#" Value="abstract member RedirectToIdentityProvider : string * string * bool -&gt; unit&#xA;override this.RedirectToIdentityProvider : string * string * bool -&gt; unit" Usage="wSFederationAuthenticationModule.RedirectToIdentityProvider (uniqueId, returnUrl, persist)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
        <Parameter Name="returnUrl" Type="System.String" />
        <Parameter Name="persist" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="uniqueId">WSFAM 保存请求中的 WS-Federation 标志 wctx 参数值; 但是，该模块在处理签入请求或sign-in反应时不使用它。 您可以将其设置为任何值。 它不必是唯一的。 有关更多信息，请参见 <see cref="M:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest(System.String,System.String,System.Boolean)" /> 方法。</param>
        <param name="returnUrl">模块应返回在身份验证的 URL。</param>
        <param name="persist">WSFAM 保存请求中的 WS-Federation 标志 wctx 参数值; 但是，该模块在处理签入请求或sign-in反应时不使用它。 可以设置该 <see langword="true" /> 或 <see langword="false" />。</param>
        <summary>将用户重定向至 <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer" /> 属性指定的安全服务标记 (STS)，以使用 WS-Federation 协议获取安全标记。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectToIdentityProvider%2A> <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignIn%2A> 当从信赖方 (RP) 或事件处理程序委托显示的网页发出请求时，从方法调用方法 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnEndRequest%2A> ，以在授权失败时执行被动重定向到标识提供者。  
  
 传递给方法的参数用于创建 wctx 消息参数。 唯一的重要参数是 `returnUrl` 参数。 这将指定 RP 应将浏览器定向到身份验证成功后的 URL。 不应将其与属性指定的 wreply message 参数混淆， <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Reply%2A> 后者在 RP (STS) 应将其响应定向 security token service 到的 RP 中提供地址。  
  
 方法执行以下操作：  
  
1.  调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.VerifyProperties%2A> 方法以确保可以由模块颁发有效的登录请求。  
  
2.  调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest%2A> 方法，以从模块上配置的属性创建登录请求。  
  
3.  调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnRedirectingToIdentityProvider%2A> 方法以引发 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> 事件。 您可以在此事件的事件处理程序中取消重定向或修改登录请求消息。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer" /> 为 <see langword="null" /> 或空字符串。  
  
- 或 - 
 <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm" /> 为 <see langword="null" /> 或空字符串。  
  
- 或 - 
<see cref="P:System.Web.HttpContext.Current" /> 属性为 <see langword="null" /> 或为空。  
  
-或- 
由 <see cref="P:System.Web.HttpContext.Response" />返回的上下文的 <see cref="P:System.Web.HttpContext.Current" /> 属性为 <see langword="null" /> 或空。</exception>
      </Docs>
    </Member>
    <Member MemberName="Reply">
      <MemberSignature Language="C#" Value="public string Reply { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Reply" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Reply" />
      <MemberSignature Language="VB.NET" Value="Public Property Reply As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Reply { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Reply : string with get, set" Usage="System.IdentityModel.Services.WSFederationAuthenticationModule.Reply" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 WS 联合身份验证登录请求（“wsignin1.0”）中使用的 wreply 参数的值。</summary>
        <value>标识依赖方 (RP) 应用程序的地址的 URL 要接受来自安全标志服务 (STS) 的回复。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wreply 参数是可选的。 如果将 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Reply%2A> 属性设置为 `null` 或空字符串，则登录请求中不包含 wreply 参数。  
  
 STS 使用 wreply 参数来决定在令牌颁发后将用户重定向到的位置。 不建议 STS 使用此地址重定向用户，因为这种重定向会出现安全漏洞。 回复地址必须通过 STS (进行验证，这可能是出于此目的或其他方法) 与一组预配置的答复地址进行比较，以确保将答复发送到理解良好且安全的位置。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">尝试设置这个属性为一个值，该值不是有效的绝对 URI。</exception>
      </Docs>
    </Member>
    <Member MemberName="Request">
      <MemberSignature Language="C#" Value="public string Request { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Request" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Request" />
      <MemberSignature Language="VB.NET" Value="Public Property Request As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Request { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Request : string with get, set" Usage="System.IdentityModel.Services.WSFederationAuthenticationModule.Request" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 WS 联合身份验证登录请求（“wsignin1.0”）中使用的 wreq 参数的值。</summary>
        <value>令牌颁发请求以 <see langword="&lt;wst:RequestSecurityToken&gt;" /> 元素表示。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wreq 参数是可选的。 如果将 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Request%2A> 属性设置为 `null` 或空字符串，则登录请求中不包含 wreq 参数。  
  
 可以通过为事件添加处理程序，在每个 HTTP 请求上覆盖此设置 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> 。 此事件恰好在模块使用 WS 联合身份验证登录请求消息重定向到 security token service (STS) 之前引发。 STS 由 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> 属性指定。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestPtr">
      <MemberSignature Language="C#" Value="public string RequestPtr { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RequestPtr" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.WSFederationAuthenticationModule.RequestPtr" />
      <MemberSignature Language="VB.NET" Value="Public Property RequestPtr As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RequestPtr { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RequestPtr : string with get, set" Usage="System.IdentityModel.Services.WSFederationAuthenticationModule.RequestPtr" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 WS 联合身份验证登录请求（“wsignin1.0”）中使用的 wreqptr 参数的值。</summary>
        <value>一个指定令牌颁发请求位置的 URI，表示为一个 <see langword="&lt;wst:RequestSecurityToken&gt;" /> 元素。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wreqptr 参数是可选的。 如果将 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RequestPtr%2A> 属性设置为 `null` 或空字符串，则登录请求中不包含 wreq 参数。  
  
 可以通过为事件添加处理程序，在每个 HTTP 请求上覆盖此设置 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> 。 此事件恰好在模块使用 WS 联合身份验证登录请求消息重定向到 security token service (STS) 之前引发。 STS 由 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> 属性指定。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">尝试设置这个属性为一个值，该值不是有效的绝对 URI。</exception>
      </Docs>
    </Member>
    <Member MemberName="RequireHttps">
      <MemberSignature Language="C#" Value="public bool RequireHttps { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequireHttps" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.WSFederationAuthenticationModule.RequireHttps" />
      <MemberSignature Language="VB.NET" Value="Public Property RequireHttps As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RequireHttps { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RequireHttps : bool with get, set" Usage="System.IdentityModel.Services.WSFederationAuthenticationModule.RequireHttps" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置指定与安全令牌服务 (STS) 的通信是否必须使用 HTTPS 协议的值。</summary>
        <value>如果必须使用 HTTP 对具有 STS 的通信进行保护，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resource">
      <MemberSignature Language="C#" Value="public string Resource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Resource" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Resource" />
      <MemberSignature Language="VB.NET" Value="Public Property Resource As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Resource { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Resource : string with get, set" Usage="System.IdentityModel.Services.WSFederationAuthenticationModule.Resource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 WS 联合身份验证登录请求（“wsignin1.0”）中使用的 wres 参数的值。</summary>
        <value>标识访问的资源、依赖方 (RP)和对安全标志服务 (STS) 的 URI。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应使用由属性设置的 wtrealm 参数 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm%2A> ，而不是此参数。  
  
 Wres 参数是可选的。 如果将 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Resource%2A> 属性设置为 `null` 或空字符串，则登录请求中不包含 wres 参数。  
  
 可以通过为事件添加处理程序，在每个 HTTP 请求上覆盖此设置 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> 。 此事件恰好在模块使用 WS 联合身份验证登录请求消息重定向到 security token service (STS) 之前引发。 STS 由 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> 属性指定。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecurityTokenReceived">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.IdentityModel.Services.SecurityTokenReceivedEventArgs&gt; SecurityTokenReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IdentityModel.Services.SecurityTokenReceivedEventArgs&gt; SecurityTokenReceived" />
      <MemberSignature Language="DocId" Value="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenReceived" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SecurityTokenReceived As EventHandler(Of SecurityTokenReceivedEventArgs) " FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::IdentityModel::Services::SecurityTokenReceivedEventArgs ^&gt; ^ SecurityTokenReceived;" />
      <MemberSignature Language="F#" Value="member this.SecurityTokenReceived : EventHandler&lt;System.IdentityModel.Services.SecurityTokenReceivedEventArgs&gt; " Usage="member this.SecurityTokenReceived : System.EventHandler&lt;System.IdentityModel.Services.SecurityTokenReceivedEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event SecurityTokenReceived As EventHandler(Of SecurityTokenReceivedEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IdentityModel.Services.SecurityTokenReceivedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当安全标记已从安全标记服务 (STS) 获得时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以添加一个事件处理程序，以便在验证令牌之前修改该令牌。 在事件处理程序中，可以通过属性访问安全令牌 <xref:System.IdentityModel.Services.SecurityTokenReceivedEventArgs.SecurityToken%2A?displayProperty=nameWithType> 。 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenReceived>事件是可取消的事件，你可以 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> `true` 在事件处理程序中将属性设置为，以终止处理 ws-federation 登录响应消息。  
  
 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest%2A>当处理 WS 联合身份验证登录响应消息时，将从事件处理程序委托内部引发此事件， ( "wsignin1.0 1.0" ) 从 security token service (STS) 接收。 这是在从 wresult 反序列化安全令牌后，或在登录响应消息中的 wresultptr 参数之后、但在验证安全令牌之前引发的。  
  
   
  
## Examples  
 [!code-csharp[WifWSFAM#6](~/samples/snippets/csharp/VS_Snippets_Misc/wifwsfam/cs/webapplication1/global.asax.cs#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IdentityModel.Services.SecurityTokenReceivedEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SecurityTokenValidated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.IdentityModel.Services.SecurityTokenValidatedEventArgs&gt; SecurityTokenValidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IdentityModel.Services.SecurityTokenValidatedEventArgs&gt; SecurityTokenValidated" />
      <MemberSignature Language="DocId" Value="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenValidated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SecurityTokenValidated As EventHandler(Of SecurityTokenValidatedEventArgs) " FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::IdentityModel::Services::SecurityTokenValidatedEventArgs ^&gt; ^ SecurityTokenValidated;" />
      <MemberSignature Language="F#" Value="member this.SecurityTokenValidated : EventHandler&lt;System.IdentityModel.Services.SecurityTokenValidatedEventArgs&gt; " Usage="member this.SecurityTokenValidated : System.EventHandler&lt;System.IdentityModel.Services.SecurityTokenValidatedEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event SecurityTokenValidated As EventHandler(Of SecurityTokenValidatedEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IdentityModel.Services.SecurityTokenValidatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>但是在会话安全标记已创建之前,安全标记服务 (STS) 已被验证的安全标记后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以添加一个事件处理程序，以便在处理 WS-FEDERATION 登录响应消息时，从 security token service (STS) 修改该主体，然后将其用于创建会话令牌。 在事件处理程序中，可以通过属性访问主体 <xref:System.IdentityModel.Services.SecurityTokenValidatedEventArgs.ClaimsPrincipal%2A> 。 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SecurityTokenValidated>事件是可取消的事件，你可以 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> `true` 在事件处理程序中将属性设置为，以终止处理 ws-federation 登录响应消息。  
  
 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest%2A>当处理 WS 联合身份验证登录响应消息时，将从事件处理程序委托内部引发此事件， ( "wsignin1.0 1.0" ) 从 security token service (STS) 接收。 仅在从 wresult 反序列化的安全令牌或登录响应消息中的 wresultptr 参数已经过验证，并且在创建会话安全令牌之前引发。  
  
   
  
## Examples  
 [!code-csharp[WifWSFAM#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifwsfam/cs/webapplication1/global.asax.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionSecurityTokenCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs&gt; SessionSecurityTokenCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs&gt; SessionSecurityTokenCreated" />
      <MemberSignature Language="DocId" Value="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SessionSecurityTokenCreated As EventHandler(Of SessionSecurityTokenCreatedEventArgs) " FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::IdentityModel::Services::SessionSecurityTokenCreatedEventArgs ^&gt; ^ SessionSecurityTokenCreated;" />
      <MemberSignature Language="F#" Value="member this.SessionSecurityTokenCreated : EventHandler&lt;System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs&gt; " Usage="member this.SessionSecurityTokenCreated : System.EventHandler&lt;System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event SessionSecurityTokenCreated As EventHandler(Of SessionSecurityTokenCreatedEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当会话安全标记已从安全标记服务标记 (STS) 创建时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 你可以添加一个事件处理程序来修改会话令牌，然后将其用于设置线程主体并将其写入会话 cookie。 在事件处理程序中，可以通过属性访问会话令牌 <xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken%2A?displayProperty=nameWithType> 。 可以通过设置属性来指定是否应写入会话 cookie <xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.WriteSessionCookie%2A?displayProperty=nameWithType> 。  
  
 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest%2A>当处理 WS 联合身份验证登录响应消息时，将从事件处理程序委托内部引发此事件， ( "wsignin1.0 1.0" ) 从 security token service (STS) 接收。 仅在验证了从 wresult 反序列化的安全令牌或登录响应消息中的 wresultptr 参数之后、在 <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=nameWithType> (上和) 的属性上设置声明主体后引发 <xref:System.Web.HttpContext.User%2A> <xref:System.Web.HttpContext.Current%2A?displayProperty=nameWithType> 。  
  
> [!IMPORTANT]
>  为了在引用模式下操作会话，Microsoft 建议为 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated?displayProperty=nameWithType> global.asax.cs 文件中的事件提供处理程序，并在 <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=nameWithType> 属性中传递的标记上设置属性 <xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken%2A?displayProperty=nameWithType> 。 这将确保会话令牌在对每个请求的引用模式下运行，并且优于仅在 <xref:System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode%2A?displayProperty=nameWithType> 会话身份验证模块上设置属性。  
  
   
  
## Examples  
 [!code-csharp[WifWSFAM#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifwsfam/cs/webapplication1/global.asax.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPrincipalAndWriteSessionToken">
      <MemberSignature Language="C#" Value="public void SetPrincipalAndWriteSessionToken (System.IdentityModel.Tokens.SessionSecurityToken sessionToken, bool isSession);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPrincipalAndWriteSessionToken(class System.IdentityModel.Tokens.SessionSecurityToken sessionToken, bool isSession) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.SetPrincipalAndWriteSessionToken(System.IdentityModel.Tokens.SessionSecurityToken,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetPrincipalAndWriteSessionToken (sessionToken As SessionSecurityToken, isSession As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetPrincipalAndWriteSessionToken(System::IdentityModel::Tokens::SessionSecurityToken ^ sessionToken, bool isSession);" />
      <MemberSignature Language="F#" Value="member this.SetPrincipalAndWriteSessionToken : System.IdentityModel.Tokens.SessionSecurityToken * bool -&gt; unit" Usage="wSFederationAuthenticationModule.SetPrincipalAndWriteSessionToken (sessionToken, isSession)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sessionToken" Type="System.IdentityModel.Tokens.SessionSecurityToken" />
        <Parameter Name="isSession" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="sessionToken">从 STS 的 WS-Federation 登录响应消息生成的会话安全标识。</param>
        <param name="isSession">编写表示会话的包含该响应 cookie，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>设置线程用户和选择写入会话 Cookie。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在事件处理程序委托中实现的请求处理管道中调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest%2A> 。 此方法执行以下操作：  
  
1.  调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSessionSecurityTokenCreated%2A> 方法以引发 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated> 事件。 你可以使用此事件来修改会话令牌，然后将其用于设置线程主体并写入会话 cookie，并指定是否应写入会话 cookie。  
  
2.  <xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A>在配置的会话身份验证模块上调用方法 (<xref:System.IdentityModel.Services.SessionAuthenticationModule>) 设置线程主体，还可以选择写入会话 cookie。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="sessionToken" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.IdentityModel.Services.WSFederationAuthenticationModule.OnAuthenticateRequest(System.Object,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="SignedIn">
      <MemberSignature Language="C#" Value="public event EventHandler SignedIn;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SignedIn" />
      <MemberSignature Language="DocId" Value="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SignedIn" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SignedIn As EventHandler " FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SignedIn;" />
      <MemberSignature Language="F#" Value="member this.SignedIn : EventHandler " Usage="member this.SignedIn : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event SignedIn As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在用于登录之后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果请求发布到登录页，则页面上的控件将引发此事件，而不是此模块。  
  
   
  
## Examples  
 [!code-csharp[WifWSFAM#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifwsfam/cs/webapplication1/global.asax.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignedOut">
      <MemberSignature Language="C#" Value="public event EventHandler SignedOut;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SignedOut" />
      <MemberSignature Language="DocId" Value="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SignedOut" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SignedOut As EventHandler " FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SignedOut;" />
      <MemberSignature Language="F#" Value="member this.SignedOut : EventHandler " Usage="member this.SignedOut : System.EventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event SignedOut As EventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>只在注销期间删除会话后发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件通过从方法中调用方法引发， <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedOut%2A> <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%28System.Boolean%29?displayProperty=nameWithType> 而从信赖方 (RP) 的会话中注销。 通过方法执行联合注销时不引发该事件 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> 。  
  
 你可以添加一个事件处理程序，以在删除会话 cookie 后执行应用程序所需的任何其他处理。  
  
 不保证每个会话都要调用此事件。 例如，可能会在客户端删除 cookie，因此永远不会引发此事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignIn">
      <MemberSignature Language="C#" Value="public virtual void SignIn (string ControlId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SignIn(string ControlId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.SignIn(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SignIn (ControlId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SignIn(System::String ^ ControlId);" />
      <MemberSignature Language="F#" Value="abstract member SignIn : string -&gt; unit&#xA;override this.SignIn : string -&gt; unit" Usage="wSFederationAuthenticationModule.SignIn ControlId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlId">WSFAM 保存请求中的 WS-Federation 标志 wctx 参数值; 但是，该模块在处理签入请求或sign-in反应时不使用它。 您可以将其设置为任何值。 它不必是唯一的。 有关更多信息，请参见 <see cref="M:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest(System.String,System.String,System.Boolean)" /> 方法。</param>
        <summary>通过 WS-Federation 协议执行登录到安全标记服务 (STS) 的操作。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认实现将调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectToIdentityProvider%2A> 方法来执行登录。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignInContext">
      <MemberSignature Language="C#" Value="public string SignInContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SignInContext" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.WSFederationAuthenticationModule.SignInContext" />
      <MemberSignature Language="VB.NET" Value="Public Property SignInContext As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SignInContext { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SignInContext : string with get, set" Usage="System.IdentityModel.Services.WSFederationAuthenticationModule.SignInContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置应用程序的特定上下文值，该值包含在 WS 联合身份验证登录请求的 wctx 参数中。</summary>
        <value>登录请求中的 wctx 参数，要包含应用程序的特定上下文值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest%2A>调用方法时，所生成的登录消息将包含具有以下格式的 wctx 参数： `ru=returnUrl&cx=SignInContext&rm=rememberMeSet&id=uniqueId` 。 的值 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignInContext%2A> 存储在 `cx` 参数中。 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest%2A>可从代码中直接调用。 它还会在 WSFAM 执行被动重定向时调用，同时也会在 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignIn%2A> <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectToIdentityProvider%2A> 应用程序代码调用方法或方法时调用。  
  
 尽管 WSFAM 将值保存 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignInContext%2A> 在登录请求消息中，但如果你的应用程序在响应处理期间使用该值，则必须提供从登录响应消息中的 wctx 参数提取的逻辑。  
  
 有关 wctx 参数的格式和处理的详细信息，请参阅 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest%2A> 方法。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IdentityModel.Services.WSFederationAuthenticationModule.CreateSignInRequest(System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="SignInError">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.IdentityModel.Services.ErrorEventArgs&gt; SignInError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IdentityModel.Services.ErrorEventArgs&gt; SignInError" />
      <MemberSignature Language="DocId" Value="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SignInError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SignInError As EventHandler(Of ErrorEventArgs) " FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::IdentityModel::Services::ErrorEventArgs ^&gt; ^ SignInError;" />
      <MemberSignature Language="F#" Value="member this.SignInError : EventHandler&lt;System.IdentityModel.Services.ErrorEventArgs&gt; " Usage="member this.SignInError : System.EventHandler&lt;System.IdentityModel.Services.ErrorEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event SignInError As EventHandler(Of ErrorEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IdentityModel.Services.ErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当登录过程中出现错误时引发。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果请求发布到登录页，则页面上的控件将引发此事件，而不是此模块。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SigningOut">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.IdentityModel.Services.SigningOutEventArgs&gt; SigningOut;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IdentityModel.Services.SigningOutEventArgs&gt; SigningOut" />
      <MemberSignature Language="DocId" Value="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SigningOut" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SigningOut As EventHandler(Of SigningOutEventArgs) " FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::IdentityModel::Services::SigningOutEventArgs ^&gt; ^ SigningOut;" />
      <MemberSignature Language="F#" Value="member this.SigningOut : EventHandler&lt;System.IdentityModel.Services.SigningOutEventArgs&gt; " Usage="member this.SigningOut : System.EventHandler&lt;System.IdentityModel.Services.SigningOutEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event SigningOut As EventHandler(Of SigningOutEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IdentityModel.Services.SigningOutEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在注销期间删除会话前发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件通过从方法中调用方法引发， <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSigningOut%2A> <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%28System.Boolean%29?displayProperty=nameWithType> 而从信赖方 (RP) 的会话中注销。 通过方法执行联合注销时不引发该事件 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> 。  
  
 您可以添加一个事件处理程序，以执行您的应用程序在删除会话 cookie 之前所需的任何其他处理。 您可以 <xref:System.IdentityModel.Services.SigningOutEventArgs.IsIPInitiated*> 在事件处理程序中读取属性，以确定注销是否是从 security token service (STS) 接收 ws-federation 注销清理请求消息 ( "wsignoutcleanup1.0 1.0" ) ，还是在 RP 中启动它。  
  
 不保证每个会话都要调用此事件。 例如，可能会在客户端删除 cookie，因此永远不会引发此事件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignInQueryString">
      <MemberSignature Language="C#" Value="public string SignInQueryString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SignInQueryString" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.WSFederationAuthenticationModule.SignInQueryString" />
      <MemberSignature Language="VB.NET" Value="Public Property SignInQueryString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SignInQueryString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SignInQueryString : string with get, set" Usage="System.IdentityModel.Services.WSFederationAuthenticationModule.SignInQueryString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置包含要在 WS 联合身份验证登录请求（“wsignin1.0”）中发送的额外参数的查询字符串。</summary>
        <value>一个 URL 片段，其中包含采用以下格式的其他消息参数： <c>param1 = value1 &amp; param2 = value2 &amp; paramN = valueN</c>。 默认值为空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用此属性在登录请求中发送其他参数。 这些是特定于应用程序的参数，这些参数不是 WS-FEDERATION 协议指定的参数之一。 若要从请求中删除其他参数，请将属性设置为空字符串。  
  
 可以通过为事件添加处理程序，在每个 HTTP 请求上覆盖此设置 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.RedirectingToIdentityProvider> 。 此事件恰好在模块使用 WS 联合身份验证登录请求消息重定向到 security token service (STS) 之前引发。 STS 由 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer%2A> 属性指定。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SignOut">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>注册当前对话。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 删除当前会话。  
  
  ( "wsignout1.0 1.0" ) 发送到 security token service (STS) 的注销请求消息。 若要使用 WS 联合身份验证协议在 STS 上注销，请使用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SignOut">
      <MemberSignature Language="C#" Value="public virtual void SignOut ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SignOut() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SignOut ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SignOut();" />
      <MemberSignature Language="F#" Value="abstract member SignOut : unit -&gt; unit&#xA;override this.SignOut : unit -&gt; unit" Usage="wSFederationAuthenticationModule.SignOut " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>当前会话的注销并要求重定向回在当前 HTTP 指定的 URL。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 删除当前会话，并将浏览器重定向回当前 HTTP 请求中指定的 URL。  
  
 调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%28System.String%29?displayProperty=nameWithType> 方法，并将 `redirectUrl` 参数设置为当前请求的 URL。  
  
  ( "wsignout1.0 1.0" ) 发送到 security token service (STS) 的注销请求消息。 若要使用 WS 联合身份验证协议在 STS 上注销，请使用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignOut">
      <MemberSignature Language="C#" Value="public virtual void SignOut (bool isIPRequest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SignOut(bool isIPRequest) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SignOut (isIPRequest As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SignOut(bool isIPRequest);" />
      <MemberSignature Language="F#" Value="abstract member SignOut : bool -&gt; unit&#xA;override this.SignOut : bool -&gt; unit" Usage="wSFederationAuthenticationModule.SignOut isIPRequest" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isIPRequest" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isIPRequest">如果由 IP-STS 通过 WS 联合身份验证注销清理请求消息（“wsignoutcleanup1.0”）启动请求，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
        <summary>当前会话的注销并引发相应事件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法执行删除当前会话并引发适当的注销事件的实际工作。 该方法将执行以下操作：  
  
1.  调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSigningOut%2A> 方法以引发 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SigningOut> 事件。 在删除会话之前，事件处理程序可以提供任何必要的处理。 <xref:System.IdentityModel.Services.SigningOutEventArgs.IsIPInitiated%2A?displayProperty=nameWithType>根据参数设置属性 `isIPRequest` 。  
  
2.  <xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A?displayProperty=nameWithType>在当前会话身份验证管理器中调用方法，以删除会话 cookie。  
  
     调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignedOut%2A> 方法以引发 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignedOut> 事件。  
  
3.  如果在注销处理过程中发生错误，则调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignOutError%2A> 方法来引发 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutError> 事件。 事件处理程序可以取消处理并防止异常返回到的调用方<xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%2A>  
  
 您可以调用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%2A?displayProperty=nameWithType> 方法，并将 `isIPRequest` 参数设置 `false` 为从会话中注销而不执行重定向。 方法最终由其他所有重载方法调用， <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%2A> (`isIPRequest` 将参数设置为 `false`) 以执行注销处理。 此方法是从方法中调用的， <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.CanReadSignInResponse%28System.Web.HttpRequestBase%2CSystem.Boolean%29?displayProperty=nameWithType> `isIPRequest` 参数设置 `true` 为在处理 ws-federation 注销清除消息 ( "wsignoutcleanup1.0 1.0" ) 时从会话中注销。  
  
  ( "wsignout1.0 1.0" ) 发送到 security token service (STS) 的注销请求消息。 若要使用 WS 联合身份验证协议在 STS 上注销，请使用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> 方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignOut">
      <MemberSignature Language="C#" Value="public virtual void SignOut (string redirectUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SignOut(string redirectUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SignOut (redirectUrl As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SignOut(System::String ^ redirectUrl);" />
      <MemberSignature Language="F#" Value="abstract member SignOut : string -&gt; unit&#xA;override this.SignOut : string -&gt; unit" Usage="wSFederationAuthenticationModule.SignOut redirectUrl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="redirectUrl" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="redirectUrl">会话删除后浏览器应被重定向到 URL。</param>
        <summary>当前会话的注销并要求重定向回指定的 URL。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 删除当前会话，并将浏览器重定向回指定的 URL。  
  
 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType>用 `redirectUrl` 参数和集调用方法 `initiateSignoutCleanup` `false` 。  
  
  ( "wsignout1.0 1.0" ) 发送到 security token service (STS) 的注销请求消息。 若要使用 WS 联合身份验证协议在 STS 上注销，请使用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="redirectUrl" /> 不是有效的 URI。</exception>
      </Docs>
    </Member>
    <Member MemberName="SignOut">
      <MemberSignature Language="C#" Value="public virtual void SignOut (string redirectUrl, bool initiateSignoutCleanup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SignOut(string redirectUrl, bool initiateSignoutCleanup) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SignOut (redirectUrl As String, initiateSignoutCleanup As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SignOut(System::String ^ redirectUrl, bool initiateSignoutCleanup);" />
      <MemberSignature Language="F#" Value="abstract member SignOut : string * bool -&gt; unit&#xA;override this.SignOut : string * bool -&gt; unit" Usage="wSFederationAuthenticationModule.SignOut (redirectUrl, initiateSignoutCleanup)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="redirectUrl" Type="System.String" />
        <Parameter Name="initiateSignoutCleanup" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="redirectUrl">注销后浏览器应被重定向到 URL。</param>
        <param name="initiateSignoutCleanup">始终设置 <see langword="false" />。 不支持设置此参数到 <see langword="true" />。</param>
        <summary>当前会话的注销并要求重定向回指定的 URL。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 删除当前会话，并将浏览器重定向回指定的 URL。  
  
 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%28System.Boolean%29?displayProperty=nameWithType>用参数集调用方法 `initiateSignoutCleanup` `false` 。  
  
  ( "wsignout1.0 1.0" ) 发送到 security token service (STS) 的注销请求消息。 若要使用 WS 联合身份验证协议在 STS 上注销，请使用 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="redirectUrl" /> 不是有效的 URI。</exception>
        <exception cref="T:System.NotImplementedException">如果 <paramref name="initiateSignoutCleanup" /> 是 <see langword="true" />则引发该异常的 <see cref="T:System.IdentityModel.Services.WSFederationAuthenticationModule" /> 类。 不要将参数设置为 <see langword="true" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SignOutError">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.IdentityModel.Services.ErrorEventArgs&gt; SignOutError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.IdentityModel.Services.ErrorEventArgs&gt; SignOutError" />
      <MemberSignature Language="DocId" Value="E:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutError" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SignOutError As EventHandler(Of ErrorEventArgs) " FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::IdentityModel::Services::ErrorEventArgs ^&gt; ^ SignOutError;" />
      <MemberSignature Language="F#" Value="member this.SignOutError : EventHandler&lt;System.IdentityModel.Services.ErrorEventArgs&gt; " Usage="member this.SignOutError : System.EventHandler&lt;System.IdentityModel.Services.ErrorEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event SignOutError As EventHandler(Of ErrorEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.IdentityModel.Services.ErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当注销过程中出现错误时引发。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此事件通过从方法中调用方法引发， <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.OnSignOutError%2A> <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOut%28System.Boolean%29?displayProperty=nameWithType> 而从信赖方 (RP) 的会话中注销。 通过方法执行联合注销时不引发该事件 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> 。  
  
 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutError>事件是可取消事件。 您可以 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 在事件处理程序中设置属性，以防止导致错误的异常返回到注销的发起方。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignOutQueryString">
      <MemberSignature Language="C#" Value="public string SignOutQueryString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SignOutQueryString" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutQueryString" />
      <MemberSignature Language="VB.NET" Value="Public Property SignOutQueryString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SignOutQueryString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SignOutQueryString : string with get, set" Usage="System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutQueryString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置询问字符串，该字符串包含 WS 联合身份验证注销请求（“wsignout1.0”）中将被发送的额外参数。</summary>
        <value>一个 URL 片段，其中包含采用以下格式的其他消息参数： <c>param1 = value1 &amp; param2 = value2 &amp; paramN = valueN</c>。 默认值为空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，此属性是从 `signOutQueryString` 配置文件中的[ &lt; wsFederation &gt; ](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/wsfederation)元素的属性初始化的。 它旨在包含要在 WS 联合身份验证注销请求中发送的任何特定于应用程序的参数。 若要删除这些参数，可以将属性设置为空字符串。  
  
 WSFAM 不会直接使用此属性;但是，你可以将其传递给 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetFederationPassiveSignOutUrl%2A> 方法以创建完整的 WS 联合身份验证注销 URL，你的代码可以使用该 URL。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="SignOutReply">
      <MemberSignature Language="C#" Value="public string SignOutReply { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SignOutReply" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutReply" />
      <MemberSignature Language="VB.NET" Value="Public Property SignOutReply As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SignOutReply { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SignOutReply : string with get, set" Usage="System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutReply" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在 WS 联合身份验证注销请求（“wsignout1.0”）期间使用的 wreply 参数的值。</summary>
        <value>通过注销以下 WS-Federation 协议，该客户端应由安全标记服务 (STS) 的重定向到 URL。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，此属性是从 `signOutReply` 配置文件中的[ &lt; wsFederation &gt; ](/dotnet/framework/configure-apps/file-schema/windows-identity-foundation/wsfederation)元素的属性初始化的。 它用于表示 WS 联合身份验证注销请求中的 wreply 参数。  
  
 Wreply 参数是可选的。 如果将 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SignOutReply%2A> 属性设置为 `null` 或空字符串，则在注销请求中不包含 wreply 参数。  
  
 WSFAM 不会直接使用此属性。 但是，在从代码执行 WS-FEDERATION 注销时，可以将其传递给方法，也可以将其 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.FederatedSignOut%2A> 传递给 <xref:System.IdentityModel.Services.WSFederationAuthenticationModule.GetFederationPassiveSignOutUrl%2A> 方法以创建完整的 WS 联合身份验证注销 URL。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerifyProperties">
      <MemberSignature Language="C#" Value="public void VerifyProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VerifyProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Services.WSFederationAuthenticationModule.VerifyProperties" />
      <MemberSignature Language="VB.NET" Value="Public Sub VerifyProperties ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VerifyProperties();" />
      <MemberSignature Language="F#" Value="member this.VerifyProperties : unit -&gt; unit" Usage="wSFederationAuthenticationModule.VerifyProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>验证 <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer" /> 和 <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm" /> 属性为非空，和如果 <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.RequireHttps" /> 属性是否为 <see langword="true" /> 以及为 <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer" /> 和 <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm" /> 指定的 URI 遵循 HTTPS。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer" /> 为 <see langword="null" /> 或空字符串。  
  
- 或 - 
 <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm" /> 为 <see langword="null" /> 或空字符串。  
  
- 或 - 
 <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.RequireHttps" /> 为 <see langword="true" />，且 <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Issuer" /> 不兼容 HTTPS。  
  
-或- 
 <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.RequireHttps" /> 为 <see langword="true" />，且 <see cref="P:System.IdentityModel.Services.WSFederationAuthenticationModule.Realm" /> 不兼容 HTTPS。</exception>
      </Docs>
    </Member>
    <Member MemberName="XmlDictionaryReaderQuotas">
      <MemberSignature Language="C#" Value="public System.Xml.XmlDictionaryReaderQuotas XmlDictionaryReaderQuotas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlDictionaryReaderQuotas XmlDictionaryReaderQuotas" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Services.WSFederationAuthenticationModule.XmlDictionaryReaderQuotas" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlDictionaryReaderQuotas As XmlDictionaryReaderQuotas" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlDictionaryReaderQuotas ^ XmlDictionaryReaderQuotas { System::Xml::XmlDictionaryReaderQuotas ^ get(); void set(System::Xml::XmlDictionaryReaderQuotas ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlDictionaryReaderQuotas : System.Xml.XmlDictionaryReaderQuotas with get, set" Usage="System.IdentityModel.Services.WSFederationAuthenticationModule.XmlDictionaryReaderQuotas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDictionaryReaderQuotas</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取设置序列化 WS-Federation 响应消息以获取安全令牌服务 (STS) 使用的令牌时要使用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> 对象。</summary>
        <value>序列化 WS-Federation 响应消息以获取安全标记服务 (STS) 使用的标记时要使用的 <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> 对象。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">尝试将该属性设置为 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
