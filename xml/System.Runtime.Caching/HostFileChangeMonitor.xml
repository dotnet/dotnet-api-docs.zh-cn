<Type Name="HostFileChangeMonitor" FullName="System.Runtime.Caching.HostFileChangeMonitor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4c9eba9b7920f5513795a046ad37352221b5040f" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86771501" /></Metadata><TypeSignature Language="C#" Value="public sealed class HostFileChangeMonitor : System.Runtime.Caching.FileChangeMonitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HostFileChangeMonitor extends System.Runtime.Caching.FileChangeMonitor" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.HostFileChangeMonitor" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HostFileChangeMonitor&#xA;Inherits FileChangeMonitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class HostFileChangeMonitor sealed : System::Runtime::Caching::FileChangeMonitor" />
  <TypeSignature Language="F#" Value="type HostFileChangeMonitor = class&#xA;    inherit FileChangeMonitor" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.Caching.FileChangeMonitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>监视目录和文件路径，并通知缓存被监视项的更改情况。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.HostFileChangeMonitor>类是类型的具体实现 <xref:System.Runtime.Caching.FileChangeMonitor> 。 此类是密封的，因此不能对其进行扩展。 如果要使用现有缓存实现并监视文件和目录的更改，则此类非常有用。  
  
 对于每个指定的文件或目录路径， <xref:System.Runtime.Caching.HostFileChangeMonitor> 如果发生以下任何更改，则类会触发更改通知：  
  
-   监视的文件或目录的名称更改。  
  
-   创建监视器时，指定的文件或目录不存在，但以后创建。 换句话说，文件或目录是在监视项的作用域中创建的。  
  
-   已更改的监视文件的大小。  
  
-   已更改监视文件的内容，或已更改监视目录的内容。  
  
-   已更改文件或目录 (ACL) 的访问控制列表。  
  
-   所监视的文件或目录已被删除。  
  
 如果同时对被监视的文件或目录发生了太多的更改，则 <xref:System.Runtime.Caching.HostFileChangeMonitor> 实例可能会无法跟踪特定更改。 在此方案中， <xref:System.Runtime.Caching.HostFileChangeMonitor> 类会触发更改通知。 当实例监视某个目录时，更有可能出现这种情况 <xref:System.Runtime.Caching.HostFileChangeMonitor> ，而在较短的时间内在目录结构的作用域中发生了许多更改。  
  
 由于类的用途 <xref:System.Runtime.Caching.HostFileChangeMonitor> 只是为了表明已在一组受监视的文件和目录之间更改了某些内容，因此不会将有关特定更改的详细信息视为不会被视为重要。 类的用途 <xref:System.Runtime.Caching.HostFileChangeMonitor> 是提供状态已更改的通知，以便可以逐出) 缓存条目 (或条目。 因为 <xref:System.Runtime.Caching.HostFileChangeMonitor> 类不会确切地指示所更改的内容，所以内部更改跟踪溢出无关。  
  
 为实例提供路径时 <xref:System.Runtime.Caching.HostFileChangeMonitor> ，目录和文件路径必须是目录或文件的完整路径。 不允许在路径中使用相对路径和通配符。  
  
 当 <xref:System.Runtime.Caching.HostFileChangeMonitor> 类在 ASP.NET 应用程序中使用时，用于访问被监视项的 Windows 标识是 ASP.NET 应用程序的应用程序标识。 换句话说，应用程序标识将是以下各项之一：  
  
-   进程标识。  
  
-   配置的应用程序标识。  
  
-   UNC 凭据（如果应用程序从 UNC 共享运行）。  
  
 在 <xref:System.Runtime.Caching.HostFileChangeMonitor> non-ASP.NET 应用程序中使用类时，类在 <xref:System.IO.FileSystemWatcher> 内部使用，以监视文件。 因此， (ACL) 的任何访问控制列表应用于受监视的文件或目录将应用于当前线程的 Windows 标识。  
  
> [!NOTE]
>  调用方必须具有适当级别的代码访问安全性 (CA) 权限，并且必须对所有监视的目录和路径具有 NTFS 权限。  
  
   
  
## Examples  
 下面的示例创建一个缓存项，该缓存项使用 <xref:System.Runtime.Caching.HostFileChangeMonitor> 对象监视源数据的状态， (是文件系统上的文件) 。 缓存项是使用对象定义的， <xref:System.Runtime.Caching.CacheItemPolicy> 用于提供缓存项的逐出和过期详细信息。  
  
 [!code-csharp[CachingASPNetApplications#1](~/samples/snippets/csharp/VS_Snippets_WebNet/cachingaspnetapplications/cs/default.aspx.cs#1)]
 [!code-vb[CachingASPNetApplications#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/cachingaspnetapplications/vb/default.aspx.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HostFileChangeMonitor (System.Collections.Generic.IList&lt;string&gt; filePaths);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IList`1&lt;string&gt; filePaths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.HostFileChangeMonitor.#ctor(System.Collections.Generic.IList{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filePaths As IList(Of String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HostFileChangeMonitor(System::Collections::Generic::IList&lt;System::String ^&gt; ^ filePaths);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Caching.HostFileChangeMonitor : System.Collections.Generic.IList&lt;string&gt; -&gt; System.Runtime.Caching.HostFileChangeMonitor" Usage="new System.Runtime.Caching.HostFileChangeMonitor filePaths" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filePaths" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="filePaths">包含要监视的一个或多个目录路径或文件路径的列表。</param>
        <summary>初始化 <see cref="T:System.Runtime.Caching.HostFileChangeMonitor" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对 <xref:System.Runtime.Caching.HostFileChangeMonitor.%23ctor%2A> 构造函数的调用必须为该参数提供一个非 null 值 `filePaths` 。 构造函数至少会验证传递给它的路径集合，然后对这些路径进行监视。  
  
> [!NOTE]
>  构造函数仅对路径名称执行字符串验证。 它不会规范化路径或验证路径是否存在。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="filePaths" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="filePaths" /> 包含零项。  
  
-或- 
<paramref name="filePaths" /> 列表中的路径为 <see langword="null" /> 或空字符串。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.HostFileChangeMonitor.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="hostFileChangeMonitor.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilePaths">
      <MemberSignature Language="C#" Value="public override System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; FilePaths { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FilePaths" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.HostFileChangeMonitor.FilePaths" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property FilePaths As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ FilePaths { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FilePaths : System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="System.Runtime.Caching.HostFileChangeMonitor.FilePaths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取已传递给 <see cref="M:System.Runtime.Caching.HostFileChangeMonitor.#ctor(System.Collections.Generic.IList{System.String})" /> 构造函数的目录和文件路径的集合。</summary>
        <value>目录和文件路径的集合。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastModified">
      <MemberSignature Language="C#" Value="public override DateTimeOffset LastModified { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeOffset LastModified" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.HostFileChangeMonitor.LastModified" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LastModified As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property DateTimeOffset LastModified { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.LastModified : DateTimeOffset" Usage="System.Runtime.Caching.HostFileChangeMonitor.LastModified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个只读值，该值指示所监视文件或路径的上次写入时间。</summary>
        <value>所监视文件或路径的上次写入时间。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果文件更改监视器监视多个文件或路径，则此属性将返回所有文件和路径集中的最近写入时间。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UniqueId">
      <MemberSignature Language="C#" Value="public override string UniqueId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueId" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.HostFileChangeMonitor.UniqueId" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property UniqueId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ UniqueId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniqueId : string" Usage="System.Runtime.Caching.HostFileChangeMonitor.UniqueId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取基于被监视的目录和文件路径集的 <see cref="T:System.Runtime.Caching.HostFileChangeMonitor" /> 实例的标识符。</summary>
        <value>更改监视器的标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 构成 <xref:System.Runtime.Caching.HostFileChangeMonitor.UniqueId%2A> 属性值的字符串从以下部分构造：  
  
-   文件或目录路径。  
  
-   UTC 时间的最近写入时间，以计时周期度量，但表示为十六进制字符串。  
  
-   文件大小，以十六进制字符串表示。  
  
 如果文件更改监视器监视多个路径，则此属性返回的信息将连接到所有监视的目录和文件路径的单个字符串。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
