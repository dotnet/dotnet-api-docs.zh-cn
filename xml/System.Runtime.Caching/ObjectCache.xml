<Type Name="ObjectCache" FullName="System.Runtime.Caching.ObjectCache">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9ffff62e3b6fdeb37f36ebeebe3d81253999562f" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102076442" /></Metadata><TypeSignature Language="C#" Value="public abstract class ObjectCache : System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ObjectCache extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.ObjectCache" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ObjectCache&#xA;Implements IEnumerable(Of KeyValuePair(Of String, Object))" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectCache abstract : System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt;" />
  <TypeSignature Language="F#" Value="type ObjectCache = class&#xA;    interface seq&lt;KeyValuePair&lt;string, obj&gt;&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="d6a8a-101">表示一个对象缓存并提供用于访问该对象缓存的基方法和属性。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-101">Represents an object cache and provides the base methods and properties for accessing the object cache.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-102"><xref:System.Runtime.Caching.ObjectCache>类型是内存中对象缓存的主要类型。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-102">The <xref:System.Runtime.Caching.ObjectCache> type is the primary type for the in-memory object cache.</span></span> <span data-ttu-id="d6a8a-103">若要开发自定义缓存实现，请从 <xref:System.Runtime.Caching.ObjectCache> 类派生。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-103">To develop a custom cache implementation, you derive from the <xref:System.Runtime.Caching.ObjectCache> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d6a8a-104"><xref:System.Runtime.Caching.ObjectCache>类是 .NET Framework 4 的新类。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-104">The <xref:System.Runtime.Caching.ObjectCache> class is new as of the .NET Framework 4.</span></span>  
  
 <span data-ttu-id="d6a8a-105">内置 <xref:System.Runtime.Caching.MemoryCache> 类派生自 <xref:System.Runtime.Caching.ObjectCache> 类。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-105">The built-in <xref:System.Runtime.Caching.MemoryCache> class derives from the <xref:System.Runtime.Caching.ObjectCache> class.</span></span> <span data-ttu-id="d6a8a-106"><xref:System.Runtime.Caching.MemoryCache>类是派生自类的 .NET Framework 4 中唯一具体的对象缓存实现 <xref:System.Runtime.Caching.ObjectCache> 。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-106">The <xref:System.Runtime.Caching.MemoryCache> class is the only concrete object cache implementation in the .NET Framework 4 that derives from the <xref:System.Runtime.Caching.ObjectCache> class.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="d6a8a-107">此类型是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-107">This type is thread safe.</span></span></threadsafe>
    <block subset="none" type="overrides"><para><span data-ttu-id="d6a8a-108">由于 <see cref="T:System.Runtime.Caching.ObjectCache" /> 类型仅表示公共缓存函数，因此不需要 <see cref="T:System.Runtime.Caching.ObjectCache" /> 实例化和获取实例的方式。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-108">Because the <see cref="T:System.Runtime.Caching.ObjectCache" /> type represents only common cache functions, there is no requirement for how an <see cref="T:System.Runtime.Caching.ObjectCache" /> instance must be instantiated and obtained.</span></span> <span data-ttu-id="d6a8a-109">此外，不要求类的具体实现 <see cref="T:System.Runtime.Caching.ObjectCache" /> 必须为单一实例。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-109">In addition, there is no requirement that concrete implementations of the <see cref="T:System.Runtime.Caching.ObjectCache" /> class must be singletons.</span></span>  
  
 <block subset="none" type="note"><para><span data-ttu-id="d6a8a-110"><see cref="T:System.Runtime.Caching.MemoryCache" /> 不是单一实例，但您应该只创建一个或多个 <see cref="T:System.Runtime.Caching.MemoryCache" /> 实例，而缓存项的代码应使用这些实例。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-110"><see cref="T:System.Runtime.Caching.MemoryCache" /> is not a singleton, but you should create only a few or potentially only one <see cref="T:System.Runtime.Caching.MemoryCache" /> instance and code that caches items should use those instances.</span></span>  
  
</para></block>  
  
 <span data-ttu-id="d6a8a-111">从类继承时 <see cref="T:System.Runtime.Caching.ObjectCache" /> ，必须重写其方法。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-111">When you inherit from the <see cref="T:System.Runtime.Caching.ObjectCache" /> class, you must override its methods.</span></span></para></block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ObjectCache ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ObjectCache();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d6a8a-112">从派生类中的构造函数进行调用以便初始化 <see cref="T:System.Runtime.Caching.ObjectCache" /> 类。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-112">Called from constructors in derived classes in order to initialize the <see cref="T:System.Runtime.Caching.ObjectCache" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d6a8a-113">在派生类中重写时，向缓存中插入缓存项，而无需返回具有匹配键的现有缓存项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-113">When overridden in a derived class, inserts a cache entry into the cache, without requiring that an existing cache entry with a matching key be returned.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-114"><xref:System.Runtime.Caching.ObjectCache.Add%2A>方法重载尝试将缓存项插入缓存中，而不覆盖或移除具有相同键的现有缓存项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-114">The <xref:System.Runtime.Caching.ObjectCache.Add%2A> method overloads try to insert a cache entry into the cache, without overwriting or removing an existing cache entry that has the same key.</span></span> <span data-ttu-id="d6a8a-115">缓存项可以是类型化的 <xref:System.Runtime.Caching.CacheItem> 对象或泛型对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-115">The cache entry can be a typed <xref:System.Runtime.Caching.CacheItem> object or a generic object.</span></span>  
  
 <span data-ttu-id="d6a8a-116"><xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A>方法重载和 <xref:System.Runtime.Caching.ObjectCache.Add%2A> 方法重载有一个很大的差异。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-116">The <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> method overloads and the <xref:System.Runtime.Caching.ObjectCache.Add%2A> method overloads have one significant difference.</span></span> <span data-ttu-id="d6a8a-117">当这些方法插入缓存项时，如果在缓存中找到匹配项，则 <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> 方法重载返回现有缓存项，但 <xref:System.Runtime.Caching.ObjectCache.Add%2A> 方法重载不会返回。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-117">When these methods insert a cache entry, if a matching entry is found in the cache, the <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> method overloads return the existing cache entry, but the <xref:System.Runtime.Caching.ObjectCache.Add%2A> method overloads do not.</span></span> <span data-ttu-id="d6a8a-118">通过这些不同的方法重载，调用方可以基于是否需要现有缓存项来优化代码。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-118">Having these different method overloads enables callers to optimize their code based on whether they need the existing cache entry.</span></span> <span data-ttu-id="d6a8a-119">在分布式缓存中，使用方法返回现有值 <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> 可能比使用方法返回布尔值更昂贵 <xref:System.Runtime.Caching.ObjectCache.Add%2A> 。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-119">In distributed caches, returning an existing value by using the <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> method might be more expensive than returning a Boolean value by using <xref:System.Runtime.Caching.ObjectCache.Add%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual bool Add (System.Runtime.Caching.CacheItem item, System.Runtime.Caching.CacheItemPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Add(class System.Runtime.Caching.CacheItem item, class System.Runtime.Caching.CacheItemPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.Add(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (item As CacheItem, policy As CacheItemPolicy) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Add(System::Runtime::Caching::CacheItem ^ item, System::Runtime::Caching::CacheItemPolicy ^ policy);" />
      <MemberSignature Language="F#" Value="abstract member Add : System.Runtime.Caching.CacheItem * System.Runtime.Caching.CacheItemPolicy -&gt; bool&#xA;override this.Add : System.Runtime.Caching.CacheItem * System.Runtime.Caching.CacheItemPolicy -&gt; bool" Usage="objectCache.Add (item, policy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Runtime.Caching.CacheItem" />
        <Parameter Name="policy" Type="System.Runtime.Caching.CacheItemPolicy" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="d6a8a-120">要添加的对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-120">The object to add.</span></span></param>
        <param name="policy"><span data-ttu-id="d6a8a-121">一个包含该缓存项的逐出详细信息的对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-121">An object that contains eviction details for the cache entry.</span></span> <span data-ttu-id="d6a8a-122">此对象提供比简单绝对过期更多的逐出选项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-122">This object provides more options for eviction than a simple absolute expiration.</span></span></param>
        <summary><span data-ttu-id="d6a8a-123">在派生类中重写时，尝试以 <see cref="T:System.Runtime.Caching.CacheItem" /> 实例的形式将缓存项插入缓存中，并添加有关应如何逐出该项的详细信息。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-123">When overridden in a derived class, tries to insert a cache entry into the cache as a <see cref="T:System.Runtime.Caching.CacheItem" /> instance, and adds details about how the entry should be evicted.</span></span></summary>
        <returns><span data-ttu-id="d6a8a-124">如果插入成功，则为 <see langword="true" />；如果缓存中已存在具有与 <paramref name="item" /> 相同的键的项，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-124"><see langword="true" /> if insertion succeeded, or <see langword="false" /> if there is an already an entry in the cache that has the same key as <paramref name="item" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-125"><xref:System.Runtime.Caching.ObjectCache.Add%2A>方法重载是虚 (不是类的抽象) <xref:System.Runtime.Caching.ObjectCache> ，因为方法在 <xref:System.Runtime.Caching.ObjectCache.Add%2A> 内部调用 <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> 。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-125">The <xref:System.Runtime.Caching.ObjectCache.Add%2A> method overloads are virtual (not abstract) on the <xref:System.Runtime.Caching.ObjectCache> class, because the <xref:System.Runtime.Caching.ObjectCache.Add%2A> method internally calls <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A>.</span></span> <span data-ttu-id="d6a8a-126">这会减少缓存实施者必须提供的方法重载的数量。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-126">This reduces the number of method overloads that a cache implementer has to provide.</span></span> <span data-ttu-id="d6a8a-127">如果缓存实现不需要方法的任何特殊行为 <xref:System.Runtime.Caching.ObjectCache.Add%2A> ，则可以仅实现 <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-127">If a cache implementation does not require any special behavior for the <xref:System.Runtime.Caching.ObjectCache.Add%2A> method, it can just implement the <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> method overloads.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual bool Add (string key, object value, DateTimeOffset absoluteExpiration, string regionName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Add(string key, object value, valuetype System.DateTimeOffset absoluteExpiration, string regionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.Add(System.String,System.Object,System.DateTimeOffset,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, value As Object, absoluteExpiration As DateTimeOffset, Optional regionName As String = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Add : string * obj * DateTimeOffset * string -&gt; bool&#xA;override this.Add : string * obj * DateTimeOffset * string -&gt; bool" Usage="objectCache.Add (key, value, absoluteExpiration, regionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="absoluteExpiration" Type="System.DateTimeOffset" />
        <Parameter Name="regionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="d6a8a-128">该缓存项的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-128">A unique identifier for the cache entry.</span></span></param>
        <param name="value"><span data-ttu-id="d6a8a-129">要插入的对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-129">The object to insert.</span></span></param>
        <param name="absoluteExpiration"><span data-ttu-id="d6a8a-130">缓存项的固定的过期日期和时间。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-130">The fixed date and time at which the cache entry will expire.</span></span> <span data-ttu-id="d6a8a-131">调用 <see cref="Overload:System.Runtime.Caching.ObjectCache.Add" /> 方法时，此参数是必需的。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-131">This parameter is required when the <see cref="Overload:System.Runtime.Caching.ObjectCache.Add" /> method is called.</span></span></param>
        <param name="regionName"><span data-ttu-id="d6a8a-132">可选。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-132">Optional.</span></span> <span data-ttu-id="d6a8a-133">缓存中的一个可用来添加缓存项的命名区域（如果实现了区域）。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-133">A named region in the cache to which the cache entry can be added, if regions are implemented.</span></span> <span data-ttu-id="d6a8a-134">由于在 .NET Framework 4 中未实现区域，因此默认值为 <see langword="null" /> 。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-134">Because regions are not implemented in .NET Framework 4, the default value is <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d6a8a-135">在派生类中重写时，向缓存中插入缓存项，而不会覆盖任何现有的缓存项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-135">When overridden in a derived class, inserts a cache entry into the cache without overwriting any existing cache entry.</span></span></summary>
        <returns><span data-ttu-id="d6a8a-136">如果插入成功，则为 <see langword="true" />；如果缓存中已存在具有与 <paramref name="key" /> 相同的键的项，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-136"><see langword="true" /> if insertion succeeded, or <see langword="false" /> if there is an already an entry in the cache that has the same key as <paramref name="key" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-137"><xref:System.Runtime.Caching.ObjectCache.Add%2A>方法重载是虚 (不是类的抽象) <xref:System.Runtime.Caching.ObjectCache> ，因为方法在 <xref:System.Runtime.Caching.ObjectCache.Add%2A> 内部调用 <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> 。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-137">The <xref:System.Runtime.Caching.ObjectCache.Add%2A> method overloads are virtual (not abstract) on the <xref:System.Runtime.Caching.ObjectCache> class, because the <xref:System.Runtime.Caching.ObjectCache.Add%2A> method internally calls <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A>.</span></span> <span data-ttu-id="d6a8a-138">这会减少缓存实施者必须提供的方法重载的数量。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-138">This reduces the number of method overloads that a cache implementer has to provide.</span></span> <span data-ttu-id="d6a8a-139">如果缓存实现不需要方法的任何特殊行为 <xref:System.Runtime.Caching.ObjectCache.Add%2A> ，则可以仅实现 <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-139">If a cache implementation does not require any special behavior for the <xref:System.Runtime.Caching.ObjectCache.Add%2A> method, it can just implement the <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> method overloads.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual bool Add (string key, object value, System.Runtime.Caching.CacheItemPolicy policy, string regionName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Add(string key, object value, class System.Runtime.Caching.CacheItemPolicy policy, string regionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.Add(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, value As Object, policy As CacheItemPolicy, Optional regionName As String = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Add : string * obj * System.Runtime.Caching.CacheItemPolicy * string -&gt; bool&#xA;override this.Add : string * obj * System.Runtime.Caching.CacheItemPolicy * string -&gt; bool" Usage="objectCache.Add (key, value, policy, regionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="policy" Type="System.Runtime.Caching.CacheItemPolicy" />
        <Parameter Name="regionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="d6a8a-140">该缓存项的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-140">A unique identifier for the cache entry.</span></span></param>
        <param name="value"><span data-ttu-id="d6a8a-141">要插入的对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-141">The object to insert.</span></span></param>
        <param name="policy"><span data-ttu-id="d6a8a-142">一个包含该缓存项的逐出详细信息的对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-142">An object that contains eviction details for the cache entry.</span></span> <span data-ttu-id="d6a8a-143">此对象提供比简单绝对过期更多的逐出选项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-143">This object provides more options for eviction than a simple absolute expiration.</span></span></param>
        <param name="regionName"><span data-ttu-id="d6a8a-144">可选。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-144">Optional.</span></span> <span data-ttu-id="d6a8a-145">缓存中的一个可用来添加缓存项的命名区域（如果实现了区域）。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-145">A named region in the cache to which the cache entry can be added, if regions are implemented.</span></span> <span data-ttu-id="d6a8a-146">可选参数的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-146">The default value for the optional parameter is <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d6a8a-147">在派生类中重写时，向缓存中插入缓存项，同时指定有关如何逐出该项的信息。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-147">When overridden in a derived class, inserts a cache entry into the cache, specifying information about how the entry will be evicted.</span></span></summary>
        <returns><span data-ttu-id="d6a8a-148">如果尝试插入成功，则为 <see langword="true" />；如果缓存中已存在具有与 <paramref name="key" /> 相同的键的项，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-148"><see langword="true" /> if the insertion try succeeds, or <see langword="false" /> if there is an already an entry in the cache with the same key as <paramref name="key" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-149"><xref:System.Runtime.Caching.ObjectCache.Add%2A>方法重载是虚 (不是类的抽象) <xref:System.Runtime.Caching.ObjectCache> ，因为方法在 <xref:System.Runtime.Caching.ObjectCache.Add%2A> 内部调用 <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> 。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-149">The <xref:System.Runtime.Caching.ObjectCache.Add%2A> method overloads are virtual (not abstract) on the <xref:System.Runtime.Caching.ObjectCache> class, because the <xref:System.Runtime.Caching.ObjectCache.Add%2A> method internally calls <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A>.</span></span> <span data-ttu-id="d6a8a-150">这会减少缓存实施者必须提供的方法重载的数量。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-150">This reduces the number of method overloads that a cache implementer has to provide.</span></span> <span data-ttu-id="d6a8a-151">如果缓存实现不需要方法的任何特殊行为 <xref:System.Runtime.Caching.ObjectCache.Add%2A> ，则可以仅实现 <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-151">If a cache implementation does not require any special behavior for the <xref:System.Runtime.Caching.ObjectCache.Add%2A> method, it can just implement the <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> method overloads.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddOrGetExisting">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d6a8a-152">在派生类中重写时，尝试向缓存中插入缓存项，并返回具有匹配键的现有缓存项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-152">When overridden in a derived class, tries to insert a cache entry into the cache, and returns an existing cache entry with a matching key.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-153"><xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A>方法重载将条目插入到缓存中。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-153">The <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> method overloads insert an entry into the cache.</span></span> <span data-ttu-id="d6a8a-154">如果已存在具有匹配键的缓存项，则它们将返回现有的项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-154">If a cache entry with a matching key already exists, they return the existing entry.</span></span> <span data-ttu-id="d6a8a-155">缓存项可以是 <xref:System.Runtime.Caching.CacheItem> 对象或泛型对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-155">The cache entry can be a <xref:System.Runtime.Caching.CacheItem> object or a generic object.</span></span>  
  
 <span data-ttu-id="d6a8a-156">重载和重载之间存在一种差异 <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> <xref:System.Runtime.Caching.ObjectCache.Add%2A> 。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-156">There is one difference between the <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> overloads and the <xref:System.Runtime.Caching.ObjectCache.Add%2A> overloads.</span></span> <span data-ttu-id="d6a8a-157">当这些重载方法尝试插入缓存项时，如果找到的现有项具有与现有插入的缓存项匹配的键，则 <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> 重载返回现有缓存项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-157">When these overloaded methods try to insert a cache entry, if an existing entry is found that has a key that matches an existing inserted cache entry, the <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%2A> overloads return the existing cache entry.</span></span> <span data-ttu-id="d6a8a-158"><xref:System.Runtime.Caching.ObjectCache.Add%2A>重载不会。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-158">The <xref:System.Runtime.Caching.ObjectCache.Add%2A> overloads do not.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddOrGetExisting">
      <MemberSignature Language="C#" Value="public abstract System.Runtime.Caching.CacheItem AddOrGetExisting (System.Runtime.Caching.CacheItem value, System.Runtime.Caching.CacheItemPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Caching.CacheItem AddOrGetExisting(class System.Runtime.Caching.CacheItem value, class System.Runtime.Caching.CacheItemPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.AddOrGetExisting(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AddOrGetExisting (value As CacheItem, policy As CacheItemPolicy) As CacheItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Runtime::Caching::CacheItem ^ AddOrGetExisting(System::Runtime::Caching::CacheItem ^ value, System::Runtime::Caching::CacheItemPolicy ^ policy);" />
      <MemberSignature Language="F#" Value="abstract member AddOrGetExisting : System.Runtime.Caching.CacheItem * System.Runtime.Caching.CacheItemPolicy -&gt; System.Runtime.Caching.CacheItem" Usage="objectCache.AddOrGetExisting (value, policy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Caching.CacheItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Runtime.Caching.CacheItem" />
        <Parameter Name="policy" Type="System.Runtime.Caching.CacheItemPolicy" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="d6a8a-159">要插入的对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-159">The object to insert.</span></span></param>
        <param name="policy"><span data-ttu-id="d6a8a-160">一个包含该缓存项的逐出详细信息的对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-160">An object that contains eviction details for the cache entry.</span></span> <span data-ttu-id="d6a8a-161">此对象提供比简单绝对过期更多的逐出选项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-161">This object provides more options for eviction than a simple absolute expiration.</span></span></param>
        <summary><span data-ttu-id="d6a8a-162">在派生类中重写时，向缓存中插入指定的 <see cref="T:System.Runtime.Caching.CacheItem" /> 对象，同时指定有关如何逐出该项的信息。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-162">When overridden in a derived class, inserts the specified <see cref="T:System.Runtime.Caching.CacheItem" /> object into the cache, specifying information about how the entry will be evicted.</span></span></summary>
        <returns><span data-ttu-id="d6a8a-163">如果存在具有相同键的缓存项，则为指定的缓存项；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-163">If a cache entry with the same key exists, the specified cache entry; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOrGetExisting">
      <MemberSignature Language="C#" Value="public abstract object AddOrGetExisting (string key, object value, DateTimeOffset absoluteExpiration, string regionName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddOrGetExisting(string key, object value, valuetype System.DateTimeOffset absoluteExpiration, string regionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.AddOrGetExisting(System.String,System.Object,System.DateTimeOffset,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AddOrGetExisting (key As String, value As Object, absoluteExpiration As DateTimeOffset, Optional regionName As String = Nothing) As Object" />
      <MemberSignature Language="F#" Value="abstract member AddOrGetExisting : string * obj * DateTimeOffset * string -&gt; obj" Usage="objectCache.AddOrGetExisting (key, value, absoluteExpiration, regionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="absoluteExpiration" Type="System.DateTimeOffset" />
        <Parameter Name="regionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="d6a8a-164">该缓存项的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-164">A unique identifier for the cache entry.</span></span></param>
        <param name="value"><span data-ttu-id="d6a8a-165">要插入的对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-165">The object to insert.</span></span></param>
        <param name="absoluteExpiration"><span data-ttu-id="d6a8a-166">缓存项的固定的过期日期和时间。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-166">The fixed date and time at which the cache entry will expire.</span></span></param>
        <param name="regionName"><span data-ttu-id="d6a8a-167">可选。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-167">Optional.</span></span> <span data-ttu-id="d6a8a-168">缓存中的一个可用来添加缓存项的命名区域（如果实现了区域）。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-168">A named region in the cache to which the cache entry can be added, if regions are implemented.</span></span> <span data-ttu-id="d6a8a-169">可选参数的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-169">The default value for the optional parameter is <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d6a8a-170">在派生类中重写时，通过使用键、表示缓存项的对象、绝对过期值和要添加缓存的可选区域，向缓存中插入缓存项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-170">When overridden in a derived class, inserts a cache entry into the cache, by using a key, an object for the cache entry, an absolute expiration value, and an optional region to add the cache into.</span></span></summary>
        <returns><span data-ttu-id="d6a8a-171">如果存在具有相同键的缓存项，则为指定缓存项的值；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-171">If a cache entry with the same key exists, the specified cache entry's value; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-172">此 <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%28System.String%2CSystem.Object%2CSystem.DateTimeOffset%2CSystem.String%29> 方法重载返回对象值，而不是 <xref:System.Runtime.Caching.CacheItem> 对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-172">This <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%28System.String%2CSystem.Object%2CSystem.DateTimeOffset%2CSystem.String%29> method overload returns an object value, not a <xref:System.Runtime.Caching.CacheItem> object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOrGetExisting">
      <MemberSignature Language="C#" Value="public abstract object AddOrGetExisting (string key, object value, System.Runtime.Caching.CacheItemPolicy policy, string regionName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddOrGetExisting(string key, object value, class System.Runtime.Caching.CacheItemPolicy policy, string regionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.AddOrGetExisting(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function AddOrGetExisting (key As String, value As Object, policy As CacheItemPolicy, Optional regionName As String = Nothing) As Object" />
      <MemberSignature Language="F#" Value="abstract member AddOrGetExisting : string * obj * System.Runtime.Caching.CacheItemPolicy * string -&gt; obj" Usage="objectCache.AddOrGetExisting (key, value, policy, regionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="policy" Type="System.Runtime.Caching.CacheItemPolicy" />
        <Parameter Name="regionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="d6a8a-173">该缓存项的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-173">A unique identifier for the cache entry.</span></span></param>
        <param name="value"><span data-ttu-id="d6a8a-174">要插入的对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-174">The object to insert.</span></span></param>
        <param name="policy"><span data-ttu-id="d6a8a-175">一个包含该缓存项的逐出详细信息的对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-175">An object that contains eviction details for the cache entry.</span></span> <span data-ttu-id="d6a8a-176">此对象提供比简单绝对过期更多的逐出选项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-176">This object provides more options for eviction than a simple absolute expiration.</span></span></param>
        <param name="regionName"><span data-ttu-id="d6a8a-177">可选。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-177">Optional.</span></span> <span data-ttu-id="d6a8a-178">缓存中的一个可用来添加缓存项的命名区域（如果实现了区域）。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-178">A named region in the cache to which the cache entry can be added, if regions are implemented.</span></span> <span data-ttu-id="d6a8a-179">可选参数的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-179">The default value for the optional parameter is <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d6a8a-180">在派生类中重写时，向缓存中插入缓存项，并指定该缓存项的键和值以及有关如何逐出该项的信息。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-180">When overridden in a derived class, inserts a cache entry into the cache, specifying a key and a value for the cache entry, and information about how the entry will be evicted.</span></span></summary>
        <returns><span data-ttu-id="d6a8a-181">如果存在具有相同键的缓存项，则为指定缓存项的值；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-181">If a cache entry with the same key exists, the specified cache entry's value; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-182"><xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%28System.String%2CSystem.Object%2CSystem.Runtime.Caching.CacheItemPolicy%2CSystem.String%29>方法返回对象值，而不是 <xref:System.Runtime.Caching.CacheItem> 对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-182">The <xref:System.Runtime.Caching.ObjectCache.AddOrGetExisting%28System.String%2CSystem.Object%2CSystem.Runtime.Caching.CacheItemPolicy%2CSystem.String%29> method returns an object value, not a <xref:System.Runtime.Caching.CacheItem> object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public abstract bool Contains (string key, string regionName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(string key, string regionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.Contains(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Contains (key As String, Optional regionName As String = Nothing) As Boolean" />
      <MemberSignature Language="F#" Value="abstract member Contains : string * string -&gt; bool" Usage="objectCache.Contains (key, regionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="regionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="d6a8a-183">该缓存项的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-183">A unique identifier for the cache entry.</span></span></param>
        <param name="regionName"><span data-ttu-id="d6a8a-184">可选。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-184">Optional.</span></span> <span data-ttu-id="d6a8a-185">缓存中包含该缓存项的命名区域（如果实现了区域）。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-185">A named region in the cache where the cache can be found, if regions are implemented.</span></span> <span data-ttu-id="d6a8a-186">可选参数的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-186">The default value for the optional parameter is <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d6a8a-187">在派生类中重写时，检查缓存中是否已存在该缓存项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-187">When overridden in a derived class, checks whether the cache entry already exists in the cache.</span></span></summary>
        <returns><span data-ttu-id="d6a8a-188">如果缓存中包含具有与 <paramref name="key" /> 相同的键值的缓存项，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-188"><see langword="true" /> if the cache contains a cache entry with the same key value as <paramref name="key" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCacheEntryChangeMonitor">
      <MemberSignature Language="C#" Value="public abstract System.Runtime.Caching.CacheEntryChangeMonitor CreateCacheEntryChangeMonitor (System.Collections.Generic.IEnumerable&lt;string&gt; keys, string regionName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Caching.CacheEntryChangeMonitor CreateCacheEntryChangeMonitor(class System.Collections.Generic.IEnumerable`1&lt;string&gt; keys, string regionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.CreateCacheEntryChangeMonitor(System.Collections.Generic.IEnumerable{System.String},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateCacheEntryChangeMonitor (keys As IEnumerable(Of String), Optional regionName As String = Nothing) As CacheEntryChangeMonitor" />
      <MemberSignature Language="F#" Value="abstract member CreateCacheEntryChangeMonitor : seq&lt;string&gt; * string -&gt; System.Runtime.Caching.CacheEntryChangeMonitor" Usage="objectCache.CreateCacheEntryChangeMonitor (keys, regionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Caching.CacheEntryChangeMonitor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="regionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys"><span data-ttu-id="d6a8a-189">要监视的缓存项的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-189">The unique identifiers for cache entries to monitor.</span></span></param>
        <param name="regionName"><span data-ttu-id="d6a8a-190">可选。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-190">Optional.</span></span> <span data-ttu-id="d6a8a-191">缓存中包含 <paramref name="keys" /> 参数中的缓存键的命名区域（如果实现了区域）。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-191">A named region in the cache where the cache keys in the <paramref name="keys" /> parameter exist, if regions are implemented.</span></span> <span data-ttu-id="d6a8a-192">可选参数的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-192">The default value for the optional parameter is <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d6a8a-193">在派生类中重写时，创建一个 <see cref="T:System.Runtime.Caching.CacheEntryChangeMonitor" /> 对象，该对象可触发事件以响应对指定缓存项的更改。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-193">When overridden in a derived class, creates a <see cref="T:System.Runtime.Caching.CacheEntryChangeMonitor" /> object that can trigger events in response to changes to specified cache entries.</span></span></summary>
        <returns><span data-ttu-id="d6a8a-194">用于监视缓存中的缓存项的更改监视器。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-194">A change monitor that monitors cache entries in the cache.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-195">当派生 <xref:System.Runtime.Caching.ObjectCache> 类重写基 <xref:System.Runtime.Caching.ObjectCache.CreateCacheEntryChangeMonitor%2A> 方法时，缓存实现必须创建 <xref:System.Runtime.Caching.CacheEntryChangeMonitor> 对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-195">When a derived <xref:System.Runtime.Caching.ObjectCache> class overrides the base <xref:System.Runtime.Caching.ObjectCache.CreateCacheEntryChangeMonitor%2A> method, the cache implementation must create a <xref:System.Runtime.Caching.CacheEntryChangeMonitor> object.</span></span> <span data-ttu-id="d6a8a-196">当参数中指定的缓存项发生更改时，此专用更改监视器会通知调用方 `keys` 。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-196">This specialized change monitor notifies callers when there are changes to the cache entries that are specified in the `keys` parameter.</span></span> <span data-ttu-id="d6a8a-197">例如，如果 `keys` 从缓存中更新或删除了参数中的监视项，则此方法创建的更改监视器会触发一个事件。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-197">For example, if a monitored item in the `keys` parameter is updated or removed from the cache, the change monitor created by this method triggers an event.</span></span>  
  
 <span data-ttu-id="d6a8a-198">如果缓存实现支持命名缓存区域，则可以将字符串值指定为 `regionName` 参数。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-198">If a cache implementation supports named cache regions, a string value can be specified as the `regionName` parameter.</span></span> <span data-ttu-id="d6a8a-199">否则，参数默认为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-199">Otherwise, the parameter defaults to `null`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d6a8a-200">并非所有缓存实现都支持缓存输入更改监视器。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-200">Not all cache implementations support cache-entry change monitors.</span></span> <span data-ttu-id="d6a8a-201">若要确定缓存实现是否支持 <xref:System.Runtime.Caching.CacheEntryChangeMonitor> 对象，请参阅特定缓存实现的文档。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-201">To determine whether your cache implementation supports <xref:System.Runtime.Caching.CacheEntryChangeMonitor> objects, see the documentation for the specific cache implementation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultCacheCapabilities">
      <MemberSignature Language="C#" Value="public abstract System.Runtime.Caching.DefaultCacheCapabilities DefaultCacheCapabilities { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.Caching.DefaultCacheCapabilities DefaultCacheCapabilities" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ObjectCache.DefaultCacheCapabilities" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DefaultCacheCapabilities As DefaultCacheCapabilities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Runtime::Caching::DefaultCacheCapabilities DefaultCacheCapabilities { System::Runtime::Caching::DefaultCacheCapabilities get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultCacheCapabilities : System.Runtime.Caching.DefaultCacheCapabilities" Usage="System.Runtime.Caching.ObjectCache.DefaultCacheCapabilities" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Caching.DefaultCacheCapabilities</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d6a8a-202">在派生类中重写时，获取缓存实现所提供的功能的说明。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-202">When overridden in a derived class, gets a description of the features that a cache implementation provides.</span></span></summary>
        <value><span data-ttu-id="d6a8a-203">标志的按位组合，这些标志指示缓存实现的默认功能。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-203">A bitwise combination of flags that indicate the default capabilities of a cache implementation.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public abstract object Get (string key, string regionName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Get(string key, string regionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.Get(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Get (key As String, Optional regionName As String = Nothing) As Object" />
      <MemberSignature Language="F#" Value="abstract member Get : string * string -&gt; obj" Usage="objectCache.Get (key, regionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="regionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="d6a8a-204">要获取的缓存项的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-204">A unique identifier for the cache entry to get.</span></span></param>
        <param name="regionName"><span data-ttu-id="d6a8a-205">可选。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-205">Optional.</span></span> <span data-ttu-id="d6a8a-206">缓存中添加了缓存项的命名区域（如果实现了区域）。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-206">A named region in the cache to which the cache entry was added, if regions are implemented.</span></span> <span data-ttu-id="d6a8a-207">可选参数的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-207">The default value for the optional parameter is <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d6a8a-208">在派生类中重写时，以对象的形式获取缓存中的指定缓存项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-208">When overridden in a derived class, gets the specified cache entry from the cache as an object.</span></span></summary>
        <returns><span data-ttu-id="d6a8a-209">由 <paramref name="key" /> 标识的缓存项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-209">The cache entry that is identified by <paramref name="key" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCacheItem">
      <MemberSignature Language="C#" Value="public abstract System.Runtime.Caching.CacheItem GetCacheItem (string key, string regionName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Runtime.Caching.CacheItem GetCacheItem(string key, string regionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.GetCacheItem(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCacheItem (key As String, Optional regionName As String = Nothing) As CacheItem" />
      <MemberSignature Language="F#" Value="abstract member GetCacheItem : string * string -&gt; System.Runtime.Caching.CacheItem" Usage="objectCache.GetCacheItem (key, regionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Caching.CacheItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="regionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="d6a8a-210">要获取的缓存项的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-210">A unique identifier for the cache entry to get.</span></span></param>
        <param name="regionName"><span data-ttu-id="d6a8a-211">可选。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-211">Optional.</span></span> <span data-ttu-id="d6a8a-212">缓存中添加了缓存项的命名区域（如果实现了区域）。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-212">A named region in the cache to which the cache was added, if regions are implemented.</span></span> <span data-ttu-id="d6a8a-213">由于未在 .NET Framework 4 中实现区域，因此默认值为 <see langword="null" /> 。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-213">Because regions are not implemented in .NET Framework 4, the default is <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d6a8a-214">在派生类中重写时，以 <see cref="T:System.Runtime.Caching.CacheItem" /> 实例的形式获取缓存中的指定缓存项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-214">When overridden in a derived class, gets the specified cache entry from the cache as a <see cref="T:System.Runtime.Caching.CacheItem" /> instance.</span></span></summary>
        <returns><span data-ttu-id="d6a8a-215">由 <paramref name="key" /> 标识的缓存项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-215">The cache entry that is identified by <paramref name="key" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-216">此方法重载存在，因为某些缓存实现可能会扩展 <xref:System.Runtime.Caching.CacheItem> 该类。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-216">This method overload exists because some cache implementations might extend the <xref:System.Runtime.Caching.CacheItem> class.</span></span> <span data-ttu-id="d6a8a-217">在这种情况下， <xref:System.Runtime.Caching.ObjectCache.Get%28System.String%2CSystem.String%29> 方法重载不一定会返回有关缓存数据的所有信息。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-217">In that case, the <xref:System.Runtime.Caching.ObjectCache.Get%28System.String%2CSystem.String%29> method overload will not necessarily return all the information about cached data.</span></span> <span data-ttu-id="d6a8a-218">但是， <xref:System.Runtime.Caching.ObjectCache.GetCacheItem%28System.String%2CSystem.String%29> 方法重载使自定义缓存能够返回的不仅仅是缓存值。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-218">However, the <xref:System.Runtime.Caching.ObjectCache.GetCacheItem%28System.String%2CSystem.String%29> method overload enables custom caches to return more than just the cache value.</span></span>  
  
 <span data-ttu-id="d6a8a-219"><xref:System.Runtime.Caching.ObjectCache.GetCacheItem%28System.String%2CSystem.String%29>方法与 <xref:System.Runtime.Caching.ObjectCache.Get%28System.String%2CSystem.String%29> 方法类似，不同之处在于 <xref:System.Runtime.Caching.ObjectCache.GetCacheItem%28System.String%2CSystem.String%29> 方法返回将缓存项作为 <xref:System.Runtime.Caching.CacheItem> 实例返回。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-219">The <xref:System.Runtime.Caching.ObjectCache.GetCacheItem%28System.String%2CSystem.String%29> method is like the <xref:System.Runtime.Caching.ObjectCache.Get%28System.String%2CSystem.String%29> method, except that the <xref:System.Runtime.Caching.ObjectCache.GetCacheItem%28System.String%2CSystem.String%29> method returns return the cache entry as a <xref:System.Runtime.Caching.CacheItem> instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCount">
      <MemberSignature Language="C#" Value="public abstract long GetCount (string regionName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 GetCount(string regionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.GetCount(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetCount (Optional regionName As String = Nothing) As Long" />
      <MemberSignature Language="F#" Value="abstract member GetCount : string -&gt; int64" Usage="objectCache.GetCount regionName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="regionName"><span data-ttu-id="d6a8a-220">可选。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-220">Optional.</span></span> <span data-ttu-id="d6a8a-221">缓存中应计算其缓存项数的命名区域（如果实现了区域）。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-221">A named region in the cache for which the cache entry count should be computed, if regions are implemented.</span></span> <span data-ttu-id="d6a8a-222">可选参数的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-222">The default value for the optional parameter is <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d6a8a-223">在派生类中重写时，获取缓存中的缓存项总数。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-223">When overridden in a derived class, gets the total number of cache entries in the cache.</span></span></summary>
        <returns><span data-ttu-id="d6a8a-224">缓存中的缓存项数。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-224">The number of cache entries in the cache.</span></span> <span data-ttu-id="d6a8a-225">如果 <paramref name="regionName" /> 不为 <see langword="null" />，则计数指示指定的缓存区域中的项数。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-225">If <paramref name="regionName" /> is not <see langword="null" />, the count indicates the number of entries that are in the specified cache region.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="protected abstract System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt;" Usage="objectCache.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d6a8a-226">在派生类中重写时，创建可用于循环访问缓存项的集合的枚举器。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-226">When overridden in a derived class, creates an enumerator that can be used to iterate through a collection of cache entries.</span></span></summary>
        <returns><span data-ttu-id="d6a8a-227">可提供对缓存中的缓存项进行访问的枚举器对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-227">The enumerator object that provides access to the cache entries in the cache.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-228">缓存实施者可以重写和扩展此方法，以提供一种循环访问缓存条目集合的自定义方法。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-228">Cache implementers can override and extend this method to provide a custom means of iterating through a collection of cache entries.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d6a8a-229">返回枚举器通常比返回整个缓存条目更昂贵。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-229">Returning an enumerator is typically a more expensive operation than returning the entire cache entry.</span></span>  
  
 <span data-ttu-id="d6a8a-230">此方法由 <xref:System.Runtime.Caching.ObjectCache> 类对和方法的显式接口实现调用 <xref:System.Collections.IEnumerable.GetEnumerator%2A> <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> 。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-230">This method is called by the explicit interface implementations that the <xref:System.Runtime.Caching.ObjectCache> class has for the <xref:System.Collections.IEnumerable.GetEnumerator%2A> and <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetValues">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d6a8a-231">获取一组缓存项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-231">Gets a set of cache entries.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetValues">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IDictionary&lt;string,object&gt; GetValues (System.Collections.Generic.IEnumerable&lt;string&gt; keys, string regionName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; GetValues(class System.Collections.Generic.IEnumerable`1&lt;string&gt; keys, string regionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.GetValues(System.Collections.Generic.IEnumerable{System.String},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetValues (keys As IEnumerable(Of String), Optional regionName As String = Nothing) As IDictionary(Of String, Object)" />
      <MemberSignature Language="F#" Value="abstract member GetValues : seq&lt;string&gt; * string -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="objectCache.GetValues (keys, regionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        <Parameter Name="regionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys"><span data-ttu-id="d6a8a-232">要获取的缓存项的唯一标识符集合。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-232">A collection of unique identifiers for the cache entries to get.</span></span></param>
        <param name="regionName"><span data-ttu-id="d6a8a-233">可选。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-233">Optional.</span></span> <span data-ttu-id="d6a8a-234">缓存中添加了一个或多个缓存项的命名区域（如果实现了区域）。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-234">A named region in the cache to which the cache entry or entries were added, if regions are implemented.</span></span> <span data-ttu-id="d6a8a-235">可选参数的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-235">The default value for the optional parameter is <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d6a8a-236">在派生类中重写时，获取与指定键对应的一组缓存项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-236">When overridden in a derived class, gets a set of cache entries that correspond to the specified keys.</span></span></summary>
        <returns><span data-ttu-id="d6a8a-237">一个表示缓存项的键/值对字典。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-237">A dictionary of key/value pairs that represent cache entries.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-238"><xref:System.Runtime.Caching.ObjectCache.GetValues%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.String%29>方法重载是支持在单个网络调用期间从缓存中提取多个缓存条目的分布式缓存的性能优化。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-238">The <xref:System.Runtime.Caching.ObjectCache.GetValues%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.String%29> method overload is a performance optimization for distributed caches that support fetching multiple cache entries from the cache during a single network call.</span></span>  
  
 <span data-ttu-id="d6a8a-239">尽管调用方可以将一个或多个键传递给方法，但并不保证所有键都表示缓存中的项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-239">Although a caller can pass one or more keys to the method, there is no guarantee that all keys represent entries in the cache.</span></span> <span data-ttu-id="d6a8a-240">因此，返回的字典中包含的项可能会少于传递到该方法的键数。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-240">Therefore, the returned dictionary might contain fewer items than the number of keys that were passed to the method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValues">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IDictionary&lt;string,object&gt; GetValues (string regionName, params string[] keys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; GetValues(string regionName, string[] keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.GetValues(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValues (regionName As String, ParamArray keys As String()) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ GetValues(System::String ^ regionName, ... cli::array &lt;System::String ^&gt; ^ keys);" />
      <MemberSignature Language="F#" Value="abstract member GetValues : string * string[] -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;&#xA;override this.GetValues : string * string[] -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="objectCache.GetValues (regionName, keys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="regionName" Type="System.String" />
        <Parameter Name="keys" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-2.1">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="regionName"><span data-ttu-id="d6a8a-241">可选。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-241">Optional.</span></span> <span data-ttu-id="d6a8a-242">缓存中添加了一个或多个缓存项的命名区域（如果实现了区域）。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-242">A named region in the cache to which the cache entry or entries were added, if regions are implemented.</span></span> <span data-ttu-id="d6a8a-243">由于未在 .NET Framework 4 中实现区域，因此默认值为 <see langword="null" /> 。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-243">Because regions are not implemented in .NET Framework 4, the default is <see langword="null" />.</span></span></param>
        <param name="keys"><span data-ttu-id="d6a8a-244">要获取的缓存项的唯一标识符集合。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-244">A collection of unique identifiers for the cache entries to get.</span></span></param>
        <summary><span data-ttu-id="d6a8a-245">获取与指定的键对应的一组缓存项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-245">Gets a set of cache entries that correspond to the specified keys.</span></span></summary>
        <returns><span data-ttu-id="d6a8a-246">一个表示缓存项的键/值对字典。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-246">A dictionary of key/value pairs that represent cache entries.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-247"><xref:System.Runtime.Caching.ObjectCache.GetValues%2A?displayProperty=nameWithType>方法重载类似于 <xref:System.Runtime.Caching.ObjectCache.GetValues%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.String%29> 方法重载，但允许你通过使用托管语言（如 c #）所支持的可选参数语法来传递命名区域。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-247">The <xref:System.Runtime.Caching.ObjectCache.GetValues%2A?displayProperty=nameWithType> method overload is like the <xref:System.Runtime.Caching.ObjectCache.GetValues%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.String%29> method overload, but lets you pass the named region by using optional parameter syntax that is supported by managed languages such as C#.</span></span>  
  
 <span data-ttu-id="d6a8a-248">此方法是一个虚拟方法，因为 <xref:System.Runtime.Caching.ObjectCache> 该类提供将 `params` 数组传递给方法重载的默认实现 <xref:System.Runtime.Caching.ObjectCache.GetValues%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.String%29> 。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-248">This method is a virtual method because the <xref:System.Runtime.Caching.ObjectCache> class provides a default implementation that passes the `params` array to the <xref:System.Runtime.Caching.ObjectCache.GetValues%28System.Collections.Generic.IEnumerable%7BSystem.String%7D%2CSystem.String%29> method overload.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Host">
      <MemberSignature Language="C#" Value="public static IServiceProvider Host { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IServiceProvider Host" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ObjectCache.Host" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Host As IServiceProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property IServiceProvider ^ Host { IServiceProvider ^ get(); void set(IServiceProvider ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Host : IServiceProvider with get, set" Usage="System.Runtime.Caching.ObjectCache.Host" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[get: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[set: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IServiceProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d6a8a-249">获取或设置对托管宿主环境的引用，该环境可用于 <see cref="T:System.Runtime.Caching.ObjectCache" /> 实现并且可为 <see cref="T:System.Runtime.Caching.ObjectCache" /> 实现提供宿主特定服务。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-249">Gets or sets a reference to a managed hosting environment that is available to <see cref="T:System.Runtime.Caching.ObjectCache" /> implementations and that can provide host-specific services to <see cref="T:System.Runtime.Caching.ObjectCache" /> implementations.</span></span></summary>
        <value><span data-ttu-id="d6a8a-250">对缓存识别托管宿主环境的引用。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-250">A reference to a cache-aware managed hosting environment.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-251"><xref:System.Runtime.Caching.ObjectCache.Host%2A>属性旨在由 .NET Framework 主机环境和实现依赖于 .NET Framework 主机环境的行为的缓存实现使用。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-251">The <xref:System.Runtime.Caching.ObjectCache.Host%2A> property is intended for use by .NET Framework host environments and by cache implementations that implement behavior that depends on the .NET Framework host environment.</span></span>  
  
 <span data-ttu-id="d6a8a-252">下表列出了一组主机环境服务，在托管宿主环境中可以使用这些服务，并可 <xref:System.Runtime.Caching.ObjectCache> 通过属性实现这些服务 <xref:System.Runtime.Caching.ObjectCache.Host%2A> ：</span><span class="sxs-lookup"><span data-stu-id="d6a8a-252">The following table lists the set of host environment services that might be available from a managed hosting environment and that are available to <xref:System.Runtime.Caching.ObjectCache> implementations through the <xref:System.Runtime.Caching.ObjectCache.Host%2A> property:</span></span>  
  
|<span data-ttu-id="d6a8a-253">服务</span><span class="sxs-lookup"><span data-stu-id="d6a8a-253">Service</span></span>|<span data-ttu-id="d6a8a-254">说明</span><span class="sxs-lookup"><span data-stu-id="d6a8a-254">Description</span></span>|  
|-------------|-----------------|  
|<xref:System.Runtime.Caching.Hosting.IApplicationIdentifier>|<span data-ttu-id="d6a8a-255">允许主机环境提供应用程序域标识符，这些标识符可能需要缓存实现的功能，如识别性能计数器。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-255">Lets host environments provide application domain identifiers that might be needed by a cache implementation for features such as identifying performance counters.</span></span>|  
|<xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem>|<span data-ttu-id="d6a8a-256">允许主机环境提供自定义文件更改通知系统，而不是使用 .NET Framework 中提供的通知系统。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-256">Lets host environments provide a custom file-change notification system, instead of using the one provided in the .NET Framework.</span></span>|  
|<xref:System.Runtime.Caching.Hosting.IMemoryCacheManager>|<span data-ttu-id="d6a8a-257">允许缓存实现报告主机环境的缓存内存消耗。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-257">Lets cache implementations report cache memory consumption to the host environment.</span></span> <span data-ttu-id="d6a8a-258">这使主机环境能够跨多个缓存实现集中管理内存消耗。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-258">This enables host environments to centrally manage memory consumption across multiple cache implementations.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="d6a8a-259">此属性值的调用方需要无限制的代码访问安全权限。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-259">Callers of this property value require unrestricted code access security permissions.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d6a8a-260">为属性分配的值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-260">The value being assigned to the property is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="d6a8a-261">已尝试多次设置该属性值。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-261">An attempt was made to set the property value more than one time.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InfiniteAbsoluteExpiration">
      <MemberSignature Language="C#" Value="public static readonly DateTimeOffset InfiniteAbsoluteExpiration;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.DateTimeOffset InfiniteAbsoluteExpiration" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InfiniteAbsoluteExpiration As DateTimeOffset " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly DateTimeOffset InfiniteAbsoluteExpiration;" />
      <MemberSignature Language="F#" Value=" staticval mutable InfiniteAbsoluteExpiration : DateTimeOffset" Usage="System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d6a8a-262">获取一个值，该值指示某个缓存项没有绝对过期。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-262">Gets a value that indicates that a cache entry has no absolute expiration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-263">插入缓存且 <xref:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration> 字段值设置为过期值的缓存条目永远不会基于绝对时间点过期。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-263">A cache entry that is inserted into the cache with the <xref:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration> field value set as the expiration value should never expire based on an absolute point in time.</span></span> <span data-ttu-id="d6a8a-264">但是，具有此设置的缓存条目可以从缓存中逐出，原因可能由特定的缓存实现确定，如内存压力导致的更改监视器事件逐出。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-264">However, a cache entry with this setting can be evicted from the cache for other reasons that are determined by a particular cache implementation, such as a change-monitor event eviction caused by memory pressure.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public abstract object this[string key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ObjectCache.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public MustOverride Property Item(key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ key); void set(System::String ^ key, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj with get, set" Usage="System.Runtime.Caching.ObjectCache.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="d6a8a-265">缓存中的缓存项的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-265">A unique identifier for a cache entry in the cache.</span></span></param>
        <summary><span data-ttu-id="d6a8a-266">获取或设置 <see cref="T:System.Runtime.Caching.ObjectCache" /> 类的默认索引器。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-266">Gets or sets the default indexer for the <see cref="T:System.Runtime.Caching.ObjectCache" /> class.</span></span></summary>
        <value><span data-ttu-id="d6a8a-267">用作该缓存实例的索引器的键。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-267">A key that serves as an indexer into the cache instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-268">此属性的 set 访问器的行为类似于 <xref:System.Runtime.Caching.MemoryCache.Set%28System.String%2CSystem.Object%2CSystem.DateTimeOffset%2CSystem.String%29> 方法。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-268">The behavior of the set accessor of this property is like the <xref:System.Runtime.Caching.MemoryCache.Set%28System.String%2CSystem.Object%2CSystem.DateTimeOffset%2CSystem.String%29> method.</span></span> <span data-ttu-id="d6a8a-269">在内部，缓存实现可以将指定值的绝对过期设置为 <xref:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration> 方法。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-269">Internally, a cache implementation could set the absolute expiration of the specified value to the <xref:System.Runtime.Caching.ObjectCache.InfiniteAbsoluteExpiration> method.</span></span> <span data-ttu-id="d6a8a-270">但是，这种行为最终由缓存实现导致。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-270">However this behavior is ultimately up to the cache implementation.</span></span>  
  
 <span data-ttu-id="d6a8a-271">Get 访问器的行为类似于调用 <xref:System.Collections.Specialized.NameValueCollection.Get%28System.String%29> 方法并使用 `null` 作为区域名称。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-271">The behavior of get accessor is like calling the <xref:System.Collections.Specialized.NameValueCollection.Get%28System.String%29> method and using `null` for the region name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ObjectCache.Name" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Runtime.Caching.ObjectCache.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d6a8a-272">获取某个特定 <see cref="T:System.Runtime.Caching.ObjectCache" /> 实例的名称。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-272">Gets the name of a specific <see cref="T:System.Runtime.Caching.ObjectCache" /> instance.</span></span></summary>
        <value><span data-ttu-id="d6a8a-273">某个特定缓存实例的名称。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-273">The name of a specific cache instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-274">某些缓存实现可能支持在单个应用程序中运行的多个缓存实例。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-274">Some cache implementations might support multiple instances of the cache that is running in a single application.</span></span> <span data-ttu-id="d6a8a-275">此属性允许缓存实现者返回标识特定缓存实例的名称。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-275">This property lets cache implementers return a name that identifies a specific cache instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NoSlidingExpiration">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan NoSlidingExpiration;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan NoSlidingExpiration" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.Caching.ObjectCache.NoSlidingExpiration" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly NoSlidingExpiration As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan NoSlidingExpiration;" />
      <MemberSignature Language="F#" Value=" staticval mutable NoSlidingExpiration : TimeSpan" Usage="System.Runtime.Caching.ObjectCache.NoSlidingExpiration" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="d6a8a-276">指示某个缓存项没有可调过期时间。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-276">Indicates that a cache entry has no sliding expiration time.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-277">基于持续时间或定义的时间段的过期也称为可调过期。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-277">Expiration that is based on duration or a defined window of time is also referred to as sliding expiration.</span></span> <span data-ttu-id="d6a8a-278">通常，逐出基于可调过期的项的缓存实现将删除指定时间段内未访问的项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-278">Normally, a cache implementation that evicts items that are based on sliding expiration will remove an item that has not been accessed in the specified window of time.</span></span>  
  
 <span data-ttu-id="d6a8a-279">插入缓存且 <xref:System.Runtime.Caching.ObjectCache.NoSlidingExpiration> 字段值设置为过期值的缓存条目永远不会逐出，因为滑动时间窗口中的非活动。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-279">A cache entry that is inserted into the cache with the <xref:System.Runtime.Caching.ObjectCache.NoSlidingExpiration> field value set as the expiration value should never be evicted because of non-activity in a sliding time window.</span></span> <span data-ttu-id="d6a8a-280">但是，如果缓存项具有绝对过期，或者发生了其他某个逐出事件（例如，更改监视器或内存压力），则可以将其逐出。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-280">However, a cache item can be evicted if it has an absolute expiration, or if some other eviction event occurs, such a change monitor or memory pressure.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public abstract object Remove (string key, string regionName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Remove(string key, string regionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.Remove(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Remove (key As String, Optional regionName As String = Nothing) As Object" />
      <MemberSignature Language="F#" Value="abstract member Remove : string * string -&gt; obj" Usage="objectCache.Remove (key, regionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="regionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="d6a8a-281">该缓存项的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-281">A unique identifier for the cache entry.</span></span></param>
        <param name="regionName"><span data-ttu-id="d6a8a-282">可选。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-282">Optional.</span></span> <span data-ttu-id="d6a8a-283">缓存中添加了缓存项的命名区域（如果实现了区域）。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-283">A named region in the cache to which the cache entry was added, if regions are implemented.</span></span> <span data-ttu-id="d6a8a-284">可选参数的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-284">The default value for the optional parameter is <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d6a8a-285">在派生类中重写时，从缓存中移除缓存项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-285">When overridden in a derived class, removes the cache entry from the cache.</span></span></summary>
        <returns><span data-ttu-id="d6a8a-286">一个对象，表示由该键指定的已移除缓存项的值；如果找不到指定的项，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-286">An object that represents the value of the removed cache entry that was specified by the key, or <see langword="null" /> if the specified entry was not found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-287">如果在自定义缓存实现中重写此方法，则在缓存中有一个对应于的缓存项 `key` ，则应返回已移除项的值。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-287">If you override this method in a custom cache implementation, if there is a cache entry in the cache that corresponds to `key`, the value of the removed item should be returned.</span></span> <span data-ttu-id="d6a8a-288">如果未从缓存中删除任何内容，则该方法应返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-288">If nothing was removed from the cache, the method should return `null`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d6a8a-289">某些分布式缓存实现可能不支持返回从缓存中删除的值。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-289">Some distributed cache implementations might not support the ability to return the value that was removed from the cache.</span></span> <span data-ttu-id="d6a8a-290">这可能是因为缓存实现不支持返回已移除缓存项的值。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-290">This might be because the cache implementation does not support returning the value of a removed cache item.</span></span> <span data-ttu-id="d6a8a-291">这也可能是由于将对象封送为返回值太昂贵。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-291">It might also be because marshaling the object as a return value is too expensive.</span></span> <span data-ttu-id="d6a8a-292">在这种情况下，缓存实现可以返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-292">In such cases, cache implementations can return `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Set">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d6a8a-293">在派生类中重写时，向缓存中插入缓存项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-293">When overridden in a derived class, inserts a cache entry into the cache.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-294">重载方法的典型行为 <xref:System.Runtime.Caching.ObjectCache.Set%2A> 是插入或更新操作。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-294">The typical behavior of the <xref:System.Runtime.Caching.ObjectCache.Set%2A> overload methods is an insert-or-update operation.</span></span> <span data-ttu-id="d6a8a-295">如果指定的项不存在，则会将缓存项作为新项插入，或者使用新值更新缓存项（如果已存在）。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-295">A cache entry is either inserted as a new entry if the specified entry does not exist, or the cache entry is updated with a new value if it already exists.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public abstract void Set (System.Runtime.Caching.CacheItem item, System.Runtime.Caching.CacheItemPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Set(class System.Runtime.Caching.CacheItem item, class System.Runtime.Caching.CacheItemPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.Set(System.Runtime.Caching.CacheItem,System.Runtime.Caching.CacheItemPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Set (item As CacheItem, policy As CacheItemPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Set(System::Runtime::Caching::CacheItem ^ item, System::Runtime::Caching::CacheItemPolicy ^ policy);" />
      <MemberSignature Language="F#" Value="abstract member Set : System.Runtime.Caching.CacheItem * System.Runtime.Caching.CacheItemPolicy -&gt; unit" Usage="objectCache.Set (item, policy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Runtime.Caching.CacheItem" />
        <Parameter Name="policy" Type="System.Runtime.Caching.CacheItemPolicy" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="d6a8a-296">要添加的缓存项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-296">The cache item to add.</span></span></param>
        <param name="policy"><span data-ttu-id="d6a8a-297">一个包含该缓存项的逐出详细信息的对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-297">An object that contains eviction details for the cache entry.</span></span> <span data-ttu-id="d6a8a-298">此对象提供比简单绝对过期更多的逐出选项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-298">This object provides more options for eviction than a simple absolute expiration.</span></span></param>
        <summary><span data-ttu-id="d6a8a-299">在派生类中重写时，以 <see cref="T:System.Runtime.Caching.CacheItem" /> 实例的形式向缓存中插入缓存项，同时指定有关如何逐出该项的信息。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-299">When overridden in a derived class, inserts the cache entry into the cache as a <see cref="T:System.Runtime.Caching.CacheItem" /> instance, specifying information about how the entry will be evicted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-300">如果的键 `item` 不存在， `item` 则将作为新的缓存项插入。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-300">If the key for `item` does not exist, `item` is inserted as a new cache entry.</span></span> <span data-ttu-id="d6a8a-301">如果具有匹配键的项 `item` 存在，则中的值 `item` 用于更新或覆盖现有缓存项的值。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-301">If an item with a key that matches `item` exists, the value from `item` is used to update or overwrite the value of the existing cache entry.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public abstract void Set (string key, object value, DateTimeOffset absoluteExpiration, string regionName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Set(string key, object value, valuetype System.DateTimeOffset absoluteExpiration, string regionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.Set(System.String,System.Object,System.DateTimeOffset,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Set (key As String, value As Object, absoluteExpiration As DateTimeOffset, Optional regionName As String = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member Set : string * obj * DateTimeOffset * string -&gt; unit" Usage="objectCache.Set (key, value, absoluteExpiration, regionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="absoluteExpiration" Type="System.DateTimeOffset" />
        <Parameter Name="regionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="d6a8a-302">该缓存项的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-302">A unique identifier for the cache entry.</span></span></param>
        <param name="value"><span data-ttu-id="d6a8a-303">要插入的对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-303">The object to insert.</span></span></param>
        <param name="absoluteExpiration"><span data-ttu-id="d6a8a-304">缓存项的固定的过期日期和时间。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-304">The fixed date and time at which the cache entry will expire.</span></span></param>
        <param name="regionName"><span data-ttu-id="d6a8a-305">可选。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-305">Optional.</span></span> <span data-ttu-id="d6a8a-306">缓存中的一个可用来添加缓存项的命名区域（如果实现了区域）。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-306">A named region in the cache to which the cache entry can be added, if regions are implemented.</span></span> <span data-ttu-id="d6a8a-307">可选参数的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-307">The default value for the optional parameter is <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d6a8a-308">在派生类中重写时，向缓存中插入缓存项，同时指定基于时间的过期详细信息。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-308">When overridden in a derived class, inserts a cache entry into the cache, specifying time-based expiration details.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-309">如果 `key` 缓存中不存在匹配的项，则使用将 `value` 其 `key` 作为新缓存项插入。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-309">If an item that matches `key` does not exist in the cache, `value` and `key` are used to insert as a new cache entry.</span></span> <span data-ttu-id="d6a8a-310">如果具有匹配键的项 `item` 存在，则使用更新或覆盖缓存项 `value` 。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-310">If an item with a key that matches `item` exists, the cache entry is updated or overwritten by using `value`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public abstract void Set (string key, object value, System.Runtime.Caching.CacheItemPolicy policy, string regionName = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Set(string key, object value, class System.Runtime.Caching.CacheItemPolicy policy, string regionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.Set(System.String,System.Object,System.Runtime.Caching.CacheItemPolicy,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Set (key As String, value As Object, policy As CacheItemPolicy, Optional regionName As String = Nothing)" />
      <MemberSignature Language="F#" Value="abstract member Set : string * obj * System.Runtime.Caching.CacheItemPolicy * string -&gt; unit" Usage="objectCache.Set (key, value, policy, regionName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="policy" Type="System.Runtime.Caching.CacheItemPolicy" />
        <Parameter Name="regionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="d6a8a-311">该缓存项的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-311">A unique identifier for the cache entry.</span></span></param>
        <param name="value"><span data-ttu-id="d6a8a-312">要插入的对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-312">The object to insert.</span></span></param>
        <param name="policy"><span data-ttu-id="d6a8a-313">一个包含该缓存项的逐出详细信息的对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-313">An object that contains eviction details for the cache entry.</span></span> <span data-ttu-id="d6a8a-314">此对象提供比简单绝对过期更多的逐出选项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-314">This object provides more options for eviction than a simple absolute expiration.</span></span></param>
        <param name="regionName"><span data-ttu-id="d6a8a-315">可选。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-315">Optional.</span></span> <span data-ttu-id="d6a8a-316">缓存中的一个可用来添加缓存项的命名区域（如果实现了区域）。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-316">A named region in the cache to which the cache entry can be added, if regions are implemented.</span></span> <span data-ttu-id="d6a8a-317">可选参数的默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-317">The default value for the optional parameter is <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="d6a8a-318">在派生类中重写时，向缓存中插入缓存项。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-318">When overridden in a derived class, inserts a cache entry into the cache.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-319">此方法重载使你可以提供比基于时间的绝对过期时间更多的逐出或过期详细信息。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-319">This method overload lets you provide more eviction or expiration details than those that are available in time-based absolute expiration.</span></span>  
  
 <span data-ttu-id="d6a8a-320">如果 `key` 缓存中不存在匹配的项，则使用将 `value` 其 `key` 作为新缓存项插入。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-320">If an item that matches `key` does not exist in the cache, `value` and `key` are used to insert as a new cache entry.</span></span> <span data-ttu-id="d6a8a-321">如果具有匹配键的项 `item` 存在，则使用更新或覆盖缓存项 `value` 。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-321">If an item with a key that matches `item` exists, the cache entry is updated or overwritten by using `value`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string,object&gt;&gt; IEnumerable&lt;KeyValuePair&lt;string,object&gt;&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, object&gt;&gt; System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.System#Collections#Generic#IEnumerable&lt;System#Collections#Generic#KeyValuePair&lt;System#String,System#Object&gt;&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of KeyValuePair(Of String, Object)) Implements IEnumerable(Of KeyValuePair(Of String, Object)).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, System::Object ^&gt;&gt;::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;string, obj&gt;&gt;" Usage="objectCache.System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d6a8a-322">支持对强类型集合迭代。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-322">Supports iteration over a strongly typed collection.</span></span></summary>
        <returns><span data-ttu-id="d6a8a-323">可提供对缓存中的缓存项进行访问的枚举器对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-323">The enumerator object that provides access to the cache entries in the cache.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ObjectCache.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="objectCache.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d6a8a-324">支持对泛型集合进行迭代。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-324">Supports iteration over a generic collection.</span></span></summary>
        <returns><span data-ttu-id="d6a8a-325">可提供对缓存中的项的访问的枚举器对象。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-325">The enumerator object that provides access to the items in the cache.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d6a8a-326">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-326">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="d6a8a-327">它只能在派生 <xref:System.Runtime.Caching.ObjectCache> 实例被强制转换为接口时使用 <xref:System.Collections.IEnumerable> 。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-327">It can be used only when a derived <xref:System.Runtime.Caching.ObjectCache> instance is cast to an <xref:System.Collections.IEnumerable> interface.</span></span>  
  
 <span data-ttu-id="d6a8a-328">开发人员可以使用此方法循环访问缓存项的泛型集合。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-328">Developers can use this method to iterate through a generic collection of cache entries.</span></span>  
  
 <span data-ttu-id="d6a8a-329">这是 <xref:System.Collections.IEnumerable.GetEnumerator%2A> 内部调用方法的默认实现 <xref:System.Runtime.Caching.ObjectCache.GetEnumerator%2A> 。</span><span class="sxs-lookup"><span data-stu-id="d6a8a-329">This is the default <xref:System.Collections.IEnumerable.GetEnumerator%2A> implementation that internally calls the <xref:System.Runtime.Caching.ObjectCache.GetEnumerator%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
