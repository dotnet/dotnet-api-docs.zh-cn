<Namespace Name="System.Runtime.Remoting.Lifetime">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5ac8c7510ea8c5026f390f2936bebfb8b315c4f4" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="64445176" /></Metadata><Docs>
    <summary><span data-ttu-id="25736-101"><see cref="N:System.Runtime.Remoting.Lifetime" /> 命名空间包含管理远程对象生存期的类。</span><span class="sxs-lookup"><span data-stu-id="25736-101">The <see cref="N:System.Runtime.Remoting.Lifetime" /> namespace contains classes that manage the lifetime of remote objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="25736-102">传统上，分布式垃圾回收使用引用计数和 ping 来控制对象的生存期。</span><span class="sxs-lookup"><span data-stu-id="25736-102">Traditionally, distributed garbage collection uses reference counts and pinging for control over the lifetime of objects.</span></span> <span data-ttu-id="25736-103">如果每个服务都有几个客户端，则这种方法很有效，但当每个服务有数千个客户端时，这种情况并不</span><span class="sxs-lookup"><span data-stu-id="25736-103">This works well when there are a few clients per service, but doesn't scale well when there are thousands of clients per service.</span></span> <span data-ttu-id="25736-104">远程处理生存期服务将租约与每个服务相关联，并在其租约时间到期时删除服务。</span><span class="sxs-lookup"><span data-stu-id="25736-104">The remoting lifetime service associates a lease with each service, and deletes a service when its lease time expires.</span></span> <span data-ttu-id="25736-105">生存期服务可以采用传统的分布式垃圾回收器的功能，并且在每个服务器的客户端数增加时，它也可以很好地进行调整。</span><span class="sxs-lookup"><span data-stu-id="25736-105">The lifetime service can take on the function of a traditional distributed garbage collector, and it also adjusts well when the numbers of clients per server increases.</span></span>  
  
 <span data-ttu-id="25736-106">每个应用程序域包含负责在其域中控制租约的租约管理器。</span><span class="sxs-lookup"><span data-stu-id="25736-106">Each application domain contains a lease manager that is responsible for controlling leases in its domain.</span></span> <span data-ttu-id="25736-107">定期检查所有租约的过期租约时间。</span><span class="sxs-lookup"><span data-stu-id="25736-107">All leases are examined periodically for expired lease times.</span></span> <span data-ttu-id="25736-108">如果租约过期，则会调用一个或多个租约的主办方，并为其提供续订租约的机会。</span><span class="sxs-lookup"><span data-stu-id="25736-108">If a lease has expired, one or more of the lease's sponsors are invoked and given the opportunity to renew the lease.</span></span> <span data-ttu-id="25736-109">如果所有主办方都不决定续订租约，则租约管理器会删除租约，并且垃圾回收器可以收集该对象。</span><span class="sxs-lookup"><span data-stu-id="25736-109">If none of the sponsors decides to renew the lease, the lease manager removes the lease and the object can be collected by the garbage collector.</span></span> <span data-ttu-id="25736-110">租约管理器维护租约列表，租约按剩余租约时间排序。</span><span class="sxs-lookup"><span data-stu-id="25736-110">The lease manager maintains a lease list with leases sorted by remaining lease time.</span></span> <span data-ttu-id="25736-111">剩余时间最短的租约存储在列表顶部。</span><span class="sxs-lookup"><span data-stu-id="25736-111">The leases with the shortest remaining time are stored at the top of the list.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
</Namespace>