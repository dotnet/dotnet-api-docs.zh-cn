<Type Name="JsonConverter&lt;T&gt;" FullName="System.Text.Json.Serialization.JsonConverter&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2ad7c3a8a86a1b8ce0145d8ae5b638c2ec90d6ad" /><Meta Name="ms.sourcegitcommit" Value="5484acfd78fc29edb48fc1ca6925046c4672954a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/16/2020" /><Meta Name="ms.locfileid" Value="90691735" /></Metadata><TypeSignature Language="C#" Value="public abstract class JsonConverter&lt;T&gt; : System.Text.Json.Serialization.JsonConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit JsonConverter`1&lt;T&gt; extends System.Text.Json.Serialization.JsonConverter" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Serialization.JsonConverter`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class JsonConverter(Of T)&#xA;Inherits JsonConverter" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class JsonConverter abstract : System::Text::Json::Serialization::JsonConverter" />
  <TypeSignature Language="F#" Value="type JsonConverter&lt;'T&gt; = class&#xA;    inherit JsonConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Text.Json.Serialization.JsonConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="T"><span data-ttu-id="6cb4c-101">转换器处理的对象或值的类型。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-101">The type of object or value handled by the converter.</span></span></typeparam>
    <summary><span data-ttu-id="6cb4c-102">将对象或值转换为 JSON，或是从 JSON 转换为对象或值。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-102">Converts an object or value to or from JSON.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6cb4c-103">有关详细信息，请参阅 [如何编写用于 JSON 序列化的自定义转换器](/dotnet/standard/serialization/system-text-json-converters-how-to)。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-103">For more information, see [How to write custom converters for JSON serialization](/dotnet/standard/serialization/system-text-json-converters-how-to).</span></span>

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal JsonConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonConverter`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; JsonConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="6cb4c-104">初始化一个新 <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-104">Initializes a new <see cref="T:System.Text.Json.Serialization.JsonConverter`1" /> instance.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvert">
      <MemberSignature Language="C#" Value="public override bool CanConvert (Type typeToConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvert(class System.Type typeToConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvert (typeToConvert As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvert(Type ^ typeToConvert);" />
      <MemberSignature Language="F#" Value="override this.CanConvert : Type -&gt; bool" Usage="jsonConverter.CanConvert typeToConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeToConvert" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="typeToConvert"><span data-ttu-id="6cb4c-105">要针对其进行比较的类型。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-105">The type to compare against.</span></span></param>
        <summary><span data-ttu-id="6cb4c-106">确定是否可以转换指定类型。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-106">Determines whether the specified type can be converted.</span></span></summary>
        <returns><span data-ttu-id="6cb4c-107">如果可以转换类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-107"><see langword="true" /> if the type can be converted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6cb4c-108">默认实现是 `true` 在等于时返回 `typeToConvert` `typeof(T)` 。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-108">The default implementation is to return `true` when `typeToConvert` equals `typeof(T)`.</span></span>

<span data-ttu-id="6cb4c-109">有关详细信息，请参阅 [如何编写用于 JSON 序列化的自定义转换器](/dotnet/standard/serialization/system-text-json-converters-how-to#steps-to-follow-the-basic-pattern)。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-109">For more information, see [How to write custom converters for JSON serialization](/dotnet/standard/serialization/system-text-json-converters-how-to#steps-to-follow-the-basic-pattern).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleNull">
      <MemberSignature Language="C#" Value="public virtual bool HandleNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HandleNull" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Serialization.JsonConverter`1.HandleNull" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property HandleNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HandleNull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HandleNull : bool" Usage="System.Text.Json.Serialization.JsonConverter&lt;'T&gt;.HandleNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="6cb4c-110">指示是否应在序列化时将 <see langword="null" /> 传递到转换器，以及是否应在反序列化时传递 <see cref="F:System.Text.Json.JsonTokenType.Null" />。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-110">Indicates whether <see langword="null" /> should be passed to the converter on serialization, and whether <see cref="F:System.Text.Json.JsonTokenType.Null" /> should be passed on deserialization.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6cb4c-111">对于 `true` 值类型，默认值为，对于引用类型，默认值为 `false` 转换器。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-111">The default value is `true` for converters for value types, and `false` for converters for reference types.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract T? Read (ref System.Text.Json.Utf8JsonReader reader, Type typeToConvert, System.Text.Json.JsonSerializerOptions options);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !T Read(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.Type typeToConvert, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read (ByRef reader As Utf8JsonReader, typeToConvert As Type, options As JsonSerializerOptions) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract T Read(System::Text::Json::Utf8JsonReader % reader, Type ^ typeToConvert, System::Text::Json::JsonSerializerOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member Read : Utf8JsonReader * Type * System.Text.Json.JsonSerializerOptions -&gt; 'T" Usage="jsonConverter.Read (reader, typeToConvert, options)" />
      <MemberSignature Language="C#" Value="public abstract T Read (ref System.Text.Json.Utf8JsonReader reader, Type typeToConvert, System.Text.Json.JsonSerializerOptions options);" FrameworkAlternate="netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" />
        <Parameter Name="typeToConvert" Type="System.Type" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="6cb4c-112">读取器。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-112">The reader.</span></span></param>
        <param name="typeToConvert"><span data-ttu-id="6cb4c-113">要转换的类型。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-113">The type to convert.</span></span></param>
        <param name="options"><span data-ttu-id="6cb4c-114">一个对象，指定要使用的序列化选项。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-114">An object that specifies serialization options to use.</span></span></param>
        <summary><span data-ttu-id="6cb4c-115">读取 JSON 并转换为类型 <typeparamref name="T" />。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-115">Reads and converts the JSON to type <typeparamref name="T" />.</span></span></summary>
        <returns><span data-ttu-id="6cb4c-116">转换后的值。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-116">The converted value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6cb4c-117">有关详细信息，请参阅 [如何编写用于 JSON 序列化的自定义转换器](/dotnet/standard/serialization/system-text-json-converters-how-to#steps-to-follow-the-basic-pattern)。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-117">For more information, see [How to write custom converters for JSON serialization](/dotnet/standard/serialization/system-text-json-converters-how-to#steps-to-follow-the-basic-pattern).</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public abstract void Write (System.Text.Json.Utf8JsonWriter writer, T value, System.Text.Json.JsonSerializerOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Text.Json.Utf8JsonWriter writer, !T value, class System.Text.Json.JsonSerializerOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Write (writer As Utf8JsonWriter, value As T, options As JsonSerializerOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Write(System::Text::Json::Utf8JsonWriter ^ writer, T value, System::Text::Json::JsonSerializerOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.Text.Json.Utf8JsonWriter * 'T * System.Text.Json.JsonSerializerOptions -&gt; unit" Usage="jsonConverter.Write (writer, value, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" />
        <Parameter Name="value" Type="T" />
        <Parameter Name="options" Type="System.Text.Json.JsonSerializerOptions" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="6cb4c-118">要写入到的编写器。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-118">The writer to write to.</span></span></param>
        <param name="value"><span data-ttu-id="6cb4c-119">要转换为 JSON 的值。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-119">The value to convert to JSON.</span></span></param>
        <param name="options"><span data-ttu-id="6cb4c-120">一个对象，指定要使用的序列化选项。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-120">An object that specifies serialization options to use.</span></span></param>
        <summary><span data-ttu-id="6cb4c-121">将指定值作为 JSON 写入。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-121">Writes a specified value as JSON.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="6cb4c-122">转换器可能会引发任何异常，但它应 <xref:System.Text.Json.JsonException> 在无法创建 JSON 时引发。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-122">A converter may throw any exception, but it should throw <xref:System.Text.Json.JsonException> when the JSON cannot be created.</span></span>

<span data-ttu-id="6cb4c-123">有关详细信息，请参阅 [如何编写用于 JSON 序列化的自定义转换器](/dotnet/standard/serialization/system-text-json-converters-how-to#steps-to-follow-the-basic-pattern)。</span><span class="sxs-lookup"><span data-stu-id="6cb4c-123">For more information, see [How to write custom converters for JSON serialization](/dotnet/standard/serialization/system-text-json-converters-how-to#steps-to-follow-the-basic-pattern).</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
