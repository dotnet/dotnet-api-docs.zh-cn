<Type Name="JsonExtensionDataAttribute" FullName="System.Text.Json.Serialization.JsonExtensionDataAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d3c5c4b8af382490475440e4dbcbcc6896cce59d" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83945878" /></Metadata><TypeSignature Language="C#" Value="public sealed class JsonExtensionDataAttribute : System.Text.Json.Serialization.JsonAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit JsonExtensionDataAttribute extends System.Text.Json.Serialization.JsonAttribute" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class JsonExtensionDataAttribute&#xA;Inherits JsonAttribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class JsonExtensionDataAttribute sealed : System::Text::Json::Serialization::JsonAttribute" />
  <TypeSignature Language="F#" Value="type JsonExtensionDataAttribute = class&#xA;    inherit JsonAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Json.Serialization.JsonAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Property, AllowMultiple=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="eaecb-101">当属性的类型为 <see cref="T:System.Collections.Generic.IDictionary`2" /> 时，没有匹配成员的任何属性都会在反序列化期间添加到该字典中，并在序列化期间中写入。</span><span class="sxs-lookup"><span data-stu-id="eaecb-101">When placed on a property of type <see cref="T:System.Collections.Generic.IDictionary`2" />, any properties that do not have a matching member are added to that dictionary during deserialization and written during serialization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

<span data-ttu-id="eaecb-102">字典的 `TKey` 值必须是 <xref:System.String>，`TValue` 必须 <xref:System.Text.Json.JsonElement> 或 <xref:System.Object>。</span><span class="sxs-lookup"><span data-stu-id="eaecb-102">The dictionary's `TKey` value must be <xref:System.String>, and `TValue` must be <xref:System.Text.Json.JsonElement> or <xref:System.Object>.</span></span>

<span data-ttu-id="eaecb-103">在反序列化过程中，使用 <xref:System.Object>时，"null" JSON 值被视为 `null` 对象引用，使用 <xref:System.Text.Json.JsonElement>时，"null" 将被视为 JsonElement，并将 <xref:System.Text.Json.JsonElement.ValueKind> 设置为 <xref:System.Text.Json.JsonValueKind.Null?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="eaecb-103">During deserialization, when using <xref:System.Object>, a "null" JSON value is treated as a `null` object reference, and when using <xref:System.Text.Json.JsonElement>, a "null" is treated as a JsonElement with <xref:System.Text.Json.JsonElement.ValueKind> set to <xref:System.Text.Json.JsonValueKind.Null?displayProperty=nameWithType>.</span></span>
            
<span data-ttu-id="eaecb-104">在序列化过程中，扩展数据属性的名称不包括在 JSON 中;扩展数据中包含的数据将序列化为 JSON 对象的属性。</span><span class="sxs-lookup"><span data-stu-id="eaecb-104">During serialization, the name of the extension data property is not included in the JSON; the data contained within the extension data is serialized as properties of the JSON object.</span></span>
            
<span data-ttu-id="eaecb-105">如果某个类型上存在多个具有此扩展数据特性的属性，或者，如果属性本身不是正确的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 类型，则将在该类型的第一次序列化或反序列化过程中引发 <xref:System.InvalidOperationException>。</span><span class="sxs-lookup"><span data-stu-id="eaecb-105">If there is more than one property on a type with this extension data attribute, or if the property itself is not of the correct <see cref="T:System.Collections.Generic.IDictionary`2" /> type, an <xref:System.InvalidOperationException> is thrown during the first serialization or deserialization of that type.</span></span>

<span data-ttu-id="eaecb-106">有关详细信息，请参阅[如何序列化和反序列化 JSON](/dotnet/standard/serialization/system-text-json-how-to#handle-overflow-json)。</span><span class="sxs-lookup"><span data-stu-id="eaecb-106">For more information, see [How to serialize and deserialize JSON](/dotnet/standard/serialization/system-text-json-how-to#handle-overflow-json).</span></span>

            ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JsonExtensionDataAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; JsonExtensionDataAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="eaecb-107">实例化 <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="eaecb-107">Instantiates a new instance of the <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
