<Type Name="ReferenceHandler" FullName="System.Text.Json.Serialization.ReferenceHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="796719ed5d15d5860f517ae7205c1a114870fcdc" /><Meta Name="ms.sourcegitcommit" Value="42b824c2ec14c2e65cae1f1c93ae136d4f804e92" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/23/2020" /><Meta Name="ms.locfileid" Value="91057619" /></Metadata><TypeSignature Language="C#" Value="public abstract class ReferenceHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ReferenceHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Serialization.ReferenceHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ReferenceHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReferenceHandler abstract" />
  <TypeSignature Language="F#" Value="type ReferenceHandler = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>此类定义 <see cref="T:System.Text.Json.JsonSerializer" /> 如何处理对序列化和反序列化的引用。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ReferenceHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.ReferenceHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ReferenceHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Text.Json.Serialization.ReferenceHandler" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateResolver">
      <MemberSignature Language="C#" Value="public abstract System.Text.Json.Serialization.ReferenceResolver CreateResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Json.Serialization.ReferenceResolver CreateResolver() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.ReferenceHandler.CreateResolver" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateResolver () As ReferenceResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Json::Serialization::ReferenceResolver ^ CreateResolver();" />
      <MemberSignature Language="F#" Value="abstract member CreateResolver : unit -&gt; System.Text.Json.Serialization.ReferenceResolver" Usage="referenceHandler.CreateResolver " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.ReferenceResolver</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回用于每个序列化调用的 <see cref="T:System.Text.Json.Serialization.ReferenceResolver" />。</summary>
        <returns>用于序列化和反序列化的解析器。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Preserve">
      <MemberSignature Language="C#" Value="public static System.Text.Json.Serialization.ReferenceHandler Preserve { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Json.Serialization.ReferenceHandler Preserve" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Serialization.ReferenceHandler.Preserve" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Preserve As ReferenceHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Json::Serialization::ReferenceHandler ^ Preserve { System::Text::Json::Serialization::ReferenceHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Preserve : System.Text.Json.Serialization.ReferenceHandler" Usage="System.Text.Json.Serialization.ReferenceHandler.Preserve" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.ReferenceHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>将 JSON 对象和数组反序列化为引用类型时，元数据属性将有效，并在序列化引用类型时写入。 这对于从包含循环或重复引用的对象创建往返 JSON 是必需的。</summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

* 序列化时：

  * 编写复杂引用类型时，序列化程序还会将元数据属性写入 (`$id` 、 `$values` 和 `$ref`) 中。
  * 输出 JSON 将包含 `$id` 每个对象的额外属性，发出的每个可枚举类型的 json 数组将嵌套在包含和属性的 json 对象 `$id` 中 `$values` 。
  * <xref:System.Object.ReferenceEquals(System.Object,System.Object)> 用于确定对象是否相同。
  * 如果对象与先前序列化的对象相同， `$ref` `$id` 则改为写入 (此类对象) 的标识符 () 。
  * 没有为值类型编写元数据属性。

* 反序列化时：

  * JSON 中用于保留重复引用和循环的元数据属性，只要它们格式正确。\*
  * 对于不包含任何元数据属性的 JSON 对象，反序列化行为等同于不使用 `Preserve` 。
  * 对于值类型，将 `$id` 忽略元数据属性。 <xref:System.Text.Json.JsonException>如果在 `$ref` JSON 对象中找到了元数据属性，则会引发。
  * 对于可枚举的值类型，将 `$values` 忽略元数据属性。
 
\* 若要将 JSON 中的元数据属性视为格式正确，它们必须遵循以下规则：

* `$id`Metadata 属性必须是 JSON 对象中的第一个属性。
* 包含 `$ref` 元数据属性的 JSON 对象不能包含任何其他属性。
* Metadata 属性的值 `$ref` 必须引用 `$id` 前面在 JSON 中显示的。
* `$id`和 `$ref` 元数据属性的值必须是 JSON 字符串。
* 对于可枚举类型（如 <xref:System.Collections.Generic.List%601> ），json 数组必须嵌套在包含 `$id` 和 `$values` 元数据属性的 json 对象中，按该顺序排列。
* 对于可枚举类型， `$values` 元数据属性必须是一个 JSON 数组。
* `$values`仅当引用可枚举类型时，metadata 属性才有效。

如果 JSON 的格式不正确， <xref:System.Text.Json.JsonException> 则会引发。

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
