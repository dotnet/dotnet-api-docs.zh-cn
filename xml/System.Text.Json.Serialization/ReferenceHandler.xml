<Type Name="ReferenceHandler" FullName="System.Text.Json.Serialization.ReferenceHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bd7e6d59c801cb659a49bd17b94c26ac9914f84e" /><Meta Name="ms.sourcegitcommit" Value="11306e8bb61e44463a969897211724e18107ac96" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="08/12/2020" /><Meta Name="ms.locfileid" Value="88138013" /></Metadata><TypeSignature Language="C#" Value="public abstract class ReferenceHandler" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ReferenceHandler extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Serialization.ReferenceHandler" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ReferenceHandler" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReferenceHandler abstract" />
  <TypeSignature Language="F#" Value="type ReferenceHandler = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1edc3-101">此类定义 <see cref="T:System.Text.Json.JsonSerializer" /> 如何处理对序列化和反序列化的引用。</span><span class="sxs-lookup"><span data-stu-id="1edc3-101">This class defines how the <see cref="T:System.Text.Json.JsonSerializer" /> deals with references on serialization and deserialization.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ReferenceHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.ReferenceHandler.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ReferenceHandler();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateResolver">
      <MemberSignature Language="C#" Value="public abstract System.Text.Json.Serialization.ReferenceResolver CreateResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Text.Json.Serialization.ReferenceResolver CreateResolver() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Json.Serialization.ReferenceHandler.CreateResolver" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateResolver () As ReferenceResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Text::Json::Serialization::ReferenceResolver ^ CreateResolver();" />
      <MemberSignature Language="F#" Value="abstract member CreateResolver : unit -&gt; System.Text.Json.Serialization.ReferenceResolver" Usage="referenceHandler.CreateResolver " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.ReferenceResolver</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="1edc3-102">返回用于每个序列化调用的 <see cref="T:System.Text.Json.Serialization.ReferenceResolver" />。</span><span class="sxs-lookup"><span data-stu-id="1edc3-102">Returns the <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> used for each serialization call.</span></span></summary>
        <returns><span data-ttu-id="1edc3-103">用于序列化和反序列化的解析器。</span><span class="sxs-lookup"><span data-stu-id="1edc3-103">The resolver to use for serialization and deserialization.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Preserve">
      <MemberSignature Language="C#" Value="public static System.Text.Json.Serialization.ReferenceHandler Preserve { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Text.Json.Serialization.ReferenceHandler Preserve" />
      <MemberSignature Language="DocId" Value="P:System.Text.Json.Serialization.ReferenceHandler.Preserve" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Preserve As ReferenceHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Text::Json::Serialization::ReferenceHandler ^ Preserve { System::Text::Json::Serialization::ReferenceHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Preserve : System.Text.Json.Serialization.ReferenceHandler" Usage="System.Text.Json.Serialization.ReferenceHandler.Preserve" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.ReferenceHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="1edc3-104">将 JSON 对象和数组反序列化为引用类型时，元数据属性将有效，并在序列化引用类型时写入。</span><span class="sxs-lookup"><span data-stu-id="1edc3-104">Metadata properties will be honored when deserializing JSON objects and arrays into reference types and written when serializing reference types.</span></span> <span data-ttu-id="1edc3-105">这对于从包含循环或重复引用的对象创建往返 JSON 是必需的。</span><span class="sxs-lookup"><span data-stu-id="1edc3-105">This is necessary to create round-trippable JSON from objects that contain cycles or duplicate references.</span></span></summary>
        <value>To be added.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

* <span data-ttu-id="1edc3-106">序列化时：</span><span class="sxs-lookup"><span data-stu-id="1edc3-106">On Serialize:</span></span>

  * <span data-ttu-id="1edc3-107">编写复杂引用类型时，序列化程序还会将元数据属性写入 (`$id` 、 `$values` 和 `$ref`) 中。</span><span class="sxs-lookup"><span data-stu-id="1edc3-107">When writing complex reference types, the serializer also writes metadata properties (`$id`, `$values`, and `$ref`) within them.</span></span>
  * <span data-ttu-id="1edc3-108">输出 JSON 将包含 `$id` 每个对象的额外属性，发出的每个可枚举类型的 json 数组将嵌套在包含和属性的 json 对象 `$id` 中 `$values` 。</span><span class="sxs-lookup"><span data-stu-id="1edc3-108">The output JSON will contain an extra `$id` property for every object, and for every enumerable type the JSON array emitted will be nested within a JSON object containing an `$id` and `$values` property.</span></span>
  * <span data-ttu-id="1edc3-109"><xref:System.Object.ReferenceEquals(System.Object,System.Object)> 用于确定对象是否相同。</span><span class="sxs-lookup"><span data-stu-id="1edc3-109"><xref:System.Object.ReferenceEquals(System.Object,System.Object)> is used to determine whether objects are identical.</span></span>
  * <span data-ttu-id="1edc3-110">如果对象与先前序列化的对象相同， `$ref` `$id` 则改为写入 (此类对象) 的标识符 () 。</span><span class="sxs-lookup"><span data-stu-id="1edc3-110">When an object is identical to a previously serialized one, a pointer (`$ref`) to the identifier (`$id`) of such object is written instead.</span></span>
  * <span data-ttu-id="1edc3-111">没有为值类型编写元数据属性。</span><span class="sxs-lookup"><span data-stu-id="1edc3-111">No metadata properties are written for value types.</span></span>

* <span data-ttu-id="1edc3-112">反序列化时：</span><span class="sxs-lookup"><span data-stu-id="1edc3-112">On Deserialize:</span></span>

  * <span data-ttu-id="1edc3-113">JSON 中用于保留重复引用和循环的元数据属性，只要它们格式正确。\*</span><span class="sxs-lookup"><span data-stu-id="1edc3-113">The metadata properties within the JSON that are used to preserve duplicated references and cycles will be honored as long as they are well-formed.\*</span></span>
  * <span data-ttu-id="1edc3-114">对于不包含任何元数据属性的 JSON 对象，反序列化行为等同于不使用 `Preserve` 。</span><span class="sxs-lookup"><span data-stu-id="1edc3-114">For JSON objects that don't contain any metadata properties, the deserialization behavior is identical to not using `Preserve`.</span></span>
  * <span data-ttu-id="1edc3-115">对于值类型，将 `$id` 忽略元数据属性。</span><span class="sxs-lookup"><span data-stu-id="1edc3-115">For value types, the `$id` metadata property is ignored.</span></span> <span data-ttu-id="1edc3-116"><xref:System.Text.Json.JsonException>如果在 `$ref` JSON 对象中找到了元数据属性，则会引发。</span><span class="sxs-lookup"><span data-stu-id="1edc3-116">A <xref:System.Text.Json.JsonException> is thrown if a `$ref` metadata property is found within the JSON object.</span></span>
  * <span data-ttu-id="1edc3-117">对于可枚举的值类型，将 `$values` 忽略元数据属性。</span><span class="sxs-lookup"><span data-stu-id="1edc3-117">For enumerable value types, the `$values` metadata property is ignored.</span></span>
 
<span data-ttu-id="1edc3-118">\* 若要将 JSON 中的元数据属性视为格式正确，它们必须遵循以下规则：</span><span class="sxs-lookup"><span data-stu-id="1edc3-118">\* For the metadata properties within the JSON to be considered well-formed, they must follow these rules:</span></span>

* <span data-ttu-id="1edc3-119">`$id`Metadata 属性必须是 JSON 对象中的第一个属性。</span><span class="sxs-lookup"><span data-stu-id="1edc3-119">The `$id` metadata property must be the first property in the JSON object.</span></span>
* <span data-ttu-id="1edc3-120">包含 `$ref` 元数据属性的 JSON 对象不能包含任何其他属性。</span><span class="sxs-lookup"><span data-stu-id="1edc3-120">A JSON object that contains a `$ref` metadata property must not contain any other properties.</span></span>
* <span data-ttu-id="1edc3-121">Metadata 属性的值 `$ref` 必须引用 `$id` 前面在 JSON 中显示的。</span><span class="sxs-lookup"><span data-stu-id="1edc3-121">The value of the `$ref` metadata property must refer to an `$id` that has appeared earlier in the JSON.</span></span>
* <span data-ttu-id="1edc3-122">`$id`和 `$ref` 元数据属性的值必须是 JSON 字符串。</span><span class="sxs-lookup"><span data-stu-id="1edc3-122">The value of the `$id` and `$ref` metadata properties must be a JSON string.</span></span>
* <span data-ttu-id="1edc3-123">对于可枚举类型（如 <xref:System.Collections.Generic.List%601> ），json 数组必须嵌套在包含 `$id` 和 `$values` 元数据属性的 json 对象中，按该顺序排列。</span><span class="sxs-lookup"><span data-stu-id="1edc3-123">For enumerable types, such as <xref:System.Collections.Generic.List%601>, the JSON array must be nested within a JSON object containing an `$id` and `$values` metadata property, in that order.</span></span>
* <span data-ttu-id="1edc3-124">对于可枚举类型， `$values` 元数据属性必须是一个 JSON 数组。</span><span class="sxs-lookup"><span data-stu-id="1edc3-124">For enumerable types, the `$values` metadata property must be a JSON array.</span></span>
* <span data-ttu-id="1edc3-125">`$values`仅当引用可枚举类型时，metadata 属性才有效。</span><span class="sxs-lookup"><span data-stu-id="1edc3-125">The `$values` metadata property is only valid when referring to enumerable types.</span></span>

<span data-ttu-id="1edc3-126">如果 JSON 的格式不正确， <xref:System.Text.Json.JsonException> 则会引发。</span><span class="sxs-lookup"><span data-stu-id="1edc3-126">If the JSON is not well-formed, a <xref:System.Text.Json.JsonException> is thrown.</span></span>

          ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
