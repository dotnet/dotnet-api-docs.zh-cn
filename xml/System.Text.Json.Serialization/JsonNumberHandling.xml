<Type Name="JsonNumberHandling" FullName="System.Text.Json.Serialization.JsonNumberHandling">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f58533f32032a8e7a76a6f1212b2a2e5158d8ca2" /><Meta Name="ms.sourcegitcommit" Value="8d63c26d96c3714a8a31c9727613bb05c11660f2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/04/2020" /><Meta Name="ms.locfileid" Value="89466516" /></Metadata><TypeSignature Language="C#" Value="public enum JsonNumberHandling" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed JsonNumberHandling extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Text.Json.Serialization.JsonNumberHandling" />
  <TypeSignature Language="VB.NET" Value="Public Enum JsonNumberHandling" />
  <TypeSignature Language="C++ CLI" Value="public enum class JsonNumberHandling" />
  <TypeSignature Language="F#" Value="type JsonNumberHandling = " />
  <AssemblyInfo>
    <AssemblyName>System.Text.Json</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Flags]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Flags&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>确定在序列化和反序列化时 <see cref="T:System.Text.Json.JsonSerializer" /> 如何处理数字。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AllowNamedFloatingPointLiterals">
      <MemberSignature Language="C#" Value="AllowNamedFloatingPointLiterals" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Text.Json.Serialization.JsonNumberHandling AllowNamedFloatingPointLiterals = int32(4)" />
      <MemberSignature Language="DocId" Value="F:System.Text.Json.Serialization.JsonNumberHandling.AllowNamedFloatingPointLiterals" />
      <MemberSignature Language="VB.NET" Value="AllowNamedFloatingPointLiterals" />
      <MemberSignature Language="C++ CLI" Value="AllowNamedFloatingPointLiterals" />
      <MemberSignature Language="F#" Value="AllowNamedFloatingPointLiterals = 4" Usage="System.Text.Json.Serialization.JsonNumberHandling.AllowNamedFloatingPointLiterals" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.JsonNumberHandling</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>“NaN”、“Infinity”和“-Infinity”<see cref="F:System.Text.Json.JsonTokenType.String" /> 标记可以读为浮点常量，并且这些常量的 <see cref="T:System.Single" /> 和 <see cref="T:System.Double" /> 值将写为其相应的 JSON 字符串表示形式。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowReadingFromString">
      <MemberSignature Language="C#" Value="AllowReadingFromString" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Text.Json.Serialization.JsonNumberHandling AllowReadingFromString = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.Text.Json.Serialization.JsonNumberHandling.AllowReadingFromString" />
      <MemberSignature Language="VB.NET" Value="AllowReadingFromString" />
      <MemberSignature Language="C++ CLI" Value="AllowReadingFromString" />
      <MemberSignature Language="F#" Value="AllowReadingFromString = 1" Usage="System.Text.Json.Serialization.JsonNumberHandling.AllowReadingFromString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.JsonNumberHandling</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>可以从 <see cref="F:System.Text.Json.JsonTokenType.String" /> 标记中读取数字。 不会阻止从 <see cref="F:System.Text.Json.JsonTokenType.Number" /> 标记中读取数字。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Strict">
      <MemberSignature Language="C#" Value="Strict" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Text.Json.Serialization.JsonNumberHandling Strict = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.Text.Json.Serialization.JsonNumberHandling.Strict" />
      <MemberSignature Language="VB.NET" Value="Strict" />
      <MemberSignature Language="C++ CLI" Value="Strict" />
      <MemberSignature Language="F#" Value="Strict = 0" Usage="System.Text.Json.Serialization.JsonNumberHandling.Strict" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.JsonNumberHandling</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>数字仅将从 <see cref="F:System.Text.Json.JsonTokenType.Number" /> 标记中读取，并且仅写为 JSON 数字（不带引号）。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteAsString">
      <MemberSignature Language="C#" Value="WriteAsString" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Text.Json.Serialization.JsonNumberHandling WriteAsString = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.Text.Json.Serialization.JsonNumberHandling.WriteAsString" />
      <MemberSignature Language="VB.NET" Value="WriteAsString" />
      <MemberSignature Language="C++ CLI" Value="WriteAsString" />
      <MemberSignature Language="F#" Value="WriteAsString = 2" Usage="System.Text.Json.Serialization.JsonNumberHandling.WriteAsString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Json</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Json.Serialization.JsonNumberHandling</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>数字将写为 JSON 字符串（带有引号），而不是 JSON 数字。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
