<Type Name="GroupStyle" FullName="System.Windows.Controls.GroupStyle">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e2577e0884cc47a8728bf58834bdd08b7fc30d22" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89878072" /></Metadata><TypeSignature Language="C#" Value="public class GroupStyle : System.ComponentModel.INotifyPropertyChanged" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit GroupStyle extends System.Object implements class System.ComponentModel.INotifyPropertyChanged" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.GroupStyle" />
  <TypeSignature Language="VB.NET" Value="Public Class GroupStyle&#xA;Implements INotifyPropertyChanged" />
  <TypeSignature Language="C++ CLI" Value="public ref class GroupStyle : System::ComponentModel::INotifyPropertyChanged" />
  <TypeSignature Language="F#" Value="type GroupStyle = class&#xA;    interface INotifyPropertyChanged" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi GroupStyle extends System.Object implements class System.ComponentModel.INotifyPropertyChanged" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.INotifyPropertyChanged</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Windows.Localizability(System.Windows.LocalizationCategory.None, Readability=System.Windows.Readability.Unreadable)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定义希望组查看每个级别的方式。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示 <xref:System.Windows.Controls.ItemsControl> 绑定到的， <xref:System.Windows.Data.XmlDataProvider> 以及包含用于添加和删除分组的逻辑的代码隐藏内容。 选中此复选框后，的内容将 <xref:System.Windows.Controls.ItemsControl> 按属性进行分组 `Type` 。  
  
 每个组的类型为 <xref:System.Windows.Data.CollectionViewGroup> 。 <xref:System.Windows.Controls.GroupStyle> <xref:System.Windows.Controls.GroupStyle.HeaderTemplate%2A> 指定，使其显示为 <xref:System.Windows.Controls.TextBlock> 显示 <xref:System.Windows.Data.CollectionViewGroup.Name%2A> 每个组的的。 在这种情况下， <xref:System.Windows.Data.CollectionViewGroup.Name%2A> 为 `Work` 或 `Home` 。  
  
 [!code-xaml[GroupingSample#XAML](~/samples/snippets/csharp/VS_Snippets_Wpf/GroupingSample/CSharp/Window1.xaml#xaml)]  
  
 [!code-csharp[GroupingSample#Code](~/samples/snippets/csharp/VS_Snippets_Wpf/GroupingSample/CSharp/Window1.xaml.cs#code)]
 [!code-vb[GroupingSample#Code](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GroupingSample/visualbasic/window1.xaml.vb#code)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.Controls.ItemsControl.GroupStyle" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GroupStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.GroupStyle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GroupStyle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Controls.GroupStyle" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AlternationCount">
      <MemberSignature Language="C#" Value="public int AlternationCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AlternationCount" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.GroupStyle.AlternationCount" />
      <MemberSignature Language="VB.NET" Value="Public Property AlternationCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AlternationCount { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.AlternationCount : int with get, set" Usage="System.Windows.Controls.GroupStyle.AlternationCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(0)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置交替 <see cref="T:System.Windows.Controls.GroupItem" /> 对象的数量。</summary>
        <value>交替 <see cref="T:System.Windows.Controls.GroupItem" /> 对象的数量。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.GroupStyle.AlternationCount%2A>属性和 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType> 附加属性使您能够指定两个或多个交替对象的外观 <xref:System.Windows.Controls.GroupItem> 。 例如，你可以在中为每个第三个指定交替背景色 <xref:System.Windows.Controls.GroupItem> <xref:System.Windows.Controls.ItemsControl> 。  将 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType> 分配给中的每个 <xref:System.Windows.Controls.GroupItem> <xref:System.Windows.Controls.ItemsControl> 。  <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType> 从0开始，增量为 <xref:System.Windows.Controls.GroupStyle.AlternationCount%2A> 减1，然后重启到0。 例如，如果 <xref:System.Windows.Controls.GroupStyle.AlternationCount%2A> 为3，并且中有七个 <xref:System.Windows.Controls.GroupItem> 对象 <xref:System.Windows.Controls.ItemsControl> ，下表列出了 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType> 每个项的。  
  
|<xref:System.Windows.Controls.GroupItem>在中的位置<xref:System.Windows.Controls.ItemsControl>|<xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType>|  
|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|  
|1|0|  
|2|1|  
|3|2|  
|4|0|  
|5|1|  
|6|2|  
|7|0|  
  
 您可以使用几种方法为交替对象指定不同的外观 <xref:System.Windows.Controls.GroupItem> 。 一种方法是将或中的属性绑定 <xref:System.Windows.Controls.GroupStyle.HeaderTemplate%2A> <xref:System.Windows.Controls.GroupStyle.ContainerStyle%2A> <xref:System.Windows.Controls.GroupStyle> 到 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType> 。 然后，可以使用 <xref:System.Windows.Controls.AlternationConverter> 来指定应将哪个值应用于 <xref:System.Windows.Controls.GroupItem> 具有特定 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType> 值的。 你还可以使用触发器来更改属性的值，具体取决于它的值 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType> 。  
  
   
  
## Examples  
 下面的示例创建一个 <xref:System.Windows.Controls.ListBox> ，它绑定到对 <xref:System.Windows.Data.CollectionViewSource> 集合中的项进行分组的。 该示例 <xref:System.Windows.Controls.GroupItem> 通过执行以下操作，在两种颜色之间交替使用标题的背景：  
  
-   将设置 <xref:System.Windows.Controls.GroupStyle.AlternationCount%2A> 为2。  
  
-   创建一个 <xref:System.Windows.Controls.AlternationConverter> ，它将返回 <xref:System.Windows.Media.SolidColorBrush> ，具体取决于的值 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType> 。  
  
-   将的 <xref:System.Windows.Controls.TextBlock.Background%2A> 的绑定 <xref:System.Windows.Controls.TextBlock> <xref:System.Windows.Controls.GroupStyle.HeaderTemplate%2A> 到 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType> 属性，并提供 <xref:System.Windows.Controls.AlternationConverter> 。 请注意 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A> ，已在上设置附加属性 <xref:System.Windows.Controls.GroupItem> ，并且绑定使用 <xref:System.Windows.Data.RelativeSourceMode.FindAncestor> 来获取其值。  
  
 该示例通过在上设置，并将每个项的的的 <xref:System.Windows.Controls.ListBox> <xref:System.Windows.Controls.ItemsControl.AlternationCount%2A> <xref:System.Windows.Controls.ListBox> 和绑定 <xref:System.Windows.Controls.Control.Background%2A> <xref:System.Windows.Controls.ListBox> 到来替换两种颜色之间的项的背景 <xref:System.Windows.Controls.ItemsControl.AlternationIndex%2A?displayProperty=nameWithType> 。 在这种情况下，背景在三种颜色之间交替。  
  
 <xref:System.Windows.Data.CollectionViewSource>不显示对项进行分组的。  有关如何对项进行分组的详细信息，请参阅 [如何：在 XAML 中使用视图对数据进行排序和分组](/dotnet/framework/wpf/data/how-to-sort-and-group-data-using-a-view-in-xaml)。  
  
 [!code-xaml[AlternationIndexSnippets#3](~/samples/snippets/csharp/VS_Snippets_Wpf/AlternationIndexSnippets/CS/Window1.xaml#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainerStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Style ContainerStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Style ContainerStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.GroupStyle.ContainerStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property ContainerStyle As Style" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Style ^ ContainerStyle { System::Windows::Style ^ get(); void set(System::Windows::Style ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContainerStyle : System.Windows.Style with get, set" Usage="System.Windows.Controls.GroupStyle.ContainerStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Style</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置应用于为每个项生成的 <see cref="T:System.Windows.Controls.GroupItem" /> 的样式。</summary>
        <value>应用于为每个项生成的 <see cref="T:System.Windows.Controls.GroupItem" /> 的样式。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果创建 <xref:System.Windows.Style> 内联 in 属性元素语法而不是将样式创建为资源，则这种情况很罕见，是一种合理的替代方法。  
  
<a name="xamlAttributeUsage_ContainerStyle"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```  
<object ContainerStyle="{ResourceExtension StyleResourceKey}"/>  
```  
  
<a name="xamlValues_ColumnHeaderContainerStyle"></a>   
## <a name="xaml-values"></a>XAML 值  
 *ResourceExtension*  
 以下项之一： `StaticResource` 、或 `DynamicResource` 。 请参阅 [XAML 资源](/dotnet/framework/wpf/advanced/xaml-resources)。  
  
 *StyleResourceKey*  
 标识所请求的样式的键。 键引用中的现有资源 <xref:System.Windows.ResourceDictionary> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.GroupStyle.ContainerStyleSelector" />
      </Docs>
    </Member>
    <Member MemberName="ContainerStyleSelector">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.StyleSelector ContainerStyleSelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.StyleSelector ContainerStyleSelector" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.GroupStyle.ContainerStyleSelector" />
      <MemberSignature Language="VB.NET" Value="Public Property ContainerStyleSelector As StyleSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::StyleSelector ^ ContainerStyleSelector { System::Windows::Controls::StyleSelector ^ get(); void set(System::Windows::Controls::StyleSelector ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContainerStyleSelector : System.Windows.Controls.StyleSelector with get, set" Usage="System.Windows.Controls.GroupStyle.ContainerStyleSelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.StyleSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使应用程序编写器能够为要应用到每个生成的 <see cref="T:System.Windows.Controls.GroupItem" /> 的样式提供自定义选择逻辑。</summary>
        <value>从 <see cref="T:System.Windows.Controls.StyleSelector" /> 派生的对象。 默认值为 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Controls.DataTemplateSelector" />
        <altmember cref="P:System.Windows.Controls.GroupStyle.ContainerStyle" />
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Windows.Controls.GroupStyle Default { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Controls.GroupStyle Default" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.GroupStyle.Default" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Default As GroupStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Controls::GroupStyle ^ Default { System::Windows::Controls::GroupStyle ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Default : System.Windows.Controls.GroupStyle" Usage="System.Windows.Controls.GroupStyle.Default" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.GroupStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取组的默认样式。</summary>
        <value>组的默认样式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlPropertyElementUsage_Default"></a>   
## <a name="xaml-property-element-usage"></a>XAML 属性元素用法  
  
```  
<object>  
  <object.property>  
    <x:Static Member="GroupStyle.Default" …/>  
  </object.property>  
</object>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultGroupPanel">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Controls.ItemsPanelTemplate DefaultGroupPanel;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Controls.ItemsPanelTemplate DefaultGroupPanel" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.GroupStyle.DefaultGroupPanel" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly DefaultGroupPanel As ItemsPanelTemplate " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::Controls::ItemsPanelTemplate ^ DefaultGroupPanel;" />
      <MemberSignature Language="F#" Value=" staticval mutable DefaultGroupPanel : System.Windows.Controls.ItemsPanelTemplate" Usage="System.Windows.Controls.GroupStyle.DefaultGroupPanel" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ItemsPanelTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识默认 <see cref="T:System.Windows.Controls.ItemsPanelTemplate" />（创建用于控制项布局的面板）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 需要使用默认面板时，提供的是面板。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderStringFormat">
      <MemberSignature Language="C#" Value="public string HeaderStringFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HeaderStringFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.GroupStyle.HeaderStringFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property HeaderStringFormat As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HeaderStringFormat { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HeaderStringFormat : string with get, set" Usage="System.Windows.Controls.GroupStyle.HeaderStringFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个撰写字符串，该字符串指定如果标题显示为字符串，应如何设置该标题的格式。</summary>
        <value>一个撰写字符串，指定如果标题显示为字符串，应如何设置该标题的格式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Controls.GroupStyle.HeaderStringFormat%2A> 可以是预定义的复合字符串格式。 有关字符串格式的详细信息，请参阅 [格式设置类型](/dotnet/standard/base-types/formatting-types)。 如果设置 <xref:System.Windows.Controls.GroupStyle.HeaderTemplate%2A> 了或的 <xref:System.Windows.Controls.GroupStyle.HeaderTemplateSelector%2A> 属性，则将 <xref:System.Windows.Controls.GroupStyle> <xref:System.Windows.Controls.GroupStyle.HeaderStringFormat%2A> 忽略属性。  
  
   
  
## Examples  
 下面的示例创建一个 <xref:System.Windows.Controls.ListBox> ，它按价格范围对项的集合进行分组。  转换器 `GroupByPrice` 返回高于每个项的价格的整数值。 例如，如果项的价格介于0到100之间，则转换器将返回100。 该示例使用 <xref:System.Windows.Controls.GroupStyle.HeaderStringFormat%2A> 创建一个字符串，其中包含每个价格范围的上限。 例如，在美国中，100美元下面的项将按标题显示，该标题显示 "项低于 $100"。  
  
 [!code-xaml[ContentStringSnippets#GroupStyleHeaderStringFormat](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentStringSnippets/CSharp/Window1.xaml#groupstyleheaderstringformat)]  
  
 下面的示例演示了 `GroupByPrice` 类、 `PurchaseItem` 类以及 <xref:System.Windows.Controls.ListBox> 绑定到的集合。  
  
 [!code-csharp[ContentStringSnippets#GroupStyleData](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentStringSnippets/CSharp/Window1.xaml.cs#groupstyledata)]
 [!code-vb[ContentStringSnippets#GroupStyleData](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ContentStringSnippets/visualbasic/window1.xaml.vb#groupstyledata)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplate">
      <MemberSignature Language="C#" Value="public System.Windows.DataTemplate HeaderTemplate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.DataTemplate HeaderTemplate" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.GroupStyle.HeaderTemplate" />
      <MemberSignature Language="VB.NET" Value="Public Property HeaderTemplate As DataTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::DataTemplate ^ HeaderTemplate { System::Windows::DataTemplate ^ get(); void set(System::Windows::DataTemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HeaderTemplate : System.Windows.DataTemplate with get, set" Usage="System.Windows.Controls.GroupStyle.HeaderTemplate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于显示组标题的模板。</summary>
        <value>一个用于显示组标题的 <see cref="T:System.Windows.DataTemplate" /> 对象。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示 <xref:System.Windows.Controls.ItemsControl> 绑定到的， <xref:System.Windows.Data.XmlDataProvider> 以及包含用于添加和删除分组的逻辑的代码隐藏内容。 选中此复选框后，的内容将 <xref:System.Windows.Controls.ItemsControl> 按属性进行分组 `Type` 。  
  
 每个组的类型为 <xref:System.Windows.Data.CollectionViewGroup> 。 <xref:System.Windows.Controls.GroupStyle> <xref:System.Windows.Controls.GroupStyle.HeaderTemplate%2A> 指定，使其显示为 <xref:System.Windows.Controls.TextBlock> 显示 <xref:System.Windows.Data.CollectionViewGroup.Name%2A> 每个组的的。 在这种情况下， <xref:System.Windows.Data.CollectionViewGroup.Name%2A> 为 `Work` 或 `Home` 。  
  
 [!code-xaml[GroupingSample#XAML](~/samples/snippets/csharp/VS_Snippets_Wpf/GroupingSample/CSharp/Window1.xaml#xaml)]  
  
 [!code-csharp[GroupingSample#Code](~/samples/snippets/csharp/VS_Snippets_Wpf/GroupingSample/CSharp/Window1.xaml.cs#code)]
 [!code-vb[GroupingSample#Code](~/samples/snippets/visualbasic/VS_Snippets_Wpf/GroupingSample/visualbasic/window1.xaml.vb#code)]  
  
 下面的示例演示如何使用 <xref:System.Windows.Controls.GroupStyle.HeaderTemplate%2A> 属性：  
  
 [!code-xaml[DataBindingLab#GroupStyle](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/MainWindow.xaml#groupstyle)]  
  
 下面是的定义 `groupingHeaderTemplate` <xref:System.Windows.DataTemplate> ：  
  
 [!code-xaml[DataBindingLab#HeaderTemplate](~/samples/snippets/csharp/VS_Snippets_Wpf/DataBindingLab/CSharp/MainWindow.xaml#headertemplate)]  
  
 有关完整示例，请参阅 [数据绑定演示](https://go.microsoft.com/fwlink/?LinkID=163703)。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Controls.GroupStyle.HeaderTemplateSelector" />
      </Docs>
    </Member>
    <Member MemberName="HeaderTemplateSelector">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.DataTemplateSelector HeaderTemplateSelector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.DataTemplateSelector HeaderTemplateSelector" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.GroupStyle.HeaderTemplateSelector" />
      <MemberSignature Language="VB.NET" Value="Public Property HeaderTemplateSelector As DataTemplateSelector" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::DataTemplateSelector ^ HeaderTemplateSelector { System::Windows::Controls::DataTemplateSelector ^ get(); void set(System::Windows::Controls::DataTemplateSelector ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HeaderTemplateSelector : System.Windows.Controls.DataTemplateSelector with get, set" Usage="System.Windows.Controls.GroupStyle.HeaderTemplateSelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.DataTemplateSelector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使应用程序编写器能够为用于显示组标题的模板提供自定义选择逻辑。</summary>
        <value>从 <see cref="T:System.Windows.Controls.DataTemplateSelector" /> 派生的对象。 默认值为 <see langword="null" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Controls.GroupStyle.HeaderTemplate" />
      </Docs>
    </Member>
    <Member MemberName="HidesIfEmpty">
      <MemberSignature Language="C#" Value="public bool HidesIfEmpty { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HidesIfEmpty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.GroupStyle.HidesIfEmpty" />
      <MemberSignature Language="VB.NET" Value="Public Property HidesIfEmpty As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HidesIfEmpty { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HidesIfEmpty : bool with get, set" Usage="System.Windows.Controls.GroupStyle.HidesIfEmpty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否应该显示与空组相对应的项。</summary>
        <value>如果不显示空组，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanged (System.ComponentModel.PropertyChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanged(class System.ComponentModel.PropertyChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.GroupStyle.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanged (e As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanged(System::ComponentModel::PropertyChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanged : System.ComponentModel.PropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanged : System.ComponentModel.PropertyChangedEventArgs -&gt; unit" Usage="groupStyle.OnPropertyChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">要引发事件的自变量。</param>
        <summary>使用提供的自变量引发 <see cref="E:System.Windows.Controls.GroupStyle.PropertyChanged" /> 事件。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Panel">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.ItemsPanelTemplate Panel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Controls.ItemsPanelTemplate Panel" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.GroupStyle.Panel" />
      <MemberSignature Language="VB.NET" Value="Public Property Panel As ItemsPanelTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::ItemsPanelTemplate ^ Panel { System::Windows::Controls::ItemsPanelTemplate ^ get(); void set(System::Windows::Controls::ItemsPanelTemplate ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Panel : System.Windows.Controls.ItemsPanelTemplate with get, set" Usage="System.Windows.Controls.GroupStyle.Panel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.ItemsPanelTemplate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置可创建用于控制项布局的面板的模板。</summary>
        <value>一个 <see cref="T:System.Windows.Controls.ItemsPanelTemplate" /> 对象，该对象创建用于控制项布局的面板。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyChanged">
      <MemberSignature Language="C#" Value="protected virtual event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.PropertyChangedEventHandler PropertyChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Controls.GroupStyle.PropertyChanged" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Custom Event PropertyChanged As PropertyChangedEventHandler " FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual event System::ComponentModel::PropertyChangedEventHandler ^ PropertyChanged;" />
      <MemberSignature Language="F#" Value="member this.PropertyChanged : System.ComponentModel.PropertyChangedEventHandler " Usage="member this.PropertyChanged : System.ComponentModel.PropertyChangedEventHandler " />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Event PropertyChanged As PropertyChangedEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="netframework-4.0">E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在属性值更改时发生。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.INotifyPropertyChanged.PropertyChanged">
      <MemberSignature Language="C#" Value="event System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.PropertyChangedEventHandler System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Controls.GroupStyle.System#ComponentModel#INotifyPropertyChanged#PropertyChanged" />
      <MemberSignature Language="VB.NET" Value="Custom Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged" />
      <MemberSignature Language="F#" Value="member this.System.ComponentModel.INotifyPropertyChanged.PropertyChanged : System.ComponentModel.PropertyChangedEventHandler " Usage="member this.System.ComponentModel.INotifyPropertyChanged.PropertyChanged : System.ComponentModel.PropertyChangedEventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在属性值更改时发生。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
