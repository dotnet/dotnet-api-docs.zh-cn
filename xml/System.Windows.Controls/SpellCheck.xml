<Type Name="SpellCheck" FullName="System.Windows.Controls.SpellCheck">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b0fc6ef7396d6f82db665e81ce7f63c91e2c8c84" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="86312973" /></Metadata><TypeSignature Language="C#" Value="public sealed class SpellCheck" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpellCheck extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.SpellCheck" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SpellCheck" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpellCheck sealed" />
  <TypeSignature Language="F#" Value="type SpellCheck = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为文本编辑控件（如 <see cref="T:System.Windows.Controls.TextBox" /> 和 <see cref="T:System.Windows.Controls.RichTextBox" />）提供实时拼写检查功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要启用拼写检查器，请 <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> `true` 在文本编辑控件上将属性设置为。 启用此拼写检查器后，将使用红色波浪线为拼写错误的单词加下划线，如下图所示。 仅当 WPF 提供默认字典时，才支持拼写检查器。 在中 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] ，WPF 提供英语、法语、德语和西班牙语的字典。  
  
 ![带有拼写&#45;检查的 Textbox](~/add/media/editing-textbox-with-spellchecking.png "具有拼写检查功能的 TextBox")  
  
 若要添加自定义字典，请将词典文件的位置添加到 <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> 集合中。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CustomDictionaries">
      <MemberSignature Language="C#" Value="public System.Collections.IList CustomDictionaries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList CustomDictionaries" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomDictionaries As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ CustomDictionaries { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomDictionaries : System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于自定义拼写检查的词典文件位置的集合。</summary>
        <value>词典文件位置的集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 自定义字典使用词典文件，这些文件是扩展名为 lex 的文本文件。 词典文件的每一行都包含一个被视为合法拼写的单词。 文件的第一行可以指定 (LCID) 的区域设置标识符。 如果未指定区域设置，则字典适用于所有语言。 有关详细信息，请参阅 [区域设置 id](https://go.microsoft.com/fwlink/?LinkId=165561)。 下面的示例演示了英语词典文件的前几行。  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 若要为派生自的任何类指定一个或多个自定义字典 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.Primitives.TextBoxBase> ，请通过将文件的 URI 添加到集合来指定词典文件的位置 <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> 。  
  
> [!NOTE]
>  使用 <xref:System.Collections.IList.Insert%2A> 将文件添加到集合将 <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> 导致异常。 请改用 <xref:System.Collections.IList.Add%2A> 和 <xref:System.Collections.IList.Remove%2A> 来更新集合。  
  
 在应用程序中，可以将字典文件作为内容文件包括在本地计算机上，也可以将其作为资源文件（编译到本地引用的程序集）中。 可以通过使用包 Uri 来引用该文件。 有关详细信息，请参阅 [WPF 中的 Pack uri](/dotnet/framework/wpf/app-development/pack-uris-in-wpf)。  
  
 若要启用拼写检查器，请在 <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> `true` <xref:System.Windows.Controls.TextBox> 派生自的任何类上将或的属性设置为 <xref:System.Windows.Controls.Primitives.TextBoxBase> 。 <xref:System.Windows.Controls.TextBox>除了默认拼写检查器外，还使用了的所有自定义字典。 有关拼写检查器的详细信息，请参阅 <xref:System.Windows.Controls.SpellCheck> 。  
  
   
  
## Examples  
 下面的示例演示如何将两个自定义字典添加到 <xref:System.Windows.Controls.RichTextBox> 中。 第一个自定义字典 (lex) 在 XAML 中添加。 该文件作为内容文件包含在应用程序中，并复制到输出目录。 若要使用 <xref:System.Uri> 元素，必须包含系统命名空间。  
  
 `xmlns:sys="clr-namespace:System;assembly=System"`  
  
 第二个自定义字典 (lex) 添加到 <xref:System.Windows.Controls.Primitives.ButtonBase.Click> 事件处理程序中。 此文件包含为资源文件并编译到名为 WPFCustomDictionary 的应用程序程序集中。  
  
 [!code-xaml[WpfCustomDictionary#1](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml#1)]  
  
 [!code-csharp[WpfCustomDictionary#2](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml.cs#2)]
 [!code-vb[WpfCustomDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/wpfcustomdictionary/vb/mainwindow.xaml.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
        <altmember cref="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      </Docs>
    </Member>
    <Member MemberName="CustomDictionariesProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomDictionariesProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomDictionariesProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomDictionariesProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomDictionariesProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomDictionariesProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomDictionaries">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetCustomDictionaries (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetCustomDictionaries(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCustomDictionaries (textBoxBase As TextBoxBase) As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetCustomDictionaries(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetCustomDictionaries : System.Windows.Controls.Primitives.TextBoxBase -&gt; System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.GetCustomDictionaries textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">检索其词典文件集合的文本编辑控件。</param>
        <summary>获取词典文件位置的集合，这些词典文件用于指定的文本编辑控件上的自定义拼写检查器。</summary>
        <returns>词典文件位置的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 自定义字典使用词典文件，这些文件是扩展名为 lex 的简单文本文件。 词典文件的每一行都包含一个被视为合法拼写的单词。 文件的第一行可以指定 (LCID) 的区域设置标识符。 如果未指定区域设置，则字典适用于所有语言。 有关详细信息，请参阅 [区域设置 id](https://go.microsoft.com/fwlink/?LinkId=165561)。 下面的示例演示了英语词典文件的前几行。  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 若要为或派生自的任何类指定一个或多个自定义字典 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.Primitives.TextBoxBase> ，请通过将文件的 URI 添加到方法返回的中来指定词典文件的位置 <xref:System.Collections.IList> <xref:System.Windows.Controls.SpellCheck.GetCustomDictionaries%2A> 。  
  
 若要启用拼写检查器，请在 <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> `true` <xref:System.Windows.Controls.TextBox> 派生自的任何类上将或的属性设置为 <xref:System.Windows.Controls.Primitives.TextBoxBase> 。 <xref:System.Windows.Controls.TextBox>除了默认拼写检查器外，还使用了的所有自定义字典。 有关拼写检查器的详细信息，请参阅 <xref:System.Windows.Controls.SpellCheck> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="textBoxBase" /> 为 <see langword="null" />。</exception>
        <altmember cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
      </Docs>
    </Member>
    <Member MemberName="GetIsEnabled">
      <MemberSignature Language="C#" Value="public static bool GetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetIsEnabled (textBoxBase As TextBoxBase) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase -&gt; bool" Usage="System.Windows.Controls.SpellCheck.GetIsEnabled textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">要检查的文本编辑控件。 示例控件包括 <see cref="T:System.Windows.Controls.TextBox" /> 和 <see cref="T:System.Windows.Controls.RichTextBox" />。</param>
        <summary>返回一个值，该值指示是否对指定的文本编辑控件启用拼写检查器。</summary>
        <returns>如果对该文本编辑控件启用拼写检查器，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="textBoxBase" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值确定是否对此文本编辑控件（如 <see cref="T:System.Windows.Controls.TextBox" /> 或 <see cref="T:System.Windows.Controls.RichTextBox" />）启用拼写检查器。</summary>
        <value>如果对控件启用拼写检查器，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此依赖属性还具有专用的只写附加属性用法。 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]用于设置属性的语法是 `<` *textBoxBaseClass* **拼写检查. IsEnabled** `="` *boolValue* `" .../>` ，其中*textBoxBaseClass*是派生自的类的对象元素 <xref:System.Windows.Controls.Primitives.TextBoxBase> ， *boolValue*是 `true` 或 (不 `false` 区分大小写) 。 若要将属性设置为代码中的附加属性，请参阅 <xref:System.Windows.Controls.SpellCheck.SetIsEnabled%2A> 方法。 没有匹配的 `GetIsEnabled` 访问器。 若要获取该值，请 <xref:System.Windows.Controls.SpellCheck> 从属性获取当前对象 <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> ，然后从该属性获取属性的值 <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> <xref:System.Windows.Controls.SpellCheck> 。  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Controls.SpellCheck.IsEnabledProperty>|  
|元数据属性设置为 `true`|无|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Controls.SpellCheck.IsEnabled" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsEnabled">
      <MemberSignature Language="C#" Value="public static void SetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetIsEnabled (textBoxBase As TextBoxBase, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, bool value);" />
      <MemberSignature Language="F#" Value="static member SetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase * bool -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetIsEnabled (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">要在其上启用或禁用拼写检查的文本编辑控件。 示例控件包括 <see cref="T:System.Windows.Controls.TextBox" /> 和 <see cref="T:System.Windows.Controls.RichTextBox" />。</param>
        <param name="value">一个布尔值，用于指定是否在文本编辑控件上启用拼写检查。</param>
        <summary>启用或禁用指定的文本编辑控件（如 <see cref="T:System.Windows.Controls.TextBox" /> 或 <see cref="T:System.Windows.Controls.RichTextBox" />）上的拼写检查。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法启用中的属性的附加属性用法 <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 。 下面的示例演示了 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 用法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpellingReform">
      <MemberSignature Language="C#" Value="public static void SetSpellingReform (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, System.Windows.Controls.SpellingReform value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSpellingReform(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, valuetype System.Windows.Controls.SpellingReform value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetSpellingReform(System.Windows.Controls.Primitives.TextBoxBase,System.Windows.Controls.SpellingReform)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetSpellingReform (textBoxBase As TextBoxBase, value As SpellingReform)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSpellingReform(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, System::Windows::Controls::SpellingReform value);" />
      <MemberSignature Language="F#" Value="static member SetSpellingReform : System.Windows.Controls.Primitives.TextBoxBase * System.Windows.Controls.SpellingReform -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetSpellingReform (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Windows.Controls.SpellingReform" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">应用拼写检查器的文本编辑控件。 示例控件包括 <see cref="T:System.Windows.Controls.TextBox" /> 和 <see cref="T:System.Windows.Controls.RichTextBox" />。</param>
        <param name="value">确定拼写改革规则的 <see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" /> 值。</param>
        <summary>确定拼写检查器使用的拼写改革规则。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法访问的拼写改革规则指的是1990的法语和德语拼写抽取。 此方法在与任何其他语言一起使用时不起作用。  
  
 此方法启用中的属性的附加属性用法 <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReform">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.SpellingReform SpellingReform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.SpellingReform SpellingReform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberSignature Language="VB.NET" Value="Public Property SpellingReform As SpellingReform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::SpellingReform SpellingReform { System::Windows::Controls::SpellingReform get(); void set(System::Windows::Controls::SpellingReform value); };" />
      <MemberSignature Language="F#" Value="member this.SpellingReform : System.Windows.Controls.SpellingReform with get, set" Usage="System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.SpellingReform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置由拼写检查器使用的拼写修订规则。</summary>
        <value>由拼写检查器使用的拼写修订规则。 默认值对于法语是 <see cref="F:System.Windows.Controls.SpellingReform.PreAndPostreform" />，对于德语是 <see cref="F:System.Windows.Controls.SpellingReform.Postreform" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性确定的拼写改革规则是指法语和德语拼写抽取。 此属性与任何其他语言一起使用时不起作用。  
  
 此依赖属性还具有专用的只写附加属性用法。 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]用于设置属性的语法是 `<` *textBoxBaseClass* **拼写检查. SpellingReform** `="` *属于 enumvalue* `" .../>` ，其中*textBoxBaseClass*是派生自的类的对象元素 <xref:System.Windows.Controls.Primitives.TextBoxBase> ，*属于 enumvalue*是枚举值的字符串名称 <xref:System.Windows.Controls.SpellingReform> 。 若要将属性设置为代码中的附加属性，请参阅 <xref:System.Windows.Controls.SpellCheck.SetSpellingReform%2A> 方法。 没有匹配的 `GetSpellingReform` 访问器。 若要获取该值，请 <xref:System.Windows.Controls.SpellCheck> 从属性获取当前对象 <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> ，然后从该属性获取属性的值 <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> <xref:System.Windows.Controls.SpellCheck> 。  
  
<a name="dependencyPropertyInfo_SpellingReform"></a>   
## <a name="dependency-property-information"></a>依赖项属性信息  
  
|||  
|-|-|  
|标识符字段|<xref:System.Windows.Controls.SpellCheck.SpellingReformProperty>|  
|元数据属性设置为 `true`|无|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SpellingReformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SpellingReformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SpellingReformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SpellingReformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SpellingReformProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
