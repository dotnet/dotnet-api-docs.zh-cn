<Type Name="DataTemplateSelector" FullName="System.Windows.Controls.DataTemplateSelector">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2973ff1b41494164d6c573f805dcabfc4b1d5793" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83962364" /></Metadata><TypeSignature Language="C#" Value="public class DataTemplateSelector" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataTemplateSelector extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.DataTemplateSelector" />
  <TypeSignature Language="VB.NET" Value="Public Class DataTemplateSelector" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTemplateSelector" />
  <TypeSignature Language="F#" Value="type DataTemplateSelector = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一种方式，用于根据数据对象和数据绑定元素来选择 <see cref="T:System.Windows.DataTemplate" />。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，当您有多个 <xref:System.Windows.DataTemplate> 用于相同类型的对象，并且您希望提供自己的逻辑来根据每个数据对象的属性来选择要应用的 <xref:System.Windows.DataTemplate> 时，可以创建 <xref:System.Windows.Controls.DataTemplateSelector>。 请注意，如果您具有不同类型的对象，则可以设置 <xref:System.Windows.DataTemplate>上的 <xref:System.Windows.DataTemplate.DataType%2A> 属性。 如果这样做，则无需创建 <xref:System.Windows.Controls.DataTemplateSelector>。 此外，如果您的对象具有相同类型但具有不同的属性，则还可以考虑使用 <xref:System.Windows.DataTrigger> 或数据转换器。 有关详细信息，请参阅 [数据模板化概述](/dotnet/framework/wpf/data/data-templating-overview)。  
  
 若要创建模板选择器，请创建一个继承自 <xref:System.Windows.Controls.DataTemplateSelector> 的类并重写 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> 方法。 定义类后，可以将类的实例分配给元素的模板选择器属性。  
  
   
  
## Examples  
 在此示例中，绑定源是 `Task` 对象的列表。 `Priority``Task` 对象的属性之一。 定义了两个数据模板： `myTaskTemplate` 和 `importantTaskTemplate`。  
  
 若要根据数据对象的 `Priority` 值提供逻辑来选择要使用的 <xref:System.Windows.DataTemplate>，请创建 <xref:System.Windows.Controls.DataTemplateSelector> 的子类并重写 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> 方法。 在下面的示例中，<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> 方法提供逻辑，以根据 `Priority` 属性的值返回相应的模板。 在封装 <xref:System.Windows.Window> 元素的资源中找到要返回的模板。  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 然后，我们可以将 `TaskListDataTemplateSelector` 声明为资源：  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 若要使用模板选择器资源，请将其分配给 <xref:System.Windows.Controls.ListBox>的 <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> 属性。 <xref:System.Windows.Controls.ListBox> 为基础集合中的每个项调用 `TaskListDataTemplateSelector` 的 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> 方法。 该调用会将数据对象作为项参数传递。 然后，将方法返回 <xref:System.Windows.DataTemplate> 应用于该数据对象。  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 有关完整示例，请参阅[数据模板化示例简介](https://go.microsoft.com/fwlink/?LinkID=160009)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataTemplateSelector ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataTemplateSelector();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Controls.DataTemplateSelector" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectTemplate">
      <MemberSignature Language="C#" Value="public virtual System.Windows.DataTemplate SelectTemplate (object item, System.Windows.DependencyObject container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.DataTemplate SelectTemplate(object item, class System.Windows.DependencyObject container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SelectTemplate (item As Object, container As DependencyObject) As DataTemplate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::DataTemplate ^ SelectTemplate(System::Object ^ item, System::Windows::DependencyObject ^ container);" />
      <MemberSignature Language="F#" Value="abstract member SelectTemplate : obj * System.Windows.DependencyObject -&gt; System.Windows.DataTemplate&#xA;override this.SelectTemplate : obj * System.Windows.DependencyObject -&gt; System.Windows.DataTemplate" Usage="dataTemplateSelector.SelectTemplate (item, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DataTemplate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
        <Parameter Name="container" Type="System.Windows.DependencyObject" />
      </Parameters>
      <Docs>
        <param name="item">要为其选择模板的数据对象。</param>
        <param name="container">数据绑定对象。</param>
        <summary>当在派生类中重写时，返回基于自定义逻辑的 <see cref="T:System.Windows.DataTemplate" />。</summary>
        <returns>返回 <see cref="T:System.Windows.DataTemplate" /> 或 <see langword="null" />。 默认值是 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，当您为同一类型的对象定义多个数据模板时，可以使用模板选择器。 例如，如果绑定源是列出学生对象的列表，并且你想要将特定模板应用于兼职学生。 为此，可以创建一个继承自 <xref:System.Windows.Controls.DataTemplateSelector> 并重写 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> 方法的类。 定义类后，可以将类的实例分配给元素的模板选择器属性。  
  
   
  
## Examples  
 在此示例中，绑定源是 `Task` 对象的列表。 `Priority``Task` 对象的属性之一。 定义了两个数据模板： `myTaskTemplate` 和 `importantTaskTemplate`。  
  
 若要根据数据对象的 `Priority` 值提供逻辑来选择要使用的 <xref:System.Windows.DataTemplate>，请创建 <xref:System.Windows.Controls.DataTemplateSelector> 的子类并重写 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> 方法。 在下面的示例中，<xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> 方法提供逻辑，以根据 `Priority` 属性的值返回相应的模板。 在封装 <xref:System.Windows.Window> 元素的资源中找到要返回的模板。  
  
 [!code-csharp[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/TaskListDataTemplateSelector.cs#dtsclass)]
 [!code-vb[DataTemplatingIntro_snip#DTSClass](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DataTemplatingIntro_snip/visualbasic/tasklistdatatemplateselector.vb#dtsclass)]  
  
 然后，我们可以将 `TaskListDataTemplateSelector` 声明为资源：  
  
 [!code-xaml[DataTemplatingIntro_snip#R1](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r1)]  
[!code-xaml[DataTemplatingIntro_snip#DTS](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#dts)]  
[!code-xaml[DataTemplatingIntro_snip#R2](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#r2)]  
  
 若要使用模板选择器资源，请将其分配给 <xref:System.Windows.Controls.ListBox>的 <xref:System.Windows.Controls.ItemsControl.ItemTemplateSelector%2A> 属性。 <xref:System.Windows.Controls.ListBox> 为基础集合中的每个项调用 `TaskListDataTemplateSelector` 的 <xref:System.Windows.Controls.DataTemplateSelector.SelectTemplate%2A> 方法。 该调用会将数据对象作为项参数传递。 然后，将方法返回 <xref:System.Windows.DataTemplate> 应用于该数据对象。  
  
 [!code-xaml[DataTemplatingIntro_snip#ItemTemplateSelector](~/samples/snippets/csharp/VS_Snippets_Wpf/DataTemplatingIntro_snip/CSharp/Window1.xaml#itemtemplateselector)]  
  
 有关完整示例，请参阅[数据模板化示例简介](https://go.microsoft.com/fwlink/?LinkID=160009)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
