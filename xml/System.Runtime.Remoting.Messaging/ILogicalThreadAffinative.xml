<Type Name="ILogicalThreadAffinative" FullName="System.Runtime.Remoting.Messaging.ILogicalThreadAffinative">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1d2b0406894bc8ef21ed0581e71e919bde013216" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86758254" /></Metadata><TypeSignature Language="C#" Value="public interface ILogicalThreadAffinative" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ILogicalThreadAffinative" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />
  <TypeSignature Language="VB.NET" Value="Public Interface ILogicalThreadAffinative" />
  <TypeSignature Language="C++ CLI" Value="public interface class ILogicalThreadAffinative" />
  <TypeSignature Language="F#" Value="type ILogicalThreadAffinative = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="0ea31-101">标记可以在 <see cref="T:System.AppDomain" /> 中传播到 <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" /> 外部的对象。</span><span class="sxs-lookup"><span data-stu-id="0ea31-101">Marks an object that can propagate outside of an <see cref="T:System.AppDomain" /> in a <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0ea31-102">当远程方法调用另一个中的对象时 <xref:System.AppDomain> ，当前 <xref:System.Runtime.Remoting.Messaging.CallContext> 类将生成一个 <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> 与远程位置的调用一起传输的。</span><span class="sxs-lookup"><span data-stu-id="0ea31-102">When a remote method call is made to an object in another <xref:System.AppDomain>, the current <xref:System.Runtime.Remoting.Messaging.CallContext> class generates a <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> that travels along with the call to the remote location.</span></span> <span data-ttu-id="0ea31-103">只有公开 <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> 接口并存储在中的对象才 <xref:System.Runtime.Remoting.Messaging.CallContext> 会在之外传播 <xref:System.AppDomain> 。</span><span class="sxs-lookup"><span data-stu-id="0ea31-103">Only objects that expose the <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> interface and are stored in the <xref:System.Runtime.Remoting.Messaging.CallContext> are propagated outside the <xref:System.AppDomain>.</span></span> <span data-ttu-id="0ea31-104">不支持此接口的对象不在 <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> 具有远程方法调用的实例中传输。</span><span class="sxs-lookup"><span data-stu-id="0ea31-104">Objects that do not support this interface are not transmitted in <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> instances with remote method calls.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0ea31-105">下面的代码示例演示如何使用接口将 <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> [主体和标识对象](/dotnet/standard/security/principal-and-identity-objects)传输到远程位置以进行标识。</span><span class="sxs-lookup"><span data-stu-id="0ea31-105">The following code example demonstrates the use of the <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> interface to transmit [Principal and Identity Objects](/dotnet/standard/security/principal-and-identity-objects) to a remote location for identification.</span></span> <span data-ttu-id="0ea31-106">若要查看该 `HelloServiceClass` 示例中使用的类的代码，请参阅方法的示例 <xref:System.Runtime.Remoting.Messaging.CallContext.GetData%2A> 。</span><span class="sxs-lookup"><span data-stu-id="0ea31-106">To view the code for the `HelloServiceClass` class used in the sample, see the example for the <xref:System.Runtime.Remoting.Messaging.CallContext.GetData%2A> method.</span></span> <span data-ttu-id="0ea31-107">若要查看此示例中使用的服务器类的代码，请参阅类的示例 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="0ea31-107">To view the code for the server class used in this sample, see example for the <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> class.</span></span> <span data-ttu-id="0ea31-108">若要查看该示例中使用的客户端类的代码，请参阅类的示例 <xref:System.Runtime.Remoting.Messaging.CallContext> 。</span><span class="sxs-lookup"><span data-stu-id="0ea31-108">To view the code for the client class used in the sample, see the example for the <xref:System.Runtime.Remoting.Messaging.CallContext> class.</span></span>  
  
 [!code-cpp[CallContext#2](~/samples/snippets/cpp/VS_Snippets_Remoting/CallContext/CPP/service.cpp#2)]
 [!code-csharp[CallContext#2](~/samples/snippets/csharp/VS_Snippets_Remoting/CallContext/CS/service.cs#2)]
 [!code-vb[CallContext#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CallContext/VB/service.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>
