<Type Name="ILogicalThreadAffinative" FullName="System.Runtime.Remoting.Messaging.ILogicalThreadAffinative">
  <Metadata><Meta Name="ms.openlocfilehash" Value="51a6d04f144e27cbb689b21a2d8e3b6e85fc6397" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83953315" /></Metadata><TypeSignature Language="C#" Value="public interface ILogicalThreadAffinative" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ILogicalThreadAffinative" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative" />
  <TypeSignature Language="VB.NET" Value="Public Interface ILogicalThreadAffinative" />
  <TypeSignature Language="C++ CLI" Value="public interface class ILogicalThreadAffinative" />
  <TypeSignature Language="F#" Value="type ILogicalThreadAffinative = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>标记可以在 <see cref="T:System.AppDomain" /> 中传播到 <see cref="T:System.Runtime.Remoting.Messaging.LogicalCallContext" /> 外部的对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果对另一 <xref:System.AppDomain>中的对象进行远程方法调用，则当前 <xref:System.Runtime.Remoting.Messaging.CallContext> 类将生成一个与远程位置的调用一起传输的 <xref:System.Runtime.Remoting.Messaging.LogicalCallContext>。 只会在 <xref:System.AppDomain>之外传播公开 <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> 接口并存储在 <xref:System.Runtime.Remoting.Messaging.CallContext> 中的对象。 如果对象不支持此接口，则不会在具有远程方法调用的 <xref:System.Runtime.Remoting.Messaging.LogicalCallContext> 实例中传输。  
  
   
  
## Examples  
 下面的代码示例演示如何使用 <xref:System.Runtime.Remoting.Messaging.ILogicalThreadAffinative> 接口将[主体和标识对象](/dotnet/standard/security/principal-and-identity-objects)传输到远程位置以进行标识。 若要查看该示例中使用的 `HelloServiceClass` 类的代码，请参阅 <xref:System.Runtime.Remoting.Messaging.CallContext.GetData%2A> 方法的示例。 若要查看此示例中使用的服务器类的代码，请参阅 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> 类的示例。 若要查看该示例中使用的客户端类的代码，请参阅 <xref:System.Runtime.Remoting.Messaging.CallContext> 类的示例。  
  
 [!code-cpp[CallContext#2](~/samples/snippets/cpp/VS_Snippets_Remoting/CallContext/CPP/service.cpp#2)]
 [!code-csharp[CallContext#2](~/samples/snippets/csharp/VS_Snippets_Remoting/CallContext/CS/service.cs#2)]
 [!code-vb[CallContext#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CallContext/VB/service.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>
