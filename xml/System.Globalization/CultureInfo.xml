<Type Name="CultureInfo" FullName="System.Globalization.CultureInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f842385e9d664a1e43aedafb1701115602f620b4" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89812061" /></Metadata><TypeSignature Language="C#" Value="public class CultureInfo : IFormatProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CultureInfo extends System.Object implements class System.IFormatProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CultureInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class CultureInfo&#xA;Implements IFormatProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureInfo : IFormatProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type CultureInfo = class&#xA;    interface IFormatProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public class CultureInfo : ICloneable, IFormatProvider" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CultureInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public Class CultureInfo&#xA;Implements ICloneable, IFormatProvider" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureInfo : ICloneable, IFormatProvider" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type CultureInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable CultureInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CultureInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit CultureInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Globalization" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Globalization" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Globalization" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Globalization" FromVersion="4.1.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Globalization" FromVersion="4.1.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供有关特定区域性（对于非托管代码开发，则称为“区域设置”）的信息。 这些信息包括区域性的名称、书写系统、使用的日历、字符串的排序顺序以及对日期和数字的格式化设置。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo>类提供区域性特定的信息，如语言、子语言、国家/地区、日历和与特定区域性关联的约定。 此类还提供对 <xref:System.Globalization.DateTimeFormatInfo> 、、 <xref:System.Globalization.NumberFormatInfo> <xref:System.Globalization.CompareInfo> 和对象的特定于区域性的实例的访问 <xref:System.Globalization.TextInfo> 。 这些对象包含特定于区域性的操作所需的信息，例如大小写、设置日期和数字的格式以及比较字符串。 <xref:System.Globalization.CultureInfo>类直接或间接用于格式化、分析或操作区域性特定数据的类，如 <xref:System.String> 、 <xref:System.DateTime> 、 <xref:System.DateTimeOffset> 和数值类型。  
  
 本部分内容：  
  
 [区域性名称和标识符](#CultureNames)   
 [固定、非特定区域性和特定区域性](#Invariant)   
 [自定义区域性](#Custom)   
 [动态区域性数据](#Dynamic)   
 [CultureInfo 和 culture 数据](#cultureinfo-and-cultural-data)[当前区域性和当前 UI 区域性](#Current)   
 [获取所有区域性](#GetAll)   
 [区域性和线程](#Threads)   
 [区域性和应用程序域](#AppDomain)   
 [区域性和基于任务的异步操作](#Async)   
 [CultureInfo 对象序列化](#Serialization)   
 [控制面板替代](#CPanel)   
 [替换排序顺序](#AlternateSort)   
 [区域性和 Windows 应用](#Windows)  

<a name="CultureNames"></a>   
## <a name="culture-names-and-identifiers"></a>区域性名称和标识符  
 <xref:System.Globalization.CultureInfo>类基于 RFC 4646 为每个区域性指定唯一名称。 该名称是与语言关联的 ISO 639 2 字母小写区域性代码的组合，以及与国家或地区关联的 ISO 3166 2 字母大写子区域性代码。 此外，对于面向 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 或更高版本且在 Windows 10 或更高版本下运行的应用程序，支持与有效的 BCP-47 语言标记对应的区域性名称。  
  
> [!NOTE]
>  当区域性名称传递给类构造函数或方法（如 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> 或 <xref:System.Globalization.CultureInfo> ）时，其大小写不重要。  
  
 基于 RFC 4646 的区域性名称的格式为*为 languagecode2* >- *country/regioncode2*，其中*为 languagecode2*是两个字母的语言代码，*国家/regioncode2*是两个字母子区域性代码。 示例包括代表日语（日本）的 ja-JP 和代表英语（美国）的 en-US。 在双字母语言代码不可用的情况下，使用派生自 ISO 639-2 的三字母代码。  
  
 请注意，某些区域性名称还指定了 ISO 15924 脚本。 例如，Cyrl 指定了西里尔文脚本，Latn 指定了拉丁语脚本。 包含脚本的区域性名称使用模式*为 languagecode2* - *scripttag* - *country/regioncode2*。 此类区域性名称的一个示例是 uz-Cyrl-UZ for 乌兹别克 (西里尔语、乌兹别克斯坦) 。 在 windows Vista 之前的 windows 操作系统上，包含脚本的区域性名称使用模式*为 languagecode2* - *country/regioncode2* - *scripttag*，例如 uz-uz-Cyrl for 乌兹别克 (西里尔语、乌兹别克斯坦) 。  
  
 非特定区域性仅由两字母小写语言代码指定。 例如，fr 指定法语的非特定区域性，而 de 指定了德语的非特定区域性。  
  
> [!NOTE]
>  有两个区域性名称与此规则不相矛盾。 区域性中文 (简化) ，名为 zh-chs-Hans，中文 (传统) 名为 zh-chs-Zh-hant，是非特定区域性。 区域性名称表示当前标准，并且应使用，除非您有理由使用旧名称 zh-chs 和 zh-chs-CHT。  
  
 区域性标识符是标准的国际数字缩写，具有唯一标识某个已安装的区域性所需的组件。 应用程序可以使用预定义的区域性标识符或定义自定义标识符。  
  
 此类和命名空间中的其他类使用一些预定义的区域性名称和标识符 <xref:System.Globalization?displayProperty=nameWithType> 。 有关 Windows 系统的详细区域性信息，请参阅[windows 支持的语言/区域名称列表](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)中的**语言标记**列。 列名遵循 [BCP 47](https://tools.ietf.org/html/bcp47) 定义的标准。  
  
 请记住，区域性名称和标识符仅表示在特定计算机上可找到的区域性的子集。 Windows 版本或 service pack 可以更改可用的区域性。 应用程序使用类添加自定义区域性 <xref:System.Globalization.CultureAndRegionInfoBuilder> 。 用户使用 Microsoft 区域设置生成器工具添加自己的自定义区域性。 Microsoft 区域设置生成器使用类编写托管代码 `CultureAndRegionInfoBuilder` 。  
  
 多个不同的名称与区域性紧密关联，这就是与以下类成员关联的名称：  
  
-   <xref:System.Globalization.CultureInfo.ToString%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>  
  
-   <xref:System.Globalization.CompareInfo.Name%2A?displayProperty=nameWithType>  
  
<a name="Invariant"></a>   
## <a name="invariant-neutral-and-specific-cultures"></a>固定、非特定区域性和特定区域性  
 通常将区域性分组为三个集：固定区域性、非特定区域性和特定区域性。  
  
 固定区域性不区分区域性。 应用程序通过使用空字符串 ( "" ) 或通过其标识符，按名称指定固定区域性。 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 定义固定区域性的实例。 它与英语语言相关联，而不是与任何国家/地区相关联。 它用于 `Globalization` 命名空间中需要区域性的几乎所有方法。  
  
 非特定区域性是一种与语言（而不是国家/地区）关联的区域性。 特定区域性是一种与语言和国家/地区关联的区域性。 例如，fr 是法语区域性的非特定名称，fr 是特定法语 (法国) 区域性的名称。 请注意，简体中文 (简化) 和中文 (传统的) 也被视为非特定区域性。  
  
 <xref:System.Globalization.CompareInfo>不建议为非特定区域性创建类的实例，因为它包含的数据是任意的。 若要显示数据并对其进行排序，请同时指定语言和区域。 此外， <xref:System.Globalization.CompareInfo.Name%2A> <xref:System.Globalization.CompareInfo> 为非特定区域性创建的对象的属性仅返回国家/地区，而不包含区域。  
  
 定义的区域性有一个层次结构，其中特定区域性的父区域性为非特定区域性，而非特定区域性的父级为固定区域性。 <xref:System.Globalization.CultureInfo.Parent%2A>属性包含与特定区域性关联的非特定区域性。 自定义区域性应将 <xref:System.Globalization.CultureInfo.Parent%2A> 属性定义为符合此模式。  
  
 如果特定区域性的资源在操作系统中不可用，则使用关联的非特定区域性的资源。 如果非特定区域性的资源不可用，则将使用嵌入到主程序集中的资源。 有关资源回退进程的详细信息，请参阅 [打包和部署资源](/dotnet/framework/resources/packaging-and-deploying-resources-in-desktop-apps)。  
  
 Windows API 中区域设置的列表与 .NET Framework 支持的区域性列表略有不同。 如果需要与 Windows 之间的互操作性，例如通过 p/invoke 机制，应用程序应使用为操作系统定义的特定区域性。 使用特定的区域性可确保与等效的 Windows 区域设置保持一致，该区域设置的区域设置标识符与相同 <xref:System.Globalization.CultureInfo.LCID%2A> 。  
  
 只能 <xref:System.Globalization.DateTimeFormatInfo> <xref:System.Globalization.NumberFormatInfo> 为固定区域性或特定区域性创建或，而不能为非特定区域性创建或。  
  
 如果 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> 为， <xref:System.Globalization.TaiwanCalendar> 但未 <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> 设置为 zh-chs，则 <xref:System.Globalization.DateTimeFormatInfo.NativeCalendarName%2A?displayProperty=nameWithType> <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A?displayProperty=nameWithType> 和将 <xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A?displayProperty=nameWithType> 返回空字符串 ( "" ) 。  
  
<a name="Custom"></a>   
## <a name="custom-cultures"></a>自定义区域性  
 除了 Windows 操作系统和 .NET Framework 支持的预定义区域性外，.NET Framework 还支持三种类型的自定义区域性：  
  
-   用于补充 Windows 或 .NET Framework 中可用的区域性的新区域性。 例如，应用程序可以 <xref:System.Globalization.CultureInfo> 在系统上安装表示 fj-fj (或 Fijan (斐济) # A3 区域性的对象。  
  
-   替换区域性，其属性不同于 Windows 支持的标准区域性属性和 .NET Framework。  
  
-   具有用户替代的标准区域性。 用户可以使用 "**控制面板**" 中的 "**区域和语言**" 应用程序自定义现有区域性的属性值。  
  
> [!NOTE]
>  可以使用 <xref:System.Globalization.CultureAndRegionInfoBuilder> 类定义、保存和注册补充或替换现有区域性的自定义区域性。 <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A?displayProperty=nameWithType>方法将创建可用于在目标系统上安装自定义区域性 (LDML) 文件的区域设置数据标记语言。 有关使用 <xref:System.Globalization.CultureAndRegionInfoBuilder> 类创建新的或替换区域性的分步信息，请参阅 <xref:System.Globalization.CultureAndRegionInfoBuilder> 类主题。  
  
 由于 .NET Framework 支持自定义区域性，因此，在使用区域性特定数据时，应考虑以下事项：  
  
-   自定义区域性的值可以超出预定义区域性的范围。 例如，某些区域性具有特别长的月份名称、意外的日期或时间格式或其他异常数据。  
  
-   当您在用户界面中显示特定于区域性的数据时，您应该遵循用户的自定义设置;例如，用户可能需要24小时制或 yyyyMMdd 日期格式。  
  
-   请记住，自定义区域性会重写默认值。 因此，您不能认为区域性数据是稳定的。 将来可能会更改国家/地区名称、数字和日期格式和拼写。 如果要序列化要传递给日期和时间分析函数的区分区域性的数据（如日期和时间字符串），则应使用固定区域性或特定的。  
  
 <xref:System.Globalization.CultureInfo.CultureTypes%2A>系统上安装的自定义区域性的属性值包括 <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> 标志，并为自定义区域性分配 <xref:System.Globalization.CultureInfo.LCID%2A> 属性值 `LOCALE_CUSTOM_UNSPECIFIED` (0x1000 或 4096) 。 请注意，从 Windows 10 开始，还会将此值分配给缺少完全区域性数据的系统定义的区域性。  

## <a name="cultureinfo-and-cultural-data"></a>CultureInfo 和文化数据

.NET 根据实现、平台和版本，从各种源中派生其文化数据：

- 在 .NET Framework 3.5 及更早版本中，区域性数据由 Windows 操作系统和 .NET Framework 提供。

- 在 .NET Framework 4 及更高版本中，区域性数据由 Windows 操作系统提供。

- 在 Windows 上运行的 .NET Core 的所有版本中，区域性数据由 Windows 操作系统提供。

- 在 Unix 平台上运行的 .NET Core 的所有版本中，区域性数据由 [Unicode (ICU) 库的国际组件](http://site.icu-project.org/)提供。 ICU 库的特定版本取决于单个操作系统。

因此，在特定 .NET 实现、平台或版本上可用的区域性在不同的 .NET 实现、平台或版本中可能不可用。

某些 `CultureInfo` 对象因基础平台而异。 具体而言，"zh-chs" 或中文 (简体中文、中国) 和 zh-chs，或中文 (传统的台湾) ，它们在 Windows 系统上都是可用的，但它们是 Unix 系统上的别名。 "zh-chs" 是 "zh-chs-Hans" 区域性的别名，"zh-chs-隶书" 是 "zh-chs-Zh-hant" 区域性的别名。 对方法的调用不返回化名为的区域性， <xref:System.Globalization.CultureInfo.GetCultures%2A> 它可能具有不同于其 Windows 对应项的不同属性值（包括不同的 <xref:System.Globalization.CultureInfo.Parent> 区域性）。 对于 zh-chs 和 zh-chs，这些 differenes 包括以下各项：

- 在 Windows 系统中，"zh-chs" 区域性的父区域性为 "zh-chs-Hans"，"zh-chs" 区域性的父区域性为 "zh-chs-Zh-hant"。 这两个区域性的父区域性均为 "zh-chs"。 在 Unix 系统上，这两个区域性的父代为 "zh-chs"。 这意味着，如果不为 "zh-chs" 或 "zh-chs" 区域性提供区域性特定的资源，但确实为非特定 "zh-chs" 或 "zh-chs-Zh-hant" 区域性提供了资源，则应用程序将在 Windows 上而不是在 Unix 上加载非特定区域性的资源。 在 Unix 系统上，必须将线程显式设置 <xref:System.Globalization.CultureInfo.CurrentUICulture> 为 "zh-chs-Hans" 或 "zh-chs-zh-hant"。 

- 在 Windows 系统上，对 <xref:System.Globalization.CultureInfo.Equals%2A?displayProperty=nameWithType> 表示 "zh-chs" 区域性的实例调用，并向其传递一个 "zh-chs-Hans" 实例返回 `true` 。 在 Unix 系统上，方法调用返回 `false` 。 此行为也适用于 <xref:System.Globalization.CultureInfo.Equals%2A> 在 "zh-chs" 实例上调用 <xref:System.Globalization.CultureInfo> 并向其传递一个 "Zh-chs-Zh-hant-隶书" 实例。

<a name="Dynamic"></a>   
## <a name="dynamic-culture-data"></a>动态区域性数据  
 区域性数据是动态的，但固定区域性除外。 即使对于预定义的区域性也是如此。 例如，国家或地区采用新货币，更改单词的拼写或更改其首选日历，区域性定义会更改以跟踪此情况。  自定义区域性如有更改，恕不另行通知，任何特定的区域性都可能由自定义的替换区域性重写。 另外，如下面所述，单个用户可以重写文化首选项。 应用程序在运行时应始终获取区域性数据。  
  
> [!CAUTION]
>  保存数据时，应用程序应使用固定区域性、二进制格式或特定于区域性的格式。 根据与特定区域性关联的当前值（而不是固定区域性）保存的数据，如果该区域性发生更改，则可能会变得不可读或可能更改。  
  
<a name="Current"></a>   
## <a name="the-current-culture-and-current-ui-culture"></a>当前区域性和当前 UI 区域性  
 .NET 应用程序中的每个线程都有当前区域性和当前 UI 区域性。 当前区域性确定日期、时间、数字和货币值的格式设置约定、文本的排序顺序、大小写约定以及比较字符串的方式。 当前 UI 区域性用于在运行时检索特定于区域性的资源。  
  
> [!NOTE]
>  有关如何根据每个线程确定当前和当前 UI 区域性的信息，请参阅 "  [区域性和线程](#Threads) " 一节。 有关如何在新应用程序域中执行的线程上以及跨应用程序域边界的线程上确定当前和当前 UI 区域性的信息，请参阅 [区域性和应用程序域](#AppDomain) 部分。 有关如何在执行基于任务的异步操作的线程上确定当前和当前的信息，请参阅 [区域性和基于任务的异步操作](#Async) 部分。  
  
 有关当前区域性的详细信息，请参阅 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 属性主题。 有关当前 UI 区域性的详细信息，请参阅 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> 属性主题。  
  
### <a name="retrieving-the-current-and-current-ui-cultures"></a>检索当前和当前的 UI 区域性  
 可以通过 <xref:System.Globalization.CultureInfo> 以下两种方式之一获取表示当前区域性的对象：  
  
-   通过检索属性的值 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 。  
  
-   检索 [Thread.currentthread.priority CurrentCulture](<xref:System.Threading.Thread.CurrentCulture>) 属性的值。  
  
 下面的示例检索两个属性值，比较它们以显示它们相等，并显示当前区域性的名称。  
  
 [!code-csharp[System.Globalization.CultureInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Current1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Current1.vb#1)]  
  
 可以通过 <xref:System.Globalization.CultureInfo> 以下两种方式之一获取表示当前 UI 区域性的对象：  
  
-   通过检索属性的值 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> 。  
  
-   检索 [Thread.currentthread.priority CurrentUICulture](<xref:System.Threading.Thread.CurrentUICulture>) 属性的值。  
  
 下面的示例检索两个属性值，比较它们以显示它们相等，并显示当前 UI 区域性的名称。  
  
 [!code-csharp[System.Globalization.CultureInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/CurrentUI1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/CurrentUI1.vb#2)]  
  
### <a name="setting-the-current-and-current-ui-cultures"></a>设置当前和当前的 UI 区域性  
 若要更改线程的区域性和 UI 区域性，请执行以下操作：  
  
1.  <xref:System.Globalization.CultureInfo>通过调用 <xref:System.Globalization.CultureInfo> 类构造函数并向其传递区域性的名称，来实例化表示该区域性的对象。 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29>如果新区域性与当前 Windows 区域性相同，则构造函数将实例化 <xref:System.Globalization.CultureInfo> 反映用户重写的对象。   <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29>构造函数允许你指定新的实例化 <xref:System.Globalization.CultureInfo> 对象是否反映用户重写（如果新区域性与当前 Windows 区域性相同）。  
  
2.  将 <xref:System.Globalization.CultureInfo> 对象分配给 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> .net Core 上的或属性，并 .NET Framework 4.6 及更高版本。  (在 .NET Framework 4.5.2 和更早版本上，可以将 `CultureInfo` 对象分配给 <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> 或 <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> 属性。 )    
  
 下面的示例检索当前区域性。 如果它不是法语 (法国) 区域性，则将当前区域性更改为法语 (法国) 。 否则，它会将当前区域性更改为法语 (卢森堡) 。  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 下面的示例检索当前区域性。 如果任何其他斯洛文尼亚 (斯洛文尼亚) 区域性，则它会将当前区域性更改为斯洛文尼亚 (斯洛文尼亚) 。 否则，它会将当前区域性更改为克罗地亚语 (克罗地亚) 。  
  
 [!code-csharp[System.Globalization.CultureInfo#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/ChangeUI1.cs#4)]
 [!code-vb[System.Globalization.CultureInfo#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/ChangeUI1.vb#4)]  
  
<a name="GetAll"></a>   
## <a name="getting-all-cultures"></a>获取所有区域性  
 可以通过调用方法来检索特定类别的区域性或本地计算机上可用的所有区域性的数组 <xref:System.Globalization.CultureInfo.GetCultures%2A> 。 例如，可以单独或组合检索自定义区域性、特定区域性或非特定区域性。  
  
 下面的示例调用 <xref:System.Globalization.CultureInfo.GetCultures%2A> 方法两次，第一次调用了 <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> 枚举成员以检索所有自定义区域性，然后将 <xref:System.Globalization.CultureTypes?displayProperty=nameWithType> 枚举成员用于检索所有替换区域性。  
  
 [!code-csharp[System.Globalization.CultureInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/GetCultures1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/GetCultures1.vb#5)]  
  
<a name="Threads"></a>   
## <a name="culture-and-threads"></a>区域性和线程  
 当启动新的应用程序线程时，它的当前区域性和当前 UI 区域性由当前系统区域性定义，而不是由当前线程区域性定义。 以下示例演示了差异。 它将应用程序线程的当前区域性和当前 UI 区域性设置为法语 (法国) 区域性 (fr-fr) 。 如果当前区域性已经是 fr-fr，则该示例会将其设置为英语 (美国) 区域性 (en-us) 。 它将三个随机数显示为货币值，然后创建一个新的线程，后者又将另外三个随机数作为货币值显示。 但如示例的输出所示，新线程显示的货币值并不反映法语 (法国) 区域性的格式约定，这与主应用程序线程的输出不同。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/defaultthread1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/defaultthread1.vb#1)]  
  
 在之前的 .NET Framework 版本中 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] ，确保主应用程序线程与所有其他工作线程共享相同的区域性的最常见方法是将应用程序范围的区域性的名称或 <xref:System.Globalization.CultureInfo> 表示应用程序范围的区域性的对象传递给 <xref:System.Threading.ParameterizedThreadStart?displayProperty=nameWithType> 委托。 下面的示例使用此方法来确保两个线程显示的货币值反映相同区域性的格式设置约定。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/perthread1.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/perthread1.vb#2)]  
  
 您可以通过调用方法以类似方式设置线程池线程的区域性和 UI 区域性 <xref:System.Threading.ThreadPool.QueueUserWorkItem%28System.Threading.WaitCallback%2CSystem.Object%29?displayProperty=nameWithType> 。  
  
 从开始 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] ，你可以通过将 <xref:System.Globalization.CultureInfo> 表示区域性的对象分配给 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 和属性，来更直接地设置应用程序域中所有线程的区域性和 UI 区域性 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 。 下面的示例使用这些属性来确保默认应用程序域中的所有线程共享相同的区域性。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/cs/setthreads1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Thread#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.thread/vb/setthreads1.vb#3)]  
  
> [!WARNING]
>  尽管 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 和 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 属性是静态成员，但它们仅定义了在设置这些属性值时当前为当前应用程序域的默认区域性和默认 UI 区域性。 有关详细信息，请参阅下一节 [区域性和应用程序域](#AppDomain)。  
  
 向 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 和属性赋值时 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> ，如果应用程序域中的线程的区域性和 UI 区域性没有显式分配有区域性，则这些线程的区域性和 UI 区域性也会更改。 但是，这些线程仅在当前应用程序域中执行时才会反映新的区域性设置。 如果这些线程在另一个应用程序域中执行，则它们的区域性将成为为该应用程序域定义的默认区域性。 因此，建议你始终设置主应用程序线程的区域性，而不是依赖于 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 和 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 属性来更改它。  
  
<a name="AppDomain"></a>   
## <a name="culture-and-application-domains"></a>区域性和应用程序域  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 和 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 是静态属性，仅在设置或检索属性值时为当前应用程序域显式定义默认区域性。 下面的示例将默认应用程序域中的默认区域性和默认 UI 区域性设置为法语 (法国) ，然后使用 <xref:System.AppDomainSetup> 类和 <xref:System.AppDomainInitializer> 委托将新应用程序域中的默认区域性和 UI 区域性设置为俄语 (俄罗斯) 。 然后，单个线程在每个应用程序域中执行两个方法。 请注意，不显式设置线程的区域性和 UI 区域性;它们派生自线程执行所在的应用程序域的默认区域性和 UI 区域性。 另请注意， <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> <xref:System.Globalization.CultureInfo> 当进行方法调用时，和属性将返回当前应用程序域的默认值。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/cs/appdomainex1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.AppDomain#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.appdomain/vb/appdomainex1.vb#1)]  
  
 有关区域性和应用程序域的详细信息，请参阅 [应用程序域](/dotnet/framework/app-domains/application-domains) 主题中的 "应用程序域和线程" 一节。  
  
<a name="Async"></a>   
## <a name="culture-and-task-based-asynchronous-operations"></a>区域性和基于任务的异步操作  
 [基于任务的异步编程模式](/dotnet/standard/parallel-programming/task-based-asynchronous-programming)使用 <xref:System.Threading.Tasks.Task> 和 <xref:System.Threading.Tasks.Task%601> 对象在线程池线程上异步执行委托。 运行特定任务的特定线程事先是未知的，但仅在运行时确定。  
  
 对于面向 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] 或更高版本的应用程序，区域性是异步操作的上下文的一部分。 换句话说，从面向的应用开始 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] ，异步操作默认继承从中 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 启动它们的线程的和属性的值 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 。 如果当前区域性或当前 UI 区域性与系统区域性不同，则当前区域性会跨越线程边界，并成为执行异步操作的线程池线程的当前区域性。  
  
 下面的示例提供了简单的演示。 它使用 <xref:System.Runtime.Versioning.TargetFrameworkAttribute> 属性来面向 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] 。 该示例定义了一个 <xref:System.Func%601> 委托，该委托将 `formatDelegate` 返回格式化为货币值的数字。 该示例将当前系统区域性更改为法语 (法国) 或者，如果法语 (法国) 已经是当前文化，则英语 (美国) 。 然后：  
  
-   直接调用委托，使其在主应用线程上同步运行。  
  
-   创建一个任务，该任务在线程池线程上异步执行委托。  
  
-   通过调用方法，创建在主应用线程上同步执行委托的任务 <xref:System.Threading.Tasks.Task.RunSynchronously%2A?displayProperty=nameWithType> 。  
  
 如示例中的输出所示，当当前区域性更改为法语 (法国) 时，异步调用任务的线程的当前区域性会成为该异步操作的当前区域性。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture1.vb#1)]  
  
 对于面向之前的 .NET Framework 版本的应用 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] ，或对于未面向特定版本 .NET Framework 的应用的应用程序，调用线程的区域性不属于任务上下文。 除非显式定义了一个，否则，默认情况下，新线程的区域性是系统区域性。 下面的示例与前面的示例相同，只不过它缺少 <xref:System.Runtime.Versioning.TargetFrameworkAttribute> 特性，阐释了这一点。 由于所执行的示例所在系统的系统区域性为英语 (美国) ，因此在线程池线程上异步执行的任务的区域性为 en-us 而不是 fr-fr。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture2.vb#2)]  
  
 对于面向和更高版本的 .NET Framework 的应用程序 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] ，但在之前 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] ，你可以使用 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 和 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 属性来确保调用线程的区域性用在线程池线程上执行的异步任务中。 下面的示例与前面的示例相同，不同之处在于它使用 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 属性来确保线程池线程具有与主应用线程相同的区域性。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture3.cs#3)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture3.vb#3)]  
  
 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 和 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 是每个应用域的属性; 也就是说，它们为所有未显式分配特定应用程序域中的区域性的线程建立默认区域性。 但是，对于面向 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] 或更高版本的应用程序，即使任务跨越应用域边界，调用线程的区域性仍然会成为异步任务上下文的一部分。  
  
 下面的示例显示，即使任务执行的方法跨越应用程序域边界，调用线程的区域性仍然是基于任务的异步操作的当前区域性。 它使用单个方法定义一个类， `DataRetriever` `GetFormattedNumber` 该方法返回格式设置为货币值的1到1000之间的随机双精度浮点数。 运行的第一个任务只是实例化 `DataRetriever` 实例并调用其 `GetFormattedNumber` 方法。 第二个任务报告其当前应用程序域、创建新的应用程序域、 `DataRetriever` 在新应用程序域中实例化实例，并调用其 `GetFormattedNumber` 方法。 如示例的输出所示，当在主应用程序域和第二个应用程序域中执行时，当前区域性在调用线程、第一个任务和第二个任务中保持不变。  
  
 [!code-csharp[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/cs/asyncculture4.cs#4)]
 [!code-vb[System.Globalization.CultureInfo.Class.Async#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.class.async/vb/asyncculture4.vb#4)]  
  
<a name="Serialization"></a>  
## <a name="cultureinfo-object-serialization"></a>CultureInfo 对象序列化  
 <xref:System.Globalization.CultureInfo>序列化对象时，实际上存储的是 <xref:System.Globalization.CultureInfo.Name%2A> 和 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 。 仅在具有相同含义的环境中成功取消序列化 <xref:System.Globalization.CultureInfo.Name%2A> 。 以下三个示例说明了为何不总是出现这种情况：  
  
- 如果 <xref:System.Globalization.CultureInfo.CultureTypes%2A> 属性值为 <xref:System.Globalization.CultureTypes.InstalledWin32Cultures?displayProperty=nameWithType> ，且该区域性首次在 windows 操作系统的特定版本中引入，则不能在早期版本的 windows 上对其进行反序列化。 例如，如果在 Windows 10 中引入了某个区域性，则无法在 Windows 8 上对其进行反序列化。  
  
-   如果 <xref:System.Globalization.CultureInfo.CultureTypes%2A> 值为 <xref:System.Globalization.CultureTypes.UserCustomCulture?displayProperty=nameWithType> ，并且对其进行反序列化的计算机未安装此用户自定义区域性，则无法对其进行反序列化。  
  
-   如果 <xref:System.Globalization.CultureInfo.CultureTypes%2A> 值为 <xref:System.Globalization.CultureTypes.ReplacementCultures?displayProperty=nameWithType> ，并且反序列化它的计算机没有此替换区域性，则会将其反序列化到相同的名称，但不是所有相同的特性。 例如，如果 en-us 是计算机 A 上的替代区域性，但不在计算机 B 上，并且如果 <xref:System.Globalization.CultureInfo> 引用此区域性的对象在计算机 a 上被序列化并在计算机 B 上反序列化，则不会传输区域性的任何自定义特征。 区域性成功地反序列化，但具有不同的含义。  
  
<a name="CPanel"></a>   
## <a name="control-panel-overrides"></a>控制面板替代  
 用户可以选择通过 "控制面板" 的 "区域和语言选项" 部分，替代与 Windows 的当前区域性关联的某些值。 例如，用户可以选择以不同的格式显示日期，或使用区域性默认值以外的其他货币。 通常，应用程序应该服从这些用户覆盖。  
  
 如果 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 为 `true` ，并且指定的区域性与 Windows 的当前区域性匹配，则将 <xref:System.Globalization.CultureInfo> 使用这些重写，包括属性返回的实例的属性的用户设置 <xref:System.Globalization.DateTimeFormatInfo> <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> ，以及 <xref:System.Globalization.NumberFormatInfo> 由属性返回的实例的属性 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 。 如果用户设置与关联的区域性不兼容 <xref:System.Globalization.CultureInfo> （例如，如果所选的日历不是 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> ），则方法的结果和属性的值是不确定的。  
  
<a name="AlternateSort"></a>   
## <a name="alternate-sort-orders"></a>替换排序顺序  
 某些区域性支持多个排序顺序。 例如：  
  
-   西班牙语 (西班牙) 区域性具有两种排序顺序：默认的国际排序顺序和传统排序顺序。 使用 <xref:System.Globalization.CultureInfo> es 区域性名称实例化对象时，将使用国际排序顺序。 使用 <xref:System.Globalization.CultureInfo> tradnl 区域性名称实例化对象时，使用传统排序顺序。  
  
-   Zh-chs-CN ( (简体中文，PRC) # A3 区域性支持两种排序顺序：按发音 (默认) 和按笔画计数。 使用 <xref:System.Globalization.CultureInfo> zh-chs-CN 区域性名称实例化对象时，将使用默认的排序顺序。 当 <xref:System.Globalization.CultureInfo> 使用本地标识符0x00020804 来实例化对象时，字符串将按笔画排序。  
  
 下表列出了支持替代排序顺序的区域性以及默认和备用排序顺序的标识符。  
  
|区域性名称|环境|默认排序名称和标识符|替换排序名称和标识符|  
|------------------|-------------|--------------------------------------|----------------------------------------|  
|es-ES|西班牙语(西班牙)|国际：0x00000C0A|繁体：0x0000040A|  
|zh-TW|中文（台湾）|笔划计数：0x00000404|注音：0x00030404|  
|zh-CN|中文（中华人民共和国）|发音：0x00000804|笔划计数：0x00020804|  
|zh-HK|中文(香港特别行政区)|笔划计数：0x00000c04|笔划计数：0x00020c04|  
|zh-SG|中文（新加坡）|发音：0x00001004|笔划计数：0x00021004|  
|zh-MO|中文（澳门特别行政区）|发音：0x00001404|笔划计数：0x00021404|  
|ja-JP|日语（日本）|默认值：0x00000411|Unicode：0x00010411|  
|ko-KR|韩语(韩国)|默认值：0x00000412|韩语 Xwansung-Unicode：0x00010412|  
|de-DE|德语（德国）|字典：0x00000407|电话簿排序方式：0x00010407|  
|hu-HU|匈牙利语(匈牙利)|默认值：0x0000040e|技术排序：0x0001040e|  
|ka-GE|格鲁吉亚语（格鲁吉亚）|繁体：0x00000437|新式排序：0x00010437|  
  
<a name="Windows"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>当前区域性和 UWP 应用  
 在通用 Windows 平台 (UWP) 应用程序中， <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 和 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 属性是读写的，就像它们位于 .NET FRAMEWORK 和 .net Core 应用程序中一样。 不过，UWP 应用可识别单一文化。 <xref:System.Globalization.CultureInfo.CurrentCulture%2A>和 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 属性映射到 DefaultContext 集合中的第一个值。 [windows.applicationmodel.resources.core](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_)集合中的第一个值。  

在 .NET Framework 和 .NET Core 应用程序中，当前区域性为每个线程的设置， <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 和 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 属性仅反映当前线程的区域性和 UI 区域性。 在 UWP 应用中，当前的区域性映射到 [windows.applicationmodel.resources.core](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) 集合，该集合是全局设置的集合。 设置 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 或 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 属性会更改整个应用的区域性; 不能在每个线程的基础上设置区域性。
  
## Examples  
 下面的示例演示如何 <xref:System.Globalization.CultureInfo> 使用国际排序和 <xref:System.Globalization.CultureInfo> 使用传统排序的另一个对象创建西班牙语 (西班牙) 的对象。  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
    <altmember cref="T:System.Globalization.RegionInfo" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Globalization.CultureInfo" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : int -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo culture" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="culture">预定义的 <see cref="T:System.Globalization.CultureInfo" /> 标识符、现有 <see cref="T:System.Globalization.CultureInfo" /> 对象的 <see cref="P:System.Globalization.CultureInfo.LCID" /> 属性或仅 Windows 区域性标识符。</param>
        <summary>根据区域性标识符指定的区域性初始化 <see cref="T:System.Globalization.CultureInfo" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Windows 系统上可用的区域性的预定义区域性标识符列在[windows 支持的语言/区域名称列表](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)中的 "**语言标记**" 列中。 列名遵循 [BCP 47](https://tools.ietf.org/html/bcp47) 定义的标准。

 在大多数情况下，该 `culture` 参数映射到相应的区域语言支持 (NLS) 区域设置标识符。 参数的值 `culture` 将成为新的属性的值 <xref:System.Globalization.CultureInfo.LCID%2A> <xref:System.Globalization.CultureInfo> 。  
  
 建议调用 locale 名称构造函数 <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType> ，因为区域设置名称优于 lcid。 对于自定义区域设置，区域设置名称是必需的。  
  
 用户可以选择通过 "控制面板" 的 "区域和语言选项" 部分，替代与 Windows 的当前区域性关联的某些值。 例如，用户可以选择以不同的格式显示日期，或使用区域性默认值以外的其他货币。 如果指定的区域性标识符与当前 Windows 区域性的区域性标识符匹配，此构造函数将创建一个 <xref:System.Globalization.CultureInfo> ，它使用这些重写，包括属性返回的实例的属性的用户设置 <xref:System.Globalization.DateTimeFormatInfo> <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> ，以及 <xref:System.Globalization.NumberFormatInfo> 由属性返回的实例的属性 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 。 如果用户设置与与 (关联的区域性不兼容 <xref:System.Globalization.CultureInfo> ，则为; 如果所选日历不是 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A>) 方法的结果，并且属性的值未定义，则为。  
  
 如果指定的区域性标识符与当前 Windows 区域性的标识符不匹配，此构造函数将创建一个 <xref:System.Globalization.CultureInfo> ，它使用指定区域性的默认值。  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A>属性始终设置为 `true` 。  
  
 例如，假设阿拉伯 (沙特阿拉伯) 是当前 Windows 区域性，用户已将日历从回历更改为公历。  
  
-   在 `CultureInfo("0x0401")` (区域性名称 ar-SA) <xref:System.Globalization.CultureInfo.Calendar%2A> 设置为 <xref:System.Globalization.GregorianCalendar> (这是用户设置) ，并 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 将设置为 `true` 。  
  
-   如果 `CultureInfo("0x041E")` (区域性名称 th) ，则将 <xref:System.Globalization.CultureInfo.Calendar%2A> 设置为 <xref:System.Globalization.ThaiBuddhistCalendar> (这是第 th) 的默认日历，并 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 将设置为 `true` 。  
  
 对于使用欧元的区域性，.NET Framework 和 Windows XP 会将默认货币设置为欧元。 但是，较早版本的 Windows 不会。 因此，如果较早版本的 Windows 的用户未通过 "控制面板" 的 "区域和语言选项" 部分更改了 "货币" 设置，则该货币可能不正确。 若要使用货币 .NET Framework 默认设置，应用程序应使用 <xref:System.Globalization.CultureInfo> 接受参数的构造函数重载， `useUserOverride` 并将其设置为 `false` 。  
  
> [!NOTE]
>  为了向后兼容，使用 `culture` 0x0004 或0x7c04 的参数构造的区域性将分别具有 <xref:System.Globalization.CultureInfo.Name%2A> ZH-CHS-CHS 或 ZH-CHS-CHT 属性。 你应改用 zh-chs-Hans 或 zh-chs-Zh-hant 的当前标准区域性名称构造区域性，除非你有使用旧名称的原因。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="culture" /> 小于零。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="culture" /> 不是有效的区域性标识符。 有关详细信息，请参阅“调用方备注”部分。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] <see cref="T:System.ArgumentException" /> 如果不是有效的区域性标识符，则和更早的版本将引发 <paramref name="culture" /> 。 从开始 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ，此构造函数引发 <see cref="T:System.Globalization.CultureNotFoundException" /> 。 从在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] Windows 7 或更高版本下的或更高版本下运行的应用程序，该方法会尝试检索 <see cref="T:System.Globalization.CultureInfo" /> 其标识符 <paramref name="culture" /> 来自操作系统的对象; 如果操作系统不支持该区域性，则该方法将引发 <see cref="T:System.Globalization.CultureNotFoundException" /> 异常。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : string -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">预定义的 <see cref="T:System.Globalization.CultureInfo" /> 名称、现有 <see cref="T:System.Globalization.CultureInfo" /> 的 <see cref="P:System.Globalization.CultureInfo.Name" /> 或仅 Windows 区域性名称。 <paramref name="name" /> 不区分大小写。</param>
        <summary>根据由名称指定的区域性初始化 <see cref="T:System.Globalization.CultureInfo" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

有关 Windows 系统上的预定义区域性名称的列表，请参阅[windows 支持的语言/区域名称列表](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)中的**语言标记**列。 列名遵循 [BCP 47](https://tools.ietf.org/html/bcp47) 定义的标准。 此外，从 Windows 10 开始， `name` 可以是任何有效的 BCP-47 语言标记。  
  
 如果 `name` 为 <xref:System.String.Empty?displayProperty=nameWithType> ，则构造函数将创建一个固定区域性的实例; 这等效于检索属性的值 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 。  
  
 用户可以选择通过 "控制面板" 的 "区域和语言选项" 部分，替代与 Windows 的当前区域性关联的某些值。 例如，用户可以选择以不同的格式显示日期，或使用区域性默认值以外的其他货币。 如果与关联的区域性标识符与 `name` 当前 Windows 区域性的区域性标识符相匹配，此构造函数将创建一个 <xref:System.Globalization.CultureInfo> 对象，该对象使用这些重写，包括属性返回的实例的属性的用户设置 <xref:System.Globalization.DateTimeFormatInfo> <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> ，以及 <xref:System.Globalization.NumberFormatInfo> 由属性返回的实例的属性 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 。 如果用户设置与关联的区域性不兼容 <xref:System.Globalization.CultureInfo> （例如，如果所选的日历不是 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> ），则方法的结果和属性的值是不确定的。  
  
 如果与关联的区域性标识符与 `name` 当前 Windows 区域性的区域性标识符不匹配，此构造函数将创建一个 <xref:System.Globalization.CultureInfo> 对象，该对象使用指定区域性的默认值。  
  
 <xref:System.Globalization.CultureInfo.UseUserOverride%2A>属性始终设置为 `true` 。  
  
 例如，假设阿拉伯 (沙特阿拉伯) 是 Windows 的当前区域性，用户将日历从回历更改为公历。  
  
-   对于 `CultureInfo("ar-SA")` ，将 <xref:System.Globalization.CultureInfo.Calendar%2A> 设置为 <xref:System.Globalization.GregorianCalendar> (这是用户设置) 并且 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 设置为 `true` 。  
  
-   对于 `CultureInfo("th-TH")` ，将 <xref:System.Globalization.CultureInfo.Calendar%2A> 设置为 <xref:System.Globalization.ThaiBuddhistCalendar> (这是第 th) 的默认日历并且 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 设置为 `true` 。  
  
 新的的 <xref:System.Globalization.CultureInfo.LCID%2A> 属性 <xref:System.Globalization.CultureInfo> 设置为与指定名称关联的区域性标识符。  
  
 对于使用欧元的区域性，.NET Framework 和 Windows XP 会将默认货币设置为欧元。 但是，较旧版本的 Windows 不执行此操作。 因此，如果较早版本的 Windows 的用户未通过 "控制面板" 的 "区域和语言选项" 部分更改了 "货币" 设置，则该货币可能不正确。 若要使用货币 .NET Framework 默认设置，应用程序应使用 <xref:System.Globalization.CultureInfo> 接受参数的构造函数重载， `useUserOverride` 并将其设置为 `false` 。  
  
   
  
## Examples  
 下面的示例检索当前区域性。 如果它不是法语 (法国) 区域性，它将调用 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> 构造函数来实例化 <xref:System.Globalization.CultureInfo> 表示法语 (法国) 区域性的对象，并使其成为当前线程的区域性。 否则，它将实例化 <xref:System.Globalization.CultureInfo> 表示法语 (卢森堡) 区域性的对象，并将其作为当前区域性。  
  
 [!code-csharp[System.Globalization.CultureInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.CultureInfo/cs/Change1.cs#3)]
 [!code-vb[System.Globalization.CultureInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.CultureInfo/vb/Change1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> 为 null。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> 不是有效的区域性名称。 有关详细信息，请参阅“对调用方的说明”部分。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] <see cref="T:System.ArgumentException" /> 如果不是有效的区域性名称，和更早的版本将引发 <paramref name="name" /> 。 从开始 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ，此构造函数引发 <see cref="T:System.Globalization.CultureNotFoundException" /> 。 从在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] Windows 7 或更高版本下的或更高版本下运行的应用程序中，该方法会尝试检索 <see cref="T:System.Globalization.CultureInfo" /> 其标识符 <paramref name="name" /> 来自操作系统的对象; 如果操作系统不支持该区域性，并且如果不 <paramref name="name" /> 是补充或替代区域性的名称，则该方法将引发 <see cref="T:System.Globalization.CultureNotFoundException" /> 异常。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (int culture, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 culture, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (culture As Integer, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(int culture, bool useUserOverride);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : int * bool -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo (culture, useUserOverride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="useUserOverride" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="culture">预定义的 <see cref="T:System.Globalization.CultureInfo" /> 标识符、现有 <see cref="T:System.Globalization.CultureInfo" /> 对象的 <see cref="P:System.Globalization.CultureInfo.LCID" /> 属性或仅 Windows 区域性标识符。</param>
        <param name="useUserOverride">一个布尔值，它指示是使用用户选定的区域性设置 (<see langword="true" />)，还是使用默认区域性设置 (<see langword="false" />)。</param>
        <summary>基于区域性标识符指定的区域性并基于布尔值（指定是否使用系统中用户选定的区域性设置）来初始化 <see cref="T:System.Globalization.CultureInfo" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

Windows 系统上提供的预定义区域性标识符列在[windows 支持的语言/区域名称列表](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)中的 "**语言标记**" 列中。 列名遵循 [BCP 47](https://tools.ietf.org/html/bcp47) 定义的标准。

 在大多数情况下，该 `culture` 参数映射到相应的区域语言支持 (NLS) 区域设置标识符。 参数的值 `culture` 将成为新的属性的值 <xref:System.Globalization.CultureInfo.LCID%2A> <xref:System.Globalization.CultureInfo> 。  
  
 建议调用 locale 名称构造函数 <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType> ，因为区域设置名称优于 lcid。 对于自定义区域设置，区域设置名称是必需的。  
  
 用户可以选择通过 "控制面板" 的 "区域和语言选项" 部分，替代与 Windows 的当前区域性关联的某些值。 例如，用户可以选择以不同的格式显示日期，或使用区域性默认值以外的其他货币。  
  
 应用程序通常不应禁止用户重写。 请注意，禁止替代本身并不保证数据稳定性;请参阅 [除非固定) ，否则不应将博客条目区域性数据视为稳定 (](https://go.microsoft.com/fwlink/?LinkId=156850)。  
  
 如果将 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 属性设置为 `true` ，并且指定的区域性标识符与当前 Windows 区域性的标识符匹配，则此构造函数将创建一个 <xref:System.Globalization.CultureInfo> ，它使用这些重写，包括属性返回的实例的属性的用户设置 <xref:System.Globalization.DateTimeFormatInfo> <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> ，以及 <xref:System.Globalization.NumberFormatInfo> 由属性返回的实例的属性 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 。 如果用户设置与关联的区域性不兼容 <xref:System.Globalization.CultureInfo> （例如，如果所选的日历不是 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> ），则方法的结果和属性的值是不确定的。  
  
 否则，此构造函数将创建一个 <xref:System.Globalization.CultureInfo> ，它使用指定区域性的默认值。  
  
 参数的值 `useUserOverride` 将成为属性的值 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 。  
  
 例如，假设阿拉伯 (沙特阿拉伯) 是 Windows 的当前区域性，用户已将日历从回历更改为公历。  
  
-   在 `CultureInfo("0x0401", true)` (区域性名称 ar-SA) <xref:System.Globalization.CultureInfo.Calendar%2A> 设置为 <xref:System.Globalization.GregorianCalendar> (这是用户设置) ，并 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 将设置为 `true` 。  
  
-   在 `CultureInfo("0x0401", false)` (区域性名称 ar-sa) <xref:System.Globalization.CultureInfo.Calendar%2A> 设置为 <xref:System.Globalization.HijriCalendar> (这是 ar-sa) 的默认日历，并 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 将设置为 `false` 。  
  
-   如果 `CultureInfo("0x041E", true)` (区域性名称 th) ，则将 <xref:System.Globalization.CultureInfo.Calendar%2A> 设置为 <xref:System.Globalization.ThaiBuddhistCalendar> (这是第 th) 的默认日历，并 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 将设置为 `true` 。  
  
-   如果 `CultureInfo("0x041E", false)` (区域性名称 th) ，则将 <xref:System.Globalization.CultureInfo.Calendar%2A> 设置为 <xref:System.Globalization.ThaiBuddhistCalendar> (这是第 th) 的默认日历，并 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 将设置为 `false` 。  
  
 对于使用欧元的区域性，.NET Framework 和 Windows XP 会将默认货币设置为欧元。 但是，较早版本的 Windows 不会。 因此，如果较早版本的 Windows 的用户未通过 "控制面板" 的 "区域和语言选项" 部分更改了 "货币" 设置，则该货币可能不正确。 若要使用货币 .NET Framework 默认设置，应用程序应将 `useUserOverride` 参数设置为 `false` 。  
  
> [!NOTE]
>  为了向后兼容，使用 `culture` 0x0004 或0x7c04 的参数构造的区域性将分别具有 <xref:System.Globalization.CultureInfo.Name%2A> ZH-CHS-CHS 或 ZH-CHS-CHT 属性。 你应改用 zh-chs-Hans 或 zh-chs-Zh-hant 的当前标准区域性名称构造区域性，除非你有使用旧名称的原因。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="culture" /> 小于零。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="culture" /> 不是有效的区域性标识符。 有关详细信息，请参阅“调用方备注”部分。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] <see cref="T:System.ArgumentException" /> 如果不是有效的区域性标识符，则和更早的版本将引发 <paramref name="culture" /> 。 从开始 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ，此构造函数引发 <see cref="T:System.Globalization.CultureNotFoundException" /> 。 从在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] Windows 7 或更高版本下的或更高版本下运行的应用程序，该方法会尝试检索 <see cref="T:System.Globalization.CultureInfo" /> 其标识符 <paramref name="culture" /> 来自操作系统的对象; 如果操作系统不支持该区域性，则该方法将引发 <see cref="T:System.Globalization.CultureNotFoundException" /> 异常。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureInfo (string name, bool useUserOverride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, bool useUserOverride) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, useUserOverride As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureInfo(System::String ^ name, bool useUserOverride);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureInfo : string * bool -&gt; System.Globalization.CultureInfo" Usage="new System.Globalization.CultureInfo (name, useUserOverride)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="useUserOverride" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="name">预定义的 <see cref="T:System.Globalization.CultureInfo" /> 名称、现有 <see cref="T:System.Globalization.CultureInfo" /> 的 <see cref="P:System.Globalization.CultureInfo.Name" /> 或仅 Windows 区域性名称。 <paramref name="name" /> 不区分大小写。</param>
        <param name="useUserOverride">一个布尔值，它指示是使用用户选定的区域性设置 (<see langword="true" />)，还是使用默认区域性设置 (<see langword="false" />)。</param>
        <summary>基于名称指定的区域性并基于布尔值（指定是否使用系统中用户选定的区域性设置）来初始化 <see cref="T:System.Globalization.CultureInfo" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

有关预定义区域性名称的列表，请参阅[Windows 支持的语言/区域名称列表](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)中的**语言标记**列。 列名遵循 [BCP 47](https://tools.ietf.org/html/bcp47) 定义的标准。 此外，从 Windows 10 开始， `name` 可以是任何有效的 BCP-47 语言标记。  
  
如果 `name` 为 <xref:System.String.Empty?displayProperty=nameWithType> ，则构造函数将创建一个固定区域性的实例; 这等效于检索属性的值 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 。  
  
 用户可以选择通过 "控制面板" 的 "区域和语言选项" 部分，覆盖与当前 Windows 区域性关联的某些值。 例如，用户可以选择以不同的格式显示日期，或使用区域性默认值以外的其他货币。  
  
 应用程序通常不应禁止用户重写。 请注意，禁止替代本身并不保证数据稳定性;请参阅 [除非固定) ，否则不应将博客条目区域性数据视为稳定 (](https://go.microsoft.com/fwlink/?LinkId=156850)。  
  
 如果将 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 属性设置为 `true` ，并且与指定的区域性名称关联的区域性标识符与当前 Windows 区域性的区域性标识符相匹配，则此构造函数将创建一个 <xref:System.Globalization.CultureInfo> ，它使用这些重写，包括属性返回的实例的属性的用户设置 <xref:System.Globalization.DateTimeFormatInfo> <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> ，以及 <xref:System.Globalization.NumberFormatInfo> 由属性返回的实例的属性 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 。 如果用户设置与关联的区域性不兼容 <xref:System.Globalization.CultureInfo> （例如，如果所选的日历不是 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> ），则方法的结果和属性的值是不确定的。  
  
 否则，此构造函数将创建一个 <xref:System.Globalization.CultureInfo> ，它使用指定区域性的默认值。  
  
 参数的值 `useUserOverride` 将成为属性的值 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 。  
  
 例如，假设阿拉伯 (沙特阿拉伯) 是 Windows 的当前区域性，用户将日历从回历更改为公历。  
  
-   对于 `CultureInfo("ar-SA", true)` ，将 <xref:System.Globalization.CultureInfo.Calendar%2A> 设置为 <xref:System.Globalization.GregorianCalendar> (这是用户设置) 并且 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 设置为 `true` 。  
  
-   对于 `CultureInfo("ar-SA", false)` ，将 <xref:System.Globalization.CultureInfo.Calendar%2A> 设置为 <xref:System.Globalization.HijriCalendar> (这是 ar-SA) 的默认日历并且 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 设置为 `false` 。  
  
-   对于 `CultureInfo("th-TH", true)` ，将 <xref:System.Globalization.CultureInfo.Calendar%2A> 设置为 <xref:System.Globalization.ThaiBuddhistCalendar> (这是第 th) 的默认日历并且 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 设置为 `true` 。  
  
-   对于 `CultureInfo("th-TH", false)` ，将 <xref:System.Globalization.CultureInfo.Calendar%2A> 设置为 <xref:System.Globalization.ThaiBuddhistCalendar> (这是第 th) 的默认日历并且 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 设置为 `false` 。  
  
 新的的 <xref:System.Globalization.CultureInfo.LCID%2A> 属性 <xref:System.Globalization.CultureInfo> 设置为与指定名称关联的区域性标识符。  
  
 对于使用欧元的区域性，.NET Framework 和 Windows XP 会将默认货币设置为欧元。 但是，较旧版本的 Windows 不执行此操作。 因此，如果较早版本的 Windows 的用户未通过 "控制面板" 的 "区域和语言选项" 部分更改了 "货币" 设置，则该货币可能不正确。 若要使用货币 .NET Framework 默认设置，应用程序应将 `useUserOverride` 参数设置为 `false` 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> 为 null。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> 不是有效的区域性名称。 有关详细信息，请参阅“调用方备注”部分。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] <see cref="T:System.ArgumentException" /> 如果不是有效的区域性名称，和更早的版本将引发 <paramref name="name" /> 。 从开始 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ，此构造函数引发 <see cref="T:System.Globalization.CultureNotFoundException" /> 。 从在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] Windows 7 或更高版本下的或更高版本下运行的应用程序中，该方法会尝试检索 <see cref="T:System.Globalization.CultureInfo" /> 其标识符 <paramref name="name" /> 来自操作系统的对象; 如果操作系统不支持该区域性，并且如果不 <paramref name="name" /> 是补充或替代区域性的名称，则该方法将引发 <see cref="T:System.Globalization.CultureNotFoundException" /> 异常。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="P:System.Globalization.CultureInfo.UseUserOverride" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar Calendar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Calendar" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Calendar As Calendar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::Calendar ^ Calendar { System::Globalization::Calendar ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Calendar : System.Globalization.Calendar" Usage="System.Globalization.CultureInfo.Calendar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取区域性使用的默认日历。</summary>
        <value>表示区域性使用的默认日历的 <see cref="T:System.Globalization.Calendar" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 用户可以选择通过 "控制面板" 的 "区域和语言选项" 部分，替代与 Windows 的当前区域性关联的某些值。 例如，用户可以选择以不同的格式显示日期，或使用区域性默认值以外的其他货币。  
  
 如果 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 为 `true` ，并且指定的区域性与 Windows 的当前区域性匹配，则将 <xref:System.Globalization.CultureInfo> 使用这些重写，包括属性返回的实例的属性的用户设置 <xref:System.Globalization.DateTimeFormatInfo> <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> ，以及 <xref:System.Globalization.NumberFormatInfo> 由属性返回的实例的属性 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 。 如果用户设置与关联的区域性不兼容 <xref:System.Globalization.CultureInfo> （例如，如果所选的日历不是 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> ），则方法的结果和属性的值是不确定的。  
  
 因此，如果 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 为 `true` ，则此属性的值可能与区域性使用的默认日历不同。  
  
 应用程序 <xref:System.Globalization.CultureInfo> 通过设置的 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 属性 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> （类的实例）更改当前使用的日历 <xref:System.Globalization.DateTimeFormatInfo> 。 新日历必须是中列出的其中一个日历 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> 。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 还包括一些自定义与该关联的日期和时间格式设置的属性 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearCachedData();" />
      <MemberSignature Language="F#" Value="member this.ClearCachedData : unit -&gt; unit" Usage="cultureInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>刷新缓存的区域性相关信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，会在第一次请求时缓存信息（如默认区域性和格式模式）。 <xref:System.AppDomain>例如，当用户修改 "控制面板" 的 "区域和语言选项" 部分时，该信息可能会发生更改。 但是， <xref:System.Globalization.CultureInfo> 类不会自动检测系统设置中的更改。  
  
 <xref:System.Globalization.CultureInfo.ClearCachedData%2A>方法会清除创建的对象的缓存， <xref:System.Globalization.CultureInfo> <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> 并 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> <xref:System.Globalization.RegionInfo.CurrentRegion%2A> 根据当前系统设置刷新、和属性中的信息。  
  
 <xref:System.Globalization.CultureInfo.ClearCachedData%2A>方法不刷新现有线程的属性中的信息 <xref:System.Threading.Thread.CurrentCulture%2A?displayProperty=nameWithType> 。 但是，将来的线程将具有任何新的 <xref:System.Globalization.CultureInfo> 属性值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="cultureInfo.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建当前 <see cref="T:System.Globalization.CultureInfo" /> 的副本。</summary>
        <returns>当前 <see cref="T:System.Globalization.CultureInfo" /> 的副本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 即使原始副本是只读的，克隆也是可写的 <xref:System.Globalization.CultureInfo> 。 因此，可以修改克隆的属性。  
  
 对象的浅表副本只是对象的副本。 如果对象包含对其他对象的引用，则浅表副本不会创建所引用对象的副本。 改为引用原始对象。 与此相反，对象的深层副本将创建对象的副本和该对象直接或间接引用的所有内容的副本。  
  
 <xref:System.Globalization.CultureInfo.Clone%2A>方法创建一个增强的浅表副本。 <xref:System.Globalization.CultureInfo.NumberFormat%2A> <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> <xref:System.Globalization.CultureInfo.TextInfo%2A> 还会复制、、和属性返回的对象 <xref:System.Globalization.CultureInfo.Calendar%2A> 。 因此，克隆的 <xref:System.Globalization.CultureInfo> 对象可以修改其复制的属性，而不会影响原始 <xref:System.Globalization.CultureInfo> 对象。  
  
   
  
## Examples  
 下面的代码示例演示了 CultureInfo。 Clone 还会克隆 <xref:System.Globalization.DateTimeFormatInfo> <xref:System.Globalization.NumberFormatInfo> 与相关联的和实例 <xref:System.Globalization.CultureInfo> 。  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="CompareInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CompareInfo CompareInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CompareInfo CompareInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CompareInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CompareInfo As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CompareInfo ^ CompareInfo { System::Globalization::CompareInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompareInfo : System.Globalization.CompareInfo" Usage="System.Globalization.CultureInfo.CompareInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取为区域性定义如何比较字符串的 <see cref="T:System.Globalization.CompareInfo" />。</summary>
        <value>为区域性定义如何比较字符串的 <see cref="T:System.Globalization.CompareInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.CompareInfo%2A>属性返回一个 <xref:System.Globalization.CompareInfo> 对象，该对象提供在区分区域性的排序和字符串比较操作中使用的区域性特定信息。  
  
 用户可以选择通过 "控制面板" 的 "区域和语言选项" 部分，替代与 Windows 的当前区域性关联的某些值。 例如，用户可以选择以不同的格式显示日期，或使用区域性默认值以外的其他货币。  
  
 如果 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 为 `true` ，并且指定的区域性与 Windows 的当前区域性匹配，则将 <xref:System.Globalization.CultureInfo> 使用这些重写，包括属性返回的实例的属性的用户设置 <xref:System.Globalization.DateTimeFormatInfo> <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> ，以及 <xref:System.Globalization.NumberFormatInfo> 由属性返回的实例的属性 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 。 如果用户设置与关联的区域性不兼容 <xref:System.Globalization.CultureInfo> （例如，如果所选的日历不是 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> ），则方法的结果和属性的值是不确定的。  
  
   
  
## Examples  
 下面的代码示例演示如何 <xref:System.Globalization.CultureInfo> 使用国际排序) 为西班牙语 (西班牙创建，另一种是 <xref:System.Globalization.CultureInfo> 传统排序。  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CompareInfo" />
      </Docs>
    </Member>
    <Member MemberName="CreateSpecificCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CreateSpecificCulture (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo CreateSpecificCulture(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpecificCulture (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ CreateSpecificCulture(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member CreateSpecificCulture : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.CreateSpecificCulture name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="name">预定义的 <see cref="T:System.Globalization.CultureInfo" /> 名称或现有 <see cref="T:System.Globalization.CultureInfo" /> 的对象。 <paramref name="name" /> 不区分大小写。</param>
        <summary>创建表示与指定名称关联的特定区域性的 <see cref="T:System.Globalization.CultureInfo" />。</summary>
        <returns>一个表示以下内容的 <see cref="T:System.Globalization.CultureInfo" /> 对象： 
如果 <paramref name="name" /> 为空字符串（“”），则为固定区域性。  
  
- 或 - 
与 <paramref name="name" /> 关联的特定区域性，如果 <paramref name="name" /> 是非特定区域性。  
  
- 或 - 
由 <paramref name="name" /> 指定的区域性，如果 <paramref name="name" /> 已经是特定区域性。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A>方法包装对构造函数的调用 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> 。  
  
> [!NOTE]
> 有关 Windows 系统上的预定义区域性名称的列表，请参阅[windows 支持的语言/区域名称列表](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)中的**语言标记**列。 列名遵循 [BCP 47](https://tools.ietf.org/html/bcp47) 定义的标准。 此外，从 Windows 10 开始， `name` 可以是任何有效的 BCP-47 语言标记。  
  
 区域性分为三组：固定区域性、非特定区域性和特定区域性。 有关详细信息，请参阅类的说明 <xref:System.Globalization.CultureInfo> 。  
  
 如果此方法返回的特定区域性的区域性标识符与当前 Windows 区域性的区域性标识符匹配，则此方法将创建一个 <xref:System.Globalization.CultureInfo> 使用 Windows 区域性重写的对象。 重写包括属性返回的对象的属性 <xref:System.Globalization.DateTimeFormatInfo> <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 和 <xref:System.Globalization.NumberFormatInfo> 属性返回的对象的用户设置 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 。 若要 <xref:System.Globalization.CultureInfo> 使用默认区域性设置而不是用户替代来实例化对象，请 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> 使用参数的值调用构造函数 `false` `useUserOverride` 。  
  
 尽管 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> 方法名称包含 "特定" 一词，但请记住，区域性数据可以在不同版本之间更改，也可以因自定义区域性或由于用户重写而发生更改。 使用固定区域性或二进制或固定格式来保存数据。  
  
   
  
## Examples  
 下面的示例 <xref:System.Globalization.CultureInfo> 从方法检索表示非特定区域性的对象数组 <xref:System.Globalization.CultureInfo.GetCultures%2A> ，并对数组进行排序。 当它循环访问数组中的元素时，它将每个非特定区域性的名称传递给 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> 方法，并显示方法返回的特定区域性的名称。  
  
> [!NOTE]
>  该示例使用 zh-chs 和 zh-chs-CHT 区域性名称。 但是，面向 Windows Vista 和更高版本的应用程序应使用 zh-chs-Hans，而不是 zh-chs 和 zh-chs，而不是 zh-hant-ZH-CHS。 zh-chs-Hans 和 zh-chs-Zh-hant 表示当前标准，并且应使用，除非你有使用旧名称的原因。  
>   
>  另请注意，该示例的结果可能会不同于繁体中文 Windows 的安装，其中，中文 (传统) 非特定区域性的输入 (zh-chs，zh-chs-CHT 或 zh-chs-Zh-hant) 将返回 zh-chs。  
  
 [!code-csharp[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/CS/createspecificculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.CreateSpecificCulture2#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CreateSpecificCulture2/VB/createspecificculture2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> 不是有效的区域性名称。  
  
- 或 - 
<paramref name="name" /> 指定的区域性没有特定的区域性与之关联。</exception>
        <exception cref="T:System.NullReferenceException"><paramref name="name" /> 为 null。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] <see cref="T:System.ArgumentException" /> 如果不是有效的区域性名称，和更早的版本将引发 <paramref name="name" /> 。 从开始 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ，此方法将引发 <see cref="T:System.Globalization.CultureNotFoundException" /> 。</para></block>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="CultureTypes">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureTypes CultureTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CultureTypes CultureTypes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CultureTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureTypes As CultureTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureTypes CultureTypes { System::Globalization::CultureTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureTypes : System.Globalization.CultureTypes" Usage="System.Globalization.CultureInfo.CultureTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取属于当前 <see cref="T:System.Globalization.CultureInfo" /> 对象的区域性类型。</summary>
        <value>一个或多个 <see cref="T:System.Globalization.CultureTypes" /> 值的按位组合。 无默认值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示了 <xref:System.Globalization.CultureTypes> 枚举和 <xref:System.Globalization.CultureInfo.CultureTypes%2A> 属性。  
  
 [!code-csharp[system.globalization.cultureTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureTypes/cs/ct.cs#1)]
 [!code-vb[system.globalization.cultureTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureTypes/vb/ct.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentCulture { get; set; }" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentCulture As CultureInfo" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.CurrentCulture" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentCulture { get; }" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentCulture As CultureInfo" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); };" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.CurrentCulture" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示当前线程使用的区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</summary>
        <value>表示当前线程使用的区域性的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo>此属性返回的对象及其关联的对象确定日期、时间、数字、货币值的默认格式、文本的排序顺序、大小写约定和字符串比较。  
  
 当前区域性为正在执行的线程的属性。 检索属性的值 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 与检索属性返回的对象的性能更高 <xref:System.Globalization.CultureInfo> `Thread.CurrentThread.CurrentCulture` 。
  
> [!NOTE]
>  在 .NET Framework 4.5.2 及更早版本中， <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 属性是只读的; 也就是说，您可以检索属性值，但不能对其进行设置。 若要更改当前区域性，请将 <xref:System.Globalization.CultureInfo> 表示新区域性的对象分配给 `Thread.CurrentThread.CurrentCulture` 属性。 从开始 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] ， <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 属性为读写属性; 您可以设置和检索属性的值。 如果将属性值设置为 <xref:System.Globalization.CultureInfo> 表示新区域性的对象，则该属性的值 `Thread.CurrentThread.CurrentCulture` 也会发生更改。  
  
 本部分内容：  
  
 [如何确定线程的区域性](#ThreadCulture)   
 [获取当前区域性](#Getting)   
 [显式设置 CurrentCulture 属性](#ExplicitSetting)   
 [当前区域性和用户重写](#Overrides)   
 [区域性和 Windows 应用](#WindowsAndCurr)  
  
<a name="ThreadCulture"></a>   
## <a name="how-a-threads-culture-is-determined"></a>如何确定线程的区域性  
 启动线程时，其区域性最初确定如下：  
  
-   通过在 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 执行线程的应用程序域中检索属性指定的区域性，如果属性值不为 `null` 。  
  
-   如果该线程是一个线程池线程，该线程正在执行基于任务的异步操作，并且应用面向的是 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] 或更高版本的 .NET Framework，则其区域性由调用线程的区域性确定。  下面的示例将当前区域性更改为葡萄牙 (巴西) 并启动六个任务，每个任务显示其线程 ID、任务 ID 及其当前区域性。 每个任务 (和) 的线程继承了调用线程的区域性。  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentCulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Async1.vb#14)]  
  
     有关详细信息，请参阅主题中的 "区域性和基于任务的异步操作" 一节 <xref:System.Globalization.CultureInfo> 。  
  
-   通过调用 Windows `GetUserDefaultLocaleName` 函数。  
  
 请注意，如果您设置的特定区域性与系统安装的区域性或用户的首选区域性不同，并且您的应用程序将启动多个线程，则这些线程的当前区域性将是函数返回的区域性 `GetUserDefaultLocaleName` ，除非您在 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 执行线程的应用程序域中将区域性分配给属性。  
  
 有关如何确定如何确定线程的区域性的详细信息，请参阅 "引用" 页中的 "区域性和线程" 一节 <xref:System.Globalization.CultureInfo> 。  
  
<a name="Getting"></a>   
## <a name="getting-the-current-culture"></a>获取当前区域性  
 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType>属性是每个线程的设置; 也就是说，每个线程都可以有自己的区域性。 可以通过检索属性的值获取当前线程的区域性   <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> ，如下面的示例所示。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/Get1.vb#5)]  
  
 还可以从属性中检索当前线程的区域性的值 <xref:System.Threading.Thread.CurrentThread%2A?displayProperty=nameWithType> 。  
  
<a name="ExplicitSetting"></a>   
## <a name="explicitly-setting-the-currentculture-property"></a>显式设置 CurrentCulture 属性  
 起始在 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] 中，若要更改现有线程使用的区域性，请将 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 属性设置为新的区域性。 如果以这种方式显式更改线程的区域性，则当线程跨越应用程序域边界时，此更改将保持不变。 下面的示例将当前线程区域性更改为荷兰 (荷兰) 。 它还显示，当当前线程跨越应用程序域边界时，它的当前区域性保持更改。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/changeculture11.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/changeculture11.vb#11)]  
  
> [!NOTE]
>  使用属性更改区域性 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 需要 <xref:System.Security.Permissions.SecurityPermission> 具有 <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> 值集的权限。 由于与线程关联的安全状态，因此操作线程是危险的。 因此，只应为可信代码提供此权限，并在必要时提供此权限。 不能在不完全受信任的代码中更改线程区域。  
  
 从开始 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] ，你可以显式将当前线程区域性更改为特定区域性 (如法语 (加拿大) # A3 或非特定区域性 (如法语) 。 当 <xref:System.Globalization.CultureInfo> 对象表示非特定区域性时，属性的值 <xref:System.Globalization.CultureInfo> （如、、、 <xref:System.Globalization.CultureInfo.Calendar%2A> 和） <xref:System.Globalization.CultureInfo.CompareInfo%2A> <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> <xref:System.Globalization.CultureInfo.NumberFormat%2A> <xref:System.Globalization.CultureInfo.TextInfo%2A> 反映与非特定区域性关联的特定区域性。 例如，英语非特定区域性的主要区域性为英语 (美国) ;德国文化的主要文化是德国 (德国) 。 下面的示例演示了在将当前区域性设置为特定区域性、法语 (加拿大) 以及非特定区域性法语时的格式设置差异。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/specific12.cs#12)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/specific12.vb#12)]  
  
 还可以结合使用 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 属性和 <xref:System.Web.HttpRequest.UserLanguages%2A?displayProperty=nameWithType> 属性 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> ，将 ASP.NET 应用程序的属性设置为用户的首选区域性，如下面的示例所示。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/cs/aspculture13.cs#13)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentculture/vb/aspculture13.vb#13)]  
  
<a name="Overrides"></a>   
## <a name="the-current-culture-and-user-overrides"></a>当前区域性和用户重写  
 Windows 允许用户 <xref:System.Globalization.CultureInfo> 使用控制面板中的 " **区域和语言选项** " 覆盖对象及其关联对象的标准属性值。 <xref:System.Globalization.CultureInfo>属性返回的对象 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 在以下情况下将反映这些用户覆盖：  
  
-   如果当前线程区域性由 Windows 函数隐式设置，则为 `GetUserDefaultLocaleName` 。  
  
-   如果由属性定义的当前线程区域性与 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 当前 Windows 系统区域性相对应，则为。  
  
-   如果将当前线程区域性显式设置为方法返回的区域性 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> ，并且该区域性与当前 Windows 系统区域性相对应，则为。  
  
-   如果将当前线程区域性显式设置为构造函数实例化的区域性 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> ，并且该区域性与当前 Windows 系统区域性相对应，则为。  
  
 在某些情况下，尤其是对于服务器应用程序，可能不需要将当前区域性设置为 <xref:System.Globalization.CultureInfo> 反映用户重写的对象。 相反，可以使用以下方式将当前线程区域性设置为 <xref:System.Globalization.CultureInfo> 不反映用户重写的对象：  
  
-   通过 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> 使用参数的值调用构造函数 `false` `useUserOverride` 。  
  
-   通过调用 <xref:System.Globalization.CultureInfo.GetCultureInfo%2A> 方法，该方法返回缓存的只读 <xref:System.Globalization.CultureInfo> 对象。  
  
<a name="WindowsAndCurr"></a>   
## <a name="the-current-culture-and-uwp-apps"></a>当前区域性和 UWP 应用  
 在通用 Windows 平台 (UWP) 应用程序中， <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 属性是读写的，就像在 .NET Framework 和 .Net Core 应用程序中一样，你可以使用它来获取和设置当前区域性。 不过，UWP 应用不区分当前区域性和当前 UI 区域性。 <xref:System.Globalization.CultureInfo.CurrentCulture%2A>和 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 属性映射到 DefaultContext 集合中的第一个值。 [windows.applicationmodel.resources.core](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_)集合中的第一个值。  

在 .NET Framework 和 .NET Core 应用程序中，当前区域性为每个线程的设置， <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 属性仅反映当前线程的区域性。 在 UWP 应用中，当前区域性映射到 [windows.applicationmodel.resources.core](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) 属性，这是一项全局设置，它是一个全局设置。 设置 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 属性将更改整个应用的区域性; 不能在每个线程的基础上设置区域性。
  
## Examples  
 下面的示例演示如何更改 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 当前线程的和。  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">属性设置为 <see langword="null" />。</exception>
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
        <altmember cref="P:System.Threading.Thread.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="T:System.Security.Permissions.SecurityPermission" />
        <altmember cref="T:System.Security.Permissions.SecurityPermissionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentUICulture { get; set; }" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.CurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentUICulture As CultureInfo" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="member this.CurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.CurrentUICulture" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentUICulture { get; }" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentUICulture As CultureInfo" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentUICulture { System::Globalization::CultureInfo ^ get(); };" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberSignature Language="F#" Value="member this.CurrentUICulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.CurrentUICulture" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netstandard-1.0;netstandard-1.1;netstandard-1.2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Globalization.CultureInfo" /> 对象，该对象表示资源管理器在运行时查找区域性特定资源时所用的当前用户接口区域性。</summary>
        <value>资源管理器用于在运行时查找查找区域性特定资源的区域性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当前 UI 区域性为每个线程的属性。 也就是说，每个线程都有自己的当前 UI 区域性。 此属性等效于检索或，从开始 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] ，设置 <xref:System.Globalization.CultureInfo> 分配给属性的对象  `System.Threading.Thread.CurrentThread.CurrentUICulture` 。 启动线程时，它的 UI 区域性最初确定如下：  
  
-   通过在 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 执行线程的应用程序域中检索属性指定的区域性，如果属性值不为 `null` 。  
  
-   如果该线程是一个线程池线程，该线程正在执行基于任务的异步操作，并且应用面向的是 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] 或更高版本的 .NET Framework，则其 ui 区域性由调用线程的 ui 区域性确定。  下面的示例将当前 UI 区域性更改为葡萄牙 (巴西) 并启动六个任务，每个任务显示其线程 ID、任务 ID 及其当前 UI 区域性。 每个任务 (和) 的线程都继承了调用线程的 UI 区域性。  
  
     [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Async1.cs#14)]
     [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Async1.vb#14)]  
  
     有关详细信息，请参阅主题中的 "区域性和基于任务的异步操作" 一节 <xref:System.Globalization.CultureInfo> 。  
  
-   通过调用 Windows `GetUserDefaultUILanguage` 函数。  
  
> [!NOTE]
>  在中 [!INCLUDE[Compact](~/includes/compact-md.md)] ， <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 属性是只读的。 当前 UI 区域性由系统的区域设置确定，不能以编程方式进行更改。  
  
 从开始 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] ，若要更改线程使用的用户界面区域性，请将属性设置 <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> 为新的区域性。 如果以这种方式显式更改线程的 UI 区域性，则当线程跨越应用程序域边界时，此更改将保持不变。  
  
> [!NOTE]
>  在 .NET Framework 4.5.2 及更早版本中， <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 属性是只读的; 也就是说，您可以检索属性值，但不能对其进行设置。 若要更改当前 UI 区域性，请将 <xref:System.Globalization.CultureInfo> 表示新 ui 区域性的对象分配给 `Thread.CurrentThread.CurrentUICulture` 属性。 从开始 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] ， <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> 属性为读写属性; 您可以设置和检索属性的值。 如果将属性值设置为 <xref:System.Globalization.CultureInfo> 表示新区域性的对象，则该属性的值 `Thread.CurrentThread.CurrentCulture` 也会发生更改。  
  
 本部分内容：  
  
 [获取当前 UI 区域性](#Getting)   
 [显式设置当前 UI 区域性](#Explicit)   
 [隐式设置当前 UI 区域性](#Implicit)   
 [安全注意事项](#Security)   
 [当前 UI 区域性和 Windows 应用](#WindowsAndCurrUI)  
  
<a name="Getting"></a>   
## <a name="getting-the-current-ui-culture"></a>获取当前 UI 区域性  
 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType>属性是每个线程的设置; 也就是说，每个线程都可以有自己的 UI 区域性。 可以通过检索属性的值来获取当前线程的 UI 区域性   <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> ，如下面的示例所示。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/Get1.cs#5)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/Get1.vb#5)]  
  
 还可以从属性中检索当前线程的 UI 区域性的值 <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> 。  
  
<a name="Explicit"></a>   
## <a name="explicitly-setting-the-current-ui-culture"></a>显式设置当前 UI 区域性  
 从开始 [!INCLUDE[net_v46](~/includes/net-v46-md.md)] ，可以通过将 <xref:System.Globalization.CultureInfo> 表示新区域性的对象分配给属性，来更改当前 UI 区域性 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> 。 当前 UI 区域性可以设置为特定区域性 (例如 en-us 或取消) ，或 (如 en 或 de) 之类的非特定区域性。 下面的示例将当前 UI 区域性设置为 fr-fr 或法语 (法国) 。  
  
 [!code-csharp[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/cs/currentuiculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.CurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.currentuiculture/vb/currentuiculture1.vb#1)]  
  
 在多线程应用程序中，可以通过将 <xref:System.Globalization.CultureInfo> 表示区域性的对象分配给线程的属性来显式设置任何线程的 UI 区域性 <xref:System.Threading.Thread.CurrentUICulture%2A?displayProperty=nameWithType> 。 如果要设置其区域性的线程是当前线程，则可以将新区域性分配给该 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> 属性。 当显式设置线程的 UI 区域性时，即使该线程跨越应用程序域边界并在另一个应用程序域中执行代码，它也会保留相同的区域性。  
  
<a name="Implicit"></a>   
## <a name="implicitly-setting-the-current-ui-culture"></a>隐式设置当前 UI 区域性  
 第一次创建线程（包括主应用程序线程）时，默认情况下它的当前 UI 区域性设置如下：  
  
-   <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A>如果属性值不为，则使用当前应用程序域的属性定义的区域性 `null` 。  
  
-   使用系统的默认区域性。 在使用 Windows 操作系统的系统上，公共语言运行时调用 Windows `GetUserDefaultUILanguage` 函数来设置当前 UI 区域性。 `GetUserDefaultUILanguage` 返回由用户设置的默认 UI 区域性。 如果用户未设置默认的 UI 语言，则它将返回最初安装在系统上的区域性。  
  
 如果线程跨越应用程序边界并在另一个应用程序域中执行代码，则其区域性的确定方式与新创建的线程相同。  
  
 请注意，如果您设置了与系统安装的 UI 区域性或用户的首选 UI 区域性不同的特定 UI 区域性，并且您的应用程序将启动多个线程，则这些线程的当前 UI 区域性将是函数返回的区域性 `GetUserDefaultUILanguage` ，除非您在执行该线程的 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 应用程序域中将区域性分配给该属性。  
  
<a name="Security"></a>   
## <a name="security-considerations"></a>安全注意事项  
 更改当前线程的区域性需要 <xref:System.Security.Permissions.SecurityPermission> 具有 <xref:System.Security.Permissions.SecurityPermissionFlag.ControlThread> 值集的权限。  
  
> [!CAUTION]
>  由于与线程关联的安全状态，因此操作线程是危险的。 因此，只应为可信代码提供此权限，并在必要时提供此权限。 不能在不完全受信任的代码中更改线程区域。  
  
<a name="WindowsAndCurrUI"></a>   
## <a name="the-current-ui-culture-and-uwp-apps"></a>当前 UI 区域性和 UWP 应用  
 
在通用 Windows 平台 (UWP) 应用程序中， <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 属性是读写的，就像在 .NET Framework 和 .Net Core 应用程序中一样，你可以使用它来获取和设置当前区域性。 不过，UWP 应用不区分当前区域性和当前 UI 区域性。 <xref:System.Globalization.CultureInfo.CurrentCulture%2A>和 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 属性映射到 DefaultContext 集合中的第一个值。 [windows.applicationmodel.resources.core](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_)集合中的第一个值。

在 .NET Framework 和 .NET Core 应用程序中，当前 UI 区域性为每个线程设置， <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 属性仅反映当前线程的 UI 区域性。 在 UWP 应用中，当前区域性映射到 [windows.applicationmodel.resources.core](https://docs.microsoft.com/uwp/api/windows.applicationmodel.resources.core.resourcecontext#properties_) 属性，这是一项全局设置，它是一个全局设置。 设置 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 属性将更改整个应用的区域性; 不能在每个线程的基础上设置区域性。    
  
## Examples  
 下面的代码示例演示如何更改 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 当前线程的和。  
  
 [!code-cpp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CPP/currentculture.cpp#11)]
 [!code-csharp[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/CS/currentculture.cs#11)]
 [!code-vb[System.Globalization.CultureInfo.CurrentCulture2#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.CurrentCulture2/VB/currentculture.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">该属性设置为不能用于定位资源文件的区域性名称。 资源文件名必须仅包含字母、数字、连字符或下划线。</exception>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Threading.Thread.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.DateTimeFormatInfo DateTimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.DateTimeFormatInfo DateTimeFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DateTimeFormat As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::DateTimeFormatInfo ^ DateTimeFormat { System::Globalization::DateTimeFormatInfo ^ get(); void set(System::Globalization::DateTimeFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateTimeFormat : System.Globalization.DateTimeFormatInfo with get, set" Usage="System.Globalization.CultureInfo.DateTimeFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Globalization.DateTimeFormatInfo" />，它定义适合区域性的、显示日期和时间的格式。</summary>
        <value>一个 <see cref="T:System.Globalization.DateTimeFormatInfo" />，它定义适合区域性的、显示日期和时间的格式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>替代  
 用户可以选择通过 "控制面板" 的 "区域和语言选项" 部分，替代与 Windows 的当前区域性关联的某些值。 例如，用户可以选择以不同的格式显示日期，或使用区域性默认值以外的其他货币。  
  
 如果 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 为 `true` ，并且指定的区域性与 Windows 的当前区域性匹配，则将 <xref:System.Globalization.CultureInfo> 使用这些重写，包括属性返回的实例的属性的用户设置 <xref:System.Globalization.DateTimeFormatInfo> <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> ，以及 <xref:System.Globalization.NumberFormatInfo> 由属性返回的实例的属性 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 。 如果用户设置与关联的区域性不兼容 <xref:System.Globalization.CultureInfo> （例如，如果所选的日历不是 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> ），则方法的结果和属性的值是不确定的。  
  
 在 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> <xref:System.Globalization.CultureInfo.NumberFormat%2A> 应用程序访问属性之前，不会计算属性和属性的值。 如果用户可以在应用程序运行时将当前区域性更改为新的区域性，然后应用程序访问 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 或 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 属性，则应用程序将检索新区域性的默认值，而不是原始区域性的重写。 若要保留原始当前区域性的替代，应用程序应 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> <xref:System.Globalization.CultureInfo.NumberFormat%2A> 在更改当前区域性之前访问和属性。  
  
   
  
## Examples  
 下面的代码示例演示了 CultureInfo。 Clone 还会克隆 <xref:System.Globalization.DateTimeFormatInfo> <xref:System.Globalization.NumberFormatInfo> 与相关联的和实例 <xref:System.Globalization.CultureInfo> 。  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 null。</exception>
        <exception cref="T:System.InvalidOperationException">设置了 <see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> 属性或任意 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 属性，但 <see cref="T:System.Globalization.CultureInfo" /> 为只读。</exception>
        <block subset="none" type="usage"><para>如果 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 为， <see cref="T:System.Globalization.TaiwanCalendar" /> 但未 <see cref="P:System.Threading.Thread.CurrentCulture" /> 设置为中文 (台湾) ，名为 zh-chs，则，然后 <see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" /> <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" /> <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> 返回空字符串 ( "" ) 。</para></block>
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentCulture { get; set; }" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultThreadCurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo? DefaultThreadCurrentCulture { get; set; }" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName Language="C#">[set: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前应用程序域中线程的默认区域性。</summary>
        <value>如果当前系统区域性为应用程序域中的默认线程区域性，则为当前应用程序中线程的默认区域性或 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 和早期版本中，默认情况下，所有线程的区域性都设置为 Windows 系统区域性。 对于当前区域性与默认系统区域性不同的应用程序，通常不需要此行为。 在中 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] ， <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 属性使应用程序能够定义应用程序域中所有线程的默认区域性。  
  
> [!IMPORTANT]
>  如果未显式设置在应用程序域中执行的任何现有线程的区域性，则设置 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 属性还会更改这些线程的区域性。 但是，如果这些线程在另一个应用程序域中执行，则其区域性由 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 该应用程序域中的属性定义，或者，如果未定义默认值，则由默认系统区域性定义。 因此，建议你始终显式设置主应用程序线程的区域性，而不是依赖于 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 属性来定义主应用程序线程的区域性。  
  
 除非显式设置，否则属性的值 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 为 `null` ，并且应用程序域中未分配显式区域性的线程的区域性是由默认的 Windows 系统区域性定义的。  
  
 有关区域性、线程和应用程序域的详细信息，请参阅 "引用" 页中的 "区域性和线程" 和 "区域性和应用程序域" 部分 <xref:System.Globalization.CultureInfo> 。  
  
   
  
## Examples  
 下面的示例演示了定义新线程的当前区域性时 .NET Framework 的默认行为。 在启动时，该示例将当前区域性和当前 UI 区域性设置为法语 (法国) 在所有系统上（默认系统区域性已经是法语 (法国) 的系统除外）。 如果默认系统区域性已是法语 (法国) ，则代码会将当前区域性和当前 UI 区域性设置为英语 (美国) 。 然后，它调用 `DisplayRandomNumbers` 例程，该例程生成三个随机数并将它们显示为货币值。 接下来，它创建一个新的线程，该线程也执行 `DisplayRandomNumbers` 例程。  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture1.vb#1)]  
  
 如示例中的输出所示，当在系统区域性为英语 (美国) 的计算机上运行该示例时，主线程将使用法语 (法国) 区域性的格式设置约定来显示其货币值。 但是，因为工作线程的区域性派生自当前的 Windows 系统区域性，而不是应用程序的当前区域性，所以，工作线程使用英语 (美国) 区域性的格式设置约定来显示货币值。  
  
 下面的示例使用 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 和 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 属性定义新的应用程序线程的当前区域性和当前 UI 区域性。 在启动时，该示例将当前区域性和当前 UI 区域性设置为法语 (法国) 在所有系统上（默认系统区域性已经是法语 (法国) 的系统除外）。 如果默认系统区域性已是法语 (法国) ，则它会将当前区域性和当前 UI 区域性设置为英语 (美国) 。 然后，它调用 `DisplayRandomNumbers` 例程，该例程生成三个随机数并将它们显示为货币值。 接下来，它创建一个新的线程，该线程也执行 `DisplayRandomNumbers` 例程。  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/cs/defaultculture2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentCulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentculture/vb/defaultculture2.vb#2)]  
  
 如示例中的输出所示，当在系统区域性为英语 (美国) 的计算机上运行该示例时，主线程和工作线程均使用法语 (法国) 区域性的格式设置约定来显示它们的货币值。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      </Docs>
    </Member>
    <Member MemberName="DefaultThreadCurrentUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo DefaultThreadCurrentUICulture { get; set; }" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo DefaultThreadCurrentUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property DefaultThreadCurrentUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ DefaultThreadCurrentUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultThreadCurrentUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureInfo.DefaultThreadCurrentUICulture" />
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo? DefaultThreadCurrentUICulture { get; set; }" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName Language="C#">[set: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前应用程序域中线程的默认 UI 区域性。</summary>
        <value>如果当前系统 UI 区域性为当前应用程序域中的默认线程 UI 区域性，则当前应用程序域中线程的默认 UI 区域性或 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 和早期版本中，默认情况下，所有线程的 UI 区域性都设置为 Windows 系统区域性。 对于当前 UI 区域性与默认系统区域性不同的应用程序，通常不需要此行为。 在中 [!INCLUDE[net_v45](~/includes/net-v45-md.md)] ， <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 可以使用属性定义应用程序域中所有线程的默认 UI 区域性。  
  
> [!IMPORTANT]
>  如果未显式设置在应用程序域中执行的任何现有线程的 UI 区域性，则设置 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 属性还会更改这些线程的区域性。 但是，如果这些线程在另一个应用程序域中执行，则其区域性由 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 该应用程序域中的属性定义，或者，如果未定义默认值，则由默认系统区域性定义。 因此，建议你始终显式设置主应用程序线程的区域性，并且不要依赖 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 属性来定义主应用程序线程的区域性。  
  
 除非显式设置，否则属性的值 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 为 `null` ，并且应用程序域中尚未分配显式区域性的所有线程的当前区域性均由默认的 Windows 系统区域性定义。  
  
 有关区域性、线程和应用程序域的详细信息，请参阅 "引用" 页中的 "区域性和线程" 和 "区域性和应用程序域" 部分 <xref:System.Globalization.CultureInfo> 。  
  
   
  
## Examples  
 下面的示例演示了定义新线程的当前区域性时 .NET Framework 的默认行为。 它使用英语和俄语资源。 以下名为 GreetingStrings.txt 的文本文件包含英语资源：  
  
```  
greeting =Hello again!  
newGreeting=Hello!  
```  
  
 使用 [资源文件生成器](/dotnet/framework/tools/resgen-exe-resource-file-generator) 通过以下命令将其编译为名为 GreetingStrings 的二进制 .resources 文件。  
  
```console  
resgen greetingstrings.txt  
```  
  
 以下名为 GreetingStrings.ru-RU.txt 的文本文件包含俄文语言资源：  
  
```  
greeting=Еще раз привет!  
newGreeting=Привет!  
```  
  
 使用 [资源文件生成器](/dotnet/framework/tools/resgen-exe-resource-file-generator) 通过以下命令将其编译为名为 GreetingStrings.ru 的二进制 .resources 文件。  
  
```console  
resgen greetingstrings.ru-RU.txt  
```  
  
 下面显示的应用程序代码位于名为示例1或 Example1.cs 的文件中。 使用 Visual Basic 编译器的以下命令将其编译为可执行文件：  
  
```console  
vbc Example1.vb /resource:GreetingStrings.resources  
```  
  
 对于 c # 编译器，命令类似：  
  
```console  
csc /resource:GreetingStrings.resources Example1.cs  
```  
  
 这将创建一个包含该示例的可执行代码以及其回退区域性的资源的程序集。 还可以使用 [程序集链接器](/dotnet/framework/tools/al-exe-assembly-linker) 通过以下命令，为俄语 (俄罗斯) 区域性创建资源文件：  
  
```console  
>al /embed:greetingstrings.ru-RU.resources /c:ru-RU /template:example1.exe /out:ru-RU\Example1.resources.dll  
```  
  
 在启动时，该示例在所有系统上将当前区域性和当前 UI 区域性设置为俄语 (俄罗斯) ，但默认系统区域性已 (俄罗斯) 的系统除外。 如果默认系统区域性已 (俄罗斯) ，则代码会将当前区域性和当前 UI 区域性设置为英语 (美国) 。 然后，它调用 `ShowGreeting` 例程，该例程在第一次调用时显示一个简单的字符串，并在后续方法调用中显示略微不同的字符串。 接下来，它创建一个新的线程，该线程也执行 `ShowGreeting` 例程。  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example1.vb#1)]  
  
 如示例中的输出所示，当在系统区域性为英语 (美国) 的计算机上运行该示例时，主线程将以俄语显示其初始字符串。 但是，因为工作线程的区域性派生自当前的 Windows 系统区域性，而不是应用程序的当前区域性，所以，工作线程会将其字符串显示为英文。  
  
 下面的示例使用 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentCulture%2A> 和 <xref:System.Globalization.CultureInfo.DefaultThreadCurrentUICulture%2A> 属性定义新的应用程序线程的当前区域性和当前 UI 区域性。  
  
 该示例使用与前一示例相同的资源文件。 除了可执行程序集的名称发生变化外，编译和将本地化的俄文语言资源嵌入附属程序集的命令也是相同的。  
  
 在启动时，该示例在所有系统上将当前区域性和当前 UI 区域性设置为俄语 (俄罗斯) ，但默认系统区域性已 (俄罗斯) 的系统除外。 如果默认系统区域性已 (俄罗斯) ，则它会将当前区域性和当前 UI 区域性设置为英语 (美国) 。 然后，它调用 `ShowGreeting` 例程，该例程在第一次调用时显示一个简单的字符串，并在后续方法调用中显示略微不同的字符串。 接下来，它创建一个新的线程，该线程也执行 `ShowGreeting` 例程。  
  
 [!code-csharp[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/cs/example2.cs#2)]
 [!code-vb[System.Globalization.CultureInfo.DefaultThreadCurrentUICulture#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.defaultthreadcurrentuiculture/vb/example2.vb#2)]  
  
 如示例中的输出所示，当在系统区域性为英语 (美国) 的计算机上运行该示例时，主线程和工作线程都将以俄语语言显示其字符串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在集运算中，<see cref="P:System.Globalization.CultureInfo.Name" /> 属性值无效。</exception>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.DefaultThreadCurrentCulture" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public virtual string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.Globalization.CultureInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取完整的本地化区域性名称。</summary>
        <value>格式为 *languagefull* [*country/regionfull*] 的完整本地化区域性名称，其中 *languagefull* 是语言的全名， *country/regionfull* 是国家/地区的全名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性表示对象的本地化名称 <xref:System.Globalization.CultureInfo> 。  
  
 由于脚本编写或格式设置约定，区域性名称可能会有所不同。 应使用返回的名称进行显示，而不会尝试对其进行分析。  
  
 如果通过类创建自定义区域性 <xref:System.Globalization.CultureAndRegionInfoBuilder> ，则 <xref:System.Globalization.CultureInfo.DisplayName%2A> 会将属性初始化为属性的值 <xref:System.Globalization.CultureInfo.NativeName%2A> 。  
  
   
  
## Examples  
 下面的代码示例显示非特定区域性的几个属性。  
  
> [!NOTE]
>  该示例分别显示带有0x0004 和0x7C04 区域性标识符的 zh-chs-CHS 和 zh-chs CHT。 但是，Windows Vista 应用程序应使用 zh-chs-Hans 名称而不是 zh-chs 和 zh-chs-zh-hant 名称，而不是 zh-chs-CHT。 Zh-chs-Hans 和 zh-chs-Zh-hant 名称表示当前标准，除非你有使用旧名称的原因，否则应该使用。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="EnglishName">
      <MemberSignature Language="C#" Value="public virtual string EnglishName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string EnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.EnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property EnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ EnglishName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EnglishName : string" Usage="System.Globalization.CultureInfo.EnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取格式为 languagefull** [country/regionfull**] 的英语区域性名称。</summary>
        <value>格式为 *languagefull* [*country/regionfull*] 的英语区域性名称，其中 *languagefull* 是语言的全名， *country/regionfull* 是国家/地区的全名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 例如， <xref:System.Globalization.CultureInfo.EnglishName%2A> 特定区域性名称 en-us 为 "英语 (美国) "。  
  
 此属性的值相同，无论 .NET Framework 的语言版本。  
  
   
  
## Examples  
 下面的代码示例显示非特定区域性的几个属性。  
  
> [!NOTE]
>  该示例分别显示带有0x0004 和0x7C04 区域性标识符的较早 zh-chs-CHS 和 zh-chs CHT 区域性名称。 但是，Windows Vista 应用程序应使用 zh-chs-Hans 名称而不是 zh-chs 和 zh-chs-zh-hant 名称，而不是 zh-chs-CHT。 Zh-chs-Hans 和 zh-chs-Zh-hant 名称表示当前标准，除非你有使用旧名称的原因，否则应该使用。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="cultureInfo.Equals value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">将与当前 <see cref="T:System.Globalization.CultureInfo" /> 进行比较的对象。</param>
        <summary>确定指定的对象是否与当前 <see cref="T:System.Globalization.CultureInfo" /> 具有相同的区域性。</summary>
        <returns>如果 <paramref name="value" /> 与当前 <see cref="T:System.Globalization.CultureInfo" /> 具有相同的区域性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法重写 <xref:System.Object.Equals%2A?displayProperty=nameWithType>。  
  
 如果两个 <xref:System.Globalization.CultureInfo> 对象的 <xref:System.Globalization.CultureInfo.Name%2A> 和属性相等，则将它们视为相等 <xref:System.Globalization.CultureInfo.CompareInfo%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetConsoleFallbackUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetConsoleFallbackUICulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetConsoleFallbackUICulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetConsoleFallbackUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConsoleFallbackUICulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetConsoleFallbackUICulture();" />
      <MemberSignature Language="F#" Value="member this.GetConsoleFallbackUICulture : unit -&gt; System.Globalization.CultureInfo" Usage="cultureInfo.GetConsoleFallbackUICulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果默认的图形用户界面区域性不合适，则获取适合控制台应用程序的备用用户界面区域性。</summary>
        <returns>用于在控制台上读取和显示文本的备用区域性。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 阿拉伯语、希伯来语、乌尔都语和叙利亚语等语言基于双向文本。 带有图形用户界面的 Windows 应用程序支持双向语言。 但是，使用操作系统控制台的文本用户界面的控制台应用程序不提供双向支持。 因此，如果将控制台应用程序本地化为阿拉伯语或希伯来语，你的应用程序将在控制台屏幕上显示无法读取的文本。  
  
 用户界面区域性指定应用程序支持用户输入和输出所需的资源，默认情况下，它与操作系统区域性相同。 例如， <xref:System.Globalization.CultureInfo.CurrentUICulture%2A?displayProperty=nameWithType> 属性返回阿拉伯语操作系统的阿拉伯语区域性。 使用 <xref:System.Globalization.CultureInfo.GetConsoleFallbackUICulture%2A> 方法检索适用于控制台应用程序用户界面的区域性。 在应用程序检索回退用户界面区域性后，应将区域性分配给当前线程的当前用户界面区域性。 有关详细信息，请参阅属性的 "显式设置当前 UI 区域性" 部分 <xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 。  
  
 下面是一些预定义的区域性，它们具有从预定义的区域性名称不同的备用用户界面区域性名称。  
  
|预定义区域性|区域性名称|回退用户界面区域性名称|  
|------------------------|------------------|------------------------------------------|  
|阿姆哈拉语|am|zh-CN|  
|阿姆哈拉语（埃塞俄比亚）|am-ET|zh-CN|  
| (非特定阿拉伯) |ar|zh-CN|  
|阿拉伯语（阿拉伯联合酋长国）|ar-AE|zh-CN|  
|阿拉伯语（巴林）|ar-BH|zh-CN|  
|阿拉伯语（阿尔及利亚）|ar-DZ|fr-FR|  
|阿拉伯语（埃及）|ar-EG|zh-CN|  
|阿拉伯语（伊拉克）|ar-IQ|zh-CN|  
|阿拉伯语（约旦）|ar-JO|zh-CN|  
|阿拉伯语（科威特）|ar-KW|zh-CN|  
|阿拉伯语（黎巴嫩）|ar-LB|zh-CN|  
|阿拉伯语（利比亚）|ar-LY|zh-CN|  
|阿拉伯语（摩洛哥）|ar-MA|fr-FR|  
|阿拉伯语（阿曼）|ar-OM|zh-CN|  
|阿拉伯语（卡塔尔）|ar-QA|zh-CN|  
|阿拉伯语（沙特阿拉伯）|ar-SA|zh-CN|  
|阿拉伯语（叙利亚）|ar-SY|zh-CN|  
|阿拉伯语（突尼斯）|ar-TN|fr-FR|  
|阿拉伯语（也门）|ar-YE|zh-CN|  
|阿萨姆语|as|zh-CN|  
|阿萨姆语（印度）|as-IN|zh-CN|  
|Bangla|bn|zh-CN|  
|孟加拉语（孟加拉国）|bn-BD|zh-CN|  
|孟加拉语（印度）|bn-IN|zh-CN|  
|藏语|bo|zh-CN|  
|藏语（中国）|bo-CN|zh-CN|  
|马尔代夫语|dv|zh-CN|  
|马尔代夫语 (印度) |dv-MV|zh-CN|  
|波斯语|fa|zh-CN|  
|波斯语（伊朗）|fa-IR|zh-CN|  
|古吉拉特语|gu|zh-CN|  
|古吉拉特语（印度）|gu-IN|zh-CN|  
|希伯来语|he|zh-CN|  
|希伯来语（以色列）|he-IL|zh-CN|  
|印地语|hi|zh-CN|  
|印地语（印度）|hi-IN|zh-CN|  
|彝语|部分|zh-CN|  
|彝语（中国）|ii-CN|zh-CN|  
|Inukitut 音节|iu-|zh-CN|  
|Inukitut 音节 (加拿大) |iu-|zh-CN|  
|高棉语|千米|zh-CN|  
|高棉语（柬埔寨）|km-KH|zh-CN|  
|卡纳达语|kn|zh-CN|  
|卡纳达语（印度）|kn-IN|zh-CN|  
|孔卡尼语|kok|zh-CN|  
|孔卡尼语（印度）|kok-IN|zh-CN|  
|老挝语|高低|zh-CN|  
|老挝语(老挝人民民主共和国)|lo-LA|zh-CN|  
|马拉雅拉姆语|ml|zh-CN|  
|马拉雅拉姆语（印度）|ml-IN|zh-CN|  
|Mohawk-100|moh|zh-CN|  
|莫霍克语（加拿大）|moh-CA|zh-CN|  
|马拉地语|mr|zh-CN|  
|马拉地语（印度）|mr-IN|zh-CN|  
|尼泊尔语|ne|zh-CN|  
|尼泊尔语（尼泊尔）|ne-NP|zh-CN|  
|挪威语|否|nb-NO|  
|Odiya|或|zh-CN|  
|Odiya (印度) |or-IN|zh-CN|  
|旁遮普语|pa|zh-CN|  
|旁遮普语（印度）|pa-IN|zh-CN|  
|达里语|pr|zh-CN|  
|达里语（阿富汗）|prs-AF|zh-CN|  
|普什图语|ps|zh-CN|  
|普什图语（阿富汗）|ps-AF|zh-CN|  
|梵文|sa|zh-CN|  
|梵语（印度）|南美|zh-CN|  
|僧伽罗语|si|zh-CN|  
|僧伽罗语（斯里兰卡）|si-LK|zh-CN|  
|叙利亚语|syr|zh-CN|  
|叙利亚语（叙利亚）|syr-SY|zh-CN|  
|泰米尔语|ta|zh-CN|  
|泰米尔语（印度）|ta-IN|zh-CN|  
|泰卢固语|te|zh-CN|  
|泰卢固语（印度）|te-IN|zh-CN|  
|泰语|th|zh-CN|  
|泰语（泰国）|第 th|zh-CN|  
|维吾尔语|buj-ug-pkt|zh-CN|  
|维吾尔语（中国）|ug-CN|zh-CN|  
|乌尔都语|ur|zh-CN|  
|乌尔都语（巴基斯坦）|ur-PK|zh-CN|  
|越南语|vi|zh-CN|  
|越南语（越南）|vi-VN|zh-CN|  
  
 您的应用程序可用于 <xref:System.Globalization.CultureAndRegionInfoBuilder> 创建区域性的替换，并且该区域性可以具有所选的控制台回退区域性。  
  
   
  
## Examples  
 下面的代码示例显示与区域性对象关联的后备用户界面区域性。  
  
 [!code-cpp[sys.glob.ci.getCFUIC#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/cpp/cfuic.cpp#1)]
 [!code-csharp[sys.glob.ci.getCFUIC#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.ci.getCFUIC/CS/cfuic.cs#1)]
 [!code-vb[sys.glob.ci.getCFUIC#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.ci.getCFUIC/VB/cfuic.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCultureInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>检索某个区域性的缓存的只读实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (culture As Integer) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(int culture);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : int -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="culture">区域设置标识符 (LCID)。</param>
        <summary>使用特定的区域性标识符检索某个区域性的缓存的只读实例。</summary>
        <returns>只读 <see cref="T:System.Globalization.CultureInfo" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 建议使用此方法 () 的字符串重载 <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29> ，因为应使用区域设置名称而不是 lcid。 对于自定义区域设置，区域设置名称是必需的。  
  
 如果 `culture` 是当前区域性的区域设置标识符，则返回的 <xref:System.Globalization.CultureInfo> 对象不反映任何用户重写。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="culture" /> 小于零。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="culture" /> 指定不支持的区域性。 有关详细信息，请参阅“调用方备注”部分。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] <see cref="T:System.ArgumentException" /> 如果不是有效的区域性标识符，则和更早的版本将引发 <paramref name="culture" /> 。 从开始 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ，此方法将引发 <see cref="T:System.Globalization.CultureNotFoundException" /> 。 从在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] Windows 7 或更高版本下的或更高版本下运行的应用程序，该方法会尝试检索 <see cref="T:System.Globalization.CultureInfo" /> 其标识符 <paramref name="culture" /> 来自操作系统的对象; 如果操作系统不支持该区域性，则方法将引发 <see cref="T:System.Globalization.CultureNotFoundException" /> 。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.LCID" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="name">区域性的名称。 <paramref name="name" /> 不区分大小写。</param>
        <summary>使用特定的区域性名称检索某个区域性的缓存的只读实例。</summary>
        <returns>只读 <see cref="T:System.Globalization.CultureInfo" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

有关 Windows 系统上的预定义区域性名称的列表，请参阅[windows 支持的语言/区域名称列表](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)中的**语言标记**列。 列名遵循 [BCP 47](https://tools.ietf.org/html/bcp47) 定义的标准。 此外，从 Windows 10 开始， `name` 可以是任何有效的 BCP-47 语言标记。  
  
 <xref:System.Globalization.CultureInfo.GetCultureInfo%2A>方法检索缓存的只读 <xref:System.Globalization.CultureInfo> 对象。 它比对构造函数的相应调用提供更好的性能 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=nameWithType> 。  
  
 如果 `name` 是当前区域性的名称，则返回的 <xref:System.Globalization.CultureInfo> 对象不反映任何用户重写。 这使方法适用于在系统上没有实际用户帐户的服务器应用程序或工具，并且需要有效地加载多个区域性。  
  
 如果 `name` 为 <xref:System.String.Empty?displayProperty=nameWithType> ，则此方法返回固定区域性。 这等效于检索属性的值 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> 为 null。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> 指定不支持的区域性。 有关详细信息，请参阅“调用方备注”部分。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)] <see cref="T:System.ArgumentException" /> 如果不是有效的区域性名称，和更早的版本将引发 <paramref name="name" /> 。 从开始 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ，此方法将引发 <see cref="T:System.Globalization.CultureNotFoundException" /> 。 从在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] Windows 7 或更高版本下的或更高版本下运行的应用程序中，该方法会尝试检索 <see cref="T:System.Globalization.CultureInfo" /> 其标识符 <paramref name="name" /> 来自操作系统的对象; 如果操作系统不支持该区域性，并且如果不 <paramref name="name" /> 是补充或替代区域性的名称，则该方法将引发 <see cref="T:System.Globalization.CultureNotFoundException" /> 。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name, bool predefinedOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name, bool predefinedOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String, predefinedOnly As Boolean) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name, bool predefinedOnly);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string * bool -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo (name, predefinedOnly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="predefinedOnly" Type="System.Boolean" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="name">区域性的名称。 此名称不区分大小写。</param>
        <param name="predefinedOnly">如果请求创建平台已知的区域性的实例，则为 <see langword="true" />。 如果即使平台未包含创建的区域性的数据，也可以检索此区域性，则为 <see langword="false" />。</param>
        <summary>检索某个区域性的缓存的只读实例。</summary>
        <returns>区域性的只读实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

默认情况下，在尝试创建任何区域性和基础平台 (Windows NLS 或 ICU) 不会为此区域性携带特定数据时，平台会尝试使用其他区域性的数据或某些常量值构造区域性。

如果将设置为，则 `predefinedOnly` `true` 只有在平台具有该区域性的实际数据时，才会创建区域性。 

          ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfo (string name, string altName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfo(string name, string altName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfo(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfo (name As String, altName As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfo(System::String ^ name, System::String ^ altName);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfo : string * string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfo (name, altName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="altName" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="name">区域性的名称。 <paramref name="name" /> 不区分大小写。</param>
        <param name="altName">区域性的名称提供了 <see cref="T:System.Globalization.TextInfo" /> 和 <see cref="T:System.Globalization.CompareInfo" /> 对象，这些对象用于对 <paramref name="name" /> 进行初始化。 <paramref name="altName" /> 不区分大小写。</param>
        <summary>检索某个区域性的缓存的只读实例。 参数指定了一个使用 <see cref="T:System.Globalization.TextInfo" /> 和 <see cref="T:System.Globalization.CompareInfo" /> 对象进行初始化的区域性，而这些对象则是由另一个区域性指定的。</summary>
        <returns>只读 <see cref="T:System.Globalization.CultureInfo" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关 Windows 系统上的预定义区域性名称的列表，请参阅[windows 支持的语言/区域名称列表](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)中的**语言标记**列。 列名遵循 [BCP 47](https://tools.ietf.org/html/bcp47) 定义的标准。 此外，从 Windows 10 开始， `name` 可以是任何有效的 BCP-47 语言标记。  
  
 <xref:System.Globalization.CultureInfo.GetCultureInfo%2A>方法获取缓存的只读 <xref:System.Globalization.CultureInfo> 对象。 它比对构造函数的相应调用提供更好的性能 <xref:System.Globalization.CultureInfo.%23ctor%2A> 。 方法用于创建类似于参数指定的区域性 `name` ，但具有不同的排序和大小写规则。  
  
 如果 `name` 或 `altName` 是当前区域性的名称，则返回的对象不反映任何用户重写。 如果 `name` 为 <xref:System.String.Empty?displayProperty=nameWithType> ，则此方法返回固定区域性。 这等效于检索属性的值 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 。 如果 `altName` 为 <xref:System.String.Empty?displayProperty=nameWithType> ，则该方法使用由固定区域性指定的书写体系和比较规则。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> 或 <paramref name="altName" /> 为 null。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> 或 <paramref name="altName" /> 用于指定不支持的区域性。 有关详细信息，请参阅“调用方备注”部分。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]和早期版本引发（ <see cref="T:System.ArgumentException" /> 如果或不是 <paramref name="name" /> <paramref name="altName" /> 有效的区域性名称）。 从开始 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ，此方法将引发 <see cref="T:System.Globalization.CultureNotFoundException" /> 。 从在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] Windows 7 或更高版本下的或更高版本下运行的应用程序中，该方法会尝试检索 <see cref="T:System.Globalization.CultureInfo" /> 其标识符 <paramref name="name" /> 来自操作系统的对象; 如果操作系统不支持该区域性，并且如果不 <paramref name="name" /> 是补充或替代区域性的名称，则该方法将引发 <see cref="T:System.Globalization.CultureNotFoundException" /> 异常。 从在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] Windows 7 或更高版本下的或更高版本下运行的应用程序中，该方法会尝试检索 <see cref="T:System.Globalization.CultureInfo" /> 其标识符 <paramref name="name" /> 来自操作系统的对象; 如果操作系统不支持该区域性，并且如果不 <paramref name="name" /> 是补充或替代区域性的名称，则该方法将引发 <see cref="T:System.Globalization.CultureNotFoundException" /> 异常。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultureInfoByIetfLanguageTag">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo GetCultureInfoByIetfLanguageTag(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultureInfoByIetfLanguageTag (name As String) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ GetCultureInfoByIetfLanguageTag(System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetCultureInfoByIetfLanguageTag : string -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="name">按 RFC 4646 标准指定的语言的名称。</param>
        <summary>已弃用。 检索只读的 <see cref="T:System.Globalization.CultureInfo" /> 对象，其语言特征由指定的 RFC 4646 语言标记标识。</summary>
        <returns>只读 <see cref="T:System.Globalization.CultureInfo" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  此方法和 <xref:System.Globalization.CultureInfo.IetfLanguageTag%2A> 属性已弃用。 应用程序不使用这些元素，而应使用新的 <xref:System.Globalization.CultureInfo> 对象并调用 <xref:System.Globalization.CultureInfo.Name%2A> 属性。 IETF 标记和名称是相同的。  
  
 Internet 工程任务组 (IETF) 所维护的 RFC 4646 标准定义了一个 IETF 语言标记，该标记提供了一种统一的方式来识别语言。 IETF 语言标记的格式与属性返回的区域性名称相同 <xref:System.Globalization.CultureInfo.Name%2A> ，但不会唯一标识区域性。 如果不同的区域性具有相同的语言特征，则它们共享相同的 IETF 语言标记。 区域性的语言特征包含在 <xref:System.Globalization.TextInfo> 与对象关联的对象中 <xref:System.Globalization.CultureInfo> 。  
  
 IETF 语言标记由必需的语言标识符、可选脚本标识符和可选区域标识符组成。  
  
 您的应用程序应使用检索到的区域性来控制特定于语言的任务，例如管理拼写或语法检查程序。 应用程序不应使用检索到的区域性来控制区域性特定的任务，例如对文本或格式设置时间和日期进行排序。  
  
 有关详细信息，请参阅 RFC 4646 "用于标识语言的标记" 和最新草案标准 Draft-phillips-langtags-05.txt，位于 [https://go.microsoft.com/fwlink/?LinkId=100231](https://go.microsoft.com/fwlink/?LinkId=100231) 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="name" /> 为 null。</exception>
        <exception cref="T:System.Globalization.CultureNotFoundException"><paramref name="name" /> 与支持的区域性不对应。</exception>
        <block subset="none" type="usage"><para>[!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)]如果和更早的版本 <see cref="T:System.ArgumentException" /> <paramref name="name" /> 与支持的区域性的名称不对应，则会引发。 从开始 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ，此方法将引发 <see cref="T:System.Globalization.CultureNotFoundException" /> 。</para></block>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
        <altmember cref="M:System.Globalization.CultureInfo.ClearCachedData" />
      </Docs>
    </Member>
    <Member MemberName="GetCultures">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo[] GetCultures (System.Globalization.CultureTypes types);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo[] GetCultures(valuetype System.Globalization.CultureTypes types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCultures (types As CultureTypes) As CultureInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Globalization::CultureInfo ^&gt; ^ GetCultures(System::Globalization::CultureTypes types);" />
      <MemberSignature Language="F#" Value="static member GetCultures : System.Globalization.CultureTypes -&gt; System.Globalization.CultureInfo[]" Usage="System.Globalization.CultureInfo.GetCultures types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Globalization.CultureTypes" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="types">按位组合的枚举值，用于筛选要检索的区域性。</param>
        <summary>获取由指定 <see cref="T:System.Globalization.CultureTypes" /> 参数筛选的支持的区域性列表。</summary>
        <returns>一个数组，该数组包含由 <paramref name="types" /> 参数指定的区域性。 区域性数组未排序。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.GetCultures%2A>最常调用方法，并将 `types` 参数设置为以下值：  
  
-   <xref:System.Globalization.CultureTypes.SpecificCultures>，它返回所有特定区域性。  
  
-   <xref:System.Globalization.CultureTypes.NeutralCultures>，它返回所有非特定区域性和固定区域性。  
  
-   <xref:System.Globalization.CultureTypes.AllCultures>，它返回所有非特定区域性和特定区域性、在 Windows 系统中安装的区域性以及用户创建的自定义区域性。  
  
-   <xref:System.Globalization.CultureTypes.UserCustomCulture>，它返回所有自定义区域性，如类注册的自定义区域性 <xref:System.Globalization.CultureAndRegionInfoBuilder> 。 在 Windows 10 之前的 Windows 版本中， <xref:System.Globalization.CultureTypes.UserCustomCulture> 该值适用于所有用户定义的自定义区域性。 从 Windows 10 开始，它适用于缺乏完全区域性数据且没有唯一本地标识符的系统文化，如 <xref:System.Globalization.CultureInfo.LCID%2A> 属性值所示。 因此，当在 Windows 10 和更早版本的 Windows 上运行时，下面的代码将返回不同的结果。  
  
     [!code-csharp[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures3.cs#2)]
     [!code-vb[System.Globalization.CultureInfo.GetCultures#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures3.vb#2)]  
  
   
  
## Examples  
 下面的代码示例显示非特定区域性的几个属性。  
  
> [!NOTE]
>  该示例分别显示带有0x0004 和0x7C04 区域性标识符的 zh-chs-CHS 和 zh-chs CHT。 但是，Windows Vista 应用程序应使用 zh-chs-Hans 名称而不是 zh-chs 和 zh-chs-zh-hant 名称，而不是 zh-chs-CHT。 Zh-chs-Hans 和 zh-chs-Zh-hant 名称表示当前标准，除非你有使用旧名称的原因，否则应该使用。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="types" /> 指定 <see cref="T:System.Globalization.CultureTypes" /> 值的无效组合。</exception>
        <altmember cref="T:System.Globalization.CultureTypes" />
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public virtual object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="cultureInfo.GetFormat formatType" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">要为其获取格式化对象的 <see cref="T:System.Type" />。 此方法仅支持 <see cref="T:System.Globalization.NumberFormatInfo" /> 和 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 两种类型。</param>
        <summary>获取一个定义如何格式化指定类型的对象。</summary>
        <returns><see cref="P:System.Globalization.CultureInfo.NumberFormat" /> 属性的值，如果 <paramref name="formatType" /> 是 <see cref="T:System.Globalization.NumberFormatInfo" /> 类的 <see cref="T:System.Globalization.CultureInfo" /> 对象，则该属性为包含当前 <see cref="T:System.Type" /> 的默认数字格式信息的 <see cref="T:System.Globalization.NumberFormatInfo" />。  
  
- 或 - 
<see cref="P:System.Globalization.CultureInfo.DateTimeFormat" /> 属性的值，如果 <paramref name="formatType" /> 是 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 类的 <see cref="T:System.Globalization.CultureInfo" /> 对象，则该属性为包含当前 <see cref="T:System.Type" /> 的默认日期和时间格式信息的 <see cref="T:System.Globalization.DateTimeFormatInfo" />。  
  
- 或 - 
如果 <paramref name="formatType" /> 为任何其他对象，则为 null。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.GetFormat%2A> 可实现 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>。  
  
 `NumberFormatInfo` 提供与基本数据类型中的格式方法结合使用的区域性特定的数字格式。 `DateTimeFormatInfo` 控制如何针对特定区域性设置日期和时间值的格式。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Type" />
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="cultureInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>用作当前 <see cref="T:System.Globalization.CultureInfo" /> 的哈希函数，适合用在哈希算法和数据结构（如哈希表）中。</summary>
        <returns>当前 <see cref="T:System.Globalization.CultureInfo" /> 的哈希代码。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法重写 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType>。  
  
 此方法为根据 <xref:System.Globalization.CultureInfo.Equals%2A> 方法视为相等的两个对象生成相同的哈希代码。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CultureInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string" Usage="System.Globalization.CultureInfo.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>已弃用。 获取某种语言的 RFC 4646 标准标识。</summary>
        <value>一个表示某种语言的 RFC 4646 标准标识的字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag%2A>不推荐使用此属性和方法。 应改为使用 <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> 属性。 IETF 标记和名称是相同的。  
  
 Internet 工程任务组 (IETF) 所维护的 RFC 4646 标准定义了一个 IETF 语言标记，该标记提供了一种统一的方式来识别语言。 IETF 语言标记的格式与属性返回的区域性名称类似 <xref:System.Globalization.CultureInfo.Name%2A> ，但不会唯一标识区域性。 也就是说，如果不同的区域性具有相同的语言特征，则共享相同的 IETF 语言标记。 区域性的语言特征包含在 <xref:System.Globalization.TextInfo> 与对象关联的对象中 <xref:System.Globalization.CultureInfo> 。  
  
 IETF 语言标记由必需的语言标识符、可选脚本标识符和可选区域标识符组成。  
  
 有关详细信息，请参阅 [RFC 5646 "用于标识语言的标记"](https://go.microsoft.com/fwlink/?LinkId=230876)。 有关子标记的列表，请参阅 [IANA 语言](https://go.microsoft.com/fwlink/?LinkId=230877)子标记注册表。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.TextInfo" />
        <altmember cref="T:System.Globalization.CultureAndRegionInfoBuilder" />
      </Docs>
    </Member>
    <Member MemberName="InstalledUICulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InstalledUICulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InstalledUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InstalledUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InstalledUICulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InstalledUICulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.InstalledUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示操作系统中安装的区域性的 <see cref="T:System.Globalization.CultureInfo" />。</summary>
        <value>表示操作系统中安装的区域性的 <see cref="T:System.Globalization.CultureInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在已本地化的操作系统（例如，日语版本的 Windows）中，此属性返回操作系统的区域性。 此属性在 `GetSystemDefaultUILanguage` WINDOWS API 中是等效的。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Resources.ResourceManager" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
      </Docs>
    </Member>
    <Member MemberName="InvariantCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo InvariantCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo InvariantCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.InvariantCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ InvariantCulture { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantCulture : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.InvariantCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取不依赖于区域性（固定）的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</summary>
        <value>不依赖于区域性（固定）的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 固定区域性不区分区域性;它与英语语言相关联，而不是与任何国家/地区相关联。 通过在对实例化方法的调用中使用空字符串 ( "" ) ，按名称指定固定区域性 <xref:System.Globalization.CultureInfo> 。 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> 还检索固定区域性的实例。 它可用于 <xref:System.Globalization> 需要区域性的命名空间中的几乎所有方法。 属性（例如、和）返回的对象 <xref:System.Globalization.CultureInfo.CompareInfo%2A> <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> <xref:System.Globalization.CultureInfo.NumberFormat%2A> 还反映了固定区域性的字符串比较和格式设置约定。  
  
 与区域性相关的数据（受用户自定义的更改或对 .NET Framework 或操作系统的更新不同）不同的是，固定区域性数据在一段时间内和安装的区域性之间稳定稳定，用户不能进行自定义。 这样，固定区域性对于需要与区域性无关的结果的操作（例如，保存格式化数据的格式设置和分析操作）或排序和排序操作（要求数据按固定顺序显示，而不考虑区域性）特别有用。  
  
## <a name="string-operations"></a>字符串运算  
 您可以使用固定区域性来执行不受当前线程区域性的约定和跨区域性一致的区分区域性的字符串操作。 例如，您可能希望排序的数据按固定顺序显示，或者将一组标准的大小写约定应用于字符串，而不考虑当前线程的区域性。 为此，请将对象传递 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 给具有参数的方法 <xref:System.Globalization.CultureInfo> ，如 <xref:System.String.Compare%28System.String%2CSystem.String%2CSystem.Boolean%2CSystem.Globalization.CultureInfo%29> 和 <xref:System.String.ToUpper%28System.Globalization.CultureInfo%29> 。  
  
## <a name="persisting-data"></a>保留数据  
 <xref:System.Globalization.CultureInfo.InvariantCulture%2A>属性可用于保存采用与区域性无关的格式的数据。 这提供了一种已知的格式，该格式不会改变，并且可用于跨区域性序列化和反序列化数据。 反序列化数据后，可以根据当前用户的区域性约定适当地设置数据的格式。  
  
 例如，如果选择以字符串形式保留日期和时间数据，则可以将 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 对象传递给 <xref:System.DateTime.ToString%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 或 <xref:System.DateTimeOffset.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> 方法来创建字符串，并且可以将对象传递给 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> <xref:System.DateTime.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=nameWithType> 或 <xref:System.DateTimeOffset.Parse%28System.String%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 方法，以将字符串转换回日期和时间值。 此方法可确保当用户读取或写入数据时，不会更改基础日期和时间值。  
  
 下面的示例使用固定区域性将 <xref:System.DateTime> 值保存为字符串。 然后，它使用法语 (法国) 和德语 (德国) 区域性的格式设置约定来分析字符串并显示其值。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/cs/persist1.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.invariantculture/vb/persist1.vb" id="Snippet1"::: 
  
## <a name="security-decisions"></a>安全决策  
 如果要做出安全决策 (如是否允许基于字符串比较或大小写更改的结果访问系统资源) ，则不应使用固定区域性。 相反，应通过调用包含 <xref:System.StringComparison> 参数并提供 <xref:System.StringComparison.Ordinal?displayProperty=nameWithType> 或作为参数的方法来执行区分大小写或不区分大小写的序号比较 <xref:System.StringComparison.OrdinalIgnoreCase?displayProperty=nameWithType> 。 如果当前区域性发生更改，或者运行代码的计算机上的区域性不同于用于测试代码的区域性，则执行区分区域性的字符串操作的代码可能会导致安全漏洞。 相反，序号比较仅依赖于所比较字符的二进制值。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.Parent" />
        <altmember cref="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsNeutralCulture">
      <MemberSignature Language="C#" Value="public virtual bool IsNeutralCulture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNeutralCulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsNeutralCulture As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsNeutralCulture { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNeutralCulture : bool" Usage="System.Globalization.CultureInfo.IsNeutralCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示当前 <see cref="T:System.Globalization.CultureInfo" /> 是否表示非特定区域性。</summary>
        <value>如果当前 <see cref="T:System.Globalization.CultureInfo" /> 表示非特定区域性，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 非特定区域性是一种与语言（而不是国家或地区）关联的区域性。 它不同于特定区域性，后者是一种与语言和国家或地区关联的区域性。 例如，fr 是非特定法语区域性的名称，而 fr 是法国区域性的名称。  
  
 如果此属性返回 `false` ，则区域性为特定区域性或固定区域性。  
  
   
  
## Examples  
 下面的代码示例确定哪些使用中文的区域性为非特定区域性。  
  
> [!NOTE]
>  该示例分别显示带有0x0004 和0x7C04 区域性标识符的较早 zh-chs-CHS 和 zh-chs CHT 区域性名称。 但是，Windows Vista 应用程序应使用 zh-chs-Hans 名称而不是 zh-chs 和 zh-chs-zh-hant 名称，而不是 zh-chs-CHT。 Zh-chs-Hans 和 zh-chs-Zh-hant 名称表示当前标准，除非你有使用旧名称的原因，否则应该使用。  
  
 [!code-cpp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CPP/neutralculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/CS/neutralculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.IsNeutralCulture2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.IsNeutralCulture2/VB/neutralculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.CultureInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示当前 <see cref="T:System.Globalization.CultureInfo" /> 是否为只读。</summary>
        <value>如果当前 <see langword="true" /> 为只读，则为 <see cref="T:System.Globalization.CultureInfo" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Globalization.CultureInfo> 是只读的，则 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 和 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 实例也是只读的。  
  
   
  
## Examples  
 下面的代码示例演示 <xref:System.Globalization.CultureInfo.IsReadOnly%2A> 还有助于保护 <xref:System.Globalization.DateTimeFormatInfo> <xref:System.Globalization.NumberFormatInfo> 与关联的和实例 <xref:System.Globalization.CultureInfo> 。  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="KeyboardLayoutId">
      <MemberSignature Language="C#" Value="public virtual int KeyboardLayoutId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyboardLayoutId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property KeyboardLayoutId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int KeyboardLayoutId { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyboardLayoutId : int" Usage="System.Globalization.CultureInfo.KeyboardLayoutId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取活动的输入区域设置标识符。</summary>
        <value>一个指定输入区域设置标识符的 32 位的有符号数字。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 输入法区域设置标识符以前称为键盘布局。 输入区域设置标识符是比键盘布局更广泛的概念，因为它还可以指示语音到文本转换器、输入法编辑器 (IME) 或任何其他形式的输入。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public virtual int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.LCID" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CultureInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前 <see cref="T:System.Globalization.CultureInfo" /> 的区域性标识符。</summary>
        <value>当前 <see cref="T:System.Globalization.CultureInfo" /> 的区域性标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在大多数情况下，区域性标识符映射到相应的 NLS 区域设置标识符。  
  
 在 Windows 10 之前的 Windows 版本中，区域设置标识符 `LOCALE_CUSTOM_UNSPECIFIED` (0x1000 或 4096) 分配给用户创建的自定义区域性。 从 Windows 10 开始，将其分配给任何不具有唯一区域设置标识符的区域性，并且不具有系统提供的完整数据。 因此， <xref:System.Globalization.CultureInfo.LCID%2A> 如果在 Windows 10 下运行，迭代区域性并检索具有值的代码 `LOCALE_CUSTOM_UNSPECIFIED` 将返回更大的 <xref:System.Globalization.CultureInfo> 对象子集。  
  
   
  
## Examples  
 下面的代码示例演示了如何 <xref:System.Globalization.CultureInfo> 使用国际排序顺序创建西班牙语 (西班牙) ，并 <xref:System.Globalization.CultureInfo> 使用传统排序顺序创建另一个。  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Globalization.CultureInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取格式为 languagecode2-country/regioncode2 的区域性名称。</summary>
        <value>*languagecode2* - 如果当前与区域性相关，则为为 languagecode2*country/regioncode2*格式的区域性名称 <see cref="T:System.Globalization.CultureInfo" /> ; 如果为固定区域性，则为空字符串。 *languagecode2* 是派生自 ISO 639-1 的小写双字母代码。 *country/regioncode2* 派生自 ISO 3166，一般包含两个大写字母，或一个 BCP-47 语言标记。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

有关属性可以在 Windows 系统上返回的预定义区域性名称和标识符的列表 <xref:System.Globalization.CultureInfo.Name%2A> ，请参阅[windows 支持的语言/区域名称列表](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)中的 "**语言标记**" 列。 列名遵循 [BCP 47](https://tools.ietf.org/html/bcp47) 定义的标准。 此外，从 Windows 10 开始， `name` 可以是任何有效的 BCP-47 语言标记。 请注意，区域性名称可能会发生更改，并且它们还可以反映自定义区域性的名称。  
  
 <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType>属性遵循类主题中提供的命名标准 <xref:System.Globalization.CultureInfo> 。 它返回区域性名称的缩写形式，该名称不包括任何替换排序顺序的指示。 例如，如果 <xref:System.Globalization.CultureInfo> 使用字符串 "de DE_phoneb" 来实例化对象以反映替换排序顺序，则 <xref:System.Globalization.CultureInfo.Name%2A> 属性将返回 "de"。  
  
 若要获取区域性的完整名称，应使用 <xref:System.Globalization.CultureInfo.DisplayName%2A> 、 <xref:System.Globalization.CultureInfo.EnglishName%2A> 或 <xref:System.Globalization.CultureInfo.NativeName%2A> 属性。  
  
   
  
## Examples  
 下面的代码示例显示非特定区域性的几个属性。  
  
> [!NOTE]
>  该示例分别显示带有0x0004 和0x7C04 区域性标识符的较早 zh-chs-CHS 和 zh-chs CHT 区域性名称。 但是，Windows Vista 应用程序应使用 zh-chs-Hans 名称而不是 zh-chs 和 zh-chs-zh-hant 名称，而不是 zh-chs-CHT。 Zh-chs-Hans 和 zh-chs-Zh-hant 名称表示当前标准，除非你有使用旧名称的原因，否则应该使用。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NativeName">
      <MemberSignature Language="C#" Value="public virtual string NativeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NativeName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NativeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NativeName : string" Usage="System.Globalization.CultureInfo.NativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取为区域性设置的显示名称，它由语言、国家/地区以及可选脚本组成。</summary>
        <value>区域性名称，由语言的全名、国家/地区的全名以及可选脚本组成。 有关其格式的讨论，请参见对 <see cref="T:System.Globalization.CultureInfo" /> 类的说明。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性的值相同，无论 .NET Framework 的语言版本。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.NumberFormatInfo NumberFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property NumberFormat As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::NumberFormatInfo ^ NumberFormat { System::Globalization::NumberFormatInfo ^ get(); void set(System::Globalization::NumberFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberFormat : System.Globalization.NumberFormatInfo with get, set" Usage="System.Globalization.CultureInfo.NumberFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Globalization.NumberFormatInfo" />，它定义适合区域性的、显示数字、货币和百分比的格式。</summary>
        <value>一个 <see cref="T:System.Globalization.NumberFormatInfo" />，它定义适合区域性的、显示数字、货币和百分比的格式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
## <a name="overrides"></a>替代  
 用户可以选择通过 "控制面板" 的 "区域和语言选项" 部分，替代与 Windows 的当前区域性关联的某些值。 例如，用户可以选择以不同的格式显示日期，或使用区域性默认值以外的其他货币。  
  
 如果 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 为 `true` ，并且指定的区域性与 Windows 的当前区域性匹配，则将 <xref:System.Globalization.CultureInfo> 使用这些重写，包括属性返回的实例的属性的用户设置 <xref:System.Globalization.DateTimeFormatInfo> <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> ，以及 <xref:System.Globalization.NumberFormatInfo> 由属性返回的实例的属性 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 。 如果用户设置与关联的区域性不兼容 <xref:System.Globalization.CultureInfo> （例如，如果所选的日历不是 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> ），则方法的结果和属性的值是不确定的。  
  
 在 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> <xref:System.Globalization.CultureInfo.NumberFormat%2A> 用户访问属性之前，不会计算属性和属性的值。 如果用户在应用程序运行时使用 "控制面板" 将当前区域性更改为新的区域性，然后访问 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 或 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 属性，则应用程序将检索新区域性的默认值。 不替代原始区域性。 若要保留原始当前区域性的替代，应用程序应 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> <xref:System.Globalization.CultureInfo.NumberFormat%2A> 在更改当前区域性之前访问和属性。  
  
   
  
## Examples  
 下面的代码示例演示了 CultureInfo。 Clone 还会克隆 <xref:System.Globalization.DateTimeFormatInfo> <xref:System.Globalization.NumberFormatInfo> 与相关联的和实例 <xref:System.Globalization.CultureInfo> 。  
  
 [!code-cpp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CPP/yslin_cultureinfo_clone.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/CS/yslin_cultureinfo_clone.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Clone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Clone/VB/yslin_cultureinfo_clone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 null。</exception>
        <exception cref="T:System.InvalidOperationException">设置了 <see cref="P:System.Globalization.CultureInfo.NumberFormat" /> 属性或任意 <see cref="T:System.Globalization.NumberFormatInfo" /> 属性，但 <see cref="T:System.Globalization.CultureInfo" /> 为只读。</exception>
        <altmember cref="T:System.Globalization.NumberFormatInfo" />
        <altmember cref="M:System.Globalization.CultureInfo.GetFormat(System.Type)" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="OptionalCalendars">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.Calendar[] OptionalCalendars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar[] OptionalCalendars" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property OptionalCalendars As Calendar()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property cli::array &lt;System::Globalization::Calendar ^&gt; ^ OptionalCalendars { cli::array &lt;System::Globalization::Calendar ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OptionalCalendars : System.Globalization.Calendar[]" Usage="System.Globalization.CultureInfo.OptionalCalendars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取该区域性可使用的日历的列表。</summary>
        <value>类型为 <see cref="T:System.Globalization.Calendar" /> 的数组，表示当前 <see cref="T:System.Globalization.CultureInfo" /> 代表的区域性所使用的日历。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序 <xref:System.Globalization.CultureInfo> 通过设置的 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 属性 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> （类的实例）更改当前使用的日历 <xref:System.Globalization.DateTimeFormatInfo> 。 新日历必须是中列出的其中一个日历 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> 。 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 还包括一些自定义与该关联的日期和时间格式设置的属性 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 。  
  
   
  
## Examples  
 下面的代码示例演示如何确定 <xref:System.Globalization.GregorianCalendar> 区域性支持的版本。  
  
 [!code-cpp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CPP/gregoriancalendartypes.cpp#1)]
 [!code-csharp[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/CS/gregoriancalendartypes.cs#1)]
 [!code-vb[System.Globalization.GregorianCalendarTypes#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendarTypes/VB/gregoriancalendartypes.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
        <altmember cref="T:System.Globalization.DateTimeFormatInfo" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.CultureInfo Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Parent" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Parent As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::CultureInfo ^ Parent { System::Globalization::CultureInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取表示当前 <see cref="T:System.Globalization.CultureInfo" /> 的父区域性的 <see cref="T:System.Globalization.CultureInfo" />。</summary>
        <value>表示当前 <see cref="T:System.Globalization.CultureInfo" /> 的父区域性的 <see cref="T:System.Globalization.CultureInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 区域性具有一个层次结构，其中特定区域性的父区域性为非特定区域性，非特定区域性的父级为 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> ，的父级 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 为固定区域性本身。 父区域性只包含其子级中通用的一组信息。  
  
 如果特定区域性的资源在系统中不可用，则使用非特定区域性的资源。 如果非特定区域性的资源不可用，则将使用嵌入到主程序集中的资源。 有关资源回退进程的详细信息，请参阅 [打包和部署资源](/dotnet/framework/resources/packaging-and-deploying-resources-in-desktop-apps)。  
  
   
  
## Examples  
 下面的代码示例使用中文语言确定每个特定区域性的父区域性。  
  
> [!NOTE]
>  该示例分别显示带有0x0004 和0x7C04 区域性标识符的较早 zh-chs-CHS 和 zh-chs CHT 区域性名称。 但是，Windows Vista 应用程序应使用 zh-chs-Hans 名称而不是 zh-chs 和 zh-chs-zh-hant 名称，而不是 zh-chs-CHT。 Zh-chs-Hans 和 zh-chs-Zh-hant 名称表示当前标准，除非你有使用旧名称的原因，否则应该使用。  
  
 [!code-cpp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CPP/parentculture.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/CS/parentculture.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.Parent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.Parent/VB/parentculture.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Globalization.CultureInfo.#ctor" />
        <altmember cref="M:System.Globalization.CultureInfo.CreateSpecificCulture(System.String)" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentCulture" />
        <altmember cref="P:System.Globalization.CultureInfo.CurrentUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InstalledUICulture" />
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo ReadOnly (System.Globalization.CultureInfo ci);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureInfo ReadOnly(class System.Globalization.CultureInfo ci) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (ci As CultureInfo) As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureInfo ^ ReadOnly(System::Globalization::CultureInfo ^ ci);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.CultureInfo -&gt; System.Globalization.CultureInfo" Usage="System.Globalization.CultureInfo.ReadOnly ci" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ci" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="ci">要包装的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
        <summary>返回指定的 <see cref="T:System.Globalization.CultureInfo" /> 对象周围的只读包装器。</summary>
        <returns><paramref name="ci" /> 周围的只读 <see cref="T:System.Globalization.CultureInfo" /> 包装。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此包装器可防止对 `ci` 的任何修改或返回的对象 `ci` 。<xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 和 `ci` 。<xref:System.Globalization.CultureInfo.NumberFormat%2A> 属性。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.Globalization.CultureInfo.ReadOnly%2A> 方法有助于保护 <xref:System.Globalization.DateTimeFormatInfo> 与关联的和 <xref:System.Globalization.NumberFormatInfo> 实例 <xref:System.Globalization.CultureInfo> 。  
  
 [!code-cpp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CPP/yslin_cultureinfo_readonly.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/CS/yslin_cultureinfo_readonly.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.ReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.ReadOnly/VB/yslin_cultureinfo_readonly.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ci" /> 为 null。</exception>
        <altmember cref="P:System.Globalization.CultureInfo.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="TextInfo">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.TextInfo TextInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.TextInfo TextInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TextInfo As TextInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Globalization::TextInfo ^ TextInfo { System::Globalization::TextInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TextInfo : System.Globalization.TextInfo" Usage="System.Globalization.CultureInfo.TextInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取定义与区域性关联的书写体系的 <see cref="T:System.Globalization.TextInfo" />。</summary>
        <value>定义与区域性关联的书写体系的 <see cref="T:System.Globalization.TextInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo.TextInfo%2A>属性为字符串提供区域性特定的大小写信息。 若要执行不区分区域性的大小写，应用程序应使用的 <xref:System.Globalization.CultureInfo.TextInfo%2A> 属性 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> 。  
  
   
  
## Examples  
 下面的代码示例演示了如何 <xref:System.Globalization.CultureInfo> 使用国际排序顺序创建西班牙语 (西班牙) ，并 <xref:System.Globalization.CultureInfo> 使用传统排序顺序创建另一个。  
  
 [!code-cpp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CPP/spanishspain.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo_esES#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/CS/spanishspain.cs#1)]
 [!code-vb[System.Globalization.CultureInfo_esES#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo_esES/VB/spanishspain.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.TextInfo" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterISOLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISOLanguageName : string" Usage="System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前 <see cref="T:System.Globalization.CultureInfo" /> 的语言的由三个字母构成的 ISO 639-2 代码。</summary>
        <value>当前 <see cref="T:System.Globalization.CultureInfo" /> 的语言的由三个字母构成的 ISO 639-2 代码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 例如，英语的三字母缩写为 "eng"。  
  
> [!NOTE]
>  在进程之间进行通信或保持数据时，通常最好使用完整的 <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> 。 仅使用语言会丢失上下文和数据。  
  
   
  
## Examples  
 下面的代码示例显示非特定区域性的几个属性。  
  
> [!NOTE]
>  该示例分别显示带有0x0004 和0x7C04 区域性标识符的较早 zh-chs-CHS 和 zh-chs CHT 区域性名称。 但是，Windows Vista 应用程序应使用 zh-chs-Hans 名称而不是 zh-chs 和 zh-chs-zh-hant 名称，而不是 zh-chs-CHT。 Zh-chs-Hans 和 zh-chs-Zh-hant 名称表示当前标准，除非你有使用旧名称的原因，否则应该使用。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsLanguageName">
      <MemberSignature Language="C#" Value="public virtual string ThreeLetterWindowsLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ThreeLetterWindowsLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ThreeLetterWindowsLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsLanguageName : string" Usage="System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 Windows API 中定义的由三个字母构成的语言代码。</summary>
        <value>Windows API 中定义的由三个字母构成的语言代码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性返回的值与带有 LOCALE_SABBREVLANGNAME 值的 Windows API 方法相同 `GetLocaleInfo` 。 例如，Windows API 中定义的英语 (美国) 三个字母代码为 "简体中文"。  
  
> [!NOTE]
>  在进程之间进行通信或保持数据时，通常最好使用完整的 <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> 。 仅使用语言会丢失上下文和数据。  
  
   
  
## Examples  
 下面的代码示例显示非特定区域性的几个属性。  
  
> [!NOTE]
>  该示例分别显示带有0x0004 和0x7C04 区域性标识符的较早 zh-chs-CHS 和 zh-chs CHT 区域性名称。 但是，Windows Vista 应用程序应使用 zh-chs-Hans 名称而不是 zh-chs 和 zh-chs-zh-hant 名称，而不是 zh-chs-CHT。 Zh-chs-Hans 和 zh-chs-Zh-hant 名称表示当前标准，除非你有使用旧名称的原因，否则应该使用。  
  
 [!code-cpp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CPP/getcultures.cpp#1)]
 [!code-csharp[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/CS/getcultures.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.GetCultures#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CultureInfo.GetCultures/VB/getcultures.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="cultureInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个字符串，该字符串包含当前 <see cref="T:System.Globalization.CultureInfo" /> 的名称，其格式为 languagecode2-country/regioncode2。</summary>
        <returns>包含当前 <see cref="T:System.Globalization.CultureInfo" /> 名称的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法重写 <xref:System.Object.ToString%2A?displayProperty=nameWithType>。 它将返回传递给 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> 或 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29> 构造函数或或方法的区域性名称的规范化版本 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29> 。 它通过将 *为 languagecode2* 中的字符转换为小写并将 *国家/regioncode2* 中的字符转换为大写（如有必要），对结果字符串进行规范化。  
  
 Windows 系统上的预定义区域性名称列在[windows 支持的语言/区域名称列表](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)中的 "**语言标记**" 列中。 列名遵循 [BCP 47](https://tools.ietf.org/html/bcp47) 定义的标准。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public virtual string TwoLetterISOLanguageName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property TwoLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ TwoLetterISOLanguageName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISOLanguageName : string" Usage="System.Globalization.CultureInfo.TwoLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前 <see cref="T:System.Globalization.CultureInfo" /> 的语言的由两个字母构成的 ISO 639-1 代码。</summary>
        <value>当前 <see cref="T:System.Globalization.CultureInfo" /> 的语言的由两个字母构成的 ISO 639-1 代码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 例如，英语的两字母缩写为 "en"。 <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A>固定区域性的属性值为 "iv"。  
  
> [!NOTE]
>  在进程之间进行通信或保持数据时，通常最好使用完整的 <xref:System.Globalization.CultureInfo.Name%2A?displayProperty=nameWithType> 。 仅使用语言会丢失上下文和数据。  
  
 如果 ISO 639-1 不为特定区域性定义双字母语言代码，则该 <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> 属性将返回由三个或更多字母组成的字符串。 有关详细信息，请参阅示例。  
  
   
  
## Examples  
 下面的示例列出了其 <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> 属性不包含两个字母的语言代码的区域性。  
  
 [!code-csharp[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/cs/twoletterisolanguagename1.cs#1)]
 [!code-vb[System.Globalization.CultureInfo.TwoLetterISOLanguageName#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureinfo.twoletterisolanguagename/vb/twoletterisolanguagename1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.Name" />
        <altmember cref="P:System.Globalization.CultureInfo.DisplayName" />
        <altmember cref="P:System.Globalization.CultureInfo.NativeName" />
        <altmember cref="P:System.Globalization.CultureInfo.EnglishName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterISOLanguageName" />
        <altmember cref="P:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName" />
      </Docs>
    </Member>
    <Member MemberName="UseUserOverride">
      <MemberSignature Language="C#" Value="public bool UseUserOverride { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseUserOverride" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureInfo.UseUserOverride" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UseUserOverride As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseUserOverride { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.UseUserOverride : bool" Usage="System.Globalization.CultureInfo.UseUserOverride" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示当前 <see cref="T:System.Globalization.CultureInfo" /> 对象是否使用用户选定的区域性设置。</summary>
        <value>如果当前 <see cref="T:System.Globalization.CultureInfo" /> 使用用户选定的区域性设置，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 用户可以选择通过 "控制面板" 的 "区域和语言选项" 部分，替代与 Windows 的当前区域性关联的某些值。 例如，用户可以选择以不同的格式显示日期，或使用区域性默认值以外的其他货币。  
  
 如果 <xref:System.Globalization.CultureInfo.UseUserOverride%2A> 为 `true` ，并且指定的区域性与 Windows 的当前区域性匹配，则将 <xref:System.Globalization.CultureInfo> 使用这些重写，包括属性返回的实例的属性的用户设置 <xref:System.Globalization.DateTimeFormatInfo> <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> ，以及 <xref:System.Globalization.NumberFormatInfo> 由属性返回的实例的属性 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 。 如果用户设置与关联的区域性不兼容 <xref:System.Globalization.CultureInfo> （例如，如果所选的日历不是 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> ），则方法的结果和属性的值是不确定的。  
  
 此属性是在创建时设置的 <xref:System.Globalization.CultureInfo> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
