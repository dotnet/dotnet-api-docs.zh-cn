<Type Name="DateTimeFormatInfo" FullName="System.Globalization.DateTimeFormatInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="706336ee630129b1a8f945f4b8f3fe8838c5048a" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102057436" /></Metadata><TypeSignature Language="C#" Value="public sealed class DateTimeFormatInfo : IFormatProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DateTimeFormatInfo extends System.Object implements class System.IFormatProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.DateTimeFormatInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DateTimeFormatInfo&#xA;Implements IFormatProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateTimeFormatInfo sealed : IFormatProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="F#" Value="type DateTimeFormatInfo = class&#xA;    interface IFormatProvider" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
  <TypeSignature Language="C#" Value="public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DateTimeFormatInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DateTimeFormatInfo&#xA;Implements ICloneable, IFormatProvider" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateTimeFormatInfo sealed : ICloneable, IFormatProvider" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type DateTimeFormatInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C#" Value="public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider, System.Runtime.Serialization.ISerializable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeFormatInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider, class System.Runtime.Serialization.ISerializable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DateTimeFormatInfo&#xA;Implements ICloneable, IFormatProvider, ISerializable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class DateTimeFormatInfo sealed : ICloneable, IFormatProvider, System::Runtime::Serialization::ISerializable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type DateTimeFormatInfo = class&#xA;    interface ICloneable&#xA;    interface IFormatProvider&#xA;    interface ISerializable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeFormatInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Globalization" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Globalization" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Globalization" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Globalization" FromVersion="4.1.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Globalization" FromVersion="4.1.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="netframework-1.1">
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(true)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供有关日期和时间值格式的区域性特定信息。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 类的属性 <xref:System.Globalization.DateTimeFormatInfo> 包含特定于区域性的信息，用于设置或分析日期和时间值，如下所示：  
  
-   用于格式化日期值的模式。  
  
-   用于格式化时间值的模式。  
  
-   一周中各天的名称。  
  
-   年中的月份的名称。  
  
-   上午 和 P.M. 时间值中使用的指示符。  
  
-   表示日期的日历。  
  
 本部分内容：  
  
-   [实例化 DateTimeFormatInfo 对象](#instantiating)  
  
    -   [对于固定区域性](#instantiating_Invariant)  
  
    -   [针对特定区域性](#instantiating_Specific)  
  
    -   [对于非特定区域性](#instantiating_neutral)  
  
    -   [对于当前区域性](#instantiating_Current)  
  
-   [DateTimeFormatInfo 和动态数据](#dynamic)  
  
-   [设置日期和时间的格式](#Formatting_dates_times)  
  
-   [格式字符串和 DateTimeFormatInfo 属性](#format-strings-and-datetimeformatinfo-properties)  
  
-   [修改 DateTimeFormatInfo 属性](#Modifying)  
  
<a name="instantiating"></a>   
## <a name="instantiating-a-datetimeformatinfo-object"></a>实例化 DateTimeFormatInfo 对象  
 <xref:System.Globalization.DateTimeFormatInfo>对象可以表示固定区域性、特定区域性、非特定区域性或当前区域性的格式设置约定。 本部分讨论如何实例化每种类型的 <xref:System.Globalization.DateTimeFormatInfo> 对象。  
  
<a name="instantiating_Invariant"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-the-invariant-culture"></a>实例化固定区域性的 DateTimeFormatInfo 对象  
 固定区域性表示不区分区域性的区域性。 它基于英语，但不基于任何特定的英语国家/地区。 尽管特定区域性的数据可以是动态的，并且可以更改以反映新的区域性约定或用户首选项，但固定区域性的数据不会更改。 可以 <xref:System.Globalization.DateTimeFormatInfo> 通过以下方式实例化表示固定区域性的格式设置约定的对象：  
  
-   通过检索属性的值 <xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A> 。 返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象是只读的。  
  
-   调用无参数的 <xref:System.Globalization.DateTimeFormatInfo.%23ctor%2A> 构造函数。 返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象是可读/写的。  
  
-   通过 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 从属性返回的对象中检索属性的值 <xref:System.Globalization.CultureInfo> <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType> 。 返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象是只读的。  
  
 下面的示例使用上述每种方法来实例化 <xref:System.Globalization.DateTimeFormatInfo> 表示固定区域性的对象。 然后，它指示对象是否为只读。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#1)]  
  
<a name="instantiating_Specific"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-a-specific-culture"></a>实例化特定区域性的 DateTimeFormatInfo 对象  
 特定区域性表示在特定国家/地区口述的语言。 例如，en-us 是一种特定的区域性，表示美国中所述的英语，而 en CA 则是表示加拿大所说英语的特定区域性。 可以 <xref:System.Globalization.DateTimeFormatInfo> 通过以下方式实例化表示特定区域性的格式设置约定的对象：  
  
-   通过调用 <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29?displayProperty=nameWithType> 方法并检索返回 <xref:System.Globalization.CultureInfo> 对象的属性的值 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 。 返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象是只读的。  
  
-   通过 <xref:System.Globalization.DateTimeFormatInfo.GetInstance%2A> 向静态方法传递一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示 <xref:System.Globalization.DateTimeFormatInfo> 要检索其对象的区域性。 返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象是可读/写的。  
  
-   通过调用静态 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> 方法并检索返回 <xref:System.Globalization.CultureInfo> 对象的属性的值 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 。 返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象是可读/写的。  
  
-   通过调用 <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType> 类构造函数并检索返回 <xref:System.Globalization.CultureInfo> 对象的属性的值 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 。 返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象是可读/写的。  
  
 下面的示例演示了用于实例化对象的每个方法 <xref:System.Globalization.DateTimeFormatInfo> ，并指示生成的对象是否为只读。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#3)]  
  
<a name="instantiating_neutral"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-a-neutral-culture"></a>实例化非特定区域性的 DateTimeFormatInfo 对象  
 非特定区域性表示独立于国家/地区的区域性或语言;它通常是一个或多个特定区域性的父项。 例如，Fr 是法语的非特定区域性和 fr-fr 区域性的父级。 您可以实例化 <xref:System.Globalization.DateTimeFormatInfo> 表示非特定区域性的格式设置约定的对象，方法与创建 <xref:System.Globalization.DateTimeFormatInfo> 表示特定区域性的格式设置约定的对象的方式相同。 此外，您还可以检索非特定区域性的 <xref:System.Globalization.DateTimeFormatInfo> 对象，方法是从特定区域性的属性中检索非特定区域性 <xref:System.Globalization.CultureInfo.Parent%2A?displayProperty=nameWithType> ，并检索 <xref:System.Globalization.DateTimeFormatInfo> 其属性返回的对象 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 。 除非父区域性表示固定区域性，否则返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象是可读/写的。 下面的示例演示了实例化 <xref:System.Globalization.DateTimeFormatInfo> 表示非特定区域性的对象的方法。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#2)]  
  
> [!NOTE]
>  在 .NET Framework 版本1.0 到 .NET Framework 3.5 中，尝试检索 <xref:System.Globalization.DateTimeFormatInfo> 反映非特定区域性的格式设置约定的对象会引发 <xref:System.NotSupportedException> 异常。  
  
 但是，非特定区域性缺少区域性特定的格式设置信息，因为它与特定的国家/地区无关。 <xref:System.Globalization.DateTimeFormatInfo>.NET Framework 返回一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象反映属于非特定区域性的特定区域性的格式设置约定，而不是使用泛型值填充对象。 例如， <xref:System.Globalization.DateTimeFormatInfo> 非特定 en 区域性的对象反映 en-us 区域性的格式设置约定， <xref:System.Globalization.DateTimeFormatInfo> fr 区域性的对象反映 fr-fr 区域性的格式设置约定。  
  
 您可以使用如下所示的代码来确定非特定区域性表示的特定区域性格式约定。 该示例使用反射将 <xref:System.Globalization.DateTimeFormatInfo> 非特定区域性的属性与特定子区域性的属性进行比较。 如果两个日历是相同的日历类型，则它会将两个日历视为等效，如果它们的属性具有相同的值，则为公历 <xref:System.Globalization.GregorianCalendar.CalendarType%2A?displayProperty=nameWithType> 。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate6c.cs#6)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate6c.vb#6)]  
  
<a name="instantiating_Current"></a>   
### <a name="instantiating-a-datetimeformatinfo-object-for-the-current-culture"></a>实例化当前区域性的 DateTimeFormatInfo 对象  
 可以 <xref:System.Globalization.DateTimeFormatInfo> 通过以下方式实例化表示当前区域性的格式设置约定的对象：  
  
-   通过检索属性的值 <xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A> 。 返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象是只读的。  
  
-   通过 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> 从属性返回的对象中检索属性的值 <xref:System.Globalization.CultureInfo> <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 。 返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象是只读的。  
  
-   通过 <xref:System.Globalization.NumberFormatInfo.GetInstance%2A> 使用 <xref:System.Globalization.CultureInfo> 表示当前区域性的对象调用方法。 返回的 <xref:System.Globalization.DateTimeFormatInfo> 对象是只读的。  
  
 下面的示例使用每个方法来实例化 <xref:System.Globalization.DateTimeFormatInfo> 表示当前区域性的格式设置约定的对象。 然后，它指示对象是否为只读。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create2.cs#4)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create2.vb#4)]  
  
 可以 <xref:System.Globalization.DateTimeFormatInfo> 通过以下方式之一创建表示当前线程区域性约定的可写对象：  
  
-   通过使用 <xref:System.Globalization.DateTimeFormatInfo> 以上三种方法中的任意一种检索对象并 <xref:System.Globalization.DateTimeFormatInfo.Clone%2A> 对返回的对象调用方法 <xref:System.Globalization.DateTimeFormatInfo> 。 这会创建原始对象的副本 <xref:System.Globalization.DateTimeFormatInfo> ，但其 <xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A> 属性为 `false` 。  
  
-   通过调用 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> 方法来创建一个 <xref:System.Globalization.CultureInfo> 表示当前区域性的对象，然后使用其 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 属性来检索该 <xref:System.Globalization.DateTimeFormatInfo> 对象。  
  
 下面的示例演示了实例化读/写 <xref:System.Globalization.DateTimeFormatInfo> 对象并显示其属性的值的每个方法 <xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A> 。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate2.cs#7)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate2.vb#7)]  
  
 在 Windows 中，用户可以 <xref:System.Globalization.DateTimeFormatInfo> 通过 "控制面板" 中的 " **区域和语言** " 应用程序覆盖用于格式化和分析操作的某些属性值。 例如，如果用户的区域性为英语 (美国) 可能会选择使用24小时制 (以 HH： mm： ss 格式显示长时间值，而不是采用格式 h:mm： ss tt) 格式的默认12小时制。 <xref:System.Globalization.DateTimeFormatInfo>前面讨论的方法中检索的对象反映了这些用户覆盖。 如果不需要这样做，则可以 <xref:System.Globalization.NumberFormatInfo> 通过调用 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> 构造函数并为参数提供值来创建不反映用户重写的对象 (，也可以是读/写而不是只读) `false` `useUserOverride` 。 下面的示例对当前区域性为英语 (美国) 并且其长时间模式已从默认值 h:mm： ss tt 改为 HH： mm： ss 的系统进行了说明。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate3.cs#8)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate3.vb#8)]  
  
<a name="dynamic"></a>   
## <a name="datetimeformatinfo-and-dynamic-data"></a>DateTimeFormatInfo 和动态数据  
 用于设置类的日期和时间值格式的区域性特定数据 <xref:System.Globalization.DateTimeFormatInfo> 是动态的，就像类提供的区域性数据一样 <xref:System.Globalization.CultureInfo> 。 不应对 <xref:System.Globalization.DateTimeFormatInfo> 与特定对象关联的对象的值的稳定性做出任何假设 <xref:System.Globalization.CultureInfo> 。 只有固定区域性提供的数据及其关联的对象才 <xref:System.Globalization.DateTimeFormatInfo> 是稳定的。 其他数据可以在应用程序会话之间更改，也可以在应用程序运行时进行更改。 有四个主要的更改源：  
  
-   系统更新。 区域性首选项（如首选日历或惯用日期和时间格式）会随时间而改变。 发生这种情况时，Windows 更新包括对 <xref:System.Globalization.DateTimeFormatInfo> 特定区域性的属性值的更改。  
  
-   替换区域性。 <xref:System.Globalization.CultureAndRegionInfoBuilder>类可用于替换现有区域性的数据。  
  
-   对属性值进行级联更改。 许多与区域性相关的属性在运行时可能会更改，而这又会导致 <xref:System.Globalization.DateTimeFormatInfo> 数据更改。 例如，可以通过编程方式或通过用户操作更改当前区域性。 发生这种情况时， <xref:System.Globalization.DateTimeFormatInfo> 由属性返回的对象 <xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A> 更改为与当前区域性关联的对象。 同样，区域性的日历可以更改，这可能会导致对大量 <xref:System.Globalization.DateTimeFormatInfo> 属性值的更改。  
  
-   用户首选项。 应用程序的用户可以选择通过控制面板中的 "区域和语言选项" 覆盖与当前系统区域性关联的某些值。 例如，用户可以选择以不同的格式显示日期。 如果将 <xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=nameWithType> 属性设置为 `true` ，则 <xref:System.Globalization.DateTimeFormatInfo> 还会从用户设置中检索对象的属性。 如果用户设置与对象关联的区域性不兼容 <xref:System.Globalization.CultureInfo> (例如，如果所选日历不是属性) 指示的日历之一 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> ，则方法的结果和属性的值是不确定的。  
  
 若要最大程度地减少数据不一致的可能性，则在 <xref:System.Globalization.DateTimeFormatInfo> 创建对象时，将初始化对象的所有用户可重写属性。 仍有可能存在不一致的情况，因为对象创建和用户重写进程都是原子的，相关值可以在对象创建期间更改。 但是，这种情况应该非常罕见。  
  
 您可以控制是否在 <xref:System.Globalization.DateTimeFormatInfo> 表示与系统区域性相同的区域性的对象中反映用户重写。 下表列出了 <xref:System.Globalization.DateTimeFormatInfo> 可用于检索对象的方法，并指示生成的对象是否反映用户覆盖。  
  
|CultureInfo 和 DateTimeFormatInfo 对象的源|反映用户替代|  
|---------------------------------------------------------|-----------------------------|  
|`CultureInfo.CurrentCulture.DateTimeFormat` 属性|是|  
|<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=nameWithType> 属性|是|  
|<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> 方法|是|  
|<xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=nameWithType> 方法|否|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=nameWithType> 构造函数|是|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=nameWithType> 构造函数|依赖于参数的值 `useUserOverride`|  
  
 除非有一个令人信服的理由，否则，在 <xref:System.Globalization.DateTimeFormatInfo> 客户端应用程序中使用对象来格式化和分析用户输入或显示数据时，应尊重用户重写。 对于服务器应用程序或无人参与的应用程序，您不应该这样做。 但是，如果您使用 <xref:System.Globalization.DateTimeFormatInfo> 对象显式或隐式地以字符串格式保存日期和时间数据，则应使用 <xref:System.Globalization.DateTimeFormatInfo> 反映固定区域性的格式设置约定的对象，或者应指定使用的自定义日期和时间格式字符串（不考虑区域性）。  
  
<a name="Formatting_dates_times"></a>   
## <a name="formatting-dates-and-times"></a>设置日期和时间的格式  
 <xref:System.Globalization.DateTimeFormatInfo>对象在所有日期和时间格式设置操作中隐式或显式使用。 其中包括对以下方法的调用：  
  
-   所有日期和时间格式设置方法，例如 <xref:System.DateTime.ToString?displayProperty=nameWithType> 和 <xref:System.DateTimeOffset.ToString%28System.String%29?displayProperty=nameWithType> 。  
  
-   主要的复合格式设置方法，即 <xref:System.String.Format%2A?displayProperty=nameWithType> 。  
  
-   其他复合格式设置方法，例如 <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 和 <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 。  
  
 所有日期和时间格式化操作都利用了 <xref:System.IFormatProvider> 实现。 <xref:System.IFormatProvider>接口包含一个方法，即 <xref:System.IFormatProvider.GetFormat%28System.Type%29?displayProperty=nameWithType> 。 向此回调方法传递 <xref:System.Type> 对象，该对象表示提供格式设置信息所需的类型。 方法返回该类型的实例，或者 `null` 如果无法提供该类型的实例，则返回。 .NET Framework 包含 <xref:System.IFormatProvider> 用于设置日期和时间格式的两种实现：  
  
-   <xref:System.Globalization.CultureInfo>类，该类表示特定区域性 (或特定国家/地区内的特定语言) 。 在日期和时间格式设置操作中， <xref:System.Globalization.CultureInfo.GetFormat%2A?displayProperty=nameWithType> 方法返回与其 <xref:System.Globalization.DateTimeFormatInfo> 属性关联的对象 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 。  
  
-   <xref:System.Globalization.DateTimeFormatInfo>类，它提供有关其关联区域性的格式设置约定的信息。 <xref:System.Globalization.DateTimeFormatInfo.GetFormat%2A?displayProperty=nameWithType>方法返回自身的实例。  
  
 如果 <xref:System.IFormatProvider> 未向格式设置方法显式提供实现，则 <xref:System.Globalization.CultureInfo> <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=nameWithType> 使用表示当前线程区域性的属性返回的对象。  
  
 下面的示例演示了 <xref:System.IFormatProvider> <xref:System.Globalization.DateTimeFormatInfo> 在格式设置操作中接口和类之间的关系。 它定义了一个自定义实现，该 <xref:System.IFormatProvider> 实现的 <xref:System.IFormatProvider.GetFormat%2A> 方法显示格式设置操作所请求的对象的类型。 如果它正在请求 <xref:System.Globalization.DateTimeFormatInfo> 对象，则该方法 <xref:System.Globalization.DateTimeFormatInfo> 为当前线程区域性提供对象。 如示例的输出所示， <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=nameWithType> 方法请求 <xref:System.Globalization.DateTimeFormatInfo> 对象提供格式设置信息，而 <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> 方法请求 <xref:System.Globalization.NumberFormatInfo> 和 <xref:System.Globalization.DateTimeFormatInfo> 对象以及 <xref:System.ICustomFormatter> 实现。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/formatprovider1.cs#9)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/formatprovider1.vb#9)]  
  
## <a name="format-strings-and-datetimeformatinfo-properties"></a>格式字符串和 DateTimeFormatInfo 属性  
 <xref:System.Globalization.DateTimeFormatInfo>对象包含在格式设置操作中使用日期和时间值的三种属性：  
  
-   日历相关的属性。 属性（如、、 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A> <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A> <xref:System.Globalization.DateTimeFormatInfo.DayNames%2A> 和 <xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A> ）与由属性定义的区域性所使用的日历相关联 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 。 这些属性用于长日期和时间格式。  
  
-   生成标准定义的结果字符串的属性。 <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>、 <xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A> 和 <xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A> 属性包含自定义格式字符串，这些字符串生成由国际标准定义的结果字符串。 这些属性是只读的，不能修改。  
  
-   定义区分区域性的结果字符串的属性。 某些属性（如 <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> 和 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> ）包含指定结果字符串格式的  [自定义格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings) 。 其他类（例如 <xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> 、 <xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A> 、 <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A> 和 <xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A> ）定义可以包含在结果字符串中的区分区域性的符号或子字符串。  
  
 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings)（如 "d"、"d"、"f" 和 "f"）是对应于特定 <xref:System.Globalization.DateTimeFormatInfo> 格式模式属性的别名。 大多数  [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings) 与格式设置操作在结果流中插入的字符串或子字符串相关。 下表列出了标准和自定义日期和时间格式说明符及其相关 <xref:System.Globalization.DateTimeFormatInfo> 属性。 有关如何使用这些格式说明符的详细信息，请参阅 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) 和 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings)。 请注意，每个标准格式字符串对应于 <xref:System.Globalization.DateTimeFormatInfo> 其值为自定义日期和时间格式字符串的属性。 此自定义格式字符串中的各个说明符又与其他属性相对应 <xref:System.Globalization.DateTimeFormatInfo> 。 此表仅列出 <xref:System.Globalization.DateTimeFormatInfo> 标准格式字符串为其别名的属性，并且不列出可由分配给这些别名属性的自定义格式字符串访问的属性。 此外，此表仅列出对应于属性的自定义格式说明符 <xref:System.Globalization.DateTimeFormatInfo> 。  
  
|格式说明符|关联属性|  
|----------------------|---------------------------|  
|"d" (短日期;标准格式字符串) |<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>，用于定义结果字符串的总体格式。|  
|"D" (长日期;标准格式字符串) |<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>，用于定义结果字符串的总体格式。|  
|"f" (完整日期/短时间;标准格式字符串) |<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>，用于定义结果字符串中日期部分的格式。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>，用于定义结果字符串的时间部分的格式。|  
|"F" (完整日期/长时间;标准格式字符串) |<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>，用于定义结果字符串中日期部分的格式。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>，用于定义结果字符串的时间部分的格式。|  
|"g" (常规日期/短时间;标准格式字符串) |<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>，用于定义结果字符串中日期部分的格式。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>，用于定义结果字符串的时间部分的格式。|  
|"G" (常规日期/长时间;标准格式字符串) |<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>，用于定义结果字符串中日期部分的格式。<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>，用于定义结果字符串的时间部分的格式。|  
|"M"、"m" (month/day;标准格式字符串) |<xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>，用于定义结果字符串的总体格式。|  
|"O"、"o" (往返日期/时间;标准格式字符串) |无。|  
|"R"、"r" (RFC1123;标准格式字符串) |<xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>，用于定义符合 RFC 1123 标准的结果字符串。 属性为只读属性。|  
|"s" (可排序日期/时间;标准格式字符串) |<xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>，用于定义符合 ISO 8601 标准的结果字符串。 属性为只读属性。|  
|"t" (短时间;标准格式字符串) |<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>，用于定义结果字符串的总体格式。|  
|"T" (长时间;标准格式字符串) |<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>，用于定义结果字符串的总体格式。|  
|"u" (通用可排序日期/时间;标准格式字符串) |<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>，用于定义符合协调世界时 ISO 8601 标准的结果字符串。 属性为只读属性。|  
|"U" (通用完整日期/时间;标准格式字符串) |<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>，用于定义结果字符串的总体格式。|  
|"Y"、"y" (年月;标准格式字符串) |<xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>，用于定义结果字符串的总体格式。|  
|"ddd" (自定义格式说明符) |<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>，在结果字符串中包含一周中某天的缩写名称。|  
|"g"、"gg" (自定义格式说明符) |调用 <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A> 方法以将纪元名称插入到结果字符串中。|  
|"MMM" (自定义格式说明符) |<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>，用于在结果字符串中包括缩写的月份名称。|  
|"MMMM" (自定义格式说明符) |<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A><xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A>若为，则在结果字符串中包含完整的月份名称。|  
|"t" (自定义格式说明符) |<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> 如果 <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A> 为，则在结果字符串中包括 AM/PM 指示符的第一个字符。|  
|"tt" (自定义格式说明符) |<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> 如果 <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A> 为，则在结果字符串中包含完整的 AM/PM 指示符。|  
|"：" (自定义格式说明符) |<xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>，用于在结果字符串中包含时间分隔符。|  
|"/" (自定义格式说明符) |<xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>，将日期分隔符包含在结果字符串中。|  
  
<a name="Modifying"></a>   
## <a name="modifying-datetimeformatinfo-properties"></a>修改 DateTimeFormatInfo 属性  
 可以通过修改可写对象的关联属性来更改日期和时间格式字符串生成的结果字符串 <xref:System.Globalization.DateTimeFormatInfo> 。 若要确定 <xref:System.Globalization.DateTimeFormatInfo> 对象是否可写，请使用 <xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A> 属性。 以 <xref:System.Globalization.DateTimeFormatInfo> 这种方式自定义对象：  
  
1.  创建 <xref:System.Globalization.DateTimeFormatInfo> 要修改其格式设置约定的对象的读/写副本。  (，请参阅 [实例化 DateTimeFormatInfo 对象](#instantiating) 部分。 )   
  
2.  修改用于生成所需结果字符串的属性。  (有关格式化方法如何使用 <xref:System.Globalization.DateTimeFormatInfo> 属性来定义结果字符串的信息，请参阅上一节 " [格式字符串和 DateTimeFormatInfo 属性](#format-strings-and-datetimeformatinfo-properties)"。 )   
  
3.  <xref:System.Globalization.DateTimeFormatInfo>在对格式设置方法的调用中使用创建的自定义对象作为 <xref:System.IFormatProvider> 参数。  
  
 还可以通过两种方法更改结果字符串的格式：  
  
-   您可以使用 <xref:System.Globalization.CultureAndRegionInfoBuilder> 类来定义自定义区域性 (具有唯一名称的区域性，并对现有区域性进行补充) 或 (替换区域性，而不是使用) 的特定区域性。 您可以通过编程方式来保存和访问此区域性，就像 <xref:System.Globalization.CultureInfo> .NET Framework 支持的任何对象一样。  
  
-   如果结果字符串不区分区域性并且不遵循预定义格式，则可以使用自定义日期和时间格式字符串。 例如，如果要序列化格式为 YYYYMMDDHHmmss 的日期和时间数据，则可以通过将自定义格式字符串传递给方法来生成结果字符串 <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> ，也可以通过调用方法将结果字符串转换回某个 <xref:System.DateTime> 值 <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> 。  
  
### <a name="changing-the-short-date-pattern"></a>更改短日期模式  
 下面的示例更改 "d" (短日期) 标准格式字符串生成的结果字符串的格式。 它将 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> en-us 或英语) 美国 (的关联属性从其默认值 "M/d/yyyy" 改为 "yyyy"-"MM"-"dd"，并使用 "d" 标准格式字符串在属性更改前后显示日期 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> 。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example1.cs#10)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example1.vb#10)]  
  
### <a name="changing-the-date-separator-character"></a>更改日期分隔符字符  
 下面的示例更改对象中的日期分隔符字符 <xref:System.Globalization.DateTimeFormatInfo> ，该对象表示 fr-fr 区域性的格式设置约定。 该示例使用 "g" 标准格式字符串在属性更改前后显示日期 <xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A> 。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example3.cs#12)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example3.vb#12)]  
  
### <a name="changing-day-name-abbreviations-and-the-long-date-pattern"></a>更改日期名称缩写和长日期模式  
 在某些情况下，长日期模式通常会显示完整的日期和月份名称以及月份和年份中的日期，可能太长。 下面的示例为 en-us 区域性缩短了长日期模式，以返回一个字符或两个字符的日期缩写，后跟日号、月份名称缩写和年份。 它通过为数组分配较短的日期名称缩写 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A> ，并修改分配给该属性的自定义格式字符串来实现此功能 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> 。 这会影响 "D" 和 "f" 标准格式字符串返回的结果字符串。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example2.cs#13)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example2.vb#13)]  
  
 通常，对属性所做的更改 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> 也会影响 <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> 属性，后者又定义了 "F" 标准格式字符串返回的结果字符串。 若要保留最初的完整日期和时间模式，此示例将在 <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> 修改属性后重新分配分配给该属性的原始自定义格式字符串 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> 。  
  
### <a name="changing-from-a-12-hour-clock-to-a-24-hour-clock"></a>从12小时制更改为24小时制  
 对于 .NET Framework 中的许多区域性，使用12小时制和 AM/PM 指示符来表示时间。 下面的示例定义了一个 `ReplaceWith24HourClock` 方法，该方法将使用12小时制的任何时间格式替换为使用24小时制的格式。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example5.cs#14)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example5.vb#14)]  
  
 该示例使用正则表达式修改格式字符串。 正则表达式模式的 `@"^(?<openAMPM>\s*t+\s*)? (?(openAMPM) h+(?<nonHours>[^ht]+)$ | \s*h+(?<nonHours>[^ht]+)\s*t+)` 定义如下：  
  
|模式|描述|  
|-------------|-----------------|  
|`^`|从字符串开头开始匹配。|  
|`(?<openAMPM>\s*t+\s*)?`|匹配零个或多个空白字符的零个或一个匹配项，后跟字母 "t" （一次或多次），后跟零个或多个空白字符。 此捕获组的名称为 `openAMPM` 。|  
|`(?(openAMPM) h+(?<nonHours>[^ht]+)$`|如果 `openAMPM` 组有匹配项，则匹配字母 "h" 一次或多次，后跟一个或多个不是 "h" 和 "t" 的字符。 匹配结束于字符串的末尾。 在名为的捕获组中包含 "h" 后捕获的所有字符 `nonHours` 。|  
|`&#124; \s*h+(?<nonHours>[^ht]+)\s*t+)`|如果 `openAMPM` 组没有匹配项，则匹配字母 "h" 一次或多次，后跟一个或多个不是 "h" 和 "t" 的字符，再后跟零个或多个空白字符。 最后，匹配字母 "t" 的一个或多个匹配项。 在名为的捕获组中包含 "h" 之后和空格和 "t" 之前捕获的所有字符 `nonHours` 。|  
  
 `nonHours`捕获组包含自定义日期和时间格式字符串的分钟数，还可能包含自定义日期和时间格式字符串的第二个组成部分以及任何时间分隔符符号。 替换模式在 `HH${nonHours}` 这些元素前面预置子字符串 "HH"。  
  
### <a name="displaying-and-changing-the-era-in-a-date"></a>显示和更改日期中的纪元  
 下面的示例将 "g" 自定义格式说明符添加到  <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> 对象的属性中，该对象表示 en-us 区域性的格式设置约定。 此加法会影响以下三个标准格式字符串：  
  
-   "D" (长日期) 标准格式字符串，它直接映射到 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> 属性。  
  
-   "F" (完整日期/时间) 标准格式字符串，该字符串产生的结果字符串连接和属性生成的子字符串 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A> 。  
  
-   "F" (完整日期/长时间) 标准格式字符串，它直接映射到 <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> 属性。 由于我们未显式设置此属性值，因此它通过连接和属性动态生成 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> 。  
  
 该示例还演示了如何更改其日历具有单个纪元的区域性的纪元名称。 在这种情况下，en-us 区域性使用公历，该日历由 <xref:System.Globalization.GregorianCalendar> 对象表示。 <xref:System.Globalization.GregorianCalendar>类支持单个纪元，其名称为公元  (基督公元) 。 该示例将纪元名称更改为公元  (Common 年代) 通过将 "g" 自定义格式说明符替换为使用文本字符串分配给属性的格式字符串中的 "g" 自定义格式说明符 <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> 。 需要使用文本字符串，因为通常由 <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A> 方法从 .NET Framework 或 Windows 操作系统所提供的区域性表中的私有数据返回纪元名称。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example4.cs#11)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example4.vb#11)]  
  
## <a name="parsing-date-and-time-strings"></a>分析日期和时间字符串  
 分析涉及将日期和时间的字符串表示形式转换为 <xref:System.DateTime> 或 <xref:System.DateTimeOffset> 值。 这两种类型都包括 `Parse` 、 `TryParse` 、 `ParseExact` 和 `TryParseExact` 方法以支持分析操作。 `Parse`和 `TryParse` 方法转换可以具有各种格式的字符串，而 `ParseExact` 并 `TryParseExact` 要求字符串具有定义的格式或格式。 如果分析操作失败，则 `Parse` 会 `ParseExact` 引发异常，而 `TryParse` 并 `TryParseExact` 返回 `false` 。  
  
 解析方法隐式或显式地使用 <xref:System.Globalization.DateTimeStyles> 枚举值来确定哪些样式元素 (如前导空格、尾随空格或内部空白) 可在要分析的字符串中显示，以及如何解释已分析的字符串或任何缺少的元素。 如果 <xref:System.Globalization.DateTimeStyles> 调用或方法时没有提供值，则 `Parse` `TryParse` 默认值为 <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=nameWithType> ，它是包含 <xref:System.Globalization.DateTimeStyles.AllowLeadingWhite?displayProperty=nameWithType> 、和标志的复合样式 <xref:System.Globalization.DateTimeStyles.AllowTrailingWhite?displayProperty=nameWithType> <xref:System.Globalization.DateTimeStyles.AllowInnerWhite?displayProperty=nameWithType> 。 对于 `ParseExact` 和 `TryParseExact` 方法，默认值为 <xref:System.Globalization.DateTimeStyles.None?displayProperty=nameWithType> ; 输入字符串必须精确对应于特定的自定义日期和时间格式字符串。  
  
 解析方法还可以隐式或显式地使用一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象定义可在要分析的字符串中出现的特定符号和模式。 如果未提供 <xref:System.Globalization.DateTimeFormatInfo> 对象，则 <xref:System.Globalization.DateTimeFormatInfo> 默认情况下将使用当前线程区域性的对象。 有关分析日期和时间字符串的详细信息，请参阅各种分析方法，例如 <xref:System.DateTime.Parse%2A?displayProperty=nameWithType> 、、 <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> <xref:System.DateTimeOffset.ParseExact%2A?displayProperty=nameWithType> 和 <xref:System.DateTimeOffset.TryParseExact%2A?displayProperty=nameWithType> 。  
  
 下面的示例演示分析日期和时间字符串的区分区域性的特性。 它尝试使用 en-us、en-GB、fr-fr 和 wi-fi 区域性约定来分析两个日期字符串。 在 en-us 区域性中解释为8/18/2014 的日期 <xref:System.FormatException> 在其他三个区域性中引发异常，因为18被解释为月份号。 1/2/2015 将分析为 en-us 区域性中第一个月的第二天，但作为剩余区域性中第二个月的第一天。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/parsing1.cs#15)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/parsing1.vb#15)]  
  
 通常出于以下两个原因分析日期和时间字符串：  
  
-   将用户输入转换为日期和时间值。  
  
-   往返日期和时间值;也就是说，将以前序列化为字符串的日期和时间值反序列化。  
  
 以下部分更详细地讨论了这两项操作。  
  
### <a name="parsing-user-strings"></a>分析用户字符串  
 分析用户输入的日期和时间字符串时，应始终实例化 <xref:System.Globalization.DateTimeFormatInfo> 反映用户的区域性设置的对象，包括用户可能已进行的任何自定义。 否则，日期和时间对象的值可能不正确。 有关如何实例化 <xref:System.Globalization.DateTimeFormatInfo> 反映用户区域性自定义的对象的信息，请参阅 [DateTimeFormatInfo and dynamic data](#dynamic) 部分。  
  
 下面的示例说明了反映用户区域性设置的分析操作与不是的操作之间的差异。 在这种情况下，默认系统区域性为 en-us，但用户已使用 "控制面板"、" **区域和语言** " 将短日期模式从其默认值 "M/d/yyyy" 更改为 "YY/MM/dd"。 当用户输入的字符串反映用户设置，并且该字符串由 <xref:System.Globalization.DateTimeFormatInfo> 还反映用户设置 (重写) 的对象进行分析时，分析操作将返回正确的结果。 但是，当通过 <xref:System.Globalization.DateTimeFormatInfo> 反映标准 en-us 区域性设置的对象对字符串进行分析时，分析方法会引发 <xref:System.FormatException> 异常，因为它会将14解释为月份号，而不是年份的最后两位数字。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/parse2.cs#16)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/parse2.vb#16)]  
  
### <a name="serializing-and-deserializing-date-and-time-data"></a>序列化和反序列化日期和时间数据  
 序列化日期和时间数据应为往返行程;也就是说，所有序列化和反序列化的值都应相同。 如果日期和时间值表示一个时刻，则反序列化的值应同时表示同一时间点，而不考虑在其上还原它的系统的区域性或时区。 若要成功往返日期和时间数据，必须使用属性返回的固定区域性的约定 <xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A> 来生成和分析数据。 格式设置和分析操作决不会反映默认区域性的约定。 如果使用默认区域性设置，数据的可移植性将受到严格限制;它只能在其特定于区域性的设置与对其进行序列化的线程相同的线程上成功进行反序列化。 在某些情况下，这意味着甚至无法在同一系统上成功序列化和反序列化数据。  
  
 如果日期和时间值的时间部分很重要，还应将其转换为 UTC，并使用 "o" 或 "r" [标准格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings)序列化。 然后，可以通过调用分析方法并向其传递适当的格式字符串和固定区域性作为参数来还原时间数据 `provider` 。  
  
 下面的示例演示了往返日期和时间值的过程。 它在系统上序列化一个日期和时间，该日期和时间遵循美国太平洋时间，当前区域性为 en-us。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/serialize1.cs#17)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/serialize1.vb#17)]  
  
 它反序列化在布鲁塞尔、哥本哈根、马德里和巴黎时区中的系统上的数据，其当前区域性为 fr-fr。 还原日期比原始日期晚9个小时，这反映了时区在 UTC 后8小时的时间调整为早于 UTC 的一小时。 原始日期和还原日期均表示同一时刻。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/serialize2.cs#18)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/serialize2.vb#18)]  
  
   
  
## Examples  
 下面的示例使用反射获取 <xref:System.Globalization.DateTimeFormatInfo> (美国) 区域性的对象的属性。 它显示包含自定义格式字符串的属性的值，并使用这些字符串显示格式化日期。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/format1.cs#5)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/format1.vb#5)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.DateTime" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeFormatInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DateTimeFormatInfo();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化不依赖于区域性的（固定的）<see cref="T:System.Globalization.DateTimeFormatInfo" /> 类的新可写实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数将创建一个 <xref:System.Globalization.DateTimeFormatInfo> 对象，该对象表示固定区域性的日期和时间信息。 若要为 <xref:System.Globalization.DateTimeFormatInfo> 特定区域性创建对象，请为 <xref:System.Globalization.CultureInfo> 该区域性创建一个对象，并检索 <xref:System.Globalization.DateTimeFormatInfo> 其属性返回的对象 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 。  
  
 <xref:System.Globalization.DateTimeFormatInfo>可以修改由此构造函数创建的对象的属性。 但是，不能修改 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 属性，因为固定区域性仅支持公历的本地化版本。 若要创建 <xref:System.Globalization.DateTimeFormatInfo> 使用特定日历的对象，必须实例化一个 <xref:System.Globalization.CultureInfo> 支持该日历的对象，并将该日历分配给 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> <xref:System.Globalization.DateTimeFormatInfo> 由属性返回的对象的属性 <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedDayNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedDayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedDayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
      <MemberSignature Language="VB.NET" Value="Public Property AbbreviatedDayNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AbbreviatedDayNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AbbreviatedDayNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.String" /> 类型的一维数组，它包含周中各天的区域性特定的缩写名称。</summary>
        <value>一个类型 <see cref="T:System.String" /> 的一维数组，它包含周中各天的特定于区域性的缩写名称。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的数组包含"Sun"、"Mon"、"Tue"、"Wed"、"Thu"、"Fri"和"Sat"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果设置此属性，则数组必须是一维的，并且必须正好有七个元素。 索引为零的元素 (第一个元素) 表示日历中由属性定义的一周的第一天 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 。  
  
 如果自定义格式字符串包含 "ddd" 格式说明符，则 <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> 或 <xref:System.DateTimeOffset.ToString%2A> 方法将在结果字符串中包含数组的相应成员，而不是 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A> "ddd"。  
  
 如果属性的值发生更改，则此属性将受到影响 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 。 如果选定的 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 不支持缩写的日期名称，则数组包含完整的日期名称。  
  
   
  
## Examples  
 下面的示例创建一个读/写 <xref:System.Globalization.CultureInfo> 对象，该对象表示美国) 区域性的英语 (，并为其属性分配缩写的日期名称 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A> 。 然后，它使用 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings) 中的 "ddd" 格式说明符来显示一周内日期的字符串表示形式，即从2014开始。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviateddaynames/cs/abbreviateddaynames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviateddaynames/vb/abbreviateddaynames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">该属性正被设置为多维数组或者长度不是正好为 7 的数组。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedMonthGenitiveNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedMonthGenitiveNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedMonthGenitiveNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
      <MemberSignature Language="VB.NET" Value="Public Property AbbreviatedMonthGenitiveNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AbbreviatedMonthGenitiveNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AbbreviatedMonthGenitiveNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的月份缩写名称的字符串数组。</summary>
        <value>月份缩写名称的数组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在某些语言中，属于某个日期的月份名称将显示在所有格情况下。 例如，ru 或俄罗斯 (俄罗斯) 区域性的日期由日期号和所有格月份名称组成，如1Января (1 月) 。 对于这些区域性，如果自定义格式字符串包含 "MMM" 格式说明符， <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> 或方法将 <xref:System.DateTimeOffset.ToString%2A> 包括该数组的相应成员， <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A> 以代替结果字符串中的 "mmm"。  
  
 在集运算中，数组必须是一维且仅包含13个元素，因为 <xref:System.Globalization.Calendar> 对象可容纳具有13个月的日历。 对于包含12个月的日历，第十三个元素应该是 <xref:System.String.Empty?displayProperty=nameWithType> 。 索引为零的元素 (第一个元素) 表示由属性定义的年份的第一个月 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 。  
  
 如果设置了 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A> 属性，则还必须设置 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A> 属性。  
  
   
  
## Examples  
 下面的示例创建一个读/写 <xref:System.Globalization.CultureInfo> 对象，该对象表示美国) 区域性的英语 (，并将缩略的所有格月份名称分配给其 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A> 和 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A> 属性。 然后，它显示日期的字符串表示形式，其中包含区域性支持的日历中每个月的缩写月份名称。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/cs/abbreviatedmonthnames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/vb/abbreviatedmonthnames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在设置操作中，该数组是多维数组或者长度不是正好为 13 的数组。</exception>
        <exception cref="T:System.ArgumentNullException">在设置操作中，数组或数组的其中一个元素为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">在设置操作中，当前的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedMonthNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedMonthNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedMonthNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      <MemberSignature Language="VB.NET" Value="Public Property AbbreviatedMonthNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AbbreviatedMonthNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AbbreviatedMonthNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一维字符串数组，它包含各月的特定于区域性的缩写名称。</summary>
        <value>一个具有 13 个元素的一维字符串数组，它包含各月的特定于区域性的缩写名称。 对于 12 个月的日历，数组的第 13 个元素是一个空字符串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 数组包含"Jan"、"Feb"、"Mar"、"Apr"、"May"、"Jun"、"Jul"、"Aug"、"Sep"、"Oct"、"Nov"、"Dec"和""。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果设置此属性，则该数组必须是一个正好包含13个元素的一维。 <xref:System.Globalization.Calendar> 对象用于容纳包含13个月的日历。 索引为零的元素 (第一个元素) 表示由属性定义的年份的第一个月 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 。  
  
 如果设置了 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A> 属性，则还必须设置 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A> 属性。 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>和 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A> 属性用于使用以下格式字符串设置日期格式：  
  
-   一种标准日期和时间格式字符串，用于为包含 "MMM" 格式说明符的自定义格式字符串提供别名。  
  
-   包含 "MMM" 格式说明符的自定义日期和时间格式字符串。  
  
 如果属性的值发生更改，则此属性将受到影响 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 。 如果选定的不 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 支持缩写月份名称，则数组包含完整的月份名称。  
  
   
  
## Examples  
 下面的示例创建一个读/写 <xref:System.Globalization.CultureInfo> 对象，该对象表示美国) 区域性的英语 (，并将缩略的所有格月份名称分配给其 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A> 和 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A> 属性。 然后，它会显示日期的字符串表示形式，其中包含区域性支持的日历中每个月份的缩写名称。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/cs/abbreviatedmonthnames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/vb/abbreviatedmonthnames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">该属性正被设置为多维数组或者长度不是正好为 13 的数组。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
      </Docs>
    </Member>
    <Member MemberName="AMDesignator">
      <MemberSignature Language="C#" Value="public string AMDesignator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AMDesignator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AMDesignator" />
      <MemberSignature Language="VB.NET" Value="Public Property AMDesignator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AMDesignator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AMDesignator : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.AMDesignator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表示处于“上午”（中午前）的各小时的字符串指示符。</summary>
        <value>表示属于上午的各小时的字符串指示符。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值为"AM"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此 <xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> 属性用于从 0:00:00 (午夜) 到11：59：59.999 的所有时间。  
  
 如果自定义格式字符串包含 "tt" 格式说明符并且时间在中午之前， <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> 或 <xref:System.DateTimeOffset.ToString%2A> 方法将在结果字符串中包括属性的值，而不是 <xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> "tt"。 如果自定义格式字符串包含 "t" 自定义格式说明符，则仅包含属性值的第一个字符 <xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> 。 应将 "tt" 用于需要维护上午的区别的语言 和 P.M. 例如，日语，其中 和 P.M. 指示符在第二个字符中不同，而不是第一个字符。  
  
 对于不使用 A.M. 的区域性 指示符，则此属性返回空字符串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.PMDesignator" />
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public System.Globalization.Calendar Calendar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.Calendar" />
      <MemberSignature Language="VB.NET" Value="Public Property Calendar As Calendar" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::Calendar ^ Calendar { System::Globalization::Calendar ^ get(); void set(System::Globalization::Calendar ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Calendar : System.Globalization.Calendar with get, set" Usage="System.Globalization.DateTimeFormatInfo.Calendar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于当前区域性的日历。</summary>
        <value>用于当前区域性的日历。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值是一个 <see cref="T:System.Globalization.GregorianCalendar" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性仅接受对与对象关联的区域性有效的日历 <xref:System.Globalization.DateTimeFormatInfo> 。 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType>属性指定可由特定区域性使用的日历， <xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=nameWithType> 属性指定该区域性的默认日历。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

更改此属性的值也会影响以下属性：、、、、、、、、、 <xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A> <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A> <xref:System.Globalization.DateTimeFormatInfo.DayNames%2A> <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A> <xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A> <xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A> <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> <xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A> 和 <xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A> 。  
  
 例如，如果当前线程的区域性为日语，则此属性接受 <xref:System.Globalization.JapaneseCalendar> 、 <xref:System.Globalization.GregorianCalendarTypes.Localized> <xref:System.Globalization.GregorianCalendar> 或 <xref:System.Globalization.GregorianCalendarTypes.USEnglish> <xref:System.Globalization.GregorianCalendar> 。 使用时 <xref:System.Globalization.JapaneseCalendar> ，默认的长日期说明符为 "gg y ' \x5e74 ' \x6708 ' \x65e5 '"。 使用时 <xref:System.Globalization.GregorianCalendarTypes.Localized> <xref:System.Globalization.GregorianCalendar> ，默认的长日期说明符为 "yyyy" \x5e74 "\x6708" \x65e5 ""。  
  
   
  
## Examples  
 下面的示例定义了一个 `ChangeCalendar` 方法，该方法将区域性的当前日历更改为指定的日历，除非该日历已是当前日历或区域性不支持该日历。 调用方法的代码实例化一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示阿拉伯 (埃及) 区域性，并首先尝试将其日历更改为日本历。 由于不支持日语日历，因此该方法不会更改区域性的日历。 但是，由于 um al 日历是集合的成员 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=nameWithType> ，因此该方法成功，使其成为 ar-示例的当前日历。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Calendar#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.Calendar/cs/CalendarTest1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Calendar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.Calendar/vb/CalendarTest1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性正被设置为对当前区域性无效的 <see cref="T:System.Globalization.Calendar" /> 对象。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName="CalendarWeekRule">
      <MemberSignature Language="C#" Value="public System.Globalization.CalendarWeekRule CalendarWeekRule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CalendarWeekRule CalendarWeekRule" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.CalendarWeekRule" />
      <MemberSignature Language="VB.NET" Value="Public Property CalendarWeekRule As CalendarWeekRule" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CalendarWeekRule CalendarWeekRule { System::Globalization::CalendarWeekRule get(); void set(System::Globalization::CalendarWeekRule value); };" />
      <MemberSignature Language="F#" Value="member this.CalendarWeekRule : System.Globalization.CalendarWeekRule with get, set" Usage="System.Globalization.DateTimeFormatInfo.CalendarWeekRule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CalendarWeekRule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指定使用哪个规则确定该年的第一个日历周。</summary>
        <value>确定该年的第一个日历周的值。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值是 <see cref="F:System.Globalization.CalendarWeekRule.FirstDay" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果属性的值发生更改，则此属性将受到影响 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性正被设置的值不是有效的 <see cref="T:System.Globalization.CalendarWeekRule" /> 值。</exception>
        <exception cref="T:System.InvalidOperationException">在设置操作中，当前的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
        <altmember cref="T:System.Globalization.CalendarWeekRule" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Clone() cil managed" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Clone();" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; obj" Usage="dateTimeFormatInfo.Clone " FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="dateTimeFormatInfo.Clone " FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 的浅表副本。</summary>
        <returns>从原始 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 复制的新 <see cref="T:System.Globalization.DateTimeFormatInfo" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 即使原始对象是只读的，克隆也是可写的 <xref:System.Globalization.DateTimeFormatInfo> 。 因此，可以用用户定义的模式修改克隆的属性。  
  
 对象的浅表副本只是对象的副本。 如果对象包含对其他对象的引用，则浅表副本不会创建所引用对象的副本。 改为引用原始对象。 与此相反，对象的深层副本将创建对象的副本和该对象直接或间接引用的所有内容的副本。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo CurrentInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.DateTimeFormatInfo CurrentInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentInfo As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::DateTimeFormatInfo ^ CurrentInfo { System::Globalization::DateTimeFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentInfo : System.Globalization.DateTimeFormatInfo" Usage="System.Globalization.DateTimeFormatInfo.CurrentInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取基于当前区域性对值进行格式设置的只读的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</summary>
        <value>一个基于当前线程的 <see cref="T:System.Globalization.CultureInfo" /> 对象的只读的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo>由属性返回的对象 <xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A> 反映用户重写。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A> 属性来检索对象， <xref:System.Globalization.DateTimeFormatInfo> 该对象表示当前区域性的格式设置约定，在本例中为 en-us 区域性。 然后，它显示格式字符串和六个格式设置属性的结果字符串。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.CurrentInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.CurrentInfo/cs/CurrentInfo1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.CurrentInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.CurrentInfo/vb/CurrentInfo1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="DateSeparator">
      <MemberSignature Language="C#" Value="public string DateSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DateSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property DateSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DateSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DateSeparator : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.DateSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置分隔日期中各组成部分（即年、月、日）的字符串。</summary>
        <value>分隔日期中各组成部分（即年、月、日）的字符串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值为“/”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果自定义格式字符串包含 "/" 格式说明符，则该 <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> 方法将在结果字符串中显示的值，而不是 <xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A> "/"。  
  
 <xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>属性定义在格式设置操作中，在结果字符串中替换日期分隔符 ( "/" 自定义日期和时间格式说明符) 的字符串。 它还在分析操作中定义日期分隔符字符串。  
  
   
  
## Examples  
 下面的示例实例化 <xref:System.Globalization.CultureInfo> en-us 区域性的对象，将其日期分隔符更改为 "-"，并通过使用 "d"、"g" 和 "g" 标准格式字符串来显示日期。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.DateSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.dateseparator/cs/dateseparatorex.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.DateSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.dateseparator/vb/dateseparatorex.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="DayNames">
      <MemberSignature Language="C#" Value="public string[] DayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] DayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.DayNames" />
      <MemberSignature Language="VB.NET" Value="Public Property DayNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ DayNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DayNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.DayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一维字符串数组，它包含该周中各天的特定于区域性的完整名称。</summary>
        <value>一个一维字符串数组，它包含周中各天的特定于区域性的完整名称。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 数组包含"Sunday"、"Monday"、"Tuesday"、"Wednesday"、"Thursday"、"Friday"和"Saturday"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果设置此属性，则数组必须是一维的，并且必须正好有七个元素。 索引为零的元素 (第一个元素) 表示日历中由属性定义的一周的第一天 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 。  
  
 如果自定义格式字符串包含 "dddd" 格式说明符，则该 <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> 方法将在结果字符串中包含相应成员的值，而不是 <xref:System.Globalization.DateTimeFormatInfo.DayNames%2A> "dddd"。  
  
 如果属性的值发生更改，则此属性将受到影响 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">该属性正被设置为多维数组或者长度不是正好为 7 的数组。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="FirstDayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek FirstDayOfWeek { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek FirstDayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek" />
      <MemberSignature Language="VB.NET" Value="Public Property FirstDayOfWeek As DayOfWeek" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DayOfWeek FirstDayOfWeek { DayOfWeek get(); void set(DayOfWeek value); };" />
      <MemberSignature Language="F#" Value="member this.FirstDayOfWeek : DayOfWeek with get, set" Usage="System.Globalization.DateTimeFormatInfo.FirstDayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一周的第一天。</summary>
        <value>表示一周的第一天的枚举值。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值是 <see cref="F:System.DayOfWeek.Sunday" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果属性的值发生更改，则此属性将受到影响 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性正被设置的值不是有效的 <see cref="T:System.DayOfWeek" /> 值。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="FullDateTimePattern">
      <MemberSignature Language="C#" Value="public string FullDateTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property FullDateTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullDateTimePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FullDateTimePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.FullDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>为长日期和长时间值获取或设置自定义格式字符串。</summary>
        <value>长日期和时间值的自定义格式字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 "F" 标准格式字符串是属性的别名 <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> 。 换言之，分配给此属性的自定义格式字符串为 "F" 标准格式字符串定义结果字符串的格式。 有关详细信息，请参阅 [标准日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings)。  
  
 属性的值 <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> 是通过串联 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> 由空格分隔的和属性来动态生成的 <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> 。 此动态分配在下列情况下发生：  
  
-   如果在显式设置属性值之前检索到属性值，则为。  
  
-   当属性的值 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> 更改时。  
  
-   当属性的值 <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> 更改时。  
  
 如果属性的值发生更改，则此属性将受到影响 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 。  
  
   
  
## Examples  
 下面的示例显示了几个区域性的的值 <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> 。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/CPP/dtfi_fulldatetimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/CS/dtfi_fulldatetimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.FullDateTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/VB/dtfi_fulldatetimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedDayName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedDayName (DayOfWeek dayofweek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedDayName(valuetype System.DayOfWeek dayofweek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAbbreviatedDayName (dayofweek As DayOfWeek) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAbbreviatedDayName(DayOfWeek dayofweek);" />
      <MemberSignature Language="F#" Value="member this.GetAbbreviatedDayName : DayOfWeek -&gt; string" Usage="dateTimeFormatInfo.GetAbbreviatedDayName dayofweek" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayofweek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <param name="dayofweek">一个 <see cref="T:System.DayOfWeek" /> 值。</param>
        <summary>基于与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的区域性，返回周中指定日期的区域性特定的缩写名称。</summary>
        <returns>由 <paramref name="dayofweek" /> 表示的周中日期的区域性特定的缩写名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于默认的固定 <xref:System.Globalization.DateTimeFormatInfo> 对象，此方法返回的字符串来自 <xref:System.Globalization.GregorianCalendar> ：  
  
|`dayofweek`|返回值|  
|-----------------|------------------|  
|星期日|形|  
|星期一|月|  
|星期二|Tue|  
|星期三|周三|  
|星期四|日|  
|星期五|周五|  
|星期六|Sat|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dayofweek" /> 不是有效的 <see cref="T:System.DayOfWeek" /> 值。</exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedEraName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedEraName (int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedEraName(int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAbbreviatedEraName (era As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAbbreviatedEraName(int era);" />
      <MemberSignature Language="F#" Value="member this.GetAbbreviatedEraName : int -&gt; string" Usage="dateTimeFormatInfo.GetAbbreviatedEraName era" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="era">表示纪元的整数。</param>
        <summary>返回包含指定纪元的缩写名称的字符串（如果缩写名称存在）。</summary>
        <returns>包含指定纪元的缩写名称的字符串（如果缩写名称存在）。  
  
 - 或 -  
  
 包含纪元的完整名称的字符串（如果缩写名称不存在）。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 纪元名称是日历用来指从固定点或事件中推测一段时间的名称。 例如，"公元" 或 "公元" 是公历中的当前纪元。  
  
 的有效值 `era` 列在 <xref:System.Globalization.Calendar.Eras%2A> 派生自的相应类的属性中 <xref:System.Globalization.Calendar> 。 例如： <xref:System.Globalization.JapaneseCalendar.Eras%2A?displayProperty=nameWithType> 显示此实现支持的纪元的列表。  
  
 在 <xref:System.Globalization.JapaneseCalendar> 类中，缩写的纪元名称是完整纪元名称的第一个字符。 该字符可以是不区分大小写的单字符拉丁字母缩写或单字符日文汉字缩写形式。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="era" /> 不表示在 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 属性中指定的日历中的有效纪元。</exception>
        <block subset="none" type="usage"><para>如果 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 是 <see cref="T:System.Globalization.TaiwanCalendar" /> 但 <see cref="P:System.Threading.Thread.CurrentCulture" /> 不是 "zh-chs"，则 <see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" /> 和将 <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" /> <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> 返回空字符串 ( "" ) 。</para></block>
        <altmember cref="T:System.Globalization.JapaneseCalendar" />
        <altmember cref="T:System.Globalization.TaiwanCalendar" />
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedMonthName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedMonthName (int month);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedMonthName(int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAbbreviatedMonthName (month As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAbbreviatedMonthName(int month);" />
      <MemberSignature Language="F#" Value="member this.GetAbbreviatedMonthName : int -&gt; string" Usage="dateTimeFormatInfo.GetAbbreviatedMonthName month" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="month">1 到 13 之间的一个整数，用于表示要检索的月份的名称。</param>
        <summary>基于与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的区域性，返回指定月份的区域性特定的缩写名称。</summary>
        <returns>由 <paramref name="month" /> 表示的月份的区域性特定的缩写名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于默认的固定 <xref:System.Globalization.DateTimeFormatInfo> 对象，此方法从对象返回一个字符串 <xref:System.Globalization.GregorianCalendar> 。  
  
|`month`|返回值|  
|-------------|------------------|  
|1|2006|  
|2|96|  
|3|Mar|  
|4|5|  
|5|有助于|  
|6|06|  
|7|月|  
|8|Aug|  
|9|月|  
|10|Oct|  
|11|月|  
|12|十进制|  
|13|""|  
  
 <xref:System.Globalization.Calendar> 对象可以容纳包含13个月的日历。 对于12个月的日历，将始终以第13个月的名称返回空字符串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="month" /> 小于 1 或大于 13。</exception>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAllDateTimePatterns">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返回可用于对日期和时间值进行格式设置的标准模式。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public string[] GetAllDateTimePatterns ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetAllDateTimePatterns() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllDateTimePatterns () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetAllDateTimePatterns();" />
      <MemberSignature Language="F#" Value="member this.GetAllDateTimePatterns : unit -&gt; string[]" Usage="dateTimeFormatInfo.GetAllDateTimePatterns " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回可用于对日期和时间值进行格式设置的所有标准模式。</summary>
        <returns>一个数组，包含可以用于对日期和时间值进行格式设置的标准模式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法返回一个数组，该数组包含与标准格式字符串相对应的所有自定义格式字符串。 请参阅标准 [日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) ，获取标准格式字符串的列表。  
  
 可以 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A> 在格式设置操作中使用方法返回的数组中的自定义格式字符串。 但是，如果您这样做，则和方法始终无法成功分析在该格式设置操作中返回的日期和时间值的字符串表示形式 `Parse` `TryParse` 。 因此，不能假定方法返回的自定义格式字符串 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A> 可用于往返日期和时间值。 以下示例阐释了此问题。 它检索 <xref:System.Globalization.DateTimeFormatInfo> 包含意大利 (意大利语) 区域性的格式设置信息的对象。 它将由方法返回的数组中的每个自定义格式字符串传递 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns> 给 <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> 方法，以创建日期和时间的字符串表示形式。 然后，此示例通过调用方法尝试分析此值 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> 。 如示例的输出所示，某些自定义格式字符串不生成成功往返的日期和时间值。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsex1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsex1.vb#1)]  
  
 若要分析可以用许多预定义的自定义格式表示的日期和时间的字符串表示形式，请调用以下方法之一：  
  
-   <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=nameWithType>  
  
 方法返回的数组中的自定义格式字符串 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A> 取决于对象为其 <xref:System.Globalization.DateTimeFormatInfo> 提供格式设置信息的区域性的当前日历。 如果日历发生更改，则此方法返回的数组也会更改。  
  
   
  
## Examples  
 下面的示例显示固定区域性的日期和时间格式字符串，以及在将该格式字符串用于格式化特定日期时生成的结果字符串。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsinv.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsinv.vb#3)]  
  
 该示例 <xref:System.Globalization.DateTimeFormatInfo> 通过调用构造函数来实例化表示固定区域性的对象 <xref:System.Globalization.DateTimeFormatInfo.%23ctor%2A> 。 它还可以 <xref:System.Globalization.DateTimeFormatInfo> 从属性中检索表示固定区域性的 <xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public string[] GetAllDateTimePatterns (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetAllDateTimePatterns(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllDateTimePatterns (format As Char) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetAllDateTimePatterns(char format);" />
      <MemberSignature Language="F#" Value="member this.GetAllDateTimePatterns : char -&gt; string[]" Usage="dateTimeFormatInfo.GetAllDateTimePatterns format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="format">标准格式字符串。</param>
        <summary>返回可在其中使用指定标准格式字符串对日期和时间值进行格式设置的所有模式。</summary>
        <returns>一个数组，它包含可在其中使用指定格式字符串对日期和时间值进行格式设置的标准模式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法返回一个数组，其中包含对应于特定标准格式字符串的自定义格式字符串。 请参阅标准 [日期和时间格式字符串](/dotnet/standard/base-types/standard-date-and-time-format-strings) ，获取标准格式字符串的列表。  
  
 可以 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A> 在格式设置操作中使用方法返回的数组中的自定义格式字符串。 但是，如果您这样做，则和方法始终无法成功分析在该格式设置操作中返回的日期和时间值的字符串表示形式 `Parse` `TryParse` 。 因此，不能假定方法返回的自定义格式字符串 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A> 可用于往返日期和时间值。 以下示例阐释了此问题。 它检索 <xref:System.Globalization.DateTimeFormatInfo> 包含俄罗斯 (俄语) 区域性的格式设置信息的对象。 它 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%28System.Char%29> 为每个标准格式字符串调用方法，然后将返回的数组中的每个自定义格式字符串传递给 <xref:System.DateTime.ToString%28System.String%29?displayProperty=nameWithType> 方法以创建日期和时间的字符串表示形式。 然后，此示例通过调用方法尝试分析此值 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=nameWithType> 。 如示例的输出所示，某些自定义格式字符串不生成成功往返的日期和时间值。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsex2.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsex2.vb#2)]  
  
 若要分析可以用许多预定义的自定义格式表示的日期和时间的字符串表示形式，请调用以下方法之一：  
  
-   <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType>  
  
-   <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=nameWithType>  
  
 方法返回的数组中的自定义格式字符串 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A> 取决于对象为其 <xref:System.Globalization.DateTimeFormatInfo> 提供格式设置信息的区域性的当前日历。 如果日历发生更改，则此方法返回的数组也会更改。  
  
   
  
## Examples  
 下面的示例显示了当前日历的日期和时间模式。  
  
 [!code-cpp[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/CS/source.cs#1)]
 [!code-vb[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="format" /> 不是有效的标准格式字符串。</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetDayName">
      <MemberSignature Language="C#" Value="public string GetDayName (DayOfWeek dayofweek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetDayName(valuetype System.DayOfWeek dayofweek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDayName (dayofweek As DayOfWeek) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetDayName(DayOfWeek dayofweek);" />
      <MemberSignature Language="F#" Value="member this.GetDayName : DayOfWeek -&gt; string" Usage="dateTimeFormatInfo.GetDayName dayofweek" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayofweek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <param name="dayofweek">一个 <see cref="T:System.DayOfWeek" /> 值。</param>
        <summary>基于与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的区域性，返回周中指定日期的区域性特定的全名。</summary>
        <returns>由 <paramref name="dayofweek" /> 表示的周中日期的区域性特定的全名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于默认的固定 <xref:System.Globalization.DateTimeFormatInfo> 对象，此方法从对象返回一个字符串 <xref:System.Globalization.GregorianCalendar> 。  
  
|`dayofweek`|返回值|  
|-----------------|------------------|  
|星期日|"Sunday"|  
|星期一|“星期一”|  
|星期二|"Tuesday"|  
|星期三|"Wednesday"|  
|星期四|"Thursday"|  
|星期五|"Friday"|  
|星期六|“星期六”|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dayofweek" /> 不是有效的 <see cref="T:System.DayOfWeek" /> 值。</exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DayNames" />
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="GetEra">
      <MemberSignature Language="C#" Value="public int GetEra (string eraName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetEra(string eraName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEra (eraName As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetEra(System::String ^ eraName);" />
      <MemberSignature Language="F#" Value="member this.GetEra : string -&gt; int" Usage="dateTimeFormatInfo.GetEra eraName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eraName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eraName">包含纪元名称的字符串。</param>
        <summary>返回表示指定纪元的整数。</summary>
        <returns>如果 <paramref name="eraName" /> 有效，则为表示纪元的整数；否则为 -1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 纪元名称是日历用来指从固定点或事件中推测一段时间的名称。 例如，"公元" 或 "公元" 是公历中的当前纪元。  
  
 与的比较 `eraName` 不区分大小写，例如 "公元" 等效于 "公元"。  
  
 <xref:System.Globalization.DateTimeFormatInfo.GetEra%2A> 仅当 <xref:System.Globalization.GregorianCalendar> 在中选择了 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=nameWithType> 并且区域性使用 "公元" 时，才会忽略缩写名称中的标点符号 作为纪元名称，即 "公元" 等效于 "AD"。  
  
 <xref:System.Globalization.DateTimeFormatInfo.GetEra%2A> 将 `eraName` 与返回的完整纪元名称 <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A> 与返回的缩写纪元名称进行比较 <xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A> 。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]

## Examples  
 下面的示例演示了 <xref:System.Globalization.DateTimeFormatInfo> 在纪元名称中忽略标点，仅当日历为公历并且区域性使用纪元名称 "公元" 时。  
  
 [!code-cpp[System.Globalization.GregorianCalendar.GetEra#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/CPP/gregorian_getera.cpp#1)]
 [!code-csharp[System.Globalization.GregorianCalendar.GetEra#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/CS/gregorian_getera.cs#1)]
 [!code-vb[System.Globalization.GregorianCalendar.GetEra#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/VB/gregorian_getera.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="eraName" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName="GetEraName">
      <MemberSignature Language="C#" Value="public string GetEraName (int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetEraName(int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEraName (era As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetEraName(int era);" />
      <MemberSignature Language="F#" Value="member this.GetEraName : int -&gt; string" Usage="dateTimeFormatInfo.GetEraName era" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="era">表示纪元的整数。</param>
        <summary>返回包含指定纪元名称的字符串。</summary>
        <returns>包含纪元名称的字符串。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 纪元名称是日历用来指从固定点或事件中推测一段时间的名称。 例如，"公元" 或 "公元" 是公历中的当前纪元。  
  
 的有效值 `era` 列在 <xref:System.Globalization.Calendar.Eras%2A> 派生自的相应类的属性中 <xref:System.Globalization.Calendar> 。 例如： <xref:System.Globalization.JapaneseCalendar.Eras%2A?displayProperty=nameWithType> 显示此实现支持的纪元的列表。  

[!INCLUDE[japanese-era-note](~/includes/calendar-era.md)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="era" /> 不表示在 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 属性中指定的日历中的有效纪元。</exception>
        <block subset="none" type="usage"><para>如果日历由表示 <see cref="T:System.Globalization.TaiwanCalendar" /> 但 <see cref="P:System.Threading.Thread.CurrentCulture" /> 不是 "zh-chs"，则 <see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" /> 和将 <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" /> <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> 返回空字符串 ( "" ) 。</para></block>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormat (formatType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetFormat(Type ^ formatType);" />
      <MemberSignature Language="F#" Value="abstract member GetFormat : Type -&gt; obj&#xA;override this.GetFormat : Type -&gt; obj" Usage="dateTimeFormatInfo.GetFormat formatType" />
      <MemberSignature Language="C#" Value="public object? GetFormat (Type? formatType);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IFormatProvider.GetFormat(System.Type)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">所需格式化服务的类型。</param>
        <summary>返回指定类型的对象，它提供日期和时间格式化服务。</summary>
        <returns>如果 <paramref name="formatType" /> 与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 的类型相同，则为当前对象；否则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Format(String, IFormatProvider)`当当前 <xref:System.Globalization.DateTimeFormatInfo> 对象作为参数传递时，基本数据类型支持的方法将调用此方法 <xref:System.IFormatProvider> 。 此方法实现 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo GetInstance (IFormatProvider provider);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.DateTimeFormatInfo GetInstance(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetInstance(System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetInstance (provider As IFormatProvider) As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::DateTimeFormatInfo ^ GetInstance(IFormatProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member GetInstance : IFormatProvider -&gt; System.Globalization.DateTimeFormatInfo" Usage="System.Globalization.DateTimeFormatInfo.GetInstance provider" />
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo GetInstance (IFormatProvider? provider);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">获取 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象的 <see cref="T:System.IFormatProvider" />。  
  
- 或 - 
 要获取 <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" /> 的 <see langword="null" />。</param>
        <summary>返回与指定 <see cref="T:System.IFormatProvider" /> 关联的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</summary>
        <returns>与 <see cref="T:System.IFormatProvider" /> 关联的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> `formatProvider` <xref:System.Globalization.DateTimeFormatInfo> 对象作为 `Type` 参数。 如果 `formatProvider` 为 `null` 或 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> 返回 `null` ，则此方法返回 <xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A> 。  
  
 应用程序可以 <xref:System.Globalization.DateTimeFormatInfo> 使用以下方法之一获取特定区域性的对象：  
  
-   <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=nameWithType> 属性。  
  
-   <xref:System.Globalization.DateTimeFormatInfo.GetInstance%2A>方法，其中 `provider` 是一个 <xref:System.Globalization.CultureInfo> 对象。  
  
 只能 <xref:System.Globalization.DateTimeFormatInfo> 为固定区域性或特定区域性创建对象，而不能为非特定区域性创建对象。  
  
 有关固定区域性、特定区域性和非特定区域性的详细信息，请参阅 <xref:System.Globalization.CultureInfo> 类说明。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="GetMonthName">
      <MemberSignature Language="C#" Value="public string GetMonthName (int month);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetMonthName(int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMonthName (month As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetMonthName(int month);" />
      <MemberSignature Language="F#" Value="member this.GetMonthName : int -&gt; string" Usage="dateTimeFormatInfo.GetMonthName month" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="month">1 到 13 之间的一个整数，用于表示要检索的月份的名称。</param>
        <summary>基于与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的区域性，返回指定月份的区域性特定的全名。</summary>
        <returns>由 <paramref name="month" /> 表示的月份的区域性特定的全名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于默认的固定 <xref:System.Globalization.DateTimeFormatInfo> 对象，此方法从对象返回一个字符串 <xref:System.Globalization.GregorianCalendar> 。  
  
|`month`|返回值|  
|-------------|------------------|  
|1|“January”|  
|2|2009|  
|3|致辞|  
|4|四月份|  
|5|有助于|  
|6|六月|  
|7|2001|  
|8|2004|  
|9|九月份|  
|10|2004|  
|11|日|  
|12|月份|  
|13|""|  
  
 <xref:System.Globalization.Calendar> 对象可以容纳包含13个月的日历。 对于12个月的日历，将始终以第13个月的名称返回空字符串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="month" /> 小于 1 或大于 13。</exception>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
      </Docs>
    </Member>
    <Member MemberName="GetShortestDayName">
      <MemberSignature Language="C#" Value="public string GetShortestDayName (DayOfWeek dayOfWeek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetShortestDayName(valuetype System.DayOfWeek dayOfWeek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetShortestDayName(System.DayOfWeek)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetShortestDayName (dayOfWeek As DayOfWeek) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetShortestDayName(DayOfWeek dayOfWeek);" />
      <MemberSignature Language="F#" Value="member this.GetShortestDayName : DayOfWeek -&gt; string" Usage="dateTimeFormatInfo.GetShortestDayName dayOfWeek" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayOfWeek" Type="System.DayOfWeek" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="dayOfWeek"><see cref="T:System.DayOfWeek" /> 值之一。</param>
        <summary>获取与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的周中指定日期的最短日期缩写名称。</summary>
        <returns>对应于 <paramref name="dayOfWeek" /> 参数的周的缩写名称。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示了一些方法和属性，这些方法和属性指定日期和时间格式模式、本机日历名称以及完整、缩写的月份和日期名称。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="dayOfWeek" /> 不是 <see cref="T:System.DayOfWeek" /> 枚举中的值。</exception>
      </Docs>
    </Member>
    <Member MemberName="InvariantInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo InvariantInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.DateTimeFormatInfo InvariantInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property InvariantInfo As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::DateTimeFormatInfo ^ InvariantInfo { System::Globalization::DateTimeFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InvariantInfo : System.Globalization.DateTimeFormatInfo" Usage="System.Globalization.DateTimeFormatInfo.InvariantInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取不依赖于区域性的（固定）默认只读的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</summary>
        <value>不依赖于区域性的（固定的）默认只读对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 无论当前区域性如何，此属性不会更改。 因此，可使用固定区域性的 <xref:System.Globalization.DateTimeFormatInfo> 对象生成一致的、与区域性无关的结果，以便分析和格式化多区域性数据的操作。 例如，如果多个区域性的日期和时间数据以字符串形式保存，则可以使用 <xref:System.Globalization.DateTimeFormatInfo> 固定区域性的对象进行格式化并保存。 然后，可以使用固定区域性的对象对其进行分析 <xref:System.Globalization.DateTimeFormatInfo> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Globalization.DateTimeFormatInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是否为只读。</summary>
        <value>如果 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="LongDatePattern">
      <MemberSignature Language="C#" Value="public string LongDatePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LongDatePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property LongDatePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LongDatePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LongDatePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.LongDatePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置长日期值的自定义格式字符串。</summary>
        <value>长日期值的自定义格式字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>属性定义通过对 <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> 和方法的调用 <xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType> 以及通过提供 "D" 标准格式字符串的复合格式字符串所返回的特定于区域性的日期字符串格式。 下面的示例演示以下各项之间的关系： "D" 标准格式字符串、属性返回的自定义格式字符串， <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> 以及日期的区域性特定表示形式。  
  
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/longdatepattern1.cs" interactive="try-dotnet" id="Snippet2":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/longdatepattern1.vb" id="Snippet2"::: 
  
 请参阅自定义格式说明符的 [自定义日期和时间格式字符串](/dotnet/standard/base-types/custom-date-and-time-format-strings) ，可以组合这些说明符来构造自定义格式字符串，例如 "dddd，dd MMMM yyyy"。  
  
 应将长日期模式的日期分隔符设置为确切的字符串，而不是使用日期分隔符占位符。 例如，若要获取模式 MM-DD，请将长日期模式设置为 "yyyy-mm-dd"。  
  
 如果区域性使用的日历发生更改，则此属性的值可能会更改。 例如，下面的示例演示 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> <xref:System.Globalization.CultureInfo> 当 <xref:System.Globalization.Calendar> 区域性使用的对象发生更改时，表示阿拉伯 (叙利亚) 区域性的对象的属性如何变化。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongDatePattern#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/longdatepattern2.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongDatePattern#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/longdatepattern2.vb#3)]  
  
   
  
## Examples  
 下面的示例显示 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> 了几个区域性的属性的值。  
  
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CPP/dtfi_longdatepattern.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/dtfi_longdatepattern.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/dtfi_longdatepattern.vb" id="Snippet1":::
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="LongTimePattern">
      <MemberSignature Language="C#" Value="public string LongTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LongTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.LongTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property LongTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LongTimePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LongTimePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.LongTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>为长时间值获取或设置自定义格式字符串。</summary>
        <value>长时间值的格式模式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>属性定义由对和方法的调用返回的特定于区域性的格式， <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> <xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType> 以及通过提供 "T" 标准格式字符串的复合格式字符串返回的数据字符串。  
  
 建议你将长时间模式中的时间分隔符设置为确切的字符串，而不是使用时间分隔符占位符。 例如，若要获取模式 h-mm-ss，请将长日期模式设置为 "h-mm-ss"。  
  
   
  
## Examples  
 下面的示例显示了几个区域性的的值 <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> 。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.LongTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/CPP/dtfi_longtimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/CS/dtfi_longtimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/VB/dtfi_longtimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="MonthDayPattern">
      <MemberSignature Language="C#" Value="public string MonthDayPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MonthDayPattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property MonthDayPattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MonthDayPattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MonthDayPattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.MonthDayPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置月份和日期值的自定义格式字符串。</summary>
        <value>月份和日期值的自定义格式字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>属性定义由对和方法的调用返回的特定于区域性的格式， <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> <xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType> 以及通过提供 "m" 和 "m" 标准格式字符串的复合格式字符串返回的数据字符串。  
  
 如果属性的值发生更改，则此属性将受到影响 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 。  
  
 建议将月份和日期模式的日期分隔符设置为确切的字符串，而不是使用日期分隔符占位符。 例如，若要获取模式 MM-DD，请将 "月" 和 "日" 模式设置为 "MM-DD"。  
  
   
  
## Examples  
 下面的示例显示了几个区域性的的值 <xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A> 。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.MonthDayPattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/CPP/dtfi_monthdaypattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.MonthDayPattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/CS/dtfi_monthdaypattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.MonthDayPattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/VB/dtfi_monthdaypattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="MonthGenitiveNames">
      <MemberSignature Language="C#" Value="public string[] MonthGenitiveNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] MonthGenitiveNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
      <MemberSignature Language="VB.NET" Value="Public Property MonthGenitiveNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ MonthGenitiveNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MonthGenitiveNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的月份名称的字符串数组。</summary>
        <value>月份名称的字符串数组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在某些语言中，属于某个日期的月份名称将显示在所有格情况下。 例如，俄语中的日期 (俄罗斯) 或 "ru"，区域性包含日期号和所有格月份名称，如Января。  
  
 设置此属性后，数组必须是一维的，并且必须正好有13个元素。 <xref:System.Globalization.Calendar> 对象用于容纳包含13个月的日历。 索引为零的元素 (第一个元素) 表示由属性定义的年份的第一个月 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 。 如果设置了 <xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A> 属性，则还必须设置 <xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A> 属性。  
  
   
  
## Examples  
 下面的示例演示了一些方法和属性，这些方法和属性指定日期和时间格式模式、本机日历名称以及完整、缩写的月份和日期名称。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在设置操作中，该数组是多维数组或者长度不是正好为 13 的数组。</exception>
        <exception cref="T:System.ArgumentNullException">在设置操作中，数组或数组的其中一个元素为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">在设置操作中，当前的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <Member MemberName="MonthNames">
      <MemberSignature Language="C#" Value="public string[] MonthNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] MonthNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
      <MemberSignature Language="VB.NET" Value="Public Property MonthNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ MonthNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MonthNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.MonthNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.String" /> 类型的一维数组，它包含月份的区域性特定的全名。</summary>
        <value>一个类型 <see cref="T:System.String" /> 的一维数组，该数组包含月份的特定于区域性的完整名称。 在 12 个月的日历中，数组的第 13 个元素是一个空字符串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 数组包含"January"、"February"、"March"、"April"、"May"、"June"、"July"、"August"、"September"、"October"、"November"、"December"和""。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 设置此属性后，数组必须是一维的，并且必须正好有13个元素。 <xref:System.Globalization.Calendar> 对象用于容纳包含13个月的日历。 索引为零的元素 (第一个元素) 表示由属性定义的年份的第一个月 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 。  
  
 如果设置了 <xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A> 属性，则还必须设置 <xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A> 属性。  
  
 如果自定义模式包括格式模式 "MMMM"，则将 <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> <xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A> 在格式模式中显示值 "mmmm"。  
  
 如果属性的值发生更改，则此属性将受到影响 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">该属性正被设置为多维数组或者长度不是正好为 13 的数组。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="NativeCalendarName">
      <MemberSignature Language="C#" Value="public string NativeCalendarName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeCalendarName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NativeCalendarName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NativeCalendarName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NativeCalendarName : string" Usage="System.Globalization.DateTimeFormatInfo.NativeCalendarName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的本机日历名称。</summary>
        <value>在与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的区域性中，如果所用日历的本地名称可用，则为该名称；如果该本地日历名称不可用，则为空字符串 ("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例演示了一些方法和属性，这些方法和属性指定日期和时间格式模式、本机日历名称以及完整、缩写的月份和日期名称。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>如果 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> 是 <see cref="T:System.Globalization.TaiwanCalendar" /> 但 <see cref="P:System.Threading.Thread.CurrentCulture" /> 不是 "zh-chs"，则 <see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" /> 和将 <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" /> <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> 返回空字符串 ( "" ) 。</para></block>
      </Docs>
    </Member>
    <Member MemberName="PMDesignator">
      <MemberSignature Language="C#" Value="public string PMDesignator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PMDesignator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.PMDesignator" />
      <MemberSignature Language="VB.NET" Value="Public Property PMDesignator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PMDesignator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.PMDesignator : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.PMDesignator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表示处于“下午”（中午后）的各小时的字符串指示符。</summary>
        <value>表示处于“下午”（中午后）的各小时的字符串指示符。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值为"PM"。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此 <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A> 属性用于从 12:00:00 (noon) 到23：59：59.999 的所有时间。  
  
 如果自定义模式包括格式模式 "tt" 并且时间晚于 noon，则在 <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> 格式模式中显示的值为 <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A> 替代 "tt"。 如果自定义模式包括格式模式 "t"，则只显示的第一个字符 <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A> 。 应用程序应使用 "tt" 作为需要维护 AM 与 PM 之间的差异的语言。 以日语为例，其 AM 和 PM 指示符的差异点为第二个字符，而非第一个字符。  
  
 对于不使用 PM 指示符的区域性，此属性返回一个空字符串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AMDesignator" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo ReadOnly (System.Globalization.DateTimeFormatInfo dtfi);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.DateTimeFormatInfo ReadOnly(class System.Globalization.DateTimeFormatInfo dtfi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReadOnly (dtfi As DateTimeFormatInfo) As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::DateTimeFormatInfo ^ ReadOnly(System::Globalization::DateTimeFormatInfo ^ dtfi);" />
      <MemberSignature Language="F#" Value="static member ReadOnly : System.Globalization.DateTimeFormatInfo -&gt; System.Globalization.DateTimeFormatInfo" Usage="System.Globalization.DateTimeFormatInfo.ReadOnly dtfi" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtfi" Type="System.Globalization.DateTimeFormatInfo" />
      </Parameters>
      <Docs>
        <param name="dtfi">要包装的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</param>
        <summary>返回只读的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 包装。</summary>
        <returns>一个只读的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 包装器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此包装器可防止对的任何修改 `dtfi` 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dtfi" /> 为 <see langword="null" />。</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="RFC1123Pattern">
      <MemberSignature Language="C#" Value="public string RFC1123Pattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RFC1123Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RFC1123Pattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RFC1123Pattern { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RFC1123Pattern : string" Usage="System.Globalization.DateTimeFormatInfo.RFC1123Pattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取自定义的格式字符串，该字符串用于基于 Internet 工程任务组 (IETF) 征求意见文档 (RFC) 1123 规范的时间值。</summary>
        <value>基于 IETF RFC 1123 规范的时间值的自定义格式字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>属性定义由对和方法的调用返回的特定于区域性的格式， <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> <xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType> 以及通过提供 "r" 和 "r" 标准格式字符串的复合格式字符串返回的数据字符串。  
  
 RFC1123 模式反映了定义的标准，并且属性是只读的。 因此，它始终是相同的，与区域性无关。 定义格式字符串为“ddd, dd MMM yyyy HH':'mm':'ss 'GMT'”。  
  
   
  
## Examples  
 下面的示例显示了几个区域性的由 datetimeformatinfo.rfc1123pattern 的值。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/CPP/dtfi_rfc1123pattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/CS/dtfi_rfc1123pattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.RFC1123Pattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/VB/dtfi_rfc1123pattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="SetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public void SetAllDateTimePatterns (string[] patterns, char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAllDateTimePatterns(string[] patterns, char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAllDateTimePatterns (patterns As String(), format As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAllDateTimePatterns(cli::array &lt;System::String ^&gt; ^ patterns, char format);" />
      <MemberSignature Language="F#" Value="member this.SetAllDateTimePatterns : string[] * char -&gt; unit" Usage="dateTimeFormatInfo.SetAllDateTimePatterns (patterns, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patterns" Type="System.String[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
        <Parameter Name="format" Type="System.Char" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="patterns">自定义格式字符串的数组。</param>
        <param name="format">在 <paramref name="patterns" /> 参数中指定的与自定格式字符串相关的标准格式字符串。</param>
        <summary>设置对应于指定的标准格式字符串的自定义日期和时间格式字符串。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A>方法定义与特定的标准日期和时间格式字符串相对应的自定义格式字符串。 如果对日期和时间格式设置方法的调用包括指定的标准日期和时间格式字符串 `format` ，则该方法将使用数组中的第一个元素 `patterns` 来定义生成的字符串的格式。  
  
> [!WARNING]
>  在 `Parse` `TryParse` `patterns` 分析日期和时间的字符串表示形式时，和方法不会完全循环访问中的所有字符串。 如果需要在分析操作中使用特定格式的日期和时间字符串，则应将有效格式的数组传递到 <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 、 <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=nameWithType> 、 <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=nameWithType> 或 <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=nameWithType> 方法。  
  
 您可以定义对应于 "d"、"D"、"t"、"T" 和 "y" 标准日期和时间格式字符串的自定义格式字符串。 如果的值 `format` 是任何其他标准格式字符串，则该 <xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A> 方法将引发 <xref:System.ArgumentException> 。  
  
 如果你的自定义日期和时间格式字符串包含日期分隔符，则应显式指定日期分隔符，而不是依赖于将 "/" 自定义格式说明符替换为特定日期分隔符的分析或格式设置方法。 例如，若要获取模式 MM-DD，请使用模式 "MM-DD-yyyy"。  
  
   
  
## Examples  
 下面的示例实例化一个 <xref:System.Globalization.CultureInfo> 对象，该对象表示 "en-us" (美国) 区域性，并使用它来分析日期和时间字符串的数组，使用 "Y" 标准格式字符串。 然后，它使用 <xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A> 方法将新的自定义格式字符串与 "Y" 标准格式字符串关联，然后尝试分析日期和时间字符串的数组。 该示例的输出演示了在分析和格式设置操作中使用新的自定义格式字符串。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.setalldatetimepatterns/cs/setalldatetimepatterns.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.setalldatetimepatterns/vb/setalldatetimepatterns.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="patterns" /> 是 <see langword="null" /> 或长度为零的数组。  
  
- 或 - 
 <paramref name="format" /> 不是有效的标准格式字符串，或者是不能设置其模式的标准格式字符串。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="patterns" /> 有一个值为 <see langword="null" /> 的数组元素。</exception>
        <exception cref="T:System.InvalidOperationException">此 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
        <altmember cref="Overload:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns" />
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="ShortDatePattern">
      <MemberSignature Language="C#" Value="public string ShortDatePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShortDatePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property ShortDatePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ShortDatePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShortDatePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.ShortDatePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置短日期值的自定义格式字符串。</summary>
        <value>短日期值的自定义格式字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>属性定义通过对 <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> 和方法的调用 <xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType> 以及通过提供 "d" 标准格式字符串的复合格式字符串所返回的特定于区域性的日期字符串格式。  
  
 如果属性的值发生更改，则此属性将受到影响 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 。  
  
   
  
## Examples  
 下面的示例显示属性的值 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> 和使用几个区域性的属性进行格式设置的日期值 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> 。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.ShortDatePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/CS/dtfi_shortdatepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.ShortDatePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/VB/dtfi_shortdatepattern.vb#1)]  
  
 下面的示例修改 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> 了 <xref:System.Globalization.DateTimeFormatInfo> 表示英语 (美国) 区域性的格式设置约定的对象的属性。 它还会显示一个日期值两次，以反映原始 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> 属性，然后反映新的属性值。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.ShortDatePattern#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/CS/shortdatepattern1.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.ShortDatePattern#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/VB/shortdatepattern1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="ShortestDayNames">
      <MemberSignature Language="C#" Value="public string[] ShortestDayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ShortestDayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortestDayNames" />
      <MemberSignature Language="VB.NET" Value="Public Property ShortestDayNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ShortestDayNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShortestDayNames : string[] with get, set" Usage="System.Globalization.DateTimeFormatInfo.ShortestDayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象关联的唯一最短日期缩写名称的字符串数组。</summary>
        <value>日期名称的字符串数组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks

默认数组从星期日开始。

## Examples  
 下面的示例演示了一些方法和属性，这些方法和属性指定日期和时间格式模式、本机日历名称以及完整、缩写的月份和日期名称。  
  
 [!code-csharp[sys.glob.DTFI1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在设置操作中，该数组中不会正好有七个元素。</exception>
        <exception cref="T:System.ArgumentNullException">在设置操作中，值数组或值数组的其中一个元素为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">在设置操作中，当前的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象是只读的。</exception>
      </Docs>
    </Member>
    <Member MemberName="ShortTimePattern">
      <MemberSignature Language="C#" Value="public string ShortTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShortTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public Property ShortTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ShortTimePattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShortTimePattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.ShortTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置短时间值的自定义格式字符串。</summary>
        <value>短时间值的自定义格式字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>属性定义由对和方法的调用返回的特定于区域性的格式， <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> <xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType> 以及通过提供 "t" 标准格式字符串的复合格式字符串返回的数据字符串。  
  
 建议你将短时间模式中的时间分隔符设置为确切的字符串，而不是使用时间分隔符占位符。 例如，若要获取模式 h-mm-ss，请将短时间模式设置为 "h-mm-ss"。  
  
   
  
## Examples  
 下面的示例显示了几个区域性的的值 <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A> 。  
  
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/CPP/dtfi_shorttimepattern.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/CS/dtfi_shorttimepattern.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/VB/dtfi_shorttimepattern.vb" id="Snippet1":::

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="SortableDateTimePattern">
      <MemberSignature Language="C#" Value="public string SortableDateTimePattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortableDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SortableDateTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SortableDateTimePattern { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SortableDateTimePattern : string" Usage="System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取可排序数据和时间值的自定义格式字符串。</summary>
        <value>可排序的日期和时间值的自定义格式字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>属性定义由对和方法的调用返回的特定于区域性的格式， <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> <xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType> 以及通过提供 "s" 标准格式字符串的复合格式字符串返回的数据字符串。  
  
 属性返回的格式字符串 <xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A> 反映 (ISO 8601) 定义的标准，并且属性是只读的。 因此，它始终是相同的，与区域性无关。 自定义格式字符串为“yyyy'-'MM'-'dd'T'HH':'mm':'ss”。  
  
   
  
## Examples  
 下面的示例显示了几个区域性的的值 <xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A> 。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/CPP/dtfi_sortabledatetimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/CS/dtfi_sortabledatetimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/VB/dtfi_sortabledatetimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" />
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dateTimeFormatInfo.System.Runtime.Serialization.ISerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="info">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
        <param name="context">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。</param>
        <summary>使用序列化目标对象所需的数据填充 SerializationInfo。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeSeparator">
      <MemberSignature Language="C#" Value="public string TimeSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TimeSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TimeSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TimeSeparator : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.TimeSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置分隔时间中各组成部分（即小时、分钟和秒钟）的字符串。</summary>
        <value>分隔时间中各组成部分的字符串。 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> 的默认值为“:”。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果自定义模式包括格式模式 "："，则将在 <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> 格式模式中显示的值，而不是 <xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A> "："。  
  
 时间分隔符派生自 <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A> 属性。 建议你将短时间或长时间模式中的时间分隔符设置为确切的字符串，而不是使用时间分隔符占位符。 例如，若要获取模式 h-p，请将模式设置为 "h-mm-ss"。 这种做法还允许您设置模式，如 "h'h" mm ' ss ' " (3h 36m 12s) ，其中包括多种类型的分隔符。 <xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>属性定义替换时间分隔符的字符串，该字符串在格式设置操作中将 ( "：" 自定义日期和时间格式说明符) 在结果字符串中。 它还在分析操作中定义时间分隔符字符串。  
  
   
  
## Examples  
 下面的示例实例化 <xref:System.Globalization.CultureInfo> en-us 区域性的对象，将其日期分隔符更改为 "."，并使用 "t"、"t"、"f"、"F"、"g" 和 "g" 标准格式字符串来显示日期。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.TimeSeparator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.timeseparator/cs/timeseparatorex.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.TimeSeparator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.timeseparator/vb/timeseparatorex.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="UniversalSortableDateTimePattern">
      <MemberSignature Language="C#" Value="public string UniversalSortableDateTimePattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniversalSortableDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UniversalSortableDateTimePattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UniversalSortableDateTimePattern { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniversalSortableDateTimePattern : string" Usage="System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 ISO 8601 定义的通用的可排序日期和时间字符串的自定义格式字符串。</summary>
        <value>通用的可排序的日期和时间字符串的自定义格式字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>属性定义通过对 <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> 和方法的调用 <xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType> 以及提供了 "u" 标准格式字符串的复合格式字符串返回的日期字符串的格式。 它可用于按可排序的顺序显示日期和时间，并在末尾使用通用时间指示符 "Z"。 格式是可排序的，因为它对年、月、日、小时、分钟和秒使用前导零。 自定义格式字符串 ( "yyyy'-'mm'-'dd't'hh-YYYY'-'MM'-'DD'T'HH-yyyy'-'mm'-'dd HH"： "MM"： "ss'Z" ") 是相同的，无论区域性或格式提供程序如何。  
  
 属性返回的格式字符串 <xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A> 反映了定义的标准，并且属性是只读的。 因此，它始终是相同的，与区域性无关。 自定义格式字符串为“yyyy'-'MM'-'dd HH':'mm':'ss'Z'”。  
  
   
  
## Examples  
 下面的示例显示了几个区域性的的值 <xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A> 。  
  
 :::code language="cpp" source="~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/CPP/dtfi_universalsortabledatetimepattern.cpp" id="Snippet1":::
 :::code language="csharp" source="~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/CS/dtfi_universalsortabledatetimepattern.cs" interactive="try-dotnet" id="Snippet1":::
 :::code language="vb" source="~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/VB/dtfi_universalsortabledatetimepattern.vb" id="Snippet1"::: 
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准 DateTime 格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
    <Member MemberName="YearMonthPattern">
      <MemberSignature Language="C#" Value="public string YearMonthPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string YearMonthPattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property YearMonthPattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ YearMonthPattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.YearMonthPattern : string with get, set" Usage="System.Globalization.DateTimeFormatInfo.YearMonthPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置年份和月份值的自定义格式字符串。</summary>
        <value>年份和月份值的自定义格式字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>属性定义由对和方法的调用返回的特定于区域性的格式， <xref:System.DateTime.ToString%2A?displayProperty=nameWithType> <xref:System.DateTimeOffset.ToString%2A?displayProperty=nameWithType> 以及通过提供 "y" 和 "y" 标准格式字符串的复合格式字符串返回的数据字符串。  
  
 如果属性的值发生更改，则此属性将受到影响 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> 。  
  
 建议你将 "月" 模式的 "日期分隔符" 设置为确切的字符串，而不是使用 "日期分隔符" 占位符。 例如，若要获取模式 MM-yyyy，请将 "月" 模式设置为 "MM-yyyy"。  
  
   
  
## Examples  
 下面的示例显示了几个区域性的的值 <xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A> 。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.YearMonthPattern#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/CPP/dtfi_yearmonthpattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.YearMonthPattern#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/CS/dtfi_yearmonthpattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.YearMonthPattern#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/VB/dtfi_yearmonthpattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">该属性设置为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">设置了该属性，但 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象为只读。</exception>
        <related type="Article" href="/dotnet/standard/base-types/standard-date-and-time-format-strings">标准日期和时间格式字符串</related>
        <related type="Article" href="/dotnet/standard/base-types/custom-date-and-time-format-strings">自定义日期和时间格式字符串</related>
      </Docs>
    </Member>
  </Members>
</Type>
