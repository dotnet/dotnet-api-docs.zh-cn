<Type Name="CultureAndRegionInfoBuilder" FullName="System.Globalization.CultureAndRegionInfoBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3577bb500e0cbfa74d7845a14c2a67a3f79c2aeb" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83961572" /></Metadata><TypeSignature Language="C#" Value="public sealed class CultureAndRegionInfoBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CultureAndRegionInfoBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CultureAndRegionInfoBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CultureAndRegionInfoBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class CultureAndRegionInfoBuilder sealed" />
  <TypeSignature Language="F#" Value="type CultureAndRegionInfoBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>sysglobl</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>定义一个新型或基于其他区域性和国家/地区的自定义区域性。 自定义区域性可以安装在计算机上，然后由运行在该计算机上的任何应用程序使用。 无法继承此类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureInfo> 类保存特定于区域性的信息，如关联的语言、子语言、国家/地区、日历和文化约定。 此类还提供了特定于区域性的 <xref:System.Globalization.DateTimeFormatInfo>、<xref:System.Globalization.NumberFormatInfo>、<xref:System.Globalization.CompareInfo>和 <xref:System.Globalization.TextInfo> 类的实例，这些类特定于区域性特定操作（如大小写、格式化和分析日期和数字）以及比较字符串。  
  
 默认情况下，.NET Framework 支持表示一组预定义的区域性的 <xref:System.Globalization.CultureInfo> 对象。 有关 Windows 系统上提供的这些区域性的列表，请参阅[windows 支持的语言/区域名称列表](https://docs.microsoft.com/openspecs/windows_protocols/ms-lcid/a9eac961-e77d-41a6-90a5-ce1a8b0cdb9c)中的**语言标记**列。 列名遵循 [BCP 47](https://tools.ietf.org/html/bcp47) 定义的标准。 使用 <xref:System.Globalization.CultureAndRegionInfoBuilder> 类，您可以创建一个完全新的或重写预定义区域性的自定义区域性。  当在特定计算机上安装并注册了自定义区域性时，它将无法与预定义的 <xref:System.Globalization.CultureInfo> 对象区分开来，并且可以实例化和使用，就像这些对象一样。  
  
> [!IMPORTANT]
>  请注意，<xref:System.Globalization.CultureAndRegionInfoBuilder> 类在名为 sysglobl 的程序集中找到。 如果成功编译使用此类型的代码，则需要添加对 sysglobl 的引用。  
  
 自定义区域性只能由对该计算机拥有管理权限的用户在计算机上进行注册。 因此，应用通常不会创建和安装自定义区域性。 相反，你可以使用 <xref:System.Globalization.CultureAndRegionInfoBuilder> 类来创建一个特殊用途的工具，管理员可以使用该工具创建、安装和注册自定义区域性。 在计算机上注册自定义区域性后，可以在应用程序中使用 <xref:System.Globalization.CultureInfo> 类来创建自定义区域性的实例，就像针对预定义的区域性所做的一样。  
  
 如果分析为自定义区域性生成的日期和时间字符串，则应使用 <xref:System.DateTime.ParseExact%2A?displayProperty=nameWithType> 或 <xref:System.DateTime.TryParseExact%2A?displayProperty=nameWithType> 方法而不是 <xref:System.DateTime.Parse%2A?displayProperty=nameWithType> 或 <xref:System.DateTime.TryParse%2A?displayProperty=nameWithType> 方法来提高分析操作成功的概率。 自定义区域性的日期和时间字符串可能比较复杂，因此难以分析。 <xref:System.DateTime.Parse%2A> 和 <xref:System.DateTime.TryParse%2A> 方法尝试使用几个隐式分析模式分析字符串，所有这些模式都可能失败。 与此相反，<xref:System.DateTime.TryParseExact%2A> 方法要求应用程序显式指定一个或多个可能成功的准确分析模式。  
  
## <a name="defining-and-creating-a-custom-culture"></a>定义和创建自定义区域性  
 使用 <xref:System.Globalization.CultureAndRegionInfoBuilder> 类定义和命名自定义区域性。 自定义区域性可以是全新的区域性、基于现有区域性的新区域性（即补充区域性）或替换现有 .NET Framework 区域性的区域性。 在每种情况下，基本步骤都是相同的：  
  
1.  通过调用 <xref:System.Globalization.CultureAndRegionInfoBuilder> 对象的 <xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%28System.String%2CSystem.Globalization.CultureAndRegionModifiers%29> 构造函数来实例化该对象。 若要替换现有的区域性，请将该区域性的名称和 <xref:System.Globalization.CultureAndRegionModifiers.Replacement?displayProperty=nameWithType> 枚举值传递到构造函数。 若要创建新的区域性或补充区域性，请传递唯一的区域性名称以及 <xref:System.Globalization.CultureAndRegionModifiers.Neutral?displayProperty=nameWithType> 或 <xref:System.Globalization.CultureAndRegionModifiers.None?displayProperty=nameWithType> 枚举值。  
  
    > [!NOTE]
    >  如果使用 <xref:System.Globalization.CultureAndRegionModifiers.Replacement?displayProperty=nameWithType> 枚举值来实例化 <xref:System.Globalization.CultureAndRegionInfoBuilder> 对象，则 <xref:System.Globalization.CultureAndRegionInfoBuilder> 对象的属性将自动用要替换的 <xref:System.Globalization.CultureInfo> 对象的值填充。  
  
2.  如果要创建新的或补充的区域性：  
  
    -   通过调用 <xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromCultureInfo%2A> 方法并传递其属性值类似于你的新对象的 <xref:System.Globalization.CultureInfo> 对象，来填充 <xref:System.Globalization.CultureAndRegionInfoBuilder> 对象的属性。  
  
    -   通过调用 <xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromRegionInfo%2A> 方法并传递表示自定义区域性区域的 <xref:System.Globalization.RegionInfo> 对象，来填充 <xref:System.Globalization.CultureAndRegionInfoBuilder> 对象的区域属性。  
  
3.  根据需要修改 <xref:System.Globalization.CultureAndRegionInfoBuilder> 对象的属性。  
  
4.  如果打算在单独的例程中注册自定义区域性，请调用 <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> 方法。 这会生成一个 XML 文件，你可以在单独的自定义区域性安装例程中加载和注册该文件。  
  
## <a name="registering-a-custom-culture"></a>注册自定义区域性  
 如果你正在开发的自定义区域性的注册应用程序与创建区域性的应用程序不同，则调用 <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> 方法加载包含自定义区域性定义的 XML 文件，并实例化 <xref:System.Globalization.CultureAndRegionInfoBuilder> 对象。 若要处理注册，请调用 <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> 方法。 若要成功注册，注册自定义区域性的应用程序必须在目标系统上以管理权限运行;否则，对 <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> 的调用将引发 <xref:System.UnauthorizedAccessException> 异常。  
  
> [!WARNING]
>  系统之间的区域性数据可能不同。 如果使用 <xref:System.Globalization.CultureAndRegionInfoBuilder> 类创建在多个系统之间统一的自定义区域性，并通过从现有的 <xref:System.Globalization.CultureInfo> 和 <xref:System.Globalization.RegionInfo> 对象加载数据并对其进行自定义来创建自定义区域性，则应开发两个不同的实用程序。 首先创建自定义区域性，并将其保存到 XML 文件中。 第二种方法使用 <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> 方法从 XML 文件加载自定义区域性，并将其注册到目标计算机上。  
  
 注册过程将执行以下任务：  
  
-   创建一个 nlp 文件，其中包含在 <xref:System.Globalization.CultureAndRegionInfoBuilder> 对象中定义的信息。  
  
-   将 nlp 文件存储在目标计算机上的%windir%\Globalization 系统目录中。 这使自定义区域性的设置可以在会话之间保持。 （<xref:System.Globalization.CultureAndRegionInfoBuilder> 方法需要管理权限，因为 nlp 文件存储在系统目录中。）  
  
-   准备 .NET Framework 以便在下次请求创建新的自定义区域性时搜索%windir%\Globalization 系统目录而不是内部缓存。  
  
 成功注册自定义区域性后，它无法与 .NET Framework 预定义的区域性区分开来。 自定义区域性可用，直到调用 <xref:System.Globalization.CultureAndRegionInfoBuilder> 方法从本地计算机删除 nlp 文件。  
  
## <a name="instantiating-a-custom-culture"></a>实例化自定义区域性  
 可以通过以下方式之一创建自定义区域性的实例：  
  
-   通过使用区域性名称调用 <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=nameWithType> 构造函数。  
  
-   通过使用区域性名称调用 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> 方法。  
  
-   通过使用区域性名称调用 <xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=nameWithType> 方法。  
  
 此外，<xref:System.Globalization.CultureInfo.GetCultures%2A?displayProperty=nameWithType> 方法返回 <xref:System.Globalization.CultureInfo> 对象的数组包括自定义区域性。  
  
   
  
## Examples  
 下面的示例定义了一个自定义 ru 区域性，它表示美国中的俄文语言。 该示例通过从俄语（俄罗斯） <xref:System.Globalization.CultureInfo> 对象和美国 <xref:System.Globalization.RegionInfo> 对象加载设置来定义自定义区域性，然后设置多个 <xref:System.Globalization.CultureAndRegionInfoBuilder> 属性。 该示例将注册自定义区域性，然后将其实例化，并使其成为当前线程的区域性。  
  
 [!code-csharp[System.Globalization.CultureAndRegionInfoBuilder.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.cultureandregioninfobuilder.class/cs/car.cs#1)]
 [!code-vb[System.Globalization.CultureAndRegionInfoBuilder.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.cultureandregioninfobuilder.class/vb/car.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CultureAndRegionInfoBuilder (string cultureName, System.Globalization.CultureAndRegionModifiers flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string cultureName, valuetype System.Globalization.CultureAndRegionModifiers flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.#ctor(System.String,System.Globalization.CultureAndRegionModifiers)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (cultureName As String, flags As CultureAndRegionModifiers)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CultureAndRegionInfoBuilder(System::String ^ cultureName, System::Globalization::CultureAndRegionModifiers flags);" />
      <MemberSignature Language="F#" Value="new System.Globalization.CultureAndRegionInfoBuilder : string * System.Globalization.CultureAndRegionModifiers -&gt; System.Globalization.CultureAndRegionInfoBuilder" Usage="new System.Globalization.CultureAndRegionInfoBuilder (cultureName, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
        <Parameter Name="flags" Type="System.Globalization.CultureAndRegionModifiers" />
      </Parameters>
      <Docs>
        <param name="cultureName">区域性的名称。</param>
        <param name="flags">一个 <see cref="T:System.Globalization.CultureAndRegionModifiers" /> 值，指定新的 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象是非特定区域性、新区域性，还是要替换现有的区域性和国家/地区。</param>
        <summary>初始化 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `cultureName` 参数指定新 <xref:System.Globalization.CultureAndRegionInfoBuilder> 对象的名称。  
  
 `flags` 参数用于指定新的 <xref:System.Globalization.CultureAndRegionInfoBuilder> 对象是新的自定义区域性，还是替换现有的非特定区域性、特定区域性或 Windows 区域设置的 <xref:System.Globalization.CultureAndRegionModifiers> 值。  
  
 如果 `cultureName` 参数指定了现有的 .NET Framework 区域性、已注册的自定义区域性或从 Windows 区域设置生成的区域性，则 <xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%2A> 构造函数将使用区域性和国家/地区信息自动填充新的 <xref:System.Globalization.CultureAndRegionInfoBuilder> 对象。  
  
 通过调用 <xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromCultureInfo%2A> 和 <xref:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromRegionInfo%2A> 方法，使用区域性和国家/地区信息填充新的 <xref:System.Globalization.CultureAndRegionInfoBuilder> 对象。  
  
## <a name="custom-culture-names"></a>自定义区域性名称  
 新的自定义区域性的 `cultureName` 参数的首选格式为 "[`prefix`-]`language`[-`region`] [-`suffix`[`…`]]"，其中 `language` 组件是必需的，`prefix`、`region`和 `suffix` 组件都是可选的。 每个组件的最大长度为8个字符，整个 `cultureName` 参数的最大长度为84个字符。  
  
 `prefix` 组件是 Internet 号码分配机构（IANA）标识。 为注册到 IANA 的区域性名称指定 "i-" 或 "I-"; 对于专用用途，请指定 "x-" 或 "X-"。 否则，不需要前缀。 有关详细信息，请参阅 RFC 4646 "用于识别语言的标记"。  
  
 `cultureName` 参数的 `language` 组件指定派生自 ISO 639-1 的小写双字母代码，`region` 指定派生自 ISO 3166 的双字母双字母代码。 例如，en-us 代表美国中所说的英语。 缺少 `region` 组件表示非特定区域性。  
  
 与包含在 .NET Framework 中的区域性名称相同的 `cultureName` 表示替换（重写）区域性。 可分配给替换区域性的属性的值会受到限制。 有关此类限制的详细信息，请参阅每个属性的例外情况。  
  
 应用程序使用 `suffix` 组件来区分类似的文化。 例如，两家公司（ABC 和 XYZ）创建并共享新的 ASP.NET Web 服务，以便在世界各地的不同市场推广其产品。 服务的网页显示每个公司的区域徽标和本地电话号码等信息，具体取决于用户的文化。 每个网页的区域性特定内容位于由区域性名称标识并按公司名称限定的单独资源文件中。  例如，en-us 和 ja-jp 区域性的资源文件命名为 "en-us-ABC，en-us-XYZ，ja-日本-ABC，和 ja-jp-XYZ"。 "ABC" 和 "XYZ" 后缀使 Web 服务可以使用相同的应用程序逻辑来显示不同的市场特定信息。  
  
 `suffix` 组件可以由子组件组成，其中每个子组件由连字符分隔，每个子组件的最大长度为8个字符。 例如，如果 "en-us-honda" 是 `cultureName` 参数，则 "-honda" 是 `suffix` 组件。  
  
   
  
## Examples  
 下面的代码示例创建一个具有私有使用前缀的自定义区域性，并列出它的一组属性。 第一个属性列出区域性的名称。  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="cultureName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="cultureName" /> 为空字符串 ("")。  
  
- 或 - 
 <paramref name="cultureName" /> 包含除“0”到“9”、“a”到“z”、“A”到“Z”、连字符 (-) 或下划线 (_) 以外的字符。  
  
- 或 - 
 <paramref name="cultureName" /> 包含用于分隔各个部分的连字符 (-)，但是缺少 <paramref name="prefix" />、<paramref name="language" />、<paramref name="region" /> 或 <paramref name="suffix" /> 这些部分中的一个或多个。 即，两个或更多的连字符是相邻的。  
  
- 或 - 
 <paramref name="cultureName" /> 的长度超过 84 个字符。  
  
- 或 - 
 <paramref name="cultureName" /> 包含用于分隔各个部分的连字符，但是有一个或多个部分的长度超过 8 个字符。  
  
- 或 - 
 <paramref name="cultureName" /> 包含前导或末尾连字符 (-) 或下划线 (_)。  
  
- 或 - 
 <paramref name="cultureName" /> 指定其他排序替换区域性而不是 .NET Framework 区域性。 例如，<paramref name="culturenName" /> 是“de-de_phoneb”（按照德语电话簿中的显示顺序对字符串排序的区域性）而不是德语（德国）区域性“de-DE”。  
  
- 或 - 
 <paramref name="flags" /> 包含无效的 <see cref="T:System.Globalization.CultureAndRegionModifiers" /> 值组合。  
  
- 或 - 
 <paramref name="flags" /> 包含 <see cref="F:System.Globalization.CultureAndRegionModifiers.Replacement" /> 或 <see cref="F:System.Globalization.CultureAndRegionModifiers.Neutral" />，而且没有找到 <paramref name="cultureName" /> 指定的区域性。  
  
- 或 - 
 <paramref name="flags" /> 包含 <see cref="F:System.Globalization.CultureAndRegionModifiers.Replacement" />，而 <paramref name="cultureName" /> 指定的由用户创建的自定义区域性没有替换 .NET Framework 附带的区域性。  
  
- 或 - 
 <paramref name="flags" /> 包含 <see cref="F:System.Globalization.CultureAndRegionModifiers.Neutral" />，而 <paramref name="cultureName" /> 指定的区域性不是非特定区域性。  
  
- 或 - 
 <paramref name="flags" /> 包含 <see cref="F:System.Globalization.CultureAndRegionModifiers.Neutral" />，而 <paramref name="cultureName" /> 指定的由用户创建的自定义区域性替换了 .NET Framework 附带的特定区域性。</exception>
        <altmember cref="T:System.Globalization.CultureTypes" />
        <altmember cref="T:System.Globalization.CultureAndRegionModifiers" />
      </Docs>
    </Member>
    <Member MemberName="AvailableCalendars">
      <MemberSignature Language="C#" Value="public System.Globalization.Calendar[] AvailableCalendars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar[] AvailableCalendars" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars" />
      <MemberSignature Language="VB.NET" Value="Public Property AvailableCalendars As Calendar()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Globalization::Calendar ^&gt; ^ AvailableCalendars { cli::array &lt;System::Globalization::Calendar ^&gt; ^ get(); void set(cli::array &lt;System::Globalization::Calendar ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AvailableCalendars : System.Globalization.Calendar[] with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象支持的日历数组。</summary>
        <value>一个日历数组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars%2A> 属性对应于 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> 属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在设置操作中，指定的数组为 <see langword="null" />，或已指定数组的某个元素为 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">非特定区域性不支持此属性。  
  
- 或 - 
在设置操作中，指定的数组包含 <see cref="T:System.Globalization.PersianCalendar" />、<see cref="T:System.Globalization.TaiwanLunisolarCalendar" />、<see cref="T:System.Globalization.KoreanLunisolarCalendar" />、<see cref="T:System.Globalization.JapaneseLunisolarCalendar" />、<see cref="T:System.Globalization.ChineseLunisolarCalendar" /> 或 <see cref="T:System.Globalization.JulianCalendar" />。  
  
- 或 - 
在设置操作中，指定的数组包含一个自定义日历。</exception>
        <altmember cref="P:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="CompareInfo">
      <MemberSignature Language="C#" Value="public System.Globalization.CompareInfo CompareInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CompareInfo CompareInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property CompareInfo As CompareInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CompareInfo ^ CompareInfo { System::Globalization::CompareInfo ^ get(); void set(System::Globalization::CompareInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompareInfo : System.Globalization.CompareInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用来定义如何根据区域性比较字符串的 <see cref="T:System.Globalization.CompareInfo" /> 对象。</summary>
        <value>用来定义如何根据区域性比较字符串的 <see cref="T:System.Globalization.CompareInfo" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo%2A?displayProperty=nameWithType> 属性对应于 <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=nameWithType> 属性。  
  
 分配给 <xref:System.Globalization.CultureAndRegionInfoBuilder.TextInfo%2A> 和 <xref:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo%2A> 属性的 <xref:System.Globalization.TextInfo> 和 <xref:System.Globalization.CompareInfo> 对象都支持区分区域性和区分大小写的字符串比较。 <xref:System.Globalization.CompareInfo> 对象还包含一些方法，其中包括支持区分区域性、不区分大小写的 <xref:System.Globalization.CompareOptions> 参数。 应将这两个属性分配 <xref:System.Globalization.TextInfo>，并 <xref:System.Globalization.CompareInfo> 表示相同区域设置的对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在设置操作中，指定的值为 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">此自定义区域性是对内置区域性的重写。</exception>
        <altmember cref="P:System.Globalization.CultureAndRegionInfoBuilder.TextInfo" />
      </Docs>
    </Member>
    <Member MemberName="ConsoleFallbackUICulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo ConsoleFallbackUICulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo ConsoleFallbackUICulture" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture" />
      <MemberSignature Language="VB.NET" Value="Public Property ConsoleFallbackUICulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ ConsoleFallbackUICulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ConsoleFallbackUICulture : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当默认图形用户界面区域性不合适时，获取或设置一个适合控制台应用程序的替换用户界面区域性。</summary>
        <value>用于在控制台上读取和显示文本的备用区域性。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 get 操作中，<xref:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture%2A> 属性对应于 <xref:System.Globalization.CultureInfo.GetConsoleFallbackUICulture%2A> 方法。 在设置操作中指定 `null`，以指示当前 <xref:System.Globalization.CultureAndRegionInfoBuilder> 对象定义的区域性是备用用户界面区域性。 如果尝试将属性设置为本身具有不同控制台回退 UI 区域性的区域性，则会为其分配最终的 "叶" 区域性。  
  
 阿拉伯语、希伯来语、波斯语、乌尔都语和叙利亚语基于双向文本。 使用图形用户界面的 Windows 应用程序支持双向语言。 但是，使用操作系统控制台的文本用户界面的控制台应用程序不提供双向支持。 因此，如果控制台应用程序本地化为阿拉伯语或希伯来语，则它会在控制台屏幕上显示无法读取的文本。  
  
 用户界面区域性指定应用程序支持用户输入和输出所需的资源，默认情况下，它与操作系统区域性相同。 例如，<xref:System.Globalization.CultureInfo.CurrentUICulture%2A> 属性返回阿拉伯语操作系统的阿拉伯语区域性。 应用程序应使用 <xref:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture%2A> 属性来检索适用于控制台应用程序用户界面的非特定区域性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在指定区域性不为 <see langword="null" /> 的 Set 操作中，指定区域性的 <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ConsoleFallbackUICulture" /> 属性与指定区域性不同。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromLdml">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureAndRegionInfoBuilder CreateFromLdml (string xmlFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CultureAndRegionInfoBuilder CreateFromLdml(string xmlFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromLdml (xmlFileName As String) As CultureAndRegionInfoBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Globalization::CultureAndRegionInfoBuilder ^ CreateFromLdml(System::String ^ xmlFileName);" />
      <MemberSignature Language="F#" Value="static member CreateFromLdml : string -&gt; System.Globalization.CultureAndRegionInfoBuilder" Usage="System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml xmlFileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureAndRegionInfoBuilder</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmlFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xmlFileName">一个包含 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象的 XML 表示形式的文件名。</param>
        <summary>用一个包含对象表示形式的指定 XML 文件重构 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象。</summary>
        <returns>等效于 <paramref name="xmlFileName" /> 参数中存储的信息的新对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `xmlFileName` 参数指定包含 <xref:System.Globalization.CultureAndRegionInfoBuilder> 对象的 XML 表示形式的文件名。 XML 文件的格式称为区域设置数据标记语言（LDML）版本1.1。 使用 `xmlFileName`中的数据创建并初始化新的 <xref:System.Globalization.CultureAndRegionInfoBuilder> 对象。 <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> 方法执行 <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> 方法的反向操作。  
  
 在 LDML 文件中，将区域性的属性指定为 `<identity>` 部分中 `<special>` 元素的子元素。 属性值通常由元素的 `type` 属性指定。 例如，LDML 文件中的以下摘录将区域性的父级定义为英语非特定区域性。  
  
```xml  
<identity>  
   <version number="1.1">ldml version 1.1</version>  
   <generation date="2012-05-16" />  
   <special xmlns:msLocale="http://schemas.microsoft.com/globalization/2004/08/carib/ldml">  
      <!-content removed -->  
      <msLocale:parentName type="en" />  
      <!-content removed -->  
   </special>  
</identity>  
```  
  
 有关 LDML 标准的详细信息，请参阅 Unicode 联合会网站上的[Unicode 技术标准 #35 "区域设置数据标记语言（LDML）"](https://go.microsoft.com/fwlink/p/?LinkId=252840) 。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> 和 <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> 方法。  
  
 [!code-csharp[sys.glob.carib.saveLdml#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.saveLdml/cs/sl.cs#1)]
 [!code-vb[sys.glob.carib.saveLdml#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.saveLdml/vb/sl.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="xmlFileName" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="xmlFileName" /> 是一个空字符串 ("") 或者是无效的文件或路径名。</exception>
        <exception cref="T:System.Xml.XmlException"><paramref name="xmlFileName" /> 中的数据不是有效的 XML 格式。  
  
- 或 - 
在访问 <paramref name="xmlFileName" /> 时发生 I/O 错误。</exception>
        <exception cref="T:System.Xml.Schema.XmlSchemaValidationException"><paramref name="xmlFileName" /> 中的数据不是有效的 LDML 格式。</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.Save(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CultureEnglishName">
      <MemberSignature Language="C#" Value="public string CultureEnglishName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CultureEnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Property CultureEnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CultureEnglishName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CultureEnglishName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置英文的区域性名称。</summary>
        <value>英文的区域性名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName%2A> 属性对应于 <xref:System.Globalization.CultureInfo.EnglishName%2A> 属性。  
  
 例如，在美国中口述的特定区域性英语 <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName%2A> 属性的返回值为 "英语（美国）"。  
  
 此属性的值相同，无论 .NET Framework 的语言版本。  
  
   
  
## Examples  
 下面的代码示例创建一个具有私有使用前缀的自定义区域性，并列出它的一组属性。 第一个属性列出区域性的名称。  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，该值的长度超出 0 至 79 个字符的范围。</exception>
      </Docs>
    </Member>
    <Member MemberName="CultureName">
      <MemberSignature Language="C#" Value="public string CultureName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CultureName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CultureName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureName : string" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取所创建区域性的名称。</summary>
        <value>当前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象的区域性名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回值是 <xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%2A> 构造函数中指定的区域性的名称。 如果指定的区域性名称与现有区域性的名称相同（例如，case 除外），则返回值为现有区域性的名称，而不是指定的区域性名称。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureName%2A> 属性对应于 <xref:System.Globalization.CultureInfo.Name%2A> 属性。  
  
   
  
## Examples  
 下面的代码示例创建一个具有私有使用前缀的自定义区域性，并列出它的一组属性。 第一个属性列出区域性的名称。  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CultureNativeName">
      <MemberSignature Language="C#" Value="public string CultureNativeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CultureNativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName" />
      <MemberSignature Language="VB.NET" Value="Public Property CultureNativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CultureNativeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CultureNativeName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>按照区域性设置显示的格式和语言获取或设置区域性名称。</summary>
        <value>使用区域性设置显示的格式和语言的区域性名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName%2A> 属性对应于 <xref:System.Globalization.CultureInfo.NativeName%2A> 属性。  
  
 此属性的值相同，无论 .NET Framework 的语言版本。  
  
 如果系统未设置为正确显示区域性的语言，则区域性的全名可能无法正确显示。 例如，如果 <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureName%2A> 属性为日语（日本）的 "ja-jp"，则 <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName%2A> 属性在设置为 "仅英语" 的系统上无法正确显示。 不过，多语言操作系统（如 Windows 2000）会正确显示 <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName%2A> 属性。  
  
   
  
## Examples  
 下面的代码示例创建一个具有私有使用前缀的自定义区域性，并列出它的一组属性。 第一个属性列出区域性的名称。  
  
 [!code-cpp[sys.glob.carib1#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.carib1/CPP/carib.cpp#1)]
 [!code-csharp[sys.glob.carib1#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib1/CS/carib.cs#1)]
 [!code-vb[sys.glob.carib1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib1/VB/carib.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，该值的长度超出 0 至 79 个字符的范围。</exception>
      </Docs>
    </Member>
    <Member MemberName="CultureTypes">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureTypes CultureTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CultureTypes CultureTypes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CultureTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CultureTypes As CultureTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureTypes CultureTypes { System::Globalization::CultureTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.CultureTypes : System.Globalization.CultureTypes" Usage="System.Globalization.CultureAndRegionInfoBuilder.CultureTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Globalization.CultureTypes" /> 值，该值描述了由当前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象表示的区域性。</summary>
        <value><see cref="T:System.Globalization.CultureTypes" /> 值之一。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Globalization.CultureTypes" />
        <altmember cref="P:System.Globalization.CultureInfo.CultureTypes" />
        <altmember cref="M:System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes)" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyEnglishName">
      <MemberSignature Language="C#" Value="public string CurrencyEnglishName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyEnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyEnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyEnglishName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyEnglishName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置由当前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象表示的国家/地区中所用货币的英文名称。</summary>
        <value>区域中使用的货币的英文名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName%2A> 属性等效于 <xref:System.Globalization.RegionInfo.CurrencyEnglishName%2A> 属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">设置操作中的值为空字符串 ("")。</exception>
        <exception cref="T:System.NotSupportedException">当前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象为非特定区域性。</exception>
      </Docs>
    </Member>
    <Member MemberName="CurrencyNativeName">
      <MemberSignature Language="C#" Value="public string CurrencyNativeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyNativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName" />
      <MemberSignature Language="VB.NET" Value="Public Property CurrencyNativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrencyNativeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrencyNativeName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置由当前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象表示的国家/地区中所用货币的本地名称。</summary>
        <value>由当前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象表示的国家/地区中所用货币的名称，其格式由与该地区的 ISO 3166 国家/地区代码关联的语言进行设置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName%2A> 属性等效于 <xref:System.Globalization.RegionInfo.CurrencyNativeName%2A> 属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">设置操作中的值为空字符串 ("")。</exception>
        <exception cref="T:System.NotSupportedException">当前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象为非特定区域性。</exception>
      </Docs>
    </Member>
    <Member MemberName="GeoId">
      <MemberSignature Language="C#" Value="public int GeoId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 GeoId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.GeoId" />
      <MemberSignature Language="VB.NET" Value="Public Property GeoId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int GeoId { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.GeoId : int with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.GeoId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置地理区域、国家/地区、城市或位置的唯一标识号。</summary>
        <value>一个唯一标识地理位置的 32 位有符号数字。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.GeoId%2A> 属性对应于 <xref:System.Globalization.RegionInfo.GeoId%2A> 属性。  
  
 应用程序应使用 <xref:System.Globalization.CultureAndRegionInfoBuilder.GeoId%2A> 属性向客户提供区域性特定的服务。 例如，<xref:System.Globalization.CultureAndRegionInfoBuilder.GeoId%2A> 属性可用作访问包含有关区域的特定信息的数据库记录的键。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">当前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象定义了一个非特定区域性。</exception>
      </Docs>
    </Member>
    <Member MemberName="GregorianDateTimeFormat">
      <MemberSignature Language="C#" Value="public System.Globalization.DateTimeFormatInfo GregorianDateTimeFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.DateTimeFormatInfo GregorianDateTimeFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property GregorianDateTimeFormat As DateTimeFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::DateTimeFormatInfo ^ GregorianDateTimeFormat { System::Globalization::DateTimeFormatInfo ^ get(); void set(System::Globalization::DateTimeFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GregorianDateTimeFormat : System.Globalization.DateTimeFormatInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置根据公历定义日期和时间格式的 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</summary>
        <value>一个 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个区域性（包括由当前 <xref:System.Globalization.CultureAndRegionInfoBuilder> 对象定义的区域性）都包含与 <xref:System.Globalization.DateTimeFormatInfo> 对象关联的本地化公历日历。 <xref:System.Globalization.DateTimeFormatInfo> 对象定义应用程序显示日期和时间的方式。 <xref:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat%2A> 属性值是与 <xref:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars%2A> 属性返回的第一个本地化公历 <xref:System.Globalization.DateTimeFormatInfo> 关联的对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，值的属性返回了无效的属性值。</exception>
        <exception cref="T:System.NotSupportedException">当前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象为非特定区域性。</exception>
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置根据 RFC 4646 标准“Tags for the Identification of Languages”（语言标识标记）进行格式化的区域性名称。</summary>
        <value>根据 RFC 4646 格式化的区域性名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.IetfLanguageTag%2A> 属性获取或设置根据 RFC 4646 进行格式化的区域性名称，这些名称可以与 <xref:System.Globalization.CultureInfo.Name%2A> 属性返回的区域性名称不同。 例如，在 .NET Framework 版本1.0 中，繁体中文的非特定区域性名称为 "zh-chs-CHT"。 与此相反，RFC 4646 将该区域性名称定义为 "zh-chs-ZH-HANT"。 （请注意，在 .NET Framework 版本4中，"zh-chs-CHT" 的显示名称为 "中文（繁体）旧版"。）  
  
 RFC 4646 区域性名称由多个组件组成。 典型的区域性名称由必需的语言标识符、可选脚本标识符和可选的国家/地区标识符组成。 例如，塞尔维亚语、西里尔语脚本和塞尔维亚地区的有效 RFC 4646 区域性名称为 "Cyrl-RS"。  
  
 请注意，两个或多个区域性可以具有相同的 IETF 语言标记。  
  
 有关详细信息，请参阅 RFC 4646 ["用于识别](https://go.microsoft.com/fwlink/?linkid=45286)语言的标记"。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">在集运算中，值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，值的长度不在 1 到 84 个字符的范围内。</exception>
        <exception cref="T:System.ArgumentException">在设置操作中，值中所指定名称的某个部分为空或长度超过 8 个字符，或者不是字母、数字或连字符 (-)，亦或名称中包含一个前导或尾部连字符。</exception>
        <altmember cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsMetric">
      <MemberSignature Language="C#" Value="public bool IsMetric { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMetric" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.IsMetric" />
      <MemberSignature Language="VB.NET" Value="Public Property IsMetric As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMetric { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsMetric : bool with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.IsMetric" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示国家/地区是否使用公制度量单位。</summary>
        <value>如果该国家/地区使用公制进行度量，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">此操作对非特定区域性无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="ISOCurrencySymbol">
      <MemberSignature Language="C#" Value="public string ISOCurrencySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ISOCurrencySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol" />
      <MemberSignature Language="VB.NET" Value="Public Property ISOCurrencySymbol As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ISOCurrencySymbol { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ISOCurrencySymbol : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与国家/地区关联的由三个字符组成的 ISO 4217 货币符号。</summary>
        <value>与国家/地区关联的由三个字符组成的 ISO 4217 货币符号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol%2A> 属性对应于 <xref:System.Globalization.RegionInfo.ISOCurrencySymbol%2A> 属性。  
  
 <xref:System.Globalization.RegionInfo> 类主题中提供了包含三个字符的 ISO 4217 货币符号的列表。 例如，美国美元的 ISO 4217 货币符号为 "USD"。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">这是一个非特定区域性。</exception>
        <exception cref="T:System.ArgumentNullException">在集运算中，值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，值的长度不在 0 到 8 个字符的范围内。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsRightToLeft">
      <MemberSignature Language="C#" Value="public bool IsRightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.IsRightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Property IsRightToLeft As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRightToLeft { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsRightToLeft : bool with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.IsRightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与当前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象关联的书写体系中文本行的主导方向。</summary>
        <value>如果当前书写体系中文本行的主导方向是从右到左，则为 <see langword="true" />，否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 应用程序使用 <xref:System.Globalization.CultureAndRegionInfoBuilder.IsRightToLeft%2A> 属性来确定控件（如图形用户界面中的按钮和滚动条）的相对位置。  
  
 若要访问从当前 <xref:System.Globalization.CultureAndRegionInfoBuilder> 对象创建的自定义区域性中的主导文本方向，应用程序应使用自定义区域性的 <xref:System.Globalization.CultureInfo.TextInfo%2A> 属性返回的对象的 <xref:System.Globalization.TextInfo.IsRightToLeft%2A> 属性。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyboardLayoutId">
      <MemberSignature Language="C#" Value="public int KeyboardLayoutId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyboardLayoutId" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.KeyboardLayoutId" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyboardLayoutId As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int KeyboardLayoutId { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.KeyboardLayoutId : int with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.KeyboardLayoutId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置活动的输入区域设置标识符。</summary>
        <value>一个指定输入区域设置标识符的 32 位的有符号数字。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.KeyboardLayoutId%2A> 属性对应于 <xref:System.Globalization.CultureInfo.KeyboardLayoutId%2A> 属性。  
  
 输入法区域设置标识符以前称为键盘布局。 标识符可用于语音到文本转换器、输入法编辑器（IME）或任何其他形式的输入。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，值为零。</exception>
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.LCID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LCID As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LCID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LCID : int" Usage="System.Globalization.CultureAndRegionInfoBuilder.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象的区域性标识符。</summary>
        <value>当前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象的区域性标识符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.LCID%2A?displayProperty=nameWithType> 属性对应于 <xref:System.Globalization.CultureInfo.LCID%2A?displayProperty=nameWithType> 属性。  
  
 对于替换区域性，区域性标识符将映射到相应的区域语言支持（NLS）区域设置标识符。 对于用户定义的自定义区域性，此属性的值始终为十六进制0x1000。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadDataFromCultureInfo">
      <MemberSignature Language="C#" Value="public void LoadDataFromCultureInfo (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadDataFromCultureInfo(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromCultureInfo(System.Globalization.CultureInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadDataFromCultureInfo (culture As CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadDataFromCultureInfo(System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="member this.LoadDataFromCultureInfo : System.Globalization.CultureInfo -&gt; unit" Usage="cultureAndRegionInfoBuilder.LoadDataFromCultureInfo culture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">其属性将被使用的对象。</param>
        <summary>用指定 <see cref="T:System.Globalization.CultureInfo" /> 对象的相应属性设置当前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象的属性。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="culture" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadDataFromRegionInfo">
      <MemberSignature Language="C#" Value="public void LoadDataFromRegionInfo (System.Globalization.RegionInfo region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadDataFromRegionInfo(class System.Globalization.RegionInfo region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.LoadDataFromRegionInfo(System.Globalization.RegionInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadDataFromRegionInfo (region As RegionInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadDataFromRegionInfo(System::Globalization::RegionInfo ^ region);" />
      <MemberSignature Language="F#" Value="member this.LoadDataFromRegionInfo : System.Globalization.RegionInfo -&gt; unit" Usage="cultureAndRegionInfoBuilder.LoadDataFromRegionInfo region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Globalization.RegionInfo" />
      </Parameters>
      <Docs>
        <param name="region">其属性将被使用的对象。</param>
        <summary>用指定 <see cref="T:System.Globalization.RegionInfo" /> 对象的相应属性设置当前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象的属性。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="region" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">无法设置国家/地区信息，原因是当前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象指定了一个非特定区域性。</exception>
      </Docs>
    </Member>
    <Member MemberName="NumberFormat">
      <MemberSignature Language="C#" Value="public System.Globalization.NumberFormatInfo NumberFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.NumberFormatInfo NumberFormat" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property NumberFormat As NumberFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::NumberFormatInfo ^ NumberFormat { System::Globalization::NumberFormatInfo ^ get(); void set(System::Globalization::NumberFormatInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NumberFormat : System.Globalization.NumberFormatInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.NumberFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个 <see cref="T:System.Globalization.NumberFormatInfo" /> 对象，它定义相应于区域性的数字、货币和百分比显示格式。</summary>
        <value>一个 <see cref="T:System.Globalization.NumberFormatInfo" />，它定义相应于区域性的数字、货币和百分比显示格式。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat%2A> 属性对应于 <xref:System.Globalization.CultureInfo.NumberFormat%2A> 属性。  
  
 应用程序仅应为特定区域性调用此属性。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat%2A> 的 <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>、<xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>、<xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>和 <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A> 属性将被忽略。 区域性的已保存窗体不会保存这些属性的显式值。 相反，当加载区域性时，它们始终默认为分别 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>、<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>、<xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>和 <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" />。</exception>
        <exception cref="T:System.NotSupportedException">此操作对非特定区域性无效。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">此区域性针对数字、货币或百分比属性的规范包含太多的数字或超出范围。</exception>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Parent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Parent" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Property Parent As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Parent { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Globalization.CultureInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置表示当前自定义区域性的父区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</summary>
        <value>表示当前自定义区域性的父区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 区域性具有层次结构。 对于预定义的区域性，特定区域性的父区域性为非特定区域性，非特定区域性的父级为 <xref:System.Globalization.CultureInfo.InvariantCulture%2A>。 父区域性只包含其子级中通用的一组信息。  
  
 通常建议自定义区域性符合此层次结构。 但是，默认情况下，自定义区域性的 <xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A> 是它所基于的区域性的 <xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A>。 如果应用程序创建一个基于 "en-us" <xref:System.Globalization.CultureAndRegionInfoBuilder.CultureName%2A> "MyCulture" 的区域性，则其父级为 "en"，因为这是 "en-us" 的 <xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A>。 如果应用程序使用 "en-us" 作为新的自定义区域性的 <xref:System.Globalization.CultureAndRegionInfoBuilder.Parent%2A>，则必须显式设置此值。  
  
 如果特定区域性的资源在系统中不可用，则使用非特定区域性的资源。 如果非特定区域性的资源不可用，则将使用嵌入到主程序集中的资源。 有关资源回退进程的详细信息，请参阅[打包和部署资源](/dotnet/framework/resources/packaging-and-deploying-resources-in-desktop-apps)。  
  
 Windows API 中的区域性列表与 .NET Framework 中的区域性列表略有不同。 如果需要与 Windows 之间的互操作性，例如通过平台调用机制，应用程序应使用 .NET Framework 中定义的特定区域性。 这可确保与等效的 Windows 区域设置（用相同的 <xref:System.Globalization.CultureInfo.LCID%2A>标识）保持一致。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">在设置操作中，无法找到区域性值。 指定的值可能是已注销的自定义区域性。</exception>
        <exception cref="T:System.ArgumentNullException">在集运算中，值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">在遍历当前区域性的上级区域性的设置操作中，无法在 10 代之内的上级区域性中找到固定区域性。  
  
 - 或 -  
  
 在设置操作中发现一个循环引用：指定的值是当前自定义区域性的父辈。</exception>
      </Docs>
    </Member>
    <Member MemberName="RegionEnglishName">
      <MemberSignature Language="C#" Value="public string RegionEnglishName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RegionEnglishName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName" />
      <MemberSignature Language="VB.NET" Value="Public Property RegionEnglishName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RegionEnglishName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RegionEnglishName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置以英文表示的国家/地区的全名。</summary>
        <value>以英文表示的国家/地区的全名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName%2A> 属性对应于 <xref:System.Globalization.RegionInfo.EnglishName%2A> 属性。  
  
 例如，美国的 <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName%2A> 的返回值为 "美国"。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">此操作对非特定区域性无效。</exception>
        <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，该值的长度超出 0 至 79 个字符的范围。</exception>
      </Docs>
    </Member>
    <Member MemberName="RegionName">
      <MemberSignature Language="C#" Value="public string RegionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.RegionName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RegionName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RegionName : string" Usage="System.Globalization.CultureAndRegionInfoBuilder.RegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象的国家/地区的名称。</summary>
        <value>当前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象的国家/地区的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回值是 <xref:System.Globalization.CultureAndRegionInfoBuilder.%23ctor%2A> 构造函数中指定的区域性的名称。 如果指定的区域性名称与现有区域性的名称相同（例如，case 除外），则返回值为现有区域性的名称，而不是指定的区域性名称。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionName%2A> 属性对应于 <xref:System.Globalization.RegionInfo.Name%2A> 属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">此操作对非特定区域性无效。</exception>
      </Docs>
    </Member>
    <Member MemberName="RegionNativeName">
      <MemberSignature Language="C#" Value="public string RegionNativeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RegionNativeName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName" />
      <MemberSignature Language="VB.NET" Value="Public Property RegionNativeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RegionNativeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RegionNativeName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此自定义区域性的人们所知道的国家/地区的全名。</summary>
        <value>国家/地区的本地名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName%2A> 属性对应于 <xref:System.Globalization.RegionInfo.NativeName%2A> 属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">此操作对非特定区域性无效。</exception>
        <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，该值的长度超出 1 至 79 个字符的范围。</exception>
      </Docs>
    </Member>
    <Member MemberName="Register">
      <MemberSignature Language="C#" Value="public void Register ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Register() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.Register" />
      <MemberSignature Language="VB.NET" Value="Public Sub Register ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Register();" />
      <MemberSignature Language="F#" Value="member this.Register : unit -&gt; unit" Usage="cultureAndRegionInfoBuilder.Register " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将当前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象保持为本地计算机上的一个自定义区域性，并使该区域性可供应用程序使用。 需要管理特权。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> 方法将自定义区域性作为文件存储在本地计算机上，该文件位于 Win32 [GetWindowsDirectory](https://go.microsoft.com/fwlink/?LinkId=191561)函数返回的目录的全球化子目录中。 此过程称为 "注册自定义区域性"。 注册自定义区域性后，可以通过在 <xref:System.Globalization.CultureInfo.%23ctor%2A> 构造函数中指定区域性名称或调用 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=nameWithType> 方法来创建新的自定义区域性。  
  
 可以通过调用 <xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A> 方法来删除自定义区域性。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> 方法。  
  
 [!code-csharp[sys.glob.carib.register#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.register/CS/persist.cs#1)]
 [!code-vb[sys.glob.carib.register#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.register/VB/persist.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">此自定义区域性已经注册。  
  
- 或 - 
在能够注册区域性之前，必须首先设置当前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象的一个属性。 所有区域性（非特定或特定）都必须设置 <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.TextInfo" /> 和 <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" />。 特定区域性还必须设置 <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.NumberFormat" />、<see cref="P:System.Globalization.CultureAndRegionInfoBuilder.GregorianDateTimeFormat" /> 和 <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.AvailableCalendars" />。  
  
如果未定义下列属性，则此方法还会引发 <see cref="T:System.InvalidOperationException" />： 
 <see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CultureEnglishName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CultureNativeName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyEnglishName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.CurrencyNativeName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ISOCurrencySymbol" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.Parent" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.RegionEnglishName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.RegionNativeName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName" /><see cref="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName" /></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">某个 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象属性值超过它的最大长度或最大值。</exception>
        <exception cref="T:System.UnauthorizedAccessException">用户没有管理特权。</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.Unregister(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (filename As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ filename);" />
      <MemberSignature Language="F#" Value="member this.Save : string -&gt; unit" Usage="cultureAndRegionInfoBuilder.Save filename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">包含此自定义区域性的 XML 表示形式的文件的名称。</param>
        <summary>将当前 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象的 XML 表示形式写入指定的文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> 方法将当前 <xref:System.Globalization.CultureAndRegionInfoBuilder> 对象写入 `filename` 参数指定的文件中，该文件采用名为区域设置数据标记语言（LDML）版本1.1 的 XML 格式。 <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> 方法执行 <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> 方法的反向操作。  
  
 有关 LDML 文件格式的信息，请参阅 <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> 方法。 有关 LDML 标准的信息，请参阅 Unicode 联合会网站上的[Unicode 技术标准 #35 "区域设置数据标记语言（LDML）"](https://go.microsoft.com/fwlink/p/?LinkId=252840) 。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.Globalization.CultureAndRegionInfoBuilder.Save%2A> 和 <xref:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml%2A> 方法。  
  
 [!code-csharp[sys.glob.carib.saveLdml#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.saveLdml/cs/sl.cs#1)]
 [!code-vb[sys.glob.carib.saveLdml#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.saveLdml/vb/sl.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="filename" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="filename" /> 为空字符串 ("")。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">当前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> 对象中包含的 <see cref="T:System.Globalization.TextInfo" />、<see cref="T:System.Globalization.NumberFormatInfo" /> 或 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象的某个属性值无效。</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.CreateFromLdml(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TextInfo">
      <MemberSignature Language="C#" Value="public System.Globalization.TextInfo TextInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.TextInfo TextInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.TextInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property TextInfo As TextInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::TextInfo ^ TextInfo { System::Globalization::TextInfo ^ get(); void set(System::Globalization::TextInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TextInfo : System.Globalization.TextInfo with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.TextInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.TextInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置定义与此自定义区域性关联的书写体系的 <see cref="T:System.Globalization.TextInfo" /> 对象。</summary>
        <value>定义与此自定义区域性关联的书写体系的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.TextInfo%2A?displayProperty=nameWithType> 属性为字符串提供区域性特定的大小写信息。 它与 <xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=nameWithType> 属性相对应。  
  
 分配给 <xref:System.Globalization.CultureAndRegionInfoBuilder.TextInfo%2A> 和 <xref:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo%2A> 属性的 <xref:System.Globalization.TextInfo> 和 <xref:System.Globalization.CompareInfo> 对象都支持区分区域性和区分大小写的字符串比较。 <xref:System.Globalization.CompareInfo> 对象还包含一些方法，其中包括支持区分区域性、不区分大小写的 <xref:System.Globalization.CompareOptions> 参数。 应将这两个属性分配 <xref:System.Globalization.TextInfo>，并 <xref:System.Globalization.CompareInfo> 表示相同区域设置的对象。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">此操作不支持替换区域性。</exception>
        <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">列表分隔符中的字符数超出 0 至 3 的范围。</exception>
        <altmember cref="P:System.Globalization.CultureAndRegionInfoBuilder.CompareInfo" />
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public string ThreeLetterISOLanguageName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterISOLanguageName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISOLanguageName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此自定义区域性的语言的由三个字母组成的 ISO 639-2 代码。</summary>
        <value>当前 <see cref="T:System.Globalization.CultureInfo" /> 对象的语言的由三个字母组成的 ISO 639-2 代码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISOLanguageName%2A> 属性对应于 <xref:System.Globalization.CultureInfo.ThreeLetterISOLanguageName%2A> 属性。  
  
 例如，英语的三字母缩写为 "eng"。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，该值的长度超出 1 至 8 个字符的范围。</exception>
        <exception cref="T:System.ArgumentException">在设置操作中，该值包含一个不在“a”至“z”、“A”至“Z”或“0”至“9”范围内的字符。</exception>
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterISORegionName">
      <MemberSignature Language="C#" Value="public string ThreeLetterISORegionName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterISORegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterISORegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterISORegionName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterISORegionName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在 ISO 3166 中定义的由三个字母组成的国家/地区代码。</summary>
        <value>在 ISO 3166 中定义的由三个字母组成的国家/地区代码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName%2A> 属性对应于 <xref:System.Globalization.RegionInfo.ThreeLetterISORegionName%2A> 属性。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName%2A> 属性包含在 ISO 3166 中为国家/地区定义的由三个字母组成的代码之一。 例如，美国的三字母代码为 "USA"。  
  
 Case 并不重要。 但 <xref:System.Globalization.CultureAndRegionInfoBuilder.RegionName%2A>、<xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName%2A>和 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterISORegionName%2A> 属性包含大写的相应代码。  
  
 预定义的国家/地区名称在 <xref:System.Globalization.RegionInfo> 类主题中列出。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，该值的长度超出 1 至 8 个字符的范围。</exception>
        <exception cref="T:System.ArgumentException">在设置操作中，该值包含一个不在“a”至“z”、“A”至“Z”或“0”至“9”范围内的字符。</exception>
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsLanguageName">
      <MemberSignature Language="C#" Value="public string ThreeLetterWindowsLanguageName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterWindowsLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterWindowsLanguageName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsLanguageName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 Windows API 中定义的由三个字母构成的语言代码。</summary>
        <value>Windows API 中定义的由三个字母构成的语言代码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsLanguageName%2A> 属性对应于 <xref:System.Globalization.CultureInfo.ThreeLetterWindowsLanguageName%2A> 属性。  
  
 此属性返回与 LOCALE_SABBREVLANGNAME 值 `GetLocaleInfo` 的 Windows API 方法相同的值。 例如，Windows API 中定义的由三个字母组成的英语（美国）代码为 "简体中文"。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，该值的长度超出 1 至 8 个字符的范围。</exception>
        <exception cref="T:System.ArgumentException">在设置操作中，该值包含一个不在“a”至“z”、“A”至“Z”或“0”至“9”范围内的字符。</exception>
        <exception cref="T:System.NotSupportedException">在设置操作中，当前自定义区域性是一个替换区域性。</exception>
      </Docs>
    </Member>
    <Member MemberName="ThreeLetterWindowsRegionName">
      <MemberSignature Language="C#" Value="public string ThreeLetterWindowsRegionName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ThreeLetterWindowsRegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeLetterWindowsRegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ThreeLetterWindowsRegionName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeLetterWindowsRegionName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 Windows 为当前自定义区域性表示的国家/地区分配的由三个字母组成的代码。</summary>
        <value>Windows 为 <see cref="T:System.Globalization.CultureAndRegionInfoBuilder" /> 对象表示的国家/地区分配的由三个字母组成的代码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.ThreeLetterWindowsRegionName%2A> 属性对应于 <xref:System.Globalization.RegionInfo.ThreeLetterWindowsRegionName%2A> 属性。  
  
 例如，美国的三字母代码为 "USA"。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，该值的长度超出 1 至 8 个字符的范围。</exception>
        <exception cref="T:System.ArgumentException">在设置操作中，该值包含一个不在“a”至“z”、“A”至“Z”或“0”至“9”范围内的字符。</exception>
        <exception cref="T:System.NotSupportedException">在设置操作中，当前自定义区域性是一个替换区域性或非特定区域性。</exception>
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISOLanguageName">
      <MemberSignature Language="C#" Value="public string TwoLetterISOLanguageName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISOLanguageName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName" />
      <MemberSignature Language="VB.NET" Value="Public Property TwoLetterISOLanguageName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TwoLetterISOLanguageName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISOLanguageName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置当前 <see cref="T:System.Globalization.CultureInfo" /> 对象的语言的由两个字母组成的 ISO 639-1 代码。</summary>
        <value>当前 <see cref="T:System.Globalization.CultureInfo" /> 对象的语言的由两个字母组成的 ISO 639-1 代码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISOLanguageName%2A> 属性对应于 <xref:System.Globalization.CultureInfo.TwoLetterISOLanguageName%2A> 属性。  
  
 例如，英语的两字母缩写为 "en"。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，该值的长度超出 1 至 8 个字符的范围。</exception>
        <exception cref="T:System.ArgumentException">在设置操作中，该值包含一个不在“a”至“z”、“A”至“Z”或“0”至“9”范围内的字符。</exception>
      </Docs>
    </Member>
    <Member MemberName="TwoLetterISORegionName">
      <MemberSignature Language="C#" Value="public string TwoLetterISORegionName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TwoLetterISORegionName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName" />
      <MemberSignature Language="VB.NET" Value="Public Property TwoLetterISORegionName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TwoLetterISORegionName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TwoLetterISORegionName : string with get, set" Usage="System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在 ISO 3166 中定义的由两个字母组成的国家/地区代码。</summary>
        <value>在 ISO 3166 中定义的由两个字母组成的国家/地区代码。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName%2A> 属性对应于 <xref:System.Globalization.RegionInfo.TwoLetterISORegionName%2A> 属性。  
  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.TwoLetterISORegionName%2A> 属性值是在 ISO 3166 中为国家/地区定义的由两个字母组成的代码之一。 例如，美国的双字母代码为 "US"。 预定义的 <xref:System.Globalization.RegionInfo> 名称在 <xref:System.Globalization.RegionInfo> 类主题中列出。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">设置操作中的值为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">在设置操作中，该值的长度超出 1 至 8 个字符的范围。</exception>
        <exception cref="T:System.ArgumentException">在设置操作中，该值包含一个不在“a”至“z”、“A”至“Z”或“0”至“9”范围内的字符。</exception>
        <exception cref="T:System.NotSupportedException">在设置操作中，当前自定义区域性是一个非特定区域性。</exception>
      </Docs>
    </Member>
    <Member MemberName="Unregister">
      <MemberSignature Language="C#" Value="public static void Unregister (string cultureName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unregister(string cultureName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CultureAndRegionInfoBuilder.Unregister(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unregister (cultureName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unregister(System::String ^ cultureName);" />
      <MemberSignature Language="F#" Value="static member Unregister : string -&gt; unit" Usage="System.Globalization.CultureAndRegionInfoBuilder.Unregister cultureName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>sysglobl</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cultureName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cultureName">要删除的自定义文化的名称。</param>
        <summary>从本地计算机中删除自定义区域性。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A> 方法执行 <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> 方法的反向。 <xref:System.Globalization.CultureAndRegionInfoBuilder.Register%2A> 方法将自定义区域性作为文件存储在本地计算机上，该文件位于 Windows API [GetWindowsDirectory](https://go.microsoft.com/fwlink/?LinkId=191561)函数返回的目录的全球化子目录中。 <xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A> 方法将从计算机中删除持久的自定义区域性文件。 删除该文件后，计算机内存中自定义区域性的现有实例将继续运行，但不能创建自定义区域性的新实例。  
  
   
  
## Examples  
 下面的示例演示 <xref:System.Globalization.CultureAndRegionInfoBuilder.Unregister%2A> 方法。  
  
 [!code-csharp[sys.glob.carib.unregister#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.carib.unregister/CS/unregister.cs#1)]
 [!code-vb[sys.glob.carib.unregister#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.carib.unregister/VB/unregister.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="cultureName" /> 是依赖区域性的父区域性或控制台回退用户界面区域性。</exception>
        <exception cref="T:System.UnauthorizedAccessException">该用户没有管理特权。</exception>
        <exception cref="T:System.ArgumentException">没有找到 <paramref name="cultureName" /> 指定的区域性。</exception>
        <altmember cref="M:System.Globalization.CultureAndRegionInfoBuilder.Register" />
      </Docs>
    </Member>
  </Members>
</Type>
