<Type Name="IdnMapping" FullName="System.Globalization.IdnMapping">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7c429d3ab2cf0adfc28a9455d2a80432cf1f48d8" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102088636" /></Metadata><TypeSignature Language="C#" Value="public sealed class IdnMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit IdnMapping extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.IdnMapping" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class IdnMapping" />
  <TypeSignature Language="C++ CLI" Value="public ref class IdnMapping sealed" />
  <TypeSignature Language="F#" Value="type IdnMapping = class" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Runtime" ToVersion="0.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Globalization.Extensions" FromVersion="5.0.0.0" To="System.Runtime" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Globalization.Extensions" FromVersion="4.1.0.0" To="System.Runtime" ToVersion="4.2.0.0" FrameworkAlternate="netcore-2.0" />
    <TypeForwarding From="System.Globalization.Extensions" FromVersion="4.1.1.0" To="System.Runtime" ToVersion="4.2.1.0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
    <TypeForwarding From="System.Globalization.Extensions" FromVersion="4.1.2.0" To="System.Runtime" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>支持在 Internet 域名中使用非 ASCII 字符。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Internet 域名由一个或多个名为 "域名标签" 的部分组成，用标签分隔符分隔。 例如，域名 "www.proseware.com" 由句点分隔的标签 "www"、"proseware" 和 "com" 组成。 标准域名由 US-ASCII (中指定的字符或基本拉丁) 字符范围（从 U + 0021 到 U + 007E）组成。 为了便于不使用 US-ASCII 字符集的区域性中使用 Internet，在2003中采用了在应用程序中国际化域名 (IDNA) 标准，以支持在美国 ASCII 字符范围外包含 Unicode 字符。 但是，名称服务器和域名解析继续依赖于 US-ASCII 字符范围内的字符。  
  
 IDNA 机制使用 Punycode 将包含 US-ASCII 字符范围以外的 Unicode 字符的国际化域名映射到域名系统支持的 US-ASCII 字符范围。 IDNA 机制仅用于转换域名，而不会转换通过 Internet 传输的数据。  
  
> [!IMPORTANT]
>  在 .NET Framework 4.5 中， <xref:System.Globalization.IdnMapping> 类支持 IDNA 标准的不同版本，具体取决于所使用的操作系统：  
>   
> - 在 Windows 8 上运行时，它支持 RFC 5891 所述的 IDNA 标准2008版本 [：应用程序 (IDNA) ：协议中的国际化域名](https://go.microsoft.com/fwlink/?LinkId=231875)。
> - 在早期版本的 Windows 操作系统上运行时，它支持 RFC 3490 所述标准的2003版本 [：在应用程序中国际化域名 (IDNA) ](https://go.microsoft.com/fwlink/?LinkId=158110)。
>   
>  请参阅 [Unicode 技术标准 #46： IDNA 兼容性处理](https://go.microsoft.com/fwlink/?LinkId=232459) ，以了解这些标准处理特定字符集的方式。  
  
 此 <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=nameWithType> 方法规范化域名，并将规范化名称转换为一个表示形式，该表示形式由 us-ascii 码位范围内的可显示 Unicode 字符（ (u + 0020 到 U + 007E) ）组成，并为每个标签预先添加 ASCII 兼容的编码 (ACE) 前缀 ( "xn--" ) 。 <xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=nameWithType>方法还原由方法转换的域名标签 <xref:System.Globalization.IdnMapping.GetAscii%2A> 。  
  
 如果要转换的字符串包括标签分隔符字符表意字句号 (U + 3002) ，全半形完全停止 (U + FF0E) ，半形象形字完全停止 (U + FF61) ，则该 <xref:System.Globalization.IdnMapping.GetAscii%2A> 方法将其转换为标签分隔符完全停止 (period，U + 002E) 。 <xref:System.Globalization.IdnMapping.GetUnicode%2A>但是，方法不会还原原始标签分隔符。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> 方法将国际化域名数组转换为 Punycode。 <xref:System.Globalization.IdnMapping.GetUnicode%2A>然后，方法将 Punycode 域名转换回原始域名，但将原始标签分隔符替换为标准标签分隔符。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>的所有公共方法 <see cref="T:System.Globalization.IdnMapping" /> 都是线程安全的，并且可以从多个线程并发使用，前提是该 <see cref="T:System.Globalization.IdnMapping" /> 实例的属性不同时同时设置。</threadsafe>
    <altmember cref="Overload:System.String.Normalize" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdnMapping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IdnMapping();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Globalization.IdnMapping" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=nameWithType>和 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=nameWithType> 属性将初始化为 `false` 。 除 a-z、0-9 之外的一小一小部分 ASCII 字符，连字符 (-) 字符 (U + 002D) ， ( 字符在域名中是允许的，但未赋值的 Unicode 码位不允许使用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUnassigned">
      <MemberSignature Language="C#" Value="public bool AllowUnassigned { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUnassigned" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowUnassigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowUnassigned { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowUnassigned : bool with get, set" Usage="System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示当前 <see cref="T:System.Globalization.IdnMapping" /> 对象的成员所执行的操作中是否使用未分配的 Unicode 码位。</summary>
        <value>如果在操作中使用未分配的码位，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 已注册域名不能包含未分配的码位。 因此，属性的默认值 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> 为 `false` 。 IDNA 规范仅允许未赋值的代码点在匹配字符串的查询中 (也就是说，在域名查找) 中。 若要详细了解如何使用域名中未分配的码位，请参阅 [rfc 3454 " (stringprep) 的国际化字符串准备"](https://go.microsoft.com/fwlink/?LinkId=231873) 和 [rfc 5891，"应用程序中的国际化域名 (IDNA) ：协议"](https://go.microsoft.com/fwlink/?LinkId=231875)。  
  
> [!IMPORTANT]
>  如果 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> 属性为 `false` ，则与属性关联的行为取决于基础操作系统。 在 Windows 8 中， <xref:System.Globalization.IdnMapping> 类符合 IDNA 2008，后者基于 Unicode 6.0 标准。 在以前版本的 Windows 上， <xref:System.Globalization.IdnMapping> 类基于 IDNA 2003，后者基于 Unicode 3。*x*。 在 IDNA 2003 中未赋值的某些码位已被分配字符，在 IDNA 2008 中受支持。 例如，在 Unicode 4.0 中引入了 U + 0221。 在 Windows 8 上，其编码为 "xn-6la"。 在以前版本的 Windows 上，它会引发 <xref:System.ArgumentException> 异常。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="idnMapping.Equals obj" />
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">要与当前对象进行比较的对象。</param>
        <summary>指示当前 <see cref="T:System.Globalization.IdnMapping" /> 对象与指定对象是否相等。</summary>
        <returns>如果 <paramref name="obj" /> 参数指定的对象从 <see cref="T:System.Globalization.IdnMapping" /> 派生且它的 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAscii">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将包含 US-ASCII 字符范围以外的Unicode字符的域名称标签字符串编码为（U+0020 至 U+007E）内的可显示 Unicode 字符的字符串。 根据 IDNA 标准格式化的字符串。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string -&gt; string" Usage="idnMapping.GetAscii unicode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unicode">要转换的字符串，它包含一个或多个由标签分隔符分隔的域名标签。</param>
        <summary>将由 Unicode 字符组成的域名标签的字符串编码为 US-ASCII 字符范围内的可显示的 Unicode 字符的字符串。 根据 IDNA 标准格式化的字符串。</summary>
        <returns>由 <paramref name="unicode" /> 参数指定的字符串的等效项包括 US-ASCII 字符范围（U+0020 至 U+007E）内的可显示 Unicode 字符并根据 IDNA 标准格式化。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `unicode`参数指定包含有效 Unicode 字符的一个或多个标签的字符串。 标签用标签分隔符分隔。 `unicode`参数的开头不能为标签分隔符，但它可以包含和（可选）以分隔符结尾。 标签分隔符为 FULL STOP (period，U + 002E) ，象形字完全停止 (U + 3002) ，全形完全停止 (U + FF0E) ，半形象形字完全停止 (U + FF61) 。 例如，域名 "www.adatum.com" 由句点分隔的标签 "www"、"adatum" 和 "com" 组成。  
  
 标签不能包含以下任何字符：  
  
-   从 U + 0001 到 U + 001F 以及 U + 007F 的 Unicode 控制字符。  
  
-   未赋值的 Unicode 字符，如果属性的值 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> 为 `false` 。  
  
-   US-ASCII 字符范围中的非标准字符，例如，空格 (U + 0020) ，感叹号 (U + 0021) ，低行 (U + 005F) 个字符，如果属性的值为，则为 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> `true` 。  
  
-   IDNA 标准的特定版本禁止使用的字符。 有关禁止字符的详细信息，请参阅 [rfc 3454：为 IDNA 2003 ( "stringprep" ) 准备国际化字符串 ](https://go.microsoft.com/fwlink/?LinkId=231873) ， [RFC 5982： IDNA 2008 的应用程序的 Unicode 码位和国际化域名](https://go.microsoft.com/fwlink/?LinkId=231877) 。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A>方法将所有标签分隔符转换为完全停止 (period，U + 002E) 。  
  
 如果 `unicode` 不包含 us-ascii 字符范围外的任何字符，并且不允许 us-ascii 字符范围内的任何字符，则此方法返回 `unicode` 未更改的。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> 方法将国际化域名数组转换为 Punycode，这是由 us-ascii 字符范围内的字符组成的编码等效项。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29>然后，方法将 Punycode 域名转换回原始域名，但将原始标签分隔符替换为标准标签分隔符。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="unicode" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">根据 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性以及 IDNA 标准，<paramref name="unicode" /> 是无效的。</exception>
        <block subset="none" type="usage"><para>在 .NET Framework 4.5 中， <see cref="T:System.Globalization.IdnMapping" /> 类支持 IDNA 标准的不同版本，具体取决于所使用的操作系统： 
-在 Windows 8 上运行时，它支持 RFC 5891 所述的 IDNA 标准2008版本 [：应用程序中的国际化域名 (IDNA) ：协议](https://go.microsoft.com/fwlink/?LinkId=231875)。  
  
-在早期版本的 Windows 操作系统上运行时，它支持 RFC 3490 所述标准的2003版本 [：在应用程序中国际化域名 (IDNA) ](https://go.microsoft.com/fwlink/?LinkId=158110)。  
  
请参阅 [Unicode 技术标准 #46： IDNA 兼容性处理](https://go.microsoft.com/fwlink/?LinkId=232459) ，以了解这些标准处理特定字符集的方式。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">要转换的字符串，它包含一个或多个由标签分隔符分隔的域名标签。</param>
        <param name="index"><paramref name="unicode" /> 的从零开始的偏移量，用于指定开始转换的子字符串的位置。 转换运算将继续执行到 <paramref name="unicode" /> 字符串的末尾。</param>
        <summary>编码包含US-ASCII字符范围以外的 Unicode 字符的域名称标签子字符串。 子串转换为在 US-ASCII 字符范围内可显示的“ Unicode ”字符串并根据 IDNA 标准格式化。</summary>
        <returns>由 <paramref name="unicode" /> 和 <paramref name="index" /> 指定的子字符串的等效项包括 US-ASCII 字符范围（U+0020 至 U+007E）内的可显示 Unicode 字符并根据 IDNA 标准格式化。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `unicode`和 `index` 参数定义包含一个或多个包含有效 Unicode 字符的标签的子字符串。 标签用标签分隔符分隔。 子字符串的第一个字符不能以标签分隔符开头，但它可以包含并且可以选择以分隔符结尾。 标签分隔符为 FULL STOP (period，U + 002E) ，象形字完全停止 (U + 3002) ，全形完全停止 (U + FF0E) ，半形象形字完全停止 (U + FF61) 。 例如，域名 "www.adatum.com" 由句点分隔的标签 "www"、"adatum" 和 "com" 组成。  
  
 标签不能包含以下任何字符：  
  
-   从 U + 0001 到 U + 001F 以及 U + 007F 的 Unicode 控制字符。  
  
-   未赋值的 Unicode 字符，具体取决于属性的值 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> 。  
  
-   US-ASCII 字符范围中的非标准字符，例如，空格 (U + 0020) ，感叹号 (U + 0021) ，低行 (U + 005F) 个字符，具体取决于属性的值 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> 。  
  
-   IDNA 标准的特定版本禁止使用的字符。 有关禁止字符的详细信息，请参阅 [rfc 3454：为 IDNA 2003 ( "stringprep" ) 准备国际化字符串 ](https://go.microsoft.com/fwlink/?LinkId=231873) ， [RFC 5982： IDNA 2008 的应用程序的 Unicode 码位和国际化域名](https://go.microsoft.com/fwlink/?LinkId=231877) 。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A>方法将所有标签分隔符转换为完全停止 (period，U + 002E) 。  
  
 如果 `unicode` 不包含 us-ascii 字符范围外的任何字符，并且不允许 us-ascii 字符范围内的任何字符，则此方法返回 `unicode` 未更改的。  
  
   
  
## Examples  
 下面的示例从电子邮件地址中删除了本地部分和 @ 字符，并将生成的域名传递给 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> 方法以创建 Punycode 域名，该域名是由 us-ascii 字符范围内的字符组成的编码等效项。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29>然后，方法将 Punycode 域名转换回原始域名，但将原始标签分隔符替换为标准标签分隔符。  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1a.cs#2)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="unicode" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 小于零。  
  
- 或 - 
 <paramref name="index" /> 大于 <paramref name="unicode" /> 的长度。</exception>
        <exception cref="T:System.ArgumentException">根据 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性以及 IDNA 标准，<paramref name="unicode" /> 是无效的。</exception>
        <block subset="none" type="usage"><para>在 .NET Framework 4.5 中， <see cref="T:System.Globalization.IdnMapping" /> 类支持 IDNA 标准的不同版本，具体取决于所使用的操作系统： 
-在 Windows 8 上运行时，它支持 RFC 5891 所述的 IDNA 标准2008版本 [：应用程序中的国际化域名 (IDNA) ：协议](https://go.microsoft.com/fwlink/?LinkId=231875)。  
  
-在早期版本的 Windows 操作系统上运行时，它支持 RFC 3490 所述标准的2003版本 [：在应用程序中国际化域名 (IDNA) ](https://go.microsoft.com/fwlink/?LinkId=158110)。  
  
请参阅 [Unicode 技术标准 #46： IDNA 兼容性处理](https://go.microsoft.com/fwlink/?LinkId=232459) ，以了解这些标准处理特定字符集的方式。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAscii (unicode As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetAscii(System::String ^ unicode, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetAscii : string * int * int -&gt; string" Usage="idnMapping.GetAscii (unicode, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">要转换的字符串，它包含一个或多个由标签分隔符分隔的域名标签。</param>
        <param name="index"><paramref name="unicode" /> 的从零开始的偏移量，用于指定子字符串的起始位置。</param>
        <param name="count">要在 <paramref name="index" /> 字符串中的 <paramref name="unicode" /> 指定的位置开始的子字符串中转换的字符数。</param>
        <summary>编码包含 US-ASCII 字符范围以外的 Unicode 字符的域名称标签子字符串的指定字符数。 子串转换为在 US-ASCII 字符范围内可显示的“ Unicode ”字符串并根据 IDNA 标准格式化。</summary>
        <returns>由 <paramref name="unicode" />、<paramref name="index" /> 和 <paramref name="count" /> 参数指定的子字符串的等效项，包括 US-ASCII 字符范围（U+0020 至 U+007E）内的可显示 Unicode 字符并根据 IDNA 标准格式化。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Unicode`、 `index` 和 `count` 参数定义包含一个或多个包含有效 Unicode 字符的标签的子字符串。 标签用标签分隔符分隔。 子字符串的第一个字符不能以标签分隔符开头，但它可以包含并且可以选择以分隔符结尾。 标签分隔符为 FULL STOP (period，U + 002E) ，象形字完全停止 (U + 3002) ，全形完全停止 (U + FF0E) ，半形象形字完全停止 (U + FF61) 。 例如，域名 "www.adatum.com" 由句点分隔的标签 "www"、"adatum" 和 "com" 组成。  
  
 标签不能包含以下任何字符：  
  
-   从 U + 0001 到 U + 001F 以及 U + 007F 的 Unicode 控制字符。  
  
-   未赋值的 Unicode 字符，具体取决于属性的值 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> 。  
  
-   US-ASCII 字符范围中的非标准字符，例如，空格 (U + 0020) ，感叹号 (U + 0021) ，低行 (U + 005F) 个字符，具体取决于属性的值 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> 。  
  
-   IDNA 标准的特定版本禁止使用的字符。 有关禁止字符的详细信息，请参阅 [rfc 3454：为 IDNA 2003 ( "stringprep" ) 准备国际化字符串 ](https://go.microsoft.com/fwlink/?LinkId=231873) ， [RFC 5982： IDNA 2008 的应用程序的 Unicode 码位和国际化域名](https://go.microsoft.com/fwlink/?LinkId=231877) 。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A>方法将所有标签分隔符转换为完全停止 (period，U + 002E) 。 如果子字符串不包含 US-ASCII 字符范围外的任何字符，并且不允许在 US-ASCII 字符范围内包含任何字符，则该方法将返回未更改的子字符串。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> 方法将国际化域名转换为符合 IDNA 标准的域名。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29>然后，方法将标准化域名转换回原始域名，但会将原始标签分隔符替换为标准标签分隔符。  
  
 [!code-csharp[IdnMapping.GetX#1](~/samples/snippets/csharp/VS_Snippets_CLR/IdnMapping.GetX/CS/getx.cs#1)]
 [!code-vb[IdnMapping.GetX#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IdnMapping.GetX/VB/getx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="unicode" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 或 <paramref name="count" /> 小于零。  
  
- 或 - 
 <paramref name="index" /> 大于 <paramref name="unicode" /> 的长度。  
  
- 或 - 
 <paramref name="index" /> 大于 <paramref name="unicode" /> 的长度减去 <paramref name="count" />。</exception>
        <exception cref="T:System.ArgumentException">根据 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性以及 IDNA 标准，<paramref name="unicode" /> 是无效的。</exception>
        <block subset="none" type="usage"><para>在 .NET Framework 4.5 中， <see cref="T:System.Globalization.IdnMapping" /> 类支持 IDNA 标准的不同版本，具体取决于所使用的操作系统： 
-在 Windows 8 上运行时，它支持 RFC 5891 所述的 IDNA 标准2008版本 [：应用程序中的国际化域名 (IDNA) ：协议](https://go.microsoft.com/fwlink/?LinkId=231875)。  
  
-在早期版本的 Windows 操作系统上运行时，它支持 RFC 3490 所述标准的2003版本 [：在应用程序中国际化域名 (IDNA) ](https://go.microsoft.com/fwlink/?LinkId=158110)。  
  
请参阅 [Unicode 技术标准 #46： IDNA 兼容性处理](https://go.microsoft.com/fwlink/?LinkId=232459) ，以了解这些标准处理特定字符集的方式。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="idnMapping.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回此 <see cref="T:System.Globalization.IdnMapping" /> 对象的哈希代码。</summary>
        <returns>从 <see cref="T:System.Globalization.IdnMapping" /> 对象的属性派生的四个 32 位常量中的一个。  返回值没有特殊意义，不适合在哈希代码算法中使用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Globalization.IdnMapping.GetHashCode%2A>如果你的应用程序需要实现有意义的哈希代码算法，则重写方法。  
  
   
  
## Examples  
 下面的示例假设单个字符串可以包含由空格分隔的多个电子邮件地址。 它从每个电子邮件地址中删除本地部分和 @ 字符，并将生成的域名传递给 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> 或 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> 方法，以创建 Punycode 域名。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29>然后，方法将 Punycode 域名转换回原始域名。  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1b.cs#3)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1b.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUnicode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>对基于 IDNA 标准编码为 Unicode 字符串的一个或多个域名标签进行解码。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string -&gt; string" Usage="idnMapping.GetUnicode ascii" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ascii">要解码的字符串，包含根据 IDNA 标准在 US-ASCII 字符范围 （U+0020 至 U+007E） 编码的一个或多个标签。</param>
        <summary>对基于 IDNA 标准编码的一个或者多个域名标签的字符串进行解码，解码为一个 Unicode 字符串。</summary>
        <returns>由 <paramref name="ascii" /> 参数指定的 IDNA 子字符串的 Unicode 等效项。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关域名、标签和标签分隔符的详细信息，请参阅方法的备注 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> 。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> 方法将国际化域名数组转换为 Punycode。 <xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29>然后，方法将 Punycode 域名转换回原始域名，但将原始标签分隔符替换为标准标签分隔符。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ascii" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">根据 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性以及 IDNA 标准，<paramref name="ascii" /> 是无效的。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">要解码的字符串，包含根据 IDNA 标准在 US-ASCII 字符范围 （U+0020 至 U+007E） 编码的一个或多个标签。</param>
        <param name="index"><paramref name="ascii" /> 的从零开始的偏移量，用于指定开始解码的子字符串的位置。 解码运算将继续执行到 <paramref name="ascii" /> 字符串的末尾。</param>
        <summary>对基于 IDNA 标准编码的一个或者多个域名标签的子字符串进行解码，解码为 Unicode 字符串。</summary>
        <returns>由 <paramref name="ascii" /> 和 <paramref name="index" /> 参数指定的 IDNA 子字符串的 Unicode 等效项。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关域名、标签和标签分隔符的详细信息，请参阅方法的备注 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ascii" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 小于零。  
  
- 或 - 
 <paramref name="index" /> 大于 <paramref name="ascii" /> 的长度。</exception>
        <exception cref="T:System.ArgumentException">根据 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性以及 IDNA 标准，<paramref name="ascii" /> 是无效的。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUnicode (ascii As String, index As Integer, count As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetUnicode(System::String ^ ascii, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.GetUnicode : string * int * int -&gt; string" Usage="idnMapping.GetUnicode (ascii, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">要解码的字符串，包含根据 IDNA 标准在 US-ASCII 字符范围 （U+0020 至 U+007E） 编码的一个或多个标签。</param>
        <param name="index"><paramref name="ascii" /> 的从零开始的偏移量，用于指定子字符串的起始位置。</param>
        <param name="count">要在 <paramref name="ascii" /> 字符串中的 <paramref name="index" /> 指定的位置开始的子字符串中转换的字符数。</param>
        <summary>对基于 IDNA 标准编码、具有指定长度并包含一个或者多个域名标签的子字符串进行解码，解码为一个 Unicode 字符串。</summary>
        <returns>由 <paramref name="ascii" />、<paramref name="index" /> 和 <paramref name="count" /> 参数指定的 IDNA 子字符串的 Unicode 等效项。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关域名、标签和标签分隔符的详细信息，请参阅方法的备注 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=nameWithType> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="ascii" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> 或 <paramref name="count" /> 小于零。  
  
- 或 - 
 <paramref name="index" /> 大于 <paramref name="ascii" /> 的长度。  
  
- 或 - 
 <paramref name="index" /> 大于 <paramref name="ascii" /> 的长度减去 <paramref name="count" />。</exception>
        <exception cref="T:System.ArgumentException">根据 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> 和 <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> 属性以及 IDNA 标准，<paramref name="ascii" /> 是无效的。</exception>
      </Docs>
    </Member>
    <Member MemberName="UseStd3AsciiRules">
      <MemberSignature Language="C#" Value="public bool UseStd3AsciiRules { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseStd3AsciiRules" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberSignature Language="VB.NET" Value="Public Property UseStd3AsciiRules As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseStd3AsciiRules { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseStd3AsciiRules : bool with get, set" Usage="System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在当前 <see cref="T:System.Globalization.IdnMapping" /> 对象的成员所执行的操作中是使用标准命名约定还是宽松命名约定。</summary>
        <value>如果在操作中使用标准命名转换，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 遵循标准命名规则的域名由 US-ASCII 字符范围中的特定字符子集组成。 字符是字母 A 到 Z、0到9的数字、连字符 ( ) 字符 (U + 002D) 和句点 ( ) 字符。 字符的大小写并不重要。 宽松命名约定允许使用范围更广的 ASCII 字符，其中包括空格字符 (U + 0020) 、感叹号字符 (U + 0021) 和 underbar 字符 (U + 005F) 。 如果 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> 为 `true` ，则在由方法返回的标签中只能出现标准字符 <xref:System.Globalization.IdnMapping.GetAscii%2A> 。  
  
 默认情况下，属性的值 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> 为 `false` ，并且在标签中允许使用 ASCII 字符的扩展子集。  
  
> [!NOTE]
>  <xref:System.Globalization.IdnMapping>类禁止在域名标签中使用 nondisplayable 字符 U + 0000 到 u + 001F 和 U + 007F，而不考虑属性的设置 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> 。 此禁止会降低安全攻击的风险，如名称欺骗。  
  
   
  
## Examples  
 下面的示例生成包含 ASCII 范围内 U + 0000 到 U + 007F 的字符的 Url，并将其传递给 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> 两个对象的方法 <xref:System.Globalization.IdnMapping> 。 一个对象的 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> 属性设置为 `true` ，另一个对象将它设置为 `false` 。 当属性为时，输出将显示无效的字符 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> `true` `false` 。  
  
 [!code-csharp[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/cs/usestd3asciirules1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.UseStd3AsciiRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/vb/usestd3asciirules1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
