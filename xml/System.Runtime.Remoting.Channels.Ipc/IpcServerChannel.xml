<Type Name="IpcServerChannel" FullName="System.Runtime.Remoting.Channels.Ipc.IpcServerChannel">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2422c6c0a6671ab1b7a84d3cf937bf4a572f8113" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="73354104" /></Metadata><TypeSignature Language="C#" Value="public class IpcServerChannel : System.Runtime.Remoting.Channels.IChannelReceiver, System.Runtime.Remoting.Channels.ISecurableChannel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IpcServerChannel extends System.Object implements class System.Runtime.Remoting.Channels.IChannel, class System.Runtime.Remoting.Channels.IChannelReceiver, class System.Runtime.Remoting.Channels.ISecurableChannel" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" />
  <TypeSignature Language="VB.NET" Value="Public Class IpcServerChannel&#xA;Implements IChannelReceiver, ISecurableChannel" />
  <TypeSignature Language="C++ CLI" Value="public ref class IpcServerChannel : System::Runtime::Remoting::Channels::IChannelReceiver, System::Runtime::Remoting::Channels::ISecurableChannel" />
  <TypeSignature Language="F#" Value="type IpcServerChannel = class&#xA;    interface IChannelReceiver&#xA;    interface IChannel&#xA;    interface ISecurableChannel" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Remoting</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IChannel</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.IChannelReceiver</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.Channels.ISecurableChannel</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="0aa90-101">为远程调用实现使用 IPC 系统传输消息的服务器信道。</span><span class="sxs-lookup"><span data-stu-id="0aa90-101">Implements a server channel for remote calls that uses the IPC system to transmit messages.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

[!INCLUDE [untrusted-data-class-note](~/includes/untrusted-data-class-note.md)]

 <span data-ttu-id="0aa90-102">通道由 .NET Framework 远程处理基础结构用于传输远程调用。</span><span class="sxs-lookup"><span data-stu-id="0aa90-102">Channels are used by the .NET Framework remoting infrastructure to transport remote calls.</span></span> <span data-ttu-id="0aa90-103">当客户端调用远程对象时，调用将被序列化为客户端通道发送并由服务器通道接收的消息。</span><span class="sxs-lookup"><span data-stu-id="0aa90-103">When a client calls a remote object, the call is serialized into a message that is sent by a client channel and received by a server channel.</span></span> <span data-ttu-id="0aa90-104">收到消息后，将对其进行反序列化和处理。</span><span class="sxs-lookup"><span data-stu-id="0aa90-104">After the message is received, it is deserialized and processed.</span></span> <span data-ttu-id="0aa90-105">任何返回值由服务器通道传输并由客户端通道接收。</span><span class="sxs-lookup"><span data-stu-id="0aa90-105">Any returned values are transmitted by the server channel and received by the client channel.</span></span>  
  
 <span data-ttu-id="0aa90-106"><xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>类使用 Windows 进程间通信 (IPC) 系统在同一台计算机上的应用程序域之间传输消息。</span><span class="sxs-lookup"><span data-stu-id="0aa90-106">The <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> class uses the Windows interprocess communication (IPC) system to transport messages between application domains on the same computer.</span></span> <span data-ttu-id="0aa90-107">在同一台计算机上的应用程序域之间通信时，IPC 信道比 TCP 或 HTTP 通道快得多。</span><span class="sxs-lookup"><span data-stu-id="0aa90-107">When communicating between application domains on the same computer, the IPC channel is much faster than the TCP or HTTP channels.</span></span>  
  
 <span data-ttu-id="0aa90-108">若要在服务器端执行额外的消息处理，请指定一个接口的实现， <xref:System.Runtime.Remoting.Channels.IServerChannelSinkProvider> 通过该接口，通过该接口来传递该实例处理的所有消息 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> 。</span><span class="sxs-lookup"><span data-stu-id="0aa90-108">To perform additional processing of messages on the server side, specify an implementation of the <xref:System.Runtime.Remoting.Channels.IServerChannelSinkProvider> interface through which all messages processed by the <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> instance are passed.</span></span>  
  
 <span data-ttu-id="0aa90-109"><xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>实例接受以二进制或 SOAP 格式序列化的消息。</span><span class="sxs-lookup"><span data-stu-id="0aa90-109">The <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> instance accepts messages serialized in either binary or SOAP format.</span></span>  
  
 <span data-ttu-id="0aa90-110"><xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel>对象具有关联的配置属性，这些属性可在运行时在配置文件中设置 (方法是：调用静态 <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%2A?displayProperty=nameWithType> 方法) 或通过将集合传递 <xref:System.Collections.IDictionary> 到 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.%23ctor%2A> 构造函数) 以编程方式 (。</span><span class="sxs-lookup"><span data-stu-id="0aa90-110">A <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> object has associated configuration properties that can be set at run time either in a configuration file (by invoking the static <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%2A?displayProperty=nameWithType> method) or programmatically (by passing an <xref:System.Collections.IDictionary> collection to the <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.%23ctor%2A> constructor).</span></span> <span data-ttu-id="0aa90-111">有关这些配置属性的列表，请参阅构造函数的文档 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.%23ctor%2A> 。</span><span class="sxs-lookup"><span data-stu-id="0aa90-111">For a list of these configuration properties, see the documentation for the <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.%23ctor%2A> constructor.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="0aa90-112">在 `exclusiveAddressUse` 参数中将属性设置为时 `false` `properties` ， <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> 可以为同一个命名管道注册多个对象。</span><span class="sxs-lookup"><span data-stu-id="0aa90-112">When setting the `exclusiveAddressUse` property to `false` in the `properties` argument, several <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> objects can be registered for the same named pipe.</span></span> <span data-ttu-id="0aa90-113">在这种情况下，请求可以到达注册的任何通道。</span><span class="sxs-lookup"><span data-stu-id="0aa90-113">In such a case requests can go to any of the channels registered.</span></span> <span data-ttu-id="0aa90-114">仅当同时使用 ALCs 时，才会将此设置视为安全设置。</span><span class="sxs-lookup"><span data-stu-id="0aa90-114">This setting is considered secure only if ALCs are also used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0aa90-115">下面的代码示例演示如何使用 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> 类。</span><span class="sxs-lookup"><span data-stu-id="0aa90-115">The following code example illustrates how to use the <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> class.</span></span>  
  
 [!code-cpp[Remoting_Ipc#10](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_Ipc/CPP/server.cpp#10)]
 [!code-csharp[Remoting_Ipc#10](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_Ipc/CS/server.cs#10)]  
  
 <span data-ttu-id="0aa90-116">前面的代码用于公开以下远程对象。</span><span class="sxs-lookup"><span data-stu-id="0aa90-116">The preceding code is used to expose the following remote object.</span></span>  
  
 [!code-cpp[Remoting_Ipc#0](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_Ipc/CPP/counter.cpp#0)]
 [!code-csharp[Remoting_Ipc#0](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_Ipc/CS/counter.cs#0)]  
  
 <span data-ttu-id="0aa90-117">有关远程使用此对象的客户端的示例，请参阅 <xref:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel> 。</span><span class="sxs-lookup"><span data-stu-id="0aa90-117">For an example of a client using this object remotely, see <xref:System.Runtime.Remoting.Channels.Ipc.IpcClientChannel>.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0aa90-118">初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0aa90-118">Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IpcServerChannel (string portName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string portName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (portName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IpcServerChannel(System::String ^ portName);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Remoting.Channels.Ipc.IpcServerChannel : string -&gt; System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" Usage="new System.Runtime.Remoting.Channels.Ipc.IpcServerChannel portName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="portName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="portName"><span data-ttu-id="0aa90-119">信道要使用的 IPC 端口的名称。</span><span class="sxs-lookup"><span data-stu-id="0aa90-119">The name of the IPC port to be used by the channel.</span></span></param>
        <summary><span data-ttu-id="0aa90-120">用指定的 IPC 端口名初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0aa90-120">Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> class with the specified IPC port name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="0aa90-121">下面的代码示例演示如何使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="0aa90-121">The following code example shows how to use this constructor.</span></span>  
  
 [!code-cpp[Remoting_Ipc#11](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_Ipc/CPP/server.cpp#11)]
 [!code-csharp[Remoting_Ipc#11](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_Ipc/CS/server.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IpcServerChannel (System.Collections.IDictionary properties, System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary properties, class System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (properties As IDictionary, sinkProvider As IServerChannelSinkProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IpcServerChannel(System::Collections::IDictionary ^ properties, System::Runtime::Remoting::Channels::IServerChannelSinkProvider ^ sinkProvider);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Remoting.Channels.Ipc.IpcServerChannel : System.Collections.IDictionary * System.Runtime.Remoting.Channels.IServerChannelSinkProvider -&gt; System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" Usage="new System.Runtime.Remoting.Channels.Ipc.IpcServerChannel (properties, sinkProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
        <Parameter Name="sinkProvider" Type="System.Runtime.Remoting.Channels.IServerChannelSinkProvider" />
      </Parameters>
      <Docs>
        <param name="properties"><span data-ttu-id="0aa90-122">一个 <see cref="T:System.Collections.IDictionary" /> 集合，它为信道要使用的配置属性指定值。</span><span class="sxs-lookup"><span data-stu-id="0aa90-122">A <see cref="T:System.Collections.IDictionary" /> collection that specifies values for configuration properties to be used by the channel.</span></span></param>
        <param name="sinkProvider"><span data-ttu-id="0aa90-123">信道要使用的 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="0aa90-123">The <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> implementation to be used by the channel.</span></span></param>
        <summary><span data-ttu-id="0aa90-124">使用指定的信道属性和接收器初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0aa90-124">Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> class with the specified channel properties and sink.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0aa90-125">有关通道配置属性的详细信息，请参阅 [通道和格式化程序配置属性](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/kw7c6kwc(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="0aa90-125">For more information about channel configuration properties, see [Channel and Formatter Configuration Properties](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/kw7c6kwc(v=vs.100)).</span></span>  
  
 <span data-ttu-id="0aa90-126">如果不需要接收器功能，请将参数设置 `sinkProvider` 为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="0aa90-126">If you do not require sink functionality, set the `sinkProvider` parameter to `null`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="0aa90-127">在 `exclusiveAddressUse` 参数中将属性设置为时 `false` `properties` ， <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> 可以为同一个命名管道注册多个对象。</span><span class="sxs-lookup"><span data-stu-id="0aa90-127">When setting the `exclusiveAddressUse` property to `false` in the `properties` argument, several <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> objects can be registered for the same named pipe.</span></span> <span data-ttu-id="0aa90-128">在这种情况下，请求可以到达注册的任何通道。</span><span class="sxs-lookup"><span data-stu-id="0aa90-128">In such a case requests can go to any of the channels registered.</span></span> <span data-ttu-id="0aa90-129">仅当同时使用 ALCs 时，才会将此设置视为安全设置。</span><span class="sxs-lookup"><span data-stu-id="0aa90-129">This setting is considered secure only if ALCs are also used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0aa90-130">下面的代码示例演示如何使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="0aa90-130">The following code example shows how to use this constructor.</span></span>  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#41](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server2.cpp#41)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#41](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server2.cs#41)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/kw7c6kwc(v=vs.100)"><span data-ttu-id="0aa90-131">通道和格式化程序配置属性</span><span class="sxs-lookup"><span data-stu-id="0aa90-131">Channel and Formatter Configuration Properties</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IpcServerChannel (string name, string portName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string portName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, portName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IpcServerChannel(System::String ^ name, System::String ^ portName);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Remoting.Channels.Ipc.IpcServerChannel : string * string -&gt; System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" Usage="new System.Runtime.Remoting.Channels.Ipc.IpcServerChannel (name, portName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="portName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="0aa90-132">信道的名称。</span><span class="sxs-lookup"><span data-stu-id="0aa90-132">The name of the channel.</span></span></param>
        <param name="portName"><span data-ttu-id="0aa90-133">信道要使用的 IPC 端口的名称。</span><span class="sxs-lookup"><span data-stu-id="0aa90-133">The name of the IPC port to be used by the channel.</span></span></param>
        <summary><span data-ttu-id="0aa90-134">用指定的信道名称和 IPC 端口名称初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0aa90-134">Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> class with the specified channel name and IPC port name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0aa90-135">此构造函数 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName%2A> 使用参数设置属性 `name` 。</span><span class="sxs-lookup"><span data-stu-id="0aa90-135">This constructor sets the <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName%2A> property by using the `name` parameter.</span></span> <span data-ttu-id="0aa90-136">如果要注册多个通道，则每个通道都必须具有唯一的名称。</span><span class="sxs-lookup"><span data-stu-id="0aa90-136">If you want to register more than one channel, each channel must have a unique name.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0aa90-137">下面的代码示例演示如何使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="0aa90-137">The following code example shows how to use this constructor.</span></span>  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#42](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server2.cpp#42)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#42](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server2.cs#42)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IpcServerChannel (System.Collections.IDictionary properties, System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider, System.Security.AccessControl.CommonSecurityDescriptor securityDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.IDictionary properties, class System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider, class System.Security.AccessControl.CommonSecurityDescriptor securityDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.Collections.IDictionary,System.Runtime.Remoting.Channels.IServerChannelSinkProvider,System.Security.AccessControl.CommonSecurityDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (properties As IDictionary, sinkProvider As IServerChannelSinkProvider, securityDescriptor As CommonSecurityDescriptor)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IpcServerChannel(System::Collections::IDictionary ^ properties, System::Runtime::Remoting::Channels::IServerChannelSinkProvider ^ sinkProvider, System::Security::AccessControl::CommonSecurityDescriptor ^ securityDescriptor);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Remoting.Channels.Ipc.IpcServerChannel : System.Collections.IDictionary * System.Runtime.Remoting.Channels.IServerChannelSinkProvider * System.Security.AccessControl.CommonSecurityDescriptor -&gt; System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" Usage="new System.Runtime.Remoting.Channels.Ipc.IpcServerChannel (properties, sinkProvider, securityDescriptor)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="properties" Type="System.Collections.IDictionary" />
        <Parameter Name="sinkProvider" Type="System.Runtime.Remoting.Channels.IServerChannelSinkProvider" />
        <Parameter Name="securityDescriptor" Type="System.Security.AccessControl.CommonSecurityDescriptor" />
      </Parameters>
      <Docs>
        <param name="properties"><span data-ttu-id="0aa90-138">一个 <see cref="T:System.Collections.IDictionary" /> 集合，它为信道要使用的配置属性指定值。</span><span class="sxs-lookup"><span data-stu-id="0aa90-138">A <see cref="T:System.Collections.IDictionary" /> collection that specifies values for configuration properties to be used by the channel.</span></span></param>
        <param name="sinkProvider"><span data-ttu-id="0aa90-139">信道要使用的 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="0aa90-139">The <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> implementation to be used by the channel.</span></span></param>
        <param name="securityDescriptor"><span data-ttu-id="0aa90-140">要由信道使用的 <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" />。</span><span class="sxs-lookup"><span data-stu-id="0aa90-140">A <see cref="T:System.Security.AccessControl.CommonSecurityDescriptor" /> to be used by the channel.</span></span></param>
        <summary><span data-ttu-id="0aa90-141">使用指定的信道属性、接收器和安全说明符初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0aa90-141">Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> class with the specified channel properties, sink, and security descriptor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0aa90-142">有关通道配置属性的详细信息，请参阅 [通道和格式化程序配置属性](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/kw7c6kwc(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="0aa90-142">For more information about channel configuration properties, see [Channel and Formatter Configuration Properties](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/kw7c6kwc(v=vs.100)).</span></span>  
  
 <span data-ttu-id="0aa90-143">如果不需要接收器功能，请将参数设置 `sinkProvider` 为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="0aa90-143">If you do not require sink functionality, set the `sinkProvider` parameter to `null`.</span></span> <span data-ttu-id="0aa90-144">如果不需要安全描述符，请将 `securityDescriptor` 参数设置为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="0aa90-144">If you do not require a security descriptor, set the `securityDescriptor` parameter to `null`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="0aa90-145">在 `exclusiveAddressUse` 参数中将属性设置为时 `false` `properties` ， <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> 可以为同一个命名管道注册多个对象。</span><span class="sxs-lookup"><span data-stu-id="0aa90-145">When setting the `exclusiveAddressUse` property to `false` in the `properties` argument, several <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> objects can be registered for the same named pipe.</span></span> <span data-ttu-id="0aa90-146">在这种情况下，请求可以到达注册的任何通道。</span><span class="sxs-lookup"><span data-stu-id="0aa90-146">In such a case requests can go to any of the channels registered.</span></span> <span data-ttu-id="0aa90-147">仅当同时使用 ALCs 时，才会将此设置视为安全设置。</span><span class="sxs-lookup"><span data-stu-id="0aa90-147">This setting is considered secure only if ALCs are also used.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/kw7c6kwc(v=vs.100)"><span data-ttu-id="0aa90-148">通道和格式化程序配置属性</span><span class="sxs-lookup"><span data-stu-id="0aa90-148">Channel and Formatter Configuration Properties</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IpcServerChannel (string name, string portName, System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, string portName, class System.Runtime.Remoting.Channels.IServerChannelSinkProvider sinkProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.#ctor(System.String,System.String,System.Runtime.Remoting.Channels.IServerChannelSinkProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, portName As String, sinkProvider As IServerChannelSinkProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IpcServerChannel(System::String ^ name, System::String ^ portName, System::Runtime::Remoting::Channels::IServerChannelSinkProvider ^ sinkProvider);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Remoting.Channels.Ipc.IpcServerChannel : string * string * System.Runtime.Remoting.Channels.IServerChannelSinkProvider -&gt; System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" Usage="new System.Runtime.Remoting.Channels.Ipc.IpcServerChannel (name, portName, sinkProvider)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="portName" Type="System.String" />
        <Parameter Name="sinkProvider" Type="System.Runtime.Remoting.Channels.IServerChannelSinkProvider" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="0aa90-149">信道的名称。</span><span class="sxs-lookup"><span data-stu-id="0aa90-149">The name of the channel.</span></span></param>
        <param name="portName"><span data-ttu-id="0aa90-150">信道要使用的 IPC 端口的名称。</span><span class="sxs-lookup"><span data-stu-id="0aa90-150">The name of the IPC port to be used by the channel.</span></span></param>
        <param name="sinkProvider"><span data-ttu-id="0aa90-151">信道要使用的 <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="0aa90-151">The <see cref="T:System.Runtime.Remoting.Channels.IServerChannelSinkProvider" /> implementation to be used by the channel.</span></span></param>
        <summary><span data-ttu-id="0aa90-152">使用指定的信道名称、IPC 端口名称和接收器初始化 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0aa90-152">Initializes a new instance of the <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel" /> class with the specified channel name, IPC port name, and sink.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0aa90-153">此构造函数 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName%2A> 使用参数设置属性 `name` 。</span><span class="sxs-lookup"><span data-stu-id="0aa90-153">This constructor sets the <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName%2A> property by using the `name` parameter.</span></span> <span data-ttu-id="0aa90-154">如果要注册多个通道，则每个通道都必须具有唯一的名称。</span><span class="sxs-lookup"><span data-stu-id="0aa90-154">If you want to register more than one channel, each channel must have a unique name.</span></span>  
  
 <span data-ttu-id="0aa90-155">如果不需要接收器功能，请将参数设置 `sinkProvider` 为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="0aa90-155">If you do not require sink functionality, set the `sinkProvider` parameter to `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0aa90-156">下面的代码示例演示如何使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="0aa90-156">The following code example shows how to use this constructor.</span></span>  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#43](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server2.cpp#43)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#43](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server2.cs#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelData">
      <MemberSignature Language="C#" Value="public object ChannelData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ChannelData" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChannelData As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ChannelData { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ChannelData : obj" Usage="System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelData" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.Remoting.Channels.IChannelReceiver.ChannelData</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0aa90-157">获取通道特定的数据。</span><span class="sxs-lookup"><span data-stu-id="0aa90-157">Gets channel-specific data.</span></span></summary>
        <value><span data-ttu-id="0aa90-158">包含特定于信道的数据的 <see cref="T:System.Runtime.Remoting.Channels.ChannelDataStore" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="0aa90-158">A <see cref="T:System.Runtime.Remoting.Channels.ChannelDataStore" /> instance that contains channel-specific data.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0aa90-159">虽然作为类的实例返回 <xref:System.Object?displayProperty=nameWithType> ，但可以将此属性的值强制转换为 <xref:System.Runtime.Remoting.Channels.ChannelDataStore> 说明对象所侦听的通道的实例 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> 。</span><span class="sxs-lookup"><span data-stu-id="0aa90-159">Although returned as an instance of the <xref:System.Object?displayProperty=nameWithType> class, the value of this property can be cast to an instance of <xref:System.Runtime.Remoting.Channels.ChannelDataStore> that describes the channel to which the <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel> object listens.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0aa90-160">下面的代码示例说明如何使用 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelData%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="0aa90-160">The following code example shows how to use the <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelData%2A> property.</span></span>  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#15](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server.cpp#15)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#15](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server.cs#15)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelName">
      <MemberSignature Language="C#" Value="public string ChannelName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ChannelName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChannelName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ChannelName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ChannelName : string" Usage="System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.Remoting.Channels.IChannel.ChannelName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0aa90-161">获取当前信道的名称。</span><span class="sxs-lookup"><span data-stu-id="0aa90-161">Gets the name of the current channel.</span></span></summary>
        <value><span data-ttu-id="0aa90-162">包含信道名称的 <see cref="T:System.String" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="0aa90-162">A <see cref="T:System.String" /> instance that contains the name of the channel.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0aa90-163">每个已注册的通道都具有唯一的名称。</span><span class="sxs-lookup"><span data-stu-id="0aa90-163">Every registered channel has a unique name.</span></span> <span data-ttu-id="0aa90-164">此名称用于在调用方法时检索特定通道 <xref:System.Runtime.Remoting.Channels.ChannelServices.GetChannel%2A> 。</span><span class="sxs-lookup"><span data-stu-id="0aa90-164">The name is used to retrieve a specific channel when calling the <xref:System.Runtime.Remoting.Channels.ChannelServices.GetChannel%2A> method.</span></span> <span data-ttu-id="0aa90-165">默认名称为 "ipc 服务器"。</span><span class="sxs-lookup"><span data-stu-id="0aa90-165">The default name is "ipc server".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0aa90-166">下面的代码示例说明如何使用 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="0aa90-166">The following code example shows how to use the <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelName%2A> property.</span></span>  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#12](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server.cpp#12)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#12](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChannelPriority">
      <MemberSignature Language="C#" Value="public int ChannelPriority { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChannelPriority" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelPriority" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChannelPriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ChannelPriority { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ChannelPriority : int" Usage="System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelPriority" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.Remoting.Channels.IChannel.ChannelPriority</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0aa90-167">获取当前信道的优先级。</span><span class="sxs-lookup"><span data-stu-id="0aa90-167">Gets the priority of the current channel.</span></span></summary>
        <value><span data-ttu-id="0aa90-168">一个整数，指示分配给此信道的优先级。</span><span class="sxs-lookup"><span data-stu-id="0aa90-168">An integer that indicates the priority assigned to the channel.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0aa90-169">优先级控制通道数据在实例中的显示顺序 <xref:System.Runtime.Remoting.ObjRef> ; 较高优先级的通道显示在低优先级通道之前。</span><span class="sxs-lookup"><span data-stu-id="0aa90-169">The priority controls the order in which channel data appears in a <xref:System.Runtime.Remoting.ObjRef> instance; higher priority channels appear before lower priority channels.</span></span> <span data-ttu-id="0aa90-170">客户端会按照实例中列出的顺序尝试连接到服务器通道 <xref:System.Runtime.Remoting.ObjRef> 。</span><span class="sxs-lookup"><span data-stu-id="0aa90-170">Clients try to connect to the server channels in the order that they are listed in the <xref:System.Runtime.Remoting.ObjRef> instance.</span></span> <span data-ttu-id="0aa90-171">默认优先级为 20;允许负的优先级。</span><span class="sxs-lookup"><span data-stu-id="0aa90-171">The default priority is 20; negative priorities are allowed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0aa90-172">下面的代码示例说明如何使用 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelPriority%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="0aa90-172">The following code example shows how to use the <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.ChannelPriority%2A> property.</span></span>  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#13](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server.cpp#13)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#13](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChannelUri">
      <MemberSignature Language="C#" Value="public string GetChannelUri ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetChannelUri() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetChannelUri" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChannelUri () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetChannelUri();" />
      <MemberSignature Language="F#" Value="member this.GetChannelUri : unit -&gt; string" Usage="ipcServerChannel.GetChannelUri " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0aa90-173">返回当前信道的 URI。</span><span class="sxs-lookup"><span data-stu-id="0aa90-173">Returns the URI of the current channel.</span></span></summary>
        <returns><span data-ttu-id="0aa90-174">一个 <see cref="T:System.String" /> 包含信道的 URI。</span><span class="sxs-lookup"><span data-stu-id="0aa90-174">A <see cref="T:System.String" /> that contains the URI of the channel.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0aa90-175">客户端使用通道 URI 来指定远程服务器通道。</span><span class="sxs-lookup"><span data-stu-id="0aa90-175">The channel URI is used by the client to specify a remote server channel.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0aa90-176">下面的代码示例演示如何使用 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetChannelUri%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="0aa90-176">The following code example illustrates how to use the <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetChannelUri%2A> method.</span></span>  
  
 [!code-cpp[Remoting_Ipc#12](~/samples/snippets/cpp/VS_Snippets_Remoting/Remoting_Ipc/CPP/server.cpp#12)]
 [!code-csharp[Remoting_Ipc#12](~/samples/snippets/csharp/VS_Snippets_Remoting/Remoting_Ipc/CS/server.cs#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUrlsForUri">
      <MemberSignature Language="C#" Value="public virtual string[] GetUrlsForUri (string objectUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetUrlsForUri(string objectUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetUrlsForUri(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetUrlsForUri (objectUri As String) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::String ^&gt; ^ GetUrlsForUri(System::String ^ objectUri);" />
      <MemberSignature Language="F#" Value="abstract member GetUrlsForUri : string -&gt; string[]&#xA;override this.GetUrlsForUri : string -&gt; string[]" Usage="ipcServerChannel.GetUrlsForUri objectUri" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Remoting.Channels.IChannelReceiver.GetUrlsForUri(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="objectUri"><span data-ttu-id="0aa90-177">需要其 URL 的对象的 URI。</span><span class="sxs-lookup"><span data-stu-id="0aa90-177">The URI of the object for which URLs are required.</span></span></param>
        <summary><span data-ttu-id="0aa90-178">返回具有指定 URI 的对象的所有 URL 的数组，该对象承载在当前的 <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcChannel" /> 实例上。</span><span class="sxs-lookup"><span data-stu-id="0aa90-178">Returns an array of all the URLs for the object with the specified URI, hosted on the current <see cref="T:System.Runtime.Remoting.Channels.Ipc.IpcChannel" /> instance.</span></span></summary>
        <returns><span data-ttu-id="0aa90-179">具有指定 URI 的对象的 URL 的数组，该对象承载在当前的 <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> 实例上。</span><span class="sxs-lookup"><span data-stu-id="0aa90-179">An array of the URLs for an object with the specified URI, hosted on the current <see cref="T:System.Runtime.Remoting.Channels.Tcp.TcpChannel" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0aa90-180">此方法由 <xref:System.Runtime.Remoting.Channels.ChannelServices.GetUrlsForObject%2A?displayProperty=nameWithType> 方法使用。</span><span class="sxs-lookup"><span data-stu-id="0aa90-180">This method is used by the <xref:System.Runtime.Remoting.Channels.ChannelServices.GetUrlsForObject%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0aa90-181">下面的代码示例说明如何使用 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetUrlsForUri%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="0aa90-181">The following code example shows how to use the <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.GetUrlsForUri%2A> method.</span></span>  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#19](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server.cpp#19)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#19](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server.cs#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSecured">
      <MemberSignature Language="C#" Value="public bool IsSecured { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecured" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.IsSecured" />
      <MemberSignature Language="VB.NET" Value="Public Property IsSecured As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSecured { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsSecured : bool with get, set" Usage="System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.IsSecured" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.Remoting.Channels.ISecurableChannel.IsSecured</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0aa90-182">获取或设置一个布尔值，该值指示当前信道是否安全。</span><span class="sxs-lookup"><span data-stu-id="0aa90-182">Gets or sets a Boolean value that indicates whether the current channel is secure.</span></span></summary>
        <value><span data-ttu-id="0aa90-183">一个布尔值，指示当前实例是否安全。</span><span class="sxs-lookup"><span data-stu-id="0aa90-183">A Boolean value that indicates whether the current instance is secure.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public string Parse (string url, out string objectURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Parse(string url, [out] string&amp; objectURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.Parse(System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Parse (url As String, ByRef objectURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ Parse(System::String ^ url, [Runtime::InteropServices::Out] System::String ^ % objectURI);" />
      <MemberSignature Language="F#" Value="abstract member Parse : string * string -&gt; string&#xA;override this.Parse : string * string -&gt; string" Usage="ipcServerChannel.Parse (url, objectURI)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Remoting.Channels.IChannel.Parse(System.String,System.String@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="objectURI" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="url"><span data-ttu-id="0aa90-184">从中提取远程已知对象的 URI 的 URL。</span><span class="sxs-lookup"><span data-stu-id="0aa90-184">The URL from which to extract the URI of the remote well-known object.</span></span></param>
        <param name="objectURI"><span data-ttu-id="0aa90-185">当此方法返回时，包含含有远程已知对象的 URI 的 <see cref="T:System.String" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="0aa90-185">When this method returns, contains a <see cref="T:System.String" /> instance that holds the URI of the remote well-known object.</span></span></param>
        <summary><span data-ttu-id="0aa90-186">从指定 URL 提取信道 URI 和远程已知对象 URI。</span><span class="sxs-lookup"><span data-stu-id="0aa90-186">Extracts the channel URI and the remote well-known object URI from the specified URL.</span></span></summary>
        <returns><span data-ttu-id="0aa90-187">当前信道的 URI。</span><span class="sxs-lookup"><span data-stu-id="0aa90-187">The URI of the current channel.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0aa90-188">对象的 URI 是唯一标识特定对象实例的值。</span><span class="sxs-lookup"><span data-stu-id="0aa90-188">The URI of an object is a value that uniquely identifies a specific object instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="0aa90-189">下面的代码示例说明如何使用 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.Parse%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="0aa90-189">The following code example shows how to use the <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.Parse%2A> method.</span></span>  
  
 [!code-cpp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#19](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CPP/server.cpp#19)]
 [!code-csharp[System.Runtime.Remoting.Channels.Ipc.IpcServerChannel#19](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Runtime.Remoting.Channels.Ipc.IpcServerChannel/CS/server.cs#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartListening">
      <MemberSignature Language="C#" Value="public void StartListening (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartListening(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StartListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StartListening (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void StartListening(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member StartListening : obj -&gt; unit&#xA;override this.StartListening : obj -&gt; unit" Usage="ipcServerChannel.StartListening data" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Remoting.Channels.IChannelReceiver.StartListening(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="0aa90-190">指定初始化状态的对象，如果不想将特定状态传递到信道，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0aa90-190">An object that specifies an initialization state, or <see langword="null" />, if you do not want to pass a specific state to the channel.</span></span></param>
        <summary><span data-ttu-id="0aa90-191">指示当前信道开始侦听请求。</span><span class="sxs-lookup"><span data-stu-id="0aa90-191">Instructs the current channel to start listening for requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0aa90-192">无需调用此方法即可开始在新初始化的通道上进行侦听。</span><span class="sxs-lookup"><span data-stu-id="0aa90-192">It is not necessary to call this method to begin listening on a newly initialized channel.</span></span>  
  
 <span data-ttu-id="0aa90-193">使用此方法可以在 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StopListening%2A> 调用方法停止侦听通道之后，重新启动在通道上进行侦听。</span><span class="sxs-lookup"><span data-stu-id="0aa90-193">Use this method to restart listening on a channel after the <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StopListening%2A> method has been called to stop listening on the channel.</span></span>  
  
 <span data-ttu-id="0aa90-194">数据对象可用于向通道传递特定的初始化状态。</span><span class="sxs-lookup"><span data-stu-id="0aa90-194">The data object can be used to pass a specific initialization state to the channel.</span></span> <span data-ttu-id="0aa90-195">如果你不希望将特定状态传递到通道，请将 `null` 作为 `data` 参数值传递。</span><span class="sxs-lookup"><span data-stu-id="0aa90-195">If you do not want to pass a specific state to the channel, pass `null` as the `data` parameter value.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><span data-ttu-id="0aa90-196">指定的侦听端口不可用。</span><span class="sxs-lookup"><span data-stu-id="0aa90-196">The specified listening port is not available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="StopListening">
      <MemberSignature Language="C#" Value="public void StopListening (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopListening(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StopListening(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub StopListening (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void StopListening(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member StopListening : obj -&gt; unit&#xA;override this.StopListening : obj -&gt; unit" Usage="ipcServerChannel.StopListening data" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Remoting.Channels.IChannelReceiver.StopListening(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Remoting</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="0aa90-197">指定初始化状态的对象，如果不想将特定状态传递到信道，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="0aa90-197">An object that specifies an initialization state, or <see langword="null" />, if you do not want to pass a specific state to the channel.</span></span></param>
        <summary><span data-ttu-id="0aa90-198">指示当前信道停止侦听请求。</span><span class="sxs-lookup"><span data-stu-id="0aa90-198">Instructs the current channel to stop listening for requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0aa90-199">使用此方法停止在通道上进行侦听。</span><span class="sxs-lookup"><span data-stu-id="0aa90-199">Use this method to stop listening on a channel.</span></span> <span data-ttu-id="0aa90-200">若要重新启动侦听，请使用 <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StartListening%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="0aa90-200">To restart listening, use the <xref:System.Runtime.Remoting.Channels.Ipc.IpcServerChannel.StartListening%2A> method.</span></span>  
  
 <span data-ttu-id="0aa90-201">数据对象可用于向通道传递特定的初始化状态。</span><span class="sxs-lookup"><span data-stu-id="0aa90-201">The data object can be used to pass a specific initialization state to the channel.</span></span> <span data-ttu-id="0aa90-202">如果你不希望将特定状态传递到通道，请将 `null` 作为 `data` 参数值传递。</span><span class="sxs-lookup"><span data-stu-id="0aa90-202">If you do not want to pass a specific state to the channel, pass `null` as the `data` parameter value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
