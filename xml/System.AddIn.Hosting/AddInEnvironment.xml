<Type Name="AddInEnvironment" FullName="System.AddIn.Hosting.AddInEnvironment">
  <Metadata><Meta Name="ms.openlocfilehash" Value="890834b6e2dfb122e34debf8cd38b4914d66b25a" /><Meta Name="ms.sourcegitcommit" Value="8fab45da9f77f8bbc3ae5817515b40ac6ff205a2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="01/20/2021" /><Meta Name="ms.locfileid" Value="98617851" /></Metadata><TypeSignature Language="C#" Value="public sealed class AddInEnvironment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AddInEnvironment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.AddIn.Hosting.AddInEnvironment" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AddInEnvironment" />
  <TypeSignature Language="C++ CLI" Value="public ref class AddInEnvironment sealed" />
  <TypeSignature Language="F#" Value="type AddInEnvironment = class" />
  <AssemblyInfo>
    <AssemblyName>System.AddIn</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="ce30d-101">提供外接程序的应用程序域和进程的访问权限。</span><span class="sxs-lookup"><span data-stu-id="ce30d-101">Provides access to the application domain and process of an add-in.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce30d-102">使用此类可将外接程序加载到所需的环境中，这可以是以下项之一：</span><span class="sxs-lookup"><span data-stu-id="ce30d-102">Use this class to load add-ins into a desired environment, which can be one of the following:</span></span>  
  
-   <span data-ttu-id="ce30d-103">具有对象的现有应用程序域 <xref:System.AppDomain> 。</span><span class="sxs-lookup"><span data-stu-id="ce30d-103">An existing application domain for which you have the <xref:System.AppDomain> object.</span></span>  
  
-   <span data-ttu-id="ce30d-104">自动生成的用于激活外接程序的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="ce30d-104">An application domain that was automatically generated to activate an add-in.</span></span>  
  
-   <span data-ttu-id="ce30d-105">现有外部进程。</span><span class="sxs-lookup"><span data-stu-id="ce30d-105">An existing external process.</span></span>  
  
 <span data-ttu-id="ce30d-106">若要获取外接程序的 <xref:System.AddIn.Hosting.AddInEnvironment> 对象，请将外接程序的应用程序域传递给 <xref:System.AddIn.Hosting.AddInEnvironment> 类构造函数。</span><span class="sxs-lookup"><span data-stu-id="ce30d-106">To obtain the <xref:System.AddIn.Hosting.AddInEnvironment> object for an add-in, pass the add-in's application domain to the <xref:System.AddIn.Hosting.AddInEnvironment> class constructor.</span></span> <span data-ttu-id="ce30d-107">或者，可以使用类的 <xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A> 属性 <xref:System.AddIn.Hosting.AddInController> 获取外接程序的 <xref:System.AddIn.Hosting.AddInEnvironment> 对象。</span><span class="sxs-lookup"><span data-stu-id="ce30d-107">Alternatively, you can use the <xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A> property of the <xref:System.AddIn.Hosting.AddInController> class to obtain the add-in's <xref:System.AddIn.Hosting.AddInEnvironment> object.</span></span>  
  
 <span data-ttu-id="ce30d-108">获取 <xref:System.AddIn.Hosting.AddInEnvironment> 对象后，可以执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="ce30d-108">After you obtain the <xref:System.AddIn.Hosting.AddInEnvironment> object, you can do the following:</span></span>  
  
-   <span data-ttu-id="ce30d-109">将该 <xref:System.AddIn.Hosting.AddInEnvironment> 对象传递给相应的 <xref:System.AddIn.Hosting.AddInToken.Activate%2A> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="ce30d-109">Pass that <xref:System.AddIn.Hosting.AddInEnvironment> object to the appropriate <xref:System.AddIn.Hosting.AddInToken.Activate%2A> method overload.</span></span> <span data-ttu-id="ce30d-110">外接程序将在由对象表示的应用程序域和进程中激活 <xref:System.AddIn.Hosting.AddInEnvironment> 。</span><span class="sxs-lookup"><span data-stu-id="ce30d-110">The add-in will be activated in the application domain and process that is represented by the <xref:System.AddIn.Hosting.AddInEnvironment> object.</span></span>  
  
-   <span data-ttu-id="ce30d-111">使用 <xref:System.AddIn.Hosting.AddInEnvironment.Process%2A> 属性可获取 <xref:System.AddIn.Hosting.AddInProcess> 对象。</span><span class="sxs-lookup"><span data-stu-id="ce30d-111">Use the <xref:System.AddIn.Hosting.AddInEnvironment.Process%2A> property to obtain an <xref:System.AddIn.Hosting.AddInProcess> object.</span></span> <span data-ttu-id="ce30d-112">然后将该对象传递给相应的 <xref:System.AddIn.Hosting.AddInToken.Activate%2A> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="ce30d-112">Then pass that object to the appropriate <xref:System.AddIn.Hosting.AddInToken.Activate%2A> method overload.</span></span> <span data-ttu-id="ce30d-113">外接程序将在由对象表示的进程中激活， <xref:System.AddIn.Hosting.AddInProcess> 而在新的应用程序域中激活。</span><span class="sxs-lookup"><span data-stu-id="ce30d-113">The add-in will be activated in the process that is represented by the <xref:System.AddIn.Hosting.AddInProcess> object but in a new application domain.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/previous-versions/dotnet/netframework-4.0/bb384200(v=vs.100)"><span data-ttu-id="ce30d-114">Add-Ins 和扩展性</span><span class="sxs-lookup"><span data-stu-id="ce30d-114">Add-Ins and Extensibility</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AddInEnvironment (AppDomain appDomain);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.AppDomain appDomain) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.AddIn.Hosting.AddInEnvironment.#ctor(System.AppDomain)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (appDomain As AppDomain)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AddInEnvironment(AppDomain ^ appDomain);" />
      <MemberSignature Language="F#" Value="new System.AddIn.Hosting.AddInEnvironment : AppDomain -&gt; System.AddIn.Hosting.AddInEnvironment" Usage="new System.AddIn.Hosting.AddInEnvironment appDomain" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="appDomain" Type="System.AppDomain" />
      </Parameters>
      <Docs>
        <param name="appDomain"><span data-ttu-id="ce30d-115">包含外接程序的应用程序域。</span><span class="sxs-lookup"><span data-stu-id="ce30d-115">The application domain that contains the add-in.</span></span></param>
        <summary><span data-ttu-id="ce30d-116">初始化 <see cref="T:System.AddIn.Hosting.AddInEnvironment" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="ce30d-116">Initializes a new instance of the <see cref="T:System.AddIn.Hosting.AddInEnvironment" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce30d-117">如果有权访问包含所需外接程序的应用程序域，则可以使用此构造函数获取外接程序的 <xref:System.AddIn.Hosting.AddInEnvironment> 对象。</span><span class="sxs-lookup"><span data-stu-id="ce30d-117">If you have access to the application domain that contains the add-in you need, you can use this constructor to obtain the add-in's <xref:System.AddIn.Hosting.AddInEnvironment> object.</span></span> <span data-ttu-id="ce30d-118">否则，可以使用类的 <xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A> 属性 <xref:System.AddIn.Hosting.AddInController> 来获取 <xref:System.AddIn.Hosting.AddInEnvironment> 对象。</span><span class="sxs-lookup"><span data-stu-id="ce30d-118">Otherwise, you can use the <xref:System.AddIn.Hosting.AddInController.AddInEnvironment%2A> property of the <xref:System.AddIn.Hosting.AddInController> class to obtain the <xref:System.AddIn.Hosting.AddInEnvironment> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ce30d-119"><paramref name="appDomain" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ce30d-119"><paramref name="appDomain" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="ce30d-120">需要完全信任权限。</span><span class="sxs-lookup"><span data-stu-id="ce30d-120">Full-trust permission is demanded.</span></span> <span data-ttu-id="ce30d-121">调用链中的调用方没有足够权限。</span><span class="sxs-lookup"><span data-stu-id="ce30d-121">A caller in the call chain does not have sufficient permission.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Process">
      <MemberSignature Language="C#" Value="public System.AddIn.Hosting.AddInProcess Process { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.AddIn.Hosting.AddInProcess Process" />
      <MemberSignature Language="DocId" Value="P:System.AddIn.Hosting.AddInEnvironment.Process" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Process As AddInProcess" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::AddIn::Hosting::AddInProcess ^ Process { System::AddIn::Hosting::AddInProcess ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Process : System.AddIn.Hosting.AddInProcess" Usage="System.AddIn.Hosting.AddInEnvironment.Process" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.AddIn</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.AddIn.Hosting.AddInProcess</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ce30d-122">获取 <see cref="T:System.AddIn.Hosting.AddInProcess" /> 对象，该对象表示在其中运行外接程序的进程。</span><span class="sxs-lookup"><span data-stu-id="ce30d-122">Gets the <see cref="T:System.AddIn.Hosting.AddInProcess" /> object that represents the process in which the add-in is running.</span></span></summary>
        <value><span data-ttu-id="ce30d-123">在其中运行外接程序的进程。</span><span class="sxs-lookup"><span data-stu-id="ce30d-123">The process in which the add-in is running.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ce30d-124">您可以使用此属性在同一个进程中激活多个外接程序，但在不同的域中。</span><span class="sxs-lookup"><span data-stu-id="ce30d-124">You can use this property to activate multiple add-ins in the same process but in different domains.</span></span>  
  
 <span data-ttu-id="ce30d-125">将 <xref:System.AddIn.Hosting.AddInProcess> 通过此属性获取的对象传递给相应的 <xref:System.AddIn.Hosting.AddInToken.Activate%2A> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="ce30d-125">Pass the <xref:System.AddIn.Hosting.AddInProcess> object obtained with this property to the appropriate <xref:System.AddIn.Hosting.AddInToken.Activate%2A> method overload.</span></span>  
  
 <span data-ttu-id="ce30d-126">如果要在外部进程中的同一域中激活它们，则应将 <xref:System.AddIn.Hosting.AddInEnvironment> 对象直接传递给 <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInEnvironment%29?displayProperty=nameWithType> 方法重载。</span><span class="sxs-lookup"><span data-stu-id="ce30d-126">If you want to activate them in the same domain in an external process you should pass the <xref:System.AddIn.Hosting.AddInEnvironment> object directly to the <xref:System.AddIn.Hosting.AddInToken.Activate%60%601%28System.AddIn.Hosting.AddInEnvironment%29?displayProperty=nameWithType> method overload.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
