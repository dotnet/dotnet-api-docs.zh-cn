<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cad914557dd3368b9b87a6526af490d050a18fb7" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89917549" /></Metadata><TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一种调用工作流的方法，调用过程如同方法调用。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.WorkflowInvoker> 包含同步调用工作流的实例方法和静态方法，以及异步调用工作流的实例方法。  
  
 <xref:System.Activities.WorkflowInvoker> 不允许实例控件，如保持、卸载或恢复书签。 如果需要实例控件，请改为使用 <xref:System.Activities.WorkflowApplication>。  
  
 若要在没有实例控件的情况下同步执行工作流，请调用 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 方法。 若要在没有实例控件的情况下异步执行工作流，请使用 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> 和 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 方法对，或使用 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 方法。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Activities.Statements.WriteLine> 同步调用包含单个 <xref:System.Activities.WorkflowInvoker> 活动的工作流。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="new System.Activities.WorkflowInvoker : System.Activities.Activity -&gt; System.Activities.WorkflowInvoker" Usage="new System.Activities.WorkflowInvoker workflow" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">要由 <see cref="T:System.Activities.WorkflowInvoker" /> 类的这一实例调用的工作流的工作流定义。</param>
        <summary>初始化 <see cref="T:System.Activities.WorkflowInvoker" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Activities.WorkflowInvoker> 包含同步调用工作流的实例方法和静态方法，以及异步调用工作流的实例方法。  
  
   
  
## Examples  
 下面的示例调用包含单个 <xref:System.Activities.Statements.WriteLine> 活动的工作流。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用 <see cref="T:System.IAsyncResult" /> 异步设计模式以异步方式调用工作流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 有关详细信息，请参阅 [异步编程概述](/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">工作流已完成后要调用的方法。</param>
        <param name="state">一个特定于应用程序的可选对象，其中包含有关异步操作的信息。</param>
        <summary>使用指定的 <see cref="T:System.AsyncCallback" /> 和用户提供的状态以异步方式调用工作流。</summary>
        <returns>对异步调用操作的引用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在工作流完成时得到通知并检索该工作流的输出参数，请调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 方法的 `callback`。 如果在工作流完成之前调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，此调用将会受到阻止，直至工作流完成。 若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> 的 <xref:System.TimeSpan> 重载。  
  
 此方法使用 <xref:System.IAsyncResult> 异步设计模式以异步方式调用工作流。 有关详细信息，请参阅 [异步编程概述](/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm)。  
  
   
  
## Examples  
 下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。 `LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出自变量。 通过调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 可检索这些参数。 当对 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 的调用返回时，将在输出字典中返回由自变量名键控的每个输出自变量。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">由自变量名称键控的工作流输入参数字典。</param>
        <param name="callback">工作流已完成后要调用的方法。</param>
        <param name="state">一个特定于应用程序的可选对象，其中包含有关异步操作的信息。</param>
        <summary>使用指定的输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" />、<see cref="T:System.AsyncCallback" /> 和用户提供的状态以异步方式调用工作流。</summary>
        <returns>对异步调用操作的引用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在工作流完成时得到通知并检索该工作流的输出参数，请调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 方法的 `callback`。 如果在工作流完成之前调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，此调用将会受到阻止，直至工作流完成。  若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> 的 <xref:System.TimeSpan> 重载。  
  
 此方法使用 <xref:System.IAsyncResult> 异步设计模式以异步方式调用工作流。 有关详细信息，请参阅 [异步编程概述](/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm)。  
  
   
  
## Examples  
 下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。 `LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出自变量。 通过调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 可检索这些参数。 当对 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 的调用返回时，将在输出字典中返回由自变量名键控的每个输出自变量。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
        <param name="callback">工作流已完成后要调用的方法。</param>
        <param name="state">一个特定于应用程序的可选对象，其中包含有关异步操作的信息。</param>
        <summary>使用指定的超时间隔、<see cref="T:System.AsyncCallback" /> 和用户提供的状态以异步方式调用工作流。</summary>
        <returns>对异步调用操作的引用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在工作流完成时得到通知并检索该工作流的输出参数，请调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 方法的 `callback`。 如果在工作流完成之前调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，此调用将会受到阻止，直至工作流完成。 如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且在调用 <xref:System.TimeoutException> 方法时会引发 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>。  
  
> [!NOTE]
>  仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。 如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。  
  
 此方法使用 <xref:System.IAsyncResult> 异步设计模式以异步方式调用工作流。 有关详细信息，请参阅 [异步编程概述](/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm)。  
  
   
  
## Examples  
 下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。 `LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出自变量。 通过调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 可检索这些参数。 当对 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 的调用返回时，将在输出字典中返回由自变量名键控的每个输出自变量。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">由自变量名称键控的工作流输入参数字典。</param>
        <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
        <param name="callback">工作流已完成后要调用的方法。</param>
        <param name="state">一个特定于应用程序的可选对象，其中包含有关异步操作的信息。</param>
        <summary>使用指定的输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" />、超时间隔、<see cref="T:System.AsyncCallback" /> 和用户提供的状态以异步方式调用工作流。</summary>
        <returns>对异步调用操作的引用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在工作流完成时得到通知并检索该工作流的输出参数，请调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 方法的 `callback`。 如果在工作流完成之前调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，此调用将会受到阻止，直至工作流完成。 如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且在调用 <xref:System.TimeoutException> 时会引发 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>。  
  
> [!NOTE]
>  仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。 如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。  
  
 此方法使用 <xref:System.IAsyncResult> 异步设计模式以异步方式调用工作流。 有关详细信息，请参阅 [异步编程概述](/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm)。  
  
   
  
## Examples  
 下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。 `LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出自变量。 通过调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 可检索这些参数。 当对 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 的调用返回时，将在输出字典中返回由自变量名键控的每个输出自变量。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : obj -&gt; unit" Usage="workflowInvoker.CancelAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">要取消的工作流的标记。</param>
        <summary>尝试取消使用指定的 <paramref name="userState" /> 调用的工作流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 只能取消由一种采用 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 参数的 `userState` 重载调用的工作流。  
  
 如果取消成功， <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> 则 <xref:System.Activities.InvokeCompletedEventArgs> 传递到处理程序的的属性 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 设置为 `true` ; 否则设置为 `false` 。  
  
   
  
## Examples  
 下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。 `LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出自变量。 一旦调用了工作流，宿主将尝试取消工作流。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">引用启动工作流的 <see cref="T:System.IAsyncResult" /> 操作的 <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" />。</param>
        <summary>返回使用一种 <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> 重载调用的工作流的结果。</summary>
        <returns>根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的自变量名键控。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在工作流完成时得到通知并检索该工作流的输出参数，请调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 指定的 `callback` 方法的 <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>。 如果在工作流完成之前调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>，此调用将会受到阻止，直至工作流完成。  
  
 此方法返回使用 <xref:System.IAsyncResult> 异步设计模式以异步方式调用的工作流的结果。 有关详细信息，请参阅 [异步编程概述](/dotnet/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm)。  
  
   
  
## Examples  
 下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。 `LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出自变量。 通过调用 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 可检索这些参数。 当对 <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> 的调用返回时，将在输出字典中返回由自变量名键控的每个输出自变量。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extensions : System.Activities.Hosting.WorkflowInstanceExtensionManager" Usage="System.Activities.WorkflowInvoker.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 实例调用的工作流可用的扩展的 <see cref="T:System.Activities.WorkflowInvoker" />。</summary>
        <value>由 <see cref="T:System.Collections.ObjectModel.Collection`1" /> 实例调用的工作流可用的扩展的 <see cref="T:System.Activities.WorkflowInvoker" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 工作流宿主作者使用此属性将扩展添加到 <xref:System.Activities.WorkflowInvoker> 实例，以便这些扩展在由该实例调用的工作流上可用。  
  
   
  
## Examples  
 下面的示例向 <xref:System.Activities.Tracking.TrackingParticipant> 实例的 <xref:System.Activities.WorkflowInvoker.Extensions%2A> 集合注册一个自定义 <xref:System.Activities.WorkflowInvoker>。 此代码示例是 [自定义跟踪](/dotnet/framework/windows-workflow-foundation/samples/custom-tracking) 示例的一部分。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>以同步方式调用工作流，返回根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典（由表示工作流输出的自变量名键控）。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。 保证所有工作流执行都在调用线程上执行。 若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的 <xref:System.TimeSpan> 重载。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用传递给 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 构造函数的工作流定义以同步方式调用工作流。</summary>
        <returns>根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的自变量名键控。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。 保证所有工作流执行都在调用线程上执行。 若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的 <xref:System.TimeSpan> 重载。  
  
   
  
## Examples  
 下面的示例调用包含单个 `DiceRoll` 活动的工作流。 `DiceRoll` 活动包含两个表示掷骰子操作结果的输出自变量。 当对 `Invoke` 的调用返回时，将在输出字典中返回由自变量名键控的每个输出自变量。 使用传入构造函数的工作流定义调用两次工作流 `WorkflowInvoker` 。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 如果工作流的根活动没有输出自变量或主机不需要输出自变量，则可忽略输出自变量。 下面的示例调用一个工作流，该工作流包含单个没有任何输出自变量的 <xref:System.Activities.Statements.WriteLine> 活动。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">要调用的工作流的工作流定义。</param>
        <summary>使用指定的工作流定义以同步方式调用工作流。</summary>
        <returns>根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的自变量名键控。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。 保证所有工作流执行都在调用线程上执行。 若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的 <xref:System.TimeSpan> 重载。  
  
   
  
## Examples  
 下面的示例调用包含单个 `DiceRoll` 活动的工作流。 `DiceRoll` 活动包含两个表示掷骰子操作结果的输出自变量。 当对 `Invoke` 的调用返回时，将在输出字典中返回由自变量名键控的每个输出自变量。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 如果工作流的根活动没有输出自变量或主机不需要输出自变量，则可忽略输出自变量。 下面的示例调用一个工作流，该工作流包含单个没有任何输出自变量的 <xref:System.Activities.Statements.WriteLine> 活动。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">由自变量名称键控的工作流输入参数字典。</param>
        <summary>使用指定的输入参数的 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 以同步方式调用传递到 <see cref="T:System.Collections.Generic.IDictionary`2" /> 构造函数的活动。</summary>
        <returns>根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的自变量名键控。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。 保证所有工作流执行都在调用线程上执行。 若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的 <xref:System.TimeSpan> 重载。  
  
   
  
## Examples  
 下面的示例调用一个工作流，该工作流包含有两个输入自变量和两个输出自变量的单个 `Divide` 活动。 调用工作流时，会传递包含每个输入自变量的值的 `arguments` 字典（由自变量名键控）。 当对 `Invoke` 的调用返回时，将在 `outputs` 字典中返回每个输出参数（也由参数名键控）。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 如果工作流派生自 <xref:System.Activities.ActivityWithResult> （例如 `CodeActivity<TResult>` 或 `Activity<TResult>` ），并且除了正确定义的输出参数外，还有输出参数 <xref:System.Activities.Activity%601.Result%2A> ，则必须使用的非泛型重载（ `Invoke` 如此参数）以检索其他参数。 为此，传递给构造函数的工作流定义 `WorkflowInvoker` 必须为类型 <xref:System.Activities.Activity> 。 在此示例中 `Divide` ，活动派生自 `CodeActivity<int>` ，但被声明为 <xref:System.Activities.Activity> `Invoke` ，这样，将使用的此重载（它返回自变量的字典，而不是返回一个返回值）。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
        <summary>使用指定的超时间隔以同步方式调用工作流。</summary>
        <returns>根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的自变量名键控。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。 保证所有工作流执行都在调用线程上执行。 如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且会引发 <xref:System.TimeoutException>。  
  
> [!NOTE]
>  仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。 如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。  
  
   
  
## Examples  
 下面的示例调用了一个工作流，该工作流包含两个 <xref:System.Activities.Statements.WriteLine> 活动和一个 <xref:System.Activities.Statements.Delay> 活动（使用 <xref:System.Activities.Statements.Delay.Duration%2A> 配置为一分钟）。 此工作流调用两次；第一次使用的超时间隔为两分钟，第二次使用的超时间隔为 30 秒。 第一个工作流成功完成，但第二个工作流未成功完成，而是引发 <xref:System.TimeoutException> 并显示下面的消息。  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 有关使用 `Invoke` 带有输出参数的示例，请参阅 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 与此重载具有相同参数的的重载，而不包含超时间隔。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow">要调用的工作流的工作流定义。</param>
        <param name="inputs">由自变量名称键控的工作流输入参数字典。</param>
        <summary>使用指定的工作流定义和输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 以同步方式调用工作流。</summary>
        <returns>根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的自变量名键控。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。 保证所有工作流执行都在调用线程上执行。 若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的 <xref:System.TimeSpan> 重载。  
  
   
  
## Examples  
 下面的示例调用一个工作流，该工作流包含有两个输入自变量和两个输出自变量的单个 `Divide` 活动。 调用工作流时，会传递包含每个输入自变量的值的 `arguments` 字典（由自变量名键控）。 当对 `Invoke` 的调用返回时，将在 `outputs` 字典中返回每个输出参数（也由参数名键控）。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 如果工作流派生自 <xref:System.Activities.ActivityWithResult> （例如 `CodeActivity<TResult>` 或 `Activity<TResult>` ），并且除了正确定义的输出参数外，还有输出参数 <xref:System.Activities.Activity%601.Result%2A> ，则必须使用的非泛型重载（ `Invoke` 如此参数）以检索其他参数。 为此，传递给 `Invoke` 的工作流定义必须为 <xref:System.Activities.Activity> 类型。 在此示例中 `Divide` ，活动派生自 `CodeActivity<int>` ，但被声明为 <xref:System.Activities.Activity> `Invoke` ，这样，将使用的此重载（它返回自变量的字典，而不是返回一个返回值）。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">要调用的工作流的工作流定义。</param>
        <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
        <summary>使用指定的工作流定义和超时间隔以同步方式调用工作流。</summary>
        <returns>根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的自变量名键控。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。 保证所有工作流执行都在调用线程上执行。 如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且会引发 <xref:System.TimeoutException>。  
  
> [!NOTE]
>  仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。 如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。  
  
   
  
## Examples  
 下面的示例调用了一个工作流，该工作流包含两个 <xref:System.Activities.Statements.WriteLine> 活动和一个 <xref:System.Activities.Statements.Delay> 活动（使用 <xref:System.Activities.Statements.Delay.Duration%2A> 配置为一分钟）。 此工作流调用两次；第一次使用的超时间隔为两分钟，第二次使用的超时间隔为 30 秒。 第一个工作流成功完成，但第二个工作流未成功完成并引发 <xref:System.TimeoutException>。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 有关使用 `Invoke` 带有输出参数的示例，请参阅 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 与此重载具有相同参数的的重载，而不包含超时间隔。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">由自变量名称键控的工作流输入参数字典。</param>
        <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
        <summary>使用指定的输入参数的 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 和指定的超时间隔以同步方式调用传递到 <see cref="T:System.Collections.Generic.IDictionary`2" /> 构造函数的活动。</summary>
        <returns>根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的自变量名键控。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。 保证所有工作流执行都在调用线程上执行。 如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且会引发 <xref:System.TimeoutException>。  
  
> [!NOTE]
>  仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。 如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。  
  
   
  
## Examples  
 下面的示例调用了一个工作流，该工作流包含两个 <xref:System.Activities.Statements.WriteLine> 活动和一个 <xref:System.Activities.Statements.Delay> 活动（使用 <xref:System.Activities.Statements.Delay.Duration%2A> 配置为一分钟）。 此工作流调用两次；第一次使用的超时间隔为两分钟，第二次使用的超时间隔为 30 秒。 第一个工作流成功完成，但第二个工作流未成功完成，而是引发 <xref:System.TimeoutException> 并显示下面的消息。  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 有关将 `Invoke` 与输入和输出参数一起使用的示例，请参阅 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 与此重载具有相同参数的重载，而不包含超时间隔。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">要调用的工作流的工作流定义。</param>
        <param name="inputs">由自变量名称键控的工作流输入参数字典。</param>
        <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
        <summary>使用指定的工作流定义、输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和超时间隔以同步方式调用工作流。</summary>
        <returns>根活动的 <see cref="T:System.Activities.OutArgument" /> 和 <see cref="T:System.Activities.InOutArgument" /> 值字典，由表示工作流输出的自变量名键控。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。 保证所有工作流执行都在调用线程上执行。 如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且会引发 <xref:System.TimeoutException>。  
  
> [!NOTE]
>  仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。 如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。  
  
   
  
## Examples  
 下面的示例调用了一个工作流，该工作流包含两个 <xref:System.Activities.Statements.WriteLine> 活动和一个 <xref:System.Activities.Statements.Delay> 活动（使用 <xref:System.Activities.Statements.Delay.Duration%2A> 配置为一分钟）。 此工作流调用两次；第一次使用的超时间隔为两分钟，第二次使用的超时间隔为 30 秒。 第一个工作流成功完成，但第二个工作流未成功完成并引发 <xref:System.TimeoutException>。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 有关将 `Invoke` 与输入和输出参数一起使用的示例，请参阅 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 与此重载具有相同参数的重载，而不包含超时间隔。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">工作流的类型。</typeparam>
        <param name="workflow">要调用的工作流的工作流定义。 工作流定义需要从 <see cref="T:System.Activities.ActivityWithResult" /> 派生。</param>
        <summary>使用传递给 <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> 构造函数的工作流定义以同步方式调用工作流。</summary>
        <returns>用于活动执行结果的 TResult 类型的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。 保证所有工作流执行都在调用线程上执行。 若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的 <xref:System.TimeSpan> 重载。  
  
   
  
## Examples  
 下面的示例调用一个工作流，该工作流包含 `Add` 具有两个输入参数的单个活动，因为派生自该工作流 `CodeActivity<int>` 具有一个明确定义的 <xref:System.Activities.Activity%601.Result%2A> 输出参数。 调用工作流时，会传递包含每个输入自变量的值的 `arguments` 字典（由自变量名键控）。 当对的调用 `Invoke` 返回时，将 <xref:System.Activities.Activity%601.Result%2A> 返回输出参数的值。 此代码示例基于 [使用 WorkflowInvoker 类](/dotnet/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class) 示例的。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">工作流的类型。</typeparam>
        <param name="workflow">要调用的工作流的工作流定义。</param>
        <param name="inputs">由自变量名称键控的工作流输入参数字典。</param>
        <summary>使用指定的工作流定义和输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 以同步方式调用工作流。</summary>
        <returns>用于活动执行结果的 TResult 类型的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。 保证所有工作流执行都在调用线程上执行。 若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.Invoke%2A> 的 <xref:System.TimeSpan> 重载。  
  
> [!NOTE]
>  仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。 如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。  
  
   
  
## Examples  
 下面的示例调用一个工作流，该工作流包含 `Add` 具有两个输入参数的单个活动，因为派生自该工作流 `CodeActivity<int>` 具有一个明确定义的 <xref:System.Activities.Activity%601.Result%2A> 输出参数。 调用工作流时，会传递包含每个输入自变量的值的 `arguments` 字典（由自变量名键控）。 当对的调用 `Invoke` 返回时，将 <xref:System.Activities.Activity%601.Result%2A> 返回输出参数的值。 此代码示例基于 [使用 WorkflowInvoker 类](/dotnet/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class) 示例的。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">工作流的类型。</typeparam>
        <param name="workflow">要调用的工作流的工作流定义。</param>
        <param name="inputs">由自变量名称键控的工作流输入参数字典。</param>
        <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
        <summary>使用指定的工作流定义、输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和超时间隔以同步方式调用工作流。</summary>
        <returns>用于活动执行结果的 TResult 类型的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。 保证所有工作流执行都在调用线程上执行。 如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且会引发 <xref:System.TimeoutException>。  
  
> [!NOTE]
>  仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。 如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。  
  
   
  
## Examples  
 下面的示例调用一个工作流，该工作流包含 `Add` 具有两个输入参数的单个活动，因为派生自该工作流 `CodeActivity<int>` 具有一个明确定义的 <xref:System.Activities.Activity%601.Result%2A> 输出参数。 调用工作流时，会传递包含每个输入自变量的值的 `arguments` 字典（由自变量名键控）。 当对的调用 `Invoke` 返回时，将 <xref:System.Activities.Activity%601.Result%2A> 返回输出参数的值。 此代码示例基于 [使用 WorkflowInvoker 类](/dotnet/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class) 示例的。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * IDictionary * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, additionalOutputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">工作流的类型。</typeparam>
        <param name="workflow">要调用的工作流的工作流定义。</param>
        <param name="inputs">由自变量名称键控的工作流输入参数字典。</param>
        <param name="additionalOutputs">工作流的其他输出参数字典，由自变量名称键控。</param>
        <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
        <summary>使用指定的工作流定义、输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" />、其他输出参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和超时间隔以同步方式调用工作流。</summary>
        <returns>用于活动执行结果的 TResult 类型的值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将一直受到阻止，直到工作流已完成（包括空闲时间）。 保证所有工作流执行都在调用线程上执行。 如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且会引发 <xref:System.TimeoutException>。  
  
> [!NOTE]
>  仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。 如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。  
  
   
  
## Examples  
 下面的示例调用一个工作流，该工作流包含 `Add` 具有两个输入参数的单个活动，因为派生自该工作流 `CodeActivity<int>` 具有一个明确定义的 <xref:System.Activities.Activity%601.Result%2A> 输出参数。 调用工作流时，会传递包含每个输入自变量的值的 `arguments` 字典（由自变量名键控）。 当对的调用 `Invoke` 返回时，将 <xref:System.Activities.Activity%601.Result%2A> 返回输出参数的值。 此代码示例基于 [使用 WorkflowInvoker 类](/dotnet/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class) 示例的。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用基于事件的异步设计模式以异步方式调用工作流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在工作流完成后得到通知，请处理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。 若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 的 <xref:System.TimeSpan> 重载。  
  
 此方法使用基于事件的异步设计模式以异步方式调用工作流。 有关详细信息，请参阅[基于事件的异步模式概述](https://go.microsoft.com/fwlink/?LinkId=141765)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : unit -&gt; unit" Usage="workflowInvoker.InvokeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>以异步方式调用工作流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在工作流完成后得到通知，请处理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。 若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 的 <xref:System.TimeSpan> 重载。  
  
 此方法使用基于事件的异步设计模式以异步方式调用工作流。 有关详细信息，请参阅[基于事件的异步模式概述](https://go.microsoft.com/fwlink/?LinkId=141765)。  
  
   
  
## Examples  
 下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。 `LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出自变量。 当工作流完成时，将在 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 处理程序中检索这些参数。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; unit" Usage="workflowInvoker.InvokeAsync inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">由自变量名称键控的工作流输入参数字典。</param>
        <summary>使用指定的输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 以异步方式调用工作流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在工作流完成后得到通知，请处理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。 若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 的 <xref:System.TimeSpan> 重载。  
  
 此方法使用基于事件的异步设计模式以异步方式调用工作流。 有关详细信息，请参阅[基于事件的异步模式概述](https://go.microsoft.com/fwlink/?LinkId=141765)。  
  
   
  
## Examples  
 下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。 `LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出自变量。 当工作流完成时，将在 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 处理程序中检索这些参数。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : obj -&gt; unit" Usage="workflowInvoker.InvokeAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">一个用户提供的对象，该对象用于将此特定的异步调用操作与其他当前的异步调用操作区别开来。</param>
        <summary>使用指定的唯一标识符以异步方式调用工作流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `userState` 参数在所有当前对当前活动运行的 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 操作中必须是唯一的。 如果 `userState` 参数不唯一，则引发 <xref:System.ArgumentException>。 `userState` 用于标识处于 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 状态的工作流以及使用 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> 取消工作流。  
  
 若要在工作流完成后得到通知，请处理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。 若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 的 <xref:System.TimeSpan> 重载。  
  
 此方法使用基于事件的异步设计模式以异步方式调用工作流。 有关详细信息，请参阅[基于事件的异步模式概述](https://go.microsoft.com/fwlink/?LinkId=141765)。  
  
   
  
## Examples  
 下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。 `LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出自变量。 当工作流完成时，将在 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 处理程序中检索这些参数。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
        <summary>使用指定的超时间隔以异步方式调用工作流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在工作流完成后得到通知，请处理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。 如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且会引发 <xref:System.TimeoutException>。  
  
> [!NOTE]
>  仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。 如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。  
  
 此方法使用基于事件的异步设计模式以异步方式调用工作流。 有关详细信息，请参阅[基于事件的异步模式概述](https://go.microsoft.com/fwlink/?LinkId=141765)。  
  
   
  
## Examples  
 下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。 `LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出自变量。 当工作流完成时，将在 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 处理程序中检索这些参数。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">由自变量名称键控的工作流输入参数字典。</param>
        <param name="userState">一个用户提供的对象，该对象用于将此特定的异步调用操作与其他当前的异步调用操作区别开来。</param>
        <summary>使用指定的输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和唯一标识符以异步方式调用工作流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `userState` 参数在所有当前对当前活动运行的 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 操作中必须是唯一的。 如果 `userState` 不唯一，则引发 <xref:System.ArgumentException>。 `userState` 用于标识处于 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 状态的工作流以及使用 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> 取消工作流。  
  
 若要在工作流完成后得到通知，请处理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。 若要配置工作流必须在其间完成的超时间隔，请使用一种采用 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 的 <xref:System.TimeSpan> 重载。  
  
 此方法使用基于事件的异步设计模式以异步方式调用工作流。 有关详细信息，请参阅[基于事件的异步模式概述](https://go.microsoft.com/fwlink/?LinkId=141765)。  
  
   
  
## Examples  
 下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。 `LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出自变量。 当工作流完成时，将在 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 处理程序中检索这些参数。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">由自变量名称键控的工作流输入参数字典。</param>
        <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
        <summary>使用指定的输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" /> 和指定的超时间隔以异步方式调用工作流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要在工作流完成后得到通知，请处理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。 如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且会引发 <xref:System.TimeoutException>。  
  
> [!NOTE]
>  仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。 如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。  
  
 此方法使用基于事件的异步设计模式以异步方式调用工作流。 有关详细信息，请参阅[基于事件的异步模式概述](https://go.microsoft.com/fwlink/?LinkId=141765)。  
  
   
  
## Examples  
 下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。 `LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出自变量。 当工作流完成时，将在 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 处理程序中检索这些参数。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
        <param name="userState">一个用户提供的对象，该对象用于将此特定的异步调用操作与其他当前的异步调用操作区别开来。</param>
        <summary>使用指定的超时间隔和唯一标识符以异步方式调用工作流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `userState` 参数在所有当前对当前活动运行的 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 操作中必须是唯一的。 如果 `userState` 不唯一，则引发 <xref:System.ArgumentException>。 `userState` 用于标识处于 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 状态的工作流以及使用 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> 取消工作流。  
  
 若要在工作流完成后得到通知，请处理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。 如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且会引发 <xref:System.TimeoutException>。  
  
> [!NOTE]
>  仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。 如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。  
  
 此方法使用基于事件的异步设计模式以异步方式调用工作流。 有关详细信息，请参阅[基于事件的异步模式概述](https://go.microsoft.com/fwlink/?LinkId=141765)。  
  
   
  
## Examples  
 下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。 `LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出自变量。 当工作流完成时，将在 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 处理程序中检索这些参数。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">由自变量名称键控的工作流输入参数字典。</param>
        <param name="timeout">工作流必须在被中止和引发 <see cref="T:System.TimeoutException" /> 之前在其中完成的时间间隔。</param>
        <param name="userState">一个用户提供的对象，该对象用于将此特定的异步调用操作与其他当前的异步调用操作区别开来。</param>
        <summary>使用指定的输入参数的 <see cref="T:System.Collections.Generic.IDictionary`2" />、指定的超时间隔和唯一标识符以异步方式调用工作流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `userState` 参数在所有当前对当前活动运行的 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 操作中必须是唯一的。 如果 `userState` 不唯一，则引发 <xref:System.ArgumentException>。 `userState` 用于标识处于 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 状态的工作流以及使用 <xref:System.Activities.WorkflowInvoker.CancelAsync%2A> 取消工作流。  
  
 若要在工作流完成后得到通知，请处理 <xref:System.Activities.WorkflowInvoker.InvokeCompleted>。 如果工作流未在指定的超时间隔内完成，那么工作流就会被中止，并且会引发 <xref:System.TimeoutException>。  
  
> [!NOTE]
>  仅在达到超时间隔且工作流在执行期间进入空闲状态时才会引发 <xref:System.TimeoutException>。 如果工作流未进入空闲状态，那么完成时间超过指定超时间隔的工作流将会成功完成。  
  
 此方法使用基于事件的异步设计模式以异步方式调用工作流。 有关详细信息，请参阅[基于事件的异步模式概述](https://go.microsoft.com/fwlink/?LinkId=141765)。  
  
   
  
## Examples  
 下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。 `LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出自变量。 当工作流完成时，将在 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 处理程序中检索这些参数。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberSignature Language="F#" Value="member this.InvokeCompleted : EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " Usage="member this.InvokeCompleted : System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在完成或取消由一种 <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> 重载调用的工作流时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 处理此事件可确定使用 <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 重载之一调用的工作流是否成功完成，并检索完成的工作流的输出自变量。  
  
   
  
## Examples  
 下面的示例调用包含单个 `LongRunningDiceRoll` 活动的工作流。 `LongRunningDiceRoll` 活动包含两个表示掷骰子操作结果的输出自变量。 当工作流完成时，将在 <xref:System.Activities.WorkflowInvoker.InvokeCompleted> 处理程序中检索这些参数。  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
