<Type Name="SemanticResultKey" FullName="System.Speech.Recognition.SemanticResultKey">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a440b81ef271c75b2d8e28bf681ef6b7c11a25aa" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89691489" /></Metadata><TypeSignature Language="C#" Value="public class SemanticResultKey" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultKey" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultKey" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultKey" />
  <TypeSignature Language="F#" Value="type SemanticResultKey = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7dcef-101">将密匙字符串与 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 值关联，以定义 <see cref="T:System.Speech.Recognition.SemanticValue" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="7dcef-101">Associates a key string with <see cref="T:System.Speech.Recognition.SemanticResultValue" /> values to define <see cref="T:System.Speech.Recognition.SemanticValue" /> objects.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7dcef-102">系统中语义表达式的基本单位是 <xref:System.Speech.Recognition.SemanticValue> ，它是一个键/值对。</span><span class="sxs-lookup"><span data-stu-id="7dcef-102">The basic unit of semantic expression in System.Speech is the <xref:System.Speech.Recognition.SemanticValue>, which is a key/value pair.</span></span>  
  
 <span data-ttu-id="7dcef-103">使用 <xref:System.Speech.Recognition.SemanticResultKey> 对象，可以标记 <xref:System.Speech.Recognition.SemanticResultValue> 对象和字符串中包含的实例， <xref:System.Speech.Recognition.GrammarBuilder> 以便可以在识别的实例中轻松访问这些值 <xref:System.Speech.Recognition.SemanticValue> 。</span><span class="sxs-lookup"><span data-stu-id="7dcef-103">Using <xref:System.Speech.Recognition.SemanticResultKey> objects, you tag <xref:System.Speech.Recognition.SemanticResultValue> instances contained in <xref:System.Speech.Recognition.GrammarBuilder> objects and strings so that the values may readily be accessed from <xref:System.Speech.Recognition.SemanticValue> instances on recognition.</span></span>  
  
 <span data-ttu-id="7dcef-104">可以将 <xref:System.Speech.Recognition.SemanticResultValue> 和 <xref:System.Speech.Recognition.SemanticResultKey> 对象与和对象结合使用 <xref:System.Speech.Recognition.GrammarBuilder> <xref:System.Speech.Recognition.Choices> 来定义语音识别语法的语义结构。</span><span class="sxs-lookup"><span data-stu-id="7dcef-104">You can use <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> objects, in conjunction with <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects, to define the semantic structure for a speech recognition grammar.</span></span> <span data-ttu-id="7dcef-105">若要访问识别结果中的语义信息，请 <xref:System.Speech.Recognition.SemanticValue> <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> 在上通过属性获取的实例 <xref:System.Speech.Recognition.RecognizedPhrase> 。</span><span class="sxs-lookup"><span data-stu-id="7dcef-105">To access the semantic information in a recognition result, obtain an instance of <xref:System.Speech.Recognition.SemanticValue> through the <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property on <xref:System.Speech.Recognition.RecognizedPhrase>.</span></span>  
  
  
## Examples  
 <span data-ttu-id="7dcef-106">下面的示例创建一个 <xref:System.Speech.Recognition.Grammar> 来识别格式为 "My password ..." 的密码输入，其中实际输入与通配符匹配。</span><span class="sxs-lookup"><span data-stu-id="7dcef-106">The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form "My password is …", where the actual input is matched with a wildcard.</span></span>  
  
 <span data-ttu-id="7dcef-107">通配符使用语义键进行标记， <xref:System.Speech.Recognition.Grammar.SpeechRecognized> 处理程序将检查是否存在此标记以验证是否已发生密码输入。</span><span class="sxs-lookup"><span data-stu-id="7dcef-107">The wildcard is tagged with a semantic key, and the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag to verify that a password input has occurred.</span></span>  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized += delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
  {  
    SemanticValue semantics = eventArgs.Result.Semantics;  
    RecognitionResult result=eventArgs.Result;  
  
    if (!semantics.ContainsKey("Password"))   
    {  
      SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
    }  
    else   
    {  
      RecognizedAudio pwdAudio = result.GetAudioForWordRange(result.Words[3], result.Words[result.Words.Count - 1]);  
      MemoryStream pwdMemoryStream = new MemoryStream();  
      pwdAudio.WriteToAudioStream(pwdMemoryStream);  
      if (!IsValidPwd(pwdMemoryStream))   
      {  
        string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
        FileStream waveStream = new FileStream(badPwd, FileMode.Create);  
        pwdAudio.WriteToWaveStream(waveStream);  
        waveStream.Flush();  
        waveStream.Close();  
        SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);  
  
      }  
    }  
  };  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.SemanticValue" />
    <altmember cref="T:System.Speech.Recognition.SemanticResultValue" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361587(v%3doffice.14)"><span data-ttu-id="7dcef-108">使用 SemanticResultKey 提取 SemanticResultValue</span><span class="sxs-lookup"><span data-stu-id="7dcef-108">Using a SemanticResultKey to Extract a SemanticResultValue</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7dcef-109">构造一个 <see cref="T:System.Speech.Recognition.SemanticResultKey" /> 实例并将项与语法组件关联。</span><span class="sxs-lookup"><span data-stu-id="7dcef-109">Constructs an instance of <see cref="T:System.Speech.Recognition.SemanticResultKey" /> and associates the key with grammar components.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7dcef-110">的构造函数 <xref:System.Speech.Recognition.SemanticResultKey> 指定一个文本标记 (语义密钥) 和一组要添加到语音识别语法的语法组件。</span><span class="sxs-lookup"><span data-stu-id="7dcef-110">The constructors for <xref:System.Speech.Recognition.SemanticResultKey> specify a text tag (the semantic key) and a set of grammar components to add to a speech recognition grammar.</span></span>  
  
 <span data-ttu-id="7dcef-111">语法组件可以指定为对象的数组 <xref:System.Speech.Recognition.GrammarBuilder> ，也可以指定为实例的数组 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="7dcef-111">The grammar components can be specified either as an array of <xref:System.Speech.Recognition.GrammarBuilder> objects, or as an array of <xref:System.String> instances.</span></span>  
  
 <span data-ttu-id="7dcef-112">如果语法组件用于识别，则可以 <xref:System.Speech.Recognition.SemanticValue> 使用提供给构造函数的文本标记将返回的 <xref:System.Speech.Recognition.SemanticResultKey> 作为语义键。</span><span class="sxs-lookup"><span data-stu-id="7dcef-112">If the grammar components are used in recognition, you can access the returned <xref:System.Speech.Recognition.SemanticValue> using the text tag provided to the constructor of <xref:System.Speech.Recognition.SemanticResultKey> as a semantic key.</span></span> <span data-ttu-id="7dcef-113"><xref:System.Speech.Recognition.SemanticValue.Value%2A>实例的属性 <xref:System.Speech.Recognition.SemanticValue> 将由的定义中使用的语法组件确定 <xref:System.Speech.Recognition.SemanticResultKey> 。</span><span class="sxs-lookup"><span data-stu-id="7dcef-113">The <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of the <xref:System.Speech.Recognition.SemanticValue> instance will be determined by the grammar components used in the definition of <xref:System.Speech.Recognition.SemanticResultKey>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params System.Speech.Recognition.GrammarBuilder[] builders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, class System.Speech.Recognition.GrammarBuilder[] builders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray builders As GrammarBuilder())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::Speech::Recognition::GrammarBuilder ^&gt; ^ builders);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultKey : string * System.Speech.Recognition.GrammarBuilder[] -&gt; System.Speech.Recognition.SemanticResultKey" Usage="new System.Speech.Recognition.SemanticResultKey (semanticResultKey, builders)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="builders" Type="System.Speech.Recognition.GrammarBuilder[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey"><span data-ttu-id="7dcef-114">要用于作为语义关键访问 <see cref="T:System.Speech.Recognition.SemanticValue" /> 与参数指定的对象 <see cref="T:System.Speech.Recognition.GrammarBuilder" />关联的实例 <paramref name="builders" /> 的标记。</span><span class="sxs-lookup"><span data-stu-id="7dcef-114">The tag to be used as a semantic key to access the <see cref="T:System.Speech.Recognition.SemanticValue" /> instance associated with the <see cref="T:System.Speech.Recognition.GrammarBuilder" /> objects specified by the <paramref name="builders" /> argument.</span></span></param>
        <param name="builders"><span data-ttu-id="7dcef-115">将与可用 <paramref name="semanticResultKey" /> 中定义的标记访问的 <see cref="T:System.Speech.Recognition.SemanticValue" /> 对象相关联的语法组件的数组。</span><span class="sxs-lookup"><span data-stu-id="7dcef-115">An array of grammar components that will be associated with a <see cref="T:System.Speech.Recognition.SemanticValue" /> object accessible with the tag defined in <paramref name="semanticResultKey" />.</span></span></param>
        <summary><span data-ttu-id="7dcef-116">分配一个语义密匙给一个或多个 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 对象，用于创建语音识别语法。</span><span class="sxs-lookup"><span data-stu-id="7dcef-116">Assigns a semantic key to one or more <see cref="T:System.Speech.Recognition.GrammarBuilder" /> objects used to create a speech recognition grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7dcef-117">由于隐式转换，因此 `builders` 参数 <xref:System.Speech.Recognition.SemanticResultValue> 还支持、 <xref:System.Speech.Recognition.SemanticResultKey> 、 <xref:System.Speech.Recognition.Choices> 和 <xref:System.String> 对象。</span><span class="sxs-lookup"><span data-stu-id="7dcef-117">Because of implicit conversions, the `builders` argument supports <xref:System.Speech.Recognition.SemanticResultValue>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.Choices>, and <xref:System.String> objects as well.</span></span> <span data-ttu-id="7dcef-118">有关隐式转换的详细信息，请参阅 <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7dcef-118">For more information on implicit conversions, see <xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>.</span></span>  
  
 <span data-ttu-id="7dcef-119">执行识别操作时，将 <xref:System.Speech.Recognition.GrammarBuilder> 在参数中提供的对象 `builders` 视为顺序。</span><span class="sxs-lookup"><span data-stu-id="7dcef-119">When performing a recognition operation, the <xref:System.Speech.Recognition.GrammarBuilder> objects provided in the `builders` argument are treated as sequential.</span></span> <span data-ttu-id="7dcef-120">例如，如果 <xref:System.Speech.Recognition.SemanticResultValue> 使用以下构造 <xref:System.Speech.Recognition.Grammar> ，则识别引擎的输入必须在序列中包含单词 "quick 棕色 fox" 才能被识别。</span><span class="sxs-lookup"><span data-stu-id="7dcef-120">For example, if the following <xref:System.Speech.Recognition.SemanticResultValue> is used to construct a <xref:System.Speech.Recognition.Grammar>, input to the recognition engine must contain the words "the quick brown fox" in sequence to be recognized.</span></span>  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey(  
    "stringTest", new GrammarBuilder[] {  
    new GrammarBuilder("the"),  
    new GrammarBuilder("quick"),  
    new GrammarBuilder("brown"),  
    new GrammarBuilder("fox")});  
```  
  
 <span data-ttu-id="7dcef-121">`semanticResultKey`参数包含用于访问可能返回的标记的标记 <xref:System.Speech.Recognition.SemanticValue> 。</span><span class="sxs-lookup"><span data-stu-id="7dcef-121">The `semanticResultKey` argument contains the tag used to access the <xref:System.Speech.Recognition.SemanticValue> which might be returned.</span></span>  
  
 <span data-ttu-id="7dcef-122">的由 <xref:System.Speech.Recognition.SemanticValue.Value%2A> <xref:System.Speech.Recognition.SemanticValue> <xref:System.Speech.Recognition.GrammarBuilder> 参数提供的实例确定 `builders` 。</span><span class="sxs-lookup"><span data-stu-id="7dcef-122">The <xref:System.Speech.Recognition.SemanticValue.Value%2A> of the <xref:System.Speech.Recognition.SemanticValue> is determined by the <xref:System.Speech.Recognition.GrammarBuilder> instances provided by the `builders` parameter.</span></span>  
  
 <span data-ttu-id="7dcef-123">如果 <xref:System.Speech.Recognition.GrammarBuilder> 对象不包含的定义实例，则的 <xref:System.Speech.Recognition.SemanticResultValue> 值 <xref:System.Speech.Recognition.SemanticValue> 为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="7dcef-123">If the <xref:System.Speech.Recognition.GrammarBuilder> objects contain no defining instances of <xref:System.Speech.Recognition.SemanticResultValue>, the value of the <xref:System.Speech.Recognition.SemanticValue> is `null`.</span></span>  
  
 <span data-ttu-id="7dcef-124">如果 <xref:System.Speech.Recognition.GrammarBuilder> 参数中提供的对象 `builders` 提供未标记的 (与 <xref:System.Speech.Recognition.SemanticResultKey> 识别逻辑使用的对象) 实例相关联 <xref:System.Speech.Recognition.SemanticResultValue> ，则该实例 <xref:System.Speech.Recognition.SemanticResultValue> 将定义所 <xref:System.Speech.Recognition.SemanticValue.Value%2A> 生成的的属性 <xref:System.Speech.Recognition.SemanticValue> 。</span><span class="sxs-lookup"><span data-stu-id="7dcef-124">If the <xref:System.Speech.Recognition.GrammarBuilder> objects provided in the `builders` parameter provide an untagged (not associated with a <xref:System.Speech.Recognition.SemanticResultKey> object) <xref:System.Speech.Recognition.SemanticResultValue> instance that is used by the recognition logic, that instance of <xref:System.Speech.Recognition.SemanticResultValue> will define the <xref:System.Speech.Recognition.SemanticValue.Value%2A> property of the <xref:System.Speech.Recognition.SemanticValue> that is produced.</span></span>  
  
 <span data-ttu-id="7dcef-125">参数指定的对象中应该有一个且只有一个无标记的 <xref:System.Speech.Recognition.SemanticResultValue> 实例 <xref:System.Speech.Recognition.GrammarBuilder> `builders` 。</span><span class="sxs-lookup"><span data-stu-id="7dcef-125">There should be one, and only one, untagged <xref:System.Speech.Recognition.SemanticResultValue> instance in the <xref:System.Speech.Recognition.GrammarBuilder> objects specified by the `builders` parameter.</span></span> <span data-ttu-id="7dcef-126">如果有多个无标记的实例 <xref:System.Speech.Recognition.SemanticResultValue> 与相关联 <xref:System.Speech.Recognition.SemanticResultKey> ，则每个实例将尝试在 <xref:System.Speech.Recognition.SemanticValue> 识别结果中设置生成的值。</span><span class="sxs-lookup"><span data-stu-id="7dcef-126">If multiple instances of untagged <xref:System.Speech.Recognition.SemanticResultValue> are associated with the <xref:System.Speech.Recognition.SemanticResultKey>, each will attempt to the set the value of the <xref:System.Speech.Recognition.SemanticValue> produced in the recognition result.</span></span> <span data-ttu-id="7dcef-127">这是不允许的，识别器在尝试使用 <xref:System.Speech.Recognition.Grammar> 使用此类实例创建的时，将生成异常 <xref:System.Speech.Recognition.SemanticResultKey> 。</span><span class="sxs-lookup"><span data-stu-id="7dcef-127">This is not permitted, and the recognizer will generate an exception when it attempts to use a <xref:System.Speech.Recognition.Grammar> created using such a <xref:System.Speech.Recognition.SemanticResultKey> instance.</span></span>  
  
 <span data-ttu-id="7dcef-128"><xref:System.Speech.Recognition.SemanticResultValue> <xref:System.Speech.Recognition.GrammarBuilder> 由参数指定的对象中包含的实例 `builders` ，并且已与另一个关联的实例 <xref:System.Speech.Recognition.SemanticResultKey> 不会对当前实例产生任何影响 <xref:System.Speech.Recognition.SemanticResultKey> 。</span><span class="sxs-lookup"><span data-stu-id="7dcef-128">Instances of <xref:System.Speech.Recognition.SemanticResultValue> contained in the <xref:System.Speech.Recognition.GrammarBuilder> objects specified by the `builders` parameter and already associated with another <xref:System.Speech.Recognition.SemanticResultKey> have no effect on the current <xref:System.Speech.Recognition.SemanticResultKey> instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7dcef-129">下面的示例创建一个 <xref:System.Speech.Recognition.Grammar> 来识别格式为 "My password ..." 的密码输入，其中实际输入与通配符匹配。</span><span class="sxs-lookup"><span data-stu-id="7dcef-129">The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form "My password is …", where the actual input is matched with a wildcard.</span></span>  
  
 <span data-ttu-id="7dcef-130">通配符由 <xref:System.Speech.Recognition.SpeechRecognizer> 其键值为 "Password" 的进行标记。</span><span class="sxs-lookup"><span data-stu-id="7dcef-130">The wildcard is tagged by a <xref:System.Speech.Recognition.SpeechRecognizer> whose key value is "Password".</span></span> <span data-ttu-id="7dcef-131"><xref:System.Speech.Recognition.Grammar.SpeechRecognized>处理程序将检查此标记是否存在，获取密码的音频输入，并验证密码。</span><span class="sxs-lookup"><span data-stu-id="7dcef-131">The <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag, obtains the audio input of the password, and verifies the password.</span></span>  
  
```csharp  
private void pwdGrammar()   
{  
  GrammarBuilder pwdBuilder = new GrammarBuilder("My Password is");  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey wildcardKey= new SemanticResultKey("Password", wildcardBuilder);  
  pwdBuilder+=wildcardKey;  
  Grammar grammar = new Grammar(pwdBuilder);  
  grammar.Name = "Password input";  
  
  grammar.SpeechRecognized +=   
    delegate(object sender, SpeechRecognizedEventArgs eventArgs)   
    {  
      SemanticValue semantics = eventArgs.Result.Semantics;  
      RecognitionResult result=eventArgs.Result;  
  
      if (!semantics.ContainsKey("Password"))   
      {  
        SpeechUI.SendTextFeedback(eventArgs.Result, "No Password Provided", false);  
      }  
      else   
      {  
        RecognizedAudio pwdAudio = result.GetAudioForWordRange(  
                  result.Words[3],  
                  result.Words[result.Words.Count - 1]);  
                  MemoryStream pwdMemoryStream = new MemoryStream();  
                  pwdAudio.WriteToAudioStream(pwdMemoryStream);  
        if (!IsValidPwd(pwdMemoryStream))   
        {  
          string badPwd = System.IO.Path.GetTempPath() + "BadPwd" + (new Random()).Next().ToString() + ".wav";  
          FileStream waveStream = new FileStream(badPwd, FileMode.Create);    
          pwdAudio.WriteToWaveStream(waveStream);  
          waveStream.Flush();  
          waveStream.Close();  
          SpeechUI.SendTextFeedback(eventArgs.Result, "Invalid Password", false);      
        }  
      }  
    };  
  
  grammar.Enabled = true;  
  _recognizer.LoadGrammar(grammar);  
  UpdateGrammarTree(_grammarTreeView, _recognizer);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultKey (string semanticResultKey, params string[] phrases);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string semanticResultKey, string[] phrases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (semanticResultKey As String, ParamArray phrases As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultKey(System::String ^ semanticResultKey, ... cli::array &lt;System::String ^&gt; ^ phrases);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultKey : string * string[] -&gt; System.Speech.Recognition.SemanticResultKey" Usage="new System.Speech.Recognition.SemanticResultKey (semanticResultKey, phrases)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="semanticResultKey" Type="System.String" />
        <Parameter Name="phrases" Type="System.String[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="semanticResultKey"><span data-ttu-id="7dcef-132">要用于访问与由 <paramref name="phrases" /> 参数指定的对象 <see cref="T:System.String" /> 相关联的 <see cref="T:System.Speech.Recognition.SemanticValue" /> 实例的标记。</span><span class="sxs-lookup"><span data-stu-id="7dcef-132">The tag to be used access the <see cref="T:System.Speech.Recognition.SemanticValue" /> instance associated with the <see cref="T:System.String" /> objects specified by the <paramref name="phrases" /> argument.</span></span></param>
        <param name="phrases"><span data-ttu-id="7dcef-133">一个或多个 <see cref="T:System.String" /> 对象，其连接文本将与使用定义在 <paramref name="semanticResultKey" /> 标记可访问的 <see cref="T:System.Speech.Recognition.SemanticValue" /> 对象关联。</span><span class="sxs-lookup"><span data-stu-id="7dcef-133">One or more <see cref="T:System.String" /> objects, whose concatenated text will be associated with a <see cref="T:System.Speech.Recognition.SemanticValue" /> object accessible with the tag defined in <paramref name="semanticResultKey" />.</span></span></param>
        <summary><span data-ttu-id="7dcef-134">分配一个语义密匙给一个或多个 <see cref="T:System.String" /> 实例，用于创建语音识别语法。</span><span class="sxs-lookup"><span data-stu-id="7dcef-134">Assigns a semantic key to one or more <see cref="T:System.String" /> instances used to create a speech recognition grammar.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7dcef-135">执行识别操作时，将 <xref:System.String> 参数中使用的对象 `phrases` 视为顺序。</span><span class="sxs-lookup"><span data-stu-id="7dcef-135">When performing a recognition operation, the <xref:System.String> objects used in the `phrases` parameter are treated as sequential.</span></span> <span data-ttu-id="7dcef-136">例如，如果 <xref:System.Speech.Recognition.SemanticResultValue> 使用以下构造 <xref:System.Speech.Recognition.Grammar> ，则识别引擎的输入必须在序列中包含单词 "quick 棕色 fox" 才能被识别。</span><span class="sxs-lookup"><span data-stu-id="7dcef-136">For example, if the following <xref:System.Speech.Recognition.SemanticResultValue> is used to construct a <xref:System.Speech.Recognition.Grammar>, input to the recognition engine must contain the words "the quick brown fox" in sequence to be recognized.</span></span>  
  
```csharp  
SemanticResultKey stringTest=new SemanticResultKey("stringTest",   
                                new string[] {  
                                               "the",  
                                               "quick",  
                                               "brown",  
                                               "fox"});  
```  
  
 <span data-ttu-id="7dcef-137">`semanticResultKey`参数确定用于访问可能返回的的键 <xref:System.Speech.Recognition.SemanticValue> 。</span><span class="sxs-lookup"><span data-stu-id="7dcef-137">The `semanticResultKey` argument determines the key used to access the <xref:System.Speech.Recognition.SemanticValue> which might be returned.</span></span>  
  
 <span data-ttu-id="7dcef-138">如果 <xref:System.Speech.Recognition.Grammar> 使用 <xref:System.Speech.Recognition.GrammarBuilder> 包含字符串对象数组的语义键的对象构造，则 <xref:System.Speech.Recognition.SemanticValue.Value%2A> <xref:System.Speech.Recognition.SemanticValue> 由识别操作生成的将是在识别中使用的字符串。</span><span class="sxs-lookup"><span data-stu-id="7dcef-138">If you construct a <xref:System.Speech.Recognition.Grammar> using a <xref:System.Speech.Recognition.GrammarBuilder> object that contains a semantic key with an array of string objects,  the <xref:System.Speech.Recognition.SemanticValue.Value%2A> of the <xref:System.Speech.Recognition.SemanticValue> produced by a recognition operation  will be the string used in recognition.</span></span> <span data-ttu-id="7dcef-139">在前面的示例中，这意味着将 <xref:System.Speech.Recognition.SemanticValue.Value%2A> 是 "快速棕色的 fox"。</span><span class="sxs-lookup"><span data-stu-id="7dcef-139">In the preceding example, this means that <xref:System.Speech.Recognition.SemanticValue.Value%2A> would be "the quick brown fox".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7dcef-140">下面的示例 <xref:System.Speech.Recognition.Grammar> 从 <xref:System.Speech.Recognition.GrammarBuilder> 使用的对象创建 <xref:System.Speech.Recognition.SemanticResultKey> ，该对象由对象数组定义 <xref:System.String> 。</span><span class="sxs-lookup"><span data-stu-id="7dcef-140">The following example creates a <xref:System.Speech.Recognition.Grammar> from a <xref:System.Speech.Recognition.GrammarBuilder> object that uses a <xref:System.Speech.Recognition.SemanticResultKey>, which is defined by an array of <xref:System.String> objects.</span></span>  
  
 <span data-ttu-id="7dcef-141">使用所创建的识别引擎 <xref:System.Speech.Recognition.Grammar> 将识别 "color red 绿蓝零" 这一短语。</span><span class="sxs-lookup"><span data-stu-id="7dcef-141">A recognition engine using the <xref:System.Speech.Recognition.Grammar> created will recognize the phrase "color red green blue zero".</span></span> <span data-ttu-id="7dcef-142"><xref:System.Speech.Recognition.RecognizedPhrase>由识别返回的的语义将包含 <xref:System.Speech.Recognition.SemanticValue> 带有 <xref:System.Speech.Recognition.SemanticValue.Value%2A> "红色绿色蓝色" 的。</span><span class="sxs-lookup"><span data-stu-id="7dcef-142">The semantics of the <xref:System.Speech.Recognition.RecognizedPhrase> returned by recognition will contain a <xref:System.Speech.Recognition.SemanticValue> with a <xref:System.Speech.Recognition.SemanticValue.Value%2A> of "red green blue".</span></span> <span data-ttu-id="7dcef-143">您可以 <xref:System.Speech.Recognition.SemanticValue> 使用 "代码" 标记访问。</span><span class="sxs-lookup"><span data-stu-id="7dcef-143">You can access the <xref:System.Speech.Recognition.SemanticValue> using the "code" tag.</span></span>  
  
 <span data-ttu-id="7dcef-144">由于 `SemanticResultValue("zero", 5)` 追加到了 <xref:System.Speech.Recognition.GrammarBuilder> ，的根对象的 <xref:System.Speech.Recognition.SemanticValue> <xref:System.Speech.Recognition.RecognizedPhrase> 值将为5。</span><span class="sxs-lookup"><span data-stu-id="7dcef-144">Because of the `SemanticResultValue("zero", 5)` appended to the <xref:System.Speech.Recognition.GrammarBuilder>, the root <xref:System.Speech.Recognition.SemanticValue> object in the <xref:System.Speech.Recognition.RecognizedPhrase> will have a value of 5.</span></span>  
  
```csharp  
private void keyTest()   
{  
  // Say "color red green blue zero"  
  GrammarBuilder gb = new GrammarBuilder("color") +  
                        new SemanticResultKey("code",   
                          (new string[] {"red", "green", "blue"})) +  
                        new SemanticResultValue("zero", 5);  
  Grammar g = new Grammar(gb);  
  g.Name = "keyTest";  
  _recognizer.LoadGrammar(g);  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultKey.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7dcef-145">从 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 实例返回 <see cref="T:System.Speech.Recognition.SemanticResultKey" /> 结构的实例。</span><span class="sxs-lookup"><span data-stu-id="7dcef-145">Returns an instance of <see cref="T:System.Speech.Recognition.GrammarBuilder" /> constructed from the current <see cref="T:System.Speech.Recognition.SemanticResultKey" /> instance.</span></span></summary>
        <returns><span data-ttu-id="7dcef-146">从当前 <see langword="SemanticResultKey" /> 实例构造的 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 的实例。</span><span class="sxs-lookup"><span data-stu-id="7dcef-146">An instance of <see cref="T:System.Speech.Recognition.GrammarBuilder" /> constructed from the current <see langword="SemanticResultKey" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7dcef-147">的使用 <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> 等效于使用 <xref:System.Speech.Recognition.GrammarBuilder> 作为参数的构造函数 <xref:System.Speech.Recognition.SemanticResultKey> (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>) 。</span><span class="sxs-lookup"><span data-stu-id="7dcef-147">The use of <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> is equivalent to using the <xref:System.Speech.Recognition.GrammarBuilder> constructor which takes <xref:System.Speech.Recognition.SemanticResultKey> as an argument (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7dcef-148">下面的示例创建一个 <xref:System.Speech.Recognition.Grammar> 对象，该对象支持用于更改背景色的命令。</span><span class="sxs-lookup"><span data-stu-id="7dcef-148">The following example creates a <xref:System.Speech.Recognition.Grammar> object that supports commands to change the background color.</span></span>  
  
 <span data-ttu-id="7dcef-149"><xref:System.Speech.Recognition.Choices> (`colorChoice` 包含用于背景色的选项列表的对象) 使用 <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> 与实例一起使用的方法填充 <xref:System.Speech.Recognition.GrammarBuilder> 。</span><span class="sxs-lookup"><span data-stu-id="7dcef-149">A <xref:System.Speech.Recognition.Choices> object (`colorChoice`) containing the list of options for background colors is filled using the <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> method with <xref:System.Speech.Recognition.GrammarBuilder> instances.</span></span> <span data-ttu-id="7dcef-150"><xref:System.Speech.Recognition.GrammarBuilder>实例是通过 <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> <xref:System.Speech.Recognition.SemanticResultValue> 颜色字符串中创建的对象上的方法获取的。</span><span class="sxs-lookup"><span data-stu-id="7dcef-150">The <xref:System.Speech.Recognition.GrammarBuilder> instances are obtained through the <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> method on the <xref:System.Speech.Recognition.SemanticResultValue> objects created from color strings.</span></span>  
  
 <span data-ttu-id="7dcef-151"><xref:System.Speech.Recognition.GrammarBuilder>然后通过对实例调用来获取 <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> <xref:System.Speech.Recognition.SemanticResultKey> ，此实例将用于对中的语义选项进行关键 `colorChoice` 。</span><span class="sxs-lookup"><span data-stu-id="7dcef-151">A <xref:System.Speech.Recognition.GrammarBuilder> is then obtained by calling <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> on a <xref:System.Speech.Recognition.SemanticResultKey> instance, which will be used to key the semantic choices in `colorChoice`.</span></span>  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RGB.  
  // Choices constructors do not take SemanticResultValue parameters, so cast   
  // the SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
    SemanticResultValue colorValue=new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.  
    colorChoice.Add(colorValue.ToGrammarBuilder());      
  }  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with introductory phrase and the color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the Grammar object, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] {makeBackgroundBuilder, configureBackgroundBuilder}));  
  grammar.Name = "Make Background /Configure background as";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
