<Type Name="RecognizedWordUnit" FullName="System.Speech.Recognition.RecognizedWordUnit">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2d74c79436a42d4c42e5de8b72b5ae817b4415d1" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89891357" /></Metadata><TypeSignature Language="C#" Value="public class RecognizedWordUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedWordUnit extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedWordUnit" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedWordUnit" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedWordUnit" />
  <TypeSignature Language="F#" Value="type RecognizedWordUnit = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("Text: {Text}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("Text: {Text}")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e770e-101">提供可识别的语音的原子单元。</span><span class="sxs-lookup"><span data-stu-id="e770e-101">Provides the atomic unit of recognized speech.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e770e-102">识别引擎返回的所有结果都是对象的构造 <xref:System.Speech.Recognition.RecognizedWordUnit> 。</span><span class="sxs-lookup"><span data-stu-id="e770e-102">All results returned by a recognition engine are constructed of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span>  
  
 <span data-ttu-id="e770e-103"><xref:System.Speech.Recognition.RecognizedWordUnit>通过对象上的属性进行的任何识别操作都可以访问对象的数组 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> <xref:System.Speech.Recognition.RecognizedPhrase> 。</span><span class="sxs-lookup"><span data-stu-id="e770e-103">An array of <xref:System.Speech.Recognition.RecognizedWordUnit> objects is accessible for any recognition operation through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
 <span data-ttu-id="e770e-104">除了提供 <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) 实例提供的识别确定性 (度量 <xref:System.Speech.Recognition.RecognizedWordUnit> ：</span><span class="sxs-lookup"><span data-stu-id="e770e-104">In addition to providing a measure of recognition certainty (<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>) a <xref:System.Speech.Recognition.RecognizedWordUnit> instance provides:</span></span>  
  
-   <span data-ttu-id="e770e-105">已识别的单词的规范化和准确 (或词汇) 文本表示形式。</span><span class="sxs-lookup"><span data-stu-id="e770e-105">Normalized and exact (or lexical) text representations for a recognized word.</span></span> <span data-ttu-id="e770e-106">有关详细信息，请参阅<xref:System.Speech.Recognition.ReplacementText>、<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>和<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>。</span><span class="sxs-lookup"><span data-stu-id="e770e-106">For more information, see <xref:System.Speech.Recognition.ReplacementText>, <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>, and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>.</span></span>  
  
-   <span data-ttu-id="e770e-107">使用受支持的拼音字母表中的字符的发音信息，例如国际注音字母 (IPA) 或通用手机集 (UPS) 。</span><span class="sxs-lookup"><span data-stu-id="e770e-107">Pronunciation information using characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).</span></span> <span data-ttu-id="e770e-108">有关更多信息，请参见<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>。</span><span class="sxs-lookup"><span data-stu-id="e770e-108">For more information see <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>.</span></span>  
  
-   <span data-ttu-id="e770e-109">打印格式设置。</span><span class="sxs-lookup"><span data-stu-id="e770e-109">Formatting for printing.</span></span> <span data-ttu-id="e770e-110">有关详细信息，请参阅 <xref:System.Speech.Recognition.DisplayAttributes> 类及其 <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="e770e-110">For more information see the <xref:System.Speech.Recognition.DisplayAttributes> class and its <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e770e-111">下面的示例演示了一个实用工具例程 (`stringFromWordArray` 生成字符串的) 。</span><span class="sxs-lookup"><span data-stu-id="e770e-111">The following example shows a utility routine (`stringFromWordArray`) that generates strings.</span></span> <span data-ttu-id="e770e-112">这些字符串包含使用) 的 (的词汇输出 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> ， (使用) 的规范化文本 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> ，或使用 (的国际拼音字母表中的拼音字符 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e770e-112">The strings contain lexical output (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized text (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetic characters from the International Phonetic Alphabet (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="e770e-113">使用 <xref:System.Speech.Recognition.DisplayAttributes> 从对象的属性获取的对象设置字符串的格式 <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> <xref:System.Speech.Recognition.RecognizedWordUnit> 。</span><span class="sxs-lookup"><span data-stu-id="e770e-113">Strings are formatted using <xref:System.Speech.Recognition.DisplayAttributes> objects obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects.</span></span> <span data-ttu-id="e770e-114"><xref:System.Speech.Recognition.RecognizedWordUnit>对象是从 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 对象上的属性获取的 <xref:System.Speech.Recognition.RecognizedPhrase> 。</span><span class="sxs-lookup"><span data-stu-id="e770e-114">The <xref:System.Speech.Recognition.RecognizedWordUnit> objects are obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, float32 confidence, string pronunciation, string lexicalForm, valuetype System.Speech.Recognition.DisplayAttributes displayAttributes, valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan audioDuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, confidence As Single, pronunciation As String, lexicalForm As String, displayAttributes As DisplayAttributes, audioPosition As TimeSpan, audioDuration As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RecognizedWordUnit(System::String ^ text, float confidence, System::String ^ pronunciation, System::String ^ lexicalForm, System::Speech::Recognition::DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.RecognizedWordUnit : string * single * string * string * System.Speech.Recognition.DisplayAttributes * TimeSpan * TimeSpan -&gt; System.Speech.Recognition.RecognizedWordUnit" Usage="new System.Speech.Recognition.RecognizedWordUnit (text, confidence, pronunciation, lexicalForm, displayAttributes, audioPosition, audioDuration)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="confidence" Type="System.Single" />
        <Parameter Name="pronunciation" Type="System.String" />
        <Parameter Name="lexicalForm" Type="System.String" />
        <Parameter Name="displayAttributes" Type="System.Speech.Recognition.DisplayAttributes" />
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="audioDuration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="e770e-115">一个无法识别的字符串的正常化的文本。</span><span class="sxs-lookup"><span data-stu-id="e770e-115">The normalized text for a recognized word.</span></span>  
  
<span data-ttu-id="e770e-116">该值可以是 <see langword="null" />、"" 或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="e770e-116">This value can be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span></span></param>
        <param name="confidence"><span data-ttu-id="e770e-117">0.0 到 1.0 中指示单词标识的确定性的 <see langword="float" /> 值。</span><span class="sxs-lookup"><span data-stu-id="e770e-117">A <see langword="float" /> value from 0.0 through 1.0 indicating the certainty of word recognition.</span></span></param>
        <param name="pronunciation"><span data-ttu-id="e770e-118">一个无法识别的单词的语音拼写。</span><span class="sxs-lookup"><span data-stu-id="e770e-118">The phonetic spelling of a recognized word.</span></span>  
  
<span data-ttu-id="e770e-119">该值可以是 <see langword="null" />、"" 或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="e770e-119">This value can be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span></span></param>
        <param name="lexicalForm"><span data-ttu-id="e770e-120">一个识别字的非正常化文本。</span><span class="sxs-lookup"><span data-stu-id="e770e-120">The unnormalized text for a recognized word.</span></span>  
  
<span data-ttu-id="e770e-121">需要使用此参数可能不是 <see langword="null" />， " "或 <see cref="F:System.String.Empty" />。</span><span class="sxs-lookup"><span data-stu-id="e770e-121">This argument is required and may not be <see langword="null" />, "", or <see cref="F:System.String.Empty" />.</span></span></param>
        <param name="displayAttributes"><span data-ttu-id="e770e-122">定义使用空白显示识别的词。</span><span class="sxs-lookup"><span data-stu-id="e770e-122">Defines the use of white space to display recognized words.</span></span></param>
        <param name="audioPosition"><span data-ttu-id="e770e-123">音频输入流的已识别的单词的位置。</span><span class="sxs-lookup"><span data-stu-id="e770e-123">The location of the recognized word in the audio input stream.</span></span>  
  
<span data-ttu-id="e770e-124">此值可为 <see cref="F:System.TimeSpan.Zero" />。</span><span class="sxs-lookup"><span data-stu-id="e770e-124">This value can be <see cref="F:System.TimeSpan.Zero" />.</span></span></param>
        <param name="audioDuration"><span data-ttu-id="e770e-125">音频输入的长度对应已识别的单词。</span><span class="sxs-lookup"><span data-stu-id="e770e-125">The length of the audio input corresponding to the recognized word.</span></span>  
  
<span data-ttu-id="e770e-126">此值可为 <see cref="F:System.TimeSpan.Zero" />。</span><span class="sxs-lookup"><span data-stu-id="e770e-126">This value can be <see cref="F:System.TimeSpan.Zero" />.</span></span></param>
        <summary><span data-ttu-id="e770e-127">初始化 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e770e-127">Initializes a new instance of the <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e770e-128">如果 `text` 或 `pronunciation` 为 `null` 、"" 或 <xref:System.String.Empty> <xref:System.Speech.Recognition.RecognizedWordUnit> 在识别操作中使用，则识别引擎将在任何输出实例中生成相应的值 <xref:System.Speech.Recognition.RecognizedWordUnit> 。</span><span class="sxs-lookup"><span data-stu-id="e770e-128">If `text` or `pronunciation` are `null`, "", or <xref:System.String.Empty> and the <xref:System.Speech.Recognition.RecognizedWordUnit> is used in a recognition operation, the recognition engine will generate appropriate values in any output <xref:System.Speech.Recognition.RecognizedWordUnit> instance.</span></span>  
  
 <span data-ttu-id="e770e-129">直接构造 <xref:System.Speech.Recognition.RecognizedWordUnit> 实例通常仅在使用 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> 类的或 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> 方法 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 和类的 <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> 或 <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> 方法 <xref:System.Speech.Recognition.SpeechRecognizer> 模拟识别操作时使用。</span><span class="sxs-lookup"><span data-stu-id="e770e-129">Direct construction of <xref:System.Speech.Recognition.RecognizedWordUnit> instances is typically used only when emulating recognition operations using the <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class and the <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> or <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> methods of the <xref:System.Speech.Recognition.SpeechRecognizer> class.</span></span>  
  
 <span data-ttu-id="e770e-130">对于实际应用程序，不要直接构造 <xref:System.Speech.Recognition.RecognizedWordUnit> ，而是通过对象的 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 属性获取它 <xref:System.Speech.Recognition.RecognizedPhrase> 。</span><span class="sxs-lookup"><span data-stu-id="e770e-130">For actual applications, do not directly construct <xref:System.Speech.Recognition.RecognizedWordUnit>, rather obtain it through the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e770e-131">下面的示例是一个精心设计的模拟测试，其中，从输入生成新的词，然后将其传递给模拟器，然后进行验证。</span><span class="sxs-lookup"><span data-stu-id="e770e-131">The following example is a somewhat contrived test of emulation, where new words are generated from the input and passed to the emulator, and then verified.</span></span>  
  
```csharp  
private void _emulateAndVerify_Click(object sender, EventArgs e)   
{  
  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\t' };  
  string text = _emulateTextBox.Text;  
  string[] words = text.Split(delimiterChars);  
  
  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  
  for (int i = 0; i < words.Length; i++)   
  {  
    InputWordUnits[i] = new RecognizedWordUnit(  
        "",   
        0,   
        "",  
        words[i].ToLower(),   
        DisplayAttributes.OneTrailingSpace,   
        new TimeSpan(),   
        new TimeSpan());  
  }  
  
  RecognitionResult rec = _recognizer.EmulateRecognize(  
        InputWordUnits,   
        System.Globalization.CompareOptions.IgnoreCase);  
  if (rec == null)   
  {  
    MessageBox.Show(String.Format("Recognition emulation for {0} failed.\n", text));  
  }   
  else if (InputWordUnits.Length != rec.Words.Count)   
  {  
    MessageBox.Show(  
       String.Format("Length mismatch: Input was {0} words, Recognition has {1} words.\n}"));  
  }   
  else   
  {  
    for (int i = 0; i < InputWordUnits.Length; i++)   
    {  
  
      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   
      {  
        MessageBox.Show(  
          String.Format("Input word {0} \"{1}\" not found. Recognition output is {2}",  
          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  
        continue;  
      }  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
        <related type="ExternalDocumentation" href="https://www.internationalphoneticassociation.org/content/ipa-chart"><span data-ttu-id="e770e-132">国际音标 </span><span class="sxs-lookup"><span data-stu-id="e770e-132">International Phonetic Alphabet</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Confidence As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Confidence { float get(); };" />
      <MemberSignature Language="F#" Value="member this.Confidence : single" Usage="System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e770e-133">获取识别器分配的值，此值表示已识别的单词与给定输入匹配的可能性。</span><span class="sxs-lookup"><span data-stu-id="e770e-133">Gets a value, assigned by the recognizer, that represents the likelihood that a recognized word matches a given input.</span></span></summary>
        <value><span data-ttu-id="e770e-134">对正确识别单词的确定性的相对度量。</span><span class="sxs-lookup"><span data-stu-id="e770e-134">A relative measure of the certainty of correct recognition for a word.</span></span> <span data-ttu-id="e770e-135">该值分别为从 0.0 到 1.0，从低到高置信。</span><span class="sxs-lookup"><span data-stu-id="e770e-135">The value is from 0.0 to 1.0, for low to high confidence, respectively.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e770e-136">置信度分数并不表示正确识别单词的绝对可能性。</span><span class="sxs-lookup"><span data-stu-id="e770e-136">Confidence scores do not indicate the absolute likelihood that a word was recognized correctly.</span></span> <span data-ttu-id="e770e-137">相反，置信度分数提供一种机制，用于比较给定输入的多个识别替代项的相对准确性。</span><span class="sxs-lookup"><span data-stu-id="e770e-137">Instead, confidence scores provide a mechanism for comparing the relative accuracy of multiple recognition alternates for a given input.</span></span> <span data-ttu-id="e770e-138">这有助于返回最准确的识别结果。</span><span class="sxs-lookup"><span data-stu-id="e770e-138">This facilitates returning the most accurate recognition result.</span></span> <span data-ttu-id="e770e-139">例如，如果已识别的单词的置信度为0.8，这并不意味着该单词有80% 的可能性是输入的正确匹配项。</span><span class="sxs-lookup"><span data-stu-id="e770e-139">For example, if a recognized word has a confidence score of 0.8, this does not mean that the word has an 80% chance of being the correct match for the input.</span></span>  <span data-ttu-id="e770e-140">这意味着，该单词更可能是输入的正确匹配项，而不是置信度分数小于0.8 的其他结果。</span><span class="sxs-lookup"><span data-stu-id="e770e-140">It means that the word is more likely to be the correct match for the input than other results that have confidence scores less than 0.8.</span></span>  
  
 <span data-ttu-id="e770e-141">除非您对相同的识别操作或来自同一输入的以前识别进行比较，否则对其自身的置信度分数并无意义。</span><span class="sxs-lookup"><span data-stu-id="e770e-141">A confidence score on its own is not meaningful unless you have alternative results to compare against, either from the same recognition operation or from previous recognitions of the same input.</span></span>  
  
 <span data-ttu-id="e770e-142">返回的值 <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> 是相对的，每个识别引擎都是唯一的。</span><span class="sxs-lookup"><span data-stu-id="e770e-142">The values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> are relative and unique to each recognition engine.</span></span> <span data-ttu-id="e770e-143">在两个不同的识别引擎之间，不提供置信度值的定义，以及 <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> 各个 <xref:System.Speech.Recognition.RecognizedWordUnit> 对象如何定义的 <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> <xref:System.Speech.Recognition.RecognizedPhrase> 。</span><span class="sxs-lookup"><span data-stu-id="e770e-143">There is no definition of how confidence values between two different recognition engines compare, nor how the <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> of individual <xref:System.Speech.Recognition.RecognizedWordUnit> objects define the <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> of a <xref:System.Speech.Recognition.RecognizedPhrase>.</span></span>  
  
 <span data-ttu-id="e770e-144">语音识别引擎可能会出于各种原因（包括背景干扰、inarticulate 语音或意外的单词或单词序列），将置信度评分分配给播讲输入。</span><span class="sxs-lookup"><span data-stu-id="e770e-144">A speech recognition engine may assign a low confidence score to spoken input for various reasons, including background interference, inarticulate speech, or unanticipated words or word sequences.</span></span> <span data-ttu-id="e770e-145">如果你的应用程序使用的是 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 实例，则可以修改使用其中一种方法接受或拒绝语音输入的置信度级别 <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e770e-145">If your application is using a <xref:System.Speech.Recognition.SpeechRecognitionEngine> instance, you can modify the confidence level at which speech input is accepted or rejected with one of the <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> methods.</span></span> <span data-ttu-id="e770e-146">由管理的共享识别器的置信度阈值 <xref:System.Speech.Recognition.SpeechRecognizer> 与用户配置文件相关联，并存储在 Windows 注册表中。</span><span class="sxs-lookup"><span data-stu-id="e770e-146">Confidence thresholds for the shared recognizer, managed by <xref:System.Speech.Recognition.SpeechRecognizer>, are associated with a user profile and stored in the Windows registry.</span></span> <span data-ttu-id="e770e-147">对于共享识别器的属性，应用程序不应将更改写入注册表。</span><span class="sxs-lookup"><span data-stu-id="e770e-147">Applications should not write changes to the registry for the properties of the shared recognizer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayAttributes">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.DisplayAttributes DisplayAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayAttributes As DisplayAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::DisplayAttributes DisplayAttributes { System::Speech::Recognition::DisplayAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayAttributes : System.Speech.Recognition.DisplayAttributes" Usage="System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.DisplayAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e770e-148">获取用于通过当前 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 实例创建文本输出的格式化信息。</span><span class="sxs-lookup"><span data-stu-id="e770e-148">Gets formatting information used to create the text output from the current <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> instance.</span></span></summary>
        <value><span data-ttu-id="e770e-149">指定<see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> 显示对象的内容的空白使用。</span><span class="sxs-lookup"><span data-stu-id="e770e-149">Specifies the use of white space to display of the contents of a <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e770e-150"><xref:System.Speech.Recognition.DisplayAttributes>属性返回的对象 <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> 指定要用于给定单词的前导空格和尾随空格（如果有）。</span><span class="sxs-lookup"><span data-stu-id="e770e-150">The <xref:System.Speech.Recognition.DisplayAttributes> object returned by the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property specifies the leading and trailing spaces to be used with a given word, if any.</span></span>  
  
 <span data-ttu-id="e770e-151">有关如何使用此格式设置信息的详细信息，请参阅 <xref:System.Speech.Recognition.DisplayAttributes> 枚举。</span><span class="sxs-lookup"><span data-stu-id="e770e-151">For more information about how to use this formatting information, see the <xref:System.Speech.Recognition.DisplayAttributes> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e770e-152">下面的示例演示了一个实用工具例程 (`stringFromWordArray`) ，它生成一个字符串，该字符串通过以下三种方式之一进行格式设置：词法 (使用 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>) ，使用 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> (的规范化) ，或使用 (的发音) <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e770e-152">The following example shows a utility routine (`stringFromWordArray`) that generates a string that is formatted in one of three ways: lexically (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), or phonetically (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="e770e-153">文本输出从对象 <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> 上的属性获取 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> <xref:System.Speech.Recognition.RecognizedWordUnit> ，这些对象是从 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 对象上的属性获取的 <xref:System.Speech.Recognition.RecognizedPhrase> 。</span><span class="sxs-lookup"><span data-stu-id="e770e-153">The text output is obtained from the <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> property on a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on a <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
        ReadOnlyCollection<RecognizedWordUnit> words,   
        WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }  
    else if (type == WordType.Pronunciation)   
    {  
       wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
         String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="LexicalForm">
      <MemberSignature Language="C#" Value="public string LexicalForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LexicalForm" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LexicalForm As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LexicalForm { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LexicalForm : string" Usage="System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e770e-154">获取已识别的字符串的非正常化的文本。</span><span class="sxs-lookup"><span data-stu-id="e770e-154">Gets the unnormalized text of a recognized word.</span></span></summary>
        <value><span data-ttu-id="e770e-155">返回没有任何正常化的无法识别的单词的文本的 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="e770e-155">Returns a <see cref="T:System.String" /> containing the text of a recognized word, without any normalization.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e770e-156">在大多数情况下，和返回的值 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> 都是相同的。</span><span class="sxs-lookup"><span data-stu-id="e770e-156">In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> are identical.</span></span> <span data-ttu-id="e770e-157">不过，识别引擎可以使用语音规范化来返回更多用户友好的音频输入或 colloquial 的文本表示形式。</span><span class="sxs-lookup"><span data-stu-id="e770e-157">However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.</span></span>  
  
 <span data-ttu-id="e770e-158">语音规范化是在编写时使用特殊的构造或符号来表达语音。</span><span class="sxs-lookup"><span data-stu-id="e770e-158">Speech normalization is the use of special constructs or symbols to express speech in writing.</span></span> <span data-ttu-id="e770e-159">例如，规范化可以在输出文本中将单词 "a 美元和十六美分" 替换为 "$1.16"。</span><span class="sxs-lookup"><span data-stu-id="e770e-159">For example, normalization can replace the spoken words "a dollar and sixteen cents" with "$1.16" in output text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e770e-160">下面的示例演示一个实用工具例程，该例程使用以下三种格式之一生成文本：词法 (使用 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>) 、使用 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>) 的规范化 (和使用 (的拼音) <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e770e-160">The following example shows a utility routine that generates text in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="e770e-161">文本输出是从对象的对象获取的，该对象 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> <xref:System.Speech.Recognition.RecognizedWordUnit> 是从 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 对象上的属性获取的 <xref:System.Speech.Recognition.RecognizedPhrase> 。</span><span class="sxs-lookup"><span data-stu-id="e770e-161">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
         ReadOnlyCollection<RecognizedWordUnit> words,   
         WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
    wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Pronunciation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pronunciation { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Pronunciation : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e770e-162">获取已识别单词的注音拼写。</span><span class="sxs-lookup"><span data-stu-id="e770e-162">Gets the phonetic spelling of a recognized word.</span></span></summary>
        <value><span data-ttu-id="e770e-163">支持的语音字母表中的字符组成的字符串，如国际音标 (IPA) 或通用电话集 (UPS)。</span><span class="sxs-lookup"><span data-stu-id="e770e-163">A string of characters from a supported phonetic alphabet, such as the International Phonetic Alphabet (IPA) or the Universal Phone Set (UPS).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e770e-164">的内容 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> 指示语音识别引擎用来将语音输入与其中一个已加载的对象相匹配的发音 <xref:System.Speech.Recognition.Grammar> 。</span><span class="sxs-lookup"><span data-stu-id="e770e-164">The contents of <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> indicate which pronunciation the speech recognition engine used to match speech input to one of its loaded <xref:System.Speech.Recognition.Grammar> objects.</span></span> <span data-ttu-id="e770e-165">可以在语音识别引擎的内部词典中、从加载的对象中的识别语法链接的 <xref:System.Speech.Recognition.Grammar> 或内联在加载的对象中的识别语法中定义发音 <xref:System.Speech.Recognition.Grammar> 。</span><span class="sxs-lookup"><span data-stu-id="e770e-165">Pronunciations may be defined in the speech recognition engine's internal lexicon, in a lexicon document that is linked from a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object, or inline in a recognition grammar in a loaded <xref:System.Speech.Recognition.Grammar> object.</span></span> <span data-ttu-id="e770e-166">语音识别引擎还可能会为不常见的单词创建发音，语音识别引擎当前有权访问的词典或语法中未定义发音。</span><span class="sxs-lookup"><span data-stu-id="e770e-166">A speech recognition engine may also create pronunciations for uncommon words whose pronunciations are not defined in a lexicon or grammar to which the speech recognition engine currently has access.</span></span>  
  
 <span data-ttu-id="e770e-167">许多基于 Windows 的 Unicode 字体（如宋体）都支持显示 IPA 字符串。</span><span class="sxs-lookup"><span data-stu-id="e770e-167">Many Windows-based Unicode fonts, such as Courier New, support the display of IPA strings.</span></span> <span data-ttu-id="e770e-168">有关详细信息，请参阅 [国际注音字母表](https://www.internationalphoneticassociation.org/content/ipa-chart)。</span><span class="sxs-lookup"><span data-stu-id="e770e-168">For more information, see [International Phonetic Alphabet](https://www.internationalphoneticassociation.org/content/ipa-chart).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e770e-169">下面的示例演示一个实用工具例程，该例程使用以下三种格式之一生成具有以下三种格式之一的字符串：词法 (使用 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>) 、使用 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>) 的规范化 (和使用 (的拼音) <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e770e-169">The following example shows a utility routine that generates a string with one of three possible formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="e770e-170">文本输出是从对象的对象获取的，该对象 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> <xref:System.Speech.Recognition.RecognizedWordUnit> 是从 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 对象上的属性获取的 <xref:System.Speech.Recognition.RecognizedPhrase> 。</span><span class="sxs-lookup"><span data-stu-id="e770e-170">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
        <related type="ExternalDocumentation" href="https://www.internationalphoneticassociation.org/content/ipa-chart"><span data-ttu-id="e770e-171">国际音标 </span><span class="sxs-lookup"><span data-stu-id="e770e-171">International Phonetic Alphabet</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e770e-172">获取已识别单词的规划化文本。</span><span class="sxs-lookup"><span data-stu-id="e770e-172">Gets the normalized text for a recognized word.</span></span></summary>
        <value><span data-ttu-id="e770e-173">包含给定输入单词的规范化文本输出的字符串。</span><span class="sxs-lookup"><span data-stu-id="e770e-173">A string that contains the normalized text output for a given input word.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e770e-174">在大多数情况下，由和返回的值 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> 都是相同的。</span><span class="sxs-lookup"><span data-stu-id="e770e-174">In most cases the values returned by <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> and <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> will be identical.</span></span> <span data-ttu-id="e770e-175">不过，识别引擎可以使用语音规范化来返回更多用户友好的音频输入或 colloquial 的文本表示形式。</span><span class="sxs-lookup"><span data-stu-id="e770e-175">However, recognition engines may use speech normalization to return more user-friendly or colloquial text representations of audio input.</span></span>  
  
 <span data-ttu-id="e770e-176">语音规范化是在编写时使用特殊的构造或符号来表达语音。</span><span class="sxs-lookup"><span data-stu-id="e770e-176">Speech normalization is the use of special constructs or symbols to express speech in writing.</span></span> <span data-ttu-id="e770e-177">例如，规范化可以在输出文本中将单词 "a 美元和十六美分" 替换为 "$1.16"。</span><span class="sxs-lookup"><span data-stu-id="e770e-177">For example, normalization can replace the spoken words "a dollar and sixteen cents" with "$1.16" in output text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e770e-178">下面的示例演示了一个实用工具例程，该例程使用以下三种格式之一来生成字符串：词法 (使用 <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>) 、使用 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>) 的规范化 (和使用 (的拼音) <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> 。</span><span class="sxs-lookup"><span data-stu-id="e770e-178">The following example shows a utility routine that generates a string in one of three formats: lexical (using <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>), normalized (using <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>), and phonetic (using <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>).</span></span> <span data-ttu-id="e770e-179">文本输出是从对象的对象获取的，该对象 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> <xref:System.Speech.Recognition.RecognizedWordUnit> 是从 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 对象上的属性获取的 <xref:System.Speech.Recognition.RecognizedPhrase> 。</span><span class="sxs-lookup"><span data-stu-id="e770e-179">The text output is obtained from a <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> of <xref:System.Speech.Recognition.RecognizedWordUnit> objects, which is obtained from the <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property on the <xref:System.Speech.Recognition.RecognizedPhrase> object.</span></span>  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
           String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
