<Type Name="RecognizedAudio" FullName="System.Speech.Recognition.RecognizedAudio">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1589ccbeb73e54c0a5b41be74b6365a765fa1106" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89900749" /></Metadata><TypeSignature Language="C#" Value="public class RecognizedAudio" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedAudio extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedAudio" />
  <TypeSignature Language="VB.NET" Value="Public Class RecognizedAudio" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognizedAudio" />
  <TypeSignature Language="F#" Value="type RecognizedAudio = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="cb5d3-101">表示与 <see cref="T:System.Speech.Recognition.RecognitionResult" /> 关联的音频输入。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-101">Represents audio input that is associated with a <see cref="T:System.Speech.Recognition.RecognitionResult" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb5d3-102">语音识别器在识别操作过程中生成有关音频输入的信息。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-102">A speech recognizer generates information about the audio input as part of the recognition operation.</span></span> <span data-ttu-id="cb5d3-103">若要访问识别的音频，请使用的 <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> 属性或 <xref:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange%2A> 方法 <xref:System.Speech.Recognition.RecognitionResult> 。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-103">To access the recognized audio, use the <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property or the <xref:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange%2A> method of the <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
 <span data-ttu-id="cb5d3-104">可以通过以下事件和和类的方法生成识别结果 <xref:System.Speech.Recognition.SpeechRecognizer> <xref:System.Speech.Recognition.SpeechRecognitionEngine> ：</span><span class="sxs-lookup"><span data-stu-id="cb5d3-104">A recognition result can be produced by the following events and methods of the <xref:System.Speech.Recognition.SpeechRecognizer> and <xref:System.Speech.Recognition.SpeechRecognitionEngine> classes:</span></span>  
  
-   <span data-ttu-id="cb5d3-105">事件：</span><span class="sxs-lookup"><span data-stu-id="cb5d3-105">Events:</span></span>  
  
    -   <span data-ttu-id="cb5d3-106"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized?displayProperty=nameWithType> 和 <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="cb5d3-106"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized?displayProperty=nameWithType> and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized?displayProperty=nameWithType></span></span>  
  
    -   <span data-ttu-id="cb5d3-107"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected?displayProperty=nameWithType> 和 <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="cb5d3-107"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected?displayProperty=nameWithType> and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected?displayProperty=nameWithType></span></span>  
  
    -   <span data-ttu-id="cb5d3-108"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> 和 <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="cb5d3-108"><xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> and <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType></span></span>  
  
    -   <span data-ttu-id="cb5d3-109"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted?displayProperty=nameWithType> 和 <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="cb5d3-109"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted?displayProperty=nameWithType> and <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeCompleted?displayProperty=nameWithType></span></span>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted?displayProperty=nameWithType>  
  
-   <span data-ttu-id="cb5d3-110">方法：</span><span class="sxs-lookup"><span data-stu-id="cb5d3-110">Methods:</span></span>  
  
    -   <span data-ttu-id="cb5d3-111"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A?displayProperty=nameWithType> 和 <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="cb5d3-111"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A?displayProperty=nameWithType> and <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A?displayProperty=nameWithType></span></span>  
  
    -   <span data-ttu-id="cb5d3-112"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A?displayProperty=nameWithType> 和 <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A?displayProperty=nameWithType></span><span class="sxs-lookup"><span data-stu-id="cb5d3-112"><xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A?displayProperty=nameWithType> and <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A?displayProperty=nameWithType></span></span>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A?displayProperty=nameWithType>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A?displayProperty=nameWithType>  
  
> [!IMPORTANT]
>  <span data-ttu-id="cb5d3-113">模拟语音识别生成的识别结果不包含可识别的音频。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-113">A recognition result produced by emulated speech recognition does not contain recognized audio.</span></span> <span data-ttu-id="cb5d3-114">对于这种识别结果，其 <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> 属性返回， `null` 其 <xref:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange%2A> 方法会引发异常。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-114">For such a recognition result, its <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property returns `null` and its <xref:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange%2A> method throws an exception.</span></span> <span data-ttu-id="cb5d3-115">有关模拟语音识别的详细信息，请参阅 `EmulateRecognize` `EmulateRecognizeAsync` 和类的和 <xref:System.Speech.Recognition.SpeechRecognizer> 方法 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-115">For more information about emulated speech recognition, see the `EmulateRecognize` and `EmulateRecognizeAsync` methods of the <xref:System.Speech.Recognition.SpeechRecognizer> and <xref:System.Speech.Recognition.SpeechRecognitionEngine> classes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb5d3-116">下面的示例处理 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> 、 <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> 或事件， <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> 并输出到与识别结果关联的识别音频的控制台信息。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-116">The following example handles the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType>, or <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=nameWithType> event and outputs to the console information about the recognized audio that is associated with the recognition result.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  
  Console.WriteLine("Grammar({0}): {1}",  
    result.Grammar.Name, result.Text);  
  
  if (e.Result.Audio != null)  
  {  
    RecognizedAudio audio = e.Result.Audio;  
  
    Console.WriteLine("   start time: {0}", audio.StartTime);  
    Console.WriteLine("   encoding format: {0}", audio.Format.EncodingFormat);  
    Console.WriteLine("   position: {0}, duration: {1}",  
      audio.AudioPosition, audio.Duration);  
  }  
  
  // Add event handler code here.  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
    <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
  </Docs>
  <Members>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedAudio.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Recognition.RecognizedAudio.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb5d3-117">获取可识别音频的开头在输入音频流中的位置。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-117">Gets the location in the input audio stream for the start of the recognized audio.</span></span></summary>
        <value><span data-ttu-id="cb5d3-118">可识别的音频开始的输入音频流的位置。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-118">The location in the input audio stream for the start of the recognized audio.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb5d3-119">此属性在输入设备的生成音频流中引用已识别的短语开头的位置。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-119">This property references the position at the beginning of the recognized phrase in the input device's generated audio stream.</span></span> <span data-ttu-id="cb5d3-120">相反， `RecognizerAudioPosition` <xref:System.Speech.Recognition.SpeechRecognitionEngine> 和类的属性 <xref:System.Speech.Recognition.SpeechRecognizer> 引用识别器在其音频输入中的位置。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-120">By contrast, the `RecognizerAudioPosition` property of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> and <xref:System.Speech.Recognition.SpeechRecognizer> classes reference the recognizer's position within its audio input.</span></span> <span data-ttu-id="cb5d3-121">这些位置可能不同。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-121">These positions can be different.</span></span> <span data-ttu-id="cb5d3-122">有关详细信息，请参阅 [使用语音识别事件](https://msdn.microsoft.com/library/01c598ca-2e0e-4e89-b303-cd1cef9e8482)。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-122">For more information, see [Using Speech Recognition Events](https://msdn.microsoft.com/library/01c598ca-2e0e-4e89-b303-cd1cef9e8482).</span></span>  
  
 <span data-ttu-id="cb5d3-123"><xref:System.Speech.Recognition.RecognizedAudio.StartTime%2A>属性获取识别操作开始时的系统时间。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-123">The <xref:System.Speech.Recognition.RecognizedAudio.StartTime%2A> property gets the system time at the start of the recognition operation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb5d3-124">下面的示例处理 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> 或 <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> 事件，并输出到与识别结果关联的识别音频的控制台信息。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-124">The following example handles the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> or <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> event and outputs to the console information about the recognized audio that is associated with the recognition result.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  
  Console.WriteLine("Grammar({0}): {1}",  
    result.Grammar.Name, result.Text);  
  
  if (e.Result.Audio != null)  
  {  
    RecognizedAudio audio = e.Result.Audio;  
  
    Console.WriteLine("   start time: {0}", audio.StartTime);  
    Console.WriteLine("   encoding format: {0}", audio.Format.EncodingFormat);  
    Console.WriteLine("   position: {0}, duration: {1}",  
      audio.AudioPosition, audio.Duration);  
  }  
  
  // Add event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.Enabled" />
        <altmember cref="P:System.Speech.Recognition.RecognizedAudio.Duration" />
        <altmember cref="P:System.Speech.Recognition.RecognizedAudio.StartTime" />
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public TimeSpan Duration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Duration" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedAudio.Duration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Duration As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Duration { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.Duration : TimeSpan" Usage="System.Speech.Recognition.RecognizedAudio.Duration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb5d3-125">获取已识别音频的输入音频流的持续时间。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-125">Gets the duration of the input audio stream for the recognized audio.</span></span></summary>
        <value><span data-ttu-id="cb5d3-126">可识别的音频开始的输入音频流中的持续时间。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-126">The duration within the input audio stream for the recognized audio.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cb5d3-127">下面的示例处理 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> 或 <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> 事件，并输出到与识别结果关联的识别音频的控制台信息。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-127">The following example handles the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> or <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> event and outputs to the console information about the recognized audio that is associated with the recognition result.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  
  Console.WriteLine("Grammar({0}): {1}",  
    result.Grammar.Name, result.Text);  
  
  if (e.Result.Audio != null)  
  {  
    RecognizedAudio audio = e.Result.Audio;  
  
    Console.WriteLine("   start time: {0}", audio.StartTime);  
    Console.WriteLine("   encoding format: {0}", audio.Format.EncodingFormat);  
    Console.WriteLine("   position: {0}, duration: {1}",  
      audio.AudioPosition, audio.Duration);  
  }  
  
  // Add event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognizedAudio.AudioPosition" />
        <altmember cref="P:System.Speech.Recognition.RecognizedAudio.StartTime" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public System.Speech.AudioFormat.SpeechAudioFormatInfo Format { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.AudioFormat.SpeechAudioFormatInfo Format" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedAudio.Format" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Format As SpeechAudioFormatInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::AudioFormat::SpeechAudioFormatInfo ^ Format { System::Speech::AudioFormat::SpeechAudioFormatInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Format : System.Speech.AudioFormat.SpeechAudioFormatInfo" Usage="System.Speech.Recognition.RecognizedAudio.Format" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Speech.AudioFormat.SpeechAudioFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb5d3-128">获取识别引擎处理的音频格式。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-128">Gets the format of the audio processed by a recognition engine.</span></span></summary>
        <value><span data-ttu-id="cb5d3-129">语音识别器处理的音频的格式。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-129">The format of the audio processed by the speech recognizer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cb5d3-130">下面的示例处理 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> 或 <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> 事件，并输出到与识别结果关联的识别音频的控制台信息。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-130">The following example handles the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> or <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> event and outputs to the console information about the recognized audio that is associated with the recognition result.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  
  Console.WriteLine("Grammar({0}): {1}",  
    result.Grammar.Name, result.Text);  
  
  if (e.Result.Audio != null)  
  {  
    RecognizedAudio audio = e.Result.Audio;  
  
    Console.WriteLine("   start time: {0}", audio.StartTime);  
    Console.WriteLine("   encoding format: {0}", audio.Format.EncodingFormat);  
    Console.WriteLine("   position: {0}, duration: {1}",  
      audio.AudioPosition, audio.Duration);  
  }  
  
  // Add event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="N:System.Speech.AudioFormat" />
      </Docs>
    </Member>
    <Member MemberName="GetRange">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizedAudio GetRange (TimeSpan audioPosition, TimeSpan duration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognizedAudio GetRange(valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedAudio.GetRange(System.TimeSpan,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRange (audioPosition As TimeSpan, duration As TimeSpan) As RecognizedAudio" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognizedAudio ^ GetRange(TimeSpan audioPosition, TimeSpan duration);" />
      <MemberSignature Language="F#" Value="member this.GetRange : TimeSpan * TimeSpan -&gt; System.Speech.Recognition.RecognizedAudio" Usage="recognizedAudio.GetRange (audioPosition, duration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizedAudio</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="duration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="audioPosition"><span data-ttu-id="cb5d3-131">将返回的起点音频数据。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-131">The starting point of the audio data to be returned.</span></span></param>
        <param name="duration"><span data-ttu-id="cb5d3-132">要返回的段的长度。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-132">The length of the segment to be returned.</span></span></param>
        <summary><span data-ttu-id="cb5d3-133">选择并返回当前已识别音频为二进制数据的部分。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-133">Selects and returns a section of the current recognized audio as binary data.</span></span></summary>
        <returns><span data-ttu-id="cb5d3-134">返回可识别的音频的小节，如 <paramref name="audioPosition" /> 和 <paramref name="duration" /> 所定义。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-134">Returns a subsection of the recognized audio, as defined by <paramref name="audioPosition" /> and <paramref name="duration" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="cb5d3-135">下面的示例为名称输入创建语音识别语法，为事件添加处理程序， <xref:System.Speech.Recognition.Grammar.SpeechRecognized> 并将语法加载到进程内语音识别器中。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-135">The following example creates a speech recognition grammar for name input, adds a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event, and loads the grammar into an in-process speech recognizer.</span></span> <span data-ttu-id="cb5d3-136">然后，它将输入的名称部分的音频信息写入音频文件。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-136">Then it writes the audio information for the name portion of the input to an audio file.</span></span> <span data-ttu-id="cb5d3-137">音频文件用作对象的输入 <xref:System.Speech.Synthesis.SpeechSynthesizer> ，该对象讲述了包含录制的音频的短语。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-137">The audio file is used as input to a <xref:System.Speech.Synthesis.SpeechSynthesizer> object, which speaks a phrase that includes the recorded audio.</span></span>  
  
```  
private static void AddNameGrammar(SpeechRecognitionEngine recognizer)  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  builder.Append("My name is");  
  builder.AppendWildcard();  
  
  Grammar nameGrammar = new Grammar(builder);  
  nameGrammar.Name = "Name Grammar";  
  nameGrammar.SpeechRecognized +=  
    new EventHandler<SpeechRecognizedEventArgs>(  
      NameSpeechRecognized);  
  
  recognizer.LoadGrammar(nameGrammar);  
}  
  
// Handle the SpeechRecognized event of the name grammar.  
private static void NameSpeechRecognized(  
  object sender, SpeechRecognizedEventArgs e)  
{  
  Console.WriteLine("Grammar ({0}) recognized speech: {1}",  
    e.Result.Grammar.Name, e.Result.Text);  
  
  try  
  {  
  
    // The name phrase starts after the first three words.  
    if (e.Result.Words.Count < 4)  
    {  
  
      // Add code to check for an alternate that contains the wildcard.  
      return;  
    }  
  
    RecognizedAudio audio = e.Result.Audio;  
    TimeSpan start = e.Result.Words[3].AudioPosition;  
    TimeSpan duration = audio.Duration - start;  
  
    // Add code to verify and persist the audio.  
    string path = @"C:\temp\nameAudio.wav";  
    using (Stream outputStream = new FileStream(path, FileMode.Create))  
    {  
      RecognizedAudio nameAudio = audio.GetRange(start, duration);  
      nameAudio.WriteToWaveStream(outputStream);  
      outputStream.Close();  
    }  
  
    Thread testThread =  
      new Thread(new ParameterizedThreadStart(TestAudio));  
    testThread.Start(path);  
  }  
  catch (Exception ex)  
  {  
    Console.WriteLine("Exception thrown while processing audio:");  
    Console.WriteLine(ex.ToString());  
  }  
}  
  
// Use the speech synthesizer to play back the .wav file  
// that was created in the SpeechRecognized event handler.  
  
private static void TestAudio(object item)  
{  
  string path = item as string;  
  if (path != null && File.Exists(path))  
  {  
    SpeechSynthesizer synthesizer = new SpeechSynthesizer();  
    PromptBuilder builder = new PromptBuilder();  
    builder.AppendText("Hello");  
    builder.AppendAudio(path);  
    synthesizer.Speak(builder);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="cb5d3-138"><paramref name="audioPosition" /> 和 <paramref name="duration" /> 在当前段范围之外定义音频段。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-138"><paramref name="audioPosition" /> and <paramref name="duration" /> define a segment of audio outside the range of the current segment.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="cb5d3-139">识别出当前的音频不包含任何数据。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-139">The current recognized audio contains no data.</span></span></exception>
        <altmember cref="M:System.Speech.Recognition.RecognizedAudio.WriteToWaveStream(System.IO.Stream)" />
        <altmember cref="M:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="StartTime">
      <MemberSignature Language="C#" Value="public DateTime StartTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime StartTime" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedAudio.StartTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StartTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime StartTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.StartTime : DateTime" Usage="System.Speech.Recognition.RecognizedAudio.StartTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="cb5d3-140">获取在标识操作开始时的系统时间。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-140">Gets the system time at the start of the recognition operation.</span></span></summary>
        <value><span data-ttu-id="cb5d3-141">在识别操作开始时的系统时间。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-141">The system time at the start of the recognition operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb5d3-142"><xref:System.Speech.Recognition.RecognizedAudio.StartTime%2A>属性可获取识别操作开始时的系统时间，这对于延迟和性能计算非常有用。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-142">The <xref:System.Speech.Recognition.RecognizedAudio.StartTime%2A> property gets the system time at the start of the recognition operation, which can be useful for latency and performance calculations.</span></span>  
  
 <span data-ttu-id="cb5d3-143"><xref:System.Speech.Recognition.RecognizedAudio.AudioPosition%2A>属性获取输入设备生成的音频流中的位置。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-143">The <xref:System.Speech.Recognition.RecognizedAudio.AudioPosition%2A> property gets the location in the input device's generated audio stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb5d3-144">下面的示例处理 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> 或 <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> 事件，并输出到与识别结果关联的识别音频的控制台信息。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-144">The following example handles the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=nameWithType> or <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=nameWithType> event and outputs to the console information about the recognized audio that is associated with the recognition result.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  
  Console.WriteLine("Grammar({0}): {1}",  
    result.Grammar.Name, result.Text);  
  
  if (e.Result.Audio != null)  
  {  
    RecognizedAudio audio = e.Result.Audio;  
  
    Console.WriteLine("   start time: {0}", audio.StartTime);  
    Console.WriteLine("   encoding format: {0}", audio.Format.EncodingFormat);  
    Console.WriteLine("   position: {0}, duration: {1}",  
      audio.AudioPosition, audio.Duration);  
  }  
  
  // Add event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.RecognizedAudio.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="WriteToAudioStream">
      <MemberSignature Language="C#" Value="public void WriteToAudioStream (System.IO.Stream outputStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToAudioStream(class System.IO.Stream outputStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToAudioStream (outputStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToAudioStream(System::IO::Stream ^ outputStream);" />
      <MemberSignature Language="F#" Value="member this.WriteToAudioStream : System.IO.Stream -&gt; unit" Usage="recognizedAudio.WriteToAudioStream outputStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="outputStream"><span data-ttu-id="cb5d3-145">将接收经过音频数据的流。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-145">The stream that will receive the audio data.</span></span></param>
        <summary><span data-ttu-id="cb5d3-146">向一个流写入作为原始数据的整个音频。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-146">Writes the entire audio to a stream as raw data.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb5d3-147">音频数据以 `outputStream` 二进制形式写入。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-147">Audio data is written to `outputStream` in binary form.</span></span> <span data-ttu-id="cb5d3-148">不包含任何标头信息。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-148">No header information is included.</span></span>  
  
 <span data-ttu-id="cb5d3-149"><xref:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream%2A>方法使用波形格式，但不包括波形标头。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-149">The <xref:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream%2A> method uses the Wave format, but does not include the Wave header.</span></span> <span data-ttu-id="cb5d3-150">若要包含波形标头，请使用 <xref:System.Speech.Recognition.RecognizedAudio.WriteToWaveStream%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-150">To include the Wave header, use the <xref:System.Speech.Recognition.RecognizedAudio.WriteToWaveStream%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.RecognizedAudio.GetRange(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.Speech.Recognition.RecognizedAudio.WriteToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="WriteToWaveStream">
      <MemberSignature Language="C#" Value="public void WriteToWaveStream (System.IO.Stream outputStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteToWaveStream(class System.IO.Stream outputStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedAudio.WriteToWaveStream(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteToWaveStream (outputStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteToWaveStream(System::IO::Stream ^ outputStream);" />
      <MemberSignature Language="F#" Value="member this.WriteToWaveStream : System.IO.Stream -&gt; unit" Usage="recognizedAudio.WriteToWaveStream outputStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="outputStream"><span data-ttu-id="cb5d3-151">将接收经过音频数据的流。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-151">The stream that will receive the audio data.</span></span></param>
        <summary><span data-ttu-id="cb5d3-152">编写音频定向到波形格式的流。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-152">Writes audio to a stream in Wave format.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="cb5d3-153">音频数据是以 `outputStream` 波形格式写入的，其中包括资源交换文件格式 (RIFF) 标头。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-153">Audio data is written to `outputStream` in Wave format, which includes a resource interchange file format (RIFF) header.</span></span>  
  
 <span data-ttu-id="cb5d3-154"><xref:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream%2A>方法使用相同的二进制格式，但不包括波形标头。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-154">The <xref:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream%2A> method uses the same binary format, but does not include the Wave header.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="cb5d3-155">下面的示例为名称输入创建语音识别语法，为事件添加处理程序， <xref:System.Speech.Recognition.Grammar.SpeechRecognized> 并将语法加载到进程内语音识别器中。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-155">The following example creates a speech recognition grammar for name input, adds a handler for the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event, and loads the grammar into an in-process speech recognizer.</span></span> <span data-ttu-id="cb5d3-156">然后，它将输入的名称部分的音频信息写入音频文件。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-156">Then it writes the audio information for the name portion of the input to an audio file.</span></span> <span data-ttu-id="cb5d3-157">音频文件用作对象的输入 <xref:System.Speech.Synthesis.SpeechSynthesizer> ，该对象讲述了包含录制的音频的短语。</span><span class="sxs-lookup"><span data-stu-id="cb5d3-157">The audio file is used as input to a <xref:System.Speech.Synthesis.SpeechSynthesizer> object, which speaks a phrase that includes the recorded audio.</span></span>  
  
```  
private static void AddNameGrammar(SpeechRecognitionEngine recognizer)  
{  
  GrammarBuilder builder = new GrammarBuilder();  
  builder.Append("My name is");  
  builder.AppendWildcard();  
  
  Grammar nameGrammar = new Grammar(builder);  
  nameGrammar.Name = "Name Grammar";  
  nameGrammar.SpeechRecognized +=  
    new EventHandler<SpeechRecognizedEventArgs>(  
      NameSpeechRecognized);  
  
  recognizer.LoadGrammar(nameGrammar);  
}  
  
// Handle the SpeechRecognized event of the name grammar.  
private static void NameSpeechRecognized(  
  object sender, SpeechRecognizedEventArgs e)  
{  
  Console.WriteLine("Grammar ({0}) recognized speech: {1}",  
    e.Result.Grammar.Name, e.Result.Text);  
  
  try  
  {  
    // The name phrase starts after the first three words.  
    if (e.Result.Words.Count < 4)  
    {  
  
      // Add code to check for an alternate that contains the   
wildcard.  
      return;  
    }  
  
    RecognizedAudio audio = e.Result.Audio;  
    TimeSpan start = e.Result.Words[3].AudioPosition;  
    TimeSpan duration = audio.Duration - start;  
  
    // Add code to verify and persist the audio.  
    string path = @"C:\temp\nameAudio.wav";  
    using (Stream outputStream = new FileStream(path, FileMode.Create))  
    {  
      RecognizedAudio nameAudio = audio.GetRange(start, duration);  
      nameAudio.WriteToWaveStream(outputStream);  
      outputStream.Close();  
    }  
  
    Thread testThread =  
      new Thread(new ParameterizedThreadStart(TestAudio));  
    testThread.Start(path);  
  }  
  catch (Exception ex)  
  {  
    Console.WriteLine("Exception thrown while processing audio:");  
    Console.WriteLine(ex.ToString());  
  }  
}  
  
// Use the speech synthesizer to play back the .wav file  
// that was created in the SpeechRecognized event handler.  
  
private static void TestAudio(object item)  
{  
  string path = item as string;  
  if (path != null && File.Exists(path))  
  {  
    SpeechSynthesizer synthesizer = new SpeechSynthesizer();  
    PromptBuilder builder = new PromptBuilder();  
    builder.AppendText("Hello");  
    builder.AppendAudio(path);  
    synthesizer.Speak(builder);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.RecognizedAudio.GetRange(System.TimeSpan,System.TimeSpan)" />
        <altmember cref="M:System.Speech.Recognition.RecognizedAudio.WriteToAudioStream(System.IO.Stream)" />
      </Docs>
    </Member>
  </Members>
</Type>
