<Type Name="SemanticResultValue" FullName="System.Speech.Recognition.SemanticResultValue">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e59411ada9795ac6013ddec8b95b90064bd1f58d" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86826555" /></Metadata><TypeSignature Language="C#" Value="public class SemanticResultValue" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SemanticResultValue extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SemanticResultValue" />
  <TypeSignature Language="VB.NET" Value="Public Class SemanticResultValue" />
  <TypeSignature Language="C++ CLI" Value="public ref class SemanticResultValue" />
  <TypeSignature Language="F#" Value="type SemanticResultValue = class" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("{_tag.DebugSummary}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("{_tag.DebugSummary}")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>表示一个语义值和选择性地将该值与语音识别语法的组件关联。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将 <xref:System.Speech.Recognition.SemanticResultValue> 和 <xref:System.Speech.Recognition.SemanticResultKey> 对象与和结合使用 <xref:System.Speech.Recognition.GrammarBuilder> <xref:System.Speech.Recognition.Choices> 是设计的语义结构的最简单方法 <xref:System.Speech.Recognition.Grammar> 。 通过获取的实例，通过的属性访问短语的语义信息 <xref:System.Speech.Recognition.SemanticValue> <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> <xref:System.Speech.Recognition.RecognizedPhrase> 。  
  
> [!NOTE]
>  由对象管理的值 <xref:System.Speech.Recognition.SemanticResultValue> 由 <xref:System.Object> 传递给其构造函数的实例定义。 此的基础类型 <xref:System.Object> 必须是 `bool` 、、 `int` `float` 或 `string` 。 任何其他类型都将阻止使用构造 <xref:System.Speech.Recognition.Grammar> 实例 <xref:System.Speech.Recognition.SemanticResultValue> 。  
  
 实例的典型用法是将 <xref:System.Speech.Recognition.SemanticResultValue> 实例与的可识别组件（如 <xref:System.Speech.Recognition.Grammar> 短语、规则或对象）相关联 <xref:System.Speech.Recognition.Choices> 。 如果将关联的组件用作识别操作的一部分，则将 <xref:System.Speech.Recognition.SemanticResultValue> 用于定义所返回短语的语义中的值。  
  
 有两种将实例与语法元素相关联的基本方法 <xref:System.Speech.Recognition.SemanticResultValue> ，具体取决于用于创建的构造函数 <xref:System.Speech.Recognition.SemanticResultValue> 。  
  
-   如果仅使用) 实例指定 (值 <xref:System.Object> 来构造 <xref:System.Speech.Recognition.SemanticResultValue> 对象，则 <xref:System.Speech.Recognition.SemanticResultValue> 除了对象外，还会与该对象之前的语法组件相关联 <xref:System.Speech.Recognition.GrammarBuilder> 。  
  
     例如，在下面的代码段中，如果 <xref:System.Speech.Recognition.Grammar> 使用此实例构造的构造了 " <xref:System.Speech.Recognition.GrammarBuilder> background" 一词，则的值 `true` 是在识别的短语语义中设置的。  
  
    ```csharp  
    GrammarBuilder backgroundGB=new GrammarBuilder("background");  
    backgroundGB.Append(new SemanticResultValue(true));  
    ```  
  
     有关更多信息，请参见 <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29> 的说明。  
  
-   如果使用字符串值短语或特定的 <xref:System.Speech.Recognition.GrammarBuilder> 实例，同时 <xref:System.Object> 指定一个 <xref:System.Speech.Recognition.SemanticResultValue> 值，则该值将自动与字符串值短语或实例相关联 <xref:System.Speech.Recognition.GrammarBuilder> 。  如果 <xref:System.Speech.Recognition.GrammarBuilder> 在识别过程中使用了短语或对象，则会将值分配给识别的短语的语义。  
  
     下面的示例阐释了这一点，并在功能上与前面的示例等效，后者使用了对和的显式调用 <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29> 。 如果识别逻辑使用 "背景" 一词，则会将值 `true` 添加到识别的语义。  
  
    ```csharp  
    fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background", true));  
    ```  
  
     有关详细信息，请参阅和的 <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29> 描述 <xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29> 。  
  
 要由 <xref:System.Speech.Recognition.Grammar> in 识别使用，所有实例都 <xref:System.Speech.Recognition.SemanticResultValue> 必须与使用的对象之一相关联 <xref:System.Speech.Recognition.SemanticValue> <xref:System.Speech.Recognition.Grammar> 。 这是通过将语义键与相关联来完成的 <xref:System.Speech.Recognition.SemanticResultValue> 。  
  
 语义键可以使用对象显式附加到 <xref:System.Speech.Recognition.SemanticResultValue> <xref:System.Speech.Recognition.SemanticResultKey> 。  <xref:System.Speech.Recognition.SemanticResultValue> 未显式附加到键的实例会附加到默认的根键 <xref:System.Speech.Recognition.SemanticValue> 。  
  
 使用后 <xref:System.Speech.Recognition.SemanticResultValue> <xref:System.Speech.Recognition.SemanticValue.Value%2A> ，无论是使用默认根密钥还是按任何特殊项进行标记， <xref:System.Speech.Recognition.SemanticResultKey> 都不能修改该值，也不会在识别操作期间发生异常。  
  
 下面的示例将导致异常，因为它将设置然后修改的根 <xref:System.Speech.Recognition.SemanticValue.Value%2A> <xref:System.Speech.Recognition.Grammar> 。  
  
```csharp  
GrammarBuilder gb=new GrammarBuilder();  
gb.Append(new SemanticResultValue("One"));  
gb.Append(new SemanticResultValue("Two"));  
```  
  
 另一方面，允许使用以下示例中的代码。 尽管它定义了的多个实例 <xref:System.Speech.Recognition.SemanticResultValue> ，但它们包含在一个 <xref:System.Speech.Recognition.Choices> 对象中，只会使用一个对象来设置键的值 `bgOrfgText` 。  
  
```csharp  
Choices fgOrbgChoice = new Choices();  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("background"));  
fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground"));  
SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgText", fgOrbgChoice);  
```
  
## Examples  
 下面的示例返回一个 <xref:System.Speech.Recognition.Grammar> ，它可识别命令 "Set/Change/Alter 前台/Background ..." [color list] "。  <xref:System.Speech.Recognition.SemanticResultValue> 和 <xref:System.Speech.Recognition.SemanticResultKey> 实例 (结合使用 <xref:System.Speech.Recognition.Choices> 和 <xref:System.Speech.Recognition.GrammarBuilder> 对象) 用于定义可在识别时进行分析的语义。  分析的语义将确定请求的颜色，以及是要修改前景还是背景。  
  
```  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(new SemanticResultValue(introGB, String.Format("Command: {0}", introString)));  
  }    
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
        (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                       cmdIntro,  
                       new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361587(v%3doffice.14)">使用 SemanticResultKey 提取 SemanticResultValue</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SemanticResultValue`构造函数支持指定 <xref:System.Object> 基础数据类型为、、或的 `bool` 实例 `int` `float` `string` 。  
  
 构造函数可以 `SemanticResultValue` 在以下两种情况中创建实例：  
  
-   `SemanticResultValue`当使用构造时，实例必须与语法元素显式关联 <xref:System.Speech.Recognition.GrammarBuilder> <xref:System.Speech.Recognition.Grammar> 。  
  
-   已 `SemanticResultValue` 与一个字符串值短语或对象相关联 <xref:System.Speech.Recognition.GrammarBuilder> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue value" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">由 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 托管的值。 必须是类型 <see langword="bool" />、<see langword="int" />、<see langword="float" />，或 <see langword="string" />。</param>
        <summary>使用指定的语义值初始化 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SemanticResultValue`此构造函数返回的不与任何特定语法元素关联。 必须通过将的实例与结合使用来使关联成为显式的 `SemanticResultValue` <xref:System.Speech.Recognition.GrammarBuilder> 。  
  
 例如，在下面的代码段中，如果 <xref:System.Speech.Recognition.Grammar> 使用此实例构造的构造了 " <xref:System.Speech.Recognition.GrammarBuilder> background" 一词，则的值 `true` 是在识别的短语语义中设置的。  
  
```csharp  
GrammarBuilder backgroundGB=new GrammarBuilder("background");  
backgroundGB.Append(new SemanticResultValue(true));  
```  
  
   
  
## Examples  
 下面的示例返回一个 <xref:System.Speech.Recognition.Grammar> ，它可识别命令 "Set/Change/Alter 前台/Background ..." [color list] "。 <xref:System.Speech.Recognition.SemanticResultValue> 和 <xref:System.Speech.Recognition.SemanticResultKey> 实例 (结合使用 <xref:System.Speech.Recognition.Choices> 和 <xref:System.Speech.Recognition.GrammarBuilder> 对象) 用于定义可在识别时进行分析的语义。  分析的语义将确定请求的颜色，以及是要修改前景还是背景。  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
                 (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
        cmdIntro,   
        new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (System.Speech.Recognition.GrammarBuilder builder, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.GrammarBuilder builder, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (builder As GrammarBuilder, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::Speech::Recognition::GrammarBuilder ^ builder, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : System.Speech.Recognition.GrammarBuilder * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (builder, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="builder" Type="System.Speech.Recognition.GrammarBuilder" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="builder">要用于识别的语法组件。</param>
        <param name="value">由 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 托管的值。 必须是类型 <see langword="bool" />、<see langword="int" />、<see langword="float" />，或 <see langword="string" />。</param>
        <summary>使用 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 对象初始化 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 类和关联语义值的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在 <xref:System.Speech.Recognition.GrammarBuilder> 识别逻辑中使用指定的语法元素， `value` 将在识别的输出的语义中设置。  
  
 在下面的代码段中，如果使用实例构造的识别逻辑 <xref:System.Speech.Recognition.GrammarBuilder> (`myGb`) 使用 <xref:System.Speech.Recognition.Choices> 对象 (`myChoice`) 来标识输入，则将该值 `true` 添加到识别的语义。  
  
```csharp  
myGb.Append(new SemanticResultValue(myChoice, true);  
```  
  
 As <xref:System.Speech.Recognition.GrammarBuilder> 支持、和的隐式转换， <xref:System.Speech.Recognition.Choices>  `SemanticResultValue` <xref:System.Speech.Recognition.SemanticResultKey> 此构造函数还可以使用这些对象。  
  
   
  
## Examples  
 下面的示例返回一个 <xref:System.Speech.Recognition.Grammar> ，它可识别命令 "Set/Change/Alter 前台/Background ..." [color list] "。 <xref:System.Speech.Recognition.SemanticResultValue> 和 <xref:System.Speech.Recognition.SemanticResultKey> 实例 (结合使用 <xref:System.Speech.Recognition.Choices> 和 <xref:System.Speech.Recognition.GrammarBuilder> 对象) 用于定义可在识别时进行分析的语义。  分析的语义将确定请求的颜色，以及是要修改前景还是背景。  
  
```csharp  
  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow the command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }           
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
              (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
    }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(  
                      cmdIntro,  
                      new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SemanticResultValue (string phrase, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string phrase, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (phrase As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SemanticResultValue(System::String ^ phrase, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Speech.Recognition.SemanticResultValue : string * obj -&gt; System.Speech.Recognition.SemanticResultValue" Usage="new System.Speech.Recognition.SemanticResultValue (phrase, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="phrase" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="phrase">要用于识别的短语。</param>
        <param name="value">由 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 托管的值。 必须是类型 <see langword="bool" />、<see langword="int" />、<see langword="float" />，或 <see langword="string" />。</param>
        <summary>使用 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 对象初始化 <see cref="T:System.String" /> 类和关联语义值的一个新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果在 `phrase` 识别逻辑中使用由指定的字符串，则 `value` 将在识别输出的语义中设置。  
  
 在以下代码段中，如果使用 <xref:System.Speech.Recognition.GrammarBuilder> 实例 () 构造的识别逻辑 `myGb` 使用字符串 "my 抵押" 来标识输入，则该值 `true` 将添加到识别的语义。  
  
```csharp  
myGb.Append(new SemanticResultValue("my mortgage", true);  
```  
  
   
  
## Examples  
 下面的示例返回一个 <xref:System.Speech.Recognition.Grammar> ，它可识别命令 "Set/Change/Alter 前台/Background ..." [color list] "。 <xref:System.Speech.Recognition.SemanticResultValue> 和 <xref:System.Speech.Recognition.SemanticResultKey> 实例 (结合使用 <xref:System.Speech.Recognition.Choices> 和 <xref:System.Speech.Recognition.GrammarBuilder> 对象) 用于定义可在识别时进行分析的语义。  分析的语义将确定请求的颜色，以及是要修改前景还是背景。  
  
```  
private Grammar FgBgColorGrammar()   
{  
  Grammar grammar = null;  
  
  // Allow command to begin with set, alter, change.  
  Choices introChoices = new Choices();  
  foreach (string introString in new string[] { "Change", "Set", "Alter" })   
  {  
    GrammarBuilder introGB = new GrammarBuilder(introString);  
    introChoices.Add(  
                  new SemanticResultValue(introGB,  
                  String.Format("Command: {0}", introString)));  
  }  
  
  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  
  
  // Define the arguments for the command to select foreground or background   
  // and to change their color as semantic values.  
  Choices fgOrbgChoice = new Choices();  
  GrammarBuilder backgroundGB=new GrammarBuilder("background");  
  backgroundGB.Append(new SemanticResultValue(true));  
  fgOrbgChoice.Add(backgroundGB);  
  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue("foreground", false));  
  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey("BgOrFgBool", fgOrbgChoice);  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    colorChoice.Add(  
          (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  
  }  
  
  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  
  // semantic keys.  
  GrammarBuilder cmdArgs = new GrammarBuilder();  
  cmdArgs.Append(new SemanticResultKey("BgOrFgBool", fgOrbgChoice));  
  cmdArgs.AppendWildcard();  
  cmdArgs.Append(new SemanticResultKey("colorStringList", colorChoice));  
  
  GrammarBuilder cmds =   
      GrammarBuilder.Add(cmdIntro,  
                         new GrammarBuilder(new SemanticResultKey("Cmd Args", cmdArgs)));  
  grammar = new Grammar(cmds);  
  grammar.Name = "Tree [Set,change,alter] [foreground,background] * color";  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGrammarBuilder">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.GrammarBuilder ToGrammarBuilder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder" />
      <MemberSignature Language="VB.NET" Value="Public Function ToGrammarBuilder () As GrammarBuilder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::GrammarBuilder ^ ToGrammarBuilder();" />
      <MemberSignature Language="F#" Value="member this.ToGrammarBuilder : unit -&gt; System.Speech.Recognition.GrammarBuilder" Usage="semanticResultValue.ToGrammarBuilder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.GrammarBuilder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 实例返回 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 结构的实例。</summary>
        <returns>从 <see cref="T:System.Speech.Recognition.GrammarBuilder" /> 实例返回 <see cref="T:System.Speech.Recognition.SemanticResultValue" /> 结构的实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 的使用 <xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A> 等效于使用以 <xref:System.Speech.Recognition.GrammarBuilder> 作为参数的构造函数 <xref:System.Speech.Recognition.SemanticResultValue> (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29>) 。  
  
   
  
## Examples  
 下面的示例创建 <xref:System.Speech.Recognition.Grammar> 支持命令的对象来更改背景色。  
  
 一个 <xref:System.Speech.Recognition.Choices> 对象， `colorChoice` 其中包含用于背景色的选项的列表 () 使用 <xref:System.Speech.Recognition.Choices.Add%28System.Speech.Recognition.GrammarBuilder%5B%5D%29> 与从 <xref:System.Speech.Recognition.GrammarBuilder> <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> 颜色字符串创建的对象上的方法获取的实例进行填充 `SemanticResultValue` 。  
  
 <xref:System.Speech.Recognition.GrammarBuilder>然后通过对实例调用来获取 <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> <xref:System.Speech.Recognition.SemanticResultKey> ，此实例将用于对实例中的语义选项进行关键 `colorChoice` 。  
  
```csharp  
  
private Grammar CreateGrammarBuilderRGBSemantics()   
{  
  
  // Create a set of choices, each a lookup from a color name to RBG.  
  // Choices constructors do not take a SemanticResultValue parameter, so  
  // cast SemanticResultValue to GrammarBuilder.  
  Choices colorChoice = new Choices();  
  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   
  {  
  
    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      
    SemanticResultValue colorValue =   
        new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  
    colorChoice.Add(colorValue.ToGrammarBuilder());  
  }  
  
  SemanticResultKey choiceKey = new SemanticResultKey("rgb", colorChoice);  
  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  
  
  // Create two intermediate grammars with an introductory phrase and the  
  // color choice.  
  GrammarBuilder makeBackgroundBuilder = "Make background";  
  makeBackgroundBuilder.Append(choiceBuilder);  
  
  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder("Configure background as");  
  configureBackgroundBuilder.Append((new SemanticResultKey("rgb", colorChoice)).ToGrammarBuilder());  
  
  // Create the final grammar, which recognizes either intermediate grammar.  
  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] { makeBackgroundBuilder, configureBackgroundBuilder }));  
  grammar.Name = "Set Background Color";  
  
  return grammar;  
}  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
