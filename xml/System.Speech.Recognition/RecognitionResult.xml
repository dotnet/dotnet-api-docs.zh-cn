<Type Name="RecognitionResult" FullName="System.Speech.Recognition.RecognitionResult">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bd5c7ec25925ffd025d6d809fad794b01000202a" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86590133" /></Metadata><TypeSignature Language="C#" Value="public sealed class RecognitionResult : System.Speech.Recognition.RecognizedPhrase, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit RecognitionResult extends System.Speech.Recognition.RecognizedPhrase implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognitionResult" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RecognitionResult&#xA;Inherits RecognizedPhrase&#xA;Implements ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class RecognitionResult sealed : System::Speech::Recognition::RecognizedPhrase, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type RecognitionResult = class&#xA;    inherit RecognizedPhrase&#xA;    interface ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.RecognizedPhrase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Diagnostics.DebuggerDisplay("{DebuggerDisplayString ()}")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerDisplay("{DebuggerDisplayString ()}")&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="ccfe5-101">包含有关由 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 或 <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> 实例识别的输入的详细信息。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-101">Contains detailed information about input that was recognized by instances of <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> or <see cref="T:System.Speech.Recognition.SpeechRecognizer" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccfe5-102">此类派生自 <xref:System.Speech.Recognition.RecognizedPhrase> ，并提供有关语音识别的详细信息，其中包括：</span><span class="sxs-lookup"><span data-stu-id="ccfe5-102">This class derives from <xref:System.Speech.Recognition.RecognizedPhrase> and provides detailed information about speech recognition, including the following:</span></span>  
  
-   <span data-ttu-id="ccfe5-103"><xref:System.Speech.Recognition.RecognizedPhrase.Grammar%2A>属性引用 <xref:System.Speech.Recognition.Grammar> 识别器用于标识语音的。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-103">The <xref:System.Speech.Recognition.RecognizedPhrase.Grammar%2A> property references the <xref:System.Speech.Recognition.Grammar> that the recognizer used to identify the speech.</span></span>  
  
-   <span data-ttu-id="ccfe5-104"><xref:System.Speech.Recognition.RecognizedPhrase.Text%2A>属性包含短语的规范化文本。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-104">The <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> property contains the normalized text for the phrase.</span></span> <span data-ttu-id="ccfe5-105">有关文本规范化的详细信息，请参阅 <xref:System.Speech.Recognition.ReplacementText> 。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-105">For more information about text normalization, see <xref:System.Speech.Recognition.ReplacementText>.</span></span>  
  
-   <span data-ttu-id="ccfe5-106"><xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>属性引用结果中包含的语义信息。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-106">The <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> property references the semantic information contained in the result.</span></span> <span data-ttu-id="ccfe5-107">语义信息是密钥名称和关联语义数据的字典。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-107">The semantic information is a dictionary of the key names and associated semantic data.</span></span>  
  
-   <span data-ttu-id="ccfe5-108"><xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>属性包含 <xref:System.Speech.Recognition.RecognizedPhrase> 对象的集合，这些对象表示音频输入的其他候选解释。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-108">The <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> property contains a collection of <xref:System.Speech.Recognition.RecognizedPhrase> objects that represent other candidate interpretations of the audio input.</span></span> <span data-ttu-id="ccfe5-109">有关详细信息，请参阅 <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-109">See <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> for additional information.</span></span>  
  
-   <span data-ttu-id="ccfe5-110"><xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性包含对象的有序集合 <xref:System.Speech.Recognition.RecognizedWordUnit> ，这些对象表示输入中每个识别的单词。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-110">The <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> property contains an ordered collection of <xref:System.Speech.Recognition.RecognizedWordUnit> objects that represent each recognized word in the input.</span></span> <span data-ttu-id="ccfe5-111">每个 <xref:System.Speech.Recognition.RecognizedWordUnit> 包含相应单词的显示格式、词法格式和发音信息。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-111">Each <xref:System.Speech.Recognition.RecognizedWordUnit> contains display format, lexical format, and pronunciation information for the corresponding word.</span></span>  
  
 <span data-ttu-id="ccfe5-112"><xref:System.Speech.Recognition.SpeechRecognitionEngine>、和类的某些成员 <xref:System.Speech.Recognition.SpeechRecognizer> <xref:System.Speech.Recognition.Grammar> 可以生成 <xref:System.Speech.Recognition.RecognitionResult> 。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-112">Certain members of the <xref:System.Speech.Recognition.SpeechRecognitionEngine>, <xref:System.Speech.Recognition.SpeechRecognizer>, and <xref:System.Speech.Recognition.Grammar> classes can generate a <xref:System.Speech.Recognition.RecognitionResult>.</span></span> <span data-ttu-id="ccfe5-113">有关详细信息，请参阅以下方法和事件。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-113">For more information, see the following methods and events.</span></span>  
  
-   <span data-ttu-id="ccfe5-114">类的方法和事件 <xref:System.Speech.Recognition.SpeechRecognitionEngine> ：</span><span class="sxs-lookup"><span data-stu-id="ccfe5-114">Methods and events of the <xref:System.Speech.Recognition.SpeechRecognitionEngine> class:</span></span>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>  
  
-   <span data-ttu-id="ccfe5-115">类的方法和事件 <xref:System.Speech.Recognition.SpeechRecognizer> ：</span><span class="sxs-lookup"><span data-stu-id="ccfe5-115">Methods and events of the <xref:System.Speech.Recognition.SpeechRecognizer> class:</span></span>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized>  
  
-   <span data-ttu-id="ccfe5-116"><xref:System.Speech.Recognition.Grammar.SpeechRecognized>类的事件 <xref:System.Speech.Recognition.Grammar> 。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-116">The <xref:System.Speech.Recognition.Grammar.SpeechRecognized> event of the <xref:System.Speech.Recognition.Grammar> class.</span></span>  
  
 <span data-ttu-id="ccfe5-117">有关识别事件的详细信息，请参阅 [使用语音识别事件](https://msdn.microsoft.com/library/01c598ca-2e0e-4e89-b303-cd1cef9e8482)。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-117">For more information about recognition events, see [Using Speech Recognition Events](https://msdn.microsoft.com/library/01c598ca-2e0e-4e89-b303-cd1cef9e8482).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccfe5-118">下面的示例演示了 `SpeechRecognized` 或对象的事件的处理 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 程序 <xref:System.Speech.Recognition.SpeechRecognizer> ，以及有关关联的的某些信息 <xref:System.Speech.Recognition.RecognitionResult> 。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-118">The following example shows a handler for the `SpeechRecognized` event of a <xref:System.Speech.Recognition.SpeechRecognitionEngine> or <xref:System.Speech.Recognition.SpeechRecognizer> object, and some of the information about the associated <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Grammar({0}), {1}: {2}",  
    e.Result.Grammar.Name, e.Result.Audio.Duration, e.Result.Text);  
  
  // Display the semantic values in the recognition result.  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine(" {0} key: {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    RecognizedAudio audio = e.Result.GetAudioForWordRange(word, word);  
    Console.WriteLine(" {0,-10} {1,-10} {2,-10} {3} ({4})",  
      word.Text, word.LexicalForm, word.Pronunciation,  
      audio.Duration, word.DisplayAttributes);  
  }  
  
  // Display the recognition alternates for the result.  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine(" alt({0}) {1}", phrase.Confidence, phrase.Text);  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
    <altmember cref="T:System.Speech.Recognition.RecognizedPhrase" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
    <altmember cref="E:System.Speech.Recognition.Grammar.SpeechRecognized" />
  </Docs>
  <Members>
    <Member MemberName="Alternates">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt; Alternates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedPhrase&gt; Alternates" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognitionResult.Alternates" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Alternates As ReadOnlyCollection(Of RecognizedPhrase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ Alternates { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Speech::Recognition::RecognizedPhrase ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Alternates : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;" Usage="System.Speech.Recognition.RecognitionResult.Alternates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ccfe5-119">获取可能的匹配集合，以便输入至语音识别器。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-119">Gets the collection of possible matches for input to the speech recognizer.</span></span></summary>
        <value><span data-ttu-id="ccfe5-120">识别备用项的只读集合。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-120">A read-only collection of the recognition alternates.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccfe5-121">识别 <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> 按其属性的值进行排序 <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> 。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-121">Recognition <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> are ordered by the values of their <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> properties.</span></span> <span data-ttu-id="ccfe5-122">给定短语的置信度值指示短语与输入匹配的概率。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-122">The confidence value of a given phrase indicates the probability that the phrase matches the input.</span></span> <span data-ttu-id="ccfe5-123">置信度值最高的短语是最有可能与输入匹配的短语。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-123">The phrase with the highest confidence value is the phrase that most likely matches the input.</span></span>  
  
 <span data-ttu-id="ccfe5-124"><xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A>应该单独计算每个值，而不引用其他值的置信度值 <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> 。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-124">Each <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> value should be evaluated individually and without reference to the confidence values of other <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>.</span></span> <span data-ttu-id="ccfe5-125">继承自的属性 <xref:System.Speech.Recognition.RecognitionResult> <xref:System.Speech.Recognition.RecognizedPhrase> 提供有关置信度最高的短语的详细信息。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-125">The properties that the <xref:System.Speech.Recognition.RecognitionResult> inherits from <xref:System.Speech.Recognition.RecognizedPhrase> provide detailed information about the phrase with the highest confidence score.</span></span>  
  
 <span data-ttu-id="ccfe5-126">集合的一个用途 <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> 是自动纠错。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-126">One use for the <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> collection is for automated error correction.</span></span> <span data-ttu-id="ccfe5-127">例如，在设计目录对话框时，应用程序可能会提示用户检查应用程序是否具有来自识别事件的正确信息，如 "您是否说" Anna "？如果用户显示 "否"，则应用程序可以查询用户是否有足够分数的任何备用项 <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> 。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-127">For example, when designing a directory dialog, an application could prompt the user to check if the application has the correct information from a recognition event, as in, "Did you say 'Anna'?" If the user says "no", then the application could query the user about any alternates that had a high enough <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> score.</span></span>  
  
 <span data-ttu-id="ccfe5-128">有关语音识别和识别替代的使用的详细信息，请参阅 [语音识别](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)) 和 [使用语音识别事件](https://msdn.microsoft.com/library/01c598ca-2e0e-4e89-b303-cd1cef9e8482)。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-128">For more information about speech recognition and the use of recognition alternates, see [Speech Recognition](https://docs.microsoft.com/previous-versions/office/developer/speech-technologies/hh361633(v=office.14)) and [Using Speech Recognition Events](https://msdn.microsoft.com/library/01c598ca-2e0e-4e89-b303-cd1cef9e8482).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccfe5-129">下面的示例演示事件的处理程序 `SpeechRecognized` 以及有关关联的的某些信息 <xref:System.Speech.Recognition.RecognitionResult> 。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-129">The following example shows a handler for the `SpeechRecognized` event and some of the information about the associated <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Grammar({0}), {1}: {2}",  
    e.Result.Grammar.Name, e.Result.Audio.Duration, e.Result.Text);  
  
  // Display the semantic values in the recognition result.  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine(" {0} key: {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    RecognizedAudio audio = e.Result.GetAudioForWordRange(word, word);  
    Console.WriteLine(" {0,-10} {1,-10} {2,-10} {3} ({4})",  
      word.Text, word.LexicalForm, word.Pronunciation,  
      audio.Duration, word.DisplayAttributes);  
  }  
  
  // Display the recognition alternates for the result.  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine(" alt({0}) {1}", phrase.Confidence, phrase.Text);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
        <altmember cref="T:System.Speech.Recognition.RecognizedPhrase" />
      </Docs>
    </Member>
    <Member MemberName="Audio">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizedAudio Audio { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.RecognizedAudio Audio" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognitionResult.Audio" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Audio As RecognizedAudio" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Speech::Recognition::RecognizedAudio ^ Audio { System::Speech::Recognition::RecognizedAudio ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Audio : System.Speech.Recognition.RecognizedAudio" Usage="System.Speech.Recognition.RecognitionResult.Audio" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizedAudio</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ccfe5-130">获取与识别结果关联的音频。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-130">Gets the audio associated with the recognition result.</span></span></summary>
        <value><span data-ttu-id="ccfe5-131">如果识别器从启动调用的结果 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 或 <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> 实例的 <see langword="null" /> 或 <see langword="EmulateRecognize" /> 方法，音频与标识结果或 <see langword="EmulateRecognizeAsync" /> 。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-131">The audio associated with the recognition result or <see langword="null" /> if the recognizer generated the result from a call to the <see langword="EmulateRecognize" /> or <see langword="EmulateRecognizeAsync" /> methods of a <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> or <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> instance.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccfe5-132">若要获取与识别结果中的特定单词范围相关联的音频部分，请使用 <xref:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-132">To get a section of the audio that is associated with a specific range of words in the recognition result, use the <xref:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccfe5-133">下面的示例演示了 **SpeechRecognized** 事件的处理程序以及有关关联的的某些信息 <xref:System.Speech.Recognition.RecognitionResult> 。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-133">The following example shows a handler for the **SpeechRecognized** event and some of the information about the associated <xref:System.Speech.Recognition.RecognitionResult>.</span></span>  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
      Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
      Console.WriteLine("Audio for result:");  
      Console.WriteLine("  Start time: "+ e.Result.Audio.StartTime);  
      Console.WriteLine("  Duration: " + e.Result.Audio.Duration);  
      Console.WriteLine("  Format: " + e.Result.Audio.Format.EncodingFormat);  
  
  // Display the semantic values in the recognition result.  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine(" {0} key: {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    RecognizedAudio audio = e.Result.GetAudioForWordRange(word, word);  
    Console.WriteLine(" {0,-10} {1,-10} {2,-10} {3} ({4})",  
      word.Text, word.LexicalForm, word.Pronunciation,  
      audio.Duration, word.DisplayAttributes);  
  }  
  
  // Display the recognition alternates for the result.  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine(" alt({0}) {1}", phrase.Confidence, phrase.Text);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
        <altmember cref="T:System.Speech.Recognition.RecognizedPhrase" />
        <altmember cref="M:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange(System.Speech.Recognition.RecognizedWordUnit,System.Speech.Recognition.RecognizedWordUnit)" />
      </Docs>
    </Member>
    <Member MemberName="GetAudioForWordRange">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizedAudio GetAudioForWordRange (System.Speech.Recognition.RecognizedWordUnit firstWord, System.Speech.Recognition.RecognizedWordUnit lastWord);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognizedAudio GetAudioForWordRange(class System.Speech.Recognition.RecognizedWordUnit firstWord, class System.Speech.Recognition.RecognizedWordUnit lastWord) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange(System.Speech.Recognition.RecognizedWordUnit,System.Speech.Recognition.RecognizedWordUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAudioForWordRange (firstWord As RecognizedWordUnit, lastWord As RecognizedWordUnit) As RecognizedAudio" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Speech::Recognition::RecognizedAudio ^ GetAudioForWordRange(System::Speech::Recognition::RecognizedWordUnit ^ firstWord, System::Speech::Recognition::RecognizedWordUnit ^ lastWord);" />
      <MemberSignature Language="F#" Value="member this.GetAudioForWordRange : System.Speech.Recognition.RecognizedWordUnit * System.Speech.Recognition.RecognizedWordUnit -&gt; System.Speech.Recognition.RecognizedAudio" Usage="recognitionResult.GetAudioForWordRange (firstWord, lastWord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizedAudio</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="firstWord" Type="System.Speech.Recognition.RecognizedWordUnit" />
        <Parameter Name="lastWord" Type="System.Speech.Recognition.RecognizedWordUnit" />
      </Parameters>
      <Docs>
        <param name="firstWord"><span data-ttu-id="ccfe5-134">所表示范围中的第一个字。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-134">The first word in the range.</span></span></param>
        <param name="lastWord"><span data-ttu-id="ccfe5-135">所表示范围中的最后一个日期。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-135">The last word in the range.</span></span></param>
        <summary><span data-ttu-id="ccfe5-136">在识别结果中获取与特定范围单词关联的音频部分。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-136">Gets a section of the audio that is associated with a specific range of words in the recognition result.</span></span></summary>
        <returns><span data-ttu-id="ccfe5-137">与字范围关联的音频的部分。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-137">The section of audio associated with the word range.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccfe5-138">若要获取与识别结果关联的完整音频，请使用 <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-138">To get the complete audio associated with the recognition result, use the <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="ccfe5-139">下面的示例创建一个语法来接受名称输入，并将其附加到该事件的处理程序 `SpeechRecognized` 。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-139">The following example creates a grammar to accept name input and attaches to it a handler for the `SpeechRecognized` event.</span></span> <span data-ttu-id="ccfe5-140">语法使用通配符作为短语的 name 元素。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-140">The grammar uses a wildcard for the name element of the phrase.</span></span> <span data-ttu-id="ccfe5-141">事件处理程序使用通配符中的音频来创建和播放问候语提示。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-141">The event handler uses the audio from the wildcard to create and play a greeting prompt.</span></span>  
  
```csharp  
  
private Grammar CreateNameInputGrammar()  
{  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey nameKey =  
    new SemanticResultKey("Name", wildcardBuilder);  
  
  GrammarBuilder nameBuilder =  
    new GrammarBuilder("My name is");  
  nameBuilder.Append(nameKey);  
  
  Grammar nameGrammar = new Grammar(nameBuilder);  
  nameGrammar.Name = "Name input";  
  
  nameGrammar.SpeechRecognized +=  
    new EventHandler<SpeechRecognizedEventArgs>(  
      NameInputHandler);  
  
  return nameGrammar;  
}  
  
// Handle the SpeechRecognized event for the name grammar.  
private void NameInputHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  SemanticValue semantics = e.Result.Semantics;  
  
  if (semantics.ContainsKey("Name"))  
  {  
    RecognizedAudio nameAudio =  
      result.GetAudioForWordRange(  
        result.Words[3], result.Words[result.Words.Count - 1]);  
  
    // Save the audio. Create a directory and file as necessary.  
    FileInfo fi = new FileInfo(@"C:\temp\temp.wav");  
    if (!fi.Directory.Exists)  
    {  
      fi.Directory.Create();  
    }  
    FileStream stream = new FileStream(fi.FullName, FileMode.Create);  
    nameAudio.WriteToWaveStream(stream);  
    stream.Close();  
  
    // Greet the person using the saved audio.  
    SpeechSynthesizer synthesizer = new SpeechSynthesizer();  
    PromptBuilder builder = new PromptBuilder();  
    builder.AppendText("Hello");  
    builder.AppendAudio(fi.FullName);  
    synthesizer.Speak(builder);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException"><span data-ttu-id="ccfe5-142">从启动调用的结果生成的识别器 <see langword="EmulateRecognize" /> 或 <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> 或 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 对象的 <see langword="EmulateRecognizeAsync" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-142">The recognizer generated the result from a call to <see langword="EmulateRecognize" /> or <see langword="EmulateRecognizeAsync" /> methods of the <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> or <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> objects.</span></span></exception>
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
        <altmember cref="T:System.Speech.Recognition.RecognizedPhrase" />
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Audio" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognitionResult.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="recognitionResult.System.Runtime.Serialization.ISerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="ccfe5-143">要填充数据的对象。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-143">The object to populate with data.</span></span></param>
        <param name="context"><span data-ttu-id="ccfe5-144">此序列化的目标。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-144">The destination for the serialization.</span></span></param>
        <summary><span data-ttu-id="ccfe5-145">使用序列化目标对象所需的数据填充 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 的实例。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-145">Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance with the data needed to serialize the target object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ccfe5-146">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-146">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="ccfe5-147">它只能在 <xref:System.Speech.Recognition.RecognitionResult> 实例被强制转换为 <xref:System.Runtime.Serialization.ISerializable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="ccfe5-147">It can be used only when the <xref:System.Speech.Recognition.RecognitionResult> instance is cast to an <xref:System.Runtime.Serialization.ISerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
  </Members>
</Type>
