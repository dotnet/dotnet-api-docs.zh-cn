<Type Name="WebService" FullName="System.Web.Services.WebService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="daeba97168d264cb44b268a78e92a18dfa542ef6" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86666131" /></Metadata><TypeSignature Language="C#" Value="public class WebService : System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebService extends System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="DocId" Value="T:System.Web.Services.WebService" />
  <TypeSignature Language="VB.NET" Value="Public Class WebService&#xA;Inherits MarshalByValueComponent" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebService : System::ComponentModel::MarshalByValueComponent" />
  <TypeSignature Language="F#" Value="type WebService = class&#xA;    inherit MarshalByValueComponent" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Services</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 XML Web services 定义可选的基类，该基类提供对公共 ASP.NET 对象（如应用程序和会话状态）的直接访问。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果不需要访问常见的 ASP.NET 对象，则仍可以创建 XML Web service，而不是从派生 <xref:System.Web.Services.WebService> 。 可以通过访问其他 ASP.NET 对象 <xref:System.Web.Services.WebService.Context%2A> 。  
  
 如果 XML Web service 方法的 <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute.OneWay%2A> 属性为 <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute> 或 <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> 设置为，则 `true` 无法访问其 <xref:System.Web.HttpContext> 。 因此， <xref:System.Web.Services.WebService> 从该 XML Web service 方法中访问类的任何属性，都将返回 `null` 。  
  
 如果你使用的是 .NET Framework 版本 1.0 XML Web service 方法，这些方法 <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute> 应用了或 <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> 特性 <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay%2A> ，并且属性设置为，则无权 `true` <xref:System.Web.HttpContext> 使用静态 <xref:System.Web.HttpContext.Current%2A> 属性访问。 若要访问 <xref:System.Web.HttpContext> ，请派生类实现 XML Web service 方法， <xref:System.Web.Services.WebService> 并访问 <xref:System.Web.Services.WebService.Context%2A> 属性。  
  
   
  
## Examples  
 下面的示例创建了一个派生自的 XML Web service，以便 <xref:System.Web.Services.WebService> 使用 <xref:System.Web.Services.WebService.Context%2A> 属性获取服务器上的请求时间。  
  
 [!code-aspx-csharp[Classic WebService Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic WebService Example/CS/sourcecs.asmx)]
 [!code-aspx-vb[Classic WebService Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic WebService Example/VB/sourcevb.asmx)]
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WebService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Services.WebService.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WebService();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Services.WebService" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public System.Web.HttpApplicationState Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpApplicationState Application" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.WebService.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As HttpApplicationState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpApplicationState ^ Application { System::Web::HttpApplicationState ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Application : System.Web.HttpApplicationState" Usage="System.Web.Services.WebService.Application" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Description("The ASP.NET application object for the current request.")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Description("The ASP.NET application object for the current request.")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpApplicationState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前 HTTP 请求的应用程序对象。</summary>
        <value>一个 <see cref="T:System.Web.HttpApplicationState" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XML Web services 可以同时使用应用程序状态和会话状态。 应用程序状态在访问 XML Web service 的所有会话中进行维护，无论是否关闭 (使用) 的属性的方法的会话状态 <xref:System.Web.Services.WebMethodAttribute.EnableSession%2A> <xref:System.Web.Services.WebMethodAttribute> 。  
  
   
  
## Examples  
 下面的示例演示一个命中计数器，每次浏览器调用 XML Web service 方法时递增计数。  
  
 [!code-aspx-csharp[Classic WebService.Application Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic WebService.Application Example/CS/sourcecs.asmx)]
 [!code-aspx-vb[Classic WebService.Application Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic WebService.Application Example/VB/sourcevb.asmx)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpApplicationState" />
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Web.HttpContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.WebService.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As HttpContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpContext ^ Context { System::Web::HttpContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Web.HttpContext" Usage="System.Web.Services.WebService.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前请求的 ASP.NET <see cref="T:System.Web.HttpContext" />，它封装了由 HTTP 服务器用来处理 Web 请求的所有 HTTP 特定的上下文。</summary>
        <value>当前请求的 ASP.NET <see cref="T:System.Web.HttpContext" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果应用了或特性的 XML Web service 方法的 <xref:System.Web.Services.Protocols.SoapRpcMethodAttribute> <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute> <xref:System.Web.Services.Protocols.SoapDocumentMethodAttribute.OneWay%2A> 属性设置为 `true` ，则无法 <xref:System.Web.HttpContext> 使用静态属性访问这些方法 <xref:System.Web.HttpContext.Current%2A> 。 若要访问 <xref:System.Web.HttpContext> ，请派生类实现 XML Web service 方法， <xref:System.Web.Services.WebService> 并访问 <xref:System.Web.Services.WebService.Context%2A> 属性。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Web.Services.WebService.Context%2A> 属性获取服务器上的请求的时间。  
  
 [!code-aspx-csharp[Classic WebService Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic WebService Example/CS/sourcecs.asmx)]
 [!code-aspx-vb[Classic WebService Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic WebService Example/VB/sourcevb.asmx)]
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><paramref name="Context" /> 为 <see langword="null" />。</exception>
        <altmember cref="T:System.Web.HttpContext" />
      </Docs>
    </Member>
    <Member MemberName="Server">
      <MemberSignature Language="C#" Value="public System.Web.HttpServerUtility Server { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpServerUtility Server" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.WebService.Server" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Server As HttpServerUtility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpServerUtility ^ Server { System::Web::HttpServerUtility ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Server : System.Web.HttpServerUtility" Usage="System.Web.Services.WebService.Server" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpServerUtility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前请求的 <see cref="T:System.Web.HttpServerUtility" />。</summary>
        <value>一个 <see cref="T:System.Web.HttpServerUtility" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.HttpServerUtility>类提供多个可在处理 Web 请求时使用的方法，包括 <xref:System.Web.HttpServerUtility.CreateObject%2A> 用于实例化 COM 对象)  (。  
  
   
  
## Examples  
 以下示例使用属性返回 Web 服务器的计算机名称 <xref:System.Web.Services.WebService.Server%2A> 。  
  
 [!code-aspx-csharp[Classic WebService.Server Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic WebService.Server Example/CS/sourcecs.asmx)]
 [!code-aspx-vb[Classic WebService.Server Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic WebService.Server Example/VB/sourcevb.asmx)]
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.HttpServerUtility" />
        <altmember cref="M:System.Web.HttpServerUtility.CreateObject(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Session">
      <MemberSignature Language="C#" Value="public System.Web.SessionState.HttpSessionState Session { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.SessionState.HttpSessionState Session" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.WebService.Session" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Session As HttpSessionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::SessionState::HttpSessionState ^ Session { System::Web::SessionState::HttpSessionState ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Session : System.Web.SessionState.HttpSessionState" Usage="System.Web.Services.WebService.Session" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.SessionState.HttpSessionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前请求的 <see cref="T:System.Web.SessionState.HttpSessionState" /> 实例。</summary>
        <value>表示当前会话的 ASP.NET 会话状态对象的 <see cref="T:System.Web.SessionState.HttpSessionState" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例使用会话状态来确定特定会话访问 XML Web service 方法的次数 `SessionHitCounter` 。 在此示例中， <xref:System.Web.Services.WebMethodAttribute.EnableSession%2A> 的属性 <xref:System.Web.Services.WebMethodAttribute> 设置为， `true` 以获取对会话状态的访问。  
  
 [!code-aspx-csharp[Classic WebMethodAttribute.EnableSession Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic WebMethodAttribute.EnableSession Example/CS/sourcecs.asmx)]
 [!code-aspx-vb[Classic WebMethodAttribute.EnableSession Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic WebMethodAttribute.EnableSession Example/VB/sourcevb.asmx)]
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.SessionState.HttpSessionState" />
      </Docs>
    </Member>
    <Member MemberName="SoapVersion">
      <MemberSignature Language="C#" Value="public System.Web.Services.Protocols.SoapProtocolVersion SoapVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Services.Protocols.SoapProtocolVersion SoapVersion" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.WebService.SoapVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SoapVersion As SoapProtocolVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Services::Protocols::SoapProtocolVersion SoapVersion { System::Web::Services::Protocols::SoapProtocolVersion get(); };" />
      <MemberSignature Language="F#" Value="member this.SoapVersion : System.Web.Services.Protocols.SoapProtocolVersion" Usage="System.Web.Services.WebService.SoapVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Services.Protocols.SoapProtocolVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于向 XML Web services 发送 SOAP 请求的 SOAP 协议的版本。</summary>
        <value><see cref="T:System.Web.Services.Protocols.SoapProtocolVersion" /> 值之一。 默认值为 <see cref="F:System.Web.Services.Protocols.SoapProtocolVersion.Default" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果未使用 SOAP 协议与 XML Web service （如 HTTP GET 或 HTTP POST）进行通信，则属性的值 <xref:System.Web.Services.WebService.SoapVersion%2A> 为 <xref:System.Web.Services.Protocols.SoapProtocolVersion.Default> 。  
  
 对于不是从类派生的 XML Web services <xref:System.Web.Services.WebService> ，还可以使用属性的 "WebServiceSoapVersion" 项访问用于向 XML Web service 发出 soap 请求的 soap 协议的版本 <xref:System.Web.HttpContext.Items%2A?displayProperty=nameWithType> 。 该条目的类型为 <xref:System.Web.Services.Protocols.SoapProtocolVersion> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Services.Protocols.SoapProtocolVersion" />
        <altmember cref="P:System.Web.HttpContext.Items" />
      </Docs>
    </Member>
    <Member MemberName="User">
      <MemberSignature Language="C#" Value="public System.Security.Principal.IPrincipal User { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IPrincipal User" />
      <MemberSignature Language="DocId" Value="P:System.Web.Services.WebService.User" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property User As IPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::IPrincipal ^ User { System::Security::Principal::IPrincipal ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.User : System.Security.Principal.IPrincipal" Usage="System.Web.Services.WebService.User" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Services</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 ASP.NET 服务器 <see cref="P:System.Web.HttpContext.User" /> 对象。 可用于验证用户是否有权执行请求。</summary>
        <value>代表 ASP.NET 服务器 <see cref="T:System.Security.Principal.IPrincipal" /> 对象的 <see cref="P:System.Web.HttpContext.User" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Internet Information Services (IIS) 和 .NET Framework 都需要配置为进行身份验证，以便 <xref:System.Web.Services.WebService.User%2A> 属性有意义。 身份验证是接受来自用户的凭据并针对某些颁发机构验证这些凭据的过程。 如果凭据有效，则您有一个经过身份验证的标识。 .NET Framework 中的身份验证通过将条目放入 web.config 文件来进行配置。  
  
 下面的示例演示在 web.config 文件中放置的项，以启用 Windows 身份验证。  
  
```xml
<security>  
 <authentication mode="Windows"> <!-- Mode Options are Windows, Cookie, Passport and None or Empty String -->  
 </authentication>  
 </security>  
```  
  
 有关设置 XML Web service 安全性的详细信息，请参阅[保护使用 ASP.NET 创建的 XML Web Services](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/w67h0dw7(v=vs.100))。  
  
   
  
## Examples  
 下面的示例查找经过身份验证的用户名并返回该名称。  
  
 [!code-aspx-csharp[Classic WebService.User Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic WebService.User Example/CS/sourcecs.asmx)]
 [!code-aspx-vb[Classic WebService.User Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic WebService.User Example/VB/sourcevb.asmx)]
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Security.Principal.IPrincipal" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/w67h0dw7(v=vs.100)">保证使用 ASP.NET 创建的 XML Web services 的安全</related>
      </Docs>
    </Member>
  </Members>
</Type>
