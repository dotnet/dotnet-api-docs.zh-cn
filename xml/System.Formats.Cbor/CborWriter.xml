<Type Name="CborWriter" FullName="System.Formats.Cbor.CborWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5eb6d8ea173a5b87457f604e338a01b460bff67d" /><Meta Name="ms.sourcegitcommit" Value="9a0316374d19cc78674994106d073aa5ef1bd5f3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="11/10/2020" /><Meta Name="ms.locfileid" Value="94455106" /></Metadata><TypeSignature Language="C#" Value="public class CborWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CborWriter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Formats.Cbor.CborWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class CborWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class CborWriter" />
  <TypeSignature Language="F#" Value="type CborWriter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Formats.Cbor</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>简明二进制对象表示 (CBOR) 编码数据的编写器。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CborWriter (System.Formats.Cbor.CborConformanceMode conformanceMode = System.Formats.Cbor.CborConformanceMode.Strict, bool convertIndefiniteLengthEncodings = false, bool allowMultipleRootLevelValues = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Formats.Cbor.CborConformanceMode conformanceMode, bool convertIndefiniteLengthEncodings, bool allowMultipleRootLevelValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.#ctor(System.Formats.Cbor.CborConformanceMode,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (Optional conformanceMode As CborConformanceMode = System.Formats.Cbor.CborConformanceMode.Strict, Optional convertIndefiniteLengthEncodings As Boolean = false, Optional allowMultipleRootLevelValues As Boolean = false)" />
      <MemberSignature Language="F#" Value="new System.Formats.Cbor.CborWriter : System.Formats.Cbor.CborConformanceMode * bool * bool -&gt; System.Formats.Cbor.CborWriter" Usage="new System.Formats.Cbor.CborWriter (conformanceMode, convertIndefiniteLengthEncodings, allowMultipleRootLevelValues)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="conformanceMode" Type="System.Formats.Cbor.CborConformanceMode" />
        <Parameter Name="convertIndefiniteLengthEncodings" Type="System.Boolean" />
        <Parameter Name="allowMultipleRootLevelValues" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="conformanceMode">枚举值之一，指定对已编码数据执行的一致性检查的相关指导。
默认为 <see cref="F:System.Formats.Cbor.CborConformanceMode.Strict" /> 一致性模式。</param>
        <param name="convertIndefiniteLengthEncodings">如果为 <see langword="true" />，则自动将不确定长度的编码转换为确定长度的等效编码，并允许在一致性模式下使用不允许使用的不确定长度的写入 API；否则为 <see langword="false" /></param>
        <param name="allowMultipleRootLevelValues">如果为 <see langword="true" />，则允许编写器写入多个根级别值；否则为 <see langword="false" />。</param>
        <summary>使用指定的配置来初始化 <see cref="T:System.Formats.Cbor.CborWriter" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="conformanceMode" /> 不是定义的 <see cref="T:System.Formats.Cbor.CborConformanceMode" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="AllowMultipleRootLevelValues">
      <MemberSignature Language="C#" Value="public bool AllowMultipleRootLevelValues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowMultipleRootLevelValues" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Cbor.CborWriter.AllowMultipleRootLevelValues" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowMultipleRootLevelValues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowMultipleRootLevelValues { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowMultipleRootLevelValues : bool" Usage="System.Formats.Cbor.CborWriter.AllowMultipleRootLevelValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，此值指明此编写器是否允许多个根级别 CBOR 数据项。</summary>
        <value><see langword="true" /> 如果编写器允许多个根级别的 CBOR 数据项，则为;否则为 <see langword="false" /> 。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesWritten">
      <MemberSignature Language="C#" Value="public int BytesWritten { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesWritten" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Cbor.CborWriter.BytesWritten" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BytesWritten As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BytesWritten { int get(); };" />
      <MemberSignature Language="F#" Value="member this.BytesWritten : int" Usage="System.Formats.Cbor.CborWriter.BytesWritten" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取已写入到缓冲区的字节总数。</summary>
        <value>写入缓冲区中的总字节数。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceMode">
      <MemberSignature Language="C#" Value="public System.Formats.Cbor.CborConformanceMode ConformanceMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Formats.Cbor.CborConformanceMode ConformanceMode" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Cbor.CborWriter.ConformanceMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConformanceMode As CborConformanceMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Formats::Cbor::CborConformanceMode ConformanceMode { System::Formats::Cbor::CborConformanceMode get(); };" />
      <MemberSignature Language="F#" Value="member this.ConformanceMode : System.Formats.Cbor.CborConformanceMode" Usage="System.Formats.Cbor.CborWriter.ConformanceMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Formats.Cbor.CborConformanceMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取此编写器使用的一致性模式。</summary>
        <value>枚举值之一，表示此编写器使用的一致性模式。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertIndefiniteLengthEncodings">
      <MemberSignature Language="C#" Value="public bool ConvertIndefiniteLengthEncodings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConvertIndefiniteLengthEncodings" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Cbor.CborWriter.ConvertIndefiniteLengthEncodings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConvertIndefiniteLengthEncodings As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConvertIndefiniteLengthEncodings { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ConvertIndefiniteLengthEncodings : bool" Usage="System.Formats.Cbor.CborWriter.ConvertIndefiniteLengthEncodings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，此值指明编写器是否自动将不确定长度的编码转换为确定长度的等效编码。</summary>
        <value><see langword="true" /> 如果编写器自动将无限长度的编码转换为明确长度的等效项，则为;否则为 <see langword="false" /> 。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentDepth">
      <MemberSignature Language="C#" Value="public int CurrentDepth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrentDepth" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Cbor.CborWriter.CurrentDepth" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentDepth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CurrentDepth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentDepth : int" Usage="System.Formats.Cbor.CborWriter.CurrentDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取编写器在 CBOR 文档中的当前嵌套级别。</summary>
        <value>一个数字，表示 CBOR 文档中 nestedness 的当前级别。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public byte[] Encode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] Encode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.Encode" />
      <MemberSignature Language="VB.NET" Value="Public Function Encode () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ Encode();" />
      <MemberSignature Language="F#" Value="member this.Encode : unit -&gt; byte[]" Usage="cborWriter.Encode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回包含已编码值的新数组。</summary>
        <returns>一个包含编码值的精确大小的数组。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">编写器不包含完整 CBOR 值或根级别值序列。</exception>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public int Encode (Span&lt;byte&gt; destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Encode(valuetype System.Span`1&lt;unsigned int8&gt; destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.Encode(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Function Encode (destination As Span(Of Byte)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Encode(Span&lt;System::Byte&gt; destination);" />
      <MemberSignature Language="F#" Value="member this.Encode : Span&lt;byte&gt; -&gt; int" Usage="cborWriter.Encode destination" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="destination">要写入的缓冲区。</param>
        <summary>将数据的已编码表示形式写入 <paramref name="destination" />。</summary>
        <returns>写入到 <paramref name="destination" /> 的字节数。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">编写器不包含完整 CBOR 值或根级别值序列。</exception>
        <exception cref="T:System.ArgumentException">目标缓冲区不够大，无法保留已编码值。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsWriteCompleted">
      <MemberSignature Language="C#" Value="public bool IsWriteCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriteCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Formats.Cbor.CborWriter.IsWriteCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWriteCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWriteCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWriteCompleted : bool" Usage="System.Formats.Cbor.CborWriter.IsWriteCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>声明编写器是完成了完整根级别 CBOR 文档的编写，还是完成了根级别 CBOR 文档序列的编写。</summary>
        <value><see langword="true" /> 如果编写器已完成写入完整根级别的 CBOR 文档或根级别的 CBOR 文档的序列，则为; <see langword="false" /> 否则为。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="cborWriter.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将编写器重置为没有数据，而不释放资源。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryEncode">
      <MemberSignature Language="C#" Value="public bool TryEncode (Span&lt;byte&gt; destination, out int bytesWritten);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryEncode(valuetype System.Span`1&lt;unsigned int8&gt; destination, [out] int32&amp; bytesWritten) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.TryEncode(System.Span{System.Byte},System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryEncode (destination As Span(Of Byte), ByRef bytesWritten As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryEncode(Span&lt;System::Byte&gt; destination, [Runtime::InteropServices::Out] int % bytesWritten);" />
      <MemberSignature Language="F#" Value="member this.TryEncode : Span&lt;byte&gt; * int -&gt; bool" Usage="cborWriter.TryEncode (destination, bytesWritten)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="bytesWritten" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="destination">要写入的缓冲区。</param>
        <param name="bytesWritten">当此方法返回时，包含写入到 <paramref name="destination" /> 的字节数。</param>
        <summary>尝试将数据的已编码表示形式写入 <paramref name="destination" />。</summary>
        <returns>如果编码成功，则为 <see langword="true" />；如果 <paramref name="destination" /> 太小，则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">编写器不包含完整 CBOR 值或根级别值序列。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBigInteger">
      <MemberSignature Language="C#" Value="public void WriteBigInteger (System.Numerics.BigInteger value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBigInteger(valuetype System.Numerics.BigInteger value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteBigInteger(System.Numerics.BigInteger)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBigInteger (value As BigInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBigInteger(System::Numerics::BigInteger value);" />
      <MemberSignature Language="F#" Value="member this.WriteBigInteger : System.Numerics.BigInteger -&gt; unit" Usage="cborWriter.WriteBigInteger value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Numerics.BigInteger" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将所提供的值作为已标记的 bignum 编码写入，如 RFC7049 第 2.4.2 节中所述。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBoolean">
      <MemberSignature Language="C#" Value="public void WriteBoolean (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteBoolean(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteBoolean(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteBoolean (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteBoolean(bool value);" />
      <MemberSignature Language="F#" Value="member this.WriteBoolean : bool -&gt; unit" Usage="cborWriter.WriteBoolean value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>写入布尔值（主要类型 7）。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteByteString">
      <MemberSignature Language="C#" Value="public void WriteByteString (byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteByteString(unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteByteString(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteByteString (value As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteByteString(cli::array &lt;System::Byte&gt; ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteByteString : byte[] -&gt; unit" Usage="cborWriter.WriteByteString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将缓冲区作为字节字符串编码（主要类型 2）写入。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">所提供的值不得为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteByteString">
      <MemberSignature Language="C#" Value="public void WriteByteString (ReadOnlySpan&lt;byte&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteByteString(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteByteString(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteByteString (value As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteByteString(ReadOnlySpan&lt;System::Byte&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteByteString : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="cborWriter.WriteByteString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将缓冲区作为字节字符串编码（主要类型 2）写入。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCborNegativeIntegerRepresentation">
      <MemberSignature Language="C#" Value="public void WriteCborNegativeIntegerRepresentation (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteCborNegativeIntegerRepresentation(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteCborNegativeIntegerRepresentation(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteCborNegativeIntegerRepresentation (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteCborNegativeIntegerRepresentation(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteCborNegativeIntegerRepresentation : uint64 -&gt; unit" Usage="cborWriter.WriteCborNegativeIntegerRepresentation value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">表示 -1 减去整数的无符号整数。</param>
        <summary>将所提供的值作为 CBOR 负整数表示形式（主要类型 1）写入。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

此方法支持在-18446744073709551616 和-1 之间进行整数编码。
用于处理不适合类型的值 <xref:System.Int64> 。

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteDateTimeOffset">
      <MemberSignature Language="C#" Value="public void WriteDateTimeOffset (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteDateTimeOffset(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteDateTimeOffset(System.DateTimeOffset)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteDateTimeOffset (value As DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteDateTimeOffset(DateTimeOffset value);" />
      <MemberSignature Language="F#" Value="member this.WriteDateTimeOffset : DateTimeOffset -&gt; unit" Usage="cborWriter.WriteDateTimeOffset value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将所提供的值作为已标记的日期/时间字符串写入，如 RFC7049 第 2.4.1 节中所述。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteDecimal">
      <MemberSignature Language="C#" Value="public void WriteDecimal (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteDecimal(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteDecimal(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteDecimal (value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteDecimal(System::Decimal value);" />
      <MemberSignature Language="F#" Value="member this.WriteDecimal : decimal -&gt; unit" Usage="cborWriter.WriteDecimal value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将所提供的值作为已标记的十进制小数编码写入，如 RFC7049 第 2.4.3 节中所述</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteDouble">
      <MemberSignature Language="C#" Value="public void WriteDouble (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteDouble(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteDouble(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteDouble (value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteDouble(double value);" />
      <MemberSignature Language="F#" Value="member this.WriteDouble : double -&gt; unit" Usage="cborWriter.WriteDouble value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>写入双精度浮点数（主要类型 7）。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedValue">
      <MemberSignature Language="C#" Value="public void WriteEncodedValue (ReadOnlySpan&lt;byte&gt; encodedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEncodedValue(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; encodedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteEncodedValue(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEncodedValue (encodedValue As ReadOnlySpan(Of Byte))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEncodedValue(ReadOnlySpan&lt;System::Byte&gt; encodedValue);" />
      <MemberSignature Language="F#" Value="member this.WriteEncodedValue : ReadOnlySpan&lt;byte&gt; -&gt; unit" Usage="cborWriter.WriteEncodedValue encodedValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encodedValue" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <param name="encodedValue">要写入的已编码值。</param>
        <summary>写入一个已编码的 CBOR 数据项。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="encodedValue" /> 不是格式标准的 CBOR 编码。

或

在当前一致性模式下，<paramref name="encodedValue" /> 是无效的。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndArray">
      <MemberSignature Language="C#" Value="public void WriteEndArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteEndArray" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndArray ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndArray();" />
      <MemberSignature Language="F#" Value="member this.WriteEndArray : unit -&gt; unit" Usage="cborWriter.WriteEndArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>写入数组（主要类型 4）的结尾。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">在当前一致性模式下，写入的数据不被接受。

或

确定长度的数组预期有更多数据项。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndIndefiniteLengthByteString">
      <MemberSignature Language="C#" Value="public void WriteEndIndefiniteLengthByteString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndIndefiniteLengthByteString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteEndIndefiniteLengthByteString" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndIndefiniteLengthByteString ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndIndefiniteLengthByteString();" />
      <MemberSignature Language="F#" Value="member this.WriteEndIndefiniteLengthByteString : unit -&gt; unit" Usage="cborWriter.WriteEndIndefiniteLengthByteString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>写入不确定长度的字节字符串（主要类型 2）的结尾。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndIndefiniteLengthTextString">
      <MemberSignature Language="C#" Value="public void WriteEndIndefiniteLengthTextString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndIndefiniteLengthTextString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteEndIndefiniteLengthTextString" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndIndefiniteLengthTextString ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndIndefiniteLengthTextString();" />
      <MemberSignature Language="F#" Value="member this.WriteEndIndefiniteLengthTextString : unit -&gt; unit" Usage="cborWriter.WriteEndIndefiniteLengthTextString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>写入不确定长度的 UTF-8 字符串（主要类型 3）的结尾。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndMap">
      <MemberSignature Language="C#" Value="public void WriteEndMap ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEndMap() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteEndMap" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEndMap ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEndMap();" />
      <MemberSignature Language="F#" Value="member this.WriteEndMap : unit -&gt; unit" Usage="cborWriter.WriteEndMap " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>写入地图（主要类型 5）的结尾。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">在当前一致性模式下，写入的数据不被接受。

或

确定长度的地图预期有更多数据项。

或

最新的键/值对缺少值。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteHalf">
      <MemberSignature Language="C#" Value="public void WriteHalf (Half value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteHalf(valuetype System.Half value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteHalf(System.Half)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteHalf (value As Half)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteHalf(Half value);" />
      <MemberSignature Language="F#" Value="member this.WriteHalf : Half -&gt; unit" Usage="cborWriter.WriteHalf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Half" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>写入半精度浮点数（主要类型 7）。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteInt32">
      <MemberSignature Language="C#" Value="public void WriteInt32 (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteInt32(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteInt32(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteInt32 (value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteInt32(int value);" />
      <MemberSignature Language="F#" Value="member this.WriteInt32 : int -&gt; unit" Usage="cborWriter.WriteInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值</param>
        <summary>将值作为带符号整数编码（主要类型 0、1）写入</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteInt64">
      <MemberSignature Language="C#" Value="public void WriteInt64 (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteInt64(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteInt64(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteInt64 (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteInt64(long value);" />
      <MemberSignature Language="F#" Value="member this.WriteInt64 : int64 -&gt; unit" Usage="cborWriter.WriteInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值</param>
        <summary>将所提供的值作为带符号整数编码（主要类型 0、1）写入</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNull">
      <MemberSignature Language="C#" Value="public void WriteNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteNull" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteNull ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteNull();" />
      <MemberSignature Language="F#" Value="member this.WriteNull : unit -&gt; unit" Usage="cborWriter.WriteNull " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>写入 <see langword="null" /> 值（主要类型 7）。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSimpleValue">
      <MemberSignature Language="C#" Value="public void WriteSimpleValue (System.Formats.Cbor.CborSimpleValue value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteSimpleValue(valuetype System.Formats.Cbor.CborSimpleValue value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteSimpleValue(System.Formats.Cbor.CborSimpleValue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteSimpleValue (value As CborSimpleValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteSimpleValue(System::Formats::Cbor::CborSimpleValue value);" />
      <MemberSignature Language="F#" Value="member this.WriteSimpleValue : System.Formats.Cbor.CborSimpleValue -&gt; unit" Usage="cborWriter.WriteSimpleValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Formats.Cbor.CborSimpleValue" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>写入简单值编码（主要类型 7）。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" /> 参数在无效的 24-31 范围内。</exception>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSingle">
      <MemberSignature Language="C#" Value="public void WriteSingle (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteSingle(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteSingle(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteSingle (value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteSingle(float value);" />
      <MemberSignature Language="F#" Value="member this.WriteSingle : single -&gt; unit" Usage="cborWriter.WriteSingle value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>写入单精度浮点数（主要类型 7）。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartArray">
      <MemberSignature Language="C#" Value="public void WriteStartArray (int? definiteLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartArray(valuetype System.Nullable`1&lt;int32&gt; definiteLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteStartArray(System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartArray (definiteLength As Nullable(Of Integer))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartArray(Nullable&lt;int&gt; definiteLength);" />
      <MemberSignature Language="F#" Value="member this.WriteStartArray : Nullable&lt;int&gt; -&gt; unit" Usage="cborWriter.WriteStartArray definiteLength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definiteLength" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="definiteLength">确定长度的数组的长度；或对于不确定长度的数组，则为 <see langword="null" />。</param>
        <summary>写入确定或不确定长度的数组（主要类型 4）的开头。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

在规范一致性模式下，除非启用标志，否则编写器将拒绝无限长度的写入 <xref:System.Formats.Cbor.CborWriter.ConvertIndefiniteLengthEncodings> 。

          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="definiteLength" /> 参数不得为负。</exception>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartIndefiniteLengthByteString">
      <MemberSignature Language="C#" Value="public void WriteStartIndefiniteLengthByteString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartIndefiniteLengthByteString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteStartIndefiniteLengthByteString" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartIndefiniteLengthByteString ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartIndefiniteLengthByteString();" />
      <MemberSignature Language="F#" Value="member this.WriteStartIndefiniteLengthByteString : unit -&gt; unit" Usage="cborWriter.WriteStartIndefiniteLengthByteString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>写入不确定长度的字节字符串（主要类型 2）的开头。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

推送一个上下文，在此上下文中，可以写入同一主要类型的明确长度块区。
在规范一致性模式下，除非启用标志，否则编写器将拒绝无限长度的写入 <xref:System.Formats.Cbor.CborWriter.ConvertIndefiniteLengthEncodings> 。

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartIndefiniteLengthTextString">
      <MemberSignature Language="C#" Value="public void WriteStartIndefiniteLengthTextString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartIndefiniteLengthTextString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteStartIndefiniteLengthTextString" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartIndefiniteLengthTextString ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartIndefiniteLengthTextString();" />
      <MemberSignature Language="F#" Value="member this.WriteStartIndefiniteLengthTextString : unit -&gt; unit" Usage="cborWriter.WriteStartIndefiniteLengthTextString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>写入不确定长度的 UTF-8 字符串（主要类型 3）的开头。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

推送一个上下文，在此上下文中，可以写入同一主要类型的明确长度块区。
在规范一致性模式下，除非启用标志，否则编写器将拒绝无限长度的写入 <xref:System.Formats.Cbor.CborWriter.ConvertIndefiniteLengthEncodings> 。

          ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartMap">
      <MemberSignature Language="C#" Value="public void WriteStartMap (int? definiteLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartMap(valuetype System.Nullable`1&lt;int32&gt; definiteLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteStartMap(System.Nullable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteStartMap (definiteLength As Nullable(Of Integer))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteStartMap(Nullable&lt;int&gt; definiteLength);" />
      <MemberSignature Language="F#" Value="member this.WriteStartMap : Nullable&lt;int&gt; -&gt; unit" Usage="cborWriter.WriteStartMap definiteLength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definiteLength" Type="System.Nullable&lt;System.Int32&gt;" />
      </Parameters>
      <Docs>
        <param name="definiteLength">确定长度的地图的长度；或对于不确定长度的地图，则为 <see langword="null" />。</param>
        <summary>写入确定或不确定长度的地图（主要类型 5）的开头。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

 在规范一致性模式下，除非启用标志，否则编写器将拒绝无限长度的写入 <xref:System.Formats.Cbor.CborWriter.ConvertIndefiniteLengthEncodings> 。


 映射内容被编写为数组的已声明大小长度的两倍。
例如， `1` 必须通过连续调用和来写入大小为 int、类型为 string 的键的大小的映射 <xref:System.Formats.Cbor.CborWriter.WriteInt32(System.Int32)> <xref:System.Formats.Cbor.CborWriter.WriteTextString(System.ReadOnlySpan{System.Char})> 。
由调用方来跟踪下一个调用是键还是值。


 从根本上讲，这是一项技术限制，这是因为 CBOR 允许任何类型的键，例如，地图可以包含映射自身的键。




          ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="definiteLength" /> 参数不得为负。</exception>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTag">
      <MemberSignature Language="C#" Value="public void WriteTag (System.Formats.Cbor.CborTag tag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteTag(valuetype System.Formats.Cbor.CborTag tag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteTag(System.Formats.Cbor.CborTag)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteTag (tag As CborTag)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteTag(System::Formats::Cbor::CborTag tag);" />
      <MemberSignature Language="F#" Value="member this.WriteTag : System.Formats.Cbor.CborTag -&gt; unit" Usage="cborWriter.WriteTag tag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tag" Type="System.Formats.Cbor.CborTag" />
      </Parameters>
      <Docs>
        <param name="tag">要写入的值。</param>
        <summary>将语义标记（主要类型 6）分配给下一个数据项。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTextString">
      <MemberSignature Language="C#" Value="public void WriteTextString (ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteTextString(valuetype System.ReadOnlySpan`1&lt;char&gt; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteTextString(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteTextString (value As ReadOnlySpan(Of Char))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteTextString(ReadOnlySpan&lt;char&gt; value);" />
      <MemberSignature Language="F#" Value="member this.WriteTextString : ReadOnlySpan&lt;char&gt; -&gt; unit" Usage="cborWriter.WriteTextString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.ReadOnlySpan&lt;System.Char&gt;" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将缓冲区作为 UTF-8 字符串编码（主要类型 3）写入。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">所提供的字符串不是有效的 UTF-8 编码，这在当前一致性模式下是不允许的。</exception>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTextString">
      <MemberSignature Language="C#" Value="public void WriteTextString (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteTextString(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteTextString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteTextString (value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteTextString(System::String ^ value);" />
      <MemberSignature Language="F#" Value="member this.WriteTextString : string -&gt; unit" Usage="cborWriter.WriteTextString value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值。</param>
        <summary>将缓冲区作为 UTF-8 字符串编码（主要类型 3）写入。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">所提供的值不得为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException">所提供的字符串不是有效的 UTF-8 编码，这在当前一致性模式下是不允许的。</exception>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteUInt32">
      <MemberSignature Language="C#" Value="public void WriteUInt32 (uint value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteUInt32(unsigned int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteUInt32(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteUInt32 (value As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteUInt32(System::UInt32 value);" />
      <MemberSignature Language="F#" Value="member this.WriteUInt32 : uint32 -&gt; unit" Usage="cborWriter.WriteUInt32 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值</param>
        <summary>将值作为无符号整数编码（主要类型 0）写入。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteUInt64">
      <MemberSignature Language="C#" Value="public void WriteUInt64 (ulong value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteUInt64(unsigned int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteUInt64(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteUInt64 (value As ULong)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteUInt64(System::UInt64 value);" />
      <MemberSignature Language="F#" Value="member this.WriteUInt64 : uint64 -&gt; unit" Usage="cborWriter.WriteUInt64 value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.CLSCompliant(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.CLSCompliant(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">要写入的值</param>
        <summary>将值作为无符号整数编码（主要类型 0）写入。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public void WriteUnixTimeSeconds (double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteUnixTimeSeconds(float64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteUnixTimeSeconds(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteUnixTimeSeconds (seconds As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteUnixTimeSeconds(double seconds);" />
      <MemberSignature Language="F#" Value="member this.WriteUnixTimeSeconds : double -&gt; unit" Usage="cborWriter.WriteUnixTimeSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="seconds">要写入的值。</param>
        <summary>将 Unix 时间（以秒为单位）作为已标记的日期/时间值写入，如 RFC7049 第 2.4.1 节中所述。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="seconds" /> 参数不得为无穷大或 NaN</exception>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteUnixTimeSeconds">
      <MemberSignature Language="C#" Value="public void WriteUnixTimeSeconds (long seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteUnixTimeSeconds(int64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Formats.Cbor.CborWriter.WriteUnixTimeSeconds(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteUnixTimeSeconds (seconds As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteUnixTimeSeconds(long seconds);" />
      <MemberSignature Language="F#" Value="member this.WriteUnixTimeSeconds : int64 -&gt; unit" Usage="cborWriter.WriteUnixTimeSeconds seconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Formats.Cbor</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="seconds">要写入的值。</param>
        <summary>将 Unix 时间（以秒为单位）作为已标记的日期/时间值写入，如 RFC7049 第 2.4.1 节中所述。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">写入新值超过了父数据项的确定长度。

或

父数据项中不允许使用已编码值的主要类型。

或

在当前一致性模式下，写入的数据不被接受。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
