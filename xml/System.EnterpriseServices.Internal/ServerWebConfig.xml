<Type Name="ServerWebConfig" FullName="System.EnterpriseServices.Internal.ServerWebConfig">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cfe2ffeed8b0c2e03919411eda06db7498378540" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="70334136" /></Metadata><TypeSignature Language="C#" Value="public class ServerWebConfig : System.EnterpriseServices.Internal.IServerWebConfig" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServerWebConfig extends System.Object implements class System.EnterpriseServices.Internal.IServerWebConfig" />
  <TypeSignature Language="DocId" Value="T:System.EnterpriseServices.Internal.ServerWebConfig" />
  <TypeSignature Language="VB.NET" Value="Public Class ServerWebConfig&#xA;Implements IServerWebConfig" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServerWebConfig : System::EnterpriseServices::Internal::IServerWebConfig" />
  <TypeSignature Language="F#" Value="type ServerWebConfig = class&#xA;    interface IServerWebConfig" />
  <AssemblyInfo>
    <AssemblyName>System.EnterpriseServices</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.EnterpriseServices.Internal.IServerWebConfig</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>为启用 SOAP 的 COM+ 应用程序创建 Web.config 文件。 还可以在该文件中为要在应用程序中发布的 COM 接口添加组件项。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.Internal.ServerWebConfig>在为启用 SOAP 的 COM + 应用程序创建 Internet Information Services （IIS）6.0 中的虚拟根目录时，该类用于创建 Web.config 文件。 它还可以将 XML 元素添加到要添加到应用程序中的组件接口的 Web.config 文件。  
  
 <xref:System.EnterpriseServices.Internal.ServerWebConfig>由 .NET Framework 在内部使用。 不需要直接在代码中使用它。  
  
 ]]></format>
    </remarks>
    <forInternalUseOnly />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServerWebConfig ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.ServerWebConfig.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServerWebConfig();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.EnterpriseServices.Internal.ServerWebConfig" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="AddElement">
      <MemberSignature Language="C#" Value="public void AddElement (string FilePath, string AssemblyName, string TypeName, string ProgId, string WkoMode, out string Error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddElement(string FilePath, string AssemblyName, string TypeName, string ProgId, string WkoMode, [out] string&amp; Error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.ServerWebConfig.AddElement(System.String,System.String,System.String,System.String,System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddElement (FilePath As String, AssemblyName As String, TypeName As String, ProgId As String, WkoMode As String, ByRef Error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddElement(System::String ^ FilePath, System::String ^ AssemblyName, System::String ^ TypeName, System::String ^ ProgId, System::String ^ WkoMode, [Runtime::InteropServices::Out] System::String ^ % Error);" />
      <MemberSignature Language="F#" Value="abstract member AddElement : string * string * string * string * string * string -&gt; unit&#xA;override this.AddElement : string * string * string * string * string * string -&gt; unit" Usage="serverWebConfig.AddElement (FilePath, AssemblyName, TypeName, ProgId, WkoMode, Error)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IServerWebConfig.AddElement(System.String,System.String,System.String,System.String,System.String,System.String@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FilePath" Type="System.String" />
        <Parameter Name="AssemblyName" Type="System.String" />
        <Parameter Name="TypeName" Type="System.String" />
        <Parameter Name="ProgId" Type="System.String" />
        <Parameter Name="WkoMode" Type="System.String" />
        <Parameter Name="Error" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="FilePath">现有 Web.config 文件的路径。</param>
        <param name="AssemblyName">包含要添加的类型的程序集的名称。</param>
        <param name="TypeName">要添加的类型的名称。</param>
        <param name="ProgId">要添加的类型的编程标识符。</param>
        <param name="WkoMode">一个字符串常数，它与 <see cref="T:System.Runtime.Remoting.WellKnownObjectMode" /> 枚举中的一个成员的名称对应，该成员名称指示如何激活已知对象。</param>
        <param name="Error">一个可写入错误信息的字符串。</param>
        <summary>在 Web.config 文件中为要在启用 SOAP 的 COM+ 应用程序中发布的 COM 接口添加 XML 元素。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于指定的类型， <xref:System.EnterpriseServices.Internal.ServerWebConfig.AddElement%2A> 方法会将 `<wellknown>` 和 `<activated>` 元素作为元素的子级添加到 Web.config 文件中，其 `<service>` XPath 如下：  
  
 `/configuration/system.runtime.remoting/application/service`  
  
 `AssemblyName`、、 `TypeName` `ProgId` 和 `WkoMode` 参数合并到两个添加的元素的属性值中。  
  
 <xref:System.EnterpriseServices.Internal.ServerWebConfig.AddElement%2A>不应直接调用。 请改为调用 <xref:System.EnterpriseServices.Internal.Publish.ProcessServerTlb%2A> 方法。  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public void Create (string FilePath, string FilePrefix, out string Error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Create(string FilePath, string FilePrefix, [out] string&amp; Error) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.EnterpriseServices.Internal.ServerWebConfig.Create(System.String,System.String,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Create (FilePath As String, FilePrefix As String, ByRef Error As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Create(System::String ^ FilePath, System::String ^ FilePrefix, [Runtime::InteropServices::Out] System::String ^ % Error);" />
      <MemberSignature Language="F#" Value="abstract member Create : string * string * string -&gt; unit&#xA;override this.Create : string * string * string -&gt; unit" Usage="serverWebConfig.Create (FilePath, FilePrefix, Error)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.EnterpriseServices.Internal.IServerWebConfig.Create(System.String,System.String,System.String@)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.EnterpriseServices</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FilePath" Type="System.String" />
        <Parameter Name="FilePrefix" Type="System.String" />
        <Parameter Name="Error" Type="System.String" RefType="out" />
      </Parameters>
      <Docs>
        <param name="FilePath">将在其中创建配置文件的文件夹。</param>
        <param name="FilePrefix">字符串值“Web”，将在它的后面添加 config 扩展名。</param>
        <param name="Error">一个可写入错误信息的字符串。</param>
        <summary>为启用 SOAP 的 COM+ 应用程序创建 Web.config 文件，以便准备在该文件中为要发布的 COM 接口添加 XML 元素。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.EnterpriseServices.Internal.ServerWebConfig.Create%2A>方法创建一个 Web.config 文件，该文件包含具有以下 XPath 的空元素的层次结构：  
  
```  
/configuration/system.runtime.remoting/application/service  
```  
  
 调用方法，而不是实例化 <xref:System.EnterpriseServices.Internal.ServerWebConfig> 类对象并 <xref:System.EnterpriseServices.Internal.ServerWebConfig.Create%2A> 直接调用 <xref:System.EnterpriseServices.Internal.Publish.CreateVirtualRoot%2A> 。  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
  </Members>
</Type>
