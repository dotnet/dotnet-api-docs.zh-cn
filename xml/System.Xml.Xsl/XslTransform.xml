<Type Name="XslTransform" FullName="System.Xml.Xsl.XslTransform">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f7d07d72096b38322c1b9b1b043a089361b86a92" /><Meta Name="ms.sourcegitcommit" Value="13a6cb6fba7e05947f15d8d6cc802703ae9c21d5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/18/2020" /><Meta Name="ms.locfileid" Value="90799069" /></Metadata><TypeSignature Language="C#" Value="public sealed class XslTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XslTransform extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Xsl.XslTransform" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XslTransform" />
  <TypeSignature Language="C++ CLI" Value="public ref class XslTransform sealed" />
  <TypeSignature Language="F#" Value="type XslTransform = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Xml.ReaderWriter" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Obsolete("This class has been deprecated. Please use System.Xml.Xsl.XslCompiledTransform instead. http://go.microsoft.com/fwlink/?linkid=14202")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Obsolete("This class has been deprecated. Please use System.Xml.Xsl.XslCompiledTransform instead. http://go.microsoft.com/fwlink/?linkid=14202")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>使用可扩展样式表转换语言 (XSLT) 转换 XML 数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 Microsoft .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须使用命名空间 `http://www.w3.org/1999/XSL/Transform` 。  
  
 还可以使用类将其他参数添加到样式表中 <xref:System.Xml.Xsl.XsltArgumentList> 。 此类包含可从样式表中调用的样式表和扩展对象的输入参数。  
  
 转换 XML 数据：  
  
1.  创建 <xref:System.Xml.Xsl.XslTransform> 对象。  
  
2.  使用 <xref:System.Xml.Xsl.XslTransform.Load%2A> 方法加载转换的样式表。 此方法具有多个重载，并且可以使用 <xref:System.Xml.XmlReader> 、 <xref:System.Xml.XPath.XPathNavigator> 、 <xref:System.Xml.XPath.IXPathNavigable> 或 URL 与文件位置一起加载样式表。  
  
3.  使用 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法来转换 XML 数据。 此方法具有多个重载，并且可以处理不同类型的输入和输出。 你还可以指定， <xref:System.Xml.Xsl.XsltArgumentList> 其中包含要在转换过程中用作输入的其他参数。  
  
 **安全注意事项**  
  
 在创建使用 <xref:System.Xml.Xsl.XslTransform> 类的应用程序时，应了解下列项及其含义：  
  
-   默认情况下启用扩展对象。 如果包含扩展对象的 <xref:System.Xml.Xsl.XsltArgumentList> 对象传递给 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法，将利用这些扩展对象。  
  
-   XSLT 样式表可以包括对其他文件的引用以及嵌入式脚本块。 恶意用户可以通过向您提供数据或样式表来利用此方法，在执行该操作时，将导致系统在计算机资源不足的情况下进行处理。  
  
-   在混合信任环境下运行的 XSLT 应用程序可能会引发样式表欺骗。 例如，恶意用户可能会为对象加载有害的样式表，并将其交给另一个用户，而后者会继续调用 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法并执行转换。  
  
 不接受 <xref:System.Xml.Xsl.XslTransform> 来自不受信任源的对象、XSLT 样式表或 XML 源数据可以减轻这些安全问题。  
  
 **脚本支持**  
  
 此类使用元素支持嵌入 `msxsl:script` 的脚本。  
  
 在 .NET Framework 版本1.1 中，样式表的证据确定授予嵌入脚本的权限。  
  
-   如果样式表是从统一资源标识符加载的 (URI) ，则使用 URI 创建证据。 此证据包含 URI 及其站点和区域。  
  
-   如果使用其他源加载了样式表，则可以通过将 <xref:System.Security.Policy.Evidence?displayProperty=nameWithType> 对象传递给方法来提供证据 <xref:System.Xml.Xsl.XslTransform.Load%2A> 。 否则，脚本程序集会完全信任。  
  
 不完全受信任的调用方： `UnmanagedCode` 编译嵌入式脚本需要权限。 `ControlEvidence` 需要提供 <xref:System.Security.Policy.Evidence> 对方法的权限 <xref:System.Xml.Xsl.XslTransform.Load%2A> 。 <xref:System.Security.SecurityException>如果调用方不具有所需的权限，则会引发。 有关更多信息，请参见<xref:System.Security.Permissions.SecurityPermission?displayProperty=nameWithType>和<xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=nameWithType>。  
  
 `msxsl:script`元素具有以下要求：  
  
-   `msxsl:script`元素属于 `urn:schemas-microsoft-com:xslt` 命名空间。 样式表必须包括命名空间声明 `xmlns:msxsl=urn:schemas-microsoft-com:xslt` 。  
  
-   `msxsl:script`元素可以包含 `language` 指定要使用的脚本语言的特性。 特性的值 `language` 必须是下列值之一： c #、CSharp、VB、操作、JScript 或 JavaScript。 由于语言名称不区分大小写，因此 JavaScript 和 javascript 都是有效的。 如果 `language` 未指定属性，则默认为 JScript。  
  
-   `msxsl:script`元素必须包括一个 `implements-prefix` 属性，该属性包含表示与脚本块关联的命名空间的前缀。 此命名空间必须在样式表中定义。 样式表可以包含多个按命名空间分组的脚本块。 同一命名空间中不能有多个语言的脚本块。 脚本块可以调用另一个脚本块中定义的函数，前提是脚本块驻留在同一命名空间中。 脚本块的内容根据 (特性) 提供的脚本语言的规则和语法进行分析 `language` 。 例如，如果有一个 c # 脚本块，注释将以字符作为前缀 `//` 。 注释必须为有效的 XML 内容。  
  
> [!NOTE]
> 建议你将脚本块包装在 CDATA 节中。
  
 [!INCLUDE [xsltransform-script](~/includes/xsltransform-script.md)] 
   
 函数可以在 `msxsl:script` 元素内声明。 下表显示了默认情况下支持的命名空间。  
  
|支持的命名空间|说明|  
|--------------------------|-----------------|  
|`System`|系统类。|  
|`System.Collection`|集合类。|  
|`System.Text`|文本处理类。|  
|`System.Xml`|核心 XML 类。|  
|`System.Xml.Xsl`|XSLT 类。|  
|`System.Xml.XPath`|XML 路径语言 (XPath) 类。|  
  
 脚本函数定义的所提供的参数和返回值必须为下面列出的万维网联合会 (W3C) 类型之一。 下表详细说明了 W3C 类型（XPath 或 XSLT）与相应 .NET Framework 类之间的映射。  
  
|W3C 类型|等效的 .NET 类|  
|--------------|---------------------------|  
|String (XPath) |`System.String`|  
|布尔 (XPath) |`System.Boolean`|  
|XPath (数) |`System.Double`|  
| (XSLT) 的结果树片段|`System.Xml.XPath.XPathNavigator`|  
|节点集 (XPath) |`System.Xml.XPath.XPathNodeIterator`|  
  
 如果脚本函数使用下列数值类型之一： Int16、UInt16、Int32、UInt32、Int64、UInt64、Single 或 Decimal，则会将这些类型强制转换为双精度类型的双精度值。  
  
 如果调用的函数无法将参数结果转换为所需的类型之一，则会引发异常。  
  
> [!NOTE]
>  `msxsl:script` 和 `msxsl:node-list` 是类支持的唯一命名空间中的函数 `urn:schemas-microsoft-com:xslt` <xref:System.Xml.Xsl.XslTransform> 。  
  
 <xref:System.Xml.Xsl.XslTransform> 能够利用公共语言运行时 (CLR) 代码作为扩展机制。 这是通过将类的实例传递给 <xref:System.Xml.Xsl.XslTransform> 类并在 XSLT 样式表中调用其公共方法来完成的。 使用关键字定义的方法 `params` 允许传递指定数目的参数，在这种情况下不能正常工作。 有关更多详细信息，请参阅 [params](/dotnet/csharp/language-reference/keywords/params) 。  
  
 有关详细信息，请参阅 [具有 XslTransform 类的 XSLT 转换](/dotnet/standard/data/xml/xslt-transformations-with-the-xsltransform-class)。  
  
   
  
## Examples  
 下面的示例将转换指定的 XML 文档，并将结果输出到控制台。  
  
 [!code-csharp[Classic WebData XslTransform Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><see cref="T:System.Xml.Xsl.XslTransform" /> 对象只对转换操作而言是线程安全的。 其他操作不一定是线程安全的。 您必须确保在加载操作期间没有为对象调用任何其他方法。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslTransform();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Xsl.XslTransform" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>加载 XSLT 样式表，包括在 <see langword="xsl:include" /> 和 <see langword="xsl:import" /> 元素中引用的样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.Load : string -&gt; unit" Usage="xslTransform.Load url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">指定要加载的 XSLT 样式表的 URL。</param>
        <summary>加载由一个 URL 指定的 XSLT 样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl="http://www.w3.org/1999/XSL/Transform"` 。  
  
 此方法加载 XSLT 样式表，其中包括和元素中引用的所有样式表 `xsl:include` `xsl:import` 。 使用没有用户凭据的来解析外部资源 <xref:System.Xml.XmlUrlResolver> 。 如果样式表 (s) 位于要求身份验证的网络资源上，请使用将 <xref:System.Xml.XmlResolver> 作为其参数之一的重载，并使用 <xref:System.Xml.XmlResolver> 所需的凭据指定。  
  
 如果样式表包含嵌入式脚本，则该脚本将编译为程序集。 样式表的 URI 用于创建将应用于程序集的证据。
  
> [!NOTE]
>  如果调用方没有 `UnmanagedCode` 权限，则不编译嵌入的脚本并 <xref:System.Security.SecurityException> 引发。 有关更多信息，请参见<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例将 XML 文档转换为 HTML 文档。 它显示表中每本书的 ISBN、标题和价格。  
  
 [!code-cpp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/VB/source.vb#1)]  
  
 示例使用下列两个输入文件。  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">加载的资源不是有效的样式表。</exception>
        <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader -&gt; unit" Usage="xslTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Obsolete("You should pass evidence to Load() method")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("You should pass evidence to Load() method")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="stylesheet">包含 XSLT 样式表的 <see cref="T:System.Xml.XmlReader" /> 对象。</param>
        <summary>加载 <see cref="T:System.Xml.XmlReader" /> 中包含的 XSLT 样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 此方法加载 XSLT 样式表，其中包括和元素中引用的所有样式表 `xsl:include` `xsl:import` 。 使用没有用户凭据的来解析外部资源 <xref:System.Xml.XmlUrlResolver> 。 如果样式表 (s) 位于要求身份验证的网络资源上，请使用将 <xref:System.Xml.XmlResolver> 作为其参数之一的重载，并使用 <xref:System.Xml.XmlResolver> 所需的凭据指定。  
  
 样式表从的当前节点加载 <xref:System.Xml.XmlReader> 到其所有子级。 这使您可以使用文档的一部分作为样式表。 此 <xref:System.Xml.Xsl.XslTransform.Load%2A> 方法返回后， <xref:System.Xml.XmlReader> 将定位到样式表末尾后的下一个节点。 如果已到达文档结尾，<xref:System.Xml.XmlReader> 将位于文件结尾 (EOF)。  
  
 如果样式表包含实体，则应指定 <xref:System.Xml.XmlReader> 可解析实体 (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType> 返回 `true`) 的。 在这种情况下， <xref:System.Xml.XmlValidatingReader> 可以使用。  
  
 如果样式表包含嵌入式脚本，则该脚本将编译为程序集。 程序集具有完全信任。 建议的做法是使用方法提供证据 <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> 。
  
> [!NOTE]
>  如果调用方没有 `UnmanagedCode` 权限，则不编译嵌入的脚本并 <xref:System.Security.SecurityException> 引发。 有关更多信息，请参见<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例将转换按标题对所有书籍进行排序的 XML 文件。  
  
 [!code-cpp[XslTransform.Load3#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Load3/CPP/trans3.cpp#1)]
 [!code-csharp[XslTransform.Load3#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load3/CS/trans3.cs#1)]
 [!code-vb[XslTransform.Load3#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load3/VB/trans3.vb#1)]  
  
 该示例使用以下数据文件作为输入。  
  
 `books.xml`  
  
 [!code-xml[XslTransform.Load3#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load3/XML/books.xml#2)]  
  
 `titles.xsl`  
  
 [!code-xml[XslTransform.Load3#3](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load3/XML/titles.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">当前节点不符合有效样式表的要求。</exception>
        <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable -&gt; unit" Usage="xslTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Obsolete("You should pass evidence to Load() method")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("You should pass evidence to Load() method")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="stylesheet">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含 XSLT 样式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <summary>加载 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中包含的 XSLT 样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 此方法加载 XSLT 样式表，其中包括和元素中引用的所有样式表 `xsl:include` `xsl:import` 。 使用没有用户凭据的来解析外部资源 <xref:System.Xml.XmlUrlResolver> 。 如果样式表 (s) 位于要求身份验证的网络资源上，请使用将 <xref:System.Xml.XmlResolver> 作为其参数之一的重载，并使用 <xref:System.Xml.XmlResolver> 所需的凭据指定。  
  
 如果样式表包含嵌入式脚本，则该脚本将编译为程序集。 程序集具有完全信任。 建议的做法是使用方法提供证据 <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.IXPathNavigable%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> 。
  
> [!NOTE]
>  如果调用方没有 `UnmanagedCode` 权限，则不编译嵌入的脚本并 <xref:System.Security.SecurityException> 引发。 有关更多信息，请参见<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">加载的资源不是有效的样式表。</exception>
        <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XPathNavigator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.XPathNavigator -&gt; unit" Usage="xslTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Obsolete("You should pass evidence to Load() method")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("You should pass evidence to Load() method")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" />
      </Parameters>
      <Docs>
        <param name="stylesheet">包含 XSLT 样式表的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</param>
        <summary>加载 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中包含的 XSLT 样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 此方法加载 XSLT 样式表，其中包括和元素中引用的所有样式表 `xsl:include` `xsl:import` 。 使用没有用户凭据的来解析外部资源 <xref:System.Xml.XmlUrlResolver> 。 如果样式表 (s) 位于要求身份验证的网络资源上，请使用将 <xref:System.Xml.XmlResolver> 作为其参数之一的重载，并使用 <xref:System.Xml.XmlResolver> 所需的凭据指定。  
  
 样式表是从的当前位置加载的 <xref:System.Xml.XPath.XPathNavigator> 。 若要仅使用已加载文档的一部分作为样式表，请导航到与样式表的开头相对应的节点。 <xref:System.Xml.Xsl.XslTransform.Load%2A>方法返回后，位于 <xref:System.Xml.XPath.XPathNavigator> 节点)  (上的样式表的开头 `xsl:style sheet` 。  
  
 如果样式表包含嵌入式脚本，则该脚本将编译为程序集。 程序集具有完全信任。 建议的做法是使用方法提供证据 <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.XPathNavigator%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> 。
  
> [!NOTE]
>  如果调用方没有 `UnmanagedCode` 权限，则不编译嵌入的脚本并 <xref:System.Security.SecurityException> 引发。 有关更多信息，请参见<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">当前节点不符合有效样式表的要求。</exception>
        <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string url, System.Xml.XmlResolver? resolver);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string url, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (url As String, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ url, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : string * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (url, resolver)" />
      <MemberSignature Language="C#" Value="public void Load (string url, System.Xml.XmlResolver resolver);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="url">指定要加载的 XSLT 样式表的 URL。</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" /> 用于加载该样式表以及 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中引用的任何样式表。  
  
如果这是 <see langword="null" />，将使用不具有用户凭据的默认 <see cref="T:System.Xml.XmlUrlResolver" /> 来打开样式表。 不使用默认的 <see cref="T:System.Xml.XmlUrlResolver" /> 来解析样式表中的任何外部资源，因此将不解析 <c>xsl:import</c> 和 <c>xsl:include</c> 元素。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" />。</param>
        <summary>加载由一个 URL 指定的 XSLT 样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 如果样式表包含嵌入式脚本，则该脚本将编译为程序集。 样式表的 URI 用于创建将应用于程序集的证据。
  
> [!NOTE]
>  如果调用方没有 `UnmanagedCode` 权限，则不编译嵌入的脚本并 <xref:System.Security.SecurityException> 引发。 有关更多信息，请参见<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
   
  
## Examples  
 下面的示例将 XML 文档转换为 HTML 文档。 该示例将加载一个包含 `xsl:include` 引用另一个样式表的元素的 XSLT 样式表。 <xref:System.Xml.XmlUrlResolver>传递给方法，该 <xref:System.Xml.Xsl.XslTransform.Load%2A> 方法用于设置为所包含的样式表访问网络资源所需的凭据。  
  
 [!code-csharp[XslTransform.Load2#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load2/CS/trans2.cs#1)]
 [!code-vb[XslTransform.Load2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load2/VB/trans2.vb#1)]  
  
 该示例使用以下数据文件作为输入。  
  
 `books.xml`  
  
 [!code-xml[XslTransform.Load2#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/books.xml#2)]  
  
 `sort.xsl`  
  
 [!code-xml[XslTransform.Load2#3](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/sort.xsl#3)]  
  
 `includefile.xsl`  
  
 [!code-xml[XslTransform.Load2#4](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Load2/XML/includefile.xsl#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">加载的资源不是有效的样式表。</exception>
        <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.XmlResolver? resolver);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver)" />
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.XmlResolver resolver);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Obsolete("You should pass evidence to Load() method")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("You should pass evidence to Load() method")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">包含 XSLT 样式表的 <see cref="T:System.Xml.XmlReader" /> 对象。</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" />，用于加载 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中引用的任何样式表。 如果这为 <see langword="null" />，则不解析外部资源。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" />。</param>
        <summary>加载 <see cref="T:System.Xml.XmlReader" /> 中包含的 XSLT 样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 此方法加载 XSLT 样式表，其中包括和元素中引用的所有样式表 `xsl:include` `xsl:import` 。 样式表从的当前节点加载 <xref:System.Xml.XmlReader> 到其所有子级。 这使您可以使用文档的一部分作为样式表。  
  
 此 <xref:System.Xml.Xsl.XslTransform.Load%2A> 方法返回后， <xref:System.Xml.XmlReader> 将定位到样式表末尾后的下一个节点。 如果已到达文档结尾，<xref:System.Xml.XmlReader> 将位于文件结尾 (EOF)。  
  
 如果样式表包含实体，则应指定 <xref:System.Xml.XmlReader> 可解析实体 (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType> 返回 `true`) 的。 在这种情况下， <xref:System.Xml.XmlValidatingReader> 可以使用。  
  
 如果样式表包含嵌入式脚本，则该脚本将编译为程序集。 程序集具有完全信任。 建议的做法是使用方法提供证据 <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> 。
  
> [!NOTE]
>  如果调用方没有 `UnmanagedCode` 权限，则不编译嵌入的脚本并 <xref:System.Security.SecurityException> 引发。 有关更多信息，请参见<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">当前节点不符合有效样式表的要求。</exception>
        <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.XmlResolver? resolver);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver)" />
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.XmlResolver resolver);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Obsolete("You should pass evidence to Load() method")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("You should pass evidence to Load() method")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含 XSLT 样式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" />，用于加载 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中引用的任何样式表。 如果这为 <see langword="null" />，则不解析外部资源。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />。</param>
        <summary>加载 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中包含的 XSLT 样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 如果样式表包含嵌入式脚本，则该脚本将编译为程序集。 程序集具有完全信任。 建议的做法是使用方法提供证据 <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.IXPathNavigable%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> 。
  
> [!NOTE]
>  如果调用方没有 `UnmanagedCode` 权限，则不编译嵌入的脚本并 <xref:System.Security.SecurityException> 引发。 有关更多信息，请参见<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">加载的资源不是有效的样式表。</exception>
        <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet, System.Xml.XmlResolver? resolver);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XPathNavigator, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.XPathNavigator * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver)" />
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet, System.Xml.XmlResolver resolver);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Obsolete("You should pass evidence to Load() method")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("You should pass evidence to Load() method")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">包含 XSLT 样式表的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" />，用于加载 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中引用的任何样式表。 如果这为 <see langword="null" />，则不解析外部资源。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />。</param>
        <summary>加载 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中包含的 XSLT 样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 样式表是从的当前位置加载的 <xref:System.Xml.XPath.XPathNavigator> 。 若要使用部分已加载的文档作为样式表，请导航到与样式表的开头相对应的节点。 <xref:System.Xml.Xsl.XslTransform.Load%2A>方法返回后，位于 <xref:System.Xml.XPath.XPathNavigator> 节点)  (上的样式表的开头 `xsl:style sheet` 。  
  
 如果样式表包含嵌入式脚本，则该脚本将编译为程序集。 程序集具有完全信任。 建议的做法是使用提供证据 <xref:System.Xml.Xsl.XslTransform.Load%28System.Xml.XPath.XPathNavigator%2CSystem.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> 。
  
> [!NOTE]
>  如果调用方没有 `UnmanagedCode` 权限，则不编译嵌入的脚本并 <xref:System.Security.SecurityException> 引发。 有关更多信息，请参见<xref:System.Security.Permissions.SecurityPermission>和<xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode?displayProperty=nameWithType>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">当前节点不符合有效样式表的要求。</exception>
        <exception cref="T:System.Security.SecurityException">样式表包含嵌入式脚本，并且调用方没有 <see langword="UnmanagedCode" /> 权限。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader, resolver As XmlResolver, evidence As Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader * System.Xml.XmlResolver * System.Security.Policy.Evidence -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver, evidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stylesheet">包含要加载的样式表的 <see cref="T:System.Xml.XmlReader" /> 对象。</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" />，用于加载 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中引用的任何样式表。 如果这为 <see langword="null" />，则不解析外部资源。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />。</param>
        <param name="evidence">在为 XSLT 样式表中的脚本块生成的程序集上设置的 <see cref="T:System.Security.Policy.Evidence" />。  
  
如果为 <see langword="null" />，则不处理脚本块、不支持 XSLT <c>document()</c> 函数，并且不允许使用特权扩展对象。  
  
调用方必须有 <see langword="ControlEvidence" /> 权限，才能为脚本程序集提供证据。 不完全受信任的调用方可以将此参数设置为 <see langword="null" />。</param>
        <summary>加载 <see cref="T:System.Xml.XmlReader" /> 中包含的 XSLT 样式表。 此方法允许您通过指定证据来限制样式表的权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 此方法加载 XSLT 样式表，其中包括和元素中引用的所有样式表 `xsl:include` `xsl:import` 。 样式表从的当前节点加载 <xref:System.Xml.XmlReader> 到其所有子级。 这使您可以使用文档的一部分作为样式表。  
  
 此 <xref:System.Xml.Xsl.XslTransform.Load%2A> 方法返回后， <xref:System.Xml.XmlReader> 将定位到样式表末尾后的下一个节点。 如果已到达文档结尾，<xref:System.Xml.XmlReader> 将位于文件结尾 (EOF)。  
  
 如果样式表包含实体，则应指定 <xref:System.Xml.XmlReader> 可解析实体 (<xref:System.Xml.XmlReader.CanResolveEntity%2A?displayProperty=nameWithType> 返回 `true`) 的。 在这种情况下， <xref:System.Xml.XmlValidatingReader> 可以使用。  
  

  
 提供证据的方法有多种。 下表描述了为常见用户方案提供的证据类型。  
  
|方案|要提供的证据类型|  
|--------------|---------------------------------|  
|XSLT 样式表是自包含的，或来自你信任的代码库。|使用程序集中的证据。<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;xslt.Load(xslReader, resolver, this.GetType().Assembly.Evidence);</code></pre>|  
|XSLT 样式表来自外部源。 源的来源已知，并且存在可验证的 URL。|使用 URL 创建证据。<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform();&#13;&#10; Evidence evidence = XmlSecureResolver.CreateEvidenceForUrl(stylesheetURL); &#13;&#10;xslt.Load(xslReader,resolver,evidence);</code></pre>|  
|XSLT 样式表来自外部源。 源的来源未知。|将 evidence 设置为 `null`。 脚本块将不进行处理，不支持 XSLT `document()` 函数，而且不允许特权扩展对象。<br /><br /> 此外，还可以将参数设置 `resolver` 为 `null` 。 这可确保 `xsl:import` 和 `xsl:include` 元素不被处理。|  
|XSLT 样式表来自外部源。 源的来源未知，但您需要脚本支持。|从调用方请求证据。 调用方的 API 必须提供一种方法来提供证据，通常为 <xref:System.Security.Policy.Evidence> 类。|  
  
     
## Examples  
 下面的示例执行 XSLT 转换，其中 `xsltReader` 是 <xref:System.Xml.XmlReader> 包含样式表， `secureURL` 是可用于创建的受信任 URL <xref:System.Security.Policy.Evidence> 。 <xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%2A?displayProperty=nameWithType>方法用于创建 <xref:System.Security.Policy.Evidence> 应用于样式表的。  
  
 [!code-cpp[XslTransform.Load4#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Load4/CPP/trans_ev.cpp#1)]
 [!code-csharp[XslTransform.Load4#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load4/CS/trans_ev.cs#1)]
 [!code-vb[XslTransform.Load4#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load4/VB/trans_ev.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">当前节点不符合有效样式表的要求。</exception>
        <exception cref="T:System.Security.SecurityException">引用的样式表需要的功能是所提供的证据不允许的。  
  
调用方尝试提供证据但没有 <see langword="ControlEvidence" /> 权限。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable, resolver As XmlResolver, evidence As Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable * System.Xml.XmlResolver * System.Security.Policy.Evidence -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver, evidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stylesheet">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含 XSLT 样式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" />，用于加载 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中引用的任何样式表。 如果这为 <see langword="null" />，则不解析外部资源。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />。</param>
        <param name="evidence">在为 XSLT 样式表中的脚本块生成的程序集上设置的 <see cref="T:System.Security.Policy.Evidence" />。  
  
如果为 <see langword="null" />，则不处理脚本块、不支持 XSLT <c>document()</c> 函数，并且不允许使用特权扩展对象。  
  
调用方必须有 <see langword="ControlEvidence" /> 权限，才能为脚本程序集提供证据。 不完全受信任的调用方可以将此参数设置为 <see langword="null" />。</param>
        <summary>加载 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中包含的 XSLT 样式表。 此方法允许您通过指定证据来限制样式表的权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  

  
 提供证据的方法有多种。 下表描述了为常见用户方案提供的证据类型。  
  
|方案|要提供的证据类型|  
|--------------|---------------------------------|  
|XSLT 样式表是自包含的，或来自你信任的代码库。|使用程序集中的证据。<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;xslt.Load(style sheet, resolver, this.GetType().Assembly.Evidence);</code></pre>|  
|XSLT 样式表来自外部源。 源的来源已知，并且存在可验证的 URL。|使用 URL 创建证据。<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;Evidence evidence = XmlSecureResolver.CreateEvidenceForUrl(style sheetURL); &#13;&#10;xslt.Load(style sheet,resolver,evidence);</code></pre>|  
|XSLT 样式表来自外部源。 源的来源未知。|将 evidence 设置为 `null`。 脚本块将不进行处理，不支持 XSLT `document()` 函数，而且不允许特权扩展对象。<br /><br /> 此外，还可以将参数设置 `resolver` 为 `null` 。 这可确保 `xsl:import` 和 `xsl:include` 元素不被处理。|  
|XSLT 样式表来自外部源。 源的来源未知，但您需要脚本支持。|从调用方请求证据。 调用方的 API 必须提供一种方法来提供证据，通常为 <xref:System.Security.Policy.Evidence> 类。|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">加载的资源不是有效的样式表。</exception>
        <exception cref="T:System.Security.SecurityException">引用的样式表需要的功能是所提供的证据不允许的。  
  
调用方尝试提供证据但没有 <see langword="ControlEvidence" /> 权限。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.XPathNavigator stylesheet, System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.XPathNavigator stylesheet, class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XPath.XPathNavigator,System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XPathNavigator, resolver As XmlResolver, evidence As Evidence)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::XPathNavigator ^ stylesheet, System::Xml::XmlResolver ^ resolver, System::Security::Policy::Evidence ^ evidence);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.XPathNavigator * System.Xml.XmlResolver * System.Security.Policy.Evidence -&gt; unit" Usage="xslTransform.Load (stylesheet, resolver, evidence)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.XPathNavigator" Index="0" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" Index="1" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" Index="2" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stylesheet">包含要加载的样式表的 <see cref="T:System.Xml.XPath.XPathNavigator" /> 对象。</param>
        <param name="resolver"><see cref="T:System.Xml.XmlResolver" />，用于加载 <c>xsl:import</c> 和 <c>xsl:include</c> 元素中引用的任何样式表。 如果这为 <see langword="null" />，则不解析外部资源。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />。</param>
        <param name="evidence">在为 XSLT 样式表中的脚本块生成的程序集上设置的 <see cref="T:System.Security.Policy.Evidence" />。  
  
如果为 <see langword="null" />，则不处理脚本块、不支持 XSLT <c>document()</c> 函数，并且不允许使用特权扩展对象。  
  
调用方必须有 <see langword="ControlEvidence" /> 权限，才能为脚本程序集提供证据。 不完全受信任的调用方可以将此参数设置为 <see langword="null" />。</param>
        <summary>加载 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中包含的 XSLT 样式表。 此方法允许您通过指定证据来限制样式表的权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 样式表是从的当前位置加载的 <xref:System.Xml.XPath.XPathNavigator> 。 若要使用部分已加载的文档作为样式表，请导航到与样式表的开头相对应的节点。 <xref:System.Xml.Xsl.XslTransform.Load%2A>方法返回后，位于 <xref:System.Xml.XPath.XPathNavigator> 节点)  (上的样式表的开头 `xsl:style sheet` 。  
  

  
 提供证据的方法有多种。 下表描述了为常见用户方案提供的证据类型。  
  
|方案|要提供的证据类型|  
|--------------|---------------------------------|  
|XSLT 样式表是自包含的，或来自你信任的代码库。|使用程序集中的证据。<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;xslt.Load(xslNav, resolver, this.GetType().Assembly.Evidence);</code></pre>|  
|XSLT 样式表来自外部源。 源的来源已知，并且存在可验证的 URL。|使用 URL 创建证据。<br /><br /> <pre><code class="lang-csharp">XsltTransform xslt = new XslTransform(); &#13;&#10;Evidence evidence = XmlSecureResolver.CreateEvidenceForUrl(style sheetURL); &#13;&#10;xslt.Load(xslNav,resolver,evidence);</code></pre>|  
|XSLT 样式表来自外部源。 源的来源未知。|将 evidence 设置为 `null`。 脚本块将不进行处理，不支持 XSLT `document()` 函数，而且不允许特权扩展对象。<br /><br /> 此外，还可以将参数设置 `resolver` 为 `null` 。 这可确保 `xsl:import` 和 `xsl:include` 元素不被处理。|  
|XSLT 样式表来自外部源。 源的来源未知，但您需要脚本支持。|从调用方请求证据。 调用方的 API 必须提供一种方法来提供证据，通常为 `Evidence` 类。|  
  
   
  
## Examples  
 下面的示例使用外部源中的样式表执行 XSLT 转换。 由于样式表来自不受信任的源，因此 `resolver` 和 `evidence` 参数设置为 `null` 。  
 
 [!code-csharp[XslTransform.Load5#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Load5/CS/trans_noev.cs#1)]
 [!code-vb[XslTransform.Load5#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Load5/VB/trans_noev.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.Xsl.XsltCompileException">当前节点不符合有效样式表的要求。</exception>
        <exception cref="T:System.Security.SecurityException">引用的样式表需要的功能是所提供的证据不允许的。  
  
调用方尝试提供证据但没有 <see langword="ControlEvidence" /> 权限。</exception>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Security.SecurityZone" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用加载的 XSLT 样式表转换 XML 数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputfile, string outputfile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputfile, string outputfile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputfile As String, outputfile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputfile, System::String ^ outputfile);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * string -&gt; unit" Usage="xslTransform.Transform (inputfile, outputfile)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Obsolete("You should pass XmlResolver to Transform() method")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("You should pass XmlResolver to Transform() method")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputfile" Type="System.String" />
        <Parameter Name="outputfile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputfile">要转换的源文档的 URL。</param>
        <param name="outputfile">输出文件的 URL。</param>
        <summary>转换输入文件中的 XML 数据并将结果输出到输出文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
> [!NOTE]
>  此方法在 .NET Framework 版本1.1 中已过时。 属性的设置 <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> 确定如何 `document()` 解析 XSLT 函数。 建议的做法是使用方法，该 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法采用 <xref:System.Xml.XmlResolver> 对象作为其参数之一。  
  
   
  
## Examples  
 下面的示例 `books.xml` 使用样式表转换文件 `output.xsl` 并将结果输出到该 `books.html` 文件。  
  
 [!code-cpp[XslTransform.Transform3#1](~/samples/snippets/cpp/VS_Snippets_Data/xsltransform.transform3/CPP/trans_snip2.cpp#1)]
 [!code-csharp[XslTransform.Transform3#1](~/samples/snippets/csharp/VS_Snippets_Data/xsltransform.transform3/CS/trans_snip2.cs#1)]
 [!code-vb[XslTransform.Transform3#1](~/samples/snippets/visualbasic/VS_Snippets_Data/xsltransform.transform3/VB/trans_snip2.vb#1)]  
  
 该示例使用以下两个输入文件：  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform 类中任意行为的实现</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">XslTransform 的输出</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList? args);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IXPathNavigable, args As XsltArgumentList) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args)" />
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Obsolete("You should pass XmlResolver to Transform() method")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("You should pass XmlResolver to Transform() method")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
      </Parameters>
      <Docs>
        <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlReader" />。</summary>
        <returns>包含转换结果的 <see cref="T:System.Xml.XmlReader" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
> [!NOTE]
>  此方法现已过时。 属性的设置 <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> 确定如何 `document()` 解析 XSLT 函数。 建议的做法是使用方法，该 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法采用 <xref:System.Xml.XmlResolver> 对象作为其参数之一。  
  
 `args`与 `xsl:param` 样式表中定义的元素匹配。 `xsl:output`当输出到 <xref:System.Xml.XmlReader> () 忽略元素时不支持该元素 `xsl:output` 。 有关详细信息，请参阅 [XslTransform 的输出](/dotnet/standard/data/xml/outputs-from-an-xsltransform) 。  
  
 此方法使您可以执行源文档的异步转换。  
  
 转换将应用于整个文档。 换句话说，如果你传入文档根节点以外的一个节点，并不能防止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建一个 <xref:System.Xml.XmlDocument> 仅包含节点片段的，并将 <xref:System.Xml.XmlDocument> 其传递给 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法。  
  
 下面的示例对节点片段执行转换。  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 该示例使用 `library.xml` 和 `print_root.xsl` 文件作为输入，并将以下结果输出到控制台。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform 类中任意行为的实现</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">XslTransform 的输出</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList? args);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As XPathNavigator, args As XsltArgumentList) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args)" />
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Obsolete("You should pass XmlResolver to Transform() method")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("You should pass XmlResolver to Transform() method")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
        <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlReader" />。</summary>
        <returns>包含转换结果的 <see cref="T:System.Xml.XmlReader" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 `args`与 `xsl:param` 样式表中定义的元素匹配。 转换选项将应用于整个文档。 换言之，如果当前节点是在文档根节点以外的节点树上设置的，则不会阻止转换进程访问已加载文档中的所有节点。 执行转换后，将 <xref:System.Xml.XPath.XPathNavigator> 保持其原始状态。 这意味着，在调用方法后，节点（在转换进程之前是当前节点）将保留当前节点 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 。  
  
 由于 <xref:System.Xml.XmlReader> 提供只读输出，因此 `xsl:output` 忽略元素。 有关详细信息，请参阅 [XslTransform 的输出](/dotnet/standard/data/xml/outputs-from-an-xsltransform) 。  
  
 此方法使您可以执行源文档的异步转换。  
  
> [!NOTE]
>  此方法已过时。 属性的设置 <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> 确定 XSLT 文档 ( # A1 函数的解析方式。 建议的做法是使用方法，该 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法采用 <xref:System.Xml.XmlResolver> 对象作为其参数之一。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform 类中任意行为的实现</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputfile, string outputfile, System.Xml.XmlResolver? resolver);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputfile, string outputfile, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.String,System.String,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputfile As String, outputfile As String, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputfile, System::String ^ outputfile, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * string * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (inputfile, outputfile, resolver)" />
      <MemberSignature Language="C#" Value="public void Transform (string inputfile, string outputfile, System.Xml.XmlResolver resolver);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputfile" Type="System.String" />
        <Parameter Name="outputfile" Type="System.String" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="inputfile">要转换的源文档的 URL。</param>
        <param name="outputfile">输出文件的 URL。</param>
        <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />。</param>
        <summary>转换输入文件中的 XML 数据并将结果输出到输出文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
   
  
## Examples  
 下面的示例执行 XSLT 转换并输出到文件。 <xref:System.Xml.XmlUrlResolver>使用具有默认凭据的来解析外部资源。 有关详细信息，请参阅<xref:System.Net.CredentialCache.DefaultCredentials%2A>。  
  
 [!code-cpp[XslTransform.Transform7#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTRansform.Transform7/CPP/trans_snip4.cpp#1)]
 [!code-csharp[XslTransform.Transform7#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTRansform.Transform7/CS/trans_snip4.cs#1)]
 [!code-vb[XslTransform.Transform7#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTRansform.Transform7/VB/trans_snip4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList? args, System.IO.Stream output);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Obsolete("You should pass XmlResolver to Transform() method")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("You should pass XmlResolver to Transform() method")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的流。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.Stream" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
> [!NOTE]
>  此方法现已过时。 属性的设置 <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> 确定如何 `document()` 解析 XSLT 函数。 建议的做法是使用方法，该 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法采用 <xref:System.Xml.XmlResolver> 对象作为其参数之一。  
  
 `args`与 `xsl:param` 样式表中定义的元素匹配。  
  
 转换将应用于整个文档。 换句话说，如果你传入文档根节点以外的一个节点，并不能防止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建一个 <xref:System.Xml.XmlDocument> 仅包含节点片段的，并将 <xref:System.Xml.XmlDocument> 其传递给 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法。  
  
 下面的示例对节点片段执行转换。  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 该示例使用 `library.xml` 和 `print_root.xsl` 文件作为输入，并将以下结果输出到控制台。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform 类中任意行为的实现</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">XslTransform 的输出</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList? args, System.IO.TextWriter output);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Obsolete("You should pass XmlResolver to Transform() method")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("You should pass XmlResolver to Transform() method")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的 <see cref="T:System.IO.TextWriter" />。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.TextWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
> [!NOTE]
>  此方法现已过时。 属性的设置 <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> 确定如何 `document()` 解析 XSLT 函数。 建议的做法是使用方法，该 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法采用 <xref:System.Xml.XmlResolver> 对象作为其参数之一。  
  
 `args`与 `xsl:param` 样式表中定义的元素匹配。  
  
 `xsl:output`当输出到时，不支持元素上的编码属性 <xref:System.IO.TextWriter> 。 有关支持的属性的详细信息，请参阅 [XslTransform 的输出](/dotnet/standard/data/xml/outputs-from-an-xsltransform) `xsl:output` 。  
  
 转换将应用于整个文档。 换句话说，如果你传入文档根节点以外的一个节点，并不能防止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建一个 <xref:System.Xml.XmlDocument> 仅包含节点片段的，并将其传递 <xref:System.Xml.XmlDocument> 给 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法。  
  
 下面的示例对节点片段执行转换。  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 该示例使用 `library.xml` 和 `print_root.xsl` 文件作为输入，并将以下结果输出到控制台。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform 类中任意行为的实现</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">XslTransform 的输出</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList? args, System.Xml.XmlResolver? resolver);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As IXPathNavigable, args As XsltArgumentList, resolver As XmlResolver) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlResolver -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args, resolver)" />
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlResolver resolver);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlReader" />。</summary>
        <returns>包含转换结果的 <see cref="T:System.Xml.XmlReader" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 `args`与 `xsl:param` 样式表中定义的元素匹配。 `xsl:output`当输出到 <xref:System.Xml.XmlReader> () 忽略元素时不支持该元素 `xsl:output` 。 有关详细信息，请参阅 [XslTransform 的输出](/dotnet/standard/data/xml/outputs-from-an-xsltransform) 。  
  
 此方法使您可以执行源文档的异步转换。  
  
 转换将应用于整个文档。 换句话说，如果你传入文档根节点以外的一个节点，并不能防止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建一个 <xref:System.Xml.XmlDocument> 仅包含节点片段的，并将其传递 <xref:System.Xml.XmlDocument> 给 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法。  
  
 下面的示例对节点片段执行转换。  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 该示例使用 `library.xml` 和 `print_root.xsl` 文件作为输入，并将以下结果输出到控制台。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
   
  
## Examples  
 下面的示例将转换 XML 文档，并将结果输出到 `XmlReader` 。 使用 <xref:System.Xml.XmlUrlResolver> 必要凭据处理任何 XSLT `document()` 函数的。  
  
 [!code-cpp[XslTransform.Transform4#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Transform4/CPP/trans_snip3.cpp#1)]
 [!code-csharp[XslTransform.Transform4#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform4/CS/trans_snip3.cs#1)]
 [!code-vb[XslTransform.Transform4#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform4/VB/trans_snip3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform 类中任意行为的实现</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">XslTransform 的输出</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList? args, System.Xml.XmlWriter output);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Obsolete("You should pass XmlResolver to Transform() method")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("You should pass XmlResolver to Transform() method")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的 <see cref="T:System.Xml.XmlWriter" />。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
> [!NOTE]
>  此方法现已过时。 属性的设置 <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> 确定如何 `document()` 解析 XSLT 函数。 建议的做法是使用方法，该 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法采用 <xref:System.Xml.XmlResolver> 对象作为其参数之一。  
  
 `args`与 `xsl:param` 样式表中定义的元素匹配。 `xsl:output`当) 忽略输出到 (时，不支持该元素 <xref:System.Xml.XmlWriter> `xsl:output` 。 有关详细信息，请参阅 [XslTransform 的输出](/dotnet/standard/data/xml/outputs-from-an-xsltransform) 。  
  
 转换将应用于整个文档。 换句话说，如果你传入文档根节点以外的一个节点，并不能防止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建一个 <xref:System.Xml.XmlDocument> 仅包含节点片段的，并将 <xref:System.Xml.XmlDocument> 其传递给 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法。  
  
 下面的示例对节点片段执行转换。  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out);  
```  
  
 该示例使用 `library.xml` 和 `print_root.xsl` 文件作为输入，并将以下结果输出到控制台。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />  
  <template match="/">  
  Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform 类中任意行为的实现</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">XslTransform 的输出</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList? args, System.IO.Stream output);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Obsolete("You should pass XmlResolver to Transform() method")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("You should pass XmlResolver to Transform() method")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
        <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的流。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.Stream" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 `args`与 `xsl:param` 样式表中定义的元素匹配。 转换选项将应用于整个文档。 换言之，如果当前节点是在文档根节点以外的节点树上设置的，则不会阻止转换进程访问已加载文档中的所有节点。 执行转换后，将 <xref:System.Xml.XPath.XPathNavigator> 保持其原始状态。 这意味着，在调用方法后，节点（在转换进程之前是当前节点）将保留当前节点 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 。  
  
 有关支持的属性的详细信息，请参阅 [XslTransform 的输出](/dotnet/standard/data/xml/outputs-from-an-xsltransform) `xsl:output` 。  
  
> [!NOTE]
>  此方法现已过时。 属性的设置 <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> 确定如何 `document()` 解析 XSLT 函数。 建议的做法是使用方法，该 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法采用 <xref:System.Xml.XmlResolver> 对象作为其参数之一。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform 类中任意行为的实现</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList? args, System.IO.TextWriter output);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Obsolete("You should pass XmlResolver to Transform() method")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("You should pass XmlResolver to Transform() method")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
        <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的 <see cref="T:System.IO.TextWriter" />。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.TextWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 `args`与 `xsl:param` 样式表中定义的元素匹配。 转换选项将应用于整个文档。 换言之，如果当前节点是在文档根节点以外的节点树上设置的，则不会阻止转换进程访问已加载文档中的所有节点。 执行转换后，将 <xref:System.Xml.XPath.XPathNavigator> 保持其原始状态。 这意味着，在调用方法后，节点（在转换进程之前是当前节点）将保留当前节点 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 。  
  
 `xsl:output`当输出到时，不支持元素上的编码属性 <xref:System.IO.TextWriter> 。 有关支持的属性的详细信息，请参阅 [XslTransform 的输出](/dotnet/standard/data/xml/outputs-from-an-xsltransform) `xsl:output` 。  
  
> [!NOTE]
>  此方法现已过时。 属性的设置 <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> 确定如何 `document()` 解析 XSLT 函数。 建议的做法是使用方法，该 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法采用 <xref:System.Xml.XmlResolver> 对象作为其参数之一。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform 类中任意行为的实现</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList? args, System.Xml.XmlResolver? resolver);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReader Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Function Transform (input As XPathNavigator, args As XsltArgumentList, resolver As XmlResolver) As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReader ^ Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlResolver -&gt; System.Xml.XmlReader" Usage="xslTransform.Transform (input, args, resolver)" />
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlResolver resolver);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
        <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlReader" />。</summary>
        <returns>包含转换结果的 <see cref="T:System.Xml.XmlReader" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 `args`与 `xsl:param` 样式表中定义的元素匹配。 转换选项将应用于整个文档。 换言之，如果当前节点是在文档根节点以外的节点树上设置的，则不会阻止转换进程访问已加载文档中的所有节点。 执行转换后，将 <xref:System.Xml.XPath.XPathNavigator> 保持其原始状态。 这意味着，在调用方法后，节点（在转换进程之前是当前节点）将保留当前节点 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 。  
  
 由于 <xref:System.Xml.XmlReader> 提供只读输出，因此 `xsl:output` 忽略元素。 有关详细信息，请参阅 [XslTransform 的输出](/dotnet/standard/data/xml/outputs-from-an-xsltransform) 。  
  
 此方法使您可以执行源文档的异步转换。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform 类中任意行为的实现</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList? args, System.Xml.XmlWriter output);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslTransform.Transform (input, args, output)" />
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Obsolete("You should pass XmlResolver to Transform() method")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("You should pass XmlResolver to Transform() method")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
        <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的 <see cref="T:System.Xml.XmlWriter" />。</param>
        <summary>使用指定的参数转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 `args`与 `xsl:param` 样式表中定义的元素匹配。 转换选项将应用于整个文档。 换言之，如果当前节点是在文档根节点以外的节点树上设置的，则不会阻止转换进程访问已加载文档中的所有节点。 执行转换后，将 <xref:System.Xml.XPath.XPathNavigator> 保持其原始状态。 这意味着，在调用该方法后，在转换进程之前是当前节点的节点将保留为当前节点 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 。  
  
 `xsl:output`当) 忽略输出到 (时，不支持该元素 <xref:System.Xml.XmlWriter> `xsl:output` 。 有关详细信息，请参阅 [XslTransform 的输出](/dotnet/standard/data/xml/outputs-from-an-xsltransform) 。  
  
> [!NOTE]
>  此方法现已过时。 属性的设置 <xref:System.Xml.Xsl.XslTransform.XmlResolver%2A> 确定如何 `document()` 解析 XSLT 函数。 建议的做法是使用方法，该 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法采用 <xref:System.Xml.XmlResolver> 对象作为其参数之一。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform 类中任意行为的实现</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList? args, System.IO.Stream output, System.Xml.XmlResolver? resolver);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As Stream, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.Stream * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output, System.Xml.XmlResolver resolver);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的流。</param>
        <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.Stream" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 `args`与 `xsl:param` 样式表中定义的元素匹配。  
  
 转换将应用于整个文档。 换句话说，如果你传入文档根节点以外的一个节点，并不能防止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建一个 <xref:System.Xml.XmlDocument> 仅包含节点片段的，并将 <xref:System.Xml.XmlDocument> 其传递给 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法。  
  
 下面的示例对节点片段执行转换。  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 该示例使用 `library.xml` 和 `print_root.xsl` 文件作为输入，并将以下结果输出到控制台。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
   
  
## Examples  
 下面的示例在 ASP.NET 页中执行转换。  
  
 [!code-aspx-csharp[XslTransform.Transform5#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform5/CS/transcs.aspx#1)]
 [!code-aspx-vb[XslTransform.Transform5#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform5/VB/transvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform 类中任意行为的实现</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">XslTransform 的输出</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList? args, System.IO.TextWriter output, System.Xml.XmlResolver? resolver);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As TextWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output, System.Xml.XmlResolver resolver);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的 <see cref="T:System.IO.TextWriter" />。</param>
        <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.TextWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 `args`与 `xsl:param` 样式表中定义的元素匹配。  
  
 `xsl:output`当输出到时，不支持元素上的编码属性 <xref:System.IO.TextWriter> 。 有关支持的属性的详细信息，请参阅 [XslTransform 的输出](/dotnet/standard/data/xml/outputs-from-an-xsltransform) `xsl:output` 。  
  
 转换将应用于整个文档。 换句话说，如果你传入文档根节点以外的一个节点，并不能防止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建一个 <xref:System.Xml.XmlDocument> 仅包含节点片段的，并将 <xref:System.Xml.XmlDocument> 其传递给 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法。  
  
 下面的示例对节点片段执行转换。  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 该示例使用 `library.xml` 和 `print_root.xsl` 文件作为输入，并将以下结果输出到控制台。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />   
  <template match="/">  
     Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
   
  
## Examples  
 下面的示例转换 XML 文件并输出 HTML 字符串。 <xref:System.IO.StringReader>和 <xref:System.IO.StringWriter> 类用于读取和写入字符串。  
  
 [!code-csharp[XslTransform.Transform6#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform6/CS/transstring.cs#1)]
 [!code-vb[XslTransform.Transform6#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform6/VB/transstring.vb#1)]  
  
 示例使用 `books.xml` 文件作为输入。  
  
 [!code-xml[XslTransform.Transform6#2](~/samples/snippets/xml/VS_Snippets_Data/XslTransform.Transform6/XML/books.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform 类中任意行为的实现</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">XslTransform 的输出</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList? args, System.Xml.XmlWriter output, System.Xml.XmlResolver? resolver);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, args As XsltArgumentList, output As XmlWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output, System.Xml.XmlResolver resolver);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的 <see cref="T:System.Xml.XmlWriter" />。</param>
        <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 `args`与 `xsl:param` 样式表中定义的元素匹配。 `xsl:output`当) 忽略输出到 (时，不支持该元素 <xref:System.Xml.XmlWriter> `xsl:output` 。 有关详细信息，请参阅 [XslTransform 的输出](/dotnet/standard/data/xml/outputs-from-an-xsltransform) 。  
  
 转换将应用于整个文档。 换句话说，如果你传入文档根节点以外的一个节点，并不能防止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建一个 <xref:System.Xml.XmlDocument> 仅包含节点片段的，并将 <xref:System.Xml.XmlDocument> 其传递给 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 方法。  
  
 下面的示例对节点片段执行转换。  
  
```csharp  
XslTransform xslt = new XslTransform();       
xslt.Load("print_root.xsl");  
XmlDocument doc = new XmlDocument();  
doc.Load("library.xml");  
// Create a new document containing just the node fragment.  
XmlNode testNode = doc.DocumentElement.FirstChild;   
XmlDocument tmpDoc = new XmlDocument();   
tmpDoc.LoadXml(testNode.OuterXml);  
// Pass the document containing the node fragment   
// to the Transform method.  
Console.WriteLine("Passing " + tmpDoc.OuterXml + " to print_root.xsl");  
xslt.Transform(tmpDoc, null, Console.Out, null);  
```  
  
 该示例使用 `library.xml` 和 `print_root.xsl` 文件作为输入，并将以下结果输出到控制台。  
  
```  
Passing <book genre="novel" ISBN="1-861001-57-5"><title>Pride And Prejudice</title></book> to print_root.xsl   
Root node is book.  
```  
  
 `library.xml`  
  
```xml  
<library>  
  <book genre='novel' ISBN='1-861001-57-5'>  
     <title>Pride And Prejudice</title>  
  </book>  
  <book genre='novel' ISBN='1-81920-21-2'>  
     <title>Hook</title>  
  </book>  
</library>  
```  
  
 `print_root.xsl`  
  
```xml  
<stylesheet version="1.0" xmlns="http://www.w3.org/1999/XSL/Transform" >  
  <output method="text" />  
  <template match="/">  
  Root node is  <value-of select="local-name(//*[position() = 1])" />   
  </template>  
</stylesheet>  
```  
  
   
  
## Examples  
 下面的示例将 XML 文档转换为 HTML 文档。 它显示表中每本书的 ISBN、标题和价格。  
  
 [!code-cpp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XslTransform.Transform7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/VB/source.vb#1)]  
  
 示例使用下列两个输入文件。  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform 类中任意行为的实现</related>
        <related type="Article" href="https://msdn.microsoft.com/library/8e149d32-4b2f-493f-9e4b-d0d93475acde">XslTransform 的输出</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList? args, System.IO.Stream output, System.Xml.XmlResolver? resolver);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.Stream output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As Stream, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::Stream ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.Stream * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.Stream output, System.Xml.XmlResolver resolver);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
        <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的流。</param>
        <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.Stream" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 `args`与 `xsl:param` 样式表中定义的元素匹配。 转换选项将应用于整个文档。 换言之，如果当前节点是在文档根节点以外的节点树上设置的，则不会阻止转换进程访问已加载文档中的所有节点。 执行转换后，将 <xref:System.Xml.XPath.XPathNavigator> 保持其原始状态。 这意味着，在调用方法后，节点（在转换进程之前是当前节点）将保留当前节点 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 。  
  
 有关支持的属性的详细信息，请参阅 [XslTransform 的输出](/dotnet/standard/data/xml/outputs-from-an-xsltransform) `xsl:output` 。  
  
   
  
## Examples  
 下面的示例将 customer 表加载到中 <xref:System.Xml.XmlDataDocument> ，并执行 XSLT 转换，以将客户数据提取到 HTML 表中。 该示例使用 Microsoft SQL Server 2000 Northwind 数据库。  
  
 [!code-csharp[XmlDataDocument.CreateNavigator#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlDataDocument.CreateNavigator/CS/dataset_trans.cs#1)]
 [!code-vb[XmlDataDocument.CreateNavigator#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlDataDocument.CreateNavigator/VB/dataset_trans.vb#1)]  
  
 示例使用 `customers.xsl` 文件作为输入。  
  
 [!code-xml[XmlDataDocument.CreateNavigator#2](~/samples/snippets/xml/VS_Snippets_Data/XmlDataDocument.CreateNavigator/XML/customers.xsl#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform 类中任意行为的实现</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList? args, System.IO.TextWriter output, System.Xml.XmlResolver? resolver);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.IO.TextWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As TextWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::IO::TextWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.IO.TextWriter output, System.Xml.XmlResolver resolver);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
        <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的 <see cref="T:System.IO.TextWriter" />。</param>
        <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />。</param>
        <summary>使用指定的 <paramref name="args" /> 转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.IO.TextWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 `args`与 `xsl:param` 样式表中定义的元素匹配。 转换选项将应用于整个文档。 换言之，如果当前节点是在文档根节点以外的节点树上设置的，则不会阻止转换进程访问已加载文档中的所有节点。 执行转换后，将 <xref:System.Xml.XPath.XPathNavigator> 保持其原始状态。 这意味着，在调用方法后，节点（在转换进程之前是当前节点）将保留当前节点 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 。  
  
 `xsl:output`当输出到时，不支持元素上的编码属性 <xref:System.IO.TextWriter> 。 有关支持的属性的详细信息，请参阅 [XslTransform 的输出](/dotnet/standard/data/xml/outputs-from-an-xsltransform) `xsl:output` 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform 类中任意行为的实现</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList? args, System.Xml.XmlWriter output, System.Xml.XmlResolver? resolver);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.XPathNavigator input, class System.Xml.Xsl.XsltArgumentList args, class System.Xml.XmlWriter output, class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XPathNavigator, args As XsltArgumentList, output As XmlWriter, resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::XPathNavigator ^ input, System::Xml::Xsl::XsltArgumentList ^ args, System::Xml::XmlWriter ^ output, System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.XPathNavigator * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslTransform.Transform (input, args, output, resolver)" />
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.XPathNavigator input, System.Xml.Xsl.XsltArgumentList args, System.Xml.XmlWriter output, System.Xml.XmlResolver resolver);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="args" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input"><see cref="T:System.Xml.XPath.XPathNavigator" />，包含要转换的数据。</param>
        <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。</param>
        <param name="output">要输出到的 <see cref="T:System.Xml.XmlWriter" />。</param>
        <param name="resolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。  
  
完成 <see cref="T:System.Xml.XmlResolver" /> 方法后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />。</param>
        <summary>使用指定的参数转换 <see cref="T:System.Xml.XPath.XPathNavigator" /> 中的 XML 数据，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 <xref:System.Xml.Xsl.XslTransform> 支持 XSLT 1.0 语法。 XSLT 样式表必须包括命名空间声明 `xmlns:xsl= http://www.w3.org/1999/XSL/Transform` 。  
  
 `args`与 `xsl:param` 样式表中定义的元素匹配。 转换选项将应用于整个文档。 换言之，如果当前节点是在文档根节点以外的节点树上设置的，则不会阻止转换进程访问已加载文档中的所有节点。 执行转换后，将 <xref:System.Xml.XPath.XPathNavigator> 保持其原始状态。 这意味着，在调用该方法后，在转换进程之前是当前节点的节点将保留为当前节点 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 。  
  
 `xsl:output`当) 忽略输出到 (时，不支持该元素 <xref:System.Xml.XmlWriter> `xsl:output` 。 有关详细信息，请参阅 [XslTransform 的输出](/dotnet/standard/data/xml/outputs-from-an-xsltransform) 。  
  
   
  
## Examples  
 下面的示例在执行 XSLT 转换之前加载并编辑 XML 文档。  
  
 [!code-cpp[XslTransform.Transform2#1](~/samples/snippets/cpp/VS_Snippets_Data/XslTransform.Transform2/CPP/trans_snip.cpp#1)]
 [!code-csharp[XslTransform.Transform2#1](~/samples/snippets/csharp/VS_Snippets_Data/XslTransform.Transform2/CS/trans_snip.cs#1)]
 [!code-vb[XslTransform.Transform2#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslTransform.Transform2/VB/trans_snip.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">处理 XSLT 转换时出错。  
  
注意：这是对早期版本行为的更改。 如果使用的是 Microsoft .NET Framework 1.1 版或更早版本，则会引发 <see cref="T:System.Xml.Xsl.XsltException" />。</exception>
        <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <related type="Article" href="https://msdn.microsoft.com/library/d2758ea1-03f6-47bd-88d2-0fb7ccdb2fab">XslTransform 类中任意行为的实现</related>
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver? XmlResolver { set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslTransform.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.Xsl.XslTransform.XmlResolver" />
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Obsolete("You should pass XmlResolver to Transform() method")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("You should pass XmlResolver to Transform() method")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>设置调用 <see cref="T:System.Xml.XmlResolver" /> 方法时用于解析外部资源的 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />。</summary>
        <value>要在转换期间使用的 <see cref="T:System.Xml.XmlResolver" />。 如果设置为 <see langword="null" /> ，则不解析 XSLT <c>文档 ( # B1 </c> 函数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.Xsl.XslTransform>类在 .NET Framework 版本2.0 中已过时。 <xref:System.Xml.Xsl.XslCompiledTransform>类是新的 XSLT 处理器。 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
 在 .NET Framework 版本1.1 中，应用程序的信任级别确定了默认行为：  
  
 `Fully trusted code:`<xref:System.Xml.XmlUrlResolver>使用不带用户凭据的默认值来解析 `document()` 函数。 如果访问外部资源需要身份验证，请使用此属性指定 <xref:System.Xml.XmlResolver> 具有必要凭据的。  
  
 `Semi-trusted code:` 属性设置为 `null` ，这意味着 `document()` 不会解析函数。 由于需要完全信任来指定，因此 <xref:System.Xml.XmlResolver> 也不能设置此属性。  
  
 调用 XSLT 函数时，将使用此解析程序 `document()` 。 它不用于解析 `xsl:import` `xsl:include` 样式表中引用的元素和元素。 若要指定 <xref:System.Xml.XmlResolver> 要用于解析 `xsl:import` 的和 `xsl:include` 样式表中引用的元素，请使用 <xref:System.Xml.Xsl.XslTransform.Load%2A> 重载，该重载采用 <xref:System.Xml.XmlResolver> 作为其参数之一。  
  
> [!NOTE]
>  此属性在 .NET Framework 版本1.1 中已过时。 <xref:System.Xml.XmlResolver>建议使用方法来指定 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 。 在这种情况下，在 <xref:System.Xml.XmlResolver> 方法完成后，不会缓存 <xref:System.Xml.Xsl.XslTransform.Transform%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
  </Members>
</Type>
