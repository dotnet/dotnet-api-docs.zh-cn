<Type Name="XslCompiledTransform" FullName="System.Xml.Xsl.XslCompiledTransform">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b6936640434a6ba1b45db2b5dd6b814d791ca217" /><Meta Name="ms.sourcegitcommit" Value="53b005dec6dcff97c7bac97cf446d9ae6bda93f0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/24/2020" /><Meta Name="ms.locfileid" Value="91207922" /></Metadata><TypeSignature Language="C#" Value="public sealed class XslCompiledTransform" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XslCompiledTransform extends System.Object" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Xsl.XslCompiledTransform" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XslCompiledTransform" />
  <TypeSignature Language="C++ CLI" Value="public ref class XslCompiledTransform sealed" />
  <TypeSignature Language="F#" Value="type XslCompiledTransform = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed XslCompiledTransform extends System.Object" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Xml.ReaderWriter" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>使用 XSLT 样式表转换 XML 数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform>类是支持 xslt 1.0 语法的 xslt 处理器。 这是一种新的实现，与过时的类相比，性能提升 <xref:System.Xml.Xsl.XslTransform> 。 类的结构与 <xref:System.Xml.Xsl.XslCompiledTransform> 类非常相似 <xref:System.Xml.Xsl.XslTransform> 。 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法加载并编译样式表，而 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法执行 XSLT 转换。  
  
 `document()`默认情况下，禁用对 XSLT 函数和嵌入式脚本块的支持。 可以通过创建 <xref:System.Xml.Xsl.XsltSettings> 对象并将其传递给方法来启用这些功能 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 。  
  
 有关详细信息，请参阅 [使用 XslCompiledTransform 类](/dotnet/standard/data/xml/using-the-xslcompiledtransform-class) 和 [从 XslTransform 类迁移](/dotnet/standard/data/xml/migrating-from-the-xsltransform-class)。  
  
## <a name="security-considerations"></a>安全注意事项  
 在创建使用 <xref:System.Xml.Xsl.XslCompiledTransform> 类的应用程序时，应了解下列项及其含义：  
  
-   默认情况下禁用 XSLT 脚本。 只有要求脚本支持并且处于完全可信的环境下时，才应启用 XSLT 脚本。  
  
-   默认情况下禁用 XSLT `document()` 函数。 如果启用 `document()` 函数，通过将 <xref:System.Xml.XmlSecureResolver> 对象传递给 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法，限制可以访问的资源。  
  
-   默认情况下启用扩展对象。 如果包含扩展对象的 <xref:System.Xml.Xsl.XsltArgumentList> 对象传递给 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法，将利用这些扩展对象。  
  
-   XSLT 样式表可以包括对其他文件的引用以及嵌入式脚本块。 恶意用户可能会利用这一点，方法是为您提供数据或样式表，在执行时，可能会使您的系统不断进行处理，直到计算机资源不足。  
  
-   在混合信任环境下运行的 XSLT 应用程序可能会引发样式表欺骗。 例如，恶意用户可能会为对象加载有害的样式表，并将其交给另一个用户，而后者会继续调用 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法并执行转换。  
  
 如果不启用脚本或 `document()` 函数（除非样式表来自可信的源），或不接受来自不可信的源的 <xref:System.Xml.Xsl.XslCompiledTransform> 对象、XSLT 样式表或 XML 源数据，可以缓解这些安全问题。  
  
   
  
## Examples  
 下面的示例执行转换并输出到文件。  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 该示例使用以下两个输入文件：  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
    </remarks>
    <threadsafe><see cref="T:System.Xml.Xsl.XslCompiledTransform" />加载对象后，该对象是线程安全的。 换言之， <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> 方法成功完成后， <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> 可以从多个线程同时调用方法。  
  
如果在 <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> 另一个线程中调用方法时在一个线程中再次调用该方法 <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> ，则该 <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 对象会 <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Transform" /> 通过继续使用旧状态来完成调用的执行。 方法成功完成后，将使用新状态 <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> 。  
  
 <block subset="none" type="note"><para>  
 <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" />当同时从多个线程调用时，该方法不是线程安全的。  
  
</para></block></threadsafe>
    <altmember cref="T:System.Xml.Xsl.XsltArgumentList" />
    <altmember cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" />
    <altmember cref="N:System.Xml" />
    <related type="Article" href="/dotnet/standard/data/xml/xslt-transformations">XSLT 转换</related>
    <related type="Article" href="/dotnet/standard/data/xml/">XML 文档和数据</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 类的新实例。</summary>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslCompiledTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslCompiledTransform();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XslCompiledTransform (bool enableDebug);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enableDebug) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (enableDebug As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XslCompiledTransform(bool enableDebug);" />
      <MemberSignature Language="F#" Value="new System.Xml.Xsl.XslCompiledTransform : bool -&gt; System.Xml.Xsl.XslCompiledTransform" Usage="new System.Xml.Xsl.XslCompiledTransform enableDebug" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="enableDebug" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="enableDebug">生成调试信息时为 <see langword="true" />；否则为 <see langword="false" />。 如果将其设置为 <see langword="true" />，您就可以使用 Microsoft Visual Studio 调试器对样式表进行调试。</param>
        <summary>使用指定的调试设置初始化 <see cref="T:System.Xml.Xsl.XslCompiledTransform" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要单步执行代码并调试样式表，必须满足以下条件：  
  
-   `enableDebug` 参数设置为 `true`。  
  
-   样式表 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 作为 URI 或实现接口的类的实现传递给方法 <xref:System.Xml.XmlReader> <xref:System.Xml.IXmlLineInfo> 。 <xref:System.Xml.IXmlLineInfo>接口是在所有文本分析对象上实现的 <xref:System.Xml.XmlReader> 。  
  
     换言之，如果使用对象（如或）加载样式表， <xref:System.Xml.XPath.IXPathNavigable> 或不 <xref:System.Xml.XmlDocument> <xref:System.Xml.XPath.XPathDocument> <xref:System.Xml.XmlReader> 实现接口的实现 <xref:System.Xml.IXmlLineInfo> ，则不能调试样式表。  
  
-   <xref:System.Xml.XmlResolver>用于加载样式表的是基于文件的 <xref:System.Xml.XmlResolver> ，例如 <xref:System.Xml.XmlUrlResolver> (这是 <xref:System.Xml.XmlResolver> 类) 使用的默认值 <xref:System.Xml.Xsl.XslCompiledTransform> 。  
  
-   样式表位于本地计算机上或位于 intranet 上。  
  
   
  
## Examples  
 下面的示例演示如何启用 XSLT 调试。  
  
 [!code-csharp[XslCompiledTransform.Load#10](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#10)]
 [!code-vb[XslCompiledTransform.Load#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="CompileToType">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerErrorCollection CompileToType (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver, bool debug, System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerErrorCollection CompileToType(class System.Xml.XmlReader stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver, bool debug, class System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CompileToType (stylesheet As XmlReader, settings As XsltSettings, stylesheetResolver As XmlResolver, debug As Boolean, typeBuilder As TypeBuilder, scriptAssemblyPath As String) As CompilerErrorCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CompilerErrorCollection ^ CompileToType(System::Xml::XmlReader ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver, bool debug, System::Reflection::Emit::TypeBuilder ^ typeBuilder, System::String ^ scriptAssemblyPath);" />
      <MemberSignature Language="F#" Value="static member CompileToType : System.Xml.XmlReader * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver * bool * System.Reflection.Emit.TypeBuilder * string -&gt; System.CodeDom.Compiler.CompilerErrorCollection" Usage="System.Xml.Xsl.XslCompiledTransform.CompileToType (stylesheet, settings, stylesheetResolver, debug, typeBuilder, scriptAssemblyPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerErrorCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" Index="1" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" Index="2" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="debug" Type="System.Boolean" Index="3" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="typeBuilder" Type="System.Reflection.Emit.TypeBuilder" Index="4" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
        <Parameter Name="scriptAssemblyPath" Type="System.String" Index="5" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stylesheet">一个 <see cref="T:System.Xml.XmlReader" />，位于要编译的样式表开头。</param>
        <param name="settings">要应用于样式表的 <see cref="T:System.Xml.Xsl.XsltSettings" />。 如果为 <see langword="null" />，将应用 <see cref="P:System.Xml.Xsl.XsltSettings.Default" />。</param>
        <param name="stylesheetResolver"><see cref="T:System.Xml.XmlResolver" /> 用于解析 <see langword="xsl:import" /> 和 <see langword="xsl:include" /> 元素中引用的样式表模块。 如果为 <see langword="null" />，将不解析外部资源。</param>
        <param name="debug">将它设置为 <see langword="true" /> 即可使用调试器调试样式表。</param>
        <param name="typeBuilder">用于样式表编译的 <see cref="T:System.Reflection.Emit.TypeBuilder" />。 提供的 TypeBuilder 用于生成结果类型。</param>
        <param name="scriptAssemblyPath">为 <see langword="msxsl:script" /> 元素生成的程序集的基路径。 如果仅生成了一个脚本程序集，此参数将指定该程序集的路径。 如果生成了多个脚本程序集，将对文件名追加特殊的后缀，以确保程序集名称的唯一性。</param>
        <summary>将 XSLT 样式表编译为指定的类型。</summary>
        <returns>一个 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 对象，包含指示编译结果的编译器错误和警告。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 该 `xsltc.exe` 工具是围绕方法的包装 <xref:System.Xml.Xsl.XslCompiledTransform.CompileToType%2A> 。 使用编译样式表 `xsltc.exe` 将满足大多数利用已编译样式表的应用程序的需求。 <xref:System.Xml.Xsl.XslCompiledTransform.CompileToType%2A>生成自定义编译工具时应使用方法。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>编译样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尽管 <xref:System.Xml.Xsl.XslCompiledTransform> 类的总体性能优于 <xref:System.Xml.Xsl.XslTransform> 类，但在首次对转换调用时，<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 类的 <xref:System.Xml.Xsl.XslCompiledTransform> 方法可能比 <xref:System.Xml.Xsl.XslTransform.Load%2A> 类的 <xref:System.Xml.Xsl.XslTransform> 方法慢。 这是因为必须先编译 XSLT 文件，才能加载该文件。 有关详细信息，请参阅以下博客文章：[XslCompiledTransform Slower than XslTransform?](https://go.microsoft.com/fwlink/?LinkId=130590)（XslCompiledTransform 比 XslTransform 慢？）  
  
> [!NOTE]
>  以调试模式编译的 XSLT 与以发布模式编译的 XSLT 之间有一些差别。 在有些情况下，以调试模式编译的样式表在 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 期间不会引发错误，但以后在 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 期间会失败。 以发布模式编译的同一个样式表在 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 期间就会失败。 例如，当某个表达式需要节点集，而分配给该表达式的变量不是节点集类型的时，就会出现这种情况。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string stylesheetUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string stylesheetUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheetUri As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ stylesheetUri);" />
      <MemberSignature Language="F#" Value="member this.Load : string -&gt; unit" Usage="xslCompiledTransform.Load stylesheetUri" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheetUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stylesheetUri">样式表的 URI。</param>
        <summary>加载和编译位于指定 URI 的样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform>类支持 XSLT 1.0 语法。 XSLT 样式表必须使用 `http://www.w3.org/1999/XSL/Transform` 命名空间。  
  
 此方法具有以下行为：  
  
-   使用 <xref:System.Xml.XmlUrlResolver> 不带用户凭据的来解析样式表 URI，并处理任何 `xsl:import` 或 `xsl:include` 元素。  
  
-   使用 <xref:System.Xml.XmlReader> 带有默认设置的来加载样式表。 在上禁用 DTD 处理 <xref:System.Xml.XmlReader> 。 如果需要 DTD 处理，请创建一个 <xref:System.Xml.XmlReader> 启用了此功能的，并将其传递给 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 方法。  
  
-   `document()`已禁用该函数。  
  
-   不支持嵌入的脚本。  
  
 可以使用 <xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.String%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29> 重载来指定 <xref:System.Xml.XmlResolver> 具有必要身份验证凭据的，或指定不同的 XSLT 设置。  
  
   
  
## Examples  
 下面的示例执行转换并输出到文件。  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stylesheetUri" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">样式表中有错。</exception>
        <exception cref="T:System.IO.FileNotFoundException">无法找到该样式表。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="stylesheetUri" /> 值包含无法找到的文件名或目录。</exception>
        <exception cref="T:System.Net.WebException">无法解析 <paramref name="stylesheetUri" /> 值。  
  
- 或 - 
处理该请求时出错。</exception>
        <exception cref="T:System.UriFormatException"><paramref name="stylesheetUri" /> 不是有效的 URI。</exception>
        <exception cref="T:System.Xml.XmlException">加载样式表时出现分析错误。</exception>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (Type compiledStylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Type compiledStylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (compiledStylesheet As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(Type ^ compiledStylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : Type -&gt; unit" Usage="xslCompiledTransform.Load compiledStylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compiledStylesheet" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="compiledStylesheet">包含已编译样式表的类的名称。  
  
 该名称通常是样式表的名称。 除非另外指定，否则，xsltc.exe 工具将样式表名称用作类和程序集的名称。</param>
        <summary>加载使用 <see href="https://docs.microsoft.com/dotnet/standard/data/xml/xslt-compiler-xsltc-exe">XSLT 编译器 (xsltc.exe)</see> 创建的已编译样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 xsltc.exe 工具用于编译样式表和生成样式表中的程序集。 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法从程序集加载已编译的样式表。  
  
> [!NOTE]
>  还必须在应用程序中包含 XSLT 程序集作为引用。  
  
   
  
## Examples  
 下面的示例演示如何从 XSLT 程序集加载已编译的样式表。 该示例假设使用 xsltc.exe 工具创建一个名为 bookOrders.dll 的程序集，该类具有名为 bookOrders 的类。  
  
> [!NOTE]
>  在编译代码时，必须引用 XSLT 程序集。 例如，`csc /r:system.dll;system.xml.dll;bookOrders.dll myCode.cs`。  
  
```csharp  
// Load the type of the class.  
XslCompiledTransform xslt = new XslCompiledTransform();  
xslt.Load(typeof(bookOrders));  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/data/xml/xslt-compiler-xsltc-exe">XSLT 程序集工具 ( # A0) </related>
        <related type="Article" href="/dotnet/standard/data/xml/how-to-perform-an-xslt-transformation-by-using-an-assembly">如何：使用程序集执行 XSLT 转换</related>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader -&gt; unit" Usage="xslCompiledTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="stylesheet">包含此样式表的 <see cref="T:System.Xml.XmlReader" />。</param>
        <summary>编译 <see cref="T:System.Xml.XmlReader" /> 中包含的样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform>类支持 XSLT 1.0 语法。 XSLT 样式表必须使用 `http://www.w3.org/1999/XSL/Transform` 命名空间。  
  
 样式表从的当前节点加载 <xref:System.Xml.XmlReader> 到其所有子级。 这使您可以使用文档的一部分作为样式表。 此 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 方法完成后，将 <xref:System.Xml.XmlReader> 定位到样式表末尾后的下一个节点。 如果已到达文档结尾，<xref:System.Xml.XmlReader> 将位于文件结尾 (EOF)。  
  
 此方法具有以下行为：  
  
-   使用 <xref:System.Xml.XmlUrlResolver> 没有用户凭据的进行处理任何 `xsl:import` 或 `xsl:include` 元素。  
  
-   `document()`已禁用该函数。  
  
-   不支持嵌入的脚本。  
  
 可以使用 <xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29> 重载来指定 <xref:System.Xml.XmlResolver> 具有必要身份验证凭据的，或指定不同的 XSLT 设置。  
  
   
  
## Examples  
 下面的示例加载对象中包含的样式表 <xref:System.Xml.XmlReader> 。  
  
 [!code-csharp[XslCompiledTransform.Load#5](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#5)]
 [!code-vb[XslCompiledTransform.Load#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stylesheet" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">样式表中有错。</exception>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable -&gt; unit" Usage="xslCompiledTransform.Load stylesheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
      </Parameters>
      <Docs>
        <param name="stylesheet">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 Microsoft .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含该样式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <summary>编译 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象中包含的样式表。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform>类支持 XSLT 1.0 语法。 XSLT 样式表必须使用 `http://www.w3.org/1999/XSL/Transform` 命名空间。  
  
 此方法具有以下行为：  
  
-   使用 <xref:System.Xml.XmlUrlResolver> 没有用户凭据的进行处理任何 `xsl:import` 或 `xsl:include` 元素。  
  
-   `document()`已禁用该函数。  
  
-   不支持嵌入的脚本。  
  
 可以使用 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 重载来指定 <xref:System.Xml.XmlResolver> 具有必要身份验证凭据的，或指定不同的 XSLT 设置。  
  
   
  
## Examples  
 下面的示例加载对象中包含的样式表 <xref:System.Xml.XPath.XPathDocument> 。  
  
 [!code-csharp[XslCompiledTransform.Load#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Load#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stylesheet" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">样式表中有错。</exception>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Reflection.MethodInfo executeMethod, byte[] queryData, Type[]? earlyBoundTypes);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Reflection.MethodInfo executeMethod, unsigned int8[] queryData, class System.Type[] earlyBoundTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (executeMethod As MethodInfo, queryData As Byte(), earlyBoundTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Reflection::MethodInfo ^ executeMethod, cli::array &lt;System::Byte&gt; ^ queryData, cli::array &lt;Type ^&gt; ^ earlyBoundTypes);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Reflection.MethodInfo * byte[] * Type[] -&gt; unit" Usage="xslCompiledTransform.Load (executeMethod, queryData, earlyBoundTypes)" />
      <MemberSignature Language="C#" Value="public void Load (System.Reflection.MethodInfo executeMethod, byte[] queryData, Type[] earlyBoundTypes);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executeMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="queryData" Type="System.Byte[]" />
        <Parameter Name="earlyBoundTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="executeMethod">一个 <see cref="T:System.Reflection.MethodInfo" /> 对象，表示已编译样式表中由编译器生成的 <c>execute</c> 方法。</param>
        <param name="queryData">已编译样式表的 <c>staticData</c> 字段中的一个序列化数据结构字节数组，该已编译样式表由 <see cref="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" /> 方法生成。</param>
        <param name="earlyBoundTypes">一个类型数组，该数组存储在已编译样式表中由编译器生成的 <c>ebTypes</c> 字段中。</param>
        <summary>从使用 <see langword="XSLTC.exe" /> 实用程序编译的样式表中加载一个方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法接受一个已编译的样式表，其形式为 <xref:System.Reflection.MethodInfo> 对象、字节数组和类型数组。 <xref:System.Reflection.Emit.DynamicMethod> 对象可用于允许在回收对象时放弃编译的样式表方法 <xref:System.Xml.Xsl.XslCompiledTransform> 。  
  
   
  
## Examples  
 下面的代码示例使用 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 加载已编译的样式表。 转换可将元素的值减少 `Price` 10%。  
  
 [!code-csharp[XsltDynamicMethodLoad#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltDynamicMethodLoad/CS/XsltDynamicMethodLoad.cs#1)]
 [!code-vb[XsltDynamicMethodLoad#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltDynamicMethodLoad/VB/XsltDynamicMethodLoad.vb#1)]  
  
> [!NOTE]
>  本示例中使用的 "转换" 程序集是使用 xsltc.exe 实用工具生成的。 有关使用此命令行工具的详细信息，请参阅 [如何：使用程序集执行 XSLT 转换](/dotnet/standard/data/xml/how-to-perform-an-xslt-transformation-by-using-an-assembly)。  
  
 前面的代码示例使用以下转换：  
 [!code-xml[XsltDynamicMethodLoad-xslt](~/samples/snippets/csharp/VS_Snippets_Data/XsltDynamicMethodLoad/CS/Transform.xslt)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (string? stylesheetUri, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(string stylesheetUri, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheetUri As String, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::String ^ stylesheetUri, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberSignature Language="F#" Value="member this.Load : string * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Load (stylesheetUri, settings, stylesheetResolver)" />
      <MemberSignature Language="C#" Value="public void Load (string stylesheetUri, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheetUri" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheetUri">样式表的 URI。</param>
        <param name="settings">应用于样式表的 <see cref="T:System.Xml.Xsl.XsltSettings" />。 如果是 <see langword="null" />，则应用 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 设置。</param>
        <param name="stylesheetResolver">用于解析样式表 URI 的 <see cref="T:System.Xml.XmlResolver" /> 以及在 XSLT <c>import</c> 和 <c>include</c> 元素中引用的任何样式表。</param>
        <summary>加载和编译 URI 指定的 XSLT 样式表。 <see cref="T:System.Xml.XmlResolver" /> 可以解析任何 XSLT <c>import</c> 或 <c>include</c> 元素，而 XSLT 设置决定了样式表的权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform>类支持 XSLT 1.0 语法。 XSLT 样式表必须使用 `http://www.w3.org/1999/XSL/Transform` 命名空间。  
  
 使用 <xref:System.Xml.XmlReader> 带有默认设置的来加载样式表。 在上禁用 DTD 处理 <xref:System.Xml.XmlReader> 。 如果需要 DTD 处理，请创建一个 <xref:System.Xml.XmlReader> 启用了此功能的，并将其传递给 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 方法。  
  
   
  
## Examples  
 下面的示例加载存储在网络资源上的样式表。 <xref:System.Xml.XmlSecureResolver> 对象指定访问该样式表所需的凭据。  
  
 [!code-csharp[XslCompiledTransform.Load#2](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#2)]
 [!code-vb[XslCompiledTransform.Load#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stylesheetUri" /> 或 <paramref name="stylesheetResolver" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">样式表中有错。</exception>
        <exception cref="T:System.IO.FileNotFoundException">无法找到该样式表。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="stylesheetUri" /> 值包含无法找到的文件名或目录。</exception>
        <exception cref="T:System.Net.WebException">无法解析 <paramref name="stylesheetUri" /> 值。  
  
- 或 - 
处理该请求时出错。</exception>
        <exception cref="T:System.UriFormatException"><paramref name="stylesheetUri" /> 不是有效的 URI。</exception>
        <exception cref="T:System.Xml.XmlException">加载样式表时出现分析错误。</exception>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader? stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XmlReader stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As XmlReader, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XmlReader ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XmlReader * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Load (stylesheet, settings, stylesheetResolver)" />
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XmlReader" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">包含该样式表的 <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="settings">应用于样式表的 <see cref="T:System.Xml.Xsl.XsltSettings" />。 如果是 <see langword="null" />，则应用 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 设置。</param>
        <param name="stylesheetResolver"><see cref="T:System.Xml.XmlResolver" />，用于解析 XSLT <c>import</c> 和 <c>include</c> 元素中引用的所有样式表。 如果这为 <see langword="null" />，则不解析外部资源。</param>
        <summary>编译 <see cref="T:System.Xml.XmlReader" /> 中包含的 XSLT 样式表。 <see cref="T:System.Xml.XmlResolver" /> 可以解析任何 XSLT <c>import</c> 或 <c>include</c> 元素，而 XSLT 设置决定了样式表的权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform>类支持 XSLT 1.0 语法。 XSLT 样式表必须使用 `http://www.w3.org/1999/XSL/Transform` 命名空间。  
  
 样式表从的当前节点加载 <xref:System.Xml.XmlReader> 到其所有子级。 这使您可以使用文档的一部分作为样式表。 此 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 方法完成后，将 <xref:System.Xml.XmlReader> 定位到样式表末尾后的下一个节点。 如果已到达文档结尾，<xref:System.Xml.XmlReader> 将位于文件结尾 (EOF)。  
  
   
  
## Examples  
 下面的示例加载一个样式表并启用对 XSLT 脚本的支持。  
  
 [!code-csharp[XslCompiledTransform.Load#3](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#3)]
 [!code-vb[XslCompiledTransform.Load#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stylesheet" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">样式表中有错。</exception>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable? stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Xml.XPath.IXPathNavigable stylesheet, class System.Xml.Xsl.XsltSettings settings, class System.Xml.XmlResolver stylesheetResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (stylesheet As IXPathNavigable, settings As XsltSettings, stylesheetResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Xml::XPath::IXPathNavigable ^ stylesheet, System::Xml::Xsl::XsltSettings ^ settings, System::Xml::XmlResolver ^ stylesheetResolver);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltSettings * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Load (stylesheet, settings, stylesheetResolver)" />
      <MemberSignature Language="C#" Value="public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stylesheet" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="settings" Type="System.Xml.Xsl.XsltSettings" />
        <Parameter Name="stylesheetResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="stylesheet">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 Microsoft .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含该样式表的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="settings">应用于样式表的 <see cref="T:System.Xml.Xsl.XsltSettings" />。 如果是 <see langword="null" />，则应用 <see cref="P:System.Xml.Xsl.XsltSettings.Default" /> 设置。</param>
        <param name="stylesheetResolver"><see cref="T:System.Xml.XmlResolver" />，用于解析 XSLT <c>import</c> 和 <c>include</c> 元素中引用的所有样式表。 如果这为 <see langword="null" />，则不解析外部资源。</param>
        <summary>编译 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 中包含的 XSLT 样式表。 <see cref="T:System.Xml.XmlResolver" /> 可以解析任何 XSLT <c>import</c> 或 <c>include</c> 元素，而 XSLT 设置决定了样式表的权限。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.Xsl.XslCompiledTransform>类支持 XSLT 1.0 语法。 XSLT 样式表必须使用 `http://www.w3.org/1999/XSL/Transform` 命名空间。  
  
   
  
## Examples  
 下面的示例加载样式表。 <xref:System.Xml.XmlSecureResolver>对象包含访问 `import` `include` 在样式表中找到的任何或元素所需的凭据。  
  
 [!code-csharp[XslCompiledTransform.Load#4](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#4)]
 [!code-vb[XslCompiledTransform.Load#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stylesheet" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">样式表中有错。</exception>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="OutputSettings">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings? OutputSettings { get; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlWriterSettings OutputSettings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputSettings As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlWriterSettings ^ OutputSettings { System::Xml::XmlWriterSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputSettings : System.Xml.XmlWriterSettings" Usage="System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings OutputSettings { get; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个 <see cref="T:System.Xml.XmlWriterSettings" /> 对象，该对象包含从样式表的 <c>xsl:output</c> 元素派生的输出信息。</summary>
        <value>一个只读 <see cref="T:System.Xml.XmlWriterSettings" /> 对象，其中包含从样式表的 <c>xsl： output</c> 元素派生的输出信息。 此值可为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 成功调用方法后，将填充此属性 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 。 它包含从 `xsl:output` 已编译样式表的元素派生的信息。 此 <xref:System.Xml.XmlWriterSettings> 对象可传递给 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> 方法以创建要 <xref:System.Xml.XmlWriter> 输出到的对象。  
  
   
  
## Examples  
 下面的示例演示如何使用 <xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A> 属性创建将 <xref:System.Xml.XmlWriter> 文本写入控制台的对象。  
  
 [!code-csharp[XslCompiledTransform.OutputSettings#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.OutputSettings/CS/xslt_OutputSettings.cs#1)]
 [!code-vb[XslCompiledTransform.OutputSettings#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.OutputSettings/VB/xslt_OutputSettings.vb#1)]  
  
 该示例使用 `books.xml` 和 `outputConsole.xsl` 文件作为输入。  
  
 `books.xml`  
  
 [!code-xml[XslCompiledTransform.OutputSettings#2](~/samples/snippets/xml/VS_Snippets_Data/XslCompiledTransform.OutputSettings/XML/books.xml#2)]  
  
 `outputConsole.xsl`  
  
 [!code-xml[XslCompiledTransform.OutputSettings#3](~/samples/snippets/xml/VS_Snippets_Data/XslCompiledTransform.OutputSettings/XML/outputConsole.xsl#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="TemporaryFiles">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.TempFileCollection TemporaryFiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.TempFileCollection TemporaryFiles" />
      <MemberSignature Language="DocId" Value="P:System.Xml.Xsl.XslCompiledTransform.TemporaryFiles" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TemporaryFiles As TempFileCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::Compiler::TempFileCollection ^ TemporaryFiles { System::CodeDom::Compiler::TempFileCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TemporaryFiles : System.CodeDom.Compiler.TempFileCollection" Usage="System.Xml.Xsl.XslCompiledTransform.TemporaryFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.TempFileCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取包含临时文件的 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />，这些临时文件是在成功调用 <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> 方法后在磁盘上生成的。</summary>
        <value><see cref="T:System.CodeDom.Compiler.TempFileCollection" /> 包含在磁盘上生成的临时文件。 如果调用 <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" /> 方法不成功或者尚未启用调试，则此值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性标识在 XSLT 处理期间生成的文件。 文件放在 Temp 目录中 (由% TEMP% 环境变量指定) 可以在 XSLT 处理完成后删除这些文件。  
  
   
  
## Examples  
 下面的示例将临时文件的名称写入控制台。  
  
> [!NOTE]
>  仅在加载具有块的样式表时创建临时文件 \<msxsl:script> 。  
  
 [!code-csharp[XslCompiledTransform.Transform#8](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#8)]
 [!code-vb[XslCompiledTransform.Transform#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#8)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Transform">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>执行 XSLT 转换。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  以调试模式编译的 XSLT 与以发布模式编译的 XSLT 之间有一些差别。 在有些情况下，以调试模式编译的样式表在 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 期间不会引发错误，但以后在 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 期间会失败。 以发布模式编译的同一个样式表在 <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 期间就会失败。 例如，当某个表达式需要节点集，而分配给该表达式的变量不是节点集类型的时，就会出现这种情况。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, string resultsFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, string resultsFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, resultsFile As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::String ^ resultsFile);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * string -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, resultsFile)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="resultsFile" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputUri">输入文档的 URI。</param>
        <param name="resultsFile">输出文件的 URI。</param>
        <summary>使用 URI 指定的输入文档执行转换，然后将结果输出到文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用 <xref:System.Xml.XmlUrlResolver> 没有用户凭据的默认值来解析输入和输出文档。 如果这些资源中的任何一个需要身份验证的网络资源，请使用 <xref:System.Xml.XmlResolver> 以作为其参数之一的重载，并使用 <xref:System.Xml.XmlResolver> 所需的凭据指定。  
  
 使用 <xref:System.Xml.XmlReader> 带有默认设置的来加载输入文档。 在上禁用 DTD 处理 <xref:System.Xml.XmlReader> 。 如果需要 DTD 处理，请创建一个 <xref:System.Xml.XmlReader> 启用了此功能的，并将其传递给 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法。  
  
   
  
## Examples  
 下面的示例执行转换并输出到文件。  
  
 [!code-csharp[XslCompiledTransform.Transform#1](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#1)]
 [!code-vb[XslCompiledTransform.Transform#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#1)]  
  
 该示例使用以下两个输入文件：  
  
 `books.xml`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/books.xml#2)]  
  
 `output.xsl`  
  
 [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XslTransform.Transform7 Example/XML/output.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
        <exception cref="T:System.IO.FileNotFoundException">无法找到输入文档。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 值包含无法找到的文件名或目录。</exception>
        <exception cref="T:System.Net.WebException">无法解析 <paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 值。  
  
- 或 - 
处理请求时发生错误</exception>
        <exception cref="T:System.UriFormatException"><paramref name="inputUri" /> 或 <paramref name="resultsFile" /> 不是有效 URI。</exception>
        <exception cref="T:System.Xml.XmlException">加载输入文档时出现分析错误。</exception>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">输入文档的 URI。</param>
        <param name="results">要输出到的 <see cref="T:System.Xml.XmlWriter" />。  
  
如果样式表包含 <c>xsl:output</c> 元素，则应使用由 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性返回的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象来创建 <see cref="T:System.Xml.XmlWriter" />。 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 的输出设置是正确的。</param>
        <summary>使用 URI 指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.Xml.XmlWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用 <xref:System.Xml.XmlUrlResolver> 没有用户凭据的默认值来解析输入文档和 `document()` 在样式表中找到的任何 XSLT 函数的实例。 如果这些资源中的任何一个需要身份验证的网络资源，请使用 <xref:System.Xml.XmlResolver> 以作为其参数之一的重载，并使用 <xref:System.Xml.XmlResolver> 所需的凭据指定。  
  
 使用 <xref:System.Xml.XmlReader> 带有默认设置的来加载输入文档。 在上禁用 DTD 处理 <xref:System.Xml.XmlReader> 。 如果需要 DTD 处理，请创建一个 <xref:System.Xml.XmlReader> 启用了此功能的，并将其传递给 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法。  
  
 此方法不支持 `xsl:strip-space` 元素。 如果已编译的样式表包含 `xsl:strip-space` 元素，则必须使用 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 重载，该重载采用 <xref:System.Xml.XmlReader> 作为输入参数。  
  
   
  
## Examples  
 下面的示例执行 XSLT 转换并输出到 <xref:System.Xml.XmlWriter> 对象。  
  
 [!code-csharp[XslCompiledTransform.Transform#2](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#2)]
 [!code-vb[XslCompiledTransform.Transform#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inputUri" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="inputUri" /> 值包含无法找到的文件名或目录。</exception>
        <exception cref="T:System.Net.WebException">无法解析 <paramref name="inputUri" /> 值。  
  
- 或 - 
处理该请求时出错。</exception>
        <exception cref="T:System.UriFormatException"><paramref name="inputUri" /> 不是有效的 URI。</exception>
        <exception cref="T:System.Xml.XmlException">加载输入文档时出现分析错误。</exception>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">包含输入文档的 <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="results">要输出到的 <see cref="T:System.Xml.XmlWriter" />。  
  
如果样式表包含 <c>xsl:output</c> 元素，则应使用由 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性返回的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象来创建 <see cref="T:System.Xml.XmlWriter" />。 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 的输出设置是正确的。</param>
        <summary>使用 <see cref="T:System.Xml.XmlReader" /> 对象指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.Xml.XmlWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果启用了 XSLT `document()` 函数，则使用 <xref:System.Xml.XmlUrlResolver> 不带用户凭据的进行解析。 如果外部资源位于要求身份验证的网络资源上，则使用重载，该重载采用 <xref:System.Xml.XmlResolver> 作为其参数之一的重载，并使用 <xref:System.Xml.XmlResolver> 所需的凭据指定。  
  
   
  
## Examples  
 下面的示例将转换 books.xml 文件中的第一本书。  
  
 [!code-csharp[XslCompiledTransform.Transform#7](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#7)]
 [!code-vb[XslCompiledTransform.Transform#7](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.XmlWriter results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, results)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 Microsoft .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="results">要输出到的 <see cref="T:System.Xml.XmlWriter" />。  
  
如果样式表包含 <c>xsl:output</c> 元素，则应使用由 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性返回的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象来创建 <see cref="T:System.Xml.XmlWriter" />。 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 的输出设置是正确的。</param>
        <summary>使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.Xml.XmlWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果启用了 XSLT `document()` 函数，则使用 <xref:System.Xml.XmlUrlResolver> 不带用户凭据的进行解析。 如果外部资源位于要求身份验证的网络资源上，则使用重载，该重载采用 <xref:System.Xml.XmlResolver> 作为其参数之一的重载，并使用 <xref:System.Xml.XmlResolver> 所需的凭据指定。  
  
 此方法不支持 `xsl:strip-space` 元素。 如果已编译的样式表包含 `xsl:strip-space` 元素，则必须使用 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 重载，该重载采用 <xref:System.Xml.XmlReader> 作为输入参数。  
  
 <xref:System.Xml.XPath.IXPathNavigable> 接口在 <xref:System.Xml.XmlNode> 和 <xref:System.Xml.XPath.XPathDocument> 类中实现。 这两个类表示 XML 数据的内存中缓存。  
  
-   <xref:System.Xml.XmlNode> 类基于 W3C 文档对象模型 (DOM) 并具有编辑功能。  
  
-   <xref:System.Xml.XPath.XPathDocument> 类是基于 XPath 数据模型的只读数据存储。 <xref:System.Xml.XPath.XPathDocument> 是 XSLT 处理建议使用的类。 与 <xref:System.Xml.XmlNode> 类相比，此类的性能更强。  
  
 转换将应用于整个文档。 换句话说，如果你传入文档根节点以外的一个节点，并不能防止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建一个仅包含节点片段的对象，并将该对象传递给 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法。 有关详细信息，请参阅[如何：转换节点片段](/dotnet/standard/data/xml/how-to-transform-a-node-fragment)。  
  
   
  
## Examples  
 下面的示例执行 XSLT 转换并输出到 <xref:System.Xml.XmlWriter> 对象。  
  
 [!code-csharp[XslCompiledTransform.Transform#5](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#5)]
 [!code-vb[XslCompiledTransform.Transform#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList? arguments, System.IO.Stream results);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, arguments, results)" />
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="inputUri">输入文档的 URI。</param>
        <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。 此值可为 <see langword="null" />。</param>
        <param name="results">要输出到的流。</param>
        <summary>使用 URI 指定的输入文档执行转换，然后将结果输出到流。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用 <xref:System.Xml.XmlUrlResolver> 没有用户凭据的默认值来解析输入文档和 `document()` 在样式表中找到的任何 XSLT 函数的实例。 如果这些资源中的任何一个需要身份验证的网络资源，请使用 <xref:System.Xml.XmlResolver> 以作为其参数之一的重载，并使用 <xref:System.Xml.XmlResolver> 所需的凭据指定。  
  
 使用 <xref:System.Xml.XmlReader> 带有默认设置的来加载输入文档。 在上禁用 DTD 处理 <xref:System.Xml.XmlReader> 。 如果需要 DTD 处理，请创建一个 <xref:System.Xml.XmlReader> 启用了此功能的，并将其传递给 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inputUri" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="inputUri" /> 值包含无法找到的文件名或目录。</exception>
        <exception cref="T:System.Net.WebException">无法解析 <paramref name="inputUri" /> 值。  
  
- 或 - 
处理请求时发生错误</exception>
        <exception cref="T:System.UriFormatException"><paramref name="inputUri" /> 不是有效的 URI。</exception>
        <exception cref="T:System.Xml.XmlException">加载输入文档时出现分析错误。</exception>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList? arguments, System.IO.TextWriter results);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, arguments, results)" />
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">输入文档的 URI。</param>
        <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。 此值可为 <see langword="null" />。</param>
        <param name="results">要输出到的 <see cref="T:System.IO.TextWriter" />。</param>
        <summary>使用 URI 指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.IO.TextWriter" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用 <xref:System.Xml.XmlUrlResolver> 没有用户凭据的默认值来解析输入文档和 `document()` 在样式表中找到的任何 XSLT 函数的实例。 如果这些资源中的任何一个需要身份验证的网络资源，请使用 <xref:System.Xml.XmlResolver> 以作为其参数之一的重载，并使用 <xref:System.Xml.XmlResolver> 所需的凭据指定。  
  
 使用 <xref:System.Xml.XmlReader> 带有默认设置的来加载输入文档。 在上禁用 DTD 处理 <xref:System.Xml.XmlReader> 。 如果需要 DTD 处理，请创建一个 <xref:System.Xml.XmlReader> 启用了此功能的，并将其传递给 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法。  
  
   
  
## Examples  
 下面的示例执行 XSLT 转换并输出一个字符串。  
  
 [!code-csharp[XslCompiledTransform.Transform#3](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#3)]
 [!code-vb[XslCompiledTransform.Transform#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inputUri" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="inputUri" /> 值包含无法找到的文件名或目录。</exception>
        <exception cref="T:System.Net.WebException">无法解析 <paramref name="inputUri" /> 值。  
  
- 或 - 
处理请求时发生错误</exception>
        <exception cref="T:System.UriFormatException"><paramref name="inputUri" /> 不是有效的 URI。</exception>
        <exception cref="T:System.Xml.XmlException">加载输入文档时出现分析错误。</exception>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList? arguments, System.Xml.XmlWriter results);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(string inputUri, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (inputUri As String, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::String ^ inputUri, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : string * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (inputUri, arguments, results)" />
      <MemberSignature Language="C#" Value="public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="inputUri">输入文档的 URI。</param>
        <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。 此值可为 <see langword="null" />。</param>
        <param name="results">要输出到的 <see cref="T:System.Xml.XmlWriter" />。  
  
如果样式表包含 <c>xsl:output</c> 元素，则应使用由 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性返回的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象来创建 <see cref="T:System.Xml.XmlWriter" />。 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 的输出设置是正确的。</param>
        <summary>使用 URI 指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法使用 <xref:System.Xml.XmlUrlResolver> 没有用户凭据的默认值来解析输入文档和 `document()` 在样式表中找到的任何 XSLT 函数的实例。 如果这些资源中的任何一个需要身份验证的网络资源，请使用 <xref:System.Xml.XmlResolver> 以作为其参数之一的重载，并使用 <xref:System.Xml.XmlResolver> 所需的凭据指定。  
  
 使用 <xref:System.Xml.XmlReader> 带有默认设置的来加载输入文档。 在上禁用 DTD 处理 <xref:System.Xml.XmlReader> 。 如果需要 DTD 处理，请创建一个 <xref:System.Xml.XmlReader> 启用了此功能的，并将其传递给 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法。  
  
   
  
## Examples  
 下面的示例使用 <xref:System.Xml.Xsl.XsltArgumentList> 对象创建一个表示当前日期和时间的参数。  
  
 [!code-csharp[XsltArgumentList.AddParam#1](~/samples/snippets/csharp/VS_Snippets_Data/XsltArgumentList.AddParam/CS/addparam.cs#1)]
 [!code-vb[XsltArgumentList.AddParam#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XsltArgumentList.AddParam/VB/addparam.vb#1)]  
  
 该示例使用以下两个数据文件作为输入。  
  
 order.xml  
  
 [!code-xml[XsltArgumentList.AddParam#2](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xml#2)]  
  
 order .xsl  
  
 [!code-xml[XsltArgumentList.AddParam#3](~/samples/snippets/xml/VS_Snippets_Data/XsltArgumentList.AddParam/XML/order.xsl#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="inputUri" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="inputtUri" /> 值包含无法找到的文件名或目录。</exception>
        <exception cref="T:System.Net.WebException">无法解析 <paramref name="inputUri" /> 值。  
  
- 或 - 
处理该请求时出错。</exception>
        <exception cref="T:System.UriFormatException"><paramref name="inputUri" /> 不是有效的 URI。</exception>
        <exception cref="T:System.Xml.XmlException">加载输入文档时出现分析错误。</exception>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList? arguments, System.IO.Stream results);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">包含输入文档的 <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。 此值可为 <see langword="null" />。</param>
        <param name="results">要输出到的流。</param>
        <summary>使用 <see cref="T:System.Xml.XmlReader" /> 对象指定的输入文档执行转换，然后将结果输出到流。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果样式表包含 XSLT `document()` 函数，则使用 <xref:System.Xml.XmlUrlResolver> 不带用户凭据的进行解析。 如果外部资源位于要求身份验证的网络资源上，则使用重载，该重载采用 <xref:System.Xml.XmlResolver> 作为其参数之一的重载，并使用 <xref:System.Xml.XmlResolver> 所需的凭据指定。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList? arguments, System.IO.TextWriter results);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">包含输入文档的 <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。 此值可为 <see langword="null" />。</param>
        <param name="results">要输出到的 <see cref="T:System.IO.TextWriter" />。</param>
        <summary>使用 <see cref="T:System.Xml.XmlReader" /> 对象指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果样式表包含 XSLT `document()` 函数，则使用 <xref:System.Xml.XmlUrlResolver> 不带用户凭据的进行解析。 如果外部资源位于要求身份验证的网络资源上，则使用重载，该重载采用 <xref:System.Xml.XmlResolver> 作为其参数之一的重载，并使用 <xref:System.Xml.XmlResolver> 所需的凭据指定。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList? arguments, System.Xml.XmlWriter results);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">包含输入文档的 <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。 此值可为 <see langword="null" />。</param>
        <param name="results">要输出到的 <see cref="T:System.Xml.XmlWriter" />。  
  
如果样式表包含 <c>xsl:output</c> 元素，则应使用由 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性返回的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象来创建 <see cref="T:System.Xml.XmlWriter" />。 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 的输出设置是正确的。</param>
        <summary>使用 <see cref="T:System.Xml.XmlReader" /> 对象指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果样式表包含 XSLT `document()` 函数，则使用 <xref:System.Xml.XmlUrlResolver> 不带用户凭据的进行解析。 如果外部资源位于要求身份验证的网络资源上，则使用重载，该重载采用 <xref:System.Xml.XmlResolver> 作为其参数之一的重载，并使用 <xref:System.Xml.XmlResolver> 所需的凭据指定。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList? arguments, System.IO.Stream results);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.Stream results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::Stream ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.Stream -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 Microsoft .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。 此值可为 <see langword="null" />。</param>
        <param name="results">要输出到的流。</param>
        <summary>使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象指定的输入文档执行转换，然后将结果输出到流。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果启用了 XSLT `document()` 函数，则使用 <xref:System.Xml.XmlUrlResolver> 不带用户凭据的进行解析。 如果外部资源位于要求身份验证的网络资源上，则使用重载，该重载采用 <xref:System.Xml.XmlResolver> 作为其参数之一的重载，并使用 <xref:System.Xml.XmlResolver> 所需的凭据指定。  
  
 此方法不支持 `xsl:strip-space` 元素。 如果已编译的样式表包含 `xsl:strip-space` 元素，则必须使用 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 重载，该重载采用 <xref:System.Xml.XmlReader> 作为输入参数。  
  
 <xref:System.Xml.XPath.IXPathNavigable> 接口在 <xref:System.Xml.XmlNode> 和 <xref:System.Xml.XPath.XPathDocument> 类中实现。 这两个类表示 XML 数据的内存中缓存。  
  
-   <xref:System.Xml.XmlNode> 类基于 W3C 文档对象模型 (DOM) 并具有编辑功能。  
  
-   <xref:System.Xml.XPath.XPathDocument> 类是基于 XPath 数据模型的只读数据存储。 <xref:System.Xml.XPath.XPathDocument> 是 XSLT 处理建议使用的类。 与 <xref:System.Xml.XmlNode> 类相比，此类的性能更强。  
  
 转换将应用于整个文档。 换句话说，如果你传入文档根节点以外的一个节点，并不能防止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建一个仅包含节点片段的对象，并将该对象传递给 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法。 有关详细信息，请参阅[如何：转换节点片段](/dotnet/standard/data/xml/how-to-transform-a-node-fragment)。  
  
   
  
## Examples  
 下面的示例执行 XSLT 转换并输出到 <xref:System.IO.FileStream> 。  
  
 [!code-csharp[XslCompiledTransform.Transform#6](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#6)]
 [!code-vb[XslCompiledTransform.Transform#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList? arguments, System.IO.TextWriter results);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.IO.TextWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::IO::TextWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.IO.TextWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 Microsoft .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。 此值可为 <see langword="null" />。</param>
        <param name="results">要输出到的 <see cref="T:System.IO.TextWriter" />。</param>
        <summary>使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.IO.TextWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果启用了 XSLT `document()` 函数，则使用 <xref:System.Xml.XmlUrlResolver> 不带用户凭据的进行解析。 如果外部资源位于要求身份验证的网络资源上，则使用重载，该重载采用 <xref:System.Xml.XmlResolver> 作为其参数之一的重载，并使用 <xref:System.Xml.XmlResolver> 所需的凭据指定。  
  
 此方法不支持 `xsl:strip-space` 元素。 如果已编译的样式表包含 `xsl:strip-space` 元素，则必须使用 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 重载，该重载采用 <xref:System.Xml.XmlReader> 作为输入参数。  
  
 <xref:System.Xml.XPath.IXPathNavigable> 接口在 <xref:System.Xml.XmlNode> 和 <xref:System.Xml.XPath.XPathDocument> 类中实现。 这两个类表示 XML 数据的内存中缓存。  
  
-   <xref:System.Xml.XmlNode> 类基于 W3C 文档对象模型 (DOM) 并具有编辑功能。  
  
-   <xref:System.Xml.XPath.XPathDocument> 类是基于 XPath 数据模型的只读数据存储。 <xref:System.Xml.XPath.XPathDocument> 是 XSLT 处理建议使用的类。 与 <xref:System.Xml.XmlNode> 类相比，此类的性能更强。  
  
 转换将应用于整个文档。 换句话说，如果你传入文档根节点以外的一个节点，并不能防止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建一个仅包含节点片段的对象，并将该对象传递给 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法。 有关详细信息，请参阅[如何：转换节点片段](/dotnet/standard/data/xml/how-to-transform-a-node-fragment)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList? arguments, System.Xml.XmlWriter results);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results)" />
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="input">一个实现 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 接口的对象。 在 Microsoft .NET Framework 中，这可以是 <see cref="T:System.Xml.XmlNode" />（一般为 <see cref="T:System.Xml.XmlDocument" />），或者是包含要转换的数据的 <see cref="T:System.Xml.XPath.XPathDocument" />。</param>
        <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。 此值可为 <see langword="null" />。</param>
        <param name="results">要输出到的 <see cref="T:System.Xml.XmlWriter" />。  
  
如果样式表包含 <c>xsl:output</c> 元素，则应使用由 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性返回的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象来创建 <see cref="T:System.Xml.XmlWriter" />。 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 的输出设置是正确的。</param>
        <summary>使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果启用了 XSLT `document()` 函数，则使用 <xref:System.Xml.XmlUrlResolver> 不带用户凭据的进行解析。 如果外部资源位于要求身份验证的网络资源上，则使用重载，该重载采用 <xref:System.Xml.XmlResolver> 作为其参数之一的重载，并使用 <xref:System.Xml.XmlResolver> 所需的凭据指定。  
  
 此方法不支持 `xsl:strip-space` 元素。 如果已编译的样式表包含 `xsl:strip-space` 元素，则必须使用 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 重载，该重载采用 <xref:System.Xml.XmlReader> 作为输入参数。  
  
 <xref:System.Xml.XPath.IXPathNavigable> 接口在 <xref:System.Xml.XmlNode> 和 <xref:System.Xml.XPath.XPathDocument> 类中实现。 这两个类表示 XML 数据的内存中缓存。  
  
-   <xref:System.Xml.XmlNode> 类基于 W3C 文档对象模型 (DOM) 并具有编辑功能。  
  
-   <xref:System.Xml.XPath.XPathDocument> 类是基于 XPath 数据模型的只读数据存储。 <xref:System.Xml.XPath.XPathDocument> 是 XSLT 处理建议使用的类。 与 <xref:System.Xml.XmlNode> 类相比，此类的性能更强。  
  
 转换将应用于整个文档。 换句话说，如果你传入文档根节点以外的一个节点，并不能防止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建一个仅包含节点片段的对象，并将该对象传递给 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> 方法。 有关详细信息，请参阅[如何：转换节点片段](/dotnet/standard/data/xml/how-to-transform-a-node-fragment)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList? arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver? documentResolver);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XmlReader input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results, class System.Xml.XmlResolver documentResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As XmlReader, arguments As XsltArgumentList, results As XmlWriter, documentResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XmlReader ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results, System::Xml::XmlResolver ^ documentResolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XmlReader * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results, documentResolver)" />
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XmlReader" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
        <Parameter Name="documentResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">包含输入文档的 <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />，包含用作转换输入的命名空间限定的参数。 此值可为 <see langword="null" />。</param>
        <param name="results">要输出到的 <see cref="T:System.Xml.XmlWriter" />。  
  
如果样式表包含 <c>xsl:output</c> 元素，则应使用由 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性返回的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象来创建 <see cref="T:System.Xml.XmlWriter" />。 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 的输出设置是正确的。</param>
        <param name="documentResolver">用于解析 XSLT <c>document()</c> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <c>document()</c> 函数。</param>
        <summary>使用 <see cref="T:System.Xml.XmlReader" /> 对象指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数，而 XmlResolver 解析 XSLT <c>document()</c> 函数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 下面的示例使用 <xref:System.Xml.XmlSecureResolver> 解析 XSLT `document()` 函数。  
  
 [!code-csharp[XslCompiledTransform.Transform#4](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Transform/CS/Xslt_Transform_v2.cs#4)]
 [!code-vb[XslCompiledTransform.Transform#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Transform/VB/Xslt_Transform_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="input" /> 或 <paramref name="results" /> 值为 <see langword="null" />。</exception>
        <exception cref="T:System.Xml.Xsl.XsltException">执行 XSLT 转换时出错。</exception>
        <related type="Article" href="/dotnet/standard/data/xml/using-the-xslcompiledtransform-class">使用 XslCompiledTransform 类</related>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList? arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver? documentResolver);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Transform(class System.Xml.XPath.IXPathNavigable input, class System.Xml.Xsl.XsltArgumentList arguments, class System.Xml.XmlWriter results, class System.Xml.XmlResolver documentResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Transform (input As IXPathNavigable, arguments As XsltArgumentList, results As XmlWriter, documentResolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Transform(System::Xml::XPath::IXPathNavigable ^ input, System::Xml::Xsl::XsltArgumentList ^ arguments, System::Xml::XmlWriter ^ results, System::Xml::XmlResolver ^ documentResolver);" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Xml.XPath.IXPathNavigable * System.Xml.Xsl.XsltArgumentList * System.Xml.XmlWriter * System.Xml.XmlResolver -&gt; unit" Usage="xslCompiledTransform.Transform (input, arguments, results, documentResolver)" />
      <MemberSignature Language="C#" Value="public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Xml.XPath.IXPathNavigable" />
        <Parameter Name="arguments" Type="System.Xml.Xsl.XsltArgumentList" />
        <Parameter Name="results" Type="System.Xml.XmlWriter" />
        <Parameter Name="documentResolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="input">由 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象指定的要转换的文档。</param>
        <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" /> 形式的参数列表。</param>
        <param name="results">要输出到的 <see cref="T:System.Xml.XmlWriter" />。  
  
如果样式表包含 <see langword="xsl:output" /> 元素，则应使用由 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> 属性返回的 <see cref="T:System.Xml.XmlWriterSettings" /> 对象来创建 <see cref="T:System.Xml.XmlWriter" />。 这样可以确保 <see cref="T:System.Xml.XmlWriter" /> 的输出设置是正确的。</param>
        <param name="documentResolver">用于解析 XSLT <see langword="document()" /> 函数的 <see cref="T:System.Xml.XmlResolver" />。 如果为 <see langword="null" />，则不解析 <see langword="document()" /> 函数。</param>
        <summary>使用 <see cref="T:System.Xml.XPath.IXPathNavigable" /> 对象指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.Xml.XmlWriter" />。 <see cref="T:System.Xml.Xsl.XsltArgumentList" /> 提供附加的运行时参数，而 <see cref="T:System.Xml.XmlResolver" /> 解析 XSLT <see langword="document()" /> 函数。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
