<Type Name="OrderablePartitioner&lt;TSource&gt;" FullName="System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="80630bd4a6369217240559d71f5d1f464625f6b8" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83898060" /></Metadata><TypeSignature Language="C#" Value="public abstract class OrderablePartitioner&lt;TSource&gt; : System.Collections.Concurrent.Partitioner&lt;TSource&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit OrderablePartitioner`1&lt;TSource&gt; extends System.Collections.Concurrent.Partitioner`1&lt;!TSource&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Concurrent.OrderablePartitioner`1" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class OrderablePartitioner(Of TSource)&#xA;Inherits Partitioner(Of TSource)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TSource&gt;&#xA;public ref class OrderablePartitioner abstract : System::Collections::Concurrent::Partitioner&lt;TSource&gt;" />
  <TypeSignature Language="F#" Value="type OrderablePartitioner&lt;'Source&gt; = class&#xA;    inherit Partitioner&lt;'Source&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Concurrent</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.14.0</AssemblyVersion>
    <AssemblyVersion>4.0.15.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Collections.Concurrent" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Collections.Concurrent" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <TypeParameters>
    <TypeParameter Name="TSource" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Collections.Concurrent.Partitioner&lt;TSource&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="TSource">TSource</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TSource"><span data-ttu-id="89af5-101">集合中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="89af5-101">Type of the elements in the collection.</span></span></typeparam>
    <summary><span data-ttu-id="89af5-102">表示将可排序数据源拆分为多个分区的特定方式。</span><span class="sxs-lookup"><span data-stu-id="89af5-102">Represents a particular manner of splitting an orderable data source into multiple partitions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89af5-103">派生类的实现负责以任何适当的方式为元素排序到键值对。</span><span class="sxs-lookup"><span data-stu-id="89af5-103">The implementation of the derived class is responsible for ordering the elements into key-value pairs in whatever manner is appropriate.</span></span> <span data-ttu-id="89af5-104">有关详细信息，请参阅 [PLINQ 和 TPL 的自定义分区程序](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl)。</span><span class="sxs-lookup"><span data-stu-id="89af5-104">For more information, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="89af5-105">下面的示例演示如何实现一次返回一个元素的可排序分区程序：</span><span class="sxs-lookup"><span data-stu-id="89af5-105">The following example shows how to implement an orderable partitioner that returns one element at a time:</span></span>  
  
 [!code-csharp[System.Collections.Concurrent.OrderablePartitioner#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.collections.concurrent.orderablepartitioner/cs/orderablepartitioner.cs#1)]
 [!code-vb[System.Collections.Concurrent.OrderablePartitioner#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.collections.concurrent.orderablepartitioner/vb/orderablepartitioner.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="89af5-106"><see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 的所有公共成员都是线程安全的，并且可以同时从多个线程调用。</span><span class="sxs-lookup"><span data-stu-id="89af5-106">All public members of <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> are thread-safe and may be called from multiple threads concurrently.</span></span></threadsafe>
    <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="89af5-107">如何：加快小型循环体的速度</span><span class="sxs-lookup"><span data-stu-id="89af5-107">How to: Speed Up Small Loop Bodies</span></span></related>
    <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-dynamic-partitions"><span data-ttu-id="89af5-108">如何：实现动态分区</span><span class="sxs-lookup"><span data-stu-id="89af5-108">How to: Implement Dynamic Partitions</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected OrderablePartitioner (bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (keysOrderedInEachPartition As Boolean, keysOrderedAcrossPartitions As Boolean, keysNormalized As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; OrderablePartitioner(bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized);" />
      <MemberSignature Language="F#" Value="new System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; : bool * bool * bool -&gt; System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt;" Usage="new System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt; (keysOrderedInEachPartition, keysOrderedAcrossPartitions, keysNormalized)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keysOrderedInEachPartition" Type="System.Boolean" />
        <Parameter Name="keysOrderedAcrossPartitions" Type="System.Boolean" />
        <Parameter Name="keysNormalized" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="keysOrderedInEachPartition"><span data-ttu-id="89af5-109">指示是否按键增加的顺序生成每个分区中的元素。</span><span class="sxs-lookup"><span data-stu-id="89af5-109">Indicates whether the elements in each partition are yielded in the order of increasing keys.</span></span></param>
        <param name="keysOrderedAcrossPartitions"><span data-ttu-id="89af5-110">指示前一分区中的元素是否始终排在后一分区中的元素之前。</span><span class="sxs-lookup"><span data-stu-id="89af5-110">Indicates whether elements in an earlier partition always come before elements in a later partition.</span></span> <span data-ttu-id="89af5-111">如果为 true，则分区 0 中的每个元素的顺序键比分区 1 中的任何元素都要小，分区 1 中的每个元素的顺序键比分区 2 中的任何元素都要小，依次类推。</span><span class="sxs-lookup"><span data-stu-id="89af5-111">If true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.</span></span></param>
        <param name="keysNormalized"><span data-ttu-id="89af5-112">指示是否规范化键。</span><span class="sxs-lookup"><span data-stu-id="89af5-112">Indicates whether keys are normalized.</span></span> <span data-ttu-id="89af5-113">如果为 true，所有顺序键均为范围 [0 .</span><span class="sxs-lookup"><span data-stu-id="89af5-113">If true, all order keys are distinct integers in the range [0 ..</span></span> <span data-ttu-id="89af5-114">numberOfElements-1] 中的不同整数。</span><span class="sxs-lookup"><span data-stu-id="89af5-114">numberOfElements-1].</span></span> <span data-ttu-id="89af5-115">如果为 false，顺序键仍必须互不相同，但只考虑其相对顺序，而不考虑其绝对值。</span><span class="sxs-lookup"><span data-stu-id="89af5-115">If false, order keys must still be distinct, but only their relative order is considered, not their absolute values.</span></span></param>
        <summary><span data-ttu-id="89af5-116">从派生类中的构造函数进行调用以便使用索引键上指定的约束初始化 <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> 类。</span><span class="sxs-lookup"><span data-stu-id="89af5-116">Called from constructors in derived classes to initialize the <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> class with the specified constraints on the index keys.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89af5-117">有关详细信息，请参阅 [PLINQ 和 TPL 的自定义分区程序](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl)。</span><span class="sxs-lookup"><span data-stu-id="89af5-117">For more information, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/96153688-9a01-47c4-8430-909cee9a2887"><span data-ttu-id="89af5-118">PLINQ 和 TPL 的自定义分区程序</span><span class="sxs-lookup"><span data-stu-id="89af5-118">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="89af5-119">如何：加快小型循环体的速度</span><span class="sxs-lookup"><span data-stu-id="89af5-119">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning"><span data-ttu-id="89af5-120">如何：实现具有静态分区数的分区程序</span><span class="sxs-lookup"><span data-stu-id="89af5-120">How to: Implement a Partitioner With a Static Number of Partitions</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-dynamic-partitions"><span data-ttu-id="89af5-121">如何：实现动态分区</span><span class="sxs-lookup"><span data-stu-id="89af5-121">How to: Implement Dynamic Partitions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetDynamicPartitions">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IEnumerable&lt;TSource&gt; GetDynamicPartitions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;!TSource&gt; GetDynamicPartitions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetDynamicPartitions () As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ GetDynamicPartitions();" />
      <MemberSignature Language="F#" Value="override this.GetDynamicPartitions : unit -&gt; seq&lt;'Source&gt;" Usage="orderablePartitioner.GetDynamicPartitions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="89af5-122">创建一个可将基础集合分区成可变数目的分区的对象。</span><span class="sxs-lookup"><span data-stu-id="89af5-122">Creates an object that can partition the underlying collection into a variable number of partitions.</span></span></summary>
        <returns><span data-ttu-id="89af5-123">一个可针对基础数据源创建分区的对象。</span><span class="sxs-lookup"><span data-stu-id="89af5-123">An object that can create partitions over the underlying data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89af5-124">返回的对象实现 <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType> 接口。</span><span class="sxs-lookup"><span data-stu-id="89af5-124">The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType> interface.</span></span> <span data-ttu-id="89af5-125">对对象调用 <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> 会在序列上创建另一个分区。</span><span class="sxs-lookup"><span data-stu-id="89af5-125">Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.</span></span>  
  
 <span data-ttu-id="89af5-126">默认实现提供与 <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> 相同的行为，只不过返回的分区集不提供元素的键。</span><span class="sxs-lookup"><span data-stu-id="89af5-126">The default implementation provides the same behavior as <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> except that the returned set of partitions does not provide the keys for the elements.</span></span>  
  
 <span data-ttu-id="89af5-127">仅当 <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> 属性返回 true 时，才支持 <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetDynamicPartitions%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="89af5-127">The <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true.</span></span>  
  
 <span data-ttu-id="89af5-128">有关详细信息，请参阅 [PLINQ 和 TPL 的自定义分区程序](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl)。</span><span class="sxs-lookup"><span data-stu-id="89af5-128">For more information, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="89af5-129">该基类不支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="89af5-129">Dynamic partitioning is not supported by the base class.</span></span> <span data-ttu-id="89af5-130">它必须在派生类中实现。</span><span class="sxs-lookup"><span data-stu-id="89af5-130">It must be implemented in derived classes.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/96153688-9a01-47c4-8430-909cee9a2887"><span data-ttu-id="89af5-131">PLINQ 和 TPL 的自定义分区程序</span><span class="sxs-lookup"><span data-stu-id="89af5-131">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="89af5-132">如何：加快小型循环体的速度</span><span class="sxs-lookup"><span data-stu-id="89af5-132">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning"><span data-ttu-id="89af5-133">如何：实现具有静态分区数的分区程序</span><span class="sxs-lookup"><span data-stu-id="89af5-133">How to: Implement a Partitioner With a Static Number of Partitions</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-dynamic-partitions"><span data-ttu-id="89af5-134">如何：实现动态分区</span><span class="sxs-lookup"><span data-stu-id="89af5-134">How to: Implement Dynamic Partitions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetOrderableDynamicPartitions">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;long,TSource&gt;&gt; GetOrderableDynamicPartitions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;int64, !TSource&gt;&gt; GetOrderableDynamicPartitions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrderableDynamicPartitions () As IEnumerable(Of KeyValuePair(Of Long, TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;long, TSource&gt;&gt; ^ GetOrderableDynamicPartitions();" />
      <MemberSignature Language="F#" Value="abstract member GetOrderableDynamicPartitions : unit -&gt; seq&lt;System.Collections.Generic.KeyValuePair&lt;int64, 'Source&gt;&gt;&#xA;override this.GetOrderableDynamicPartitions : unit -&gt; seq&lt;System.Collections.Generic.KeyValuePair&lt;int64, 'Source&gt;&gt;" Usage="orderablePartitioner.GetOrderableDynamicPartitions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.Int64,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="89af5-135">创建一个可将基础集合分区成可变数目的分区的对象。</span><span class="sxs-lookup"><span data-stu-id="89af5-135">Creates an object that can partition the underlying collection into a variable number of partitions.</span></span></summary>
        <returns><span data-ttu-id="89af5-136">一个可针对基础数据源创建分区的对象。</span><span class="sxs-lookup"><span data-stu-id="89af5-136">An object that can create partitions over the underlying data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89af5-137">返回的对象实现 <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType> 接口。</span><span class="sxs-lookup"><span data-stu-id="89af5-137">The returned object implements the <xref:System.Collections.Generic.IEnumerable%601?displayProperty=nameWithType> interface.</span></span> <span data-ttu-id="89af5-138">对对象调用 <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> 会在序列上创建另一个分区。</span><span class="sxs-lookup"><span data-stu-id="89af5-138">Calling <xref:System.Collections.Generic.IEnumerable%601.GetEnumerator%2A> on the object creates another partition over the sequence.</span></span>  
  
 <span data-ttu-id="89af5-139">每个分区都表示为键/值对的枚举器。</span><span class="sxs-lookup"><span data-stu-id="89af5-139">Each partition is represented as an enumerator over key-value pairs.</span></span> <span data-ttu-id="89af5-140">对中的值是元素本身，键是一个整数，它确定此元素相对于其他元素的相对顺序。</span><span class="sxs-lookup"><span data-stu-id="89af5-140">The value in the pair is the element itself, and the key is an integer which determines the relative ordering of this element against other elements.</span></span>  
  
 <span data-ttu-id="89af5-141">仅当 <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> 属性返回 true 时，才支持 <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="89af5-141">The <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderableDynamicPartitions%2A> method is only supported if the <xref:System.Collections.Concurrent.Partitioner%601.SupportsDynamicPartitions%2A> property returns true.</span></span>  
  
 <span data-ttu-id="89af5-142">有关详细信息，请参阅 [PLINQ 和 TPL 的自定义分区程序](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl)。</span><span class="sxs-lookup"><span data-stu-id="89af5-142">For more information, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="89af5-143">此分区程序不支持动态分区。</span><span class="sxs-lookup"><span data-stu-id="89af5-143">Dynamic partitioning is not supported by this partitioner.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/96153688-9a01-47c4-8430-909cee9a2887"><span data-ttu-id="89af5-144">PLINQ 和 TPL 的自定义分区程序</span><span class="sxs-lookup"><span data-stu-id="89af5-144">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="89af5-145">如何：加快小型循环体的速度</span><span class="sxs-lookup"><span data-stu-id="89af5-145">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning"><span data-ttu-id="89af5-146">如何：实现具有静态分区数的分区程序</span><span class="sxs-lookup"><span data-stu-id="89af5-146">How to: Implement a Partitioner With a Static Number of Partitions</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-dynamic-partitions"><span data-ttu-id="89af5-147">如何：实现动态分区</span><span class="sxs-lookup"><span data-stu-id="89af5-147">How to: Implement Dynamic Partitions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetOrderablePartitions">
      <MemberSignature Language="C#" Value="public abstract System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;long,TSource&gt;&gt;&gt; GetOrderablePartitions (int partitionCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Collections.Generic.IEnumerator`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;int64, !TSource&gt;&gt;&gt; GetOrderablePartitions(int32 partitionCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetOrderablePartitions (partitionCount As Integer) As IList(Of IEnumerator(Of KeyValuePair(Of Long, TSource)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Collections::Generic::IList&lt;System::Collections::Generic::IEnumerator&lt;System::Collections::Generic::KeyValuePair&lt;long, TSource&gt;&gt; ^&gt; ^ GetOrderablePartitions(int partitionCount);" />
      <MemberSignature Language="F#" Value="abstract member GetOrderablePartitions : int -&gt; System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;int64, 'Source&gt;&gt;&gt;" Usage="orderablePartitioner.GetOrderablePartitions partitionCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;System.Collections.Generic.KeyValuePair&lt;System.Int64,TSource&gt;&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="partitionCount"><span data-ttu-id="89af5-148">要创建的分区数。</span><span class="sxs-lookup"><span data-stu-id="89af5-148">The number of partitions to create.</span></span></param>
        <summary><span data-ttu-id="89af5-149">将基础集合分区成指定数目的可排序分区。</span><span class="sxs-lookup"><span data-stu-id="89af5-149">Partitions the underlying collection into the specified number of orderable partitions.</span></span></summary>
        <returns><span data-ttu-id="89af5-150">一个包含 <paramref name="partitionCount" /> 枚举器的列表。</span><span class="sxs-lookup"><span data-stu-id="89af5-150">A list containing <paramref name="partitionCount" /> enumerators.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89af5-151">每个分区都表示为键/值对的枚举器。</span><span class="sxs-lookup"><span data-stu-id="89af5-151">Each partition is represented as an enumerator over key-value pairs.</span></span>  
  
 <span data-ttu-id="89af5-152">该对的值是元素本身，键是一个整数，它确定此元素相对于数据源中的其他元素的相对顺序。</span><span class="sxs-lookup"><span data-stu-id="89af5-152">The value of the pair is the element itself, and the key is an integer which determines the relative ordering of this element against other elements in the data source.</span></span>  
  
 <span data-ttu-id="89af5-153">有关详细信息，请参阅 [PLINQ 和 TPL 的自定义分区程序](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl)。</span><span class="sxs-lookup"><span data-stu-id="89af5-153">For more information, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/96153688-9a01-47c4-8430-909cee9a2887"><span data-ttu-id="89af5-154">PLINQ 和 TPL 的自定义分区程序</span><span class="sxs-lookup"><span data-stu-id="89af5-154">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="89af5-155">如何：加快小型循环体的速度</span><span class="sxs-lookup"><span data-stu-id="89af5-155">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning"><span data-ttu-id="89af5-156">如何：实现具有静态分区数的分区程序</span><span class="sxs-lookup"><span data-stu-id="89af5-156">How to: Implement a Partitioner With a Static Number of Partitions</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-dynamic-partitions"><span data-ttu-id="89af5-157">如何：实现动态分区</span><span class="sxs-lookup"><span data-stu-id="89af5-157">How to: Implement Dynamic Partitions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetPartitions">
      <MemberSignature Language="C#" Value="public override System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;TSource&gt;&gt; GetPartitions (int partitionCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Collections.Generic.IList`1&lt;class System.Collections.Generic.IEnumerator`1&lt;!TSource&gt;&gt; GetPartitions(int32 partitionCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPartitions (partitionCount As Integer) As IList(Of IEnumerator(Of TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Collections::Generic::IList&lt;System::Collections::Generic::IEnumerator&lt;TSource&gt; ^&gt; ^ GetPartitions(int partitionCount);" />
      <MemberSignature Language="F#" Value="override this.GetPartitions : int -&gt; System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;'Source&gt;&gt;" Usage="orderablePartitioner.GetPartitions partitionCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Collections.Generic.IEnumerator&lt;TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="partitionCount"><span data-ttu-id="89af5-158">要创建的分区数。</span><span class="sxs-lookup"><span data-stu-id="89af5-158">The number of partitions to create.</span></span></param>
        <summary><span data-ttu-id="89af5-159">将基础集合分区成给定数目的可排序分区。</span><span class="sxs-lookup"><span data-stu-id="89af5-159">Partitions the underlying collection into the given number of ordered partitions.</span></span></summary>
        <returns><span data-ttu-id="89af5-160">一个包含 <paramref name="partitionCount" /> 枚举器的列表。</span><span class="sxs-lookup"><span data-stu-id="89af5-160">A list containing <paramref name="partitionCount" /> enumerators.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89af5-161">默认实现提供与 <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderablePartitions%2A> 相同的行为，只不过返回的分区集不提供元素的键。</span><span class="sxs-lookup"><span data-stu-id="89af5-161">The default implementation provides the same behavior as <xref:System.Collections.Concurrent.OrderablePartitioner%601.GetOrderablePartitions%2A> except that the returned set of partitions does not provide the keys for the elements.</span></span>  
  
 <span data-ttu-id="89af5-162">有关详细信息，请参阅 [PLINQ 和 TPL 的自定义分区程序](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl)。</span><span class="sxs-lookup"><span data-stu-id="89af5-162">For more information, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/96153688-9a01-47c4-8430-909cee9a2887"><span data-ttu-id="89af5-163">PLINQ 和 TPL 的自定义分区程序</span><span class="sxs-lookup"><span data-stu-id="89af5-163">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="89af5-164">如何：加快小型循环体的速度</span><span class="sxs-lookup"><span data-stu-id="89af5-164">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning"><span data-ttu-id="89af5-165">如何：实现具有静态分区数的分区程序</span><span class="sxs-lookup"><span data-stu-id="89af5-165">How to: Implement a Partitioner With a Static Number of Partitions</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-dynamic-partitions"><span data-ttu-id="89af5-166">如何：实现动态分区</span><span class="sxs-lookup"><span data-stu-id="89af5-166">How to: Implement Dynamic Partitions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="KeysNormalized">
      <MemberSignature Language="C#" Value="public bool KeysNormalized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeysNormalized" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeysNormalized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeysNormalized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.KeysNormalized : bool" Usage="System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt;.KeysNormalized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="89af5-167">获取是否规范化顺序键。</span><span class="sxs-lookup"><span data-stu-id="89af5-167">Gets whether order keys are normalized.</span></span></summary>
        <value><span data-ttu-id="89af5-168">如果密钥已规范化，则为 <see langword="true" />;否则，<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="89af5-168"><see langword="true" /> if the keys are normalized; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89af5-169">如果 <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysNormalized%2A> 返回 true，则所有顺序键都是 [0。</span><span class="sxs-lookup"><span data-stu-id="89af5-169">If <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysNormalized%2A> returns true, all order keys are distinct integers in the range [0 ..</span></span> <span data-ttu-id="89af5-170">numberOfElements-1] 中的不同整数。</span><span class="sxs-lookup"><span data-stu-id="89af5-170">numberOfElements-1].</span></span> <span data-ttu-id="89af5-171">如果该属性返回 false，则顺序键仍必须是唯一的，但仅考虑其相对顺序，而不考虑其绝对值。</span><span class="sxs-lookup"><span data-stu-id="89af5-171">If the property returns false, order keys must still be distinct, but only their relative order is considered, not their absolute values.</span></span>  
  
 <span data-ttu-id="89af5-172">有关详细信息，请参阅 [PLINQ 和 TPL 的自定义分区程序](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl)。</span><span class="sxs-lookup"><span data-stu-id="89af5-172">For more information, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeysOrderedAcrossPartitions">
      <MemberSignature Language="C#" Value="public bool KeysOrderedAcrossPartitions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeysOrderedAcrossPartitions" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeysOrderedAcrossPartitions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeysOrderedAcrossPartitions { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.KeysOrderedAcrossPartitions : bool" Usage="System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt;.KeysOrderedAcrossPartitions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="89af5-173">获取前一分区中的元素是否始终排在后一分区中的元素之前。</span><span class="sxs-lookup"><span data-stu-id="89af5-173">Gets whether elements in an earlier partition always come before elements in a later partition.</span></span></summary>
        <value><span data-ttu-id="89af5-174">如果前面分区中的元素始终位于后面分区中的元素之前，则 <see langword="true" />;否则，<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="89af5-174"><see langword="true" /> if the elements in an earlier partition always come before elements in a later partition; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89af5-175">如果 <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysOrderedAcrossPartitions%2A> 返回 true，则分区0中的每个元素的顺序键比分区1中的任何元素小，分区1中的每个元素的顺序键比分区2中的任何元素更小，依此类推。</span><span class="sxs-lookup"><span data-stu-id="89af5-175">If <xref:System.Collections.Concurrent.OrderablePartitioner%601.KeysOrderedAcrossPartitions%2A> returns true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.</span></span>  
  
 <span data-ttu-id="89af5-176">有关详细信息，请参阅 [PLINQ 和 TPL 的自定义分区程序](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl)。</span><span class="sxs-lookup"><span data-stu-id="89af5-176">For more information, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/96153688-9a01-47c4-8430-909cee9a2887"><span data-ttu-id="89af5-177">PLINQ 和 TPL 的自定义分区程序</span><span class="sxs-lookup"><span data-stu-id="89af5-177">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="89af5-178">如何：加快小型循环体的速度</span><span class="sxs-lookup"><span data-stu-id="89af5-178">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning"><span data-ttu-id="89af5-179">如何：实现具有静态分区数的分区程序</span><span class="sxs-lookup"><span data-stu-id="89af5-179">How to: Implement a Partitioner With a Static Number of Partitions</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-dynamic-partitions"><span data-ttu-id="89af5-180">如何：实现动态分区</span><span class="sxs-lookup"><span data-stu-id="89af5-180">How to: Implement Dynamic Partitions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="KeysOrderedInEachPartition">
      <MemberSignature Language="C#" Value="public bool KeysOrderedInEachPartition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeysOrderedInEachPartition" />
      <MemberSignature Language="DocId" Value="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeysOrderedInEachPartition As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeysOrderedInEachPartition { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.KeysOrderedInEachPartition : bool" Usage="System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt;.KeysOrderedInEachPartition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="89af5-181">获取是否按键增加的顺序生成每个分区中的元素。</span><span class="sxs-lookup"><span data-stu-id="89af5-181">Gets whether elements in each partition are yielded in the order of increasing keys.</span></span></summary>
        <value><span data-ttu-id="89af5-182"><see langword="true" /> 如果每个分区中的元素按递增键的顺序生成，则为; 否则为。否则，<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="89af5-182"><see langword="true" /> if the elements in each partition are yielded in the order of increasing keys; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="89af5-183">有关详细信息，请参阅 [PLINQ 和 TPL 的自定义分区程序](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl)。</span><span class="sxs-lookup"><span data-stu-id="89af5-183">For more information, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/96153688-9a01-47c4-8430-909cee9a2887"><span data-ttu-id="89af5-184">PLINQ 和 TPL 的自定义分区程序</span><span class="sxs-lookup"><span data-stu-id="89af5-184">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="89af5-185">如何：加快小型循环体的速度</span><span class="sxs-lookup"><span data-stu-id="89af5-185">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning"><span data-ttu-id="89af5-186">如何：实现具有静态分区数的分区程序</span><span class="sxs-lookup"><span data-stu-id="89af5-186">How to: Implement a Partitioner With a Static Number of Partitions</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-dynamic-partitions"><span data-ttu-id="89af5-187">如何：实现动态分区</span><span class="sxs-lookup"><span data-stu-id="89af5-187">How to: Implement Dynamic Partitions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
