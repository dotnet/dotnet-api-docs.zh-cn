<Type Name="Partitioner" FullName="System.Collections.Concurrent.Partitioner">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dadb33e8033a8cb18b6d3b3ed31c0d5009c19a88" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="83965567" /></Metadata><TypeSignature Language="C#" Value="public static class Partitioner" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Partitioner extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Concurrent.Partitioner" />
  <TypeSignature Language="VB.NET" Value="Public Class Partitioner" />
  <TypeSignature Language="C++ CLI" Value="public ref class Partitioner abstract sealed" />
  <TypeSignature Language="F#" Value="type Partitioner = class" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Concurrent</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.14.0</AssemblyVersion>
    <AssemblyVersion>4.0.15.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="mscorlib" FromVersion="4.0.0.0" To="System.Collections.Concurrent" ToVersion="0.0.0.0" FrameworkAlternate="dotnet-uwp-10.0" />
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Collections.Concurrent" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="18b81-101">提供针对数组、列表和可枚举项的常见分区策略。</span><span class="sxs-lookup"><span data-stu-id="18b81-101">Provides common partitioning strategies for arrays, lists, and enumerables.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18b81-102">有关详细信息，请参阅 [PLINQ 和 TPL 的自定义分区程序](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl)。</span><span class="sxs-lookup"><span data-stu-id="18b81-102">For more information, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="18b81-103">如何：加快小型循环体的速度</span><span class="sxs-lookup"><span data-stu-id="18b81-103">How to: Speed Up Small Loop Bodies</span></span></related>
    <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning"><span data-ttu-id="18b81-104">如何：实现具有静态分区数的分区程序</span><span class="sxs-lookup"><span data-stu-id="18b81-104">How to: Implement a Partitioner With a Static Number of Partitions</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="18b81-105">创建分区程序。</span><span class="sxs-lookup"><span data-stu-id="18b81-105">Creates a partitioner.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Collections.Concurrent.OrderablePartitioner&lt;Tuple&lt;int,int&gt;&gt; Create (int fromInclusive, int toExclusive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Concurrent.OrderablePartitioner`1&lt;class System.Tuple`2&lt;int32, int32&gt;&gt; Create(int32 fromInclusive, int32 toExclusive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (fromInclusive As Integer, toExclusive As Integer) As OrderablePartitioner(Of Tuple(Of Integer, Integer))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Concurrent::OrderablePartitioner&lt;Tuple&lt;int, int&gt; ^&gt; ^ Create(int fromInclusive, int toExclusive);" />
      <MemberSignature Language="F#" Value="static member Create : int * int -&gt; System.Collections.Concurrent.OrderablePartitioner&lt;int * int&gt;" Usage="System.Collections.Concurrent.Partitioner.Create (fromInclusive, toExclusive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Concurrent.OrderablePartitioner&lt;System.Tuple&lt;System.Int32,System.Int32&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="18b81-106">范围下限（含）。</span><span class="sxs-lookup"><span data-stu-id="18b81-106">The lower, inclusive bound of the range.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="18b81-107">范围上限（不含）。</span><span class="sxs-lookup"><span data-stu-id="18b81-107">The upper, exclusive bound of the range.</span></span></param>
        <summary><span data-ttu-id="18b81-108">创建一个按用户指定的范围划分区块的分区程序。</span><span class="sxs-lookup"><span data-stu-id="18b81-108">Creates a partitioner that chunks the user-specified range.</span></span></summary>
        <returns><span data-ttu-id="18b81-109">一个分区程序。</span><span class="sxs-lookup"><span data-stu-id="18b81-109">A partitioner.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18b81-110">有关详细信息和示例，请参阅[用于 PLINQ 和 TPL 的自定义分区程序](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl)。</span><span class="sxs-lookup"><span data-stu-id="18b81-110">For more information and examples, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="18b81-111"><paramref name="toExclusive" /> 参数小于或等于 <paramref name="fromInclusive" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="18b81-111">The <paramref name="toExclusive" /> argument is less than or equal to the <paramref name="fromInclusive" /> argument.</span></span></exception>
        <related type="Article" href="/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl"><span data-ttu-id="18b81-112">PLINQ 和 TPL 的自定义分区程序</span><span class="sxs-lookup"><span data-stu-id="18b81-112">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="18b81-113">如何：加快小型循环体的速度</span><span class="sxs-lookup"><span data-stu-id="18b81-113">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning"><span data-ttu-id="18b81-114">如何：实现具有静态分区数的分区程序</span><span class="sxs-lookup"><span data-stu-id="18b81-114">How to: Implement a Partitioner With a Static Number of Partitions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Collections.Concurrent.OrderablePartitioner&lt;Tuple&lt;long,long&gt;&gt; Create (long fromInclusive, long toExclusive);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Concurrent.OrderablePartitioner`1&lt;class System.Tuple`2&lt;int64, int64&gt;&gt; Create(int64 fromInclusive, int64 toExclusive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (fromInclusive As Long, toExclusive As Long) As OrderablePartitioner(Of Tuple(Of Long, Long))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Concurrent::OrderablePartitioner&lt;Tuple&lt;long, long&gt; ^&gt; ^ Create(long fromInclusive, long toExclusive);" />
      <MemberSignature Language="F#" Value="static member Create : int64 * int64 -&gt; System.Collections.Concurrent.OrderablePartitioner&lt;int64 * int64&gt;" Usage="System.Collections.Concurrent.Partitioner.Create (fromInclusive, toExclusive)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Concurrent.OrderablePartitioner&lt;System.Tuple&lt;System.Int64,System.Int64&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="18b81-115">范围下限（含）。</span><span class="sxs-lookup"><span data-stu-id="18b81-115">The lower, inclusive bound of the range.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="18b81-116">范围上限（不含）。</span><span class="sxs-lookup"><span data-stu-id="18b81-116">The upper, exclusive bound of the range.</span></span></param>
        <summary><span data-ttu-id="18b81-117">创建一个按用户指定的范围划分区块的分区程序。</span><span class="sxs-lookup"><span data-stu-id="18b81-117">Creates a partitioner that chunks the user-specified range.</span></span></summary>
        <returns><span data-ttu-id="18b81-118">一个分区程序。</span><span class="sxs-lookup"><span data-stu-id="18b81-118">A partitioner.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18b81-119">有关详细信息和示例，请参阅[用于 PLINQ 和 TPL 的自定义分区程序](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl)。</span><span class="sxs-lookup"><span data-stu-id="18b81-119">For more information and examples, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="18b81-120"><paramref name="toExclusive" /> 参数小于或等于 <paramref name="fromInclusive" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="18b81-120">The <paramref name="toExclusive" /> argument is less than or equal to the <paramref name="fromInclusive" /> argument.</span></span></exception>
        <related type="Article" href="/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl"><span data-ttu-id="18b81-121">PLINQ 和 TPL 的自定义分区程序</span><span class="sxs-lookup"><span data-stu-id="18b81-121">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="18b81-122">如何：加快小型循环体的速度</span><span class="sxs-lookup"><span data-stu-id="18b81-122">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning"><span data-ttu-id="18b81-123">如何：实现具有静态分区数的分区程序</span><span class="sxs-lookup"><span data-stu-id="18b81-123">How to: Implement a Partitioner With a Static Number of Partitions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Collections.Concurrent.OrderablePartitioner&lt;Tuple&lt;int,int&gt;&gt; Create (int fromInclusive, int toExclusive, int rangeSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Concurrent.OrderablePartitioner`1&lt;class System.Tuple`2&lt;int32, int32&gt;&gt; Create(int32 fromInclusive, int32 toExclusive, int32 rangeSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (fromInclusive As Integer, toExclusive As Integer, rangeSize As Integer) As OrderablePartitioner(Of Tuple(Of Integer, Integer))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Concurrent::OrderablePartitioner&lt;Tuple&lt;int, int&gt; ^&gt; ^ Create(int fromInclusive, int toExclusive, int rangeSize);" />
      <MemberSignature Language="F#" Value="static member Create : int * int * int -&gt; System.Collections.Concurrent.OrderablePartitioner&lt;int * int&gt;" Usage="System.Collections.Concurrent.Partitioner.Create (fromInclusive, toExclusive, rangeSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Concurrent.OrderablePartitioner&lt;System.Tuple&lt;System.Int32,System.Int32&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int32" />
        <Parameter Name="toExclusive" Type="System.Int32" />
        <Parameter Name="rangeSize" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="18b81-124">范围下限（含）。</span><span class="sxs-lookup"><span data-stu-id="18b81-124">The lower, inclusive bound of the range.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="18b81-125">范围上限（不含）。</span><span class="sxs-lookup"><span data-stu-id="18b81-125">The upper, exclusive bound of the range.</span></span></param>
        <param name="rangeSize"><span data-ttu-id="18b81-126">每个子范围的大小。</span><span class="sxs-lookup"><span data-stu-id="18b81-126">The size of each subrange.</span></span></param>
        <summary><span data-ttu-id="18b81-127">创建一个按用户指定的范围划分区块的分区程序。</span><span class="sxs-lookup"><span data-stu-id="18b81-127">Creates a partitioner that chunks the user-specified range.</span></span></summary>
        <returns><span data-ttu-id="18b81-128">一个分区程序。</span><span class="sxs-lookup"><span data-stu-id="18b81-128">A partitioner.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18b81-129">有关详细信息和示例，请参阅[用于 PLINQ 和 TPL 的自定义分区程序](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl)。</span><span class="sxs-lookup"><span data-stu-id="18b81-129">For more information and examples, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="18b81-130"><paramref name="toExclusive" /> 参数小于或等于 <paramref name="fromInclusive" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="18b81-130">The <paramref name="toExclusive" /> argument is less than or equal to the <paramref name="fromInclusive" /> argument.</span></span>  
  
<span data-ttu-id="18b81-131">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18b81-131">-or-</span></span> 
<span data-ttu-id="18b81-132"><paramref name="rangeSize" /> 参数小于或等于 0。</span><span class="sxs-lookup"><span data-stu-id="18b81-132">The <paramref name="rangeSize" /> argument is less than or equal to 0.</span></span></exception>
        <related type="Article" href="/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl"><span data-ttu-id="18b81-133">PLINQ 和 TPL 的自定义分区程序</span><span class="sxs-lookup"><span data-stu-id="18b81-133">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="18b81-134">如何：加快小型循环体的速度</span><span class="sxs-lookup"><span data-stu-id="18b81-134">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning"><span data-ttu-id="18b81-135">如何：实现具有静态分区数的分区程序</span><span class="sxs-lookup"><span data-stu-id="18b81-135">How to: Implement a Partitioner With a Static Number of Partitions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Collections.Concurrent.OrderablePartitioner&lt;Tuple&lt;long,long&gt;&gt; Create (long fromInclusive, long toExclusive, long rangeSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Concurrent.OrderablePartitioner`1&lt;class System.Tuple`2&lt;int64, int64&gt;&gt; Create(int64 fromInclusive, int64 toExclusive, int64 rangeSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (fromInclusive As Long, toExclusive As Long, rangeSize As Long) As OrderablePartitioner(Of Tuple(Of Long, Long))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Concurrent::OrderablePartitioner&lt;Tuple&lt;long, long&gt; ^&gt; ^ Create(long fromInclusive, long toExclusive, long rangeSize);" />
      <MemberSignature Language="F#" Value="static member Create : int64 * int64 * int64 -&gt; System.Collections.Concurrent.OrderablePartitioner&lt;int64 * int64&gt;" Usage="System.Collections.Concurrent.Partitioner.Create (fromInclusive, toExclusive, rangeSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Concurrent.OrderablePartitioner&lt;System.Tuple&lt;System.Int64,System.Int64&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromInclusive" Type="System.Int64" />
        <Parameter Name="toExclusive" Type="System.Int64" />
        <Parameter Name="rangeSize" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="fromInclusive"><span data-ttu-id="18b81-136">范围下限（含）。</span><span class="sxs-lookup"><span data-stu-id="18b81-136">The lower, inclusive bound of the range.</span></span></param>
        <param name="toExclusive"><span data-ttu-id="18b81-137">范围上限（不含）。</span><span class="sxs-lookup"><span data-stu-id="18b81-137">The upper, exclusive bound of the range.</span></span></param>
        <param name="rangeSize"><span data-ttu-id="18b81-138">每个子范围的大小。</span><span class="sxs-lookup"><span data-stu-id="18b81-138">The size of each subrange.</span></span></param>
        <summary><span data-ttu-id="18b81-139">创建一个按用户指定的范围划分区块的分区程序。</span><span class="sxs-lookup"><span data-stu-id="18b81-139">Creates a partitioner that chunks the user-specified range.</span></span></summary>
        <returns><span data-ttu-id="18b81-140">一个分区程序。</span><span class="sxs-lookup"><span data-stu-id="18b81-140">A partitioner.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18b81-141">有关详细信息和示例，请参阅[用于 PLINQ 和 TPL 的自定义分区程序](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl)。</span><span class="sxs-lookup"><span data-stu-id="18b81-141">For more information and examples, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="18b81-142"><paramref name="toExclusive" /> 参数小于或等于 <paramref name="fromInclusive" /> 参数。</span><span class="sxs-lookup"><span data-stu-id="18b81-142">The <paramref name="toExclusive" /> argument is less than or equal to the <paramref name="fromInclusive" /> argument.</span></span>  
  
<span data-ttu-id="18b81-143">- 或 -</span><span class="sxs-lookup"><span data-stu-id="18b81-143">-or-</span></span> 
<span data-ttu-id="18b81-144"><paramref name="rangeSize" /> 参数小于或等于 0。</span><span class="sxs-lookup"><span data-stu-id="18b81-144">The <paramref name="rangeSize" /> argument is less than or equal to 0.</span></span></exception>
        <related type="Article" href="/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl"><span data-ttu-id="18b81-145">PLINQ 和 TPL 的自定义分区程序</span><span class="sxs-lookup"><span data-stu-id="18b81-145">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="18b81-146">如何：加快小型循环体的速度</span><span class="sxs-lookup"><span data-stu-id="18b81-146">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-a-partitioner-for-static-partitioning"><span data-ttu-id="18b81-147">如何：实现具有静态分区数的分区程序</span><span class="sxs-lookup"><span data-stu-id="18b81-147">How to: Implement a Partitioner With a Static Number of Partitions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Create&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; Create&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; Create&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of TSource) (source As IEnumerable(Of TSource)) As OrderablePartitioner(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ Create(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Create : seq&lt;'Source&gt; -&gt; System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt;" Usage="System.Collections.Concurrent.Partitioner.Create source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="18b81-148">源可枚举项中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="18b81-148">Type of the elements in source enumerable.</span></span></typeparam>
        <param name="source"><span data-ttu-id="18b81-149">要进行分区的可枚举项。</span><span class="sxs-lookup"><span data-stu-id="18b81-149">The enumerable to be partitioned.</span></span></param>
        <summary><span data-ttu-id="18b81-150">从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 实例创建一个可排序分区程序。</span><span class="sxs-lookup"><span data-stu-id="18b81-150">Creates an orderable partitioner from a <see cref="T:System.Collections.Generic.IEnumerable`1" /> instance.</span></span></summary>
        <returns><span data-ttu-id="18b81-151">基于输入数组的可排序分区程序。</span><span class="sxs-lookup"><span data-stu-id="18b81-151">An orderable partitioner based on the input array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18b81-152">在创建的分区程序中使用的排序由元素的自然顺序确定，这是从可枚举的源中检索的。</span><span class="sxs-lookup"><span data-stu-id="18b81-152">The ordering used in the created partitioner is determined by the natural order of the elements as retrieved from the source enumerable.</span></span> <span data-ttu-id="18b81-153">有关详细信息和示例，请参阅[用于 PLINQ 和 TPL 的自定义分区程序](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl)。</span><span class="sxs-lookup"><span data-stu-id="18b81-153">For more information and examples, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl"><span data-ttu-id="18b81-154">PLINQ 和 TPL 的自定义分区程序</span><span class="sxs-lookup"><span data-stu-id="18b81-154">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="18b81-155">如何：加快小型循环体的速度</span><span class="sxs-lookup"><span data-stu-id="18b81-155">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-dynamic-partitions"><span data-ttu-id="18b81-156">如何：实现动态分区</span><span class="sxs-lookup"><span data-stu-id="18b81-156">How to: Implement Dynamic Partitions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Create&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; Create&lt;TSource&gt; (System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Concurrent.EnumerablePartitionerOptions partitionerOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; Create&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, valuetype System.Collections.Concurrent.EnumerablePartitionerOptions partitionerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of TSource) (source As IEnumerable(Of TSource), partitionerOptions As EnumerablePartitionerOptions) As OrderablePartitioner(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ Create(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Collections::Concurrent::EnumerablePartitionerOptions partitionerOptions);" />
      <MemberSignature Language="F#" Value="static member Create : seq&lt;'Source&gt; * System.Collections.Concurrent.EnumerablePartitionerOptions -&gt; System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt;" Usage="System.Collections.Concurrent.Partitioner.Create (source, partitionerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" Index="0" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="partitionerOptions" Type="System.Collections.Concurrent.EnumerablePartitionerOptions" Index="1" FrameworkAlternate="dotnet-uwp-10.0;net-5.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="18b81-157">源可枚举项中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="18b81-157">Type of the elements in source enumerable.</span></span></typeparam>
        <param name="source"><span data-ttu-id="18b81-158">要进行分区的可枚举项。</span><span class="sxs-lookup"><span data-stu-id="18b81-158">The enumerable to be partitioned.</span></span></param>
        <param name="partitionerOptions"><span data-ttu-id="18b81-159">控制分区缓冲行为的选项。</span><span class="sxs-lookup"><span data-stu-id="18b81-159">Options to control the buffering behavior of the partitioner.</span></span></param>
        <summary><span data-ttu-id="18b81-160">从 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 实例创建一个可排序分区程序。</span><span class="sxs-lookup"><span data-stu-id="18b81-160">Creates an orderable partitioner from a <see cref="T:System.Collections.Generic.IEnumerable`1" /> instance.</span></span></summary>
        <returns><span data-ttu-id="18b81-161">基于输入数组的可排序分区程序。</span><span class="sxs-lookup"><span data-stu-id="18b81-161">An orderable partitioner based on the input array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18b81-162">在创建的分区程序中使用的排序由元素的自然顺序确定，这是从可枚举的源中检索的。</span><span class="sxs-lookup"><span data-stu-id="18b81-162">The ordering used in the created partitioner is determined by the natural order of the elements as retrieved from the source enumerable.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="18b81-163"><paramref name="partitionerOptions" /> 参数为 <see cref="T:System.Collections.Concurrent.EnumerablePartitionerOptions" /> 指定无效值。</span><span class="sxs-lookup"><span data-stu-id="18b81-163">The <paramref name="partitionerOptions" /> argument specifies an invalid value for <see cref="T:System.Collections.Concurrent.EnumerablePartitionerOptions" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Create&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; Create&lt;TSource&gt; (System.Collections.Generic.IList&lt;TSource&gt; list, bool loadBalance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; Create&lt;TSource&gt;(class System.Collections.Generic.IList`1&lt;!!TSource&gt; list, bool loadBalance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of TSource) (list As IList(Of TSource), loadBalance As Boolean) As OrderablePartitioner(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ Create(System::Collections::Generic::IList&lt;TSource&gt; ^ list, bool loadBalance);" />
      <MemberSignature Language="F#" Value="static member Create : System.Collections.Generic.IList&lt;'Source&gt; * bool -&gt; System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt;" Usage="System.Collections.Concurrent.Partitioner.Create (list, loadBalance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.IList&lt;TSource&gt;" />
        <Parameter Name="loadBalance" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="18b81-164">源列表中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="18b81-164">Type of the elements in source list.</span></span></typeparam>
        <param name="list"><span data-ttu-id="18b81-165">要进行分区的列表。</span><span class="sxs-lookup"><span data-stu-id="18b81-165">The list to be partitioned.</span></span></param>
        <param name="loadBalance"><span data-ttu-id="18b81-166">一个布尔值，该值指示创建的分区程序是否应在各分区之间保持动态负载平衡，而不是静态负载平衡。</span><span class="sxs-lookup"><span data-stu-id="18b81-166">A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.</span></span></param>
        <summary><span data-ttu-id="18b81-167">从 <see cref="T:System.Collections.Generic.IList`1" /> 实例创建一个可排序分区程序。</span><span class="sxs-lookup"><span data-stu-id="18b81-167">Creates an orderable partitioner from an <see cref="T:System.Collections.Generic.IList`1" /> instance.</span></span></summary>
        <returns><span data-ttu-id="18b81-168">基于输入列表的可排序分区程序。</span><span class="sxs-lookup"><span data-stu-id="18b81-168">An orderable partitioner based on the input list.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18b81-169">有关详细信息和示例，请参阅[用于 PLINQ 和 TPL 的自定义分区程序](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl)。</span><span class="sxs-lookup"><span data-stu-id="18b81-169">For more information and examples, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl"><span data-ttu-id="18b81-170">PLINQ 和 TPL 的自定义分区程序</span><span class="sxs-lookup"><span data-stu-id="18b81-170">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="18b81-171">如何：加快小型循环体的速度</span><span class="sxs-lookup"><span data-stu-id="18b81-171">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-dynamic-partitions"><span data-ttu-id="18b81-172">如何：实现动态分区</span><span class="sxs-lookup"><span data-stu-id="18b81-172">How to: Implement Dynamic Partitions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Create&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt; Create&lt;TSource&gt; (TSource[] array, bool loadBalance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Concurrent.OrderablePartitioner`1&lt;!!TSource&gt; Create&lt;TSource&gt;(!!TSource[] array, bool loadBalance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create(Of TSource) (array As TSource(), loadBalance As Boolean) As OrderablePartitioner(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA; static System::Collections::Concurrent::OrderablePartitioner&lt;TSource&gt; ^ Create(cli::array &lt;TSource&gt; ^ array, bool loadBalance);" />
      <MemberSignature Language="F#" Value="static member Create : 'Source[] * bool -&gt; System.Collections.Concurrent.OrderablePartitioner&lt;'Source&gt;" Usage="System.Collections.Concurrent.Partitioner.Create (array, loadBalance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Concurrent</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.14.0</AssemblyVersion>
        <AssemblyVersion>4.0.15.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Concurrent.OrderablePartitioner&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="TSource[]" />
        <Parameter Name="loadBalance" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="18b81-173">源数组中的元素的类型。</span><span class="sxs-lookup"><span data-stu-id="18b81-173">Type of the elements in source array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="18b81-174">要进行分区的数组。</span><span class="sxs-lookup"><span data-stu-id="18b81-174">The array to be partitioned.</span></span></param>
        <param name="loadBalance"><span data-ttu-id="18b81-175">一个布尔值，该值指示创建的分区程序是否应在各分区之间保持动态负载平衡，而不是静态负载平衡。</span><span class="sxs-lookup"><span data-stu-id="18b81-175">A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.</span></span></param>
        <summary><span data-ttu-id="18b81-176">从 <see cref="T:System.Array" /> 实例创建一个可排序分区程序。</span><span class="sxs-lookup"><span data-stu-id="18b81-176">Creates an orderable partitioner from a <see cref="T:System.Array" /> instance.</span></span></summary>
        <returns><span data-ttu-id="18b81-177">基于输入数组的可排序分区程序。</span><span class="sxs-lookup"><span data-stu-id="18b81-177">An orderable partitioner based on the input array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="18b81-178">有关详细信息和示例，请参阅[用于 PLINQ 和 TPL 的自定义分区程序](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl)。</span><span class="sxs-lookup"><span data-stu-id="18b81-178">For more information and examples, see [Custom Partitioners for PLINQ and TPL](/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/parallel-programming/custom-partitioners-for-plinq-and-tpl"><span data-ttu-id="18b81-179">PLINQ 和 TPL 的自定义分区程序</span><span class="sxs-lookup"><span data-stu-id="18b81-179">Custom Partitioners for PLINQ and TPL</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-speed-up-small-loop-bodies"><span data-ttu-id="18b81-180">如何：加快小型循环体的速度</span><span class="sxs-lookup"><span data-stu-id="18b81-180">How to: Speed Up Small Loop Bodies</span></span></related>
        <related type="Article" href="/dotnet/standard/parallel-programming/how-to-implement-dynamic-partitions"><span data-ttu-id="18b81-181">如何：实现动态分区</span><span class="sxs-lookup"><span data-stu-id="18b81-181">How to: Implement Dynamic Partitions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
