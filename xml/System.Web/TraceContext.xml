<Type Name="TraceContext" FullName="System.Web.TraceContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5a676c9418adeb67ed27710abb8d80b7ea86eef9" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89930349" /></Metadata><TypeSignature Language="C#" Value="public sealed class TraceContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TraceContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.TraceContext" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TraceContext" />
  <TypeSignature Language="C++ CLI" Value="public ref class TraceContext sealed" />
  <TypeSignature Language="F#" Value="type TraceContext = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>捕获并提供有关 Web 请求的执行详细信息。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用此类将消息附加到特定的跟踪类别。 例如，如果要 <xref:System.Web.UI.WebControls.Calendar> 为应用程序创建类的实例，则可以在呈现过程中包含跟踪消息 "开始呈现"，并在事件处理程序过程中包含 "引发 OnChange 事件"。  
  
 在 <xref:System.Web.TraceContext> 执行自定义处理的请求执行结束时，还可以使用类来获取一组跟踪记录。 有关详细信息，请参阅 [ASP.NET 跟踪概述](https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100))。  
  
 若要启用跟踪，请将 `Trace` [@ Page](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ydy4x04a(v=vs.100)) 指令或属性中的属性设置 <xref:System.Web.TraceContext.IsEnabled%2A> 为 `true` 。 启用跟踪后，除了显示用户提供的跟踪内容外， <xref:System.Web.UI.Page> 该类还自动包括每个请求的性能数据、控制树结构信息和状态管理内容。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.TraceContextEventArgs" />
    <altmember cref="T:System.Web.TraceContextEventHandler" />
    <altmember cref="T:System.Web.TraceContextRecord" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">ASP.NET 跟踪概述</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TraceContext (System.Web.HttpContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.HttpContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.#ctor(System.Web.HttpContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (context As HttpContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TraceContext(System::Web::HttpContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Web.TraceContext : System.Web.HttpContext -&gt; System.Web.TraceContext" Usage="new System.Web.TraceContext context" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="System.Web.HttpContext" />
      </Parameters>
      <Docs>
        <param name="context"><see cref="T:System.Web.HttpContext" /> 包含有关当前 Web 请求的信息。</param>
        <summary>初始化 <see cref="T:System.Web.TraceContext" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Web.HttpContext" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">ASP.NET 跟踪概述</related>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.TraceContext.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Web.TraceContext.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用来指示是否启用对当前 Web 请求的跟踪的值。</summary>
        <value>如果已启用跟踪，则为 <see langword="true" />；否则，为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此标志来检查页面或应用程序是否应在将任何内容写入跟踪日志之前输出跟踪信息。  
  
 属性的值 <xref:System.Web.TraceContext.IsEnabled%2A> 取决于 "配置" 部分的子节中的设置 `system.web` 以及 `trace` 指令属性的值。 在页面指令中设置的跟踪选项优先于在配置文件中设置的选项。 <xref:System.Web.TraceContext.IsEnabled%2A>以编程方式设置值优先于页面指令属性和配置设置。  
  
> [!NOTE]
>  如果 <xref:System.Web.TraceContext.IsEnabled%2A> `true` 为整个应用程序将属性设置为，则必须为 `false` 应用程序中您不希望显示其跟踪信息的任何页将此属性显式设置为。  
  
   
  
## Examples  
 下面的代码示例演示如何确定是否为页面启用了跟踪。 此代码循环访问数据集中的行，并为该数据集中的每一行编写跟踪语句。  
  
 [!code-csharp[Classic TraceContext.IsEnabled Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic TraceContext.IsEnabled Example/CS/source.cs#1)]
 [!code-vb[Classic TraceContext.IsEnabled Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic TraceContext.IsEnabled Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">ASP.NET 跟踪概述</related>
        <related type="Article" href="/dotnet/framework/configure-apps/file-schema/trace-debug/trace-element">&lt;trace &gt; 元素</related>
      </Docs>
    </Member>
    <Member MemberName="TraceFinished">
      <MemberSignature Language="C#" Value="public event System.Web.TraceContextEventHandler TraceFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Web.TraceContextEventHandler TraceFinished" />
      <MemberSignature Language="DocId" Value="E:System.Web.TraceContext.TraceFinished" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TraceFinished As TraceContextEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Web::TraceContextEventHandler ^ TraceFinished;" />
      <MemberSignature Language="F#" Value="member this.TraceFinished : System.Web.TraceContextEventHandler " Usage="member this.TraceFinished : System.Web.TraceContextEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.TraceContextEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>由 <see cref="T:System.Web.TraceContext" /> 对象引发，用于在收集完所有请求信息后公开跟踪消息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 <xref:System.Web.TraceContext.TraceFinished> 处理 HTTP 请求的过程中，会引发事件 `EndRequest` 。 它在 <xref:System.Web.TraceContext> 收集所有请求信息后由对象引发，以将消息集合公开 <xref:System.Web.TraceContextRecord> 给注册的 <xref:System.Web.TraceContextEventHandler> 委托。  
  
   
  
## Examples  
 下面的代码示例演示如何注册 <xref:System.Web.TraceContextEventHandler> 来处理 <xref:System.Web.TraceContext.TraceFinished> 事件。 在此示例中，委托循环访问跟踪消息并将它们写入响应流;但是，您可以将相同的信息写入数据库或分析工具使用者。  
  
 [!code-aspx-csharp[System.Web.Trace_3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Trace_3/CS/form3cs.aspx#1)]
 [!code-aspx-vb[System.Web.Trace_3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Trace_3/VB/form3vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.TraceContextEventHandler" />
        <altmember cref="T:System.Web.TraceContextEventArgs" />
        <altmember cref="T:System.Web.TraceContextRecord" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">ASP.NET 跟踪概述</related>
      </Docs>
    </Member>
    <Member MemberName="TraceMode">
      <MemberSignature Language="C#" Value="public System.Web.TraceMode TraceMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.TraceMode TraceMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.TraceContext.TraceMode" />
      <MemberSignature Language="VB.NET" Value="Public Property TraceMode As TraceMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::TraceMode TraceMode { System::Web::TraceMode get(); void set(System::Web::TraceMode value); };" />
      <MemberSignature Language="F#" Value="member this.TraceMode : System.Web.TraceMode with get, set" Usage="System.Web.TraceContext.TraceMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.TraceMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置跟踪消息输出到请求浏览器应遵循的排序顺序。</summary>
        <value><see cref="T:System.Web.TraceMode" /> 枚举值之一。 默认为配置文件的 <see langword="traceMode" /> 节中 <see langword="trace" /> 特性指定的设置（该设置的默认值为 <see langword="SortByTime" />）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 跟踪消息可以按它们处理的顺序进行排序，也可以按用户定义的类别按字母顺序排序。  
  
   
  
## Examples  
 下面的代码示例演示了如何按分配给语句的类别的字母顺序对页面跟踪语句进行排序。  
  
 [!code-aspx-csharp[Classic TraceContext.TraceMode Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic TraceContext.TraceMode Example/CS/sourcecs.aspx#1)]
 [!code-aspx-vb[Classic TraceContext.TraceMode Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic TraceContext.TraceMode Example/VB/sourcevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">所选的值不是 <see cref="T:System.Web.TraceMode" /> 枚举值之一。</exception>
        <altmember cref="T:System.Web.UI.Page" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">ASP.NET 跟踪概述</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Warn">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将跟踪信息写入跟踪日志。 与 <see cref="M:System.Web.TraceContext.Write(System.String)" /> 不同，所有警告在日志中均显示为红色文本。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Warn">
      <MemberSignature Language="C#" Value="public void Warn (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Warn(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.Warn(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Warn (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Warn(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Warn : string -&gt; unit" Usage="traceContext.Warn message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要写入日志的跟踪消息。</param>
        <summary>将跟踪消息写入跟踪日志。 所有警告在日志中均显示为红色文本。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次 <xref:System.Web.TraceContext.Warn%2A> 调用方法时，都会向 <xref:System.Web.TraceContext> message 集合添加一条跟踪消息 <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> ，在处理该事件时，该消息是可访问的 <xref:System.Web.TraceContext.TraceFinished> 。 添加消息，并将其 <xref:System.Web.TraceContextRecord.IsWarning%2A> 属性设置为 `true` ，并 <xref:System.Web.TraceContextRecord.ErrorInfo%2A> 将其属性设置为 `null` 。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">ASP.NET 跟踪概述</related>
      </Docs>
    </Member>
    <Member MemberName="Warn">
      <MemberSignature Language="C#" Value="public void Warn (string category, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Warn(string category, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.Warn(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Warn (category As String, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Warn(System::String ^ category, System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Warn : string * string -&gt; unit" Usage="traceContext.Warn (category, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="category">接收消息的跟踪类别。</param>
        <param name="message">要写入日志的跟踪消息。</param>
        <summary>将跟踪信息写入跟踪日志，包括任何用户定义的类别和跟踪消息。 所有警告在日志中均显示为红色文本。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次 <xref:System.Web.TraceContext.Warn%2A> 调用方法时，都会向 <xref:System.Web.TraceContext> message 集合添加一条跟踪消息 <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> ，在处理该事件时，该消息是可访问的 <xref:System.Web.TraceContext.TraceFinished> 。 添加消息，并将其 <xref:System.Web.TraceContextRecord.IsWarning%2A> 属性设置为 `true` ，并 <xref:System.Web.TraceContextRecord.ErrorInfo%2A> 将其属性设置为 `null` 。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">ASP.NET 跟踪概述</related>
      </Docs>
    </Member>
    <Member MemberName="Warn">
      <MemberSignature Language="C#" Value="public void Warn (string category, string message, Exception errorInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Warn(string category, string message, class System.Exception errorInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.Warn(System.String,System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Warn (category As String, message As String, errorInfo As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Warn(System::String ^ category, System::String ^ message, Exception ^ errorInfo);" />
      <MemberSignature Language="F#" Value="member this.Warn : string * string * Exception -&gt; unit" Usage="traceContext.Warn (category, message, errorInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="errorInfo" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="category">接收消息的跟踪类别。</param>
        <param name="message">要写入日志的跟踪消息。</param>
        <param name="errorInfo">包含有关错误消息的 <see cref="T:System.Exception" />。</param>
        <summary>将跟踪信息写入跟踪日志，包括用户定义的所有类别、跟踪消息和错误消息。 所有警告在日志中均显示为红色文本。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次 <xref:System.Web.TraceContext.Warn%2A> 调用方法时，都会向 <xref:System.Web.TraceContext> message 集合添加一条跟踪消息 <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> ，在处理该事件时，该消息是可访问的 <xref:System.Web.TraceContext.TraceFinished> 。 添加消息，并将其 <xref:System.Web.TraceContextRecord.IsWarning%2A> 属性设置为 `true` ，并将 <xref:System.Web.TraceContextRecord.ErrorInfo%2A> 属性设置为参数传递的对象 `errorInfo` 。  
  
   
  
## Examples  
 下面的代码示例演示如何调用 <xref:System.Web.TraceContext.Write%2A> 方法将错误跟踪消息写入跟踪日志。 在此示例中，将不同的异常视为错误和警告。 当页引发时 <xref:System.ArgumentException> ，它会使用方法编写一条警告消息 <xref:System.Web.TraceContext.Warn%2A> 。 当页引发时 <xref:System.InvalidOperationException> ，它会使用方法编写一条错误消息 <xref:System.Web.TraceContext.Write%2A> 。  
  
 [!code-aspx-csharp[System.Web.Trace_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Trace_4/CS/form4cs.aspx#1)]
 [!code-aspx-vb[System.Web.Trace_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Trace_4/VB/form4vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">ASP.NET 跟踪概述</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将跟踪信息写入跟踪日志。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Write : string -&gt; unit" Usage="traceContext.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">要写入日志的跟踪消息。</param>
        <summary>将跟踪消息写入跟踪日志。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次 <xref:System.Web.TraceContext.Write%2A> 调用方法时，都会向 <xref:System.Web.TraceContext> message 集合添加一条跟踪消息 <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> ，在处理该事件时，该消息是可访问的 <xref:System.Web.TraceContext.TraceFinished> 。 添加消息，并将其 <xref:System.Web.TraceContextRecord.IsWarning%2A> 属性设置为 `false` ，并 <xref:System.Web.TraceContextRecord.ErrorInfo%2A> 将其属性设置为 `null` 。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">ASP.NET 跟踪概述</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string category, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(string category, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.Write(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (category As String, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::String ^ category, System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Write : string * string -&gt; unit" Usage="traceContext.Write (category, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="category">接收消息的跟踪类别。</param>
        <param name="message">要写入日志的跟踪消息。</param>
        <summary>将跟踪信息写入跟踪日志，包括消息和任何用户定义的类别。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次 <xref:System.Web.TraceContext.Write%2A> 调用方法时，都会向 <xref:System.Web.TraceContext> message 集合添加一条跟踪消息 <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> ，在处理该事件时，该消息是可访问的 <xref:System.Web.TraceContext.TraceFinished> 。 添加消息，并将其 <xref:System.Web.TraceContextRecord.IsWarning%2A> 属性设置为 `false` ，并 <xref:System.Web.TraceContextRecord.ErrorInfo%2A> 将其属性设置为 `null` 。  
  
   
  
## Examples  
 下面的代码示例演示如何调用 <xref:System.Web.TraceContext.Write%2A> 方法将错误跟踪消息写入跟踪日志。 在此示例中，委托循环访问跟踪消息，并将它们写入 HTML 表;但是，您可以将相同的信息写入数据库或分析工具使用者。  
  
 [!code-aspx-csharp[System.Web.Trace_5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Trace_5/CS/form5cs.aspx#1)]
 [!code-aspx-vb[System.Web.Trace_5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Trace_5/VB/form5vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">ASP.NET 跟踪概述</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string category, string message, Exception errorInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(string category, string message, class System.Exception errorInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.TraceContext.Write(System.String,System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (category As String, message As String, errorInfo As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::String ^ category, System::String ^ message, Exception ^ errorInfo);" />
      <MemberSignature Language="F#" Value="member this.Write : string * string * Exception -&gt; unit" Usage="traceContext.Write (category, message, errorInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="errorInfo" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="category">接收消息的跟踪类别。</param>
        <param name="message">要写入日志的跟踪消息。</param>
        <param name="errorInfo">包含有关错误消息的 <see cref="T:System.Exception" />。</param>
        <summary>将跟踪信息写入跟踪日志，包括用户定义的所有类别、跟踪消息和错误消息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每次 <xref:System.Web.TraceContext.Write%2A> 调用方法时，都会向 <xref:System.Web.TraceContext> message 集合添加一条跟踪消息 <xref:System.Web.TraceContextEventArgs.TraceRecords%2A> ，在处理该事件时，该消息是可访问的 <xref:System.Web.TraceContext.TraceFinished> 。 添加消息，并将其 <xref:System.Web.TraceContextRecord.IsWarning%2A> 属性设置为 `false` ，并将 <xref:System.Web.TraceContextRecord.ErrorInfo%2A> 属性设置为参数传递的对象 `errorInfo` 。  
  
   
  
## Examples  
 下面的代码示例演示如何调用 <xref:System.Web.TraceContext.Write%2A> 方法将错误跟踪消息写入跟踪日志。 在此示例中，将不同的异常视为错误和警告。 当页引发时 <xref:System.ArgumentException> ，它会使用方法编写一条警告消息 <xref:System.Web.TraceContext.Warn%2A> 。 当页引发时 <xref:System.InvalidOperationException> ，它会使用方法编写一条错误消息 <xref:System.Web.TraceContext.Write%2A> 。  
  
 [!code-aspx-csharp[System.Web.Trace_4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Trace_4/CS/form4cs.aspx#1)]
 [!code-aspx-vb[System.Web.Trace_4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Trace_4/VB/form4vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb386420(v=vs.100)">ASP.NET 跟踪概述</related>
      </Docs>
    </Member>
  </Members>
</Type>
