<Type Name="HttpRequest" FullName="System.Web.HttpRequest">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6c5463858a97e4fd47aa4b8477cc76c116a75f7c" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89960088" /></Metadata><TypeSignature Language="C#" Value="public sealed class HttpRequest" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HttpRequest extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.HttpRequest" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HttpRequest" />
  <TypeSignature Language="C++ CLI" Value="public ref class HttpRequest sealed" />
  <TypeSignature Language="F#" Value="type HttpRequest = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c7841-101">使 ASP.NET 能够读取客户端在 Web 请求期间发送的 HTTP 值。</span><span class="sxs-lookup"><span data-stu-id="c7841-101">Enables ASP.NET to read the HTTP values sent by a client during a Web request.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-102">类的方法和属性 <xref:System.Web.HttpRequest> 通过 `Request` <xref:System.Web.HttpApplication> 、 <xref:System.Web.HttpContext> 、 <xref:System.Web.UI.Page> 和类的属性公开 <xref:System.Web.UI.UserControl> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-102">The methods and properties of the <xref:System.Web.HttpRequest> class are exposed through the `Request` properties of the <xref:System.Web.HttpApplication>, <xref:System.Web.HttpContext>, <xref:System.Web.UI.Page>, and <xref:System.Web.UI.UserControl> classes.</span></span>

 <span data-ttu-id="c7841-103">若要访问 <xref:System.Web.HttpRequest.QueryString%2A> 、、或集合中的数据， <xref:System.Web.HttpRequest.Form%2A> <xref:System.Web.HttpRequest.Cookies%2A> <xref:System.Web.HttpRequest.ServerVariables%2A> 可以编写， `Request["key"]` 如属性的示例中所示 <xref:System.Web.HttpRequest.QueryString%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-103">To access data from the <xref:System.Web.HttpRequest.QueryString%2A>, <xref:System.Web.HttpRequest.Form%2A>, <xref:System.Web.HttpRequest.Cookies%2A>, or <xref:System.Web.HttpRequest.ServerVariables%2A> collections, you can write `Request["key"]`, as shown in the example for the <xref:System.Web.HttpRequest.QueryString%2A> property.</span></span>

> [!NOTE]
>  <span data-ttu-id="c7841-104">类成员的 Unicode 支持 <xref:System.Web.HttpRequest> 需要 IIS 版本6.0 或更高版本。</span><span class="sxs-lookup"><span data-stu-id="c7841-104">Unicode support for <xref:System.Web.HttpRequest> class members requires IIS version 6.0 or later.</span></span>



## Examples
 <span data-ttu-id="c7841-105">下面的示例 <xref:System.Web.HttpRequest> 使用类的属性访问当前请求的实例 <xref:System.Web.UI.Page.Request%2A> <xref:System.Web.UI.Page> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-105">The following examples access the <xref:System.Web.HttpRequest> instance for the current request by using the <xref:System.Web.UI.Page.Request%2A> property of the <xref:System.Web.UI.Page> class.</span></span>

 <span data-ttu-id="c7841-106">您可以使用简化的语法来访问 <xref:System.Web.HttpRequest.QueryString%2A> 、 <xref:System.Web.HttpRequest.Form%2A> 、 <xref:System.Web.HttpRequest.Cookies%2A> 或集合中的数据 <xref:System.Web.HttpRequest.ServerVariables%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-106">You can use simplified syntax for accessing data from the <xref:System.Web.HttpRequest.QueryString%2A>, <xref:System.Web.HttpRequest.Form%2A>, <xref:System.Web.HttpRequest.Cookies%2A>, or <xref:System.Web.HttpRequest.ServerVariables%2A> collections.</span></span> <span data-ttu-id="c7841-107">可以写入 `Request["key"]` 。</span><span class="sxs-lookup"><span data-stu-id="c7841-107">You can write `Request["key"]`.</span></span>

 <span data-ttu-id="c7841-108">第一个示例演示如何在加载页面时检索查询字符串值。</span><span class="sxs-lookup"><span data-stu-id="c7841-108">The first example shows how to retrieve a query string value when loading a page.</span></span>

```csharp
public partial class AddToCart : Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        string rawId = Request["ProductID"];
        int productId;
        if (!String.IsNullOrEmpty(rawId) && int.TryParse(rawId, out productId))
        {
            using (ShoppingCartActions usersShoppingCart = new ShoppingCartActions())
            {
                usersShoppingCart.AddToCart(productId);
            }
        }
        else
        {
            throw new Exception("Tried to call AddToCart.aspx without setting a ProductId.");
        }
        Response.Redirect("ShoppingCart.aspx");
    }
}
```

```vb
Public Class AddToCart
    Inherits Page

    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs) Handles Me.Load
        Dim rawId = Request("ProductID")
        Dim productId As Integer
        If Not String.IsNullOrEmpty(rawId) And Integer.TryParse(rawId, productId) Then
            Using usersShoppingCart As New ShoppingCartActions()
                usersShoppingCart.AddToCart(productId)
            End Using

        Else
            Throw New Exception("Tried to call AddToCart.aspx without setting a ProductId.")
        End If
        Response.Redirect("ShoppingCart.aspx")
    End Sub
End Class
```

 <span data-ttu-id="c7841-109">下一个示例演示如何检查请求是否经过身份验证并检索原始 URL。</span><span class="sxs-lookup"><span data-stu-id="c7841-109">The next example shows how to check if the request is authenticated and retrieve the raw URL.</span></span>

```csharp
public partial class RestrictedPage : Page
{
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!Request.IsAuthenticated)
        {
            var rawUrl = Request.RawUrl;
            Response.Redirect("/Account/Login?ru=" + Server.HtmlEncode(rawUrl));
        }
    }
}
```

```vb
Public Class RestrictedPage
    Inherits Page

    Protected Sub Page_Load(ByVal sender As Object, ByVal e As EventArgs) Handles Me.Load
        If Not Request.IsAuthenticated Then
            Dim rawUrl = Request.RawUrl
            Response.Redirect("/Account/Login?ru=" + Server.HtmlEncode(rawUrl))
        End If
    End Sub
End Class
```

 <span data-ttu-id="c7841-110">本主题提供了包含源代码的 Visual Studio 网站项目： [下载](https://go.microsoft.com/fwlink/?LinkID=191455)。</span><span class="sxs-lookup"><span data-stu-id="c7841-110">A Visual Studio Web site project with source code is available to accompany this topic: [Download](https://go.microsoft.com/fwlink/?LinkID=191455).</span></span>

 <span data-ttu-id="c7841-111">此示例使用 <xref:System.IO.StreamWriter> 类将多个类属性的值写入 <xref:System.Web.HttpRequest> 文件。</span><span class="sxs-lookup"><span data-stu-id="c7841-111">This example uses the <xref:System.IO.StreamWriter> class to write the values of several <xref:System.Web.HttpRequest> class properties to a file.</span></span> <span data-ttu-id="c7841-112">对于类型为字符串的属性，这些值将在写入文件时以 HTML 编码形式进行编码。</span><span class="sxs-lookup"><span data-stu-id="c7841-112">For properties that are of type string, the values are HTML encoded as they are written to the file.</span></span> <span data-ttu-id="c7841-113">表示集合的属性会被循环，它们所包含的每个键/值对都将写入文件中。</span><span class="sxs-lookup"><span data-stu-id="c7841-113">Properties that represent a collection are looped through, and each key/value pair that they contain is written to the file.</span></span>

> [!IMPORTANT]
>  <span data-ttu-id="c7841-114">此示例具有一个接受用户输入的文本框，这是一个潜在的安全威胁。</span><span class="sxs-lookup"><span data-stu-id="c7841-114">This example has a text box that accepts user input, which is a potential security threat.</span></span> <span data-ttu-id="c7841-115">默认情况下，ASP.NET 网页验证用户输入是否不包含脚本或 HTML 元素。</span><span class="sxs-lookup"><span data-stu-id="c7841-115">By default, ASP.NET Web pages validate that user input does not include script or HTML elements.</span></span> <span data-ttu-id="c7841-116">有关详细信息，请参阅[脚本侵入概述](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="c7841-116">For more information, see [Script Exploits Overview](https://docs.microsoft.com/previous-versions/aspnet/w1sw53ds(v=vs.100)).</span></span>

 [!code-aspx-csharp[System.Web.HttpRequest_Sample1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#1)]
 [!code-aspx-vb[System.Web.HttpRequest_Sample1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#1)]

 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpRequest (string filename, string url, string queryString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, string url, string queryString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filename As String, url As String, queryString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HttpRequest(System::String ^ filename, System::String ^ url, System::String ^ queryString);" />
      <MemberSignature Language="F#" Value="new System.Web.HttpRequest : string * string * string -&gt; System.Web.HttpRequest" Usage="new System.Web.HttpRequest (filename, url, queryString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="queryString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename"><span data-ttu-id="c7841-117">与请求关联的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="c7841-117">The name of the file associated with the request.</span></span></param>
        <param name="url"><span data-ttu-id="c7841-118">关于当前请求的 URL 的信息。</span><span class="sxs-lookup"><span data-stu-id="c7841-118">The information regarding the URL of the current request.</span></span></param>
        <param name="queryString"><span data-ttu-id="c7841-119">与请求一同发送的整个查询字符串（“?”<c></c>之后的所有内容）。</span><span class="sxs-lookup"><span data-stu-id="c7841-119">The entire query string sent with the request (everything after the <c>'?'</c>).</span></span></param>
        <summary><span data-ttu-id="c7841-120">初始化 <see cref="T:System.Web.HttpRequest" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-120">Initializes an <see cref="T:System.Web.HttpRequest" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-121">您无需创建您自己的类的实例 <xref:System.Web.HttpRequest> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-121">You do not need to create your own instance of the <xref:System.Web.HttpRequest> class.</span></span> <span data-ttu-id="c7841-122">类的方法和属性 <xref:System.Web.HttpRequest> 通过 `Request` <xref:System.Web.HttpApplication> 、 <xref:System.Web.HttpContext> 、 <xref:System.Web.UI.Page> 和类的属性公开 <xref:System.Web.UI.UserControl> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-122">The methods and properties of the <xref:System.Web.HttpRequest> class are exposed through the `Request` property of the <xref:System.Web.HttpApplication>, <xref:System.Web.HttpContext>, <xref:System.Web.UI.Page>, and <xref:System.Web.UI.UserControl> classes.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="httpRequest.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7841-123">强制地终止基础 TCP 连接，会导致任何显著的 I/O 失败。</span><span class="sxs-lookup"><span data-stu-id="c7841-123">Forcibly terminates the underlying TCP connection, causing any outstanding I/O to fail.</span></span> <span data-ttu-id="c7841-124">可使用此方法来响应恶意 HTTP 客户端的攻击。</span><span class="sxs-lookup"><span data-stu-id="c7841-124">You might use this method in response to an attack by a malicious HTTP client.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-125">此方法是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="c7841-125">This method is thread-safe.</span></span> <span data-ttu-id="c7841-126">任何线程都可以随时调用它。</span><span class="sxs-lookup"><span data-stu-id="c7841-126">Any thread may call it at any time.</span></span>

 <span data-ttu-id="c7841-127">此方法只能在集成模式下使用。</span><span class="sxs-lookup"><span data-stu-id="c7841-127">This method can only be used in integrated mode.</span></span> <span data-ttu-id="c7841-128">如果在经典模式下调用它，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="c7841-128">If you invoke it in classic mode, an exception is thrown.</span></span> <span data-ttu-id="c7841-129">若要确定管道模式，请使用 <xref:System.Web.HttpRuntime.UsingIntegratedPipeline%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-129">To determine the pipeline mode, use <xref:System.Web.HttpRuntime.UsingIntegratedPipeline%2A>.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptTypes">
      <MemberSignature Language="C#" Value="public string[] AcceptTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AcceptTypes" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.AcceptTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AcceptTypes As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ AcceptTypes { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AcceptTypes : string[]" Usage="System.Web.HttpRequest.AcceptTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-130">获取客户端支持的 MIME 接受类型的字符串数组。</span><span class="sxs-lookup"><span data-stu-id="c7841-130">Gets a string array of client-supported MIME accept types.</span></span></summary>
        <value><span data-ttu-id="c7841-131">客户端支持的 MIME 接受类型的字符串数组。</span><span class="sxs-lookup"><span data-stu-id="c7841-131">A string array of client-supported MIME accept types.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c7841-132">下面的代码示例将属性返回的多个值捕获 <xref:System.Web.HttpRequest.AcceptTypes%2A> 到一个对象变量中，并将每个值的数目和名称写入到单独的 HTTP 输出行中。</span><span class="sxs-lookup"><span data-stu-id="c7841-132">The following code example captures the multiple values returned by the <xref:System.Web.HttpRequest.AcceptTypes%2A> property into an object variable and writes the number and name of each value to a separate line of HTTP output.</span></span>

 [!code-csharp[Classic HttpRequest.AcceptTypes Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.AcceptTypes Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.AcceptTypes Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.AcceptTypes Example/VB/source.vb#1)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnonymousID">
      <MemberSignature Language="C#" Value="public string AnonymousID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AnonymousID" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.AnonymousID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AnonymousID As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AnonymousID { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AnonymousID : string" Usage="System.Web.HttpRequest.AnonymousID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-133">获取该用户的匿名标识符（如果存在）。</span><span class="sxs-lookup"><span data-stu-id="c7841-133">Gets the anonymous identifier for the user, if present.</span></span></summary>
        <value><span data-ttu-id="c7841-134">字符串，表示当前匿名用户标识符。</span><span class="sxs-lookup"><span data-stu-id="c7841-134">A string representing the current anonymous user identifier.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-135"><xref:System.Web.HttpRequest.AnonymousID%2A>属性为未经过身份验证的用户分配长生存期的唯一标识符，该标识符可用于跟踪用户或将配置文件属性分配给该用户，而无需将数据存储在 `Session` 对象中。</span><span class="sxs-lookup"><span data-stu-id="c7841-135">The <xref:System.Web.HttpRequest.AnonymousID%2A> property assigns a long-lived unique identifier to a non-authenticated user, which can be used to track the user or assign profile properties to that user without storing data in a `Session` object.</span></span> <span data-ttu-id="c7841-136">默认情况下， <xref:System.Web.HttpRequest.AnonymousID%2A> 使用 cookie 跟踪属性，但在 <xref:System.Web.Configuration.SessionStateSection.Cookieless%2A> "匿名标识配置" 部分的属性设置为 <xref:System.Web.HttpCookieMode.UseUri> 、 <xref:System.Web.HttpCookieMode.UseDeviceProfile> 或值时，可以将其设置为使用 URI <xref:System.Web.HttpCookieMode.AutoDetect> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-136">By default, the <xref:System.Web.HttpRequest.AnonymousID%2A> property is tracked using a cookie, but it can be set to use the URI when the <xref:System.Web.Configuration.SessionStateSection.Cookieless%2A> attribute in the anonymous identification configuration section is set to either the <xref:System.Web.HttpCookieMode.UseUri>, <xref:System.Web.HttpCookieMode.UseDeviceProfile>, or <xref:System.Web.HttpCookieMode.AutoDetect> value.</span></span> <span data-ttu-id="c7841-137">如果不再需要 cookie （例如，对匿名用户进行身份验证），则必须显式清除该 cookie。</span><span class="sxs-lookup"><span data-stu-id="c7841-137">You must explicitly clear the cookie if you no longer want it available, for example when an anonymous user is authenticated.</span></span>

 <span data-ttu-id="c7841-138">如果需要确定没有经过身份验证的实体和需要授权的实体，则使用匿名身份验证。</span><span class="sxs-lookup"><span data-stu-id="c7841-138">Anonymous identification is used when there is a need to identify entities that are not authenticated and when authorization is required.</span></span> <span data-ttu-id="c7841-139">有关详细信息，请参阅 [AnonymousIdentification 元素 (ASP.NET Settings Schema) ](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/91ka2e6a(v=vs.100))</span><span class="sxs-lookup"><span data-stu-id="c7841-139">For more information, see [anonymousIdentification Element (ASP.NET Settings Schema)](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/91ka2e6a(v=vs.100))</span></span>



## Examples
 <span data-ttu-id="c7841-140">下面的示例演示如何 <xref:System.Web.HttpRequest.AnonymousID%2A> 通过处理 global.asax 文件中的事件来使用属性 <xref:System.Web.Security.AnonymousIdentificationModule.Creating> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-140">The following example shows how to use the <xref:System.Web.HttpRequest.AnonymousID%2A> property by handling the <xref:System.Web.Security.AnonymousIdentificationModule.Creating> event in the Global.asax file.</span></span> <span data-ttu-id="c7841-141">此示例包含两个部分：</span><span class="sxs-lookup"><span data-stu-id="c7841-141">This example has two parts:</span></span>

-   <span data-ttu-id="c7841-142">Global.asax 文件中处理事件的方法 <xref:System.Web.Security.AnonymousIdentificationModule.Creating> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-142">A method in the Global.asax file that handles the <xref:System.Web.Security.AnonymousIdentificationModule.Creating> event.</span></span>

-   <span data-ttu-id="c7841-143">Web 窗体页。</span><span class="sxs-lookup"><span data-stu-id="c7841-143">A Web Forms page.</span></span>

 <span data-ttu-id="c7841-144">此代码示例的第一部分演示如何 <xref:System.Web.HttpRequest.AnonymousID%2A> 通过 <xref:System.Web.Security.AnonymousIdentificationModule.Creating> 在 global.asax 文件中处理事件来设置属性。</span><span class="sxs-lookup"><span data-stu-id="c7841-144">The first part of the code example shows how to set the <xref:System.Web.HttpRequest.AnonymousID%2A> property by handling the <xref:System.Web.Security.AnonymousIdentificationModule.Creating> event in the Global.asax file.</span></span> <span data-ttu-id="c7841-145">命名的方法 `AnonymousIdentification_Creating` <xref:System.Web.HttpRequest.AnonymousID%2A> 在创建匿名 ID 时设置属性。</span><span class="sxs-lookup"><span data-stu-id="c7841-145">The method that is named `AnonymousIdentification_Creating` sets the <xref:System.Web.HttpRequest.AnonymousID%2A> property when an anonymous ID is created.</span></span>

 [!code-csharp[System.Web.HttpRequest_AnonymousID#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_AnonymousID/CS/global_asax.cs#2)]
 [!code-vb[System.Web.HttpRequest_AnonymousID#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_AnonymousID/vb/global_asax.vb#2)]

 <span data-ttu-id="c7841-146">此代码示例的第二部分演示如何显示 <xref:System.Web.HttpRequest.AnonymousID%2A> `AnonymousIdentification_Creating` 在前面的示例中由事件处理程序创建的新。</span><span class="sxs-lookup"><span data-stu-id="c7841-146">The second part of the code example shows how to display the new <xref:System.Web.HttpRequest.AnonymousID%2A> that is created by the `AnonymousIdentification_Creating` event handler in the preceding example.</span></span>

 [!code-aspx-csharp[System.Web.HttpRequest_AnonymousID#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_AnonymousID/CS/anonid_cs.aspx#1)]
 [!code-aspx-vb[System.Web.HttpRequest_AnonymousID#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_AnonymousID/vb/anonid_vb.aspx#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpRequest.IsAuthenticated" />
        <altmember cref="E:System.Web.Security.AnonymousIdentificationModule.Creating" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/91ka2e6a(v=vs.100)"><span data-ttu-id="c7841-147">anonymousIdentification 元素（ASP.NET 设置架构）</span><span class="sxs-lookup"><span data-stu-id="c7841-147">anonymousIdentification Element (ASP.NET Settings Schema)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ApplicationPath">
      <MemberSignature Language="C#" Value="public string ApplicationPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ApplicationPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.ApplicationPath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ApplicationPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ApplicationPath : string" Usage="System.Web.HttpRequest.ApplicationPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-148">获取服务器上 ASP.NET 应用程序的虚拟应用程序根路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-148">Gets the ASP.NET application's virtual application root path on the server.</span></span></summary>
        <value><span data-ttu-id="c7841-149">当前应用程序的虚拟路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-149">The virtual path of the current application.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-150">使用此属性，可以从根目录之外的页面或 Web 用户控件构造相对于应用程序根的 URL。</span><span class="sxs-lookup"><span data-stu-id="c7841-150">Use this property to construct a URL relative to the application root from a page or Web user control that is not in the root directory.</span></span> <span data-ttu-id="c7841-151">这允许在目录结构的不同级别上存在的页和共享控件使用相同的代码链接到应用程序中固定位置的资源。</span><span class="sxs-lookup"><span data-stu-id="c7841-151">This allows pages and shared controls that exist at different levels of a directory structure to use the same code to link to resources at fixed locations in the application.</span></span>



## Examples
 <span data-ttu-id="c7841-152">下面的示例使用 <xref:System.IO.StreamWriter.Write%2A> 方法对进行 HTML 编码，然后将属性的值写入 <xref:System.Web.HttpRequest.ApplicationPath%2A> 文本文件。</span><span class="sxs-lookup"><span data-stu-id="c7841-152">The following example uses the <xref:System.IO.StreamWriter.Write%2A> method to HTML-encode and then write the value of the <xref:System.Web.HttpRequest.ApplicationPath%2A> property to a text file.</span></span> <span data-ttu-id="c7841-153">此代码示例是为类提供的更大示例的一部分 <xref:System.Web.HttpRequest> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-153">This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.</span></span> <span data-ttu-id="c7841-154">它假定存在一个 <xref:System.IO.StreamWriter> 名为的对象 `sw` 。</span><span class="sxs-lookup"><span data-stu-id="c7841-154">It assumes the existence of a <xref:System.IO.StreamWriter> object named `sw`.</span></span>

 [!code-csharp[System.Web.HttpRequest_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#2)]
 [!code-vb[System.Web.HttpRequest_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#2)]

 <span data-ttu-id="c7841-155">下面的示例使用 <xref:System.Web.HttpRequest.ApplicationPath%2A> 属性以编程方式构造指向应用程序中固定位置的资源的路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-155">The following example uses the <xref:System.Web.HttpRequest.ApplicationPath%2A> property to programmatically construct a path to a resource that is in a fixed location in the application.</span></span> <span data-ttu-id="c7841-156">引用资源的页面不必与资源位于同一个目录中。</span><span class="sxs-lookup"><span data-stu-id="c7841-156">The page that references the resource does not have to be located in the same directory as the resource.</span></span>

 [!code-aspx-csharp[System.Web.HttpRequest.ApplicationPath#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest.ApplicationPath/CS/ApplicationPath.aspx#2)]
 [!code-aspx-vb[System.Web.HttpRequest.ApplicationPath#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest.ApplicationPath/VB/ApplicationPath.aspx#2)]

 <span data-ttu-id="c7841-157">如果在名为 WebSite1 的 Web 应用程序中运行此示例，则  `/WebSite1` 将显示为属性的值 <xref:System.Web.HttpRequest.ApplicationPath%2A> ，并 `/WebSite1/images/Image1.gif` 将显示为图像的完整路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-157">If you run this example in a Web application that is named WebSite1,  `/WebSite1` will be displayed as the value of the <xref:System.Web.HttpRequest.ApplicationPath%2A> property and `/WebSite1/images/Image1.gif` will be displayed as the complete path of the image.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppRelativeCurrentExecutionFilePath">
      <MemberSignature Language="C#" Value="public string AppRelativeCurrentExecutionFilePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AppRelativeCurrentExecutionFilePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.AppRelativeCurrentExecutionFilePath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AppRelativeCurrentExecutionFilePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AppRelativeCurrentExecutionFilePath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AppRelativeCurrentExecutionFilePath : string" Usage="System.Web.HttpRequest.AppRelativeCurrentExecutionFilePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-158">获取应用程序根目录的虚拟路径，并通过对应用程序根目录使用波形符 (\~) 表示法（例如，以“\~/page.aspx”的形式）使该路径成为相对路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-158">Gets the virtual path of the application root and makes it relative by using the tilde (\~) notation for the application root (as in "\~/page.aspx").</span></span></summary>
        <value><span data-ttu-id="c7841-159">当前请求的应用程序根的虚拟路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-159">The virtual path of the application root for the current request.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-160">使用此属性可提供在应用程序更改位置时仍保持不变的 URL 信息。</span><span class="sxs-lookup"><span data-stu-id="c7841-160">Use this property to provide URL information that will stay the same even if the application changes location.</span></span> <span data-ttu-id="c7841-161">这允许在测试环境和最终部署环境中使用相同的 URL 映射代码，或将其用于不同域中的 Web 应用程序副本。</span><span class="sxs-lookup"><span data-stu-id="c7841-161">This allows the same URL-mapping code to be used in a test environment and in the final deployment environment, or to be used by copies of Web applications in different domains.</span></span>



## Examples
 <span data-ttu-id="c7841-162">下面的示例使用 <xref:System.Web.HttpRequest.AppRelativeCurrentExecutionFilePath%2A> 属性将控件的 URL 设置为 <xref:System.Web.UI.WebControls.Image> 页所在的同一目录中的图像。</span><span class="sxs-lookup"><span data-stu-id="c7841-162">The following example uses the <xref:System.Web.HttpRequest.AppRelativeCurrentExecutionFilePath%2A> property to set the URL of an <xref:System.Web.UI.WebControls.Image> control to an image in the same directory as the page.</span></span> <span data-ttu-id="c7841-163">在目录结构的不同级别运行此页可查看生成的 <xref:System.Web.HttpRequest.AppRelativeCurrentExecutionFilePath%2A> 属性值。</span><span class="sxs-lookup"><span data-stu-id="c7841-163">Run this page at different levels of a directory structure to see the resulting <xref:System.Web.HttpRequest.AppRelativeCurrentExecutionFilePath%2A> property values.</span></span>

 [!code-aspx-csharp[System.Web.HttpRequest.AppRelativeCurrentExecutionPath#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest.AppRelativeCurrentExecutionPath/CS/AppRelativeCurrentExecutionPathCS.aspx#1)]
 [!code-aspx-vb[System.Web.HttpRequest.AppRelativeCurrentExecutionPath#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest.AppRelativeCurrentExecutionPath/VB/AppRelativeCurrentExecutionPathVB.aspx#1)]

 <span data-ttu-id="c7841-164">下面的示例使用 <xref:System.Web.HttpRequest.AppRelativeCurrentExecutionFilePath%2A> 属性，基于页面的当前路径以编程方式设置资源的路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-164">The following example uses the <xref:System.Web.HttpRequest.AppRelativeCurrentExecutionFilePath%2A> property to programmatically set the path to a resource, based on the current path of the page.</span></span>

 [!code-aspx-csharp[System.Web.HttpRequest.ApplicationPath#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest.ApplicationPath/CS/apprelativecurrentexecutionfilepath.aspx#1)]
 [!code-aspx-vb[System.Web.HttpRequest.ApplicationPath#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest.ApplicationPath/VB/apprelativecurrentexecutionfilepath.aspx#1)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BinaryRead">
      <MemberSignature Language="C#" Value="public byte[] BinaryRead (int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] BinaryRead(int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.BinaryRead(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function BinaryRead (count As Integer) As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ BinaryRead(int count);" />
      <MemberSignature Language="F#" Value="member this.BinaryRead : int -&gt; byte[]" Usage="httpRequest.BinaryRead count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="count"><span data-ttu-id="c7841-165">要读取的字节数。</span><span class="sxs-lookup"><span data-stu-id="c7841-165">The number of bytes to read.</span></span></param>
        <summary><span data-ttu-id="c7841-166">执行对当前输入流进行指定字节数的二进制读取。</span><span class="sxs-lookup"><span data-stu-id="c7841-166">Performs a binary read of a specified number of bytes from the current input stream.</span></span></summary>
        <returns><span data-ttu-id="c7841-167">一个字节数组。</span><span class="sxs-lookup"><span data-stu-id="c7841-167">A byte array.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-168"><xref:System.Web.HttpRequest.BinaryRead%2A>提供此方法是为了与 ASP 兼容。</span><span class="sxs-lookup"><span data-stu-id="c7841-168">The <xref:System.Web.HttpRequest.BinaryRead%2A> method is provided for compatibility with ASP.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c7841-169"><paramref name="count" /> 为 0。</span><span class="sxs-lookup"><span data-stu-id="c7841-169"><paramref name="count" /> is 0.</span></span>

<span data-ttu-id="c7841-170">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c7841-170">-or-</span></span>

 <span data-ttu-id="c7841-171"><paramref name="count" /> 大于可用的字节数。</span><span class="sxs-lookup"><span data-stu-id="c7841-171"><paramref name="count" /> is greater than the number of bytes available.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Browser">
      <MemberSignature Language="C#" Value="public System.Web.HttpBrowserCapabilities Browser { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpBrowserCapabilities Browser" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Browser" />
      <MemberSignature Language="VB.NET" Value="Public Property Browser As HttpBrowserCapabilities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpBrowserCapabilities ^ Browser { System::Web::HttpBrowserCapabilities ^ get(); void set(System::Web::HttpBrowserCapabilities ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Browser : System.Web.HttpBrowserCapabilities with get, set" Usage="System.Web.HttpRequest.Browser" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.HttpBrowserCapabilities</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-172">获取或设置有关正在请求的客户端的浏览器功能的信息。</span><span class="sxs-lookup"><span data-stu-id="c7841-172">Gets or sets information about the requesting client's browser capabilities.</span></span></summary>
        <value><span data-ttu-id="c7841-173">列出客户端浏览器功能的 <see cref="T:System.Web.HttpBrowserCapabilities" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-173">An <see cref="T:System.Web.HttpBrowserCapabilities" /> object listing the capabilities of the client's browser.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c7841-174">下面的代码示例将浏览器的功能列表返回到 HTML 页中的客户端。</span><span class="sxs-lookup"><span data-stu-id="c7841-174">The following code example sends a list of the browser's capabilities back to the client in an HTML page.</span></span>

 [!code-csharp[Classic HttpRequest.Browser Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.Browser Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.Browser Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.Browser Example/VB/source.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.ClientTarget" />
        <altmember cref="T:System.Web.HttpBrowserCapabilities" />
        <altmember cref="P:System.Web.HttpRequest.UserAgent" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/x3k2ssx2(v=vs.100)"><span data-ttu-id="c7841-175">ASP.NET 服务器控件和浏览器功能</span><span class="sxs-lookup"><span data-stu-id="c7841-175">ASP.NET Server Controls and Browser Capabilities</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ClientCertificate">
      <MemberSignature Language="C#" Value="public System.Web.HttpClientCertificate ClientCertificate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpClientCertificate ClientCertificate" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.ClientCertificate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientCertificate As HttpClientCertificate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpClientCertificate ^ ClientCertificate { System::Web::HttpClientCertificate ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientCertificate : System.Web.HttpClientCertificate" Usage="System.Web.HttpRequest.ClientCertificate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpClientCertificate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-176">获取当前请求的客户端安全证书。</span><span class="sxs-lookup"><span data-stu-id="c7841-176">Gets the current request's client security certificate.</span></span></summary>
        <value><span data-ttu-id="c7841-177">包含有关客户端安全证书设置的信息的 <see cref="T:System.Web.HttpClientCertificate" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-177">An <see cref="T:System.Web.HttpClientCertificate" /> object containing information about the client's security certificate settings.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c7841-178">下面的代码示例在 HTML 页中将客户端的证书设置发送回客户端。</span><span class="sxs-lookup"><span data-stu-id="c7841-178">The following code example sends the client's certificate settings back to the client in an HTML page.</span></span>

 [!code-csharp[Classic HttpRequest.ClientCertificate Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.ClientCertificate Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.ClientCertificate Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.ClientCertificate Example/VB/source.vb#1)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentEncoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding ContentEncoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding ContentEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.ContentEncoding" />
      <MemberSignature Language="VB.NET" Value="Public Property ContentEncoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ ContentEncoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContentEncoding : System.Text.Encoding with get, set" Usage="System.Web.HttpRequest.ContentEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-179">获取或设置实体主体的字符集。</span><span class="sxs-lookup"><span data-stu-id="c7841-179">Gets or sets the character set of the entity-body.</span></span></summary>
        <value><span data-ttu-id="c7841-180">表示客户端的字符集的 <see cref="T:System.Text.Encoding" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-180">An <see cref="T:System.Text.Encoding" /> object representing the client's character set.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-181">可以在配置文件 [ (ASP.NET 设置架构) 中的全球化元素 ](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/hy4kkhe0(v=vs.100)) 中指定默认内容编码。</span><span class="sxs-lookup"><span data-stu-id="c7841-181">Default content encoding can be specified in the [globalization Element (ASP.NET Settings Schema)](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/hy4kkhe0(v=vs.100)) of a configuration file.</span></span> <span data-ttu-id="c7841-182">如果客户端也指定了内容编码，则会重写默认配置设置。</span><span class="sxs-lookup"><span data-stu-id="c7841-182">If content encoding is also specified by the client, the default configuration settings are overridden.</span></span>



## Examples
 <span data-ttu-id="c7841-183">下面的代码示例将一个表示当前 HTTP 编码说明的值分配给一个字符串变量。</span><span class="sxs-lookup"><span data-stu-id="c7841-183">The following code example assigns a value representing the description of the current HTTP encoding to a string variable.</span></span>

 [!code-csharp[Classic HttpRequest.ContentEncoding Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.ContentEncoding Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.ContentEncoding Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.ContentEncoding Example/VB/source.vb#1)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentLength">
      <MemberSignature Language="C#" Value="public int ContentLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ContentLength" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.ContentLength" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContentLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ContentLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ContentLength : int" Usage="System.Web.HttpRequest.ContentLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-184">指定客户端发送的内容的长度(以字节为单位)。</span><span class="sxs-lookup"><span data-stu-id="c7841-184">Specifies the length, in bytes, of content sent by the client.</span></span></summary>
        <value><span data-ttu-id="c7841-185">客户端发送的内容的长度(以字节为单位)。</span><span class="sxs-lookup"><span data-stu-id="c7841-185">The length, in bytes, of content sent by the client.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c7841-186">下面的代码示例将表示传入请求的内容长度的值分配给整数变量。</span><span class="sxs-lookup"><span data-stu-id="c7841-186">The following code example assigns the value representing the content length of the incoming request to an integer variable.</span></span>

 [!code-csharp[Classic HttpRequest.ContentLength Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.ContentLength Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.ContentLength Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.ContentLength Example/VB/source.vb#1)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentType">
      <MemberSignature Language="C#" Value="public string ContentType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentType" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.ContentType" />
      <MemberSignature Language="VB.NET" Value="Public Property ContentType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ContentType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContentType : string with get, set" Usage="System.Web.HttpRequest.ContentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-187">获取或设置传入请求的 MIME 内容类型。</span><span class="sxs-lookup"><span data-stu-id="c7841-187">Gets or sets the MIME content type of the incoming request.</span></span></summary>
        <value><span data-ttu-id="c7841-188">表示传入请求的 MIME 内容类型的字符串，例如，“text/html”。</span><span class="sxs-lookup"><span data-stu-id="c7841-188">A string representing the MIME content type of the incoming request, for example, "text/html".</span></span> <span data-ttu-id="c7841-189">其他常见 MIME 类型包括“audio.wav”、“image/gif”和“application/pdf”。</span><span class="sxs-lookup"><span data-stu-id="c7841-189">Additional common MIME types include "audio.wav", "image/gif", and "application/pdf".</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c7841-190">下面的代码示例将表示传入请求的内容类型的值分配给字符串变量。</span><span class="sxs-lookup"><span data-stu-id="c7841-190">The following code example assigns the value representing the content type of the incoming request to a string variable.</span></span>

 [!code-csharp[Classic HttpRequest.ContentType Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.ContentType Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.ContentType Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.ContentType Example/VB/source.vb#1)]

 <span data-ttu-id="c7841-191">下面的示例演示了此代码可能生成的输出。</span><span class="sxs-lookup"><span data-stu-id="c7841-191">The following example shows output that might be produced by this code.</span></span>

 `GET`

 `127.0.0.1`

 `127.0.0.1`

 `GET`

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cookies">
      <MemberSignature Language="C#" Value="public System.Web.HttpCookieCollection Cookies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpCookieCollection Cookies" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Cookies" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Cookies As HttpCookieCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpCookieCollection ^ Cookies { System::Web::HttpCookieCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Cookies : System.Web.HttpCookieCollection" Usage="System.Web.HttpRequest.Cookies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpCookieCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-192">获取客户端发送的 cookie 的集合。</span><span class="sxs-lookup"><span data-stu-id="c7841-192">Gets a collection of cookies sent by the client.</span></span></summary>
        <value><span data-ttu-id="c7841-193">表示客户端的 cookie 变量的 <see cref="T:System.Web.HttpCookieCollection" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-193">An <see cref="T:System.Web.HttpCookieCollection" /> object representing the client's cookie variables.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-194">ASP.NET 包括两个内部 cookie 集合。</span><span class="sxs-lookup"><span data-stu-id="c7841-194">ASP.NET includes two intrinsic cookie collections.</span></span> <span data-ttu-id="c7841-195">通过的集合访问的集合 <xref:System.Web.HttpRequest.Cookies%2A> <xref:System.Web.HttpRequest> 包含客户端向标头中的服务器传输的 cookie `Cookie` 。</span><span class="sxs-lookup"><span data-stu-id="c7841-195">The collection accessed through the <xref:System.Web.HttpRequest.Cookies%2A> collection of <xref:System.Web.HttpRequest> contains cookies transmitted by the client to the server in the `Cookie` header.</span></span> <span data-ttu-id="c7841-196">通过的集合访问的集合 <xref:System.Web.HttpResponse.Cookies%2A> <xref:System.Web.HttpResponse> 包含在服务器上创建并在标头中传输到客户端的新 cookie `Set-Cookie` 。</span><span class="sxs-lookup"><span data-stu-id="c7841-196">The collection accessed through the <xref:System.Web.HttpResponse.Cookies%2A> collection of <xref:System.Web.HttpResponse> contains new cookies created on the server and transmitted to the client in the `Set-Cookie` header.</span></span>

> [!NOTE]
>  <span data-ttu-id="c7841-197">使用集合添加 cookie 后 <xref:System.Web.HttpResponse.Cookies%2A?displayProperty=nameWithType> ，cookie 会立即出现在 <xref:System.Web.HttpRequest.Cookies%2A?displayProperty=nameWithType> 集合中，即使尚未将响应发送到客户端也是如此。</span><span class="sxs-lookup"><span data-stu-id="c7841-197">After you add a cookie by using the <xref:System.Web.HttpResponse.Cookies%2A?displayProperty=nameWithType> collection, the cookie is immediately available in the <xref:System.Web.HttpRequest.Cookies%2A?displayProperty=nameWithType> collection, even if the response has not been sent to the client.</span></span>



## Examples
 <span data-ttu-id="c7841-198">下面的代码示例循环遍历客户端发送的所有 cookie，并将每个 cookie 的名称、到期日期、安全参数和值发送到 HTTP 输出中。</span><span class="sxs-lookup"><span data-stu-id="c7841-198">The following code example loops through all cookies sent by the client and sends the name, expiration date, security parameter, and values of each cookie to the HTTP output.</span></span>

 [!code-csharp[Classic HttpRequest.Cookies Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.Cookies Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.Cookies Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.Cookies Example/VB/source.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpRequest.ValidateInput" />
        <altmember cref="P:System.Web.HttpRequest.Form" />
        <altmember cref="P:System.Web.HttpRequest.QueryString" />
      </Docs>
    </Member>
    <Member MemberName="CurrentExecutionFilePath">
      <MemberSignature Language="C#" Value="public string CurrentExecutionFilePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentExecutionFilePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.CurrentExecutionFilePath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentExecutionFilePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrentExecutionFilePath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentExecutionFilePath : string" Usage="System.Web.HttpRequest.CurrentExecutionFilePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-199">获取当前请求的虚拟路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-199">Gets the virtual path of the current request.</span></span></summary>
        <value><span data-ttu-id="c7841-200">当前请求的虚拟路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-200">The virtual path of the current request.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-201"><xref:System.Web.HttpRequest.CurrentExecutionFilePath%2A> 返回当前正在执行的页处理程序的文件路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-201"><xref:System.Web.HttpRequest.CurrentExecutionFilePath%2A> returns the file path to the currently executing page handler.</span></span> <span data-ttu-id="c7841-202">对于使用和方法的重定向方案， <xref:System.Web.HttpServerUtility.Execute%2A> <xref:System.Web.HttpServerUtility.Transfer%2A> 这意味着 <xref:System.Web.HttpRequest.CurrentExecutionFilePath%2A> 属性返回重定向到 (子页) 的页的路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-202">For redirect scenarios using <xref:System.Web.HttpServerUtility.Execute%2A> and <xref:System.Web.HttpServerUtility.Transfer%2A> methods this means that the <xref:System.Web.HttpRequest.CurrentExecutionFilePath%2A> property returns the path to the page redirected to (child page).</span></span> <span data-ttu-id="c7841-203">但是，当客户端重定向到另一页时， <xref:System.Web.HttpRequest.FilePath%2A> 属性将返回原始页的路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-203">However, when the client is redirected to another page, the <xref:System.Web.HttpRequest.FilePath%2A> property returns the path to the original page.</span></span>



## Examples
 <span data-ttu-id="c7841-204">下面的代码示例使用 <xref:System.Web.HttpUtility.HtmlEncode%2A> 方法对属性的值进行 HTML 编码 <xref:System.Web.HttpRequest.CurrentExecutionFilePath%2A> ，并使用 <xref:System.IO.TextWriter.WriteLine%2A> 方法将编码的值写入文件。</span><span class="sxs-lookup"><span data-stu-id="c7841-204">The following code example uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to HTML-encode the value of the <xref:System.Web.HttpRequest.CurrentExecutionFilePath%2A> property and the <xref:System.IO.TextWriter.WriteLine%2A> method to write the encoded value to the file.</span></span> <span data-ttu-id="c7841-205">此代码示例是为类提供的更大示例的一部分 <xref:System.Web.HttpRequest> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-205">This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.</span></span>

 [!code-csharp[System.Web.HttpRequest_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#2)]
 [!code-vb[System.Web.HttpRequest_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#2)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpRequest.FilePath" />
        <altmember cref="P:System.Web.HttpRequest.Path" />
        <altmember cref="P:System.Web.HttpRequest.PathInfo" />
        <altmember cref="M:System.Web.HttpServerUtility.Execute(System.String)" />
        <altmember cref="M:System.Web.HttpServerUtility.Transfer(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="CurrentExecutionFilePathExtension">
      <MemberSignature Language="C#" Value="public string CurrentExecutionFilePathExtension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentExecutionFilePathExtension" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.CurrentExecutionFilePathExtension" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentExecutionFilePathExtension As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CurrentExecutionFilePathExtension { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentExecutionFilePathExtension : string" Usage="System.Web.HttpRequest.CurrentExecutionFilePathExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-206">获取 <see cref="P:System.Web.HttpRequest.CurrentExecutionFilePath" /> 属性中指定的文件名的扩展名。</span><span class="sxs-lookup"><span data-stu-id="c7841-206">Gets the extension of the file name that is specified in the <see cref="P:System.Web.HttpRequest.CurrentExecutionFilePath" /> property.</span></span></summary>
        <value><span data-ttu-id="c7841-207"><see cref="P:System.Web.HttpRequest.CurrentExecutionFilePath" /> 属性中指定的文件名的扩展名。</span><span class="sxs-lookup"><span data-stu-id="c7841-207">The extension of the file name that is specified in the <see cref="P:System.Web.HttpRequest.CurrentExecutionFilePath" /> property.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilePath">
      <MemberSignature Language="C#" Value="public string FilePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FilePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.FilePath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FilePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FilePath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FilePath : string" Usage="System.Web.HttpRequest.FilePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-208">获取当前请求的虚拟路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-208">Gets the virtual path of the current request.</span></span></summary>
        <value><span data-ttu-id="c7841-209">当前请求的虚拟路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-209">The virtual path of the current request.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-210"><xref:System.Web.HttpRequest.FilePath%2A>属性不包括 <xref:System.Web.HttpRequest.PathInfo%2A> 尾部。</span><span class="sxs-lookup"><span data-stu-id="c7841-210">The <xref:System.Web.HttpRequest.FilePath%2A> property does not include the <xref:System.Web.HttpRequest.PathInfo%2A> trailer.</span></span> <span data-ttu-id="c7841-211">例如，对于 URL `http://www.contoso.com/virdir/page.html/tail` ， <xref:System.Web.HttpRequest.FilePath%2A> 值为/virdir/page.html。</span><span class="sxs-lookup"><span data-stu-id="c7841-211">For example, for the URL `http://www.contoso.com/virdir/page.html/tail`, the <xref:System.Web.HttpRequest.FilePath%2A> value is /virdir/page.html.</span></span>



## Examples
 <span data-ttu-id="c7841-212">下面的代码示例使用 <xref:System.Web.HttpUtility.HtmlEncode%2A> 方法对属性的值进行 HTML 编码 <xref:System.Web.HttpRequest.FilePath%2A> ，并使用 <xref:System.IO.TextWriter.WriteLine%2A> 方法将编码的值写入文件。</span><span class="sxs-lookup"><span data-stu-id="c7841-212">The following code example uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to HTML-encode the value of the <xref:System.Web.HttpRequest.FilePath%2A> property and the <xref:System.IO.TextWriter.WriteLine%2A> method to write the encoded value to the file.</span></span> <span data-ttu-id="c7841-213">此代码示例是为类提供的更大示例的一部分 <xref:System.Web.HttpRequest> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-213">This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.</span></span>

 [!code-csharp[System.Web.HttpRequest_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#2)]
 [!code-vb[System.Web.HttpRequest_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#2)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpRequest.PathInfo" />
        <altmember cref="P:System.Web.HttpRequest.Path" />
      </Docs>
    </Member>
    <Member MemberName="Files">
      <MemberSignature Language="C#" Value="public System.Web.HttpFileCollection Files { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.HttpFileCollection Files" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Files" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Files As HttpFileCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::HttpFileCollection ^ Files { System::Web::HttpFileCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Files : System.Web.HttpFileCollection" Usage="System.Web.HttpRequest.Files" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.HttpFileCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-214">获取采用多部分 MIME 格式的由客户端上载的文件的集合。</span><span class="sxs-lookup"><span data-stu-id="c7841-214">Gets the collection of files uploaded by the client, in multipart MIME format.</span></span></summary>
        <value><span data-ttu-id="c7841-215">表示客户端上载的文件集合的 <see cref="T:System.Web.HttpFileCollection" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-215">An <see cref="T:System.Web.HttpFileCollection" /> object representing a collection of files uploaded by the client.</span></span> <span data-ttu-id="c7841-216"><see cref="T:System.Web.HttpFileCollection" /> 对象的项属于 <see cref="T:System.Web.HttpPostedFile" /> 类型。</span><span class="sxs-lookup"><span data-stu-id="c7841-216">The items of the <see cref="T:System.Web.HttpFileCollection" /> object are of type <see cref="T:System.Web.HttpPostedFile" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-217">仅当 HTTP 请求 `Content-Type` 值为 "多部分/窗体数据" 时，才填充文件集合。</span><span class="sxs-lookup"><span data-stu-id="c7841-217">The file collection is populated only when the HTTP request `Content-Type` value is "multipart/form-data".</span></span>



## Examples
 <span data-ttu-id="c7841-218">下面的代码示例显示集合中所有文件的名称 <xref:System.Web.HttpRequest.Files%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-218">The following code example displays the names of all files in the <xref:System.Web.HttpRequest.Files%2A> collection.</span></span>

 [!code-csharp[Classic HttpRequest.Files Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.Files Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.Files Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.Files Example/VB/source.vb#1)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public System.IO.Stream Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream Filter" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Filter" />
      <MemberSignature Language="VB.NET" Value="Public Property Filter As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ Filter { System::IO::Stream ^ get(); void set(System::IO::Stream ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Filter : System.IO.Stream with get, set" Usage="System.Web.HttpRequest.Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-219">获取或设置在读取当前输入流时要使用的筛选器。</span><span class="sxs-lookup"><span data-stu-id="c7841-219">Gets or sets the filter to use when reading the current input stream.</span></span></summary>
        <value><span data-ttu-id="c7841-220">要用作筛选器的 <see cref="T:System.IO.Stream" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-220">A <see cref="T:System.IO.Stream" /> object to be used as the filter.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c7841-221">下面的代码示例创建两个新类， `QQQ1` 并 `QQQ2` 筛选 <xref:System.Web.HttpRequest.InputStream%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-221">The following code example creates two new classes, `QQQ1` and `QQQ2` that filter the <xref:System.Web.HttpRequest.InputStream%2A>.</span></span> <span data-ttu-id="c7841-222">将类放入 ASP.NET 应用程序的目录中的 Global.asa 文件，以便筛选应用程序中所有 ASP.NET 网页的所有输入。</span><span class="sxs-lookup"><span data-stu-id="c7841-222">Put the classes into the Global.asax file in an ASP.NET application's directory so that all input for all ASP.NET Web pages in the application will be filtered.</span></span>

 [!code-aspx-csharp[System.Web.HttpRequest.Filter#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest.Filter/CS/systemwebhttprequestfilter.cs.aspx#1)]
 [!code-aspx-vb[System.Web.HttpRequest.Filter#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest.Filter/VB/systemwebhttprequestfilter.vb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c7841-223">指定的 <see cref="T:System.IO.Stream" /> 无效。</span><span class="sxs-lookup"><span data-stu-id="c7841-223">The specified <see cref="T:System.IO.Stream" /> is invalid.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Form">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameValueCollection Form { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection Form" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Form" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Form As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::NameValueCollection ^ Form { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Form : System.Collections.Specialized.NameValueCollection" Usage="System.Web.HttpRequest.Form" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-224">获取窗体变量集合。</span><span class="sxs-lookup"><span data-stu-id="c7841-224">Gets a collection of form variables.</span></span></summary>
        <value><span data-ttu-id="c7841-225">表示窗体变量集合的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</span><span class="sxs-lookup"><span data-stu-id="c7841-225">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> representing a collection of form variables.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-226"><xref:System.Web.HttpRequest.Form%2A>当 HTTP 请求 `Content-Type` 值为 "url 编码" 或 "多部分/窗体数据" 时，将填充该属性。</span><span class="sxs-lookup"><span data-stu-id="c7841-226">The <xref:System.Web.HttpRequest.Form%2A> property is populated when the HTTP request `Content-Type` value is either "application/x-www-form-urlencoded" or "multipart/form-data".</span></span>



## Examples
 <span data-ttu-id="c7841-227">下面的示例演示如何读取从浏览器发布的窗体集合中的值。</span><span class="sxs-lookup"><span data-stu-id="c7841-227">The following example shows how to read the values in the form collection posted from a browser.</span></span> <span data-ttu-id="c7841-228">集合中的每个名称/值对都表示一个窗体中的控件及其值。</span><span class="sxs-lookup"><span data-stu-id="c7841-228">Each name/value pair in the collection represents a control in the form and its value.</span></span>

 [!code-csharp[Classic HttpRequest.Form Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.Form Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.Form Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.Form Example/VB/source.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpRequest.ValidateInput" />
        <altmember cref="P:System.Web.HttpRequest.Cookies" />
        <altmember cref="P:System.Web.HttpRequest.QueryString" />
      </Docs>
    </Member>
    <Member MemberName="GetBufferedInputStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetBufferedInputStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetBufferedInputStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.GetBufferedInputStream" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBufferedInputStream () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetBufferedInputStream();" />
      <MemberSignature Language="F#" Value="member this.GetBufferedInputStream : unit -&gt; System.IO.Stream" Usage="httpRequest.GetBufferedInputStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7841-229">获取一个 <see cref="T:System.IO.Stream" /> 对象，该对象可用于读取传入的 HTTP 实体主体。</span><span class="sxs-lookup"><span data-stu-id="c7841-229">Gets a <see cref="T:System.IO.Stream" /> object that can be used to read the incoming HTTP entity body.</span></span></summary>
        <returns><span data-ttu-id="c7841-230">可用于读取传入的 HTTP 实体主体的 <see cref="T:System.IO.Stream" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-230">A <see cref="T:System.IO.Stream" /> object that can be used to read the incoming HTTP entity body.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-231">此方法与相同， <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> 只不过它还会复制读取到由 ASP.NET 使用的内部存储的字节，以填充 <xref:System.Web.HttpRequest.Form%2A> 、 <xref:System.Web.HttpRequest.Files%2A> 和 <xref:System.Web.HttpRequest.InputStream%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="c7841-231">This method is identical to <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> except that it also copies the bytes that are read to the internal storage that is used by ASP.NET to populate the <xref:System.Web.HttpRequest.Form%2A>, <xref:System.Web.HttpRequest.Files%2A>, and <xref:System.Web.HttpRequest.InputStream%2A> properties.</span></span> <span data-ttu-id="c7841-232">由于保留了此信息，如 ASP.NET Web 窗体页面（.aspx 文件）这样的下游代码将成功运行。</span><span class="sxs-lookup"><span data-stu-id="c7841-232">Because this information is preserved, downstream code such as ASP.NET Web Forms pages (.aspx files) will run successfully.</span></span> <span data-ttu-id="c7841-233">这不同于使用 <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> 方法的情况。</span><span class="sxs-lookup"><span data-stu-id="c7841-233">This is not the case with the <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> method.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c7841-234">已加载和分析请求的实体主体。</span><span class="sxs-lookup"><span data-stu-id="c7841-234">The request's entity body has already been loaded and parsed.</span></span> <span data-ttu-id="c7841-235">导致加载和分析实体正文的属性的示例包括：</span><span class="sxs-lookup"><span data-stu-id="c7841-235">Examples of properties that cause the entity body to be loaded and parsed include the following:</span></span>

<span data-ttu-id="c7841-236">-   <see cref="P:System.Web.HttpRequest.Form" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="c7841-236">-   The <see cref="P:System.Web.HttpRequest.Form" /> property.</span></span>

<span data-ttu-id="c7841-237">-   <see cref="P:System.Web.HttpRequest.Files" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="c7841-237">-   The <see cref="P:System.Web.HttpRequest.Files" /> property.</span></span>

<span data-ttu-id="c7841-238">-   <see cref="P:System.Web.HttpRequest.InputStream" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="c7841-238">-   The <see cref="P:System.Web.HttpRequest.InputStream" /> property.</span></span>

<span data-ttu-id="c7841-239">-   <see cref="M:System.Web.HttpRequest.GetBufferlessInputStream" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="c7841-239">-   The <see cref="M:System.Web.HttpRequest.GetBufferlessInputStream" /> method.</span></span>

<span data-ttu-id="c7841-240">要避免此异常，请首先调用 <see cref="P:System.Web.HttpRequest.ReadEntityBodyMode" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="c7841-240">To avoid this exception, call the <see cref="P:System.Web.HttpRequest.ReadEntityBodyMode" /> method first.</span></span> <span data-ttu-id="c7841-241">如果客户在实体正文读取时断开连接，则也会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="c7841-241">This exception is also thrown if the client disconnects while the entity body is being read.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetBufferlessInputStream">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c7841-242">获取一个 <see cref="T:System.IO.Stream" /> 对象，该对象可用于读取传入的 HTTP 实体主体。</span><span class="sxs-lookup"><span data-stu-id="c7841-242">Gets a <see cref="T:System.IO.Stream" /> object that can be used to read the incoming HTTP entity body.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetBufferlessInputStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetBufferlessInputStream ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetBufferlessInputStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.GetBufferlessInputStream" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBufferlessInputStream () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetBufferlessInputStream();" />
      <MemberSignature Language="F#" Value="member this.GetBufferlessInputStream : unit -&gt; System.IO.Stream" Usage="httpRequest.GetBufferlessInputStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7841-243">获取一个 <see cref="T:System.IO.Stream" /> 对象，该对象可用于读取传入的 HTTP 实体主体。</span><span class="sxs-lookup"><span data-stu-id="c7841-243">Gets a <see cref="T:System.IO.Stream" /> object that can be used to read the incoming HTTP entity body.</span></span></summary>
        <returns><span data-ttu-id="c7841-244">可用于读取传入的 HTTP 实体主体的 <see cref="T:System.IO.Stream" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-244">A <see cref="T:System.IO.Stream" /> object that can be used to read the incoming HTTP entity body.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-245">此方法提供使用属性的替代方法 <xref:System.Web.HttpRequest.InputStream%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-245">This method provides an alternative to using the <xref:System.Web.HttpRequest.InputStream%2A> property.</span></span> <span data-ttu-id="c7841-246"><xref:System.Web.HttpRequest.InputStream%2A>属性将等待，直到收到整个请求后再返回 <xref:System.IO.Stream> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-246">The <xref:System.Web.HttpRequest.InputStream%2A> property waits until the whole request has been received before it returns a <xref:System.IO.Stream> object.</span></span> <span data-ttu-id="c7841-247">与此相反， <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> 方法会 <xref:System.IO.Stream> 立即返回对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-247">In contrast, the <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> method returns the <xref:System.IO.Stream> object immediately.</span></span> <span data-ttu-id="c7841-248">您可以使用方法来开始处理实体正文，然后再接收正文的完整内容。</span><span class="sxs-lookup"><span data-stu-id="c7841-248">You can use the method to begin processing the entity body before the complete contents of the body have been received.</span></span>

 <span data-ttu-id="c7841-249">实体主体 (或尽可能多的实体正文，并收到) 仅当你使用此方法返回的对象通过调用方法（如方法）来读取流时返回 <xref:System.IO.Stream.Read%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-249">The entity body (or as much of it as you request and has been received) is returned only when you use the object that is returned by this method to read the stream, by calling methods such as the <xref:System.IO.Stream.Read%2A> method.</span></span> <span data-ttu-id="c7841-250">使用方法的参数 <xref:System.IO.Stream.Read%2A> 指定要读取的实体正文的数量。</span><span class="sxs-lookup"><span data-stu-id="c7841-250">You use parameters of the <xref:System.IO.Stream.Read%2A> method to specify how much of the entity body to read.</span></span>

 <span data-ttu-id="c7841-251"><xref:System.IO.Stream>ASP.NET 从此方法返回的对象支持同步和异步读取方法。</span><span class="sxs-lookup"><span data-stu-id="c7841-251">The <xref:System.IO.Stream> object returned by ASP.NET from this method supports both synchronous and asynchronous read methods.</span></span> <span data-ttu-id="c7841-252"><xref:System.IO.Stream>对象同时实现 <xref:System.IO.Stream.BeginRead%2A> 和 <xref:System.IO.Stream.EndRead%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="c7841-252">The <xref:System.IO.Stream> object implements both the <xref:System.IO.Stream.BeginRead%2A> and <xref:System.IO.Stream.EndRead%2A> methods.</span></span> <span data-ttu-id="c7841-253">使用异步方法，你可以在块中异步读取请求实体，而 ASP.NET 将在异步读取循环的每次迭代之间释放当前线程。</span><span class="sxs-lookup"><span data-stu-id="c7841-253">The asynchronous methods let you asynchronously read the request entity in chunks, while ASP.NET releases the current thread in between each iteration of an asynchronous read loop.</span></span>

 <span data-ttu-id="c7841-254">此方法在以下情况下很有用：请求正在上传大型文件，并且想要在上传完成前访问文件内容。</span><span class="sxs-lookup"><span data-stu-id="c7841-254">This method can be useful if the request is uploading a large file and you want to begin accessing the file contents before the upload is finished.</span></span> <span data-ttu-id="c7841-255">但是，只应将此方法用于需要接管实体正文的所有处理的方案。</span><span class="sxs-lookup"><span data-stu-id="c7841-255">However, you should only use this method for scenarios where you want to take over all processing of the entity body.</span></span> <span data-ttu-id="c7841-256">这意味着不能从 .aspx 页面使用此方法，因为 .aspx 页面运行时，实体正文已被读取。</span><span class="sxs-lookup"><span data-stu-id="c7841-256">This means that you cannot use this method from an .aspx page, because by the time an .aspx page runs, the entity body has already been read.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c7841-257">已加载和分析请求的实体主体。</span><span class="sxs-lookup"><span data-stu-id="c7841-257">The request's entity body has already been loaded and parsed.</span></span> <span data-ttu-id="c7841-258">导致加载和分析实体正文的属性的示例包括：</span><span class="sxs-lookup"><span data-stu-id="c7841-258">Examples of properties that cause the entity body to be loaded and parsed include the following:</span></span>

-   <see cref="P:System.Web.HttpRequest.Form" />

-   <see cref="P:System.Web.HttpRequest.InputStream" />

-   <see cref="P:System.Web.HttpRequest.Files" />

-   <see cref="M:System.Web.HttpRequest.GetBufferedInputStream" />

<span data-ttu-id="c7841-259">要避免此异常，请首先调用 <see cref="P:System.Web.HttpRequest.ReadEntityBodyMode" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="c7841-259">To avoid this exception, call the <see cref="P:System.Web.HttpRequest.ReadEntityBodyMode" /> method first.</span></span> <span data-ttu-id="c7841-260">如果客户在实体正文读取时断开连接，则也会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="c7841-260">This exception is also thrown if the client disconnects while the entity body is being read.</span></span></exception>
        <altmember cref="M:System.Web.HttpRequest.GetBufferedInputStream" />
      </Docs>
    </Member>
    <Member MemberName="GetBufferlessInputStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream GetBufferlessInputStream (bool disableMaxRequestLength);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream GetBufferlessInputStream(bool disableMaxRequestLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.GetBufferlessInputStream(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetBufferlessInputStream (disableMaxRequestLength As Boolean) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ GetBufferlessInputStream(bool disableMaxRequestLength);" />
      <MemberSignature Language="F#" Value="member this.GetBufferlessInputStream : bool -&gt; System.IO.Stream" Usage="httpRequest.GetBufferlessInputStream disableMaxRequestLength" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disableMaxRequestLength" Type="System.Boolean" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="disableMaxRequestLength"><span data-ttu-id="c7841-261">若要禁用请求长度限制，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c7841-261"><see langword="true" /> to disable the request-length limit; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="c7841-262">获取能被用于读取正在到来的 HTTP 实体主体的 <see cref="T:System.IO.Stream" /> 对象，同时随意地禁止设置在 <see cref="P:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength" /> 属性中的请求长度限制。</span><span class="sxs-lookup"><span data-stu-id="c7841-262">Gets a <see cref="T:System.IO.Stream" /> object that can be used to read the incoming HTTP entity body, optionally disabling the request-length limit that is set in the <see cref="P:System.Web.Configuration.HttpRuntimeSection.MaxRequestLength" /> property.</span></span></summary>
        <returns><span data-ttu-id="c7841-263">可用于读取传入的 HTTP 实体主体的 <see cref="T:System.IO.Stream" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-263">A <see cref="T:System.IO.Stream" /> object that can be used to read the incoming HTTP entity body.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-264">有关此方法的详细信息，请参阅 <xref:System.Web.HttpRequest.GetBufferlessInputStream> 重载。</span><span class="sxs-lookup"><span data-stu-id="c7841-264">For more information about this method, see the <xref:System.Web.HttpRequest.GetBufferlessInputStream> overload.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c7841-265">已加载和分析请求的实体主体。</span><span class="sxs-lookup"><span data-stu-id="c7841-265">The request's entity body has already been loaded and parsed.</span></span> <span data-ttu-id="c7841-266">导致加载和分析实体正文的属性的示例包括：</span><span class="sxs-lookup"><span data-stu-id="c7841-266">Examples of properties that cause the entity body to be loaded and parsed include the following:</span></span>

<span data-ttu-id="c7841-267">-   <see cref="P:System.Web.HttpRequest.Form" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="c7841-267">-   The <see cref="P:System.Web.HttpRequest.Form" /> property.</span></span>

<span data-ttu-id="c7841-268">-   <see cref="P:System.Web.HttpRequest.Files" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="c7841-268">-   The <see cref="P:System.Web.HttpRequest.Files" /> property.</span></span>

<span data-ttu-id="c7841-269">-   <see cref="P:System.Web.HttpRequest.InputStream" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="c7841-269">-   The <see cref="P:System.Web.HttpRequest.InputStream" /> property.</span></span>

<span data-ttu-id="c7841-270">-   <see cref="M:System.Web.HttpRequest.GetBufferedInputStream" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="c7841-270">-   The <see cref="M:System.Web.HttpRequest.GetBufferedInputStream" /> method.</span></span>

<span data-ttu-id="c7841-271">要避免此异常，请首先调用 <see cref="P:System.Web.HttpRequest.ReadEntityBodyMode" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="c7841-271">To avoid this exception, call the <see cref="P:System.Web.HttpRequest.ReadEntityBodyMode" /> method first.</span></span> <span data-ttu-id="c7841-272">如果客户在实体正文读取时断开连接，则也会引发此异常。</span><span class="sxs-lookup"><span data-stu-id="c7841-272">This exception is also thrown if the client disconnects while the entity body is being read.</span></span></exception>
        <altmember cref="M:System.Web.HttpRequest.GetBufferedInputStream" />
      </Docs>
    </Member>
    <Member MemberName="Headers">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameValueCollection Headers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection Headers" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Headers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Headers As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::NameValueCollection ^ Headers { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Headers : System.Collections.Specialized.NameValueCollection" Usage="System.Web.HttpRequest.Headers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-273">获取 HTTP 头集合。</span><span class="sxs-lookup"><span data-stu-id="c7841-273">Gets a collection of HTTP headers.</span></span></summary>
        <value><span data-ttu-id="c7841-274">标头的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</span><span class="sxs-lookup"><span data-stu-id="c7841-274">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> of headers.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-275">有关所有可能的标头的列表，请参阅 W3C 网站上的 [请求标头字段](https://go.microsoft.com/fwlink/?LinkId=73147) 。</span><span class="sxs-lookup"><span data-stu-id="c7841-275">For a listing of all possible headers, see [Request Header Fields](https://go.microsoft.com/fwlink/?LinkId=73147) on the W3C Web site.</span></span>



## Examples
 <span data-ttu-id="c7841-276">下面的代码示例显示 HTTP 请求中所有标头的名称和值。</span><span class="sxs-lookup"><span data-stu-id="c7841-276">The following code example displays the names and values of all headers in the HTTP request.</span></span>

 [!code-csharp[Classic HttpRequest.Headers Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.Headers Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.Headers Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.Headers Example/VB/source.vb#1)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HttpChannelBinding">
      <MemberSignature Language="C#" Value="public System.Security.Authentication.ExtendedProtection.ChannelBinding HttpChannelBinding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Authentication.ExtendedProtection.ChannelBinding HttpChannelBinding" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.HttpChannelBinding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HttpChannelBinding As ChannelBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Authentication::ExtendedProtection::ChannelBinding ^ HttpChannelBinding { System::Security::Authentication::ExtendedProtection::ChannelBinding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HttpChannelBinding : System.Security.Authentication.ExtendedProtection.ChannelBinding" Usage="System.Web.HttpRequest.HttpChannelBinding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Authentication.ExtendedProtection.ChannelBinding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-277">获取当前 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 实例的 <see cref="T:System.Web.HttpWorkerRequest" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-277">Gets the <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> object of the current <see cref="T:System.Web.HttpWorkerRequest" /> instance.</span></span></summary>
        <value><span data-ttu-id="c7841-278">当前 <see cref="T:System.Web.HttpWorkerRequest" /> 实例的 <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-278">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> object of the current <see cref="T:System.Web.HttpWorkerRequest" /> instance.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="c7841-279">当前的 <see cref="T:System.Web.HttpWorkerRequest" /> 对象不是 <see langword="System.Web.Hosting.IIS7WorkerRequest" /> 对象或 <see langword="System.Web.Hosting.ISAPIWorkerRequestInProc" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-279">The current <see cref="T:System.Web.HttpWorkerRequest" /> object is not a <see langword="System.Web.Hosting.IIS7WorkerRequest" /> object or a <see langword="System.Web.Hosting.ISAPIWorkerRequestInProc" /> object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="HttpMethod">
      <MemberSignature Language="C#" Value="public string HttpMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HttpMethod" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.HttpMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HttpMethod As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ HttpMethod { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.HttpMethod : string" Usage="System.Web.HttpRequest.HttpMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-280">获取客户端使用的 HTTP 数据传输方法(如 <see langword="GET" />、<see langword="POST" /> 或 <see langword="HEAD" />)。</span><span class="sxs-lookup"><span data-stu-id="c7841-280">Gets the HTTP data transfer method (such as <see langword="GET" />, <see langword="POST" />, or <see langword="HEAD" />) used by the client.</span></span></summary>
        <value><span data-ttu-id="c7841-281">客户端所用的 HTTP 数据传输方法。</span><span class="sxs-lookup"><span data-stu-id="c7841-281">The HTTP data transfer method used by the client.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c7841-282">下面的代码示例使用 <xref:System.Web.HttpUtility.HtmlEncode%2A> 方法对属性的值进行 HTML 编码 <xref:System.Web.HttpRequest.HttpMethod%2A> ，并使用 <xref:System.IO.TextWriter.WriteLine%2A> 方法将编码的值写入文件。</span><span class="sxs-lookup"><span data-stu-id="c7841-282">The following code example uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to HTML-encode the value of the <xref:System.Web.HttpRequest.HttpMethod%2A> property and the <xref:System.IO.TextWriter.WriteLine%2A> method to write the encoded value to the file.</span></span> <span data-ttu-id="c7841-283">此代码示例是为类提供的更大示例的一部分 <xref:System.Web.HttpRequest> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-283">This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.</span></span>

 [!code-csharp[System.Web.HttpRequest_Sample1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#7)]
 [!code-vb[System.Web.HttpRequest_Sample1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#7)]

 <span data-ttu-id="c7841-284">下面的示例演示了此代码生成的输出。</span><span class="sxs-lookup"><span data-stu-id="c7841-284">The following example shows output that is produced by this code.</span></span>

 `GET`

 `127.0.0.1`

 `127.0.0.1`

 `GET`

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream InputStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream InputStream" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.InputStream" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ InputStream { System::IO::Stream ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputStream : System.IO.Stream" Usage="System.Web.HttpRequest.InputStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-285">获取传入的 HTTP 实体主体的内容。</span><span class="sxs-lookup"><span data-stu-id="c7841-285">Gets the contents of the incoming HTTP entity body.</span></span></summary>
        <value><span data-ttu-id="c7841-286">表示传入 HTTP 内容主体的内容的 <see cref="T:System.IO.Stream" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-286">A <see cref="T:System.IO.Stream" /> object representing the contents of the incoming HTTP content body.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c7841-287">下面的代码示例将的内容复制 <xref:System.Web.HttpRequest.InputStream%2A> 到字符串中。</span><span class="sxs-lookup"><span data-stu-id="c7841-287">The following code example copies the contents of an <xref:System.Web.HttpRequest.InputStream%2A> into a string.</span></span>

 [!code-csharp[Classic HttpRequest.InputStream Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.InputStream Example/cs/source.aspx#1)]
 [!code-vb[Classic HttpRequest.InputStream Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.InputStream Example/VB/source.vb#1)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InsertEntityBody">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c7841-288">为用于将 HTTP 请求实体正文插入内存的 IIS 方法提供托管包装。</span><span class="sxs-lookup"><span data-stu-id="c7841-288">Provides a managed wrapper for the IIS method that inserts an HTTP request entity body into memory.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-289"><xref:System.Web.HttpRequest.InsertEntityBody%2A>方法重载提供对 IIS 7 方法的托管访问 `IHttpRequest::InsertEntityBody` 。</span><span class="sxs-lookup"><span data-stu-id="c7841-289">The <xref:System.Web.HttpRequest.InsertEntityBody%2A> method overloads provide managed access to the IIS 7 `IHttpRequest::InsertEntityBody` method.</span></span> <span data-ttu-id="c7841-290">IIS 方法将 HTTP 请求实体正文插入 (客户端) 发送到内存中的数据。</span><span class="sxs-lookup"><span data-stu-id="c7841-290">The IIS method inserts an HTTP request entity body (the data that is posted by a client) into memory.</span></span> <span data-ttu-id="c7841-291">这很有用，因为 IIS 在读取请求实体后不会保留它的副本。</span><span class="sxs-lookup"><span data-stu-id="c7841-291">This is useful because IIS does not maintain a copy of the request entity after it has been read.</span></span> <span data-ttu-id="c7841-292"><xref:System.Web.HttpRequest.InsertEntityBody%2A>方法创建 HTTP 请求实体数据的副本，并将其提供给 IIS 以便进行其他自定义处理。</span><span class="sxs-lookup"><span data-stu-id="c7841-292">The <xref:System.Web.HttpRequest.InsertEntityBody%2A> methods create a copy of the HTTP request entity data and make it available to IIS for additional custom handling.</span></span>

> [!NOTE]
>  <span data-ttu-id="c7841-293"><xref:System.Web.HttpRequest.InsertEntityBody%2A>方法重载仅适用于 iis 7.0 或更高版本，因为该 `IHttpRequest::InsertEntityBody` 方法是在 iis 7.0 中添加的。</span><span class="sxs-lookup"><span data-stu-id="c7841-293">The <xref:System.Web.HttpRequest.InsertEntityBody%2A> method overloads work only on IIS 7.0 or later, because the `IHttpRequest::InsertEntityBody` method was added in IIS 7.0.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InsertEntityBody">
      <MemberSignature Language="C#" Value="public void InsertEntityBody ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertEntityBody() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.InsertEntityBody" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertEntityBody ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertEntityBody();" />
      <MemberSignature Language="F#" Value="member this.InsertEntityBody : unit -&gt; unit" Usage="httpRequest.InsertEntityBody " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7841-294">向 IIS 提供 HTTP 请求实体正文的副本。</span><span class="sxs-lookup"><span data-stu-id="c7841-294">Provides IIS with a copy of the HTTP request entity body.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-295">IIS 在读取请求后不会保留该请求的副本。</span><span class="sxs-lookup"><span data-stu-id="c7841-295">IIS does not maintain a copy of the request after it has been read.</span></span> <span data-ttu-id="c7841-296">因此，建议只对 HTTP 请求的处理程序读取请求实体。</span><span class="sxs-lookup"><span data-stu-id="c7841-296">Therefore, it is recommended that only the handler for an HTTP request should read the request entity.</span></span>

 <span data-ttu-id="c7841-297"><xref:System.Web.HttpRequest.InsertEntityBody%2A?displayProperty=nameWithType>如果先前已由 ASP.NET 读取，则方法重载将向 IIS 提供请求实体的副本。</span><span class="sxs-lookup"><span data-stu-id="c7841-297">The <xref:System.Web.HttpRequest.InsertEntityBody%2A?displayProperty=nameWithType> method overload provides IIS with a copy of the request entity if it was previously read by ASP.NET.</span></span> <span data-ttu-id="c7841-298">此方法重载适用于 ASP.NET 已读取实体请求并想要重用现有请求数据的情况。</span><span class="sxs-lookup"><span data-stu-id="c7841-298">This method overload is useful for cases where ASP.NET has read the entity request and you want to reuse the existing request data.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="c7841-299">在 IIS 7.0 以前的 IIS 版本上调用该方法。</span><span class="sxs-lookup"><span data-stu-id="c7841-299">The method was invoked on a version of IIS earlier than IIS 7.0.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InsertEntityBody">
      <MemberSignature Language="C#" Value="public void InsertEntityBody (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertEntityBody(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.InsertEntityBody(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertEntityBody (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertEntityBody(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="member this.InsertEntityBody : byte[] * int * int -&gt; unit" Usage="httpRequest.InsertEntityBody (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="offset" Type="System.Int32" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="c7841-300">一个包含请求实体数据的数组。</span><span class="sxs-lookup"><span data-stu-id="c7841-300">An array that contains the request entity data.</span></span></param>
        <param name="offset"><span data-ttu-id="c7841-301"><paramref name="buffer" /> 中开始存储请求实体数据的位置，该位置从零开始计数。</span><span class="sxs-lookup"><span data-stu-id="c7841-301">The zero-based position in <paramref name="buffer" /> at which to begin storing the request entity data.</span></span></param>
        <param name="count"><span data-ttu-id="c7841-302">要读取到 <paramref name="buffer" /> 数组中的字节数。</span><span class="sxs-lookup"><span data-stu-id="c7841-302">The number of bytes to read into the <paramref name="buffer" /> array.</span></span></param>
        <summary><span data-ttu-id="c7841-303">向 IIS 提供 HTTP 请求实体正文的副本以及有关请求实体对象的信息。</span><span class="sxs-lookup"><span data-stu-id="c7841-303">Provides IIS with a copy of the HTTP request entity body and with information about the request entity object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-304">IIS 在读取请求后不会保留该请求的副本。</span><span class="sxs-lookup"><span data-stu-id="c7841-304">IIS does not maintain a copy of the request after it has been read.</span></span> <span data-ttu-id="c7841-305">因此，建议只对 HTTP 请求的处理程序读取请求实体。</span><span class="sxs-lookup"><span data-stu-id="c7841-305">Therefore, it is recommended that only the handler for an HTTP request should read the request entity.</span></span>

 <span data-ttu-id="c7841-306"><xref:System.Web.HttpRequest.InsertEntityBody%2A?displayProperty=nameWithType>如果要执行自定义处理（如将不同的实体正文插入内存），方法重载会很有用。</span><span class="sxs-lookup"><span data-stu-id="c7841-306">The <xref:System.Web.HttpRequest.InsertEntityBody%2A?displayProperty=nameWithType> method overload is useful when you want to perform custom processing, such as inserting a different entity body into memory.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="c7841-307">在 IIS 7.0 以前的 IIS 版本上调用该方法。</span><span class="sxs-lookup"><span data-stu-id="c7841-307">The method was invoked on a version of IIS earlier than IIS 7.0.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c7841-308"><paramref name="buffer" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c7841-308"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="c7841-309"><paramref name="offset" /> 或 <paramref name="count" /> 是负值。</span><span class="sxs-lookup"><span data-stu-id="c7841-309"><paramref name="offset" /> or <paramref name="count" /> is a negative value.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c7841-310">如果给定 <paramref name="offset" /> 值，则 <paramref name="count" /> 中的项目数大于 <paramref name="buffer" /> 中的可用空间。</span><span class="sxs-lookup"><span data-stu-id="c7841-310">The number of items in <paramref name="count" /> is larger than the available space in <paramref name="buffer" />, given the <paramref name="offset" /> value.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAuthenticated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAuthenticated : bool" Usage="System.Web.HttpRequest.IsAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-311">获取一个值，该值指示是否验证了请求。</span><span class="sxs-lookup"><span data-stu-id="c7841-311">Gets a value indicating whether the request has been authenticated.</span></span></summary>
        <value><span data-ttu-id="c7841-312">如果请求已经过身份验证，则为 <see langword="true" />；否则，为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c7841-312"><see langword="true" /> if the request is authenticated; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c7841-313">下面的代码示例使用 <xref:System.Web.HttpRequest.IsAuthenticated%2A> 属性来确定当前请求是否已经过身份验证。</span><span class="sxs-lookup"><span data-stu-id="c7841-313">The following code example uses the <xref:System.Web.HttpRequest.IsAuthenticated%2A> property to determine whether the current request has been authenticated.</span></span> <span data-ttu-id="c7841-314">如果尚未对其进行身份验证，则会将请求重定向到另一个页面，用户可在其中向 Web 应用程序输入其凭据。</span><span class="sxs-lookup"><span data-stu-id="c7841-314">If it has not been authenticated, the request is redirected to another page where users can enter their credentials into the Web application.</span></span> <span data-ttu-id="c7841-315">这是在应用程序的默认页中使用的常用技术。</span><span class="sxs-lookup"><span data-stu-id="c7841-315">This is a common technique used in the default page for an application.</span></span>

 [!code-csharp[System.Web.HttpRequest_Sample3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample3/CS/isauthenticatedcs.aspx#1)]
 [!code-vb[System.Web.HttpRequest_Sample3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample3/VB/isauthenticatedvb.aspx#1)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLocal">
      <MemberSignature Language="C#" Value="public bool IsLocal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLocal" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.IsLocal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLocal As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLocal { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLocal : bool" Usage="System.Web.HttpRequest.IsLocal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-316">获取指示请求是否来自本地计算机的值。</span><span class="sxs-lookup"><span data-stu-id="c7841-316">Gets a value indicating whether the request is from the local computer.</span></span></summary>
        <value><span data-ttu-id="c7841-317">如果请求来自本地计算机，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c7841-317"><see langword="true" /> if the request is from the local computer; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-318"><xref:System.Web.HttpRequest.IsLocal%2A> `true` 如果请求发起方的 ip 地址为127.0.0.1 或请求的 ip 地址与服务器的 ip 地址相同，则属性将返回。</span><span class="sxs-lookup"><span data-stu-id="c7841-318">The <xref:System.Web.HttpRequest.IsLocal%2A> property returns `true` if the IP address of the request originator is 127.0.0.1 or if the IP address of the request is the same as the server's IP address.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSecureConnection">
      <MemberSignature Language="C#" Value="public bool IsSecureConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSecureConnection" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.IsSecureConnection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSecureConnection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSecureConnection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSecureConnection : bool" Usage="System.Web.HttpRequest.IsSecureConnection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-319">获取一个值，指示 HTTP 连接是否使用安全套接字（即 HTTPS）。</span><span class="sxs-lookup"><span data-stu-id="c7841-319">Gets a value indicating whether the HTTP connection uses secure sockets (that is, HTTPS).</span></span></summary>
        <value><span data-ttu-id="c7841-320">如果连接为 SSL 连接，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c7841-320"><see langword="true" /> if the connection is an SSL connection; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c7841-321">下面的代码示例确定属性是否 <xref:System.Web.HttpRequest.IsSecureConnection%2A> 设置为 false。</span><span class="sxs-lookup"><span data-stu-id="c7841-321">The following code example determines whether the <xref:System.Web.HttpRequest.IsSecureConnection%2A> property is set to false.</span></span> <span data-ttu-id="c7841-322">如果是，则将 <xref:System.Web.HttpResponse.SuppressContent%2A> 属性设置为 true 以停止发送响应。</span><span class="sxs-lookup"><span data-stu-id="c7841-322">If it is, the <xref:System.Web.HttpResponse.SuppressContent%2A> property is set to true to stop the response from being sent.</span></span>

 [!code-csharp[System.Web.HttpResponse_Sample5#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpResponse_Sample5/CS/httpresponsesuppresscontentcs.aspx#3)]
 [!code-vb[System.Web.HttpResponse_Sample5#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpResponse_Sample5/VB/httpresponsesuppresscontentvb.aspx#3)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public string this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(key As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ default[System::String ^] { System::String ^ get(System::String ^ key); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : string" Usage="System.Web.HttpRequest.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="c7841-323">要获取的集合成员的名称。</span><span class="sxs-lookup"><span data-stu-id="c7841-323">The name of the collection member to get.</span></span></param>
        <summary><span data-ttu-id="c7841-324">从 <see cref="P:System.Web.HttpRequest.QueryString" />、<see cref="P:System.Web.HttpRequest.Form" />、<see cref="P:System.Web.HttpRequest.Cookies" /> 或 <see cref="P:System.Web.HttpRequest.ServerVariables" /> 集合获取指定的对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-324">Gets the specified object from the <see cref="P:System.Web.HttpRequest.QueryString" />, <see cref="P:System.Web.HttpRequest.Form" />, <see cref="P:System.Web.HttpRequest.Cookies" />, or <see cref="P:System.Web.HttpRequest.ServerVariables" /> collections.</span></span></summary>
        <value><span data-ttu-id="c7841-325"><see cref="P:System.Web.HttpRequest.QueryString" /> 参数中指定的 <see cref="P:System.Web.HttpRequest.Form" />、<see cref="P:System.Web.HttpRequest.Cookies" />、<see cref="P:System.Web.HttpRequest.ServerVariables" /> 或 <paramref name="key" /> 集合成员。</span><span class="sxs-lookup"><span data-stu-id="c7841-325">The <see cref="P:System.Web.HttpRequest.QueryString" />, <see cref="P:System.Web.HttpRequest.Form" />, <see cref="P:System.Web.HttpRequest.Cookies" />, or <see cref="P:System.Web.HttpRequest.ServerVariables" /> collection member specified in the <paramref name="key" /> parameter.</span></span> <span data-ttu-id="c7841-326">如果未找到指定的 <paramref name="key" />，则返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c7841-326">If the specified <paramref name="key" /> is not found, then <see langword="null" /> is returned.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogonUserIdentity">
      <MemberSignature Language="C#" Value="public System.Security.Principal.WindowsIdentity LogonUserIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.WindowsIdentity LogonUserIdentity" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.LogonUserIdentity" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LogonUserIdentity As WindowsIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Principal::WindowsIdentity ^ LogonUserIdentity { System::Security::Principal::WindowsIdentity ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LogonUserIdentity : System.Security.Principal.WindowsIdentity" Usage="System.Web.HttpRequest.LogonUserIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.WindowsIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-327">获取当前用户的 <see cref="T:System.Security.Principal.WindowsIdentity" /> 类型。</span><span class="sxs-lookup"><span data-stu-id="c7841-327">Gets the <see cref="T:System.Security.Principal.WindowsIdentity" /> type for the current user.</span></span></summary>
        <value><span data-ttu-id="c7841-328">当前 Microsoft Internet Information Services (IIS)身份验证设置的 <see cref="T:System.Security.Principal.WindowsIdentity" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-328">A <see cref="T:System.Security.Principal.WindowsIdentity" /> object for the current Microsoft Internet Information Services (IIS) authentication settings.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-329"><xref:System.Web.HttpRequest.LogonUserIdentity%2A>属性将当前连接的用户的对象的属性和方法公开 <xref:System.Security.Principal.WindowsIdentity> 给 Microsoft INTERNET INFORMATION SERVICES (IIS) 。</span><span class="sxs-lookup"><span data-stu-id="c7841-329">The <xref:System.Web.HttpRequest.LogonUserIdentity%2A> property exposes the properties and methods of the <xref:System.Security.Principal.WindowsIdentity> object for the currently connected user to Microsoft Internet Information Services (IIS).</span></span> <span data-ttu-id="c7841-330"><xref:System.Security.Principal.WindowsIdentity>通过跟踪 IIS 请求标记公开的类的实例 <xref:System.Web.HttpRequest.LogonUserIdentity%2A> ，并为当前在 ASP.NET 中处理的当前 HTTP 请求提供轻松访问此标记的权限。</span><span class="sxs-lookup"><span data-stu-id="c7841-330">The instance of the <xref:System.Security.Principal.WindowsIdentity> class that is exposed by <xref:System.Web.HttpRequest.LogonUserIdentity%2A> tracks the IIS request token and provides easy access to this token for the current HTTP request being processed inside of ASP.NET.</span></span> <span data-ttu-id="c7841-331"><xref:System.Security.Principal.WindowsIdentity>自动创建类的一个实例，因此无需对其进行构造以获取对其方法和属性的访问权限。</span><span class="sxs-lookup"><span data-stu-id="c7841-331">An instance of the <xref:System.Security.Principal.WindowsIdentity> class is automatically created so it does not need to be constructed to in order to gain access to its methods and properties.</span></span>



## Examples
 <span data-ttu-id="c7841-332">下面的代码示例演示如何检索 <xref:System.Web.HttpRequest.LogonUserIdentity%2A> 当前用户的属性并写出文本文件中每一项的值。</span><span class="sxs-lookup"><span data-stu-id="c7841-332">The following code example shows how to retrieve the <xref:System.Web.HttpRequest.LogonUserIdentity%2A> property for the current user and write out the values of each item in a text file.</span></span> <span data-ttu-id="c7841-333">将此代码放在窗体的属性所引用的 ASP.NET 页上 `ACTION` 。</span><span class="sxs-lookup"><span data-stu-id="c7841-333">Place this code on the ASP.NET page referenced by the form's `ACTION` attribute.</span></span>

 [!code-aspx-csharp[System.Web.HttpRequest_LogonUserIdentity#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_LogonUserIdentity/CS/logonuseridentity_cs.aspx#1)]
 [!code-aspx-vb[System.Web.HttpRequest_LogonUserIdentity#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_LogonUserIdentity/VB/logonuseridentity_vb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c7841-334">Web 应用程序正在 IIS 7 集成模式下运行，尚未引发 <see cref="E:System.Web.HttpApplication.PostAuthenticateRequest" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="c7841-334">The Web application is running in IIS 7 integrated mode and the <see cref="E:System.Web.HttpApplication.PostAuthenticateRequest" /> event has not yet been raised.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MapImageCoordinates">
      <MemberSignature Language="C#" Value="public int[] MapImageCoordinates (string imageFieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32[] MapImageCoordinates(string imageFieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.MapImageCoordinates(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function MapImageCoordinates (imageFieldName As String) As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;int&gt; ^ MapImageCoordinates(System::String ^ imageFieldName);" />
      <MemberSignature Language="F#" Value="member this.MapImageCoordinates : string -&gt; int[]" Usage="httpRequest.MapImageCoordinates imageFieldName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageFieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="imageFieldName"><span data-ttu-id="c7841-335">窗体图像映射的名称。</span><span class="sxs-lookup"><span data-stu-id="c7841-335">The name of the form image map.</span></span></param>
        <summary><span data-ttu-id="c7841-336">将传入图像字段窗体参数映射为适当的 x 坐标值和 y 坐标值。</span><span class="sxs-lookup"><span data-stu-id="c7841-336">Maps an incoming image-field form parameter to appropriate x-coordinate and y-coordinate values.</span></span></summary>
        <returns><span data-ttu-id="c7841-337">二维整数数组。</span><span class="sxs-lookup"><span data-stu-id="c7841-337">A two-dimensional array of integers.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MapPath">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c7841-338">为当前请求将请求的 URL 中的虚拟路径映射到服务器上的物理路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-338">Maps the virtual path in the requested URL to a physical path on the server for the current request.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MapPath">
      <MemberSignature Language="C#" Value="public string MapPath (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string MapPath(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.MapPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function MapPath (virtualPath As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ MapPath(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="member this.MapPath : string -&gt; string" Usage="httpRequest.MapPath virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath"><span data-ttu-id="c7841-339">当前请求的虚拟路径（绝对路径或相对路径）。</span><span class="sxs-lookup"><span data-stu-id="c7841-339">The virtual path (absolute or relative) for the current request.</span></span></param>
        <summary><span data-ttu-id="c7841-340">将指定的虚拟路径映射到物理路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-340">Maps the specified virtual path to a physical path.</span></span></summary>
        <returns><span data-ttu-id="c7841-341">由 <paramref name="virtualPath" /> 指定的服务器物理路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-341">The physical path on the server specified by <paramref name="virtualPath" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!CAUTION]
>  <span data-ttu-id="c7841-342"><xref:System.Web.HttpRequest.MapPath%2A>属性可能包含有关宿主环境的敏感信息。</span><span class="sxs-lookup"><span data-stu-id="c7841-342">The <xref:System.Web.HttpRequest.MapPath%2A> property potentially contains sensitive information about the hosting environment.</span></span> <span data-ttu-id="c7841-343">不应向用户显示返回值。</span><span class="sxs-lookup"><span data-stu-id="c7841-343">The return value should not be displayed to users.</span></span>



## Examples
 <span data-ttu-id="c7841-344">下面的代码示例使用 <xref:System.Web.HttpRequest.MapPath%2A> 方法将虚拟路径转换为服务器上的完全限定的物理路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-344">The following code example uses the <xref:System.Web.HttpRequest.MapPath%2A> method to convert a virtual path to a fully qualified physical path on the server.</span></span> <span data-ttu-id="c7841-345">此示例包含两个部分：</span><span class="sxs-lookup"><span data-stu-id="c7841-345">This example has two parts:</span></span>

-   <span data-ttu-id="c7841-346">.Aspx 页映射路径，读取文件，并显示读取操作的结果。</span><span class="sxs-lookup"><span data-stu-id="c7841-346">An .aspx page maps the path, reads the file, and displays results of the read operation.</span></span>

-   <span data-ttu-id="c7841-347">一个类， `UpperCaseFilterStream` 它将通过其传递的所有字符更改为大写。</span><span class="sxs-lookup"><span data-stu-id="c7841-347">A class, `UpperCaseFilterStream`, that changes all characters passed through it to uppercase.</span></span>

 <span data-ttu-id="c7841-348">该示例的第一部分演示如何使用方法将虚拟路径转换为完全限定的物理路径 <xref:System.Web.HttpRequest.MapPath%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-348">The first part of the example shows how to convert a virtual path to a fully qualified physical path using the <xref:System.Web.HttpRequest.MapPath%2A> method.</span></span> <span data-ttu-id="c7841-349">然后，将此物理路径传递给一个 <xref:System.IO.StreamReader> 对象，该对象获取文件的内容。</span><span class="sxs-lookup"><span data-stu-id="c7841-349">This physical path is then passed to a <xref:System.IO.StreamReader> object, which obtains the contents of the file.</span></span> <span data-ttu-id="c7841-350"><xref:System.Web.HttpResponse.Write%2A>然后调用方法以在页面上显示该文件的内容。</span><span class="sxs-lookup"><span data-stu-id="c7841-350">The <xref:System.Web.HttpResponse.Write%2A> method is then called to display the content of the file on the page.</span></span> <span data-ttu-id="c7841-351"><xref:System.Web.HttpResponse.Filter%2A>属性用于将筛选器附加到响应流，使文本显示为大写页面。</span><span class="sxs-lookup"><span data-stu-id="c7841-351">The <xref:System.Web.HttpResponse.Filter%2A> property is used to attach a filter to the response stream that makes the text displayed to the page all uppercase.</span></span>

 [!code-aspx-csharp[System.Web.HttpRequest_Samples2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Samples2/CS/requestsamples2cs.aspx#1)]
 [!code-aspx-vb[System.Web.HttpRequest_Samples2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Samples2/VB/requestsamples2vb.aspx#1)]

 <span data-ttu-id="c7841-352">该示例的第二部分演示从继承的类 <xref:System.IO.Stream> ，并将流中的所有字符转换为大写。</span><span class="sxs-lookup"><span data-stu-id="c7841-352">The second part of the example shows a class that inherits from <xref:System.IO.Stream> and converts all characters in a stream to uppercase.</span></span> <span data-ttu-id="c7841-353">将此代码放在 `App_Code` 应用程序的文件夹中。</span><span class="sxs-lookup"><span data-stu-id="c7841-353">Put this code in the `App_Code` folder for your application.</span></span>

 [!code-csharp[System.Web.HttpRequest_Samples2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Samples2/CS/responsefilter.cs#2)]
 [!code-vb[System.Web.HttpRequest_Samples2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Samples2/VB/responsefilter.vb#2)]

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c7841-354">没有为请求定义 <see cref="T:System.Web.HttpContext" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-354">No <see cref="T:System.Web.HttpContext" /> object is defined for the request.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MapPath">
      <MemberSignature Language="C#" Value="public string MapPath (string virtualPath, string baseVirtualDir, bool allowCrossAppMapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string MapPath(string virtualPath, string baseVirtualDir, bool allowCrossAppMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.MapPath(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function MapPath (virtualPath As String, baseVirtualDir As String, allowCrossAppMapping As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ MapPath(System::String ^ virtualPath, System::String ^ baseVirtualDir, bool allowCrossAppMapping);" />
      <MemberSignature Language="F#" Value="member this.MapPath : string * string * bool -&gt; string" Usage="httpRequest.MapPath (virtualPath, baseVirtualDir, allowCrossAppMapping)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="baseVirtualDir" Type="System.String" />
        <Parameter Name="allowCrossAppMapping" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="virtualPath"><span data-ttu-id="c7841-355">当前请求的虚拟路径（绝对路径或相对路径）。</span><span class="sxs-lookup"><span data-stu-id="c7841-355">The virtual path (absolute or relative) for the current request.</span></span></param>
        <param name="baseVirtualDir"><span data-ttu-id="c7841-356">用于相对解析的虚拟基目录路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-356">The virtual base directory path used for relative resolution.</span></span></param>
        <param name="allowCrossAppMapping"><span data-ttu-id="c7841-357">如果为 <see langword="true" />，则指示 <paramref name="virtualPath" /> 可能属于另一个应用程序；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c7841-357"><see langword="true" /> to indicate that <paramref name="virtualPath" /> may belong to another application; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="c7841-358">将指定的虚拟路径映射到物理路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-358">Maps the specified virtual path to a physical path.</span></span></summary>
        <returns><span data-ttu-id="c7841-359">服务器上的物理路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-359">The physical path on the server.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks

> [!CAUTION]
>  <span data-ttu-id="c7841-360"><xref:System.Web.HttpRequest.MapPath%2A>属性可能包含有关宿主环境的敏感信息。</span><span class="sxs-lookup"><span data-stu-id="c7841-360">The <xref:System.Web.HttpRequest.MapPath%2A> property potentially contains sensitive information about the hosting environment.</span></span> <span data-ttu-id="c7841-361">不应向用户显示返回值。</span><span class="sxs-lookup"><span data-stu-id="c7841-361">The return value should not be displayed to users.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c7841-362"><paramref name="allowCrossMapping" /> 为 <see langword="false" /> 且 <paramref name="virtualPath" /> 属于另一个应用程序。</span><span class="sxs-lookup"><span data-stu-id="c7841-362"><paramref name="allowCrossMapping" /> is <see langword="false" /> and <paramref name="virtualPath" /> belongs to another application.</span></span>

<span data-ttu-id="c7841-363">- 或 -</span><span class="sxs-lookup"><span data-stu-id="c7841-363">-or-</span></span>

<span data-ttu-id="c7841-364">没有为请求定义 <see cref="T:System.Web.HttpContext" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-364">No <see cref="T:System.Web.HttpContext" /> object is defined for the request.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MapRawImageCoordinates">
      <MemberSignature Language="C#" Value="public double[] MapRawImageCoordinates (string imageFieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float64[] MapRawImageCoordinates(string imageFieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.MapRawImageCoordinates(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function MapRawImageCoordinates (imageFieldName As String) As Double()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;double&gt; ^ MapRawImageCoordinates(System::String ^ imageFieldName);" />
      <MemberSignature Language="F#" Value="member this.MapRawImageCoordinates : string -&gt; double[]" Usage="httpRequest.MapRawImageCoordinates imageFieldName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageFieldName" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="imageFieldName"><span data-ttu-id="c7841-365">图像字段的名称。</span><span class="sxs-lookup"><span data-stu-id="c7841-365">The name of the image field.</span></span></param>
        <summary><span data-ttu-id="c7841-366">将传入图像字段窗体参数映射为适当的 x 和 y 坐标值。</span><span class="sxs-lookup"><span data-stu-id="c7841-366">Maps an incoming image field form parameter into appropriate x and y coordinate values.</span></span></summary>
        <returns><span data-ttu-id="c7841-367">x 和 y 坐标值。</span><span class="sxs-lookup"><span data-stu-id="c7841-367">The x and y coordinate values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Params">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameValueCollection Params { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection Params" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Params" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Params As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::NameValueCollection ^ Params { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Params : System.Collections.Specialized.NameValueCollection" Usage="System.Web.HttpRequest.Params" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-368">获取 <see cref="P:System.Web.HttpRequest.QueryString" />、<see cref="P:System.Web.HttpRequest.Form" />、<see cref="P:System.Web.HttpRequest.Cookies" /> 和 <see cref="P:System.Web.HttpRequest.ServerVariables" /> 项的组合集合。</span><span class="sxs-lookup"><span data-stu-id="c7841-368">Gets a combined collection of <see cref="P:System.Web.HttpRequest.QueryString" />, <see cref="P:System.Web.HttpRequest.Form" />, <see cref="P:System.Web.HttpRequest.Cookies" />, and <see cref="P:System.Web.HttpRequest.ServerVariables" /> items.</span></span></summary>
        <value><span data-ttu-id="c7841-369"><see cref="T:System.Collections.Specialized.NameValueCollection" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-369">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-370">名称-值对按照以下顺序添加到集合中：</span><span class="sxs-lookup"><span data-stu-id="c7841-370">Name-value pairs are added to the collection in the following order:</span></span>

1.  <span data-ttu-id="c7841-371">查询字符串参数。</span><span class="sxs-lookup"><span data-stu-id="c7841-371">Query-string parameters.</span></span>

2.  <span data-ttu-id="c7841-372">窗体字段。</span><span class="sxs-lookup"><span data-stu-id="c7841-372">Form fields.</span></span>

3.  <span data-ttu-id="c7841-373">Cookie。</span><span class="sxs-lookup"><span data-stu-id="c7841-373">Cookies.</span></span>

4.  <span data-ttu-id="c7841-374">服务器变量。</span><span class="sxs-lookup"><span data-stu-id="c7841-374">Server variables.</span></span>



## Examples
 <span data-ttu-id="c7841-375">下面的代码示例演示如何遍历 <xref:System.Web.HttpRequest.Params%2A> 页的属性，以及如何显示每个键/值对。</span><span class="sxs-lookup"><span data-stu-id="c7841-375">The following code example shows how to loop through the <xref:System.Web.HttpRequest.Params%2A> property for a page and how to display each key/value pair.</span></span>

 [!code-aspx-csharp[System.Web.HttpRequest.Params#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest.Params/CS/requestparamscs.aspx#1)]
 [!code-aspx-vb[System.Web.HttpRequest.Params#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest.Params/VB/requestparamsvb.aspx#1)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Path" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Path : string" Usage="System.Web.HttpRequest.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-376">获取当前请求的虚拟路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-376">Gets the virtual path of the current request.</span></span></summary>
        <value><span data-ttu-id="c7841-377">当前请求的虚拟路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-377">The virtual path of the current request.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-378"><xref:System.Web.HttpRequest.Path%2A>是 <xref:System.Web.HttpRequest.FilePath%2A> 与尾部的连接 <xref:System.Web.HttpRequest.PathInfo%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-378">The <xref:System.Web.HttpRequest.Path%2A> is the concatenation of the <xref:System.Web.HttpRequest.FilePath%2A> and the <xref:System.Web.HttpRequest.PathInfo%2A> trailer.</span></span> <span data-ttu-id="c7841-379">例如，对于 URL `http://www.contoso.com/virdir/page.html/tail` ， <xref:System.Web.HttpRequest.Path%2A> 为/virdir/page.html/tail。</span><span class="sxs-lookup"><span data-stu-id="c7841-379">For example, for the URL `http://www.contoso.com/virdir/page.html/tail`, the <xref:System.Web.HttpRequest.Path%2A> is /virdir/page.html/tail.</span></span>



## Examples
 <span data-ttu-id="c7841-380">下面的代码示例使用 <xref:System.Web.HttpUtility.HtmlEncode%2A> 方法对属性的值进行 HTML 编码 <xref:System.Web.HttpRequest.Path%2A> ，并使用 <xref:System.IO.TextWriter.WriteLine%2A> 方法将编码的值写入文件。</span><span class="sxs-lookup"><span data-stu-id="c7841-380">The following code example uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to HTML-encode the value of the <xref:System.Web.HttpRequest.Path%2A> property and the <xref:System.IO.TextWriter.WriteLine%2A> method to write the encoded value to the file.</span></span> <span data-ttu-id="c7841-381">此代码示例是为类提供的更大示例的一部分 <xref:System.Web.HttpRequest> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-381">This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.</span></span>

 [!code-csharp[System.Web.HttpRequest_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#2)]
 [!code-vb[System.Web.HttpRequest_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#2)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpRequest.FilePath" />
        <altmember cref="P:System.Web.HttpRequest.PathInfo" />
      </Docs>
    </Member>
    <Member MemberName="PathInfo">
      <MemberSignature Language="C#" Value="public string PathInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PathInfo" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.PathInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PathInfo As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PathInfo { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PathInfo : string" Usage="System.Web.HttpRequest.PathInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-382">获取具有 URL 扩展名的资源的附加路径信息。</span><span class="sxs-lookup"><span data-stu-id="c7841-382">Gets the additional path information for a resource with a URL extension.</span></span></summary>
        <value><span data-ttu-id="c7841-383">资源的附加路径信息。</span><span class="sxs-lookup"><span data-stu-id="c7841-383">The additional path information for a resource.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-384">对于 URL `http://www.contoso.com/virdir/page.html/tail` ， <xref:System.Web.HttpRequest.PathInfo%2A> 值为/tail。</span><span class="sxs-lookup"><span data-stu-id="c7841-384">For the URL `http://www.contoso.com/virdir/page.html/tail`, the <xref:System.Web.HttpRequest.PathInfo%2A> value is /tail.</span></span>



## Examples
 <span data-ttu-id="c7841-385">下面的代码示例确定属性是否 <xref:System.Web.HttpRequest.PathInfo%2A> 包含空字符串。</span><span class="sxs-lookup"><span data-stu-id="c7841-385">The following code example determines whether the <xref:System.Web.HttpRequest.PathInfo%2A> property contains an empty string.</span></span> <span data-ttu-id="c7841-386">如果是这样，该 <xref:System.IO.StreamWriter.Write%2A> 方法会将指示这一点的字符串写入文件。</span><span class="sxs-lookup"><span data-stu-id="c7841-386">If it does, the <xref:System.IO.StreamWriter.Write%2A> method writes a string indicating this to a file.</span></span> <span data-ttu-id="c7841-387">如果不是，则 <xref:System.Web.HttpUtility.HtmlEncode%2A> 方法对属性的值进行 HTML 编码， <xref:System.Web.HttpRequest.PathInfo%2A> 并且方法会将 <xref:System.IO.TextWriter.WriteLine%2A> 编码的值写入文件。</span><span class="sxs-lookup"><span data-stu-id="c7841-387">If it does not, the <xref:System.Web.HttpUtility.HtmlEncode%2A> method HTML-encodes the value of the <xref:System.Web.HttpRequest.PathInfo%2A> property and the <xref:System.IO.TextWriter.WriteLine%2A> method writes the encoded value to the file.</span></span> <span data-ttu-id="c7841-388">此代码示例是为类提供的更大示例的一部分 <xref:System.Web.HttpRequest> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-388">This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.</span></span>

 [!code-csharp[System.Web.HttpRequest_Sample1#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#4)]
 [!code-vb[System.Web.HttpRequest_Sample1#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#4)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.HttpRequest.Path" />
        <altmember cref="P:System.Web.HttpRequest.FilePath" />
      </Docs>
    </Member>
    <Member MemberName="PhysicalApplicationPath">
      <MemberSignature Language="C#" Value="public string PhysicalApplicationPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PhysicalApplicationPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.PhysicalApplicationPath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PhysicalApplicationPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PhysicalApplicationPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PhysicalApplicationPath : string" Usage="System.Web.HttpRequest.PhysicalApplicationPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-389">获取当前正在执行的服务器应用程序的根目录的物理文件系统路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-389">Gets the physical file system path of the currently executing server application's root directory.</span></span></summary>
        <value><span data-ttu-id="c7841-390">当前应用程序的根目录的文件系统路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-390">The file system path of the current application's root directory.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c7841-391">下面的代码示例使用 <xref:System.Web.HttpUtility.HtmlEncode%2A> 方法对属性的值进行 HTML 编码 <xref:System.Web.HttpRequest.PhysicalApplicationPath%2A> ，并使用 <xref:System.IO.TextWriter.WriteLine%2A> 方法将编码的值写入文件。</span><span class="sxs-lookup"><span data-stu-id="c7841-391">The following code example uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to HTML-encode the value of the <xref:System.Web.HttpRequest.PhysicalApplicationPath%2A> property and the <xref:System.IO.TextWriter.WriteLine%2A> method to write the encoded value to the file.</span></span> <span data-ttu-id="c7841-392">此代码示例是为类提供的更大示例的一部分 <xref:System.Web.HttpRequest> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-392">This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.</span></span>

 [!code-csharp[System.Web.HttpRequest_Sample1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#5)]
 [!code-vb[System.Web.HttpRequest_Sample1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#5)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PhysicalPath">
      <MemberSignature Language="C#" Value="public string PhysicalPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PhysicalPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.PhysicalPath" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PhysicalPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PhysicalPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PhysicalPath : string" Usage="System.Web.HttpRequest.PhysicalPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-393">获取与请求的 URL 相对应的物理文件系统路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-393">Gets the physical file system path corresponding to the requested URL.</span></span></summary>
        <value><span data-ttu-id="c7841-394">当前请求的文件系统路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-394">The file system path of the current request.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-395">在使用和的重定向方案中 <xref:System.Web.HttpServerUtility.Execute%2A> <xref:System.Web.HttpServerUtility.Transfer%2A> ， <xref:System.Web.HttpRequest.PhysicalPath%2A> 属性将返回原始页面的路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-395">In redirect scenarios using <xref:System.Web.HttpServerUtility.Execute%2A> and <xref:System.Web.HttpServerUtility.Transfer%2A>, the <xref:System.Web.HttpRequest.PhysicalPath%2A> property returns the path to the original page.</span></span> <span data-ttu-id="c7841-396">若要查找当前正在执行的页的物理路径，请使用 <xref:System.Web.HttpRequest.MapPath%2A> 方法，并将输入参数设置为 <xref:System.Web.HttpRequest.CurrentExecutionFilePath%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="c7841-396">To find the physical path of the currently executing page use the <xref:System.Web.HttpRequest.MapPath%2A> method with the input argument set as the <xref:System.Web.HttpRequest.CurrentExecutionFilePath%2A> property.</span></span>



## Examples
 <span data-ttu-id="c7841-397">下面的代码示例使用 <xref:System.Web.HttpUtility.HtmlEncode%2A> 方法对属性的值进行 HTML 编码 <xref:System.Web.HttpRequest.PhysicalPath%2A> ，并使用 <xref:System.IO.TextWriter.WriteLine%2A> 方法将编码的值写入文件。</span><span class="sxs-lookup"><span data-stu-id="c7841-397">The following code example uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to HTML-encode the value of the <xref:System.Web.HttpRequest.PhysicalPath%2A> property and the <xref:System.IO.TextWriter.WriteLine%2A> method to write the encoded value to the file.</span></span> <span data-ttu-id="c7841-398">此代码示例是为类提供的更大示例的一部分 <xref:System.Web.HttpRequest> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-398">This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.</span></span>

 [!code-csharp[System.Web.HttpRequest_Sample1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#5)]
 [!code-vb[System.Web.HttpRequest_Sample1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#5)]

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpRequest.MapPath(System.String)" />
        <altmember cref="P:System.Web.HttpRequest.CurrentExecutionFilePath" />
      </Docs>
    </Member>
    <Member MemberName="QueryString">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameValueCollection QueryString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection QueryString" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.QueryString" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueryString As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::NameValueCollection ^ QueryString { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.QueryString : System.Collections.Specialized.NameValueCollection" Usage="System.Web.HttpRequest.QueryString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-399">获取 HTTP 查询字符串变量集合。</span><span class="sxs-lookup"><span data-stu-id="c7841-399">Gets the collection of HTTP query string variables.</span></span></summary>
        <value><span data-ttu-id="c7841-400">客户端发送的查询字符串变量。</span><span class="sxs-lookup"><span data-stu-id="c7841-400">The query string variables sent by the client.</span></span> <span data-ttu-id="c7841-401">键和值是 URL 解码。</span><span class="sxs-lookup"><span data-stu-id="c7841-401">Keys and values are URL-decoded.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c7841-402">下面的代码示例演示了两种方法来获取名为 "fullname" 的查询字符串变量的值。</span><span class="sxs-lookup"><span data-stu-id="c7841-402">The following code example shows two ways to get the value of a query string variable named "fullname".</span></span> <span data-ttu-id="c7841-403">在每种情况下，如果 URL 为 `http://www.contoso.com/default.aspx?fullname=Fadi%20Fakhouri` ，则返回的值为 "Fadi Fakhouri"，因为将 `%20` URL 解码为空格字符。</span><span class="sxs-lookup"><span data-stu-id="c7841-403">In each case, if the URL is `http://www.contoso.com/default.aspx?fullname=Fadi%20Fakhouri`, then the value returned is "Fadi Fakhouri" because the `%20` is URL-decoded into a space character.</span></span> <span data-ttu-id="c7841-404">如果 URL 不具有 `fullname` 查询字符串 ID，则返回的值为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="c7841-404">If the URL doesn't have a `fullname` query string ID, the returned value would be `null`.</span></span>

 <span data-ttu-id="c7841-405">第一行代码仅在查询字符串中查找键 "fullname";第二行在所有 HTTP 请求集合中查找密钥 "fullname"。</span><span class="sxs-lookup"><span data-stu-id="c7841-405">The first line of code looks for the key "fullname" only in the query string; the second line looks for the key "fullname" in all of the HTTP request collections.</span></span> <span data-ttu-id="c7841-406">有关第二行的详细信息，请参阅 <xref:System.Web.HttpRequest.Item%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-406">For more information about the second line, see <xref:System.Web.HttpRequest.Item%2A>.</span></span>

```csharp
string fullname1 = Request.QueryString["fullname"];
string fullname2 = Request["fullname"];

```

```vb
Dim fullname1 As String = Request.QueryString("fullname")
Dim fullname2 As String = Request("fullname")
```

 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.HttpRequest.ValidateInput" />
        <altmember cref="P:System.Web.HttpRequest.Form" />
        <altmember cref="P:System.Web.HttpRequest.Cookies" />
      </Docs>
    </Member>
    <Member MemberName="RawUrl">
      <MemberSignature Language="C#" Value="public string RawUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RawUrl" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.RawUrl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RawUrl As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RawUrl { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RawUrl : string" Usage="System.Web.HttpRequest.RawUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-407">获取当前请求的原始 URL。</span><span class="sxs-lookup"><span data-stu-id="c7841-407">Gets the raw URL of the current request.</span></span></summary>
        <value><span data-ttu-id="c7841-408">当前请求的原始 URL。</span><span class="sxs-lookup"><span data-stu-id="c7841-408">The raw URL of the current request.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-409">原始 URL 定义为后面包含域信息的 URL 部分。</span><span class="sxs-lookup"><span data-stu-id="c7841-409">The raw URL is defined as the part of the URL following the domain information.</span></span> <span data-ttu-id="c7841-410">在 URL 字符串中 `http://www.contoso.com/articles/recent.aspx` ，原始 URL 为/articles/recent.aspx。</span><span class="sxs-lookup"><span data-stu-id="c7841-410">In the URL string `http://www.contoso.com/articles/recent.aspx`, the raw URL is /articles/recent.aspx.</span></span> <span data-ttu-id="c7841-411">原始 URL 包括查询字符串（如果存在）。</span><span class="sxs-lookup"><span data-stu-id="c7841-411">The raw URL includes the query string, if present.</span></span>



## Examples
 <span data-ttu-id="c7841-412">下面的代码示例使用 <xref:System.Web.HttpUtility.HtmlEncode%2A> 方法对属性的值进行 HTML 编码 <xref:System.Web.HttpRequest.RawUrl%2A> ，并使用 <xref:System.IO.TextWriter.WriteLine%2A> 方法将编码的值写入文件。</span><span class="sxs-lookup"><span data-stu-id="c7841-412">The following code example uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to HTML-encode the value of the <xref:System.Web.HttpRequest.RawUrl%2A> property and the <xref:System.IO.TextWriter.WriteLine%2A> method to write the encoded value to the file.</span></span> <span data-ttu-id="c7841-413">此代码示例是为类提供的更大示例的一部分 <xref:System.Web.HttpRequest> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-413">This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.</span></span>

 [!code-csharp[System.Web.HttpRequest_Sample1#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#5)]
 [!code-vb[System.Web.HttpRequest_Sample1#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#5)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadEntityBodyMode">
      <MemberSignature Language="C#" Value="public System.Web.ReadEntityBodyMode ReadEntityBodyMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.ReadEntityBodyMode ReadEntityBodyMode" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.ReadEntityBodyMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReadEntityBodyMode As ReadEntityBodyMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::ReadEntityBodyMode ReadEntityBodyMode { System::Web::ReadEntityBodyMode get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadEntityBodyMode : System.Web.ReadEntityBodyMode" Usage="System.Web.HttpRequest.ReadEntityBodyMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.ReadEntityBodyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-414">获取指示请求实体是否被读以及如何被读的值。</span><span class="sxs-lookup"><span data-stu-id="c7841-414">Gets a value that indicates whether the request entity body has been read, and if so, how it was read.</span></span></summary>
        <value><span data-ttu-id="c7841-415">指示的值请求实体怎么读取，或者未读取。</span><span class="sxs-lookup"><span data-stu-id="c7841-415">The value that indicates how the request entity body was read, or that it has not been read.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-416">如果已读取实体正文，但尝试使用不兼容的方法对其进行读取，则使用此方法可避免引发异常。</span><span class="sxs-lookup"><span data-stu-id="c7841-416">This method is used to avoid the exception that is thrown if the entity body has already been read and an attempt is made to read it by using an incompatible method.</span></span> <span data-ttu-id="c7841-417">读取实体主体的方法和属性包括：</span><span class="sxs-lookup"><span data-stu-id="c7841-417">Methods and properties that read the entity body include the following:</span></span>

-   <span data-ttu-id="c7841-418"><xref:System.Web.HttpRequest.Form%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="c7841-418">The <xref:System.Web.HttpRequest.Form%2A> property.</span></span>

-   <span data-ttu-id="c7841-419"><xref:System.Web.HttpRequest.Files%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="c7841-419">The <xref:System.Web.HttpRequest.Files%2A> property.</span></span>

-   <span data-ttu-id="c7841-420"><xref:System.Web.HttpRequest.InputStream%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="c7841-420">The <xref:System.Web.HttpRequest.InputStream%2A> property.</span></span>

-   <span data-ttu-id="c7841-421"><xref:System.Web.HttpRequest.GetBufferedInputStream%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="c7841-421">The <xref:System.Web.HttpRequest.GetBufferedInputStream%2A> method.</span></span>

-   <span data-ttu-id="c7841-422"><xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="c7841-422">The <xref:System.Web.HttpRequest.GetBufferlessInputStream%2A> method.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestContext">
      <MemberSignature Language="C#" Value="public System.Web.Routing.RequestContext RequestContext { get; }" FrameworkAlternate="netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Routing.RequestContext RequestContext" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.RequestContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RequestContext As RequestContext" FrameworkAlternate="netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Routing::RequestContext ^ RequestContext { System::Web::Routing::RequestContext ^ get(); };" FrameworkAlternate="netframework-4.0" />
      <MemberSignature Language="F#" Value="member this.RequestContext : System.Web.Routing.RequestContext" Usage="System.Web.HttpRequest.RequestContext" FrameworkAlternate="netframework-4.0" />
      <MemberSignature Language="C#" Value="public System.Web.Routing.RequestContext RequestContext { get; set; }" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Property RequestContext As RequestContext" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Routing::RequestContext ^ RequestContext { System::Web::Routing::RequestContext ^ get(); void set(System::Web::Routing::RequestContext ^ value); };" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="member this.RequestContext : System.Web.Routing.RequestContext with get, set" Usage="System.Web.HttpRequest.RequestContext" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Routing.RequestContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-423">获取当前请求的 <see cref="T:System.Web.Routing.RequestContext" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="c7841-423">Gets the <see cref="T:System.Web.Routing.RequestContext" /> instance of the current request.</span></span></summary>
        <value><span data-ttu-id="c7841-424">当前请求的 <see cref="T:System.Web.Routing.RequestContext" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="c7841-424">The <see cref="T:System.Web.Routing.RequestContext" /> instance of the current request.</span></span> <span data-ttu-id="c7841-425">对于非路由请求，返回的 <see cref="T:System.Web.Routing.RequestContext" /> 对象为空。</span><span class="sxs-lookup"><span data-stu-id="c7841-425">For non-routed requests, the <see cref="T:System.Web.Routing.RequestContext" /> object that is returned is empty.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-426">此属性为当前请求提供对对象的访问 <xref:System.Web.Routing.RouteData> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-426">This property provides access to the <xref:System.Web.Routing.RouteData> object for the current request.</span></span> <span data-ttu-id="c7841-427">有关 ASP.NET 路由的详细信息，请参阅。[ASP.NET 路由](https://docs.microsoft.com/previous-versions/aspnet/cc668201(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="c7841-427">For more information about ASP.NET routing, see.[ASP.NET Routing](https://docs.microsoft.com/previous-versions/aspnet/cc668201(v=vs.100)).</span></span>

 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dd329551(v=vs.140)"><span data-ttu-id="c7841-428">演练：在 Web 窗体应用程序中使用 ASP.NET 路由</span><span class="sxs-lookup"><span data-stu-id="c7841-428">Walkthrough: Using ASP.NET Routing in a Web Forms Application</span></span></related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/dd535620(v=vs.140)"><span data-ttu-id="c7841-429">如何：访问路由页中的 URL 参数</span><span class="sxs-lookup"><span data-stu-id="c7841-429">How to: Access URL Parameters in a Routed Page</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RequestType">
      <MemberSignature Language="C#" Value="public string RequestType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RequestType" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.RequestType" />
      <MemberSignature Language="VB.NET" Value="Public Property RequestType As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ RequestType { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RequestType : string with get, set" Usage="System.Web.HttpRequest.RequestType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-430">获取或设置客户端使用的 HTTP 数据传输方法(<see langword="GET" /> 或 <see langword="POST" />)。</span><span class="sxs-lookup"><span data-stu-id="c7841-430">Gets or sets the HTTP data transfer method (<see langword="GET" /> or <see langword="POST" />) used by the client.</span></span></summary>
        <value><span data-ttu-id="c7841-431">表示客户端发送的 HTTP 调用类型的字符串。</span><span class="sxs-lookup"><span data-stu-id="c7841-431">A string representing the HTTP invocation type sent by the client.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c7841-432">下面的代码示例使用 <xref:System.Web.HttpUtility.HtmlEncode%2A> 方法对属性的值进行 HTML 编码 <xref:System.Web.HttpRequest.RequestType%2A> ，并使用 <xref:System.IO.TextWriter.WriteLine%2A> 方法将编码的值写入文件。</span><span class="sxs-lookup"><span data-stu-id="c7841-432">The following code example uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to HTML-encode the value of the <xref:System.Web.HttpRequest.RequestType%2A> property and the <xref:System.IO.TextWriter.WriteLine%2A> method to write the encoded value to the file.</span></span> <span data-ttu-id="c7841-433">此代码示例是为类提供的更大示例的一部分 <xref:System.Web.HttpRequest> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-433">This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.</span></span>

 [!code-csharp[System.Web.HttpRequest_Sample1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#7)]
 [!code-vb[System.Web.HttpRequest_Sample1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#7)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAs">
      <MemberSignature Language="C#" Value="public void SaveAs (string filename, bool includeHeaders);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveAs(string filename, bool includeHeaders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.SaveAs(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveAs (filename As String, includeHeaders As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveAs(System::String ^ filename, bool includeHeaders);" />
      <MemberSignature Language="F#" Value="member this.SaveAs : string * bool -&gt; unit" Usage="httpRequest.SaveAs (filename, includeHeaders)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="includeHeaders" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="filename"><span data-ttu-id="c7841-434">物理驱动器路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-434">The physical drive path.</span></span></param>
        <param name="includeHeaders"><span data-ttu-id="c7841-435">一个布尔值，该值指定是否应将 HTTP 头保存到磁盘。</span><span class="sxs-lookup"><span data-stu-id="c7841-435">A Boolean value specifying whether an HTTP header should be saved to disk.</span></span></param>
        <summary><span data-ttu-id="c7841-436">将 HTTP 请求保存到磁盘。</span><span class="sxs-lookup"><span data-stu-id="c7841-436">Saves an HTTP request to disk.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-437">将请求上下文保存到磁盘对于调试很有用。</span><span class="sxs-lookup"><span data-stu-id="c7841-437">Saving the request context to disk can be useful in debugging.</span></span>



## Examples
 <span data-ttu-id="c7841-438">下面的代码示例 <xref:System.Web.HttpRequest.SaveAs%2A> 在加载页面时调用方法。</span><span class="sxs-lookup"><span data-stu-id="c7841-438">The following code example calls the <xref:System.Web.HttpRequest.SaveAs%2A> method when a page is loaded.</span></span> <span data-ttu-id="c7841-439">此调用指定该请求将作为文本文件保存在 ASP.NET 进程标识已被授予写入权限的目录中，并且该请求中包含的任何标头信息都包含在该文件中。</span><span class="sxs-lookup"><span data-stu-id="c7841-439">The call specifies that the request be saved as a text file in a directory where the ASP.NET process identity has been granted write permissions, and that any header information included in the request is included in the file.</span></span>

 [!code-csharp[System.Web.HttpRequest_Sample6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample6/cs/requestsample6cs.aspx#1)]
 [!code-vb[System.Web.HttpRequest_Sample6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample6/vb/requestsample6vb.aspx#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException"><span data-ttu-id="c7841-440"><see cref="T:System.Web.Configuration.HttpRuntimeSection" /> 的 <see cref="P:System.Web.Configuration.HttpRuntimeSection.RequireRootedSaveAsPath" /> 属性设置为 <see langword="true" />，但 <paramref name="filename" /> 不是绝对路径。</span><span class="sxs-lookup"><span data-stu-id="c7841-440">The <see cref="P:System.Web.Configuration.HttpRuntimeSection.RequireRootedSaveAsPath" /> property of the <see cref="T:System.Web.Configuration.HttpRuntimeSection" /> is set to <see langword="true" /> but <paramref name="filename" /> is not an absolute path.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ServerVariables">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.NameValueCollection ServerVariables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.NameValueCollection ServerVariables" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.ServerVariables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ServerVariables As NameValueCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::NameValueCollection ^ ServerVariables { System::Collections::Specialized::NameValueCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ServerVariables : System.Collections.Specialized.NameValueCollection" Usage="System.Web.HttpRequest.ServerVariables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.NameValueCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-441">获取 Web 服务器变量的集合。</span><span class="sxs-lookup"><span data-stu-id="c7841-441">Gets a collection of Web server variables.</span></span></summary>
        <value><span data-ttu-id="c7841-442">服务器变量的 <see cref="T:System.Collections.Specialized.NameValueCollection" />。</span><span class="sxs-lookup"><span data-stu-id="c7841-442">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> of server variables.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-443">有关 IIS 支持的服务器变量的列表，请参阅 [Iis 服务器变量](https://go.microsoft.com/fwlink/?LinkId=52471)。</span><span class="sxs-lookup"><span data-stu-id="c7841-443">For a list of server variables supported by IIS, see [IIS Server Variables](https://go.microsoft.com/fwlink/?LinkId=52471).</span></span>



## Examples
 <span data-ttu-id="c7841-444">下面的代码示例显示所有命名服务器变量的名称和值。</span><span class="sxs-lookup"><span data-stu-id="c7841-444">The following code example displays the names and values of all named server variables.</span></span>

 [!code-csharp[Classic HttpRequest.ServerVariables Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.ServerVariables Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.ServerVariables Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.ServerVariables Example/VB/source.vb#1)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimedOutToken">
      <MemberSignature Language="C#" Value="public System.Threading.CancellationToken TimedOutToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Threading.CancellationToken TimedOutToken" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.TimedOutToken" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimedOutToken As CancellationToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::CancellationToken TimedOutToken { System::Threading::CancellationToken get(); };" />
      <MemberSignature Language="F#" Value="member this.TimedOutToken : System.Threading.CancellationToken" Usage="System.Web.HttpRequest.TimedOutToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.CancellationToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-445">获取请求超时时去除的 <see cref="T:System.Threading.CancellationToken" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-445">Gets a <see cref="T:System.Threading.CancellationToken" /> object that is tripped when a request times out.</span></span></summary>
        <value><span data-ttu-id="c7841-446">取消标记。</span><span class="sxs-lookup"><span data-stu-id="c7841-446">The cancellation token.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-447">可以在 Web.config 文件中指定超时时间 (请参阅 <xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A?displayProperty=nameWithType>) 或以编程方式 (参阅 <xref:System.Web.HttpServerUtility.ScriptTimeout%2A?displayProperty=nameWithType>) 。</span><span class="sxs-lookup"><span data-stu-id="c7841-447">The timeout period can be specified in the Web.config file (see <xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A?displayProperty=nameWithType>) or programmatically (see <xref:System.Web.HttpServerUtility.ScriptTimeout%2A?displayProperty=nameWithType>).</span></span> <span data-ttu-id="c7841-448">超时期限从请求传入的时间开始算起。</span><span class="sxs-lookup"><span data-stu-id="c7841-448">The timeout period is measured from the time the request comes in.</span></span> <span data-ttu-id="c7841-449">如果默认的超时值为110秒，则在请求处理开始后，取消标记将不早于110秒。</span><span class="sxs-lookup"><span data-stu-id="c7841-449">If the default timeout of 110 seconds is in effect, the cancellation token will be tripped no earlier than 110 seconds after request processing begins.</span></span> <span data-ttu-id="c7841-450">您可以更改 <xref:System.Web.HttpServerUtility.ScriptTimeout%2A?displayProperty=nameWithType> 属性值，并且只要此标记尚未转到，就会考虑新的超时值。</span><span class="sxs-lookup"><span data-stu-id="c7841-450">You can change the <xref:System.Web.HttpServerUtility.ScriptTimeout%2A?displayProperty=nameWithType> property value, and as long this token hasn't tripped yet, the new timeout value will be respected.</span></span>

 <span data-ttu-id="c7841-451">目前，令牌仅提供15秒的粒度，这意味着，如果超时值为110秒，则在请求处理开始后，令牌将在110到125秒之间触发。</span><span class="sxs-lookup"><span data-stu-id="c7841-451">Currently the token only provides 15 second granularity, which means that if the timeout value is 110 seconds, the token will be tripped sometime between 110 and 125 seconds after request processing begins.</span></span> <span data-ttu-id="c7841-452">粒度可能会在将来发生变化。</span><span class="sxs-lookup"><span data-stu-id="c7841-452">The granularity may change in the future.</span></span>

 <span data-ttu-id="c7841-453">即使此属性是线程安全的，但使用时也存在限制。</span><span class="sxs-lookup"><span data-stu-id="c7841-453">Even though this property is thread-safe, there are restrictions on its use.</span></span> <span data-ttu-id="c7841-454">有关详细信息，请参阅 <xref:System.Web.HttpResponse.ClientDisconnectedToken%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="c7841-454">For more information, see <xref:System.Web.HttpResponse.ClientDisconnectedToken%2A?displayProperty=nameWithType>.</span></span>

 <span data-ttu-id="c7841-455">如果 Websocket 请求处理已开始，则此属性无意义。</span><span class="sxs-lookup"><span data-stu-id="c7841-455">This property is meaningless if WebSockets request processing has started.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TlsTokenBindingInfo">
      <MemberSignature Language="C#" Value="public System.Web.ITlsTokenBindingInfo TlsTokenBindingInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.ITlsTokenBindingInfo TlsTokenBindingInfo" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.TlsTokenBindingInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TlsTokenBindingInfo As ITlsTokenBindingInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::ITlsTokenBindingInfo ^ TlsTokenBindingInfo { System::Web::ITlsTokenBindingInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TlsTokenBindingInfo : System.Web.ITlsTokenBindingInfo" Usage="System.Web.HttpRequest.TlsTokenBindingInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.ITlsTokenBindingInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-456">获取 TLS 标记绑定信息。</span><span class="sxs-lookup"><span data-stu-id="c7841-456">Gets the TLS token binding information.</span></span> <span data-ttu-id="c7841-457">此属性使应用程序可以从传入的增强身份验证的 HTTP 请求检索令牌信息。</span><span class="sxs-lookup"><span data-stu-id="c7841-457">The property enables applications to retrieve token information from incoming HTTP requests for enhanced authentication.</span></span></summary>
        <value><span data-ttu-id="c7841-458">当前连接的绑定令牌。</span><span class="sxs-lookup"><span data-stu-id="c7841-458">The binding token for the current connection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-459">此属性 `null` 在非 windows 10 平台上返回。</span><span class="sxs-lookup"><span data-stu-id="c7841-459">This property returns `null` on non-windows10 platforms.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TotalBytes">
      <MemberSignature Language="C#" Value="public int TotalBytes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TotalBytes" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.TotalBytes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TotalBytes As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TotalBytes { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TotalBytes : int" Usage="System.Web.HttpRequest.TotalBytes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-460">获取当前输入流中的字节数。</span><span class="sxs-lookup"><span data-stu-id="c7841-460">Gets the number of bytes in the current input stream.</span></span></summary>
        <value><span data-ttu-id="c7841-461">输入流中的字节数。</span><span class="sxs-lookup"><span data-stu-id="c7841-461">The number of bytes in the input stream.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c7841-462">下面的代码示例确定 <xref:System.Web.HttpRequest.TotalBytes%2A> 属性值是否大于1000字节，并将该信息写入文件。</span><span class="sxs-lookup"><span data-stu-id="c7841-462">The following code example determines whether the <xref:System.Web.HttpRequest.TotalBytes%2A> property value is greater than 1000 bytes and writes that information to a file.</span></span>

 [!code-csharp[System.Web.HttpRequest_Sample1#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#6)]
 [!code-vb[System.Web.HttpRequest_Sample1#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#6)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unvalidated">
      <MemberSignature Language="C#" Value="public System.Web.UnvalidatedRequestValues Unvalidated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UnvalidatedRequestValues Unvalidated" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Unvalidated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Unvalidated As UnvalidatedRequestValues" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UnvalidatedRequestValues ^ Unvalidated { System::Web::UnvalidatedRequestValues ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Unvalidated : System.Web.UnvalidatedRequestValues" Usage="System.Web.HttpRequest.Unvalidated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UnvalidatedRequestValues</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-463">获取 HTTP 请求值，不触发请求验证。</span><span class="sxs-lookup"><span data-stu-id="c7841-463">Gets the HTTP request values without triggering request validation.</span></span></summary>
        <value><span data-ttu-id="c7841-464">尚未使用请求验证检查的 HTTP 请求值。</span><span class="sxs-lookup"><span data-stu-id="c7841-464">The HTTP request values that have not been checked using request validation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-465">请求验证检查是否存在可能指示跨站点脚本攻击的 HTML 标记和脚本。</span><span class="sxs-lookup"><span data-stu-id="c7841-465">Request validation checks for HTML markup and script that might indicate a potential cross-site scripting attack.</span></span> <span data-ttu-id="c7841-466">默认情况下，所有值都是使用请求验证进行检查的，如果任何值包含标记或脚本，ASP.NET 将引发 <xref:System.Web.HttpRequestValidationException> 异常。</span><span class="sxs-lookup"><span data-stu-id="c7841-466">By default, all values are checked using request validation and if any values contain markup or script, ASP.NET throws an <xref:System.Web.HttpRequestValidationException> exception.</span></span> <span data-ttu-id="c7841-467">如果预计请求将包含标记 (例如，你允许用户发布包含标记) 的内容，并且你想要获取请求的原始值，请使用此方法。</span><span class="sxs-lookup"><span data-stu-id="c7841-467">Use this method if you anticipate that the request will contain markup (for example, you are allowing users to post content that contains markup) and you want to get the raw value of a request.</span></span>

> [!IMPORTANT]
>  <span data-ttu-id="c7841-468">如果使用此属性，则必须手动检查数据是否存在潜在的跨站点脚本攻击。</span><span class="sxs-lookup"><span data-stu-id="c7841-468">If you use this property, you must manually check the data for potential cross-site scripting attacks.</span></span>

 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UnvalidatedRequestValues" />
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Url" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.Url" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Url As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Url { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Url : Uri" Usage="System.Web.HttpRequest.Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-469">获取有关当前请求的 URL 的信息。</span><span class="sxs-lookup"><span data-stu-id="c7841-469">Gets information about the URL of the current request.</span></span></summary>
        <value><span data-ttu-id="c7841-470">包含当前请求的 URL <see cref="T:System.Uri" /> 的对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-470">A <see cref="T:System.Uri" /> object that contains the URL of the current request.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c7841-471">下面的代码示例将 <xref:System.Uri> 当前请求的对象分配给对象变量，并将 URL 对象的两个属性的值显示到 HTTP 输出中。</span><span class="sxs-lookup"><span data-stu-id="c7841-471">The following code example assigns the <xref:System.Uri> object of the current request to an object variable and displays the value of two properties of the URL object to the HTTP output.</span></span>

 [!code-csharp[Classic HttpRequest.Url Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.Url Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.Url Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.Url Example/VB/source.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="T:System.Uri" />
        <altmember cref="P:System.Web.HttpRequest.RawUrl" />
      </Docs>
    </Member>
    <Member MemberName="UrlReferrer">
      <MemberSignature Language="C#" Value="public Uri UrlReferrer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri UrlReferrer" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.UrlReferrer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UrlReferrer As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ UrlReferrer { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UrlReferrer : Uri" Usage="System.Web.HttpRequest.UrlReferrer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-472">获取有关客户端上次请求的 URL 的信息，该请求链接到当前的 URL。</span><span class="sxs-lookup"><span data-stu-id="c7841-472">Gets information about the URL of the client's previous request that linked to the current URL.</span></span></summary>
        <value><span data-ttu-id="c7841-473"><see cref="T:System.Uri" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-473">A <see cref="T:System.Uri" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c7841-474">下面的代码示例显示了引用当前应用程序的客户端的 URL 的两个属性的值。</span><span class="sxs-lookup"><span data-stu-id="c7841-474">The following code example displays the value of two properties of the URL that referred the client to the current application.</span></span>

 [!code-csharp[Classic HttpRequest.UrlReferrer Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.UrlReferrer Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.UrlReferrer Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.UrlReferrer Example/VB/source.vb#1)]

 ]]></format>
        </remarks>
        <exception cref="T:System.UriFormatException"><span data-ttu-id="c7841-475">HTTP <see langword="Referer" /> 请求标头格式不正确，并且不能转换为 <see cref="T:System.Uri" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="c7841-475">The HTTP <see langword="Referer" /> request header is malformed and cannot be converted to a <see cref="T:System.Uri" /> object.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="UserAgent">
      <MemberSignature Language="C#" Value="public string UserAgent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserAgent" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.UserAgent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserAgent As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UserAgent { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserAgent : string" Usage="System.Web.HttpRequest.UserAgent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-476">获取所提供的客户端浏览器的原始用户代理字符串。</span><span class="sxs-lookup"><span data-stu-id="c7841-476">Gets the raw user agent string of the client browser that has been provided.</span></span> <span data-ttu-id="c7841-477">请注意此字符串可能为 Null。</span><span class="sxs-lookup"><span data-stu-id="c7841-477">Please note it may be null.</span></span></summary>
        <value><span data-ttu-id="c7841-478">客户端浏览器的原始用户代理信息。</span><span class="sxs-lookup"><span data-stu-id="c7841-478">The raw user agent string of the client browser.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c7841-479">下面的代码示例将请求浏览器的类型标识分配给一个字符串变量。</span><span class="sxs-lookup"><span data-stu-id="c7841-479">The following code example assigns the type identification of the requesting browser to a string variable.</span></span>

 [!code-csharp[Classic HttpRequest.UserAgent Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.UserAgent Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.UserAgent Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.UserAgent Example/VB/source.vb#1)]

 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Page.ClientTarget" />
        <altmember cref="T:System.Web.HttpBrowserCapabilities" />
        <altmember cref="P:System.Web.HttpRequest.Browser" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/x3k2ssx2(v=vs.100)"><span data-ttu-id="c7841-480">ASP.NET 服务器控件和浏览器功能</span><span class="sxs-lookup"><span data-stu-id="c7841-480">ASP.NET Server Controls and Browser Capabilities</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="UserHostAddress">
      <MemberSignature Language="C#" Value="public string UserHostAddress { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserHostAddress" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.UserHostAddress" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserHostAddress As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UserHostAddress { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserHostAddress : string" Usage="System.Web.HttpRequest.UserHostAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-481">获取远程客户端的 IP 主机地址。</span><span class="sxs-lookup"><span data-stu-id="c7841-481">Gets the IP host address of the remote client.</span></span></summary>
        <value><span data-ttu-id="c7841-482">远程客户端的 IP 地址。</span><span class="sxs-lookup"><span data-stu-id="c7841-482">The IP address of the remote client.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c7841-483">下面的代码示例使用 <xref:System.Web.HttpUtility.HtmlEncode%2A> 方法对属性的值进行 HTML 编码 <xref:System.Web.HttpRequest.UserHostAddress%2A> ，并使用 <xref:System.IO.TextWriter.WriteLine%2A> 方法将编码的值写入文件。</span><span class="sxs-lookup"><span data-stu-id="c7841-483">The following code example uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to HTML-encode the value of the <xref:System.Web.HttpRequest.UserHostAddress%2A> property and the <xref:System.IO.TextWriter.WriteLine%2A> method to write the encoded value to the file.</span></span> <span data-ttu-id="c7841-484">此代码示例是为类提供的更大示例的一部分 <xref:System.Web.HttpRequest> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-484">This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.</span></span>

 [!code-csharp[System.Web.HttpRequest_Sample1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#7)]
 [!code-vb[System.Web.HttpRequest_Sample1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#7)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserHostName">
      <MemberSignature Language="C#" Value="public string UserHostName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UserHostName" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.UserHostName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserHostName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ UserHostName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserHostName : string" Usage="System.Web.HttpRequest.UserHostName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-485">获取远程客户端的 DNS 名称。</span><span class="sxs-lookup"><span data-stu-id="c7841-485">Gets the DNS name of the remote client.</span></span></summary>
        <value><span data-ttu-id="c7841-486">远程客户端的 DNS 名称。</span><span class="sxs-lookup"><span data-stu-id="c7841-486">The DNS name of the remote client.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c7841-487">下面的代码示例使用 <xref:System.Web.HttpUtility.HtmlEncode%2A> 方法对属性的值进行 HTML 编码 <xref:System.Web.HttpRequest.UserHostName%2A> ，并使用 <xref:System.IO.TextWriter.WriteLine%2A> 方法将编码的值写入文件。</span><span class="sxs-lookup"><span data-stu-id="c7841-487">The following code example uses the <xref:System.Web.HttpUtility.HtmlEncode%2A> method to HTML-encode the value of the <xref:System.Web.HttpRequest.UserHostName%2A> property and the <xref:System.IO.TextWriter.WriteLine%2A> method to write the encoded value to the file.</span></span> <span data-ttu-id="c7841-488">此代码示例是为类提供的更大示例的一部分 <xref:System.Web.HttpRequest> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-488">This code example is part of a larger example provided for the <xref:System.Web.HttpRequest> class.</span></span>

 [!code-csharp[System.Web.HttpRequest_Sample1#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/CS/requestdetailscs.aspx#7)]
 [!code-vb[System.Web.HttpRequest_Sample1#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.HttpRequest_Sample1/VB/requestdetailsvb.aspx#7)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserLanguages">
      <MemberSignature Language="C#" Value="public string[] UserLanguages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] UserLanguages" />
      <MemberSignature Language="DocId" Value="P:System.Web.HttpRequest.UserLanguages" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserLanguages As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ UserLanguages { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserLanguages : string[]" Usage="System.Web.HttpRequest.UserLanguages" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c7841-489">获取客户端语言首选项的排序字符串数组。</span><span class="sxs-lookup"><span data-stu-id="c7841-489">Gets a sorted string array of client language preferences.</span></span></summary>
        <value><span data-ttu-id="c7841-490">经过排序的客户端语言首选项的字符串数组，或者，如果为空，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c7841-490">A sorted string array of client language preferences, or <see langword="null" /> if empty.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="c7841-491">下面的代码示例将属性返回的多个值捕获 <xref:System.Web.HttpRequest.UserLanguages%2A> 到字符串数组中，并将每个语言名称写入单独的 HTTP 输出行中。</span><span class="sxs-lookup"><span data-stu-id="c7841-491">The following code example captures the multiple values returned by the <xref:System.Web.HttpRequest.UserLanguages%2A> property into a string array and writes each language name to a separate line of HTTP output.</span></span>

 <span data-ttu-id="c7841-492">语言名称由浏览器提供，且没有任何可能的代码的明确列表。</span><span class="sxs-lookup"><span data-stu-id="c7841-492">The language names are provided by the browser, and there is no definitive list of all possible codes.</span></span>  <span data-ttu-id="c7841-493">通常，这些是由两个字符组成的代码：语言的两个字符代码、一个连字符和两个字符的区域性代码（例如 "en-us" 表示美国英语，"fr" 表示加拿大法语）。</span><span class="sxs-lookup"><span data-stu-id="c7841-493">Typically these consist of a two-character codes for the language, a hyphen, and a two-character code for the culture, such as "en-us" for U.S. English and "fr-ca" for Canadian French.</span></span>

 [!code-csharp[Classic HttpRequest.UserLanguages Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic HttpRequest.UserLanguages Example/CS/source.cs#1)]
 [!code-vb[Classic HttpRequest.UserLanguages Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic HttpRequest.UserLanguages Example/VB/source.vb#1)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateInput">
      <MemberSignature Language="C#" Value="public void ValidateInput ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateInput() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.HttpRequest.ValidateInput" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateInput ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateInput();" />
      <MemberSignature Language="F#" Value="member this.ValidateInput : unit -&gt; unit" Usage="httpRequest.ValidateInput " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c7841-494">引发对通过 <see cref="P:System.Web.HttpRequest.Cookies" /> 、<see cref="P:System.Web.HttpRequest.Form" /> 和 <see cref="P:System.Web.HttpRequest.QueryString" /> 属性访问的集合的验证。</span><span class="sxs-lookup"><span data-stu-id="c7841-494">Causes validation to occur for the collections accessed through the <see cref="P:System.Web.HttpRequest.Cookies" />, <see cref="P:System.Web.HttpRequest.Form" />, and <see cref="P:System.Web.HttpRequest.QueryString" /> properties.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="c7841-495"><xref:System.Web.HttpRequest>类使用输入验证标志来跟踪是否对通过 <xref:System.Web.HttpRequest.Cookies%2A> 、 <xref:System.Web.HttpRequest.Form%2A> 和属性访问的请求集合执行验证 <xref:System.Web.HttpRequest.QueryString%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c7841-495">The <xref:System.Web.HttpRequest> class uses input validation flags to track whether to perform validation on the request collections accessed through the <xref:System.Web.HttpRequest.Cookies%2A>, <xref:System.Web.HttpRequest.Form%2A>, and <xref:System.Web.HttpRequest.QueryString%2A> properties.</span></span> <span data-ttu-id="c7841-496"><xref:System.Web.HttpRequest.ValidateInput%2A>方法设置这些标志，以便在调用、或属性的 get 访问器时 <xref:System.Web.HttpRequest.Cookies%2A> <xref:System.Web.HttpRequest.Form%2A> <xref:System.Web.HttpRequest.QueryString%2A> ，执行输入验证。</span><span class="sxs-lookup"><span data-stu-id="c7841-496">The <xref:System.Web.HttpRequest.ValidateInput%2A> method sets these flags so that when the get accessors for the <xref:System.Web.HttpRequest.Cookies%2A>, <xref:System.Web.HttpRequest.Form%2A>, or <xref:System.Web.HttpRequest.QueryString%2A> property are invoked, input validation is performed.</span></span> <span data-ttu-id="c7841-497">验证的工作原理是，针对可能危险的数据的硬编码列表检查所有输入数据。</span><span class="sxs-lookup"><span data-stu-id="c7841-497">Validation works by checking all input data against a hard-coded list of potentially dangerous data.</span></span>

 <span data-ttu-id="c7841-498">如果通过页面指令或配置启用验证功能，则在页面的处理阶段会调用此方法 `ProcessRequest` 。</span><span class="sxs-lookup"><span data-stu-id="c7841-498">If the validation feature is enabled by page directive or configuration, this method is called during the page's `ProcessRequest` processing phase.</span></span> <span data-ttu-id="c7841-499"><xref:System.Web.HttpRequest.ValidateInput%2A>如果未启用验证功能，则您的代码可以调用方法。</span><span class="sxs-lookup"><span data-stu-id="c7841-499">The <xref:System.Web.HttpRequest.ValidateInput%2A> method can be called by your code if the validation feature is not enabled.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpRequestValidationException"><span data-ttu-id="c7841-500">从客户端接收到具有潜在危险的数据。</span><span class="sxs-lookup"><span data-stu-id="c7841-500">Potentially dangerous data was received from the client.</span></span></exception>
        <altmember cref="P:System.Web.HttpRequest.Cookies" />
        <altmember cref="P:System.Web.HttpRequest.Form" />
        <altmember cref="P:System.Web.HttpRequest.QueryString" />
      </Docs>
    </Member>
  </Members>
</Type>
