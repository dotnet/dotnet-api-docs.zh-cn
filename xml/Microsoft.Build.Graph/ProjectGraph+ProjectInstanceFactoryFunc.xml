<Type Name="ProjectGraph+ProjectInstanceFactoryFunc" FullName="Microsoft.Build.Graph.ProjectGraph+ProjectInstanceFactoryFunc">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2d7189fb5b0fd0c761eed3f096240ad63869d753" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89750654" /></Metadata><TypeSignature Language="C#" Value="public delegate Microsoft.Build.Execution.ProjectInstance ProjectGraph.ProjectInstanceFactoryFunc(string projectPath, Dictionary&lt;string,string&gt; globalProperties, ProjectCollection projectCollection);" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi sealed ProjectGraph/ProjectInstanceFactoryFunc extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Build.Graph.ProjectGraph.ProjectInstanceFactoryFunc" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function ProjectGraph.ProjectInstanceFactoryFunc(projectPath As String, globalProperties As Dictionary(Of String, String), projectCollection As ProjectCollection) As ProjectInstance " />
  <TypeSignature Language="C++ CLI" Value="public: delegate Microsoft::Build::Execution::ProjectInstance ^ ProjectGraph::ProjectInstanceFactoryFunc(System::String ^ projectPath, Dictionary&lt;System::String ^, System::String ^&gt; ^ globalProperties, ProjectCollection ^ projectCollection);" />
  <TypeSignature Language="F#" Value="type ProjectGraph.ProjectInstanceFactoryFunc = delegate of string * Dictionary&lt;string, string&gt; * ProjectCollection -&gt; ProjectInstance" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Build</AssemblyName>
    <AssemblyVersion>15.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="projectPath" Type="System.String" />
    <Parameter Name="globalProperties" Type="System.Collections.Generic.Dictionary&lt;System.String,System.String&gt;" />
    <Parameter Name="projectCollection" Type="Microsoft.Build.Evaluation.ProjectCollection" />
  </Parameters>
  <ReturnValue>
    <ReturnType>Microsoft.Build.Execution.ProjectInstance</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="projectPath">要分析的项目文件的路径。</param>
    <param name="globalProperties">用于创建 ProjectInstance 的全局属性。</param>
    <param name="projectCollection">用于分析过程的 <see cref="T:Microsoft.Build.Evaluation.ProjectCollection" /> 上下文。</param>
    <summary>用于为特定 <see cref="T:Microsoft.Build.Graph.ProjectGraphEntryPoint" /> 实例构造 <see cref="T:Microsoft.Build.Execution.ProjectInstance" /> 的回调。</summary>
    <returns>一个 <see cref="T:Microsoft.Build.Execution.ProjectInstance" /> 实例。 此值不得为 Null。</returns>
    <remarks>ProjectGraph 使用的此委托的默认版本只是使用来自参数的信息调用 ProjectInstance 构造函数。 此委托作为挂钩提供，允许在将 <see cref="T:Microsoft.Build.Evaluation.Project" /> 实例转换为 ProjectInstance 以供 ProjectGraph 使用之前创建实例。
返回的 ProjectInstance 将存储并随 ProjectGraph 一起提供。
如果此回调选择生成不可变的 ProjectInstance，例如通过使用 <see cref="M:Microsoft.Build.Evaluation.Project.CreateProjectInstance" /> with 标志 <see cref="F:Microsoft.Build.Execution.ProjectInstanceSettings.Immutable" /> ，则生成的 ProjectGraph 节点可能不是可生成。
为避免损坏关系图以及基于关系图的后续生成：-必须使用所有回调参数创建 ProjectInstance，而不是任何突变-不应以任何方式转变项目实例，其状态应为项目文件的完全保真表示形式。</remarks>
  </Docs>
</Type>
