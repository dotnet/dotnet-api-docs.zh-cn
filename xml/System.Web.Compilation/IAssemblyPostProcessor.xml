<Type Name="IAssemblyPostProcessor" FullName="System.Web.Compilation.IAssemblyPostProcessor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7f3ce5813903e751fff1b66168f7c9c44ae5525c" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="70538568" /></Metadata><TypeSignature Language="C#" Value="public interface IAssemblyPostProcessor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAssemblyPostProcessor implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.IAssemblyPostProcessor" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAssemblyPostProcessor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAssemblyPostProcessor : IDisposable" />
  <TypeSignature Language="F#" Value="type IAssemblyPostProcessor = interface&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="81d81-101">定义方法，类可实现这些方法在生成程序集之后对程序集进行处理。</span><span class="sxs-lookup"><span data-stu-id="81d81-101">Defines the method a class implements to process an assembly after the assembly has been built.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81d81-102">实现此接口的类在编译后可以访问程序集。</span><span class="sxs-lookup"><span data-stu-id="81d81-102">A class implementing this interface can access an assembly after it has been compiled.</span></span> <span data-ttu-id="81d81-103"><xref:System.Web.Compilation.AssemblyBuilder>类编译程序集，然后检查是否已 <xref:System.Web.Compilation.IAssemblyPostProcessor> 在 Web 配置文件中注册了接口。</span><span class="sxs-lookup"><span data-stu-id="81d81-103">The <xref:System.Web.Compilation.AssemblyBuilder> class compiles assemblies and then checks to see whether an <xref:System.Web.Compilation.IAssemblyPostProcessor> interface has been registered in the Web configuration file.</span></span> <span data-ttu-id="81d81-104">如果是这样，则 <xref:System.Web.Compilation.AssemblyBuilder> 实例调用 <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> 接口的方法， <xref:System.Web.Compilation.IAssemblyPostProcessor> 以便在编译后以及加载程序集之前执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="81d81-104">If so, the <xref:System.Web.Compilation.AssemblyBuilder> instance calls the <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> method for the <xref:System.Web.Compilation.IAssemblyPostProcessor> interface to perform any action after the compilation and before loading the assembly.</span></span> <span data-ttu-id="81d81-105">例如，探查器工具可以实现此接口，以在程序集中建立探测。</span><span class="sxs-lookup"><span data-stu-id="81d81-105">For example, a profiler tool could implement this interface to establish probes in the assembly.</span></span>  
  
 <span data-ttu-id="81d81-106"><xref:System.Web.Compilation.IAssemblyPostProcessor>注册接口后，将始终在调试模式下编译 ASP.NET 应用程序及其程序集。</span><span class="sxs-lookup"><span data-stu-id="81d81-106">When an <xref:System.Web.Compilation.IAssemblyPostProcessor> interface is registered, the ASP.NET application and its assemblies will always be compiled in debug mode.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81d81-107">下面的代码示例演示如何创建接口的实现 <xref:System.Web.Compilation.IAssemblyPostProcessor> ，并将其注册到 Web 应用程序的 Web.config 文件中。</span><span class="sxs-lookup"><span data-stu-id="81d81-107">The following code example demonstrates how to create an implementation of the <xref:System.Web.Compilation.IAssemblyPostProcessor> interface, and register it in the Web.config file of a Web application.</span></span>  
  
 <span data-ttu-id="81d81-108">此代码示例的第一部分创建一个名为 `Samples.Process.postProcessTest` 的类，该类实现 <xref:System.Web.Compilation.IAssemblyPostProcessor> 接口。</span><span class="sxs-lookup"><span data-stu-id="81d81-108">The first part of the code example creates a class named `Samples.Process.postProcessTest` that implements the <xref:System.Web.Compilation.IAssemblyPostProcessor> interface.</span></span> <span data-ttu-id="81d81-109">此类执行调用方法时编写文件的简单操作 <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> 。</span><span class="sxs-lookup"><span data-stu-id="81d81-109">This class performs the simple action of writing a file when the <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> method is called.</span></span>  
  
 [!code-csharp[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/CS/postProcessTest.cs#1)]
 [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/VB/postProcessTest.vb#1)]  
  
 <span data-ttu-id="81d81-110">使用命令将类编译为 .dll 文件 `csc /target:library postProcessTest.cs` 。</span><span class="sxs-lookup"><span data-stu-id="81d81-110">Compile the class into a .dll file with the command `csc /target:library postProcessTest.cs`.</span></span> <span data-ttu-id="81d81-111">将生成的 .dll 文件添加到 ASP.NET 应用程序的 Bin 文件夹中，并将 .dll 注册到 Web.config 文件中，如下面的代码所示。</span><span class="sxs-lookup"><span data-stu-id="81d81-111">Add the resulting .dll file to the Bin folder of an ASP.NET application and register the .dll in the Web.config file, as shown in the following code.</span></span>  
  
```  
<compilation debug="true" assemblyPostProcessorType="Samples.Process.postProcessTest" />  
```  
  
 <span data-ttu-id="81d81-112">当用户访问该网站时，将对该 Web 应用程序进行动态编译，并将文件 MyTest.txt 写入 C:\compile。</span><span class="sxs-lookup"><span data-stu-id="81d81-112">When a user visits the Web site, the Web application is dynamically compiled and the file MyTest.txt will be written to C:\compile.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="PostProcessAssembly">
      <MemberSignature Language="C#" Value="public void PostProcessAssembly (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PostProcessAssembly(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostProcessAssembly (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostProcessAssembly(System::String ^ path);" />
      <MemberSignature Language="F#" Value="abstract member PostProcessAssembly : string -&gt; unit" Usage="iAssemblyPostProcessor.PostProcessAssembly path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="81d81-113">程序集的路径。</span><span class="sxs-lookup"><span data-stu-id="81d81-113">The path to the assembly.</span></span></param>
        <summary><span data-ttu-id="81d81-114">在加载程序集之前调用，可允许实现类对程序集进行修改。</span><span class="sxs-lookup"><span data-stu-id="81d81-114">Called before the assembly is loaded to allow the implementing class to modify the assembly.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="81d81-115"><xref:System.Web.Compilation.AssemblyBuilder>类在编译程序集后调用此方法。</span><span class="sxs-lookup"><span data-stu-id="81d81-115">The <xref:System.Web.Compilation.AssemblyBuilder> class calls this method after the assembly has been compiled.</span></span> <span data-ttu-id="81d81-116">在加载程序集之前要执行的任何操作都应包含在此方法中。</span><span class="sxs-lookup"><span data-stu-id="81d81-116">Any actions to be taken before loading the assembly should be included in this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="81d81-117">下面的代码示例演示如何创建接口的实现 <xref:System.Web.Compilation.IAssemblyPostProcessor> ，并将其注册到 Web 应用程序的 Web.config 文件中。</span><span class="sxs-lookup"><span data-stu-id="81d81-117">The following code example demonstrates how to create an implementation of the <xref:System.Web.Compilation.IAssemblyPostProcessor> interface, and register it in the Web.config file of a Web application.</span></span>  
  
 <span data-ttu-id="81d81-118">此代码示例的第一部分创建一个名为 `Samples.Process.postProcessTest` 的类，该类实现 <xref:System.Web.Compilation.IAssemblyPostProcessor> 接口。</span><span class="sxs-lookup"><span data-stu-id="81d81-118">The first part of the code example creates a class named `Samples.Process.postProcessTest` that implements the <xref:System.Web.Compilation.IAssemblyPostProcessor> interface.</span></span> <span data-ttu-id="81d81-119">此类执行调用方法时编写文件的简单操作 <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> 。</span><span class="sxs-lookup"><span data-stu-id="81d81-119">This class performs the simple action of writing a file when the <xref:System.Web.Compilation.IAssemblyPostProcessor.PostProcessAssembly%2A> method is called.</span></span>  
  
 [!code-csharp[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/CS/postProcessTest.cs#1)]
 [!code-vb[System.Web.Compilation.IAssemblyPostProcessor#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.IAssemblyPostProcessor/VB/postProcessTest.vb#1)]  
  
 <span data-ttu-id="81d81-120">使用命令将类编译为 .dll 文件 `csc /target:library postProcessTest.cs` 。</span><span class="sxs-lookup"><span data-stu-id="81d81-120">Compile the class into a .dll file with the command `csc /target:library postProcessTest.cs`.</span></span> <span data-ttu-id="81d81-121">将生成的 .dll 文件添加到 ASP.NET 应用程序的 Bin 文件夹中，并将 .dll 注册到 Web.config 文件中，如下面的代码所示。</span><span class="sxs-lookup"><span data-stu-id="81d81-121">Add the resulting .dll file to the Bin folder of an ASP.NET application and register the .dll in the Web.config file, as shown in the following code.</span></span>  
  
```  
<compilation debug="true" assemblyPostProcessorType="Samples.Process.postProcessTest" />  
```  
  
 <span data-ttu-id="81d81-122">当用户访问该网站时，将对该 Web 应用程序进行动态编译，并将文件 MyTest.txt 写入 C:\compile。</span><span class="sxs-lookup"><span data-stu-id="81d81-122">When a user visits the Web site, the Web application is dynamically compiled and the file MyTest.txt will be written to C:\compile.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
