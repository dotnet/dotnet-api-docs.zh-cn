<Type Name="ClientBuildManagerParameter" FullName="System.Web.Compilation.ClientBuildManagerParameter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f6436711a662d12db910069df6c0654e3281fe60" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83963202" /></Metadata><TypeSignature Language="C#" Value="public class ClientBuildManagerParameter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ClientBuildManagerParameter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.ClientBuildManagerParameter" />
  <TypeSignature Language="VB.NET" Value="Public Class ClientBuildManagerParameter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClientBuildManagerParameter" />
  <TypeSignature Language="F#" Value="type ClientBuildManagerParameter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>包含在预编译期间传递给 ASP.NET 编译器的值。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以对 ASP.NET 网页和代码文件进行预编译，以便为用户提供更快的响应，并允许在不部署源代码的情况下部署站点。 有关预编译 ASP.NET 网站的详细信息，请参阅[ASP.NET 网站项目预编译概述](https://docs.microsoft.com/previous-versions/aspnet/bb398860(v=vs.100))。  
  
 <xref:System.Web.Compilation.ClientBuildManagerParameter> 类存储预编译期间使用的值。 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> 属性确定如何生成程序集。 例如，你可以将 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> 设置为 <xref:System.Web.Compilation.PrecompilationFlags.Clean> 以重新编译以前编译过的任何组件，或将其设置为 <xref:System.Web.Compilation.PrecompilationFlags.OverwriteTarget>，以允许生成的程序集覆盖目标目录中的任何组件。 <xref:System.Web.Compilation.PrecompilationFlags> 枚举器具有一个允许其成员值的按位组合的 <xref:System.FlagsAttribute> 属性。 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> 属性可以包含来自 <xref:System.Web.Compilation.PrecompilationFlags> 枚举的多个值，以指定预编译行为的组合。  
  
 为 <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A> 属性或 <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A> 属性分配一个值，用于创建具有强名称的程序集。 不需要设置这两个值来创建具有强名称的程序集。  
  
 <xref:System.Web.Compilation.ClientBuildManagerParameter> 对象通过 <xref:System.Web.Compilation.ClientBuildManager.%23ctor%2A> 构造函数传递到 <xref:System.Web.Compilation.ClientBuildManager> 对象。  
  
   
  
## Examples  
 下面的代码示例是 <xref:System.Web.Compilation.ClientBuildManager> 类概述中的代码示例的一部分。 在此示例中，将创建一个 <xref:System.Web.Compilation.ClientBuildManagerParameter> 对象并设置其值。 生成的程序集将具有基于所提供的密钥文件的强名称，并将根据提供的 <xref:System.Web.Compilation.PrecompilationFlags> 值进行预编译。  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
    <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
    <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb398860(v=vs.100)">ASP.NET 网站预编译</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ClientBuildManagerParameter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.ClientBuildManagerParameter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ClientBuildManagerParameter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Compilation.ClientBuildManagerParameter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数不初始化任何属性值。 创建对象后，必须通过 <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A>、<xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A>和 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> 属性设置这些值。  
  
   
  
## Examples  
 下面的代码示例是 <xref:System.Web.Compilation.ClientBuildManager> 类概述中的代码示例的一部分。 在此示例中，将创建一个 <xref:System.Web.Compilation.ClientBuildManagerParameter> 对象并设置其值。 生成的程序集将具有基于所提供的密钥文件的强名称，并将根据提供的 <xref:System.Web.Compilation.PrecompilationFlags> 值进行预编译。  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExcludedVirtualPaths">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.List&lt;string&gt; ExcludedVirtualPaths { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.List`1&lt;string&gt; ExcludedVirtualPaths" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.ExcludedVirtualPaths" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExcludedVirtualPaths As List(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::List&lt;System::String ^&gt; ^ ExcludedVirtualPaths { System::Collections::Generic::List&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExcludedVirtualPaths : System.Collections.Generic.List&lt;string&gt;" Usage="System.Web.Compilation.ClientBuildManagerParameter.ExcludedVirtualPaths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置排除的虚拟路径。</summary>
        <value>排除的虚拟路径。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrecompilationFlags">
      <MemberSignature Language="C#" Value="public System.Web.Compilation.PrecompilationFlags PrecompilationFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Web.Compilation.PrecompilationFlags PrecompilationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Property PrecompilationFlags As PrecompilationFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Compilation::PrecompilationFlags PrecompilationFlags { System::Web::Compilation::PrecompilationFlags get(); void set(System::Web::Compilation::PrecompilationFlags value); };" />
      <MemberSignature Language="F#" Value="member this.PrecompilationFlags : System.Web.Compilation.PrecompilationFlags with get, set" Usage="System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.PrecompilationFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置确定预编译行为的标志。</summary>
        <value>用于客户端生成的 <see cref="T:System.Web.Compilation.PrecompilationFlags" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> 属性确定如何生成程序集。 例如，你可以将 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> 设置为 <xref:System.Web.Compilation.PrecompilationFlags.Clean> 以重新编译以前编译过的任何组件，或将其设置为 <xref:System.Web.Compilation.PrecompilationFlags.OverwriteTarget>，以允许生成的程序集覆盖目标目录中的任何组件。 <xref:System.Web.Compilation.PrecompilationFlags> 枚举器具有一个允许其成员值的按位组合的 <xref:System.FlagsAttribute> 属性。 <xref:System.Web.Compilation.ClientBuildManagerParameter.PrecompilationFlags%2A> 属性可以包含来自 <xref:System.Web.Compilation.PrecompilationFlags> 枚举的多个值，以指定预编译行为的组合。  
  
   
  
## Examples  
 下面的代码示例是 <xref:System.Web.Compilation.ClientBuildManager> 类概述中的代码示例的一部分。 在此示例中，将创建一个 <xref:System.Web.Compilation.ClientBuildManagerParameter> 对象并设置其值。 生成的程序集将具有基于所提供的密钥文件的强名称，并将根据提供的 <xref:System.Web.Compilation.PrecompilationFlags> 值进行预编译。  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
        <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb398860(v=vs.100)">ASP.NET 网站预编译</related>
      </Docs>
    </Member>
    <Member MemberName="StrongNameKeyContainer">
      <MemberSignature Language="C#" Value="public string StrongNameKeyContainer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StrongNameKeyContainer" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer" />
      <MemberSignature Language="VB.NET" Value="Public Property StrongNameKeyContainer As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StrongNameKeyContainer { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StrongNameKeyContainer : string with get, set" Usage="System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置编译期间使用的密钥容器。</summary>
        <value>表示密钥容器的值的 <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为 <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A> 属性或 <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A> 属性分配一个值，用于创建具有强名称的程序集。 不需要设置这两个值来创建具有强名称的程序集。  
  
   
  
## Examples  
 下面的代码示例类似于 <xref:System.Web.Compilation.ClientBuildManager> 类概述中的代码示例，但生成的程序集将具有基于所提供的密钥容器的强名称。 它将根据提供的 <xref:System.Web.Compilation.PrecompilationFlags> 值进行预编译。  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager_2/CS/source.cs#1)]
 [!code-vb[System.Web.Compilation.ClientBuildManager_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager_2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
        <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb398860(v=vs.100)">ASP.NET 网站预编译</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/yxw286t2(v=vs.100)">导入和导出受保护的配置 RSA 密钥容器</related>
      </Docs>
    </Member>
    <Member MemberName="StrongNameKeyFile">
      <MemberSignature Language="C#" Value="public string StrongNameKeyFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StrongNameKeyFile" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile" />
      <MemberSignature Language="VB.NET" Value="Public Property StrongNameKeyFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StrongNameKeyFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StrongNameKeyFile : string with get, set" Usage="System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置编译期间使用的密钥文件。</summary>
        <value>表示密钥文件的值的 <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为 <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyContainer%2A> 属性或 <xref:System.Web.Compilation.ClientBuildManagerParameter.StrongNameKeyFile%2A> 属性分配一个值，用于创建具有强名称的程序集。 不需要设置这两个值来创建具有强名称的程序集。  
  
   
  
## Examples  
 下面的代码示例是 <xref:System.Web.Compilation.ClientBuildManager> 类概述中的代码示例的一部分。 在此示例中，将创建一个 <xref:System.Web.Compilation.ClientBuildManagerParameter> 对象并设置其值。 生成的程序集将具有基于所提供的密钥文件的强名称，并将根据提供的 <xref:System.Web.Compilation.PrecompilationFlags> 值进行预编译。  
  
 [!code-csharp[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/CS/source.cs#2)]
 [!code-vb[System.Web.Compilation.ClientBuildManager#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.ClientBuildManager/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
        <altmember cref="T:System.Web.Compilation.PrecompilationFlags" />
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb398860(v=vs.100)">ASP.NET 网站预编译</related>
        <related type="Article" href="/dotnet/standard/assembly/create-use-strong-named">创建和使用具有强名称的程序集</related>
      </Docs>
    </Member>
  </Members>
</Type>
