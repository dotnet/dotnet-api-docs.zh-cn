<Type Name="CompilerType" FullName="System.Web.Compilation.CompilerType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="32e8595b164fa5a651151f0ec9044600ab3804ea" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86847590" /></Metadata><TypeSignature Language="C#" Value="public sealed class CompilerType" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CompilerType extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.CompilerType" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CompilerType" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompilerType sealed" />
  <TypeSignature Language="F#" Value="type CompilerType = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示 ASP.NET 生成环境用来从虚拟路径生成和编译源代码的编译器设置。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> 实现的属性 <xref:System.Web.Compilation.BuildProvider> 来检查用于从该生成提供程序的虚拟路径生成和编译源代码的设置。  
  
 ASP.NET 生成环境使用 <xref:System.Web.Compilation.BuildProvider> 对象在项目中为自定义文件类型生成源代码。 派生自的类 <xref:System.Web.Compilation.BuildProvider> 提供源文件、网页、资源和其他自定义项的生成详细信息。 如果生成提供程序需要特定的编程语言，则它会重写 <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> 属性，并调用 <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A> 方法为 <xref:System.Web.Compilation.CompilerType> 支持的编程语言返回对象。  
  
 若要 <xref:System.Web.Compilation.CompilerType> 在生成提供程序实现中设置对象，请使用 <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A> 方法或 <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A> 方法。  
  
 <xref:System.Web.Compilation.CompilerType.CodeDomProviderType%2A>属性指定 <xref:System.CodeDom.Compiler.CodeDomProvider> 用于为生成提供程序生成和编译源代码的实现。 <xref:System.Web.Compilation.CompilerType.CompilerParameters%2A>属性定义用于将源代码编译为程序集的设置。  
  
   
  
## Examples  
 下面的代码示例演示了一个简单的生成提供程序实现，该实现继承自抽象 <xref:System.Web.Compilation.BuildProvider> 基类。 生成提供程序会重 <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> 写 <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A> 基类的、和 <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> 成员。  
  
 [!code-csharp[System.Web.Compilation_SampleBuildProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation_SampleBuildProvider/CS/samplebuildprovider.cs#2)]
 [!code-vb[System.Web.Compilation_SampleBuildProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation_SampleBuildProvider/VB/samplebuildprovider.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
    <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
    <altmember cref="T:System.Web.Compilation.BuildProvider" />
  </Docs>
  <Members>
    <Member MemberName="CodeDomProviderType">
      <MemberSignature Language="C#" Value="public Type CodeDomProviderType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type CodeDomProviderType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.CompilerType.CodeDomProviderType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeDomProviderType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ CodeDomProviderType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeDomProviderType : Type" Usage="System.Web.Compilation.CompilerType.CodeDomProviderType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取已配置的 <see cref="T:System.Type" /> 实现的 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />。</summary>
        <value>一个只读的 <see cref="T:System.Type" />，表示已配置的代码提供程序类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.CompilerType.CodeDomProviderType%2A>属性指定 <xref:System.CodeDom.Compiler.CodeDomProvider> 用于为生成提供程序生成和编译源代码的实现。  
  
 例如，如果将生成提供程序配置为使用 .NET Framework 中 Visual Basic 的代码提供程序， <xref:System.Web.Compilation.CompilerType.CodeDomProviderType%2A> <xref:System.Type> 则将返回类的 <xref:Microsoft.VisualBasic.VBCodeProvider> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.Web.Compilation.BuildProvider" />
      </Docs>
    </Member>
    <Member MemberName="CompilerParameters">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.CompilerParameters CompilerParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.CompilerParameters CompilerParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.CompilerType.CompilerParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompilerParameters As CompilerParameters" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::Compiler::CompilerParameters ^ CompilerParameters { System::CodeDom::Compiler::CompilerParameters ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompilerParameters : System.CodeDom.Compiler.CompilerParameters" Usage="System.Web.Compilation.CompilerType.CompilerParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerParameters</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于将源代码编译为程序集的设置和选项。</summary>
        <value>一个只读的 <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> 对象，表示代码编译器的设置和选项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.Compilation.CompilerType.CompilerParameters%2A> 属性检查为编译器配置的编译器选项。 <xref:System.Web.Compilation.CompilerType.CompilerParameters%2A>属性指定是否将警告视为错误、编译器输出是否包含调试信息以及其他编译器设置。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.CompilerType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="compilerType.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">与 <see cref="T:System.Web.Compilation.CompilerType" /> 的当前实例进行比较的对象。</param>
        <summary>确定指定的对象是否表示与 <see cref="T:System.Web.Compilation.CompilerType" /> 的当前实例相同的代码提供程序和编译器设置。</summary>
        <returns>如果 <paramref name="o" /> 为 <see cref="T:System.Web.Compilation.CompilerType" /> 对象并且它的值与此实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.CompilerType.Equals%2A>方法将重写 <xref:System.Object.Equals%2A?displayProperty=nameWithType> 方法。  
  
 <xref:System.Web.Compilation.CompilerType.Equals%2A> 基于两个实例的 <xref:System.Web.Compilation.CompilerType.CodeDomProviderType%2A> 、 <xref:System.CodeDom.Compiler.CompilerParameters.WarningLevel%2A?displayProperty=nameWithType> 、 <xref:System.CodeDom.Compiler.CompilerParameters.CompilerOptions%2A?displayProperty=nameWithType> 和 <xref:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation%2A?displayProperty=nameWithType> 属性进行比较。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.CompilerType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="compilerType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回此实例的哈希代码。</summary>
        <returns><see cref="T:System.Web.Compilation.CompilerType" /> 的当前实例的 32 位有符号整数哈希代码，适合在哈希算法和数据结构（如哈希表）中使用。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.CompilerType.GetHashCode%2A>方法将重写 <xref:System.Object.GetHashCode%2A?displayProperty=nameWithType> 方法。  
  
 <xref:System.Web.Compilation.CompilerType.GetHashCode%2A> 根据方法为相等的两个对象生成相同的哈希代码 <xref:System.Web.Compilation.CompilerType.Equals%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Web.Compilation.CompilerType.Equals(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>
