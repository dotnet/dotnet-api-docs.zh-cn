<Type Name="BuildProvider" FullName="System.Web.Compilation.BuildProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="36cb6a03318709be3e7dd2daf6579dc461fc1c6c" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83978813" /></Metadata><TypeSignature Language="C#" Value="public abstract class BuildProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit BuildProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.BuildProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class BuildProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class BuildProvider abstract" />
  <TypeSignature Language="F#" Value="type BuildProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>定义一组用于在 ASP.NET 生成环境中生成源代码的属性和方法。 此类是抽象类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 生成环境使用 <xref:System.Web.Compilation.BuildProvider> 对象为应用程序中的不同文件类型生成源代码。 派生自 <xref:System.Web.Compilation.BuildProvider> 的类主要提供文件、网页、资源和其他自定义项的源代码。  
  
 通常不会直接创建 <xref:System.Web.Compilation.BuildProvider> 类的实例。 相反，您实现的类派生自 <xref:System.Web.Compilation.BuildProvider>，并配置 <xref:System.Web.Compilation.BuildProvider> 实现以便在 ASP.NET 生成环境中使用。  
  
 <xref:System.Web.Compilation.BuildProvider> 类的实例与 <xref:System.Web.Compilation.AssemblyBuilder> 对象结合使用，以便将一个或多个文件生成到已编译的程序集中。 <xref:System.Web.Compilation.BuildProvider> 实例以适当的语言为各个文件生成源代码，并且 <xref:System.Web.Compilation.AssemblyBuilder> 对象将每个 <xref:System.Web.Compilation.BuildProvider> 实例提供的源组合到单个程序集中。  
  
 ASP.NET 生成环境使用 <xref:System.Web.Compilation.BuildProvider> 类的实例在应用程序内生成文件。 <xref:System.Web.Compilation.BuildProvider> 类的 <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> 属性指示要生成的文件的路径。 应用程序内每个文件的文件扩展名映射到相应的生成提供程序。 ASP.NET 生成环境根据文件扩展名为每个文件初始化一个 <xref:System.Web.Compilation.BuildProvider> 实例，并使用 <xref:System.Web.Compilation.BuildProvider> 方法来生成该文件的源代码。 当从一个或多个文件生成程序集时，ASP.NET 生成环境会根据首选编译器语言和文件上下文将 <xref:System.Web.Compilation.AssemblyBuilder> 对象传递到 <xref:System.Web.Compilation.BuildProvider> 方法，以便 <xref:System.Web.Compilation.BuildProvider> 实例可以将其文件的源代码提供给整个程序集。  
  
 若要为 ASP.NET 应用程序中的文件类型定义自定义生成操作，你必须从 <xref:System.Web.Compilation.BuildProvider>中派生一个类，在派生类中实现成员以生成文件类型，并为应用程序配置文件中的相应文件扩展名配置生成提供程序。  
  
 指定受支持文件的文件扩展名，以及生成提供程序是否支持代码文件、Web 文件、资源文件或所有文件。 使用 `type` 特性指定生成提供程序实现的完全限定类型名称。 使用 <xref:System.Web.Compilation.BuildProviderAppliesToAttribute> 类指定生成提供程序是应用于 App_Code 目录中的文件，还是应用于 Web 内容目录中的文件、全局或本地资源，还是应用于所有文件。 使用 `extension` 特性来指定用于标识 <xref:System.Web.Compilation.BuildProvider> 类支持的文件的文件扩展名。 使用 <xref:System.Web.Configuration.BuildProviderCollection> 类检查配置文件中的生成提供程序。 有关配置生成提供程序的详细信息，请参阅[用于编译的 BuildProviders 元素（ASP.NET 设置架构）](https://msdn.microsoft.com/library/40fa889d-5412-487a-b6a9-21eb011c2384)。  
  
 若要实现生成自定义文件类型的源代码的生成提供程序，请从 <xref:System.Web.Compilation.BuildProvider>中派生一个类，并重写 <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> 方法，以便为支持的文件类型生成源代码。 生成的源将以 CodeDOM 图的形式添加到 <xref:System.Web.Compilation.AssemblyBuilder> 对象中，或者添加为表示物理源代码文件的内容。 如果生成提供程序需要特定的编程语言，请重写 <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> 属性以返回受支持的编程语言的 <xref:System.Web.Compilation.CompilerType> 对象。 如果生成提供程序不需要特定编程语言，则不要重写 <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> 属性;使用基类实现，这表示生成提供程序可以使用任何 .NET Framework 语言，如 Visual Basic 或 C# 。  
  
 若要实现生成 Web 内容源代码的生成提供程序，请从 <xref:System.Web.Compilation.BuildProvider> 中派生一个类，然后重写 <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A> 方法以返回 <xref:System.Web.Compilation.BuildProvider>生成的类的 <xref:System.Type>。 重写 <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> 方法，以便为受支持的文件提供的类型生成源代码。  
  
> [!NOTE]
>  将自定义 <xref:System.Web.Compilation.BuildProvider> 类添加到 web.config 文件在 ASP.NET 网站中运行，但不能在 ASP.NET Web 应用程序项目中使用。 在 Web 应用程序项目中，不能在应用程序中包含由 <xref:System.Web.Compilation.BuildProvider> 类生成的代码。 有关详细信息，请参阅[ASP.NET Web 应用程序项目预编译概述](https://msdn.microsoft.com/library/b940abbd-178d-4570-b441-52914fa7b887)。  
  
   
  
## Examples  
 下面的代码示例演示了一个简单的生成提供程序实现，该实现从抽象 <xref:System.Web.Compilation.BuildProvider> 基类继承。 生成提供程序会重写基类的 <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>、<xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>和 <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> 成员。 该示例不包括 `SampleClassGenerator` 类的实现。 有关详细信息，请参阅 <xref:System.CodeDom.CodeCompileUnit> 类概述。  
  
 [!code-csharp[System.Web.Compilation.SampleBuildProvider_2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.SampleBuildProvider_2/CS/Class1.cs#2)]
 [!code-vb[System.Web.Compilation.SampleBuildProvider_2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.SampleBuildProvider_2/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Compilation.CompilerType" />
    <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
    <altmember cref="T:System.Web.Compilation.AssemblyBuilder" />
    <altmember cref="T:System.Web.Configuration.BuildProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BuildProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; BuildProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Web.Compilation.BuildProvider" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 由于 <xref:System.Web.Compilation.BuildProvider> 类是抽象类，因此不能使用构造函数直接创建 <xref:System.Web.Compilation.BuildProvider> 的实例。  
  
 从 <xref:System.Web.Compilation.BuildProvider> 类派生时，重写构造函数以实现生成提供程序实现的自定义初始化操作。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeCompilerType">
      <MemberSignature Language="C#" Value="public virtual System.Web.Compilation.CompilerType CodeCompilerType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Compilation.CompilerType CodeCompilerType" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.BuildProvider.CodeCompilerType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CodeCompilerType As CompilerType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::Compilation::CompilerType ^ CodeCompilerType { System::Web::Compilation::CompilerType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeCompilerType : System.Web.Compilation.CompilerType" Usage="System.Web.Compilation.BuildProvider.CodeCompilerType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.CompilerType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示生成提供程序为自定义文件类型生成源代码所使用的编译器类型。</summary>
        <value>只读 <see cref="T:System.Web.Compilation.CompilerType" />，表示用于生成虚拟路径的源代码的代码生成器、代码编译器和编译器设置。 基类返回 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> 属性可提供编译 <xref:System.Web.Compilation.BuildProvider>的实现的源代码的设置。 如果生成提供程序不需要特定代码语言来生成和编译源代码，则 `null` <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> 属性。  
  
 若要在生成提供程序实现中设置 <xref:System.Web.Compilation.CompilerType> 对象的值，请使用 <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A> 或 <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A> 方法。  
  
 <xref:System.Web.Compilation.CompilerType.CodeDomProviderType%2A> 属性指定用于为生成提供程序生成和编译源代码的 <xref:System.CodeDom.Compiler.CodeDomProvider> 实现。 <xref:System.Web.Compilation.CompilerType.CompilerParameters%2A> 属性定义用于将源代码编译为程序集的设置。  
  
   
  
## Examples  
 下面的代码示例演示了一个简单的生成提供程序实现，该实现从抽象 <xref:System.Web.Compilation.BuildProvider> 基类继承。 生成提供程序会重写基类的 <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>、<xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>和 <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> 成员。  
  
 [!code-csharp[System.Web.Compilation.SampleBuildProvider_2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.SampleBuildProvider_2/CS/Class1.cs#2)]
 [!code-vb[System.Web.Compilation.SampleBuildProvider_2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.SampleBuildProvider_2/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.CompilerType" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCode">
      <MemberSignature Language="C#" Value="public virtual void GenerateCode (System.Web.Compilation.AssemblyBuilder assemblyBuilder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCode(class System.Web.Compilation.AssemblyBuilder assemblyBuilder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GenerateCode(System.Web.Compilation.AssemblyBuilder)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCode (assemblyBuilder As AssemblyBuilder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCode(System::Web::Compilation::AssemblyBuilder ^ assemblyBuilder);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCode : System.Web.Compilation.AssemblyBuilder -&gt; unit&#xA;override this.GenerateCode : System.Web.Compilation.AssemblyBuilder -&gt; unit" Usage="buildProvider.GenerateCode assemblyBuilder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyBuilder" Type="System.Web.Compilation.AssemblyBuilder" />
      </Parameters>
      <Docs>
        <param name="assemblyBuilder">引用生成提供程序所生成的源代码的程序集生成器。</param>
        <summary>为生成提供程序的虚拟路径生成源代码，并将源代码添加到指定程序集生成器。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要实现生成自定义文件类型的源代码的生成提供程序，请从 <xref:System.Web.Compilation.BuildProvider> 类中派生一个类，并重写 <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> 方法，以便为支持的文件类型生成源代码。  
  
 通常，生成提供程序的 <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> 实现读取 <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> 属性、分析内容，并将生成的源代码添加到指定的 <xref:System.Web.Compilation.AssemblyBuilder> 对象。 您可以以 <xref:System.IO.TextWriter> 对象或 CodeDOM 图的形式向程序集提供源代码。 若要通过 <xref:System.IO.TextWriter> 对象将源代码添加到程序集，请使用 <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> 方法。 若要将 CodeDOM 图中的源代码添加到程序集，请使用 <xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A> 方法。  
  
 如果生成提供程序以特定编程语言生成源代码，则必须重写 <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> 属性才能返回支持的编程语言的 <xref:System.Web.Compilation.CompilerType> 对象。  
  
   
  
## Examples  
 下面的代码示例演示了一个简单的生成提供程序实现，该实现从抽象 <xref:System.Web.Compilation.BuildProvider> 基类继承。 生成提供程序会重写基类的 <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>、<xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>和 <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> 成员。  
  
 [!code-csharp[System.Web.Compilation.SampleBuildProvider_2#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation.SampleBuildProvider_2/CS/Class1.cs#2)]
 [!code-vb[System.Web.Compilation.SampleBuildProvider_2#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation.SampleBuildProvider_2/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.Compilation.BuildProvider.OpenReader" />
        <altmember cref="Overload:System.Web.Compilation.BuildProvider.OpenStream" />
        <altmember cref="T:System.Web.Compilation.AssemblyBuilder" />
        <related type="Article" href="/dotnet/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation">动态源代码生成和编译</related>
      </Docs>
    </Member>
    <Member MemberName="GetCodeCompileUnit">
      <MemberSignature Language="C#" Value="protected internal virtual System.CodeDom.CodeCompileUnit GetCodeCompileUnit (out System.Collections.IDictionary linePragmasTable);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.CodeDom.CodeCompileUnit GetCodeCompileUnit([out] class System.Collections.IDictionary&amp; linePragmasTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GetCodeCompileUnit(System.Collections.IDictionary@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function GetCodeCompileUnit (ByRef linePragmasTable As IDictionary) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::CodeDom::CodeCompileUnit ^ GetCodeCompileUnit([Runtime::InteropServices::Out] System::Collections::IDictionary ^ % linePragmasTable);" />
      <MemberSignature Language="F#" Value="abstract member GetCodeCompileUnit : IDictionary -&gt; System.CodeDom.CodeCompileUnit&#xA;override this.GetCodeCompileUnit : IDictionary -&gt; System.CodeDom.CodeCompileUnit" Usage="buildProvider.GetCodeCompileUnit linePragmasTable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="linePragmasTable" Type="System.Collections.IDictionary" RefType="out" />
      </Parameters>
      <Docs>
        <param name="linePragmasTable">当此方法返回时，该参数将包含一个字典，该字典包含源代码中所有关联行号和行杂注。 此参数在传递时尚未初始化。</param>
        <summary>表示生成的 CodeDOM 关系图的容器。</summary>
        <returns><see cref="T:System.Web.Compilation.BuildProvider" /> 实例生成的 CodeDOM 关系图的容器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法可通过 <xref:System.Web.Compilation.ClientBuildManager> 类用于语法突出显示和 Visual Studio 中的设计器支持。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomString">
      <MemberSignature Language="C#" Value="public virtual string GetCustomString (System.CodeDom.Compiler.CompilerResults results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetCustomString(class System.CodeDom.Compiler.CompilerResults results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetCustomString (results As CompilerResults) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetCustomString(System::CodeDom::Compiler::CompilerResults ^ results);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomString : System.CodeDom.Compiler.CompilerResults -&gt; string&#xA;override this.GetCustomString : System.CodeDom.Compiler.CompilerResults -&gt; string" Usage="buildProvider.GetCustomString results" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="results" Type="System.CodeDom.Compiler.CompilerResults" />
      </Parameters>
      <Docs>
        <param name="results">生成提供程序的虚拟路径的编译结果。</param>
        <summary>生成要在编译后的程序集中保留的字符串。</summary>
        <returns>要保留在生成环境中的字符串；如果 <see cref="T:System.Web.Compilation.BuildProvider" /> 实例不实现 <see cref="M:System.Web.Compilation.BuildProvider.GetCustomString(System.CodeDom.Compiler.CompilerResults)" />，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.BuildManager> 对象的 <xref:System.Web.Compilation.BuildManager.GetCompiledCustomString%2A> 方法为输入虚拟路径创建生成提供程序的实例，并对 <xref:System.Web.Compilation.BuildProvider> 对象调用 <xref:System.Web.Compilation.BuildProvider.GetCustomString%2A> 方法。  
  
 Base <xref:System.Web.Compilation.BuildProvider> 类返回 <xref:System.Web.Compilation.BuildProvider.GetCustomString%2A> 方法的 `null`，指示未实现 <xref:System.Web.Compilation.BuildProvider.GetCustomString%2A>。  
  
 某些生成提供程序实现可以实现 <xref:System.Web.Compilation.BuildProvider.GetCustomString%2A> 来代替 <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A> 方法。 <xref:System.Web.Compilation.BuildProvider> 对象通常使用 <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A> 来返回虚拟路径的 <xref:System.Type> 对象。 不过，<xref:System.Web.Compilation.BuildProvider.GetCustomString%2A> 方法可用于指示 <xref:System.Web.Compilation.BuildProvider> 对象可以从虚拟路径生成多个类型。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
        <altmember cref="M:System.Web.Compilation.BuildManager.GetCompiledCustomString(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultCompilerType">
      <MemberSignature Language="C#" Value="protected System.Web.Compilation.CompilerType GetDefaultCompilerType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Web.Compilation.CompilerType GetDefaultCompilerType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerType" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetDefaultCompilerType () As CompilerType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::Compilation::CompilerType ^ GetDefaultCompilerType();" />
      <MemberSignature Language="F#" Value="member this.GetDefaultCompilerType : unit -&gt; System.Web.Compilation.CompilerType" Usage="buildProvider.GetDefaultCompilerType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.CompilerType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回应用程序中默认语言的编译器设置。</summary>
        <returns><see cref="T:System.Web.Compilation.CompilerType" />，表示应用程序中默认语言的编译器设置。 基类根据应用程序配置文件返回默认编译器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A> 方法来检查生成提供程序的默认编译器类型。 使用 <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A> 方法来检查在生成提供程序中为特定语言名称配置的编译器类型。  
  
 Base <xref:System.Web.Compilation.BuildProvider> 类使用应用程序配置文件的部分中的 `defaultLanguage` 特性值确定默认编译器类型。 如果编译部分中没有默认的语言设置，则使用 <xref:Microsoft.VisualBasic.VBCodeProvider> 语言提供程序设置默认的编译器类型。  
  
 从 <xref:System.Web.Compilation.BuildProvider> 类派生时，可以使用 <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A> 在实现中设置 <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> 属性。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.CompilerType" />
        <altmember cref="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultCompilerTypeForLanguage">
      <MemberSignature Language="C#" Value="protected System.Web.Compilation.CompilerType GetDefaultCompilerTypeForLanguage (string language);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Web.Compilation.CompilerType GetDefaultCompilerTypeForLanguage(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetDefaultCompilerTypeForLanguage (language As String) As CompilerType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Web::Compilation::CompilerType ^ GetDefaultCompilerTypeForLanguage(System::String ^ language);" />
      <MemberSignature Language="F#" Value="member this.GetDefaultCompilerTypeForLanguage : string -&gt; System.Web.Compilation.CompilerType" Usage="buildProvider.GetDefaultCompilerTypeForLanguage language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.CompilerType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="language">代码语言名称。</param>
        <summary>根据指定的语言返回生成提供程序的编译器设置。</summary>
        <returns><see cref="T:System.Web.Compilation.CompilerType" />，根据指定的语言表示生成提供程序的编译器设置。 基类根据应用程序配置文件返回该语言的默认编译器设置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A> 方法来检查在生成提供程序中为特定语言名称配置的编译器类型。 使用 <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerType%2A> 方法来检查生成提供程序的默认编译器类型。  
  
 Base <xref:System.Web.Compilation.BuildProvider> 类使用配置文件的 <xref:System.Web.Configuration.CompilationSection> 对象的 <xref:System.Web.Configuration.CompilationSection.Compilers%2A> 属性中的 <xref:System.Web.Configuration.Compiler> 元素确定默认编译器类型。 这等效于检查和配置文件部分中的元素。 例如，对于 `language` 值 VB，基类方法返回一个与 <xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType>实例的配置设置相对应的 <xref:System.Web.Compilation.CompilerType> 对象。  
  
 从 <xref:System.Web.Compilation.BuildProvider> 类派生时，可以使用 <xref:System.Web.Compilation.BuildProvider.GetDefaultCompilerTypeForLanguage%2A> 为实现支持的语言设置 <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> 属性值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="language" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.Web.HttpException"><paramref name="language" /> 与生成提供程序的已配置编译器不匹配。</exception>
        <altmember cref="T:System.Web.Compilation.CompilerType" />
        <altmember cref="M:System.Web.Compilation.BuildProvider.GetDefaultCompilerType" />
        <altmember cref="P:System.Web.Configuration.CompilationSection.Compilers" />
        <altmember cref="T:System.Web.Configuration.Compiler" />
      </Docs>
    </Member>
    <Member MemberName="GetGeneratedType">
      <MemberSignature Language="C#" Value="public virtual Type GetGeneratedType (System.CodeDom.Compiler.CompilerResults results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetGeneratedType(class System.CodeDom.Compiler.CompilerResults results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GetGeneratedType(System.CodeDom.Compiler.CompilerResults)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetGeneratedType (results As CompilerResults) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetGeneratedType(System::CodeDom::Compiler::CompilerResults ^ results);" />
      <MemberSignature Language="F#" Value="abstract member GetGeneratedType : System.CodeDom.Compiler.CompilerResults -&gt; Type&#xA;override this.GetGeneratedType : System.CodeDom.Compiler.CompilerResults -&gt; Type" Usage="buildProvider.GetGeneratedType results" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="results" Type="System.CodeDom.Compiler.CompilerResults" />
      </Parameters>
      <Docs>
        <param name="results">生成提供程序的虚拟路径的编译结果。</param>
        <summary>返回生成提供程序从虚拟路径生成的类型。</summary>
        <returns>生成提供程序为虚拟路径生成的类型。 基类返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要实现为 Web 内容（如 .aspx 文件）生成源代码的生成提供程序，请从 <xref:System.Web.Compilation.BuildProvider> 类中派生一个类，并重写 <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A> 方法以返回生成提供程序生成的类型。  
  
 ASP.NET 生成系统为每个生成提供程序编译文件，并生成一个 <xref:System.CodeDom.Compiler.CompilerResults> 对象，该对象将传递到 <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A> 方法。 通常，生成提供程序的 <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A> 实现对输入 `results` 对象的 <xref:System.CodeDom.Compiler.CompilerResults.CompiledAssembly%2A> 属性使用 <xref:System.Reflection.Assembly.GetType%2A> 方法以返回提供的类型。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="GetResultFlags">
      <MemberSignature Language="C#" Value="public virtual System.Web.Compilation.BuildProviderResultFlags GetResultFlags (System.CodeDom.Compiler.CompilerResults results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Web.Compilation.BuildProviderResultFlags GetResultFlags(class System.CodeDom.Compiler.CompilerResults results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.GetResultFlags(System.CodeDom.Compiler.CompilerResults)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetResultFlags (results As CompilerResults) As BuildProviderResultFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::Compilation::BuildProviderResultFlags GetResultFlags(System::CodeDom::Compiler::CompilerResults ^ results);" />
      <MemberSignature Language="F#" Value="abstract member GetResultFlags : System.CodeDom.Compiler.CompilerResults -&gt; System.Web.Compilation.BuildProviderResultFlags&#xA;override this.GetResultFlags : System.CodeDom.Compiler.CompilerResults -&gt; System.Web.Compilation.BuildProviderResultFlags" Usage="buildProvider.GetResultFlags results" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Compilation.BuildProviderResultFlags</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="results" Type="System.CodeDom.Compiler.CompilerResults" />
      </Parameters>
      <Docs>
        <param name="results">生成提供程序的虚拟路径的编译结果。</param>
        <summary>返回指示生成虚拟路径时所需操作的值。</summary>
        <returns><see cref="T:System.Web.Compilation.BuildProviderResultFlags" /> 值，指示在 ASP.NET 生成环境中生成虚拟路径后所需的操作。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当使用 <xref:System.Web.Compilation.BuildProvider> 类的实例生成文件并加载已编译的程序集时，ASP.NET 生成环境使用 <xref:System.Web.Compilation.BuildProvider.GetResultFlags%2A> 方法。  
  
 Base <xref:System.Web.Compilation.BuildProvider> 类方法返回 <xref:System.Web.Compilation.BuildProviderResultFlags.Default> 字段值，指示生成虚拟路径时无需执行任何特殊操作。  
  
 从 <xref:System.Web.Compilation.BuildProvider> 类派生时，可以实现 <xref:System.Web.Compilation.BuildProvider.GetResultFlags%2A> 方法，以便为自定义文件类型或虚拟路径返回不同的 <xref:System.Web.Compilation.BuildProviderResultFlags> 值。 例如，如果重新生成虚拟路径需要重新加载包含的 <xref:System.AppDomain> 对象，则可以从 <xref:System.Web.Compilation.BuildProvider.GetResultFlags%2A> 方法返回 <xref:System.Web.Compilation.BuildProviderResultFlags.ShutdownAppDomainOnChange> 枚举值。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
        <altmember cref="T:System.Web.Compilation.BuildProviderResultFlags" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenReader">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>打开文本读取器以从虚拟路径读取。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenReader">
      <MemberSignature Language="C#" Value="protected System.IO.TextReader OpenReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IO.TextReader OpenReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.OpenReader" />
      <MemberSignature Language="VB.NET" Value="Protected Function OpenReader () As TextReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::IO::TextReader ^ OpenReader();" />
      <MemberSignature Language="F#" Value="member this.OpenReader : unit -&gt; System.IO.TextReader" Usage="buildProvider.OpenReader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>打开文本读取器以从当前生成提供程序对象的虚拟路径读取。</summary>
        <returns>打开的 <see cref="T:System.IO.TextReader" />，可用于读取 <see cref="P:System.Web.Compilation.BuildProvider.VirtualPath" /> 的内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对返回的 <xref:System.IO.TextReader> 对象使用 <xref:System.IO.TextReader.Read%2A> 方法，读取 <xref:System.Web.Compilation.BuildProvider> 对象的 <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> 属性的内容。  
  
 调用 <xref:System.Web.Compilation.BuildProvider.OpenReader%2A> 方法后，必须使用 <xref:System.IO.TextReader.Close%2A> 方法关闭 <xref:System.IO.TextReader> 对象并释放关联的系统资源。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextReader" />
        <altmember cref="P:System.Web.Compilation.BuildProvider.VirtualPath" />
      </Docs>
    </Member>
    <Member MemberName="OpenReader">
      <MemberSignature Language="C#" Value="protected System.IO.TextReader OpenReader (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IO.TextReader OpenReader(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.OpenReader(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function OpenReader (virtualPath As String) As TextReader" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::IO::TextReader ^ OpenReader(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="member this.OpenReader : string -&gt; System.IO.TextReader" Usage="buildProvider.OpenReader virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">要读取的虚拟路径。</param>
        <summary>打开文本读取器以从指定的虚拟路径读取。</summary>
        <returns>打开的 <see cref="T:System.IO.TextReader" />，可用于读取指定的虚拟路径的内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对返回的 <xref:System.IO.TextReader> 对象使用 <xref:System.IO.TextReader.Read%2A> 方法可读取虚拟路径的内容。  
  
 调用 <xref:System.Web.Compilation.BuildProvider.OpenReader%2A> 方法后，必须使用 <xref:System.IO.TextReader.Close%2A> 方法关闭 <xref:System.IO.TextReader> 对象并释放关联的系统资源。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenStream">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>打开流以从虚拟路径读取。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenStream">
      <MemberSignature Language="C#" Value="protected System.IO.Stream OpenStream ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IO.Stream OpenStream() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.OpenStream" />
      <MemberSignature Language="VB.NET" Value="Protected Function OpenStream () As Stream" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::IO::Stream ^ OpenStream();" />
      <MemberSignature Language="F#" Value="member this.OpenStream : unit -&gt; System.IO.Stream" Usage="buildProvider.OpenStream " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>打开流以读取当前生成提供程序对象的虚拟路径。</summary>
        <returns>打开的 <see cref="T:System.IO.Stream" />，可用于读取 <see cref="P:System.Web.Compilation.BuildProvider.VirtualPath" /> 的内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对返回的 <xref:System.IO.Stream> 对象使用 <xref:System.IO.Stream.Read%2A> 方法可读取 <xref:System.Web.Compilation.BuildProvider> 对象的虚拟路径的内容。  
  
 调用 <xref:System.Web.Compilation.BuildProvider.OpenStream%2A> 方法后，必须使用 <xref:System.IO.Stream.Close%2A> 方法关闭 <xref:System.IO.Stream> 对象并释放关联的系统资源。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="P:System.Web.Compilation.BuildProvider.VirtualPath" />
      </Docs>
    </Member>
    <Member MemberName="OpenStream">
      <MemberSignature Language="C#" Value="protected System.IO.Stream OpenStream (string virtualPath);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IO.Stream OpenStream(string virtualPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.OpenStream(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Function OpenStream (virtualPath As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::IO::Stream ^ OpenStream(System::String ^ virtualPath);" />
      <MemberSignature Language="F#" Value="member this.OpenStream : string -&gt; System.IO.Stream" Usage="buildProvider.OpenStream virtualPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="virtualPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="virtualPath">要读取的虚拟路径。</param>
        <summary>打开流以从指定的虚拟路径读取。</summary>
        <returns>打开的 <see cref="T:System.IO.Stream" />，可用于读取指定的虚拟路径的内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对返回的 <xref:System.IO.Stream> 对象使用 <xref:System.IO.Stream.Read%2A> 方法可读取虚拟路径的内容。  
  
 调用 <xref:System.Web.Compilation.BuildProvider.OpenStream%2A> 方法后，必须使用 <xref:System.IO.Stream.Close%2A> 方法关闭 <xref:System.IO.Stream> 对象并释放关联的系统资源。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName="ProcessCompileErrors">
      <MemberSignature Language="C#" Value="public virtual void ProcessCompileErrors (System.CodeDom.Compiler.CompilerResults results);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessCompileErrors(class System.CodeDom.Compiler.CompilerResults results) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.ProcessCompileErrors(System.CodeDom.Compiler.CompilerResults)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ProcessCompileErrors (results As CompilerResults)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ProcessCompileErrors(System::CodeDom::Compiler::CompilerResults ^ results);" />
      <MemberSignature Language="F#" Value="abstract member ProcessCompileErrors : System.CodeDom.Compiler.CompilerResults -&gt; unit&#xA;override this.ProcessCompileErrors : System.CodeDom.Compiler.CompilerResults -&gt; unit" Usage="buildProvider.ProcessCompileErrors results" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="results" Type="System.CodeDom.Compiler.CompilerResults" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="results">编译器结果。</param>
        <summary>当在派生类中被重写时，能够查看编译器错误消息，以便将其修改为提供更多信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，您可以重写此方法，以便您可以在显示编译器错误之前修改它们以使错误文本对用户更有帮助。 如果你知道某些错误的上下文，并且可以向用户提供有关如何修复这些错误的信息，这会很有用。 原始编译器错误消息通常特定于特定的语言构造，可能无法使真实原因或解决方案对用户明显。  
  
 您可以通过使用传递给方法的 <xref:System.CodeDom.Compiler.CompilerResults> 对象来访问这些错误。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferencedAssemblies">
      <MemberSignature Language="C#" Value="protected System.Collections.ICollection ReferencedAssemblies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection ReferencedAssemblies" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.BuildProvider.ReferencedAssemblies" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property ReferencedAssemblies As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::ICollection ^ ReferencedAssemblies { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReferencedAssemblies : System.Collections.ICollection" Usage="System.Web.Compilation.BuildProvider.ReferencedAssemblies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示要用生成提供程序生成的源代码进行编译的程序集。</summary>
        <value>程序集的只读集合，可由生成提供程序生成的源代码引用。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ASP.NET 生成环境初始化可供生成提供程序引用的程序集的集合。 生成提供程序生成的源代码可以使用引用的程序集中的公共类型。 引用的程序集集合包含在 ASP.NET 应用程序中生成的其他程序集，以及配置文件的元素中列出的程序集。  
  
 如果生成提供程序生成引用其他程序集的源代码，则生成提供程序使用 <xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A> 方法添加其他程序集。 ASP.NET 生成环境使用由生成提供程序添加的引用的程序集和可供引用的程序集的默认集合来解析程序集编译过程中的外部类型。  
  
 <xref:System.Web.Compilation.BuildProvider.ReferencedAssemblies%2A> 集合不包含通过 <xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A> 方法添加以供其他生成提供程序引用的程序集。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference(System.Reflection.Assembly)" />
        <altmember cref="P:System.Web.Compilation.BuildProvider.VirtualPathDependencies" />
      </Docs>
    </Member>
    <Member MemberName="RegisterBuildProvider">
      <MemberSignature Language="C#" Value="public static void RegisterBuildProvider (string extension, Type providerType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterBuildProvider(string extension, class System.Type providerType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.BuildProvider.RegisterBuildProvider(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterBuildProvider (extension As String, providerType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterBuildProvider(System::String ^ extension, Type ^ providerType);" />
      <MemberSignature Language="F#" Value="static member RegisterBuildProvider : string * Type -&gt; unit" Usage="System.Web.Compilation.BuildProvider.RegisterBuildProvider (extension, providerType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="providerType" Type="System.Type" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="extension">生成提供程序所针对的文件扩展名。</param>
        <param name="providerType">生成提供程序类。</param>
        <summary>注册一个生成提供程序。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以使用此方法来注册生成提供程序，而不是在 web.config 文件中定义它们。 有关生成提供程序的详细信息，请参阅 <xref:System.Web.Compilation.BuildProvider> 类和[用于编译的 BuildProviders 元素（ASP.NET 设置架构）](https://msdn.microsoft.com/library/40fa889d-5412-487a-b6a9-21eb011c2384)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VirtualPath">
      <MemberSignature Language="C#" Value="protected internal string VirtualPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string VirtualPath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.BuildProvider.VirtualPath" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property VirtualPath As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::String ^ VirtualPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.VirtualPath : string" Usage="System.Web.Compilation.BuildProvider.VirtualPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示要由此生成提供程序实现生成的文件。</summary>
        <value>只读字符串，指定要由此生成提供程序编译的文件的虚拟路径。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.BuildProvider> 对象的虚拟路径是由生成提供程序编译的文件的路径。 例如，如果你已将自定义 <xref:System.Web.Compilation.BuildProvider> 类配置为使用. abc 的自定义扩展来生成网站中的所有文件，如果你的网站名为 WebSite1，并且该网站包含一个名为 abc 的文件，则 <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> 属性包含 `/WebSite1/Example.abc`的值。  
  
 应用程序内每个文件的文件扩展名决定文件类型和文件类型对应的生成提供程序。 ASP.NET 生成环境根据文件类型为每个文件初始化一个 <xref:System.Web.Compilation.BuildProvider> 对象，并使用 <xref:System.Web.Compilation.BuildProvider> 方法为每个文件生成源。  
  
 有关配置生成提供程序的详细信息，请参阅[用于编译的 BuildProviders 元素（ASP.NET 设置架构）](https://msdn.microsoft.com/library/40fa889d-5412-487a-b6a9-21eb011c2384)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Hosting.VirtualFile" />
        <altmember cref="P:System.Web.Hosting.VirtualFileBase.VirtualPath" />
      </Docs>
    </Member>
    <Member MemberName="VirtualPathDependencies">
      <MemberSignature Language="C#" Value="public virtual System.Collections.ICollection VirtualPathDependencies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ICollection VirtualPathDependencies" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.BuildProvider.VirtualPathDependencies" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property VirtualPathDependencies As ICollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ICollection ^ VirtualPathDependencies { System::Collections::ICollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.VirtualPathDependencies : System.Collections.ICollection" Usage="System.Web.Compilation.BuildProvider.VirtualPathDependencies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示在生成提供程序生成代码之前必须生成的虚拟路径的集合。</summary>
        <value>字符串的只读集合，表示生成提供程序的该实例依赖的虚拟路径。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.BuildProvider.VirtualPathDependencies%2A> 属性是一个虚拟路径的集合，必须在 <xref:System.Web.Compilation.BuildProvider> 实例生成源代码之前编译这些路径。 <xref:System.Web.Compilation.BuildProvider.VirtualPathDependencies%2A> 中的虚拟路径中的程序集作为对 <xref:System.Web.Compilation.BuildProvider> 实例的编译的引用添加。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Hosting.VirtualFile" />
        <altmember cref="P:System.Web.Hosting.VirtualFileBase.VirtualPath" />
      </Docs>
    </Member>
  </Members>
</Type>
