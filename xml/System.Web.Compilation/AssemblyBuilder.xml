<Type Name="AssemblyBuilder" FullName="System.Web.Compilation.AssemblyBuilder">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4dadc087c42dd9555b14f34828abfdf0c1e7baa5" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86618005" /></Metadata><TypeSignature Language="C#" Value="public class AssemblyBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AssemblyBuilder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Compilation.AssemblyBuilder" />
  <TypeSignature Language="VB.NET" Value="Public Class AssemblyBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class AssemblyBuilder" />
  <TypeSignature Language="F#" Value="type AssemblyBuilder = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>提供一个容器，用以从 ASP.NET 项目内的一个或多个虚拟路径生成程序集。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 类的实例 <xref:System.Web.Compilation.AssemblyBuilder> 与 <xref:System.Web.Compilation.BuildProvider> 类方法一起使用，以将一个或多个文件生成到已编译的程序集中。  
  
 <xref:System.Web.Compilation.BuildProvider>类定义各个文件的生成功能， <xref:System.Web.Compilation.AssemblyBuilder> 类将每个实例提供的源代码组合 <xref:System.Web.Compilation.BuildProvider> 到单个程序集中。 <xref:System.Web.Compilation.AssemblyBuilder> <xref:System.Web.Compilation.BuildProvider> 当从一个或多个文件生成程序集时，ASP.NET 生成环境会将对象传递给方法，以便每个 <xref:System.Web.Compilation.BuildProvider> 实例都可以为其文件提供整个程序集的源代码。  
  
 ASP.NET 生成环境根据属性确定项目中的文件所需的语言和编译器 <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A?displayProperty=nameWithType> 。 生成环境基于其编译器设置对文件进行分组，并基于需要相同编译器的文件生成程序集。  
  
 <xref:System.Web.Compilation.AssemblyBuilder.CodeDomProvider%2A>属性指示 <xref:System.CodeDom.Compiler.CodeDomProvider> ASP.NET 生成环境使用的实现，该实现由每个实现提供的源代码编译程序集 <xref:System.Web.Compilation.BuildProvider> 。  
  
 <xref:System.Web.Compilation.BuildProvider>对象使用方法以 CodeDOM 图的形式提供源代码 <xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A> 。 <xref:System.Web.Compilation.BuildProvider>对象使用方法来提供存储在物理文件中的源代码 <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> 。  
  
 每个 <xref:System.Web.Compilation.BuildProvider> 对象使用适当的方法提供源代码后 <xref:System.Web.Compilation.AssemblyBuilder> ，ASP.NET 生成环境将使用 <xref:System.Web.Compilation.AssemblyBuilder> 类将收集的源代码编译为程序集。  
  
   
  
## Examples  
 下面的代码示例演示了一个简单的生成提供程序实现，该实现继承自抽象 <xref:System.Web.Compilation.BuildProvider> 基类。 生成提供程序会重 <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> 写 <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A> 基类的、和 <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> 成员。  
  
 在 <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> 方法实现中，生成提供程序使用方法为程序集编译添加生成的代码 <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> 。 该示例不包括类的实现 `SampleClassGenerator` 。 有关详细信息，请参阅 <xref:System.CodeDom.CodeCompileUnit>。  
  
 [!code-csharp[System.Web.Compilation_SampleBuildProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation_SampleBuildProvider/CS/samplebuildprovider.cs#2)]
 [!code-vb[System.Web.Compilation_SampleBuildProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation_SampleBuildProvider/VB/samplebuildprovider.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.Compilation.BuildProvider" />
    <altmember cref="T:System.Web.Compilation.BuildManager" />
    <altmember cref="T:System.Web.Compilation.ClientBuildManager" />
  </Docs>
  <Members>
    <Member MemberName="AddAssemblyReference">
      <MemberSignature Language="C#" Value="public void AddAssemblyReference (System.Reflection.Assembly a);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAssemblyReference(class System.Reflection.Assembly a) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference(System.Reflection.Assembly)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddAssemblyReference (a As Assembly)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddAssemblyReference(System::Reflection::Assembly ^ a);" />
      <MemberSignature Language="F#" Value="member this.AddAssemblyReference : System.Reflection.Assembly -&gt; unit" Usage="assemblyBuilder.AddAssemblyReference a" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="a">包含在程序集编译中的代码编译单元或源文件所引用的程序集。</param>
        <summary>添加为文件生成的源代码所引用的程序集。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 <xref:System.Web.Compilation.BuildProvider> <xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A> 生成引用输入程序集内的类型的源代码时，实现使用方法。  
  
 ASP.NET 生成环境初始化可在属性中通过生成提供程序引用的程序集的默认集合 <xref:System.Web.Compilation.BuildProvider.ReferencedAssemblies%2A?displayProperty=nameWithType> 。 如果生成提供程序生成引用其他程序集的源代码，则生成提供程序使用方法添加其他程序集 <xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A> 。 ASP.NET 生成环境使用由生成提供程序添加的引用的程序集和可供引用的程序集的默认集合来解析程序集编译过程中的外部类型。  
  
 通常， <xref:System.Web.Compilation.BuildProvider> 对象会将源代码添加到 <xref:System.Web.Compilation.AssemblyBuilder> 方法中的对象 <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> 。 如果生成提供程序生成使用外部类型的源代码，则生成提供程序使用方法添加该类型的程序集 <xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A?displayProperty=nameWithType> 。  
  
 使用 <xref:System.Web.Compilation.AssemblyBuilder.AddAssemblyReference%2A> 方法可添加 <xref:System.Web.Compilation.BuildProvider> 特定文件类型的实例所生成的源代码中所需的引用程序集。 使用 assembly [元素进行编译 (ASP.NET 设置架构) ](https://msdn.microsoft.com/library/3811c448-af1c-498d-be2b-6ed2634c51e9) 配置元素，以配置程序集以在项目中跨多个文件类型进行引用。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.Compilation.BuildProvider.ReferencedAssemblies" />
      </Docs>
    </Member>
    <Member MemberName="AddCodeCompileUnit">
      <MemberSignature Language="C#" Value="public void AddCodeCompileUnit (System.Web.Compilation.BuildProvider buildProvider, System.CodeDom.CodeCompileUnit compileUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddCodeCompileUnit(class System.Web.Compilation.BuildProvider buildProvider, class System.CodeDom.CodeCompileUnit compileUnit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit(System.Web.Compilation.BuildProvider,System.CodeDom.CodeCompileUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddCodeCompileUnit (buildProvider As BuildProvider, compileUnit As CodeCompileUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddCodeCompileUnit(System::Web::Compilation::BuildProvider ^ buildProvider, System::CodeDom::CodeCompileUnit ^ compileUnit);" />
      <MemberSignature Language="F#" Value="member this.AddCodeCompileUnit : System.Web.Compilation.BuildProvider * System.CodeDom.CodeCompileUnit -&gt; unit" Usage="assemblyBuilder.AddCodeCompileUnit (buildProvider, compileUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buildProvider" Type="System.Web.Compilation.BuildProvider" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
      </Parameters>
      <Docs>
        <param name="buildProvider">正在生成 <paramref name="compileUnit" /> 的版本提供程序。</param>
        <param name="compileUnit">要包含在程序集编译中的代码编译单元。</param>
        <summary>以 CodeDOM 图的形式为程序集添加源代码。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 为 <xref:System.Web.Compilation.BuildProvider> <xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A> 虚拟路径生成 CodeDOM 图时，实现调用方法。 用添加的源代码 <xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A> 包含在程序集编译中。  
  
 通常，生成提供程序的 <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> 方法实现读取 <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> 属性，分析内容，然后将生成的源代码添加到指定的 <xref:System.Web.Compilation.AssemblyBuilder> 对象。 生成提供程序使用 <xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A> 方法将源代码作为 CodeDOM 图形添加到程序集。 此外，生成提供程序还可以使用 <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> 方法将源代码作为物理文件添加到程序集。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.BuildProvider" />
        <altmember cref="M:System.Web.Compilation.AssemblyBuilder.CreateCodeFile(System.Web.Compilation.BuildProvider)" />
        <altmember cref="Overload:System.Web.Compilation.BuildProvider.OpenReader" />
        <altmember cref="Overload:System.Web.Compilation.BuildProvider.OpenStream" />
      </Docs>
    </Member>
    <Member MemberName="CodeDomProvider">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.CodeDomProvider CodeDomProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.CodeDomProvider CodeDomProvider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Compilation.AssemblyBuilder.CodeDomProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeDomProvider As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::Compiler::CodeDomProvider ^ CodeDomProvider { System::CodeDom::Compiler::CodeDomProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeDomProvider : System.CodeDom.Compiler.CodeDomProvider" Usage="System.Web.Compilation.AssemblyBuilder.CodeDomProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于将源代码生成为程序集的编译器。</summary>
        <value>一个只读 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 实现，用于将每个版本提供程序提供的源代码编译为程序集。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.AssemblyBuilder.CodeDomProvider%2A>属性指示 <xref:System.CodeDom.Compiler.CodeDomProvider?displayProperty=nameWithType> ASP.NET 生成环境使用的实现，该实现由每个实现提供的源代码编译程序集 <xref:System.Web.Compilation.BuildProvider> 。  
  
 ASP.NET 生成环境根据属性确定项目中的文件所需的语言和编译器 <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A?displayProperty=nameWithType> 。 生成环境基于其编译器设置对文件进行分组，并基于需要相同编译器的文件生成程序集。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="P:System.Web.Compilation.BuildProvider.CodeCompilerType" />
        <altmember cref="T:System.Web.Compilation.CompilerType" />
        <altmember cref="T:Microsoft.VisualBasic.VBCodeProvider" />
        <altmember cref="T:Microsoft.CSharp.CSharpCodeProvider" />
      </Docs>
    </Member>
    <Member MemberName="CreateCodeFile">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter CreateCodeFile (System.Web.Compilation.BuildProvider buildProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.TextWriter CreateCodeFile(class System.Web.Compilation.BuildProvider buildProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.AssemblyBuilder.CreateCodeFile(System.Web.Compilation.BuildProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCodeFile (buildProvider As BuildProvider) As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::TextWriter ^ CreateCodeFile(System::Web::Compilation::BuildProvider ^ buildProvider);" />
      <MemberSignature Language="F#" Value="member this.CreateCodeFile : System.Web.Compilation.BuildProvider -&gt; System.IO.TextWriter" Usage="assemblyBuilder.CreateCodeFile buildProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buildProvider" Type="System.Web.Compilation.BuildProvider" />
      </Parameters>
      <Docs>
        <param name="buildProvider">正在生成代码源文件的版本提供程序。</param>
        <summary>允许版本提供程序创建临时源文件，并在程序集编译中包含此源文件。</summary>
        <returns>可用于将源代码写入临时文件的开放 <see cref="T:System.IO.TextWriter" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.BuildProvider> <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> 当生成虚拟路径的源文件时，实现会调用方法。 用添加的源代码 <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> 包含在程序集编译中。  
  
 通常，生成提供程序 <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> 方法实现读取 <xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> 属性，分析内容，然后将生成的源代码添加到指定的 <xref:System.Web.Compilation.AssemblyBuilder> 对象。 生成提供程序使用 <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> 方法将源代码作为物理文件添加到程序集。 此外，生成提供程序还可以使用 <xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A> 方法将源代码作为 CodeDOM 图添加到程序集。  
  
 调用后 <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> ，生成提供程序使用返回的对象编写源文件内容 <xref:System.IO.TextWriter> 。 写入源文件后， <xref:System.Web.Compilation.BuildProvider> 对象必须使用 <xref:System.IO.TextWriter.Close%2A> 方法关闭 <xref:System.IO.TextWriter> 对象并释放关联的系统资源。  
  
   
  
## Examples  
 下面的代码示例演示了一个简单的生成提供程序实现，该实现继承自抽象 <xref:System.Web.Compilation.BuildProvider> 基类。 生成提供程序会重 <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A> 写 <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A> 基类的、和 <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> 成员。  
  
 在 <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> 方法实现中，生成提供程序使用方法为程序集编译添加生成的代码 <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> 。 该示例不包括类的实现 `SampleClassGenerator` 。 有关详细信息，请参阅 <xref:System.CodeDom.CodeCompileUnit>。  
  
 [!code-csharp[System.Web.Compilation_SampleBuildProvider#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Compilation_SampleBuildProvider/CS/samplebuildprovider.cs#2)]
 [!code-vb[System.Web.Compilation_SampleBuildProvider#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Compilation_SampleBuildProvider/VB/samplebuildprovider.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.BuildProvider" />
        <altmember cref="Overload:System.Web.Compilation.BuildProvider.OpenReader" />
        <altmember cref="Overload:System.Web.Compilation.BuildProvider.OpenStream" />
        <altmember cref="M:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit(System.Web.Compilation.BuildProvider,System.CodeDom.CodeCompileUnit)" />
      </Docs>
    </Member>
    <Member MemberName="CreateEmbeddedResource">
      <MemberSignature Language="C#" Value="public System.IO.Stream CreateEmbeddedResource (System.Web.Compilation.BuildProvider buildProvider, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream CreateEmbeddedResource(class System.Web.Compilation.BuildProvider buildProvider, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.AssemblyBuilder.CreateEmbeddedResource(System.Web.Compilation.BuildProvider,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateEmbeddedResource (buildProvider As BuildProvider, name As String) As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ CreateEmbeddedResource(System::Web::Compilation::BuildProvider ^ buildProvider, System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.CreateEmbeddedResource : System.Web.Compilation.BuildProvider * string -&gt; System.IO.Stream" Usage="assemblyBuilder.CreateEmbeddedResource (buildProvider, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buildProvider" Type="System.Web.Compilation.BuildProvider" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="buildProvider">正在生成资源的版本提供程序。</param>
        <param name="name">要创建的资源文件的名称。</param>
        <summary>允许版本提供程序创建要包含在程序集编译中的资源文件。</summary>
        <returns>可用于写资源的开放 <see cref="T:System.IO.Stream" />，这些资源包含在程序集编译中。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用方法后 <xref:System.Web.Compilation.AssemblyBuilder.CreateEmbeddedResource%2A> ， <xref:System.Web.Compilation.BuildProvider> 对象使用返回的对象写入资源文件内容 <xref:System.IO.Stream> 。 例如，生成提供程序可以使用对象写入资源 <xref:System.Resources.ResourceWriter> 。 写入资源文件后，生成提供程序必须使用 <xref:System.IO.Stream.Close%2A> 方法关闭 <xref:System.IO.Stream> 对象并释放关联的系统资源。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" />不是有效的文件名。</exception>
        <altmember cref="T:System.Web.Compilation.BuildProvider" />
        <altmember cref="T:System.Resources.ResourceWriter" />
      </Docs>
    </Member>
    <Member MemberName="GenerateTypeFactory">
      <MemberSignature Language="C#" Value="public void GenerateTypeFactory (string typeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GenerateTypeFactory(string typeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.AssemblyBuilder.GenerateTypeFactory(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GenerateTypeFactory (typeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GenerateTypeFactory(System::String ^ typeName);" />
      <MemberSignature Language="F#" Value="member this.GenerateTypeFactory : string -&gt; unit" Usage="assemblyBuilder.GenerateTypeFactory typeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">要生成的类型的名称。</param>
        <summary>将类型的快速对象工厂模板插入到编译后的程序集中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.BuildProvider>实现调用 <xref:System.Web.Compilation.AssemblyBuilder.GenerateTypeFactory%2A> 方法以优化类型实例的频繁创建的性能。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.BuildProvider" />
        <altmember cref="M:System.Web.Compilation.BuildProvider.GetGeneratedType(System.CodeDom.Compiler.CompilerResults)" />
      </Docs>
    </Member>
    <Member MemberName="GetTempFilePhysicalPath">
      <MemberSignature Language="C#" Value="public string GetTempFilePhysicalPath (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetTempFilePhysicalPath(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Compilation.AssemblyBuilder.GetTempFilePhysicalPath(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTempFilePhysicalPath (extension As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetTempFilePhysicalPath(System::String ^ extension);" />
      <MemberSignature Language="F#" Value="member this.GetTempFilePhysicalPath : string -&gt; string" Usage="assemblyBuilder.GetTempFilePhysicalPath extension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extension">临时文件使用的文件扩展名。</param>
        <summary>生成临时文件路径。</summary>
        <returns>指向临时文件的路径，带有指定的文件扩展名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Compilation.BuildProvider>实现调用 <xref:System.Web.Compilation.AssemblyBuilder.GetTempFilePhysicalPath%2A> 方法，以获取编译程序集后自动删除的临时文件路径。  
  
 <xref:System.Web.Compilation.AssemblyBuilder.GetTempFilePhysicalPath%2A>方法生成唯一的临时文件路径，但不创建文件。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Compilation.BuildProvider" />
        <altmember cref="T:System.CodeDom.Compiler.TempFileCollection" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.TempFiles" />
        <altmember cref="P:System.Web.Compilation.CompilerType.CompilerParameters" />
      </Docs>
    </Member>
  </Members>
</Type>
