<Type Name="XamlReader" FullName="System.Xaml.XamlReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c46036d51442ce187d1dc3cf106bd6ec8c043dc5" /><Meta Name="ms.sourcegitcommit" Value="53b005dec6dcff97c7bac97cf446d9ae6bda93f0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/24/2020" /><Meta Name="ms.locfileid" Value="91207312" /></Metadata><TypeSignature Language="C#" Value="public abstract class XamlReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XamlReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XamlReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type XamlReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="ef3cc-101">为使用 XAML 输入并生成 XAML 节点流的类提供基定义。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-101">Provides base definitions for classes that consume XAML input and produce XAML node streams.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef3cc-102"><xref:System.Xaml.XamlReader> 是一个抽象类，不提供具有所有成员的工作结果的实现或定义。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-102"><xref:System.Xaml.XamlReader> is an abstract class and does not provide implementations or definitions that have a working result for all members.</span></span> <span data-ttu-id="ef3cc-103">在中具有实现的成员在 <xref:System.Xaml.XamlReader> 该成员的备注中进行了说明。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-103">Members that do have an implementation in <xref:System.Xaml.XamlReader> are noted in the remarks for that member.</span></span> <span data-ttu-id="ef3cc-104">具体而言， <xref:System.Xaml.XamlReader> 具有多个必须实现的抽象成员和多个虚拟成员。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-104">Specifically, <xref:System.Xaml.XamlReader> has several abstract members that must be implemented, and several virtual members.</span></span>  
  
 <span data-ttu-id="ef3cc-105">在虚拟成员中， <xref:System.Xaml.XamlReader.ReadSubtree%2A> <xref:System.Xaml.XamlReader.Skip%2A> 每个都提供适用于大多数情况的默认实现。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-105">Of the virtual members, <xref:System.Xaml.XamlReader.ReadSubtree%2A> and <xref:System.Xaml.XamlReader.Skip%2A> each provide a default implementation that is appropriate for most cases.</span></span> <span data-ttu-id="ef3cc-106">但是， <xref:System.Xaml.XamlReader.ReadSubtree%2A> 和 <xref:System.Xaml.XamlReader.Skip%2A> 默认实现依赖于实现 XAML 读取器的其他预期行为; 尤其是，它们依赖于 <xref:System.Xaml.XamlReader.Read%2A> 重写。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-106">However, the <xref:System.Xaml.XamlReader.ReadSubtree%2A> and <xref:System.Xaml.XamlReader.Skip%2A> default implementations rely on other expected behavior of the implementing XAML reader; in particular, they rely on the <xref:System.Xaml.XamlReader.Read%2A> override.</span></span> <span data-ttu-id="ef3cc-107"><xref:System.Xaml.XamlReader.Dispose%2A> 也是具有工作默认实现的虚拟成员。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-107"><xref:System.Xaml.XamlReader.Dispose%2A> is also a virtual member that has a working default implementation.</span></span>  
  
 <span data-ttu-id="ef3cc-108">以下两个类是 .NET Framework XAML 服务和 system.exception 程序集中最相关和实用的派生类：</span><span class="sxs-lookup"><span data-stu-id="ef3cc-108">The following two classes are the most relevant and practical derived classes in .NET Framework XAML Services and the System.Xaml assembly:</span></span>  
  
-   <span data-ttu-id="ef3cc-109"><xref:System.Xaml.XamlObjectReader>，它在运行时读取对象图，如应用程序的活动对象图。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-109"><xref:System.Xaml.XamlObjectReader>, which reads an object graph, such as the active object graph of an application at run time.</span></span>  
  
-   <span data-ttu-id="ef3cc-110"><xref:System.Xaml.XamlXmlReader>，它通过使用将 <xref:System.Xml.XmlReader> 文件作为中间帮助器类加载的常规来读取 XML 文本文件形式的 XAML。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-110"><xref:System.Xaml.XamlXmlReader>, which reads XAML in the form of a XML text file by using a general <xref:System.Xml.XmlReader> that loads the file as an intermediary helper class.</span></span>  
  
 <span data-ttu-id="ef3cc-111">其他框架中的其他 XAML 读取器包括 <xref:System.Windows.Baml2006.Baml2006Reader> 和 <xref:System.Activities.Debugger.XamlDebuggerXmlReader> 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-111">Other XAML readers from other frameworks include <xref:System.Windows.Baml2006.Baml2006Reader> and <xref:System.Activities.Debugger.XamlDebuggerXmlReader>.</span></span>  
  
 <span data-ttu-id="ef3cc-112"><xref:System.Xaml.XamlReader> 与 [!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)] 和 <xref:System.Xml.XmlReader> 设计原则不同，因为没有 <xref:System.Xaml.XamlReader> `Create` 返回基础默认 XAML 读取器实现的方法。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-112"><xref:System.Xaml.XamlReader> differs from [!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)] and <xref:System.Xml.XmlReader> design principles because <xref:System.Xaml.XamlReader> does not have a `Create` method to return underlying default XAML reader implementations.</span></span> <span data-ttu-id="ef3cc-113">您必须通过调用其构造函数或其他特定于类的帮助程序 Api 来实例化特定的派生 XAML 读取器类。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-113">You must instead instantiate specific derived XAML reader classes by calling their constructors or other class-specific helper APIs.</span></span>  
  
## <a name="subtree-readers"></a><span data-ttu-id="ef3cc-114">子树读取器</span><span class="sxs-lookup"><span data-stu-id="ef3cc-114">Subtree Readers</span></span>  
 <span data-ttu-id="ef3cc-115">大多数情况下， <xref:System.Xaml.XamlReader> 在派生自的特定 XAML 读取器类的上下文中调用 API <xref:System.Xaml.XamlReader> 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-115">For the most part, you call <xref:System.Xaml.XamlReader> API in the context of specific XAML reader classes that derive from <xref:System.Xaml.XamlReader>.</span></span> <span data-ttu-id="ef3cc-116">但是，在某个特定情况下，你可以访问 <xref:System.Xaml.XamlReader> 非公共的实际 XAML 读取器实例上的 API，而不是派生自 <xref:System.Xaml.XamlObjectReader> 或 <xref:System.Xaml.XamlXmlReader> 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-116">However, in one particular case, you access <xref:System.Xaml.XamlReader> API on a practical XAML reader instance that is not public and not derived from <xref:System.Xaml.XamlObjectReader> or <xref:System.Xaml.XamlXmlReader>.</span></span> <span data-ttu-id="ef3cc-117">在这种情况下，调用将 <xref:System.Xaml.XamlReader.ReadSubtree%2A> 返回 <xref:System.Xaml.XamlReader> 实例。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-117">This case is when you call <xref:System.Xaml.XamlReader.ReadSubtree%2A>, which returns a <xref:System.Xaml.XamlReader> instance.</span></span> <span data-ttu-id="ef3cc-118">在默认实现中， <xref:System.Xaml.XamlReader> 此 API 返回的是内部类。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-118">In the default implementation, the <xref:System.Xaml.XamlReader> that is returned by this API is an internal class.</span></span>  
  
 <span data-ttu-id="ef3cc-119">为实现的 <xref:System.Xaml.XamlReader> 子树读取操作具有对和等 api 的有效操作， <xref:System.Xaml.XamlReader.Read%2A> <xref:System.Xaml.XamlReader.NodeType%2A> 这些操作基于父读取器类。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-119">The <xref:System.Xaml.XamlReader> obtained for subtree reading has valid actions for APIs such as <xref:System.Xaml.XamlReader.Read%2A> and <xref:System.Xaml.XamlReader.NodeType%2A>, and those actions are based on the parent reader class.</span></span> <span data-ttu-id="ef3cc-120">此设计允许内部类跟踪子树的输入位置的框架级别。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-120">This design enables the internal class to track the frame level where the subtree was entered.</span></span> <span data-ttu-id="ef3cc-121">操作子树 <xref:System.Xaml.XamlReader> 确保当当前节点位置超出子树的边界时，特定子树读取器将报告文件尾或 `null` 当前节点。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-121">The acting subtree <xref:System.Xaml.XamlReader> makes sure that if the current node position is moved beyond the bounds of the subtree, the specific subtree reader reports end-of-file or `null` at the current node.</span></span>  
  
 <span data-ttu-id="ef3cc-122">某些 api 上包含有关子树读取器使用情况的说明 <xref:System.Xaml.XamlReader> 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-122">Notes about subtree reader usage are included on certain <xref:System.Xaml.XamlReader> APIs.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlObjectReader" />
    <altmember cref="T:System.Xaml.XamlXmlReader" />
    <altmember cref="T:System.Xaml.XamlReaderSettings" />
    <related type="Article" href="/dotnet/desktop-wpf/xaml-services/understanding-xaml-node-stream-structures-and-concepts"><span data-ttu-id="ef3cc-123">了解 XAML 节点流结构和概念</span><span class="sxs-lookup"><span data-stu-id="ef3cc-123">Understanding XAML Node Stream Structures and Concepts</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ef3cc-124">初始化 <see cref="T:System.Xaml.XamlReader" /> 类。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-124">Initializes the <see cref="T:System.Xaml.XamlReader" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="xamlReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ef3cc-125">关闭 XAML 节点流。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-125">Closes the XAML node stream.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef3cc-126">在基实现中，调用 <xref:System.Xaml.XamlReader.Close%2A> <xref:System.Xaml.XamlReader.Dispose%2A> `isDisposing` 参数为的调用 `true` 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-126">In the base implementation, calling <xref:System.Xaml.XamlReader.Close%2A> calls <xref:System.Xaml.XamlReader.Dispose%2A> with the `isDisposing` parameter as `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="xamlReader.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="ef3cc-127"><see langword="true" /> 表示释放托管资源；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-127"><see langword="true" /> to release the managed resources; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="ef3cc-128">释放由 <see cref="T:System.Xaml.XamlReader" /> 占用的非托管资源，也可以选择释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-128">Releases the unmanaged resources used by the <see cref="T:System.Xaml.XamlReader" />, and optionally, releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef3cc-129">必须调用基类才能获取 <xref:System.Xaml.XamlReader.IsDisposed%2A>  =  `true` 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-129">You must call the base class to get <xref:System.Xaml.XamlReader.IsDisposed%2A> = `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="protected bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Xaml.XamlReader.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ef3cc-130">获取的值指示是否已调用了 <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-130">Gets whether <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> has been called.</span></span></summary>
        <value><span data-ttu-id="ef3cc-131">如果已调用 <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-131"><see langword="true" /> if <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> has been called; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEof">
      <MemberSignature Language="C#" Value="public abstract bool IsEof { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEof" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsEof" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsEof As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsEof { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEof : bool" Usage="System.Xaml.XamlReader.IsEof" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ef3cc-132">在派生类中实现时，获取一个值，该值报告读取器位置是否位于文件结尾。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-132">When implemented in a derived class, gets a value that reports whether the reader position is at end-of-file.</span></span></summary>
        <value><span data-ttu-id="ef3cc-133">如果位置在 XAML 节点流的概念上的文件末尾，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-133"><see langword="true" /> if the position is at the conceptual end-of-file of the XAML node stream; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef3cc-134">子树读取器可以调用 <xref:System.Xaml.XamlReader.IsEof%2A> ，其行为可正确反映输入的子树的界限。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-134">Subtree readers can call <xref:System.Xaml.XamlReader.IsEof%2A>, with behavior that correctly reflects the bounds of the entered subtree.</span></span> <span data-ttu-id="ef3cc-135">有关详细信息，请参阅中的 "子树读取器" 部分 <xref:System.Xaml.XamlReader> ，或参阅 <xref:System.Xaml.XamlReader.ReadSubtree%2A> 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-135">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.IsEof" />
        <altmember cref="P:System.Xaml.XamlXmlReader.IsEof" />
      </Docs>
    </Member>
    <Member MemberName="Member">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlMember Member { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlMember Member" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Member" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Member As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlMember ^ Member { System::Xaml::XamlMember ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Member : System.Xaml.XamlMember" Usage="System.Xaml.XamlReader.Member" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ef3cc-136">在派生类中实现时，如果读取器位置在 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上，则获取位于读取器位置处的当前成员。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-136">When implemented in a derived class, gets the current member at the reader position, if the reader position is on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />.</span></span></summary>
        <value><span data-ttu-id="ef3cc-137">当前成员；如果读取器位置不在成员上，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-137">The current member; or <see langword="null" />, if the reader position is not on a member.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef3cc-138">子树读取器可以调用 <xref:System.Xaml.XamlReader.Member%2A> ，并具有行为限制。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-138">Subtree readers can call <xref:System.Xaml.XamlReader.Member%2A>, with behavior restrictions.</span></span> <span data-ttu-id="ef3cc-139">有关详细信息，请参阅中的 "子树读取器" 部分 <xref:System.Xaml.XamlReader> ，或参阅 <xref:System.Xaml.XamlReader.ReadSubtree%2A> 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-139">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Member" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Member" />
        <altmember cref="T:System.Xaml.XamlMember" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.NamespaceDeclaration Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.NamespaceDeclaration Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As NamespaceDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::NamespaceDeclaration ^ Namespace { System::Xaml::NamespaceDeclaration ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : System.Xaml.NamespaceDeclaration" Usage="System.Xaml.XamlReader.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.NamespaceDeclaration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ef3cc-140">在派生类中实现时，从当前节点中获取 XAML 命名空间信息。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-140">When implemented in a derived class, gets the XAML namespace information from the current node.</span></span></summary>
        <value><span data-ttu-id="ef3cc-141">如果可用，则为当前节点中的 XAML 命名空间信息；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-141">The XAML namespace information, if it is available; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef3cc-142">此 API 的设计目的是仅当当前节点的为时返回非 null 结果 <xref:System.Xaml.XamlReader.NodeType%2A> <xref:System.Xaml.XamlNodeType.NamespaceDeclaration> 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-142">The intended design of this API is to return a non-null result only if the <xref:System.Xaml.XamlReader.NodeType%2A> of the current node is <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>.</span></span> <span data-ttu-id="ef3cc-143">属性不会报告应用于一般范围内的对象或成员的 XAML 命名空间，如 XAML 架构上下文中所述。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-143">The property does not report the XAML namespace that applies to objects or members in a general scoping sense, as interpreted under a XAML schema context.</span></span> <span data-ttu-id="ef3cc-144">如果你所需的信息的方式不同于 XAML 架构上下文向编写器报告的方式，你的应用程序必须提供一种方法来缓存正在进行的 XAML 命名空间的信息。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-144">Your application must provide a means to cache information for the acting XAML namespace as it traverses XAML nodes, if you need that information in a manner other than how the XAML schema context reports it to a writer.</span></span> <span data-ttu-id="ef3cc-145"><xref:System.Xaml.XamlXmlReader.Namespace%2A>有关参考实现的说明，请参阅。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-145">See <xref:System.Xaml.XamlXmlReader.Namespace%2A> for notes on the reference implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Namespace" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Namespace" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xaml.XamlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NodeType As XamlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlNodeType NodeType { System::Xaml::XamlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xaml.XamlNodeType" Usage="System.Xaml.XamlReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ef3cc-146">在派生类中实现时，获取当前节点的类型。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-146">When implemented in a derived class, gets the type of the current node.</span></span></summary>
        <value><span data-ttu-id="ef3cc-147"><see cref="T:System.Xaml.XamlNodeType" /> 枚举的一个值。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-147">A value of the <see cref="T:System.Xaml.XamlNodeType" /> enumeration.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef3cc-148">子树读取器可以调用 <xref:System.Xaml.XamlReader.NodeType%2A> ，并具有行为限制。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-148">Subtree readers can call <xref:System.Xaml.XamlReader.NodeType%2A>, with behavior restrictions.</span></span> <span data-ttu-id="ef3cc-149">有关详细信息，请参阅中的 "子树读取器" 部分 <xref:System.Xaml.XamlReader> ，或参阅 <xref:System.Xaml.XamlReader.ReadSubtree%2A> 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-149">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.NodeType" />
        <altmember cref="P:System.Xaml.XamlXmlReader.NodeType" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Read();" />
      <MemberSignature Language="F#" Value="abstract member Read : unit -&gt; bool" Usage="xamlReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ef3cc-150">在派生类中实现时，提供源中的下一个 XAML 节点（如果节点可用）。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-150">When implemented in a derived class, provides the next XAML node from the source, if a node is available.</span></span></summary>
        <returns><span data-ttu-id="ef3cc-151">如果某节点可用，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-151"><see langword="true" /> if a node is available; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef3cc-152">子树读取器可以调用 <xref:System.Xaml.XamlReader.Read%2A> ，并具有行为限制。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-152">Subtree readers can call <xref:System.Xaml.XamlReader.Read%2A>, with behavior restrictions.</span></span> <span data-ttu-id="ef3cc-153">有关详细信息，请参阅中的 "子树读取器" 部分 <xref:System.Xaml.XamlReader> ，或参阅 <xref:System.Xaml.XamlReader.ReadSubtree%2A> 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-153">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xaml.XamlXmlReader.Read" />
        <altmember cref="M:System.Xaml.XamlObjectReader.Read" />
      </Docs>
    </Member>
    <Member MemberName="ReadSubtree">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.XamlReader ReadSubtree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.XamlReader ReadSubtree() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.ReadSubtree" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadSubtree () As XamlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::XamlReader ^ ReadSubtree();" />
      <MemberSignature Language="F#" Value="abstract member ReadSubtree : unit -&gt; System.Xaml.XamlReader&#xA;override this.ReadSubtree : unit -&gt; System.Xaml.XamlReader" Usage="xamlReader.ReadSubtree " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ef3cc-154">返回基于当前 <see cref="T:System.Xaml.XamlReader" /> 的 <see cref="T:System.Xaml.XamlReader" />，其中返回的 <see cref="T:System.Xaml.XamlReader" /> 用于循环访问 XAML 节点结构。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-154">Returns a <see cref="T:System.Xaml.XamlReader" /> that is based on the current <see cref="T:System.Xaml.XamlReader" />, where the returned <see cref="T:System.Xaml.XamlReader" /> is used to iterate through a subtree of the XAML node structure.</span></span></summary>
        <returns><span data-ttu-id="ef3cc-155">子树的新 XAML 读取器实例。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-155">A new XAML reader instance for the subtree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef3cc-156">此方法具有默认实现并返回有效的 <xref:System.Xaml.XamlReader> 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-156">This method has a default implementation and returns a valid <xref:System.Xaml.XamlReader>.</span></span> <span data-ttu-id="ef3cc-157">返回的 <xref:System.Xaml.XamlReader> 是一个限制特定操作的内部类 <xref:System.Xaml.XamlReader> 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-157">The returned <xref:System.Xaml.XamlReader> is an internal class that restricts certain <xref:System.Xaml.XamlReader> actions.</span></span> <span data-ttu-id="ef3cc-158">这些限制与仅读取 XAML 节点集的较大源的已划分维度的子树有关，以及在 `null` 退出子树时返回文件尾或当前节点上的。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-158">The restrictions are consistent with the purpose of reading only a dimensioned subtree of a larger source for a XAML node set, and of returning end-of-file or `null` at the current node when the subtree is exited.</span></span>  
  
 <span data-ttu-id="ef3cc-159">通常，应从初始节点检查当前节点， <xref:System.Xaml.XamlReader.Read%2A> 以确定是否需要子树读取器。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-159">Generally, you should check the current node from the initial <xref:System.Xaml.XamlReader.Read%2A> to determine whether you need a subtree reader.</span></span> <span data-ttu-id="ef3cc-160">检查此项的方式可能是特定于实现的;但是，应避免为每个子树创建多个子树读取器。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-160">How you check this may be implementation-specific; however, avoid creating multiple subtree readers for every subtree.</span></span> <span data-ttu-id="ef3cc-161">此外，避免为某些节点事例调用子树读取器 (例如，对于 <xref:System.Xaml.XamlNodeType.NamespaceDeclaration> 不能包含节点子树的) 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-161">In addition, avoid invoking a subtree reader for certain node cases (for example, for <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>) that cannot contain a subtree of nodes.</span></span>  
  
 <span data-ttu-id="ef3cc-162">获取子树读取器后，必须调用 <xref:System.Xaml.XamlReader.Read%2A> 它以获取当前节点 (或调用 <xref:System.Xaml.XamlReader.Skip%2A> 获取下一个节点) 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-162">After you obtain a subtree reader, you must call <xref:System.Xaml.XamlReader.Read%2A> on it to obtain a current node (or call <xref:System.Xaml.XamlReader.Skip%2A> to obtain a next node).</span></span> <span data-ttu-id="ef3cc-163">创建子树后，不会自动从子树读取器获取初始节点位置。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-163">You do not automatically obtain an initial node position from the subtree reader when you create it.</span></span>  
  
 <span data-ttu-id="ef3cc-164">通过从该默认实现调用获取的读取器 <xref:System.Xaml.XamlReader.ReadSubtree%2A> 是一个内部类。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-164">The reader you obtain by calling <xref:System.Xaml.XamlReader.ReadSubtree%2A> from this default implementation is an internal class.</span></span> <span data-ttu-id="ef3cc-165">内部类在调用时将其行为基于正在 <xref:System.Xaml.XamlReader> 使用的实现 <xref:System.Xaml.XamlReader.ReadSubtree%2A> 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-165">The internal class bases its behavior on the <xref:System.Xaml.XamlReader> implementation that is being used when <xref:System.Xaml.XamlReader.ReadSubtree%2A> is called.</span></span> <span data-ttu-id="ef3cc-166">内部类的用途是将 <xref:System.Xaml.XamlReader.Read%2A> 和常规遍历行为进行包装。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-166">The purpose of the internal class is to wrap the <xref:System.Xaml.XamlReader.Read%2A> and general traversal behavior.</span></span> <span data-ttu-id="ef3cc-167">遍历通过跟踪 <xref:System.Xaml.XamlNodeType.StartMember> / <xref:System.Xaml.XamlNodeType.EndMember> 对或 <xref:System.Xaml.XamlNodeType.StartObject> / <xref:System.Xaml.XamlNodeType.EndObject> 对来保持在所需的子树中。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-167">The traversal stays within the intended subtree by keeping track of <xref:System.Xaml.XamlNodeType.StartMember>/<xref:System.Xaml.XamlNodeType.EndMember> pairs or <xref:System.Xaml.XamlNodeType.StartObject>/<xref:System.Xaml.XamlNodeType.EndObject> pairs.</span></span> <span data-ttu-id="ef3cc-168">`false` <xref:System.Xaml.XamlReader.Read%2A> `true` <xref:System.Xaml.XamlReader.IsEof%2A> 当读取器位于子树末尾时（由其入口点定义），它还为和正确返回。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-168">It also correctly returns `false` for <xref:System.Xaml.XamlReader.Read%2A> and `true` for <xref:System.Xaml.XamlReader.IsEof%2A> when the reader is at the end of the subtree, as defined by its entry point.</span></span> <span data-ttu-id="ef3cc-169">通常，假设 <xref:System.Xaml.XamlReader> 从子树读取器调用的任何 API 都具有与整体相同的实现（ <xref:System.Xaml.XamlReader> 遍历边界行为除外）。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-169">In general, you assume that any <xref:System.Xaml.XamlReader> API you call from a subtree reader has the same implementation as the overall <xref:System.Xaml.XamlReader> except for the traversal bounding behavior.</span></span>  
  
 <span data-ttu-id="ef3cc-170">不过， <xref:System.Xaml.XamlReader.ReadSubtree%2A> 是虚拟的。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-170">However, <xref:System.Xaml.XamlReader.ReadSubtree%2A> is virtual.</span></span> <span data-ttu-id="ef3cc-171">因此，特定 <xref:System.Xaml.XamlReader> 实现可提供与 <xref:System.Xaml.XamlReader> 内部包装行为不同的行为; <xref:System.Xaml.XamlReader> 实现甚至可以通过返回或其他异常来禁用子树读取器功能 <xref:System.NotImplementedException> 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-171">Therefore, a specific <xref:System.Xaml.XamlReader> implementation can provide behavior that differs from the <xref:System.Xaml.XamlReader> internal wrapper behavior; and a <xref:System.Xaml.XamlReader> implementation can even disable subtree reader functionality by returning <xref:System.NotImplementedException> or other exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlReader.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ef3cc-172">在派生类中实现时，获取一个对象，该对象提供信息集的 XAML 架构上下文信息。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-172">When implemented in a derived class, gets an object that provides XAML schema context information for the information set.</span></span></summary>
        <value><span data-ttu-id="ef3cc-173">一个对象，该对象提供信息集的 XAML 架构上下文信息。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-173">An object that provides XAML schema context information for the information set.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.SchemaContext" />
        <altmember cref="P:System.Xaml.XamlXmlReader.SchemaContext" />
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public virtual void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Skip();" />
      <MemberSignature Language="F#" Value="abstract member Skip : unit -&gt; unit&#xA;override this.Skip : unit -&gt; unit" Usage="xamlReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ef3cc-174">跳过当前节点并将读取器位置推进到下一个节点。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-174">Skips the current node and advances the reader position to the next node.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef3cc-175">跳过后， <xref:System.Xaml.XamlReader.Read%2A> 默认实现将调用 <xref:System.Xaml.XamlReader.Skip%2A> 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-175">Once skipped, <xref:System.Xaml.XamlReader.Read%2A> is called by the default <xref:System.Xaml.XamlReader.Skip%2A> implementation.</span></span> <span data-ttu-id="ef3cc-176">通常不 <xref:System.Xaml.XamlReader.Skip%2A> 按顺序调用和 <xref:System.Xaml.XamlReader.Read%2A> 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-176">You typically do not call <xref:System.Xaml.XamlReader.Skip%2A> and <xref:System.Xaml.XamlReader.Read%2A> in sequence.</span></span>  
  
 <span data-ttu-id="ef3cc-177">在默认 <xref:System.Xaml.XamlReader.Skip%2A> 实现中，将采用不同的操作，具体取决于 <xref:System.Xaml.XamlReader.NodeType%2A> 读取器位置当前所在的位置。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-177">In the default <xref:System.Xaml.XamlReader.Skip%2A> implementation, different actions are taken depending on which <xref:System.Xaml.XamlReader.NodeType%2A> the reader position is currently on.</span></span> <span data-ttu-id="ef3cc-178">如果读取器位置当前在或上 <xref:System.Xaml.XamlNodeType.StartMember> <xref:System.Xaml.XamlNodeType.StartObject> ，则将跳过该成员或对象。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-178">If the reader position is currently on a <xref:System.Xaml.XamlNodeType.StartMember> or <xref:System.Xaml.XamlNodeType.StartObject>, that member or object is skipped.</span></span> <span data-ttu-id="ef3cc-179">对于其他 <xref:System.Xaml.XamlReader.NodeType%2A> 值，不会执行任何操作，而不是 <xref:System.Xaml.XamlReader.Read%2A> 从当前位置调用。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-179">For other <xref:System.Xaml.XamlReader.NodeType%2A> values, no action is taken other than calling <xref:System.Xaml.XamlReader.Read%2A> from the current position.</span></span>  
  
 <span data-ttu-id="ef3cc-180">子树读取器可以调用 <xref:System.Xaml.XamlReader.Skip%2A> ，并具有行为限制。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-180">Subtree readers can call <xref:System.Xaml.XamlReader.Skip%2A>, with behavior restrictions.</span></span> <span data-ttu-id="ef3cc-181">有关详细信息，请参阅中的 "子树读取器" 部分 <xref:System.Xaml.XamlReader> ，或参阅 <xref:System.Xaml.XamlReader.ReadSubtree%2A> 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-181">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 <span data-ttu-id="ef3cc-182">的节点树行为 <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> 基于等效的 XML <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-182">The node tree behavior of <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> is based on the XML equivalent <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="ef3cc-183">基于 <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType> 行为等效 <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> 项，跳过节点及其子树，而不仅仅是单个进入节点。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-183">Based on the <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType> behavior equivalence, <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> skips the node and its subtree, not just the single entry node.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member System.IDisposable.Dispose : unit -&gt; unit&#xA;override this.System.IDisposable.Dispose : unit -&gt; unit" Usage="xamlReader.System.IDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ef3cc-184">释放 <see cref="T:System.Xaml.XamlReader" /> 类的当前实例所使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-184">Releases all resources used by the current instance of the <see cref="T:System.Xaml.XamlReader" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType Type" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Type" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Type As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlType ^ Type { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : System.Xaml.XamlType" Usage="System.Xaml.XamlReader.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ef3cc-185">在派生类中实现时，获取当前节点的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-185">When implemented in a derived class, gets the <see cref="T:System.Xaml.XamlType" /> of the current node.</span></span></summary>
        <value><span data-ttu-id="ef3cc-186">当前节点的 <see cref="T:System.Xaml.XamlType" />；如果当前读取器位置不在对象上，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-186">The <see cref="T:System.Xaml.XamlType" /> of the current node; or <see langword="null" />, if the current reader position is not on an object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="ef3cc-187">子树读取器可以调用 <xref:System.Xaml.XamlReader.Type%2A> ，并具有行为限制。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-187">Subtree readers can call <xref:System.Xaml.XamlReader.Type%2A>, with behavior restrictions.</span></span> <span data-ttu-id="ef3cc-188">有关详细信息，请参阅中的 "子树读取器" 部分 <xref:System.Xaml.XamlReader> ，或参阅 <xref:System.Xaml.XamlReader.ReadSubtree%2A> 。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-188">For more information, see the "Subtree Readers" section in <xref:System.Xaml.XamlReader>, or see <xref:System.Xaml.XamlReader.ReadSubtree%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Type" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Type" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Xaml.XamlReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ef3cc-189">在派生类中实现时，获取当前节点的值。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-189">When implemented in a derived class, gets the value of the current node.</span></span></summary>
        <value><span data-ttu-id="ef3cc-190">当前节点的值；如果当前读取器位置不在 <see cref="F:System.Xaml.XamlNodeType.Value" /> 节点类型上，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ef3cc-190">The value of the current node; or <see langword="null" />, if the current reader position is not on a <see cref="F:System.Xaml.XamlNodeType.Value" /> node type.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Value" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Value" />
      </Docs>
    </Member>
  </Members>
</Type>
