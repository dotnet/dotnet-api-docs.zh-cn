<Type Name="IAmbientProvider" FullName="System.Xaml.IAmbientProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="97b5aeae1a1f1d88c40d2c71fd24cd829ad938a1" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89750243" /></Metadata><TypeSignature Language="C#" Value="public interface IAmbientProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAmbientProvider" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.IAmbientProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAmbientProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAmbientProvider" />
  <TypeSignature Language="F#" Value="type IAmbientProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>返回一个服务，该服务可将有关环境属性或环境类型的信息项返回到类型转换器和标记扩展。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此接口表示服务，该服务可帮助类型转换器和标记扩展获取 XAML 类型系统 (对象) 的环境属性标识符 <xref:System.Xaml.XamlMember> 。 服务还可以从类获取环境属性值。 类型也可以是环境;使用该类型作为其值的任何成员都应被视为环境。  
  
 此服务通常通过对的调用返回 <xref:System.IServiceProvider.GetService%2A> ，这是针对特定于上下文的服务提供程序进行的。 服务提供程序通常可用于需要它的上下文（例如，值转换器的执行代码）。 有关详细信息，请参阅[可用于类型转换器和标记扩展](/dotnet/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions)[的 XAML 的类型转换器和标记扩展](/dotnet/framework/xaml-services/type-converters-and-markup-extensions-for-xaml)。  
  
## <a name="about-ambient-properties"></a>关于环境属性  
 环境属性是一个属性，它的属性值应该可供类型转换器和标记扩展用法在 XAML 节点结构和从中创建的对象图中。 这与在加载路径或保存路径的序列化阶段的对象写入阶段中的 XAML 处理器相关。  
  
 在加载路径情况下，环境属性值可能会影响 XAML 节点结构中存在的其他属性的对象图中的值。 当处理为 XAML 节点流时，环境概念表示环境属性值必须可用于的类型转换器和标记扩展 `StartObject` `EndObject` 。 同样，用于保存路径的类型转换器可以使用环境属性及其值的知识。 因此，生成的 XAML 是更好的往返表示形式。  
  
 对于常规成员，XAML 不指定对象成员的处理顺序。 但是，必须先由 XAML 读取器处理任何环境属性值，以便其他属性中包含的类型转换器和标记扩展用法可以通过服务访问它 <xref:System.Xaml.IAmbientProvider> 。  
  
 <xref:System.Xaml.XamlMember.DependsOn%2A> 是一个类似的概念，也会影响 XAML 节点处理顺序。 但是， <xref:System.Xaml.XamlMember.DependsOn%2A> 只能用于对等成员和节点关系，它无法影响所有后代。 同时， <xref:System.Xaml.XamlMember.DependsOn%2A> 直接影响对象图的属性设置; 而环境技术依赖于类型转换器或标记扩展。 在环境技术中，还必须有一个指定的类型转换器或标记扩展定义，指定应如何解释环境属性值并将其应用于对象。  
  
## <a name="wpf-usage-notes"></a>WPF 用法说明  
 功能集中阐释的环境属性方案 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 为 <xref:System.Windows.Style.TargetType%2A?displayProperty=nameWithType> ，它可以为其他值限定必需的属性名称查找。 在这种情况下， <xref:System.Windows.Style.TargetType%2A?displayProperty=nameWithType> 值限定 <xref:System.Windows.Setter.Property%2A?displayProperty=nameWithType> 位于其下的 XAML 节点中的值。 <xref:System.Windows.Setter.Property%2A?displayProperty=nameWithType> 使用的类型转换器行为 <xref:System.Windows.DependencyProperty> 。 此行为 <xref:System.Windows.Style.TargetType%2A?displayProperty=nameWithType> 通过 <xref:System.Xaml.IAmbientProvider.GetFirstAmbientValue%2A> 从可供类型转换器和标记扩展使用的服务上下文进行查询来访问环境值。  
  
 WPF 功能集中阐释的环境类型方案为 <xref:System.Windows.ResourceDictionary> 。 <xref:System.Windows.ResourceDictionary> 具有 <xref:System.Windows.ResourceDictionary.MergedDictionaries%2A> 可包含其他 <xref:System.Windows.ResourceDictionary> 要合并的对象的属性，并且合并方案的预期资源解析顺序与加载类型的顺序冲突。 <xref:System.Windows.ResourceDictionary> 适用于 <xref:System.Windows.Markup.AmbientAttribute> XAML 处理器可使用使用情况正确处理合并字典中的引用 `StaticResource` 。 具体而言， `StaticResource` 是标记扩展，它调用 <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%2A> 。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.AmbientPropertyValue" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetAllAmbientValues">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>针对所请求的范围，返回环境类型或属性信息项的可枚举集合。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAllAmbientValues">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;object&gt; GetAllAmbientValues (params System.Xaml.XamlType[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;object&gt; GetAllAmbientValues(class System.Xaml.XamlType[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Xaml.XamlType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllAmbientValues (ParamArray types As XamlType()) As IEnumerable(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ GetAllAmbientValues(... cli::array &lt;System::Xaml::XamlType ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetAllAmbientValues : System.Xaml.XamlType[] -&gt; seq&lt;obj&gt;" Usage="iAmbientProvider.GetAllAmbientValues types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Xaml.XamlType[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="types">要从中检索环境类型信息的类型集。</param>
        <summary>针对请求的类型，返回可能的环境类型的对象实例的可枚举集合。</summary>
        <returns>对象的可枚举集合，这些对象表示所请求的 <see cref="T:System.Xaml.XamlType" /> 标识符集合的值。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllAmbientValues">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xaml.AmbientPropertyValue&gt; GetAllAmbientValues (System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt; ceilingTypes, params System.Xaml.XamlMember[] properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.AmbientPropertyValue&gt; GetAllAmbientValues(class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlType&gt; ceilingTypes, class System.Xaml.XamlMember[] properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllAmbientValues (ceilingTypes As IEnumerable(Of XamlType), ParamArray properties As XamlMember()) As IEnumerable(Of AmbientPropertyValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xaml::AmbientPropertyValue ^&gt; ^ GetAllAmbientValues(System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlType ^&gt; ^ ceilingTypes, ... cli::array &lt;System::Xaml::XamlMember ^&gt; ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member GetAllAmbientValues : seq&lt;System.Xaml.XamlType&gt; * System.Xaml.XamlMember[] -&gt; seq&lt;System.Xaml.AmbientPropertyValue&gt;" Usage="iAmbientProvider.GetAllAmbientValues (ceilingTypes, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xaml.AmbientPropertyValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ceilingTypes" Type="System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="properties" Type="System.Xaml.XamlMember[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ceilingTypes">指定一个或多个类型，如果在对象图中向上遍历的过程中遇到这些类型，则这些类型应停止计算。 此类型包含所需的环境属性。 可为 <see langword="null" />。</param>
        <param name="properties">指定一个或多个属性标识符对象，这些对象标识要视为环境属性的属性。</param>
        <summary>针对所请求的属性集，返回环境属性信息项的可枚举集合。</summary>
        <returns>所请求属性集的环境属性信息的可枚举集合。 返回的每个 <see cref="T:System.Xaml.AmbientPropertyValue" /> 的属性信息将与其中一个输入 <paramref name="properties" /> 相匹配。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的每个都 <xref:System.Xaml.AmbientPropertyValue> 包含 <xref:System.Xaml.XamlMember> 标识符和属性值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllAmbientValues">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xaml.AmbientPropertyValue&gt; GetAllAmbientValues (System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt; ceilingTypes, bool searchLiveStackOnly, System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt; types, params System.Xaml.XamlMember[] properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.AmbientPropertyValue&gt; GetAllAmbientValues(class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlType&gt; ceilingTypes, bool searchLiveStackOnly, class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlType&gt; types, class System.Xaml.XamlMember[] properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Boolean,System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllAmbientValues (ceilingTypes As IEnumerable(Of XamlType), searchLiveStackOnly As Boolean, types As IEnumerable(Of XamlType), ParamArray properties As XamlMember()) As IEnumerable(Of AmbientPropertyValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xaml::AmbientPropertyValue ^&gt; ^ GetAllAmbientValues(System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlType ^&gt; ^ ceilingTypes, bool searchLiveStackOnly, System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlType ^&gt; ^ types, ... cli::array &lt;System::Xaml::XamlMember ^&gt; ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member GetAllAmbientValues : seq&lt;System.Xaml.XamlType&gt; * bool * seq&lt;System.Xaml.XamlType&gt; * System.Xaml.XamlMember[] -&gt; seq&lt;System.Xaml.AmbientPropertyValue&gt;" Usage="iAmbientProvider.GetAllAmbientValues (ceilingTypes, searchLiveStackOnly, types, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xaml.AmbientPropertyValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ceilingTypes" Type="System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="searchLiveStackOnly" Type="System.Boolean" />
        <Parameter Name="types" Type="System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="properties" Type="System.Xaml.XamlMember[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ceilingTypes">指定一个或多个类型，如果在对象图中向上遍历的过程中遇到这些类型，则这些类型应停止计算。 此类型包含所需的环境属性。 可为 <see langword="null" />。</param>
        <param name="searchLiveStackOnly"><see langword="true" /> 则不使用已保存的上下文 ；<see langword="false" /> 则使用已保存的上下文。 默认值为 <see langword="false" />。</param>
        <param name="types">指定一个或多个类型标识符对象，这些对象标识要视为环境的类型。</param>
        <param name="properties">指定一个或多个属性标识符对象，这些对象标识要视为环境属性的属性。</param>
        <summary>针对所请求的种类和属性集，返回环境属性信息项的可枚举集合。</summary>
        <returns>针对所请求的类型和属性集的环境属性信息项的可枚举集合。 返回的每个 <see cref="T:System.Xaml.AmbientPropertyValue" /> 的属性信息将与其中一个输入 <paramref name="types" /> 或 <paramref name="properties" /> 相匹配。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的每个都 <xref:System.Xaml.AmbientPropertyValue> 包含 <xref:System.Xaml.XamlMember> 标识符和属性值。  
  
 此特定 <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%2A> 重载可以通过树在同一阶段中搜索环境类型和环境属性。 使用此重载将导致返回值中的项的顺序不同于 <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%28System.Collections.Generic.IEnumerable%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlMember%5B%5D%29> 或 <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%28System.Xaml.XamlType%5B%5D%29> 。  
  
 此重载还允许搜索不使用任何已保存的上下文。 <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%28System.Collections.Generic.IEnumerable%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlMember%5B%5D%29>或 <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%28System.Xaml.XamlType%5B%5D%29> 重载会隐式使用已保存的上下文（如果可用） (它们始终会像) 隐式参数一样操作 `searchLiveStackOnly` `false` 。 特定 XAML 架构上下文或包含 XAML 的框架可能以不同的方式处理已保存上下文的概念。 在 WPF XAML 实现中，保存的上下文用于模板扩展以及其他功能区域。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFirstAmbientValue">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从请求的集合中返回单个环境类型或属性信息项，具体情况视哪个属性是遇到的第一个属性而定。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFirstAmbientValue">
      <MemberSignature Language="C#" Value="public object GetFirstAmbientValue (params System.Xaml.XamlType[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFirstAmbientValue(class System.Xaml.XamlType[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Xaml.XamlType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstAmbientValue (ParamArray types As XamlType()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetFirstAmbientValue(... cli::array &lt;System::Xaml::XamlType ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetFirstAmbientValue : System.Xaml.XamlType[] -&gt; obj" Usage="iAmbientProvider.GetFirstAmbientValue types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Xaml.XamlType[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="types">要从中检索环境类型信息的类型集。</param>
        <summary>返回第一个匹配对象，该对象是所请求类型可能的环境类型。</summary>
        <returns>所请求集合的第一个结果对象。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFirstAmbientValue">
      <MemberSignature Language="C#" Value="public System.Xaml.AmbientPropertyValue GetFirstAmbientValue (System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt; ceilingTypes, params System.Xaml.XamlMember[] properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.AmbientPropertyValue GetFirstAmbientValue(class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlType&gt; ceilingTypes, class System.Xaml.XamlMember[] properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstAmbientValue (ceilingTypes As IEnumerable(Of XamlType), ParamArray properties As XamlMember()) As AmbientPropertyValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::AmbientPropertyValue ^ GetFirstAmbientValue(System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlType ^&gt; ^ ceilingTypes, ... cli::array &lt;System::Xaml::XamlMember ^&gt; ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member GetFirstAmbientValue : seq&lt;System.Xaml.XamlType&gt; * System.Xaml.XamlMember[] -&gt; System.Xaml.AmbientPropertyValue" Usage="iAmbientProvider.GetFirstAmbientValue (ceilingTypes, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.AmbientPropertyValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ceilingTypes" Type="System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="properties" Type="System.Xaml.XamlMember[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ceilingTypes">指定一个或多个类型，如果在对象图中向上遍历的过程中遇到这些类型，则这些类型应停止计算。 此类型包含所需的环境属性。</param>
        <param name="properties">指定一个或多个对象，这些对象标识要视为环境属性的属性。</param>
        <summary>从请求的属性集中返回单个环境属性信息项，具体情况视哪个属性是遇到的第一个属性而定。</summary>
        <returns>所找到的 <paramref name="properties" /> 列表中第一个环境属性值的单个环境属性信息项。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的每个都 <xref:System.Xaml.AmbientPropertyValue> 包含 <xref:System.Xaml.XamlMember> 标识符和属性值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
