<Type Name="IAmbientProvider" FullName="System.Xaml.IAmbientProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ce81c306d2c2d9ec2b7ed4a68bf9fd4800962928" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83952505" /></Metadata><TypeSignature Language="C#" Value="public interface IAmbientProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAmbientProvider" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.IAmbientProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAmbientProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IAmbientProvider" />
  <TypeSignature Language="F#" Value="type IAmbientProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e4830-101">返回一个服务，该服务可将有关环境属性或环境类型的信息项返回到类型转换器和标记扩展。</span><span class="sxs-lookup"><span data-stu-id="e4830-101">Represents a service that can return information items about ambient properties or ambient types to type converters and markup extensions.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4830-102">此接口表示一种服务，该服务可帮助类型转换器和标记扩展来获取 XAML 类型系统（<xref:System.Xaml.XamlMember> 对象）的环境属性标识符。</span><span class="sxs-lookup"><span data-stu-id="e4830-102">This interface represents the service that can help type converters and markup extensions to get the ambient property identifiers for the XAML type system (<xref:System.Xaml.XamlMember> objects).</span></span> <span data-ttu-id="e4830-103">服务还可以从类获取环境属性值。</span><span class="sxs-lookup"><span data-stu-id="e4830-103">The service can also get the ambient property values from classes.</span></span> <span data-ttu-id="e4830-104">类型也可以是环境;使用该类型作为其值的任何成员都应被视为环境。</span><span class="sxs-lookup"><span data-stu-id="e4830-104">Types can also be ambient; any member that uses that type as its value should be considered ambient.</span></span>  
  
 <span data-ttu-id="e4830-105">此服务通常通过调用 <xref:System.IServiceProvider.GetService%2A>返回，这是针对特定于上下文的服务提供程序进行的。</span><span class="sxs-lookup"><span data-stu-id="e4830-105">This service is typically returned through a call to <xref:System.IServiceProvider.GetService%2A>, which is made against a context-specific service provider.</span></span> <span data-ttu-id="e4830-106">服务提供程序通常可用于需要它的上下文（例如，值转换器的执行代码）。</span><span class="sxs-lookup"><span data-stu-id="e4830-106">The service provider is generally available to contexts that need it, such as the execution code of a value converter.</span></span> <span data-ttu-id="e4830-107">有关详细信息，请参阅[可用于类型转换器和标记扩展](/dotnet/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions)[的 XAML 的类型转换器和标记扩展](/dotnet/framework/xaml-services/type-converters-and-markup-extensions-for-xaml)。</span><span class="sxs-lookup"><span data-stu-id="e4830-107">For more information, see [Type Converters and Markup Extensions for XAML](/dotnet/framework/xaml-services/type-converters-and-markup-extensions-for-xaml) and [Service Contexts Available to Type Converters and Markup Extensions](/dotnet/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions).</span></span>  
  
## <a name="about-ambient-properties"></a><span data-ttu-id="e4830-108">关于环境属性</span><span class="sxs-lookup"><span data-stu-id="e4830-108">About Ambient Properties</span></span>  
 <span data-ttu-id="e4830-109">环境属性是一个属性，它的属性值应该可供类型转换器和标记扩展用法在 XAML 节点结构和从中创建的对象图中。</span><span class="sxs-lookup"><span data-stu-id="e4830-109">An ambient property is a property whose property value should be available to type converter and markup extension usages that exist in the XAML node structure and in the object graph created from it.</span></span> <span data-ttu-id="e4830-110">这与在加载路径或保存路径的序列化阶段的对象写入阶段中的 XAML 处理器相关。</span><span class="sxs-lookup"><span data-stu-id="e4830-110">This is relevant for a XAML processor during the object-writing phase of the load path or the serialization phase of a save path.</span></span>  
  
 <span data-ttu-id="e4830-111">在加载路径情况下，环境属性值可能会影响 XAML 节点结构中存在的其他属性的对象图中的值。</span><span class="sxs-lookup"><span data-stu-id="e4830-111">In the load path case, the ambient property value might influence the value in the object graph of other properties that exist underneath it in a XAML node structure.</span></span> <span data-ttu-id="e4830-112">作为 XAML 节点流处理时，环境概念意味着环境属性值必须可供类型转换器和标记扩展使用 `StartObject` 到 `EndObject`中。</span><span class="sxs-lookup"><span data-stu-id="e4830-112">When processed as a XAML node stream, the ambient concept means the ambient property value must be available to type converters and markup extensions from `StartObject` to `EndObject`.</span></span> <span data-ttu-id="e4830-113">同样，用于保存路径的类型转换器可以使用环境属性及其值的知识。</span><span class="sxs-lookup"><span data-stu-id="e4830-113">Similarly, a type converter that is used for the save path can use knowledge of the ambient property and its value.</span></span> <span data-ttu-id="e4830-114">因此，生成的 XAML 是更好的往返表示形式。</span><span class="sxs-lookup"><span data-stu-id="e4830-114">Therefore, the XAML that is produced is a better round-trip representation.</span></span>  
  
 <span data-ttu-id="e4830-115">对于常规成员，XAML 不指定对象成员的处理顺序。</span><span class="sxs-lookup"><span data-stu-id="e4830-115">For members in general, XAML does not specify the order in which members of an object must be processed.</span></span> <span data-ttu-id="e4830-116">但是，必须先由 XAML 读取器处理任何环境属性值，以便其他属性中包含的类型转换器和标记扩展用法可以通过 <xref:System.Xaml.IAmbientProvider> 服务进行访问。</span><span class="sxs-lookup"><span data-stu-id="e4830-116">However, any ambient property value must be processed first by the XAML reader so that the type converter and markup extension usages that are contained in other properties can access it through the <xref:System.Xaml.IAmbientProvider> service.</span></span>  
  
 <span data-ttu-id="e4830-117"><xref:System.Xaml.XamlMember.DependsOn%2A> 是一种类似的概念，也会影响 XAML 节点处理顺序。</span><span class="sxs-lookup"><span data-stu-id="e4830-117"><xref:System.Xaml.XamlMember.DependsOn%2A> is a similar concept that also influences XAML node-processing order.</span></span> <span data-ttu-id="e4830-118">但 <xref:System.Xaml.XamlMember.DependsOn%2A> 仅可用于对等成员和节点关系;它不会影响所有后代。</span><span class="sxs-lookup"><span data-stu-id="e4830-118">However, <xref:System.Xaml.XamlMember.DependsOn%2A> can only be used for peer member and node relationships; it cannot influence all descendants.</span></span> <span data-ttu-id="e4830-119">此外，<xref:System.Xaml.XamlMember.DependsOn%2A> 会直接影响对象图属性设置;而环境技术依赖于类型转换器或标记扩展。</span><span class="sxs-lookup"><span data-stu-id="e4830-119">Also, <xref:System.Xaml.XamlMember.DependsOn%2A> directly influences object graph property setting; whereas the ambient technique relies on type converters or markup extensions.</span></span> <span data-ttu-id="e4830-120">在环境技术中，还必须有一个指定的类型转换器或标记扩展定义，指定应如何解释环境属性值并将其应用于对象。</span><span class="sxs-lookup"><span data-stu-id="e4830-120">In the ambient technique, there must also be a specific type converter or markup extension definition that specifies how the ambient property value should be interpreted and applied to the object.</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="e4830-121">WPF 用法说明</span><span class="sxs-lookup"><span data-stu-id="e4830-121">WPF Usage Notes</span></span>  
 <span data-ttu-id="e4830-122">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 功能集中所示的环境属性方案是 <xref:System.Windows.Style.TargetType%2A?displayProperty=nameWithType>的，它可以限定其他值的必要属性名称查找。</span><span class="sxs-lookup"><span data-stu-id="e4830-122">An ambient property scenario that is illustrated in the [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] feature set is <xref:System.Windows.Style.TargetType%2A?displayProperty=nameWithType>, which can qualify the necessary property name lookups for other values.</span></span> <span data-ttu-id="e4830-123">在这种情况下，<xref:System.Windows.Style.TargetType%2A?displayProperty=nameWithType> 值限定位于其下的 XAML 节点中的 <xref:System.Windows.Setter.Property%2A?displayProperty=nameWithType> 值。</span><span class="sxs-lookup"><span data-stu-id="e4830-123">In this case, the <xref:System.Windows.Style.TargetType%2A?displayProperty=nameWithType> value qualifies the <xref:System.Windows.Setter.Property%2A?displayProperty=nameWithType> values that are located in the XAML nodes underneath it.</span></span> <span data-ttu-id="e4830-124"><xref:System.Windows.Setter.Property%2A?displayProperty=nameWithType> 使用 <xref:System.Windows.DependencyProperty>的类型转换器行为。</span><span class="sxs-lookup"><span data-stu-id="e4830-124"><xref:System.Windows.Setter.Property%2A?displayProperty=nameWithType> uses the type converter behavior for a <xref:System.Windows.DependencyProperty>.</span></span> <span data-ttu-id="e4830-125">此行为通过从可供类型转换器和标记扩展使用的服务上下文中查询 <xref:System.Xaml.IAmbientProvider.GetFirstAmbientValue%2A> 来访问环境 <xref:System.Windows.Style.TargetType%2A?displayProperty=nameWithType> 值。</span><span class="sxs-lookup"><span data-stu-id="e4830-125">This behavior accesses the ambient <xref:System.Windows.Style.TargetType%2A?displayProperty=nameWithType> value by querying <xref:System.Xaml.IAmbientProvider.GetFirstAmbientValue%2A> from a service context that is available to type converters and markup extensions.</span></span>  
  
 <span data-ttu-id="e4830-126">在 WPF 功能集中阐释的环境类型方案是 <xref:System.Windows.ResourceDictionary>。</span><span class="sxs-lookup"><span data-stu-id="e4830-126">An ambient type scenario that is illustrated in the WPF feature set is <xref:System.Windows.ResourceDictionary>.</span></span> <span data-ttu-id="e4830-127"><xref:System.Windows.ResourceDictionary> 具有一个 <xref:System.Windows.ResourceDictionary.MergedDictionaries%2A> 属性，该属性可以包含其他要合并的 <xref:System.Windows.ResourceDictionary> 对象，而合并方案的预期资源解析顺序与加载类型的顺序冲突。</span><span class="sxs-lookup"><span data-stu-id="e4830-127"><xref:System.Windows.ResourceDictionary> has a <xref:System.Windows.ResourceDictionary.MergedDictionaries%2A> property that can contain other <xref:System.Windows.ResourceDictionary> objects to merge, and the intended order of resource resolution for the merged scenario clashes with the order that types are loaded.</span></span> <span data-ttu-id="e4830-128"><xref:System.Windows.ResourceDictionary> 应用 <xref:System.Windows.Markup.AmbientAttribute>，以便 XAML 处理器可以使用 `StaticResource` 用法正确处理合并字典中的引用。</span><span class="sxs-lookup"><span data-stu-id="e4830-128"><xref:System.Windows.ResourceDictionary> applies <xref:System.Windows.Markup.AmbientAttribute> so that a XAML processor can correctly process the references in a merged dictionary with `StaticResource` usages.</span></span> <span data-ttu-id="e4830-129">具体而言，`StaticResource` 是一个 <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%2A>调用的标记扩展。</span><span class="sxs-lookup"><span data-stu-id="e4830-129">Specifically, `StaticResource` is a markup extension, which calls <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%2A>.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.AmbientPropertyValue" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetAllAmbientValues">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4830-130">针对所请求的范围，返回环境类型或属性信息项的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="e4830-130">Returns an enumerable set of ambient type or property information items for the requested scope.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAllAmbientValues">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;object&gt; GetAllAmbientValues (params System.Xaml.XamlType[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;object&gt; GetAllAmbientValues(class System.Xaml.XamlType[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Xaml.XamlType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllAmbientValues (ParamArray types As XamlType()) As IEnumerable(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Object ^&gt; ^ GetAllAmbientValues(... cli::array &lt;System::Xaml::XamlType ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetAllAmbientValues : System.Xaml.XamlType[] -&gt; seq&lt;obj&gt;" Usage="iAmbientProvider.GetAllAmbientValues types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Xaml.XamlType[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="types"><span data-ttu-id="e4830-131">要从中检索环境类型信息的类型集。</span><span class="sxs-lookup"><span data-stu-id="e4830-131">The set of types from which to retrieve ambient type information.</span></span></param>
        <summary><span data-ttu-id="e4830-132">针对请求的类型，返回可能的环境类型的对象实例的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="e4830-132">Returns an enumerable set of object instances of possible ambient types for the requested types.</span></span></summary>
        <returns><span data-ttu-id="e4830-133">对象的可枚举集合，这些对象表示所请求的 <see cref="T:System.Xaml.XamlType" /> 标识符集合的值。</span><span class="sxs-lookup"><span data-stu-id="e4830-133">An enumerable set of objects that represent the values for the requested set of <see cref="T:System.Xaml.XamlType" /> identifiers.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllAmbientValues">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xaml.AmbientPropertyValue&gt; GetAllAmbientValues (System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt; ceilingTypes, params System.Xaml.XamlMember[] properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.AmbientPropertyValue&gt; GetAllAmbientValues(class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlType&gt; ceilingTypes, class System.Xaml.XamlMember[] properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllAmbientValues (ceilingTypes As IEnumerable(Of XamlType), ParamArray properties As XamlMember()) As IEnumerable(Of AmbientPropertyValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xaml::AmbientPropertyValue ^&gt; ^ GetAllAmbientValues(System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlType ^&gt; ^ ceilingTypes, ... cli::array &lt;System::Xaml::XamlMember ^&gt; ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member GetAllAmbientValues : seq&lt;System.Xaml.XamlType&gt; * System.Xaml.XamlMember[] -&gt; seq&lt;System.Xaml.AmbientPropertyValue&gt;" Usage="iAmbientProvider.GetAllAmbientValues (ceilingTypes, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xaml.AmbientPropertyValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ceilingTypes" Type="System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="properties" Type="System.Xaml.XamlMember[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ceilingTypes"><span data-ttu-id="e4830-134">指定一个或多个类型，如果在对象图中向上遍历的过程中遇到这些类型，则这些类型应停止计算。</span><span class="sxs-lookup"><span data-stu-id="e4830-134">Specifies one or more types that should stop the evaluation when they are encountered traversing upward in the object graph.</span></span> <span data-ttu-id="e4830-135">此类型包含所需的环境属性。</span><span class="sxs-lookup"><span data-stu-id="e4830-135">This type holds the desired ambient property.</span></span> <span data-ttu-id="e4830-136">可以是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4830-136">May be <see langword="null" />.</span></span></param>
        <param name="properties"><span data-ttu-id="e4830-137">指定一个或多个属性标识符对象，这些对象标识要视为环境属性的属性。</span><span class="sxs-lookup"><span data-stu-id="e4830-137">Specifies one or more property identifier objects that identify the properties to be considered ambient.</span></span></param>
        <summary><span data-ttu-id="e4830-138">针对所请求的属性集，返回环境属性信息项的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="e4830-138">Returns an enumerable set of ambient property information items for the requested set of properties.</span></span></summary>
        <returns><span data-ttu-id="e4830-139">所请求属性集的环境属性信息的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="e4830-139">An enumerable set of ambient property information items for the requested set of properties.</span></span> <span data-ttu-id="e4830-140">返回的每个 <see cref="T:System.Xaml.AmbientPropertyValue" /> 的属性信息将与其中一个输入 <paramref name="properties" /> 相匹配。</span><span class="sxs-lookup"><span data-stu-id="e4830-140">The property information for each <see cref="T:System.Xaml.AmbientPropertyValue" /> that is returned will match one of the input <paramref name="properties" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4830-141">返回的每个 <xref:System.Xaml.AmbientPropertyValue> 都包含 <xref:System.Xaml.XamlMember> 标识符和属性值。</span><span class="sxs-lookup"><span data-stu-id="e4830-141">Each <xref:System.Xaml.AmbientPropertyValue> that is returned contains the <xref:System.Xaml.XamlMember> identifier and a property value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllAmbientValues">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.Xaml.AmbientPropertyValue&gt; GetAllAmbientValues (System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt; ceilingTypes, bool searchLiveStackOnly, System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt; types, params System.Xaml.XamlMember[] properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.AmbientPropertyValue&gt; GetAllAmbientValues(class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlType&gt; ceilingTypes, bool searchLiveStackOnly, class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlType&gt; types, class System.Xaml.XamlMember[] properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Boolean,System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllAmbientValues (ceilingTypes As IEnumerable(Of XamlType), searchLiveStackOnly As Boolean, types As IEnumerable(Of XamlType), ParamArray properties As XamlMember()) As IEnumerable(Of AmbientPropertyValue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::Xaml::AmbientPropertyValue ^&gt; ^ GetAllAmbientValues(System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlType ^&gt; ^ ceilingTypes, bool searchLiveStackOnly, System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlType ^&gt; ^ types, ... cli::array &lt;System::Xaml::XamlMember ^&gt; ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member GetAllAmbientValues : seq&lt;System.Xaml.XamlType&gt; * bool * seq&lt;System.Xaml.XamlType&gt; * System.Xaml.XamlMember[] -&gt; seq&lt;System.Xaml.AmbientPropertyValue&gt;" Usage="iAmbientProvider.GetAllAmbientValues (ceilingTypes, searchLiveStackOnly, types, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xaml.AmbientPropertyValue&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ceilingTypes" Type="System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="searchLiveStackOnly" Type="System.Boolean" />
        <Parameter Name="types" Type="System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="properties" Type="System.Xaml.XamlMember[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ceilingTypes"><span data-ttu-id="e4830-142">指定一个或多个类型，如果在对象图中向上遍历的过程中遇到这些类型，则这些类型应停止计算。</span><span class="sxs-lookup"><span data-stu-id="e4830-142">Specifies one or more types that should stop the evaluation when they are encountered traversing upward in the object graph.</span></span> <span data-ttu-id="e4830-143">此类型包含所需的环境属性。</span><span class="sxs-lookup"><span data-stu-id="e4830-143">This type holds the desired ambient property.</span></span> <span data-ttu-id="e4830-144">可以是 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e4830-144">May be <see langword="null" />.</span></span></param>
        <param name="searchLiveStackOnly"><span data-ttu-id="e4830-145"><see langword="true" /> 则不使用已保存的上下文 ；<see langword="false" /> 则使用已保存的上下文。</span><span class="sxs-lookup"><span data-stu-id="e4830-145"><see langword="true" /> to not use a saved context; <see langword="false" /> to use a saved context.</span></span> <span data-ttu-id="e4830-146">默认为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="e4830-146">The default is <see langword="false" />.</span></span></param>
        <param name="types"><span data-ttu-id="e4830-147">指定一个或多个类型标识符对象，这些对象标识要视为环境的类型。</span><span class="sxs-lookup"><span data-stu-id="e4830-147">Specifies one or more type identifier objects that identify the types to be considered ambient.</span></span></param>
        <param name="properties"><span data-ttu-id="e4830-148">指定一个或多个属性标识符对象，这些对象标识要视为环境属性的属性。</span><span class="sxs-lookup"><span data-stu-id="e4830-148">Specifies one or more property identifier objects that identify the properties to be considered ambient.</span></span></param>
        <summary><span data-ttu-id="e4830-149">针对所请求的种类和属性集，返回环境属性信息项的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="e4830-149">Returns an enumerable set of ambient property information items for the requested set of types and properties.</span></span></summary>
        <returns><span data-ttu-id="e4830-150">针对所请求的类型和属性集的环境属性信息项的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="e4830-150">An enumerable set of ambient property information items for the requested set of types and properties.</span></span> <span data-ttu-id="e4830-151">返回的每个 <see cref="T:System.Xaml.AmbientPropertyValue" /> 的属性信息将与其中一个输入 <paramref name="types" /> 或 <paramref name="properties" /> 相匹配。</span><span class="sxs-lookup"><span data-stu-id="e4830-151">The property information for each <see cref="T:System.Xaml.AmbientPropertyValue" /> that is returned will match one of the input <paramref name="types" /> or <paramref name="properties" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4830-152">返回的每个 <xref:System.Xaml.AmbientPropertyValue> 都包含 <xref:System.Xaml.XamlMember> 标识符和属性值。</span><span class="sxs-lookup"><span data-stu-id="e4830-152">Each <xref:System.Xaml.AmbientPropertyValue> that is returned contains the <xref:System.Xaml.XamlMember> identifier and a property value.</span></span>  
  
 <span data-ttu-id="e4830-153">此特定 <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%2A> 重载可以通过树在同一阶段中搜索环境类型和环境属性。</span><span class="sxs-lookup"><span data-stu-id="e4830-153">This particular <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%2A> overload can search for ambient types and ambient properties in the same pass through a tree.</span></span> <span data-ttu-id="e4830-154">使用此重载将导致返回值中的项的顺序与 <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%28System.Collections.Generic.IEnumerable%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlMember%5B%5D%29> 或 <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%28System.Xaml.XamlType%5B%5D%29>不同。</span><span class="sxs-lookup"><span data-stu-id="e4830-154">Using this overload results in an ordering of items in the return value that is different from <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%28System.Collections.Generic.IEnumerable%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlMember%5B%5D%29> or <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%28System.Xaml.XamlType%5B%5D%29>.</span></span>  
  
 <span data-ttu-id="e4830-155">此重载还允许搜索不使用任何已保存的上下文。</span><span class="sxs-lookup"><span data-stu-id="e4830-155">This overload also permits the search to not use any saved context.</span></span> <span data-ttu-id="e4830-156"><xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%28System.Collections.Generic.IEnumerable%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlMember%5B%5D%29> 或 <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%28System.Xaml.XamlType%5B%5D%29> 重载会隐式使用已保存的上下文（如果有）（它们始终都可充当隐式 `searchLiveStackOnly` 参数 `false`）。</span><span class="sxs-lookup"><span data-stu-id="e4830-156">The <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%28System.Collections.Generic.IEnumerable%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlMember%5B%5D%29> or <xref:System.Xaml.IAmbientProvider.GetAllAmbientValues%28System.Xaml.XamlType%5B%5D%29> overloads implicitly use a saved context if it is available (they always act as if an implicit `searchLiveStackOnly` parameter is `false`).</span></span> <span data-ttu-id="e4830-157">特定 XAML 架构上下文或包含 XAML 的框架可能以不同的方式处理已保存上下文的概念。</span><span class="sxs-lookup"><span data-stu-id="e4830-157">The concept of a saved context is potentially handled differently by particular XAML schema contexts, or by frameworks that incorporate XAML.</span></span> <span data-ttu-id="e4830-158">在 WPF XAML 实现中，保存的上下文用于模板扩展以及其他功能区域。</span><span class="sxs-lookup"><span data-stu-id="e4830-158">In the WPF XAML implementation, saved contexts are used for template expansion, as well as other feature areas.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFirstAmbientValue">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="e4830-159">从请求的集合中返回单个环境类型或属性信息项，具体情况视哪个属性是遇到的第一个属性而定。</span><span class="sxs-lookup"><span data-stu-id="e4830-159">Returns a single ambient type or property information item from the requested set, based on which property is first encountered.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFirstAmbientValue">
      <MemberSignature Language="C#" Value="public object GetFirstAmbientValue (params System.Xaml.XamlType[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFirstAmbientValue(class System.Xaml.XamlType[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Xaml.XamlType[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstAmbientValue (ParamArray types As XamlType()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetFirstAmbientValue(... cli::array &lt;System::Xaml::XamlType ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetFirstAmbientValue : System.Xaml.XamlType[] -&gt; obj" Usage="iAmbientProvider.GetFirstAmbientValue types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Xaml.XamlType[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="types"><span data-ttu-id="e4830-160">要从中检索环境类型信息的类型集。</span><span class="sxs-lookup"><span data-stu-id="e4830-160">The set of types from which to retrieve ambient type information.</span></span></param>
        <summary><span data-ttu-id="e4830-161">返回第一个匹配对象，该对象是所请求类型可能的环境类型。</span><span class="sxs-lookup"><span data-stu-id="e4830-161">Returns the first matching object that is a possible ambient type for the requested types.</span></span></summary>
        <returns><span data-ttu-id="e4830-162">所请求集合的第一个结果对象。</span><span class="sxs-lookup"><span data-stu-id="e4830-162">The first result object for the requested set.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFirstAmbientValue">
      <MemberSignature Language="C#" Value="public System.Xaml.AmbientPropertyValue GetFirstAmbientValue (System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt; ceilingTypes, params System.Xaml.XamlMember[] properties);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.AmbientPropertyValue GetFirstAmbientValue(class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlType&gt; ceilingTypes, class System.Xaml.XamlMember[] properties) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstAmbientValue (ceilingTypes As IEnumerable(Of XamlType), ParamArray properties As XamlMember()) As AmbientPropertyValue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::AmbientPropertyValue ^ GetFirstAmbientValue(System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlType ^&gt; ^ ceilingTypes, ... cli::array &lt;System::Xaml::XamlMember ^&gt; ^ properties);" />
      <MemberSignature Language="F#" Value="abstract member GetFirstAmbientValue : seq&lt;System.Xaml.XamlType&gt; * System.Xaml.XamlMember[] -&gt; System.Xaml.AmbientPropertyValue" Usage="iAmbientProvider.GetFirstAmbientValue (ceilingTypes, properties)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.AmbientPropertyValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ceilingTypes" Type="System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="properties" Type="System.Xaml.XamlMember[]">
          <Attributes>
            <Attribute FrameworkAlternate="dotnet-plat-ext-5.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="ceilingTypes"><span data-ttu-id="e4830-163">指定一个或多个类型，如果在对象图中向上遍历的过程中遇到这些类型，则这些类型应停止计算。</span><span class="sxs-lookup"><span data-stu-id="e4830-163">Specifies one or more types that should stop the evaluation when they are encountered traversing upward in the object graph.</span></span> <span data-ttu-id="e4830-164">此类型包含所需的环境属性。</span><span class="sxs-lookup"><span data-stu-id="e4830-164">This type holds the desired ambient property.</span></span></param>
        <param name="properties"><span data-ttu-id="e4830-165">指定一个或多个对象，这些对象标识要视为环境属性的属性。</span><span class="sxs-lookup"><span data-stu-id="e4830-165">Specifies one or more objects that identify the properties to be considered ambient.</span></span></param>
        <summary><span data-ttu-id="e4830-166">从请求的属性集中返回单个环境属性信息项，具体情况视哪个属性是遇到的第一个属性而定。</span><span class="sxs-lookup"><span data-stu-id="e4830-166">Returns a single ambient property information item from the requested set of properties, based on which property is first encountered.</span></span></summary>
        <returns><span data-ttu-id="e4830-167">所找到的 <paramref name="properties" /> 列表中第一个环境属性值的单个环境属性信息项。</span><span class="sxs-lookup"><span data-stu-id="e4830-167">A single ambient property information item for the first ambient property value from the <paramref name="properties" /> list that is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e4830-168">返回的每个 <xref:System.Xaml.AmbientPropertyValue> 都包含 <xref:System.Xaml.XamlMember> 标识符和属性值。</span><span class="sxs-lookup"><span data-stu-id="e4830-168">Each <xref:System.Xaml.AmbientPropertyValue> that is returned contains the <xref:System.Xaml.XamlMember> identifier and a property value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
