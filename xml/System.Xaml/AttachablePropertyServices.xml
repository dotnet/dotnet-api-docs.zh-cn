<Type Name="AttachablePropertyServices" FullName="System.Xaml.AttachablePropertyServices">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7959c0d2695646baedb919e976ae8ff89ccb613f" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86692378" /></Metadata><TypeSignature Language="C#" Value="public static class AttachablePropertyServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AttachablePropertyServices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.AttachablePropertyServices" />
  <TypeSignature Language="VB.NET" Value="Public Class AttachablePropertyServices" />
  <TypeSignature Language="C++ CLI" Value="public ref class AttachablePropertyServices abstract sealed" />
  <TypeSignature Language="F#" Value="type AttachablePropertyServices = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="1f42c-101">提供一些静态帮助器方法，这些方法用于从可附加属性中获取值和访问器方法信息，并且和附加的属性存储一起工作。</span><span class="sxs-lookup"><span data-stu-id="1f42c-101">Provides static helper methods that obtain values and accessor method information from an attachable property and that work with an attached property store.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f42c-102">此类中的大多数功能依赖于附加属性存储，该存储通常实现 <xref:System.Xaml.IAttachedPropertyStore> 接口。</span><span class="sxs-lookup"><span data-stu-id="1f42c-102">Most functionality in this class relies on an attached property store, which generally implements the <xref:System.Xaml.IAttachedPropertyStore> interface.</span></span> <span data-ttu-id="1f42c-103">但是，将存储区传递到的参数 <xref:System.Xaml.AttachablePropertyServices> 不类型化为接口，而是被类型化为 `object` 。</span><span class="sxs-lookup"><span data-stu-id="1f42c-103">However, parameters for passing the store into <xref:System.Xaml.AttachablePropertyServices> are not typed as the interface and are instead typed as `object`.</span></span> <span data-ttu-id="1f42c-104">这是因为，可以传递任意对象，在这种情况下，将使用内部默认的可附加属性存储。</span><span class="sxs-lookup"><span data-stu-id="1f42c-104">This is because you can pass an arbitrary object, and in this case, an internal default attachable property store is used.</span></span>  
  
 <span data-ttu-id="1f42c-105">对于任意对象，最佳做法是传递对象，否则该对象将与存储区相关联。</span><span class="sxs-lookup"><span data-stu-id="1f42c-105">Best practice for the arbitrary object is to pass the object that would otherwise be associated with the store.</span></span> <span data-ttu-id="1f42c-106">不要传递 `null` 以指示您没有 <xref:System.Xaml.IAttachedPropertyStore> 要使用的。</span><span class="sxs-lookup"><span data-stu-id="1f42c-106">Do not pass `null` to indicate that you do not have an <xref:System.Xaml.IAttachedPropertyStore> to use.</span></span> <span data-ttu-id="1f42c-107">传递 `null` 的输入代码路径不执行任何操作。</span><span class="sxs-lookup"><span data-stu-id="1f42c-107">Passing `null` enters code paths that do nothing.</span></span> <span data-ttu-id="1f42c-108">如果传递非 null 对象，但计算结果为所 `null` 尝试的 <xref:System.Xaml.IAttachedPropertyStore> 强制转换，则使用默认的可附加属性存储。</span><span class="sxs-lookup"><span data-stu-id="1f42c-108">Passing an object that is non-null, but evaluates as `null` on an attempted <xref:System.Xaml.IAttachedPropertyStore> cast, uses the default attachable property store.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CopyPropertiesTo">
      <MemberSignature Language="C#" Value="public static void CopyPropertiesTo (object instance, System.Collections.Generic.KeyValuePair&lt;System.Xaml.AttachableMemberIdentifier,object&gt;[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyPropertiesTo(object instance, valuetype System.Collections.Generic.KeyValuePair`2&lt;class System.Xaml.AttachableMemberIdentifier, object&gt;[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.AttachablePropertyServices.CopyPropertiesTo(System.Object,System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CopyPropertiesTo (instance As Object, array As KeyValuePair(Of AttachableMemberIdentifier, Object)(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CopyPropertiesTo(System::Object ^ instance, cli::array &lt;System::Collections::Generic::KeyValuePair&lt;System::Xaml::AttachableMemberIdentifier ^, System::Object ^&gt;&gt; ^ array, int index);" />
      <MemberSignature Language="F#" Value="static member CopyPropertiesTo : obj * System.Collections.Generic.KeyValuePair&lt;System.Xaml.AttachableMemberIdentifier, obj&gt;[] * int -&gt; unit" Usage="System.Xaml.AttachablePropertyServices.CopyPropertiesTo (instance, array, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="array" Type="System.Collections.Generic.KeyValuePair&lt;System.Xaml.AttachableMemberIdentifier,System.Object&gt;[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="1f42c-109">实现 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加属性存储；或者是任意不为 null 的对象，用于访问静态默认可附加属性存储。</span><span class="sxs-lookup"><span data-stu-id="1f42c-109">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />; or any non-null object to access a static default attachable property store.</span></span></param>
        <param name="array"><span data-ttu-id="1f42c-110">目标数组。</span><span class="sxs-lookup"><span data-stu-id="1f42c-110">The destination array.</span></span> <span data-ttu-id="1f42c-111">该数组为泛型数组，应以无维度方式传递，并且应具有 <see cref="T:System.Xaml.AttachableMemberIdentifier" /> 和 <see langword="object" /> 的组件。</span><span class="sxs-lookup"><span data-stu-id="1f42c-111">The array is a generic array, should be passed undimensioned, and should have components of <see cref="T:System.Xaml.AttachableMemberIdentifier" /> and <see langword="object" />.</span></span></param>
        <param name="index"><span data-ttu-id="1f42c-112">要在该处进行复制的源索引。</span><span class="sxs-lookup"><span data-stu-id="1f42c-112">The source index into which to copy.</span></span></param>
        <summary><span data-ttu-id="1f42c-113">从指定的可附加属性存储中复制所有可附加属性/值对，并将它们复制到目标数组中。</span><span class="sxs-lookup"><span data-stu-id="1f42c-113">Copies all attachable property/value pairs from a specified attachable property store and into a destination array.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f42c-114">调用此方法将调用一个 <xref:System.Collections.Generic.ICollection%601.CopyTo%2A> 键/值对所约束的基础实现，这可能是本主题中未列出的异常的源。</span><span class="sxs-lookup"><span data-stu-id="1f42c-114">Calling this method invokes an underlying <xref:System.Collections.Generic.ICollection%601.CopyTo%2A> implementation that is constrained with a key/value pair, which might be the source of exceptions that are not listed in this topic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachedPropertyCount">
      <MemberSignature Language="C#" Value="public static int GetAttachedPropertyCount (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetAttachedPropertyCount(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.AttachablePropertyServices.GetAttachedPropertyCount(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAttachedPropertyCount (instance As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int GetAttachedPropertyCount(System::Object ^ instance);" />
      <MemberSignature Language="F#" Value="static member GetAttachedPropertyCount : obj -&gt; int" Usage="System.Xaml.AttachablePropertyServices.GetAttachedPropertyCount instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="1f42c-115">实现 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加属性存储；或者是任意不为 null 的对象，用于访问静态默认可附加属性存储。</span><span class="sxs-lookup"><span data-stu-id="1f42c-115">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />; or any non-null object to access a static default attachable property store.</span></span></param>
        <summary><span data-ttu-id="1f42c-116">返回指定存储中可附加属性条目的计数。</span><span class="sxs-lookup"><span data-stu-id="1f42c-116">Returns the count of the attachable property entries that are in the specified store.</span></span></summary>
        <returns><span data-ttu-id="1f42c-117">存储中条目的整数计数。</span><span class="sxs-lookup"><span data-stu-id="1f42c-117">The integer count of entries in the store.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveProperty">
      <MemberSignature Language="C#" Value="public static bool RemoveProperty (object instance, System.Xaml.AttachableMemberIdentifier name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RemoveProperty(object instance, class System.Xaml.AttachableMemberIdentifier name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.AttachablePropertyServices.RemoveProperty(System.Object,System.Xaml.AttachableMemberIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RemoveProperty (instance As Object, name As AttachableMemberIdentifier) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool RemoveProperty(System::Object ^ instance, System::Xaml::AttachableMemberIdentifier ^ name);" />
      <MemberSignature Language="F#" Value="static member RemoveProperty : obj * System.Xaml.AttachableMemberIdentifier -&gt; bool" Usage="System.Xaml.AttachablePropertyServices.RemoveProperty (instance, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="name" Type="System.Xaml.AttachableMemberIdentifier" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="1f42c-118">实现 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加属性存储；或者是任意不为 null 的对象，用于访问静态默认可附加属性存储。</span><span class="sxs-lookup"><span data-stu-id="1f42c-118">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />; or any non-null object to access a static default attachable property store.</span></span></param>
        <param name="name"><span data-ttu-id="1f42c-119">要从存储区中移除的可附加属性条目的标识符。</span><span class="sxs-lookup"><span data-stu-id="1f42c-119">The identifier for the attachable property entry to remove from the store.</span></span></param>
        <summary><span data-ttu-id="1f42c-120">从指定存储中移除指定可附加属性的条目。</span><span class="sxs-lookup"><span data-stu-id="1f42c-120">Removes the entry for the specified attachable property from the specified store.</span></span></summary>
        <returns><span data-ttu-id="1f42c-121">如果在存储区中找到了 <paramref name="name" /> 的可附加属性条目并已将其从中移除，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1f42c-121"><see langword="true" /> if an attachable property entry for <paramref name="name" /> was found in the store and removed from it; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1f42c-122">存储为每个实例;因此，在存储区中， `name` 该值应该是明确的。</span><span class="sxs-lookup"><span data-stu-id="1f42c-122">Stores are per instance; therefore, in a store, the `name` value should be unambiguous.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetProperty">
      <MemberSignature Language="C#" Value="public static void SetProperty (object instance, System.Xaml.AttachableMemberIdentifier name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetProperty(object instance, class System.Xaml.AttachableMemberIdentifier name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.AttachablePropertyServices.SetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetProperty (instance As Object, name As AttachableMemberIdentifier, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetProperty(System::Object ^ instance, System::Xaml::AttachableMemberIdentifier ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="static member SetProperty : obj * System.Xaml.AttachableMemberIdentifier * obj -&gt; unit" Usage="System.Xaml.AttachablePropertyServices.SetProperty (instance, name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="name" Type="System.Xaml.AttachableMemberIdentifier" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="1f42c-123">一个实现 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加属性存储，或者为任何不可为 null 的对象以使用静态默认可附加属性存储。</span><span class="sxs-lookup"><span data-stu-id="1f42c-123">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />; or any non-null object to use a static default attachable property store.</span></span></param>
        <param name="name"><span data-ttu-id="1f42c-124">要为其设置值的可附加属性条目的标识符。</span><span class="sxs-lookup"><span data-stu-id="1f42c-124">The identifier of the attachable property entry for which to set a value.</span></span></param>
        <param name="value"><span data-ttu-id="1f42c-125">要设置的值。</span><span class="sxs-lookup"><span data-stu-id="1f42c-125">The value to set.</span></span></param>
        <summary><span data-ttu-id="1f42c-126">设置指定存储中的指定可附加属性的值。</span><span class="sxs-lookup"><span data-stu-id="1f42c-126">Sets a value for the specified attachable property in the specified store.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="1f42c-127">未能在存储中设置值。</span><span class="sxs-lookup"><span data-stu-id="1f42c-127">A value could not be set in the store.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="1f42c-128"><paramref name="name" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="1f42c-128"><paramref name="name" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetProperty">
      <MemberSignature Language="C#" Value="public static bool TryGetProperty (object instance, System.Xaml.AttachableMemberIdentifier name, out object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetProperty(object instance, class System.Xaml.AttachableMemberIdentifier name, [out] object&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.AttachablePropertyServices.TryGetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetProperty (instance As Object, name As AttachableMemberIdentifier, ByRef value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetProperty(System::Object ^ instance, System::Xaml::AttachableMemberIdentifier ^ name, [Runtime::InteropServices::Out] System::Object ^ % value);" />
      <MemberSignature Language="F#" Value="static member TryGetProperty : obj * System.Xaml.AttachableMemberIdentifier * obj -&gt; bool" Usage="System.Xaml.AttachablePropertyServices.TryGetProperty (instance, name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="name" Type="System.Xaml.AttachableMemberIdentifier" />
        <Parameter Name="value" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="instance"><span data-ttu-id="1f42c-129">一个实现 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加属性存储，或者为任何不可为 null 的对象以使用静态默认可附加属性存储。</span><span class="sxs-lookup"><span data-stu-id="1f42c-129">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />; or any non-null object to use a static default attachable property store.</span></span></param>
        <param name="name"><span data-ttu-id="1f42c-130">要为其获取值的可附加属性条目的标识符。</span><span class="sxs-lookup"><span data-stu-id="1f42c-130">The identifier of the attachable property entry for which to get a value.</span></span></param>
        <param name="value"><span data-ttu-id="1f42c-131">输出参数。</span><span class="sxs-lookup"><span data-stu-id="1f42c-131">Out parameter.</span></span> <span data-ttu-id="1f42c-132">当此方法返回时，如果 <paramref name="name" /> 存在于存储中并且具有值，则会包含值的目标对象。</span><span class="sxs-lookup"><span data-stu-id="1f42c-132">When this method returns, contains the destination object for the value if <paramref name="name" /> exists in the store and has a value.</span></span></param>
        <summary><span data-ttu-id="1f42c-133">尝试获取指定存储中的指定可附加属性的值。</span><span class="sxs-lookup"><span data-stu-id="1f42c-133">Attempts to get a value for the specified attachable property in the specified store.</span></span> <span data-ttu-id="1f42c-134">如果特定可附加属性在存储中不存在，将不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1f42c-134">Does not throw an exception if the specific attachable property does not exist in the store.</span></span></summary>
        <returns><span data-ttu-id="1f42c-135">如果在存储中找到了 <paramref name="name" /> 的可附加属性条目，并且值已传递到 <paramref name="value" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1f42c-135"><see langword="true" /> if an attachable property entry for <paramref name="name" /> was found in the store and a value was posted to <paramref name="value" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetProperty&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetProperty&lt;T&gt; (object instance, System.Xaml.AttachableMemberIdentifier name, out T value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetProperty&lt;T&gt;(object instance, class System.Xaml.AttachableMemberIdentifier name, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.AttachablePropertyServices.TryGetProperty``1(System.Object,System.Xaml.AttachableMemberIdentifier,``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetProperty(Of T) (instance As Object, name As AttachableMemberIdentifier, ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryGetProperty(System::Object ^ instance, System::Xaml::AttachableMemberIdentifier ^ name, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryGetProperty : obj * System.Xaml.AttachableMemberIdentifier * 'T -&gt; bool" Usage="System.Xaml.AttachablePropertyServices.TryGetProperty (instance, name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="name" Type="System.Xaml.AttachableMemberIdentifier" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="1f42c-136">预期的输出类型。</span><span class="sxs-lookup"><span data-stu-id="1f42c-136">The expected type of the output.</span></span></typeparam>
        <param name="instance"><span data-ttu-id="1f42c-137">实现 <see cref="T:System.Xaml.IAttachedPropertyStore" /> 的特定可附加属性存储；或者是任意不为 null 的对象，用于访问静态默认可附加属性存储。</span><span class="sxs-lookup"><span data-stu-id="1f42c-137">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />; or any non-null object to access a static default attachable property store.</span></span></param>
        <param name="name"><span data-ttu-id="1f42c-138">要为其获取值的可附加属性条目的标识符。</span><span class="sxs-lookup"><span data-stu-id="1f42c-138">The identifier of the attachable property entry for which to get a value.</span></span></param>
        <param name="value"><span data-ttu-id="1f42c-139">输出参数。</span><span class="sxs-lookup"><span data-stu-id="1f42c-139">Out parameter.</span></span> <span data-ttu-id="1f42c-140">当此方法返回时，如果 <paramref name="name" /> 存在于存储中并且具有值，则会包含值的目标对象。</span><span class="sxs-lookup"><span data-stu-id="1f42c-140">When this method returns, contains the destination object for the value if <paramref name="name" /> exists in the store and has a value.</span></span></param>
        <summary><span data-ttu-id="1f42c-141">尝试获取指定存储中的指定可附加属性的值，返回泛型输出形式。</span><span class="sxs-lookup"><span data-stu-id="1f42c-141">Attempts to get a value for the specified attachable property in the specified store, returning a generic output form.</span></span> <span data-ttu-id="1f42c-142">如果特定可附加属性在存储中不存在，将不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="1f42c-142">Does not throw an exception if the specific attachable property does not exist in the store.</span></span></summary>
        <returns><span data-ttu-id="1f42c-143">如果在存储中找到了 <paramref name="name" /> 的可附加属性条目，并且值已传递到 <paramref name="value" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="1f42c-143"><see langword="true" /> if an attachable property entry for <paramref name="name" /> was found in the store and a value was posted to <paramref name="value" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
