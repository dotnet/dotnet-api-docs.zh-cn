<Type Name="XamlType" FullName="System.Xaml.XamlType">
  <Metadata><Meta Name="ms.openlocfilehash" Value="71fe6c46af1937889aa265860ef9a4011d590f01" /><Meta Name="ms.sourcegitcommit" Value="45d7745d094b38af5ccba8a4ca47efe84a312ef0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/27/2020" /><Meta Name="ms.locfileid" Value="92686161" /></Metadata><TypeSignature Language="C#" Value="public class XamlType : IEquatable&lt;System.Xaml.XamlType&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlType extends System.Object implements class System.IEquatable`1&lt;class System.Xaml.XamlType&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlType" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlType&#xA;Implements IEquatable(Of XamlType)" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlType : IEquatable&lt;System::Xaml::XamlType ^&gt;" />
  <TypeSignature Language="F#" Value="type XamlType = class&#xA;    interface IEquatable&lt;XamlType&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xaml.XamlType&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="08b78-101">报告作为整体 XAML 系统（在 .NET XAML 服务中实现）的一部分的 XAML 类型相关信息。</span><span class="sxs-lookup"><span data-stu-id="08b78-101">Reports information about XAML types as part of the overall XAML system that is implemented in .NET XAML Services.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-102">类中的很多 Api <xref:System.Xaml.XamlType> 提供有关 xaml 类型的信息，其中所报告的概念类似于 xaml 规范 [ms-chap] 的特定部分。</span><span class="sxs-lookup"><span data-stu-id="08b78-102">Many APIs in the <xref:System.Xaml.XamlType> class provide information about XAML types, where the concept they report on is similar to particular sections of the XAML specification [MS-XAML].</span></span>  
  
 <span data-ttu-id="08b78-103"><xref:System.Xaml.XamlType> 广泛用于 .NET Framework XAML 服务 API，用于报告有关 XAML 类型的信息。</span><span class="sxs-lookup"><span data-stu-id="08b78-103"><xref:System.Xaml.XamlType> is used extensively in the .NET Framework XAML Services API for reporting information about a XAML type.</span></span> <span data-ttu-id="08b78-104"><xref:System.Xaml.XamlType> 报告您需要了解的有关 XAML 类型的信息，以便使用实例或从 XAML 节点流中访问其成员或类似的 XAML 表示形式。</span><span class="sxs-lookup"><span data-stu-id="08b78-104"><xref:System.Xaml.XamlType> reports the information that you might need to know about a XAML type in order to work with an instance or to access its members from a XAML node stream, or a similar XAML representation.</span></span> <span data-ttu-id="08b78-105">它的报告类似于 <xref:System.Type> clr 类型系统中与反射类（如 <xref:System.Reflection.MemberInfo> ）一起提供有关 CLR 类型及其用法的信息。</span><span class="sxs-lookup"><span data-stu-id="08b78-105">Its reporting is similar to how the <xref:System.Type> in the CLR type system, together with reflection classes such as <xref:System.Reflection.MemberInfo>, provide information about a CLR type and its usage.</span></span>  
  
 <span data-ttu-id="08b78-106">若要扩展 XAML 类型系统，可以从派生 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-106">To extend the XAML type system, you can derive from <xref:System.Xaml.XamlType>.</span></span> <span data-ttu-id="08b78-107">为了有效地执行此操作，你可能还需要实现 <xref:System.Xaml.Schema.XamlTypeInvoker> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-107">To do so effectively, you might also need to implement a <xref:System.Xaml.Schema.XamlTypeInvoker>.</span></span> <span data-ttu-id="08b78-108"><xref:System.Xaml.Schema.XamlTypeInvoker>使通用化 XAML 类型系统能够处理你在调用行为中指定的类型系统支持。</span><span class="sxs-lookup"><span data-stu-id="08b78-108">The <xref:System.Xaml.Schema.XamlTypeInvoker> enables the generalized XAML type system to work with the type system backing that you specify as part of the invocation behavior.</span></span> <span data-ttu-id="08b78-109">特定自定义 <xref:System.Xaml.Schema.XamlTypeInvoker> 提供了一种方法来减少 CLR 类型系统上的依赖项，这些依赖项由默认 <xref:System.Xaml.XamlType> 行为使用。</span><span class="sxs-lookup"><span data-stu-id="08b78-109">The specific custom <xref:System.Xaml.Schema.XamlTypeInvoker> provides a way to reduce the dependencies on the CLR type system, which are used by the default <xref:System.Xaml.XamlType> behavior.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="08b78-110">初始化 <see cref="T:System.Xaml.XamlType" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="08b78-110">Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type underlyingType, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (underlyingType As Type, schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlType(Type ^ underlyingType, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlType : Type * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlType" Usage="new System.Xaml.XamlType (underlyingType, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="underlyingType" Type="System.Type" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="underlyingType"><span data-ttu-id="08b78-111">要构造的 XAML 类型的基础 CLR <see cref="T:System.Type" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-111">The underlying CLR <see cref="T:System.Type" /> for the XAML type to construct.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="08b78-112">XAML 读取器或 XAML 编写器的 XAML 架构上下文。</span><span class="sxs-lookup"><span data-stu-id="08b78-112">XAML schema context for XAML readers or XAML writers.</span></span></param>
        <summary><span data-ttu-id="08b78-113">基于基础 CLR 类型信息初始化 <see cref="T:System.Xaml.XamlType" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="08b78-113">Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class based on the underlying CLR type information.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="08b78-114">一个或多个 <paramref name="underlyingType" /> 或 <paramref name="schemaContext" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-114">One or more of <paramref name="underlyingType" /> or <paramref name="schemaContext" /> are <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlType (string typeName, System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; typeArguments, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string typeName, class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; typeArguments, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (typeName As String, typeArguments As IList(Of XamlType), schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlType(System::String ^ typeName, System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ typeArguments, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlType : string * System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlType" Usage="new System.Xaml.XamlType (typeName, typeArguments, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="typeName"><span data-ttu-id="08b78-115">要创建的类型的名称。</span><span class="sxs-lookup"><span data-stu-id="08b78-115">The name of the type to create.</span></span></param>
        <param name="typeArguments"><span data-ttu-id="08b78-116">用于表示泛型类型的 <see cref="T:System.Xaml.XamlType" /> 的类型参数。</span><span class="sxs-lookup"><span data-stu-id="08b78-116">The type arguments for a <see cref="T:System.Xaml.XamlType" /> that represents a generic type.</span></span> <span data-ttu-id="08b78-117">可能为（并且通常为） <see langword="null" />，指示表示的类型不是泛型类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-117">Can be (and often is) <see langword="null" />, which indicates that the represented type is not a generic type.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="08b78-118">XAML 读取器和 XAML 编写器的 XAML 架构上下文。</span><span class="sxs-lookup"><span data-stu-id="08b78-118">XAML schema context for XAML readers and XAML writers.</span></span></param>
        <summary><span data-ttu-id="08b78-119">基于类型的字符串名称初始化 <see cref="T:System.Xaml.XamlType" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="08b78-119">Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class based on a string name for the type.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-120">这是一个受保护的构造函数。</span><span class="sxs-lookup"><span data-stu-id="08b78-120">This is a protected constructor.</span></span> <span data-ttu-id="08b78-121">不存在使用此特定构造的公共派生类。</span><span class="sxs-lookup"><span data-stu-id="08b78-121">No current public derived classes exist that use this particular path for construction.</span></span> <span data-ttu-id="08b78-122">作为现有的使用者 <xref:System.Xaml.XamlType> ，必须使用其他构造函数签名 (<xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29> 、 <xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29> 或 <xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29>) 才能初始化 <xref:System.Xaml.XamlType> 对象。</span><span class="sxs-lookup"><span data-stu-id="08b78-122">As a consumer of the existing <xref:System.Xaml.XamlType>, you must use the other constructor signatures (<xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%2CSystem.Xaml.Schema.XamlTypeInvoker%29>, <xref:System.Xaml.XamlType.%23ctor%28System.Type%2CSystem.Xaml.XamlSchemaContext%29>, or <xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29>) to initialize a <xref:System.Xaml.XamlType> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="08b78-123">一个或多个 <paramref name="typeName" /> 或 <paramref name="schemaContext" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-123">One or more of <paramref name="typeName" /> or <paramref name="schemaContext" /> are <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlType (Type underlyingType, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlTypeInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type underlyingType, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlTypeInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (underlyingType As Type, schemaContext As XamlSchemaContext, invoker As XamlTypeInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlType(Type ^ underlyingType, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlTypeInvoker ^ invoker);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlType : Type * System.Xaml.XamlSchemaContext * System.Xaml.Schema.XamlTypeInvoker -&gt; System.Xaml.XamlType" Usage="new System.Xaml.XamlType (underlyingType, schemaContext, invoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="underlyingType" Type="System.Type" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlTypeInvoker" />
      </Parameters>
      <Docs>
        <param name="underlyingType"><span data-ttu-id="08b78-124">要构造的 XAML 类型的基础类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-124">The underlying type for the XAML type to construct.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="08b78-125">XAML 读取器的 XAML 架构上下文。</span><span class="sxs-lookup"><span data-stu-id="08b78-125">XAML schema context for the XAML reader.</span></span></param>
        <param name="invoker"><span data-ttu-id="08b78-126">可针对 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 处理运行时反射调用的 <see cref="T:System.Xaml.XamlType" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="08b78-126">The <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> implementation that handles run-time reflection calls against the <see cref="T:System.Xaml.XamlType" />.</span></span></param>
        <summary><span data-ttu-id="08b78-127">基于基础类型信息和 <see cref="T:System.Xaml.XamlType" /> 实现初始化 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="08b78-127">Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class based on underlying type information and a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> implementation.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="08b78-128">一个或多个 <paramref name="underlyingType" /> 或 <paramref name="schemaContext" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-128">One or more of <paramref name="underlyingType" /> or <paramref name="schemaContext" /> are <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlType (string unknownTypeNamespace, string unknownTypeName, System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; typeArguments, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string unknownTypeNamespace, string unknownTypeName, class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; typeArguments, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (unknownTypeNamespace As String, unknownTypeName As String, typeArguments As IList(Of XamlType), schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlType(System::String ^ unknownTypeNamespace, System::String ^ unknownTypeName, System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ typeArguments, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlType : string * string * System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlType" Usage="new System.Xaml.XamlType (unknownTypeNamespace, unknownTypeName, typeArguments, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="unknownTypeNamespace" Type="System.String" />
        <Parameter Name="unknownTypeName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="unknownTypeNamespace"><span data-ttu-id="08b78-129">类型的 XAML 命名空间（字符串形式）。</span><span class="sxs-lookup"><span data-stu-id="08b78-129">The XAML namespace for the type, as a string.</span></span></param>
        <param name="unknownTypeName"><span data-ttu-id="08b78-130">提供的 <paramref name="unknownTypeNamespace" /> XAML 命名空间中类型的名称。</span><span class="sxs-lookup"><span data-stu-id="08b78-130">The name of the type in the provided <paramref name="unknownTypeNamespace" /> XAML namespace.</span></span></param>
        <param name="typeArguments"><span data-ttu-id="08b78-131">用于表示泛型类型的 <see cref="T:System.Xaml.XamlType" /> 的类型参数。</span><span class="sxs-lookup"><span data-stu-id="08b78-131">The type arguments for a <see cref="T:System.Xaml.XamlType" /> that represents a generic type.</span></span> <span data-ttu-id="08b78-132">可能为（并且通常为） <see langword="null" />，指示表示的类型不是泛型类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-132">Can be (and often is) <see langword="null" />, which indicates that the represented type is not a generic type.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="08b78-133">XAML 读取器或 XAML 编写器的 XAML 架构上下文。</span><span class="sxs-lookup"><span data-stu-id="08b78-133">XAML schema context for XAML readers or XAML writers.</span></span></param>
        <summary><span data-ttu-id="08b78-134">基于 XAML 命名空间和类型的字符串名称初始化 <see cref="T:System.Xaml.XamlType" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="08b78-134">Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class based on the XAML namespace and a string name for the type.</span></span> <span data-ttu-id="08b78-135">此构造函数专用于已知在支持类型系统和 XAML 架构上下文中，没有支持的类型用法的分析和 XAML 节点记录。</span><span class="sxs-lookup"><span data-stu-id="08b78-135">This constructor is exclusively for analysis and XAML-node recording of type usages that are known to not have backing in the supporting type system and XAML schema context.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-136">仅将此构造函数用于映射到基础类型系统的 XAML 类型不可用的 "未知" 类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-136">Use this constructor only for "unknown" types where a XAML type that maps to an underlying type system is unavailable.</span></span> <span data-ttu-id="08b78-137">如果为，则此构造函数可能不会生成结果 <xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=nameWithType> `true` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-137">This constructor might not produce a result where <xref:System.Xaml.XamlType.IsUnknown%2A?displayProperty=nameWithType> is `true`.</span></span> <span data-ttu-id="08b78-138">相反，默认反射器逻辑将基础类型报告为 <xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-138">Instead, the default reflector logic reports the underlying type as <xref:System.Xaml.XamlLanguage.Object%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="08b78-139">但是，此行为可能会因 <xref:System.Xaml.XamlType.LookupIsUnknown%2A> 重写而更改。</span><span class="sxs-lookup"><span data-stu-id="08b78-139">However, this behavior can change because of the <xref:System.Xaml.XamlType.LookupIsUnknown%2A> override.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="08b78-140">一个或多个 <paramref name="unknownTypeNamespace" />、<paramref name="unknownTypeName" /> 或 <paramref name="schemaContext" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-140">One or more of <paramref name="unknownTypeNamespace" />, <paramref name="unknownTypeName" />, or <paramref name="schemaContext" /> are <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AllowedContentTypes">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; AllowedContentTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; AllowedContentTypes" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.AllowedContentTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AllowedContentTypes As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ AllowedContentTypes { System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowedContentTypes : System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="System.Xaml.XamlType.AllowedContentTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-141">获取类型的只读集合，这些类型可用作此 <see cref="P:System.Xaml.XamlType.ContentProperty" /> 的 <see cref="T:System.Xaml.XamlType" /> 值。</span><span class="sxs-lookup"><span data-stu-id="08b78-141">Gets a read-only collection of the types that are usable as the <see cref="P:System.Xaml.XamlType.ContentProperty" /> value for this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <value><span data-ttu-id="08b78-142">可能的内容类型的只读集合。</span><span class="sxs-lookup"><span data-stu-id="08b78-142">A read-only collection of possible content types.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-143">可分配特定内容类型的类型 (例如，可分配给作为允许内容类型的基类型，而不会将其视为) 的多个类型 <xref:System.Xaml.XamlType.AllowedContentTypes%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-143">Types that are assignable a specific content type (for example, assignable to a base type that is an allowed content type) are not considered multiple types for purposes of <xref:System.Xaml.XamlType.AllowedContentTypes%2A>.</span></span>  
  
 <span data-ttu-id="08b78-144">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-144">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupAllowedContentTypes%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ BaseType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : System.Xaml.XamlType" Usage="System.Xaml.XamlType.BaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-145">获取此 XAML 类型的直接基类型的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-145">Gets the <see cref="T:System.Xaml.XamlType" /> for the immediate base type of this XAML type.</span></span> <span data-ttu-id="08b78-146">将基于此 <see cref="T:System.Xaml.XamlType" /> 的基础类型和架构上下文来确定此值。</span><span class="sxs-lookup"><span data-stu-id="08b78-146">Determination of this value is based on the underlying type of this <see cref="T:System.Xaml.XamlType" /> and schema context.</span></span></summary>
        <value><span data-ttu-id="08b78-147">此 XAML 类型的直接基类型的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-147">The <see cref="T:System.Xaml.XamlType" /> for the immediate base type of this XAML type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-148">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupBaseType%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-148">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupBaseType%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-149">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupBaseType%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-149">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupBaseType%2A> on this type.</span></span> <span data-ttu-id="08b78-150">默认情况下， <xref:System.Xaml.XamlType.BaseType%2A> 如果为，则返回表示的内部常数 <xref:System.Object> <xref:System.Xaml.XamlType.UnderlyingType%2A> `null` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-150">By default, <xref:System.Xaml.XamlType.BaseType%2A> returns an internal constant that represents an <xref:System.Object> if <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="08b78-151"><xref:System.Xaml.XamlType.LookupBaseType%2A> 是虚拟的，因此可以重写。</span><span class="sxs-lookup"><span data-stu-id="08b78-151"><xref:System.Xaml.XamlType.LookupBaseType%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="08b78-152">重写有可能 (出于恶意目的，或者) 更改有关 XAML 类型的报告类型信息，使其不再以预期方式与其基础 CLR 类型的类型系统信息对齐。</span><span class="sxs-lookup"><span data-stu-id="08b78-152">The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type.</span></span> <span data-ttu-id="08b78-153">对于分配操作和访问的任何安全关键检查，请改用基础 CLR 类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-153">For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAssignTo">
      <MemberSignature Language="C#" Value="public virtual bool CanAssignTo (System.Xaml.XamlType xamlType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanAssignTo(class System.Xaml.XamlType xamlType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanAssignTo (xamlType As XamlType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanAssignTo(System::Xaml::XamlType ^ xamlType);" />
      <MemberSignature Language="F#" Value="abstract member CanAssignTo : System.Xaml.XamlType -&gt; bool&#xA;override this.CanAssignTo : System.Xaml.XamlType -&gt; bool" Usage="xamlType.CanAssignTo xamlType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType"><span data-ttu-id="08b78-154">要针对当前的 <see cref="T:System.Xaml.XamlType" /> 检查的类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-154">The type to check against the current <see cref="T:System.Xaml.XamlType" /> .</span></span></param>
        <summary><span data-ttu-id="08b78-155">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 的实例在其可分配类型的列表中是否有指定的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-155">Returns a value that indicates whether an instance of this <see cref="T:System.Xaml.XamlType" /> has the specified <see cref="T:System.Xaml.XamlType" /> in its list of assignable types.</span></span></summary>
        <returns><span data-ttu-id="08b78-156">如果 <paramref name="xamlType" /> 在可分配的类型列表中，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-156"><see langword="true" /> if <paramref name="xamlType" /> is in the assignable types list; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-157">尽管可赋值类型不具有引用类型的所有功能，但你可以将其用于赋值。</span><span class="sxs-lookup"><span data-stu-id="08b78-157">Although the assignable type does not have all the capabilities of the reference type, you can use it for assignment.</span></span> <span data-ttu-id="08b78-158">例如，你可以使用赋值使类型与属性的值相匹配。</span><span class="sxs-lookup"><span data-stu-id="08b78-158">For example, you can use assignment to make type matches for the values of a property.</span></span> <span data-ttu-id="08b78-159">XAML 中可赋值类型的概念与 CLR 类型系统中强制转换的概念类似。</span><span class="sxs-lookup"><span data-stu-id="08b78-159">The concept of assignable types in XAML is similar to the concept of casting up in the CLR type system.</span></span> <span data-ttu-id="08b78-160">例如，在 CLR 类型系统下，每个类型 <xref:System.Object> 在其可赋值的类型列表中都有一个。</span><span class="sxs-lookup"><span data-stu-id="08b78-160">For example, under a CLR type system, every type has an <xref:System.Object> in its assignable type list.</span></span>  
  
 <span data-ttu-id="08b78-161">如果用于比较的两个 <xref:System.Xaml.XamlType> 实例中有一个 <xref:System.Xaml.XamlType.IsUnknown%2A> 与相等，则 `true` 此方法具有特殊的未知模式， `true` 如果两个 <xref:System.Xaml.XamlType> 实例是等效的，则返回。</span><span class="sxs-lookup"><span data-stu-id="08b78-161">If one of the two <xref:System.Xaml.XamlType> instances that are used for comparison has <xref:System.Xaml.XamlType.IsUnknown%2A> equal to `true`, this method has a special Unknown mode that returns `true` if the two <xref:System.Xaml.XamlType> instances are equivalent.</span></span>  
  
 <span data-ttu-id="08b78-162">默认实现使用的 CLR <xref:System.Type> <xref:System.Xaml.XamlType.UnderlyingType%2A> 作为此 <xref:System.Xaml.XamlType> 和输入 <xref:System.Xaml.XamlType> ，然后调用 <xref:System.Type.IsAssignableFrom%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-162">The default implementation uses the CLR <xref:System.Type> from <xref:System.Xaml.XamlType.UnderlyingType%2A> for this <xref:System.Xaml.XamlType> and the input <xref:System.Xaml.XamlType>, and calls <xref:System.Type.IsAssignableFrom%2A>.</span></span> <span data-ttu-id="08b78-163">如果需要对可分配类型进行不同的确定，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-163">Override this method if you want a different determination of assignable types.</span></span>  
  
 <span data-ttu-id="08b78-164">传递 null 不 `xamlType` 会引发异常，而总是返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-164">Passing a null `xamlType` does not throw an exception and always returns `false`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="08b78-165"><xref:System.Xaml.XamlType.CanAssignTo%2A> 是虚拟的，因此可以重写。</span><span class="sxs-lookup"><span data-stu-id="08b78-165"><xref:System.Xaml.XamlType.CanAssignTo%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="08b78-166">重写有可能 (出于恶意目的，或者) 更改 XAML 类型的依据，以使其不再以预期方式与其基础 CLR 类型的类型转换行为对齐。</span><span class="sxs-lookup"><span data-stu-id="08b78-166">The override has the potential (whether for malicious purposes or otherwise) to change the assignability of a XAML type so that it no longer aligns in an expected way with the type-casting behavior of its underlying CLR type.</span></span> <span data-ttu-id="08b78-167">对于分配操作和访问的任何安全关键检查，请改用基础 CLR 类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-167">For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstructionRequiresArguments">
      <MemberSignature Language="C#" Value="public bool ConstructionRequiresArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ConstructionRequiresArguments" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ConstructionRequiresArguments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ConstructionRequiresArguments As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ConstructionRequiresArguments { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ConstructionRequiresArguments : bool" Usage="System.Xaml.XamlType.ConstructionRequiresArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-168">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否必须具有参数（通过 <see langword="x:TypeArguments" /> 实现的泛型约束、初始化文本或其他 XAML 技术）才能构造有效的类型实例。</span><span class="sxs-lookup"><span data-stu-id="08b78-168">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> must have arguments (generic constraints through <see langword="x:TypeArguments" />, initialization text, or other XAML techniques) to construct a valid instance of the type.</span></span></summary>
        <value><span data-ttu-id="08b78-169">如果需要某个参数值才能构造实例，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-169"><see langword="true" /> if construction of an instance requires some argument value; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-170">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-170">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-171">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-171">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupConstructionRequiresArguments%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentProperty">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember ContentProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlMember ContentProperty" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ContentProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContentProperty As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlMember ^ ContentProperty { System::Xaml::XamlMember ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContentProperty : System.Xaml.XamlMember" Usage="System.Xaml.XamlType.ContentProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-172">获取此 <see cref="T:System.Xaml.XamlMember" /> 的内容属性的 <see cref="T:System.Xaml.XamlType" /> 信息。</span><span class="sxs-lookup"><span data-stu-id="08b78-172">Gets the <see cref="T:System.Xaml.XamlMember" /> information for the content property of this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <value><span data-ttu-id="08b78-173">此 <see cref="T:System.Xaml.XamlMember" /> 的内容属性的 <see cref="T:System.Xaml.XamlType" /> 信息。</span><span class="sxs-lookup"><span data-stu-id="08b78-173"><see cref="T:System.Xaml.XamlMember" /> information for the content property of this <see cref="T:System.Xaml.XamlType" />.</span></span> <span data-ttu-id="08b78-174">如果不存在内容属性，则可能为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-174">May be <see langword="null" /> if no content property exists.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-175">使用 CLR 类型系统的绑定或支持时，可以通过将应用到类型定义来指定类型的 XAML 内容属性 <xref:System.Windows.Markup.ContentPropertyAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-175">When using the binding or backing of the CLR type system, the XAML content property can be specified on a type by applying <xref:System.Windows.Markup.ContentPropertyAttribute> to the type definition.</span></span>  
  
 <span data-ttu-id="08b78-176">此属性与 `[content property]` [ms-chap] 规范中的信息项对齐。</span><span class="sxs-lookup"><span data-stu-id="08b78-176">This property aligns to the `[content property]` information item in the [MS-XAML] specification.</span></span>  
  
 <span data-ttu-id="08b78-177">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupContentProperty%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-177">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupContentProperty%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-178">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupContentProperty%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-178">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupContentProperty%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentWrappers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; ContentWrappers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; ContentWrappers" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ContentWrappers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContentWrappers As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ ContentWrappers { System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContentWrappers : System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="System.Xaml.XamlType.ContentWrappers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-179">获取用于在内容属性不是严格类型匹配时包装其内容的类型，例如强类型 <see langword="Collection&lt;T&gt;" /> 中的字符串。</span><span class="sxs-lookup"><span data-stu-id="08b78-179">Gets the types that are used to wrap content for a content property when it is not a strict type match, such as strings in a strongly typed <see langword="Collection&lt;T&gt;" />.</span></span></summary>
        <value><span data-ttu-id="08b78-180">可能的内容包装类型的只读集合；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-180">A read-only collection of possible content wrapper types; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-181">如果没有要为类型匹配放宽考虑的包装，则此属性为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-181">If there are no wrappers to account for type match loosening, this property is `null`.</span></span>  
  
 <span data-ttu-id="08b78-182">针对 <xref:System.Xaml.XamlType.CanAssignTo%2A> 特定内容类型计算为的类型不会被视为用于的多个类型 <xref:System.Xaml.XamlType.ContentWrappers%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-182">Types that evaluate as <xref:System.Xaml.XamlType.CanAssignTo%2A> for a specific content type are not considered multiple types for purposes of <xref:System.Xaml.XamlType.ContentWrappers%2A>.</span></span>  
  
 <span data-ttu-id="08b78-183">在和的 CLR 绑定 <xref:System.Xaml> 中 <xref:System.Xaml.XamlType> ，可以在类型上将 XAML 内容包装类型指定为 <xref:System.Windows.Markup.ContentWrapperAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-183">In the CLR binding for <xref:System.Xaml> and <xref:System.Xaml.XamlType>, the XAML content wrapper type can be specified on a type as a <xref:System.Windows.Markup.ContentWrapperAttribute>.</span></span>  
  
 <span data-ttu-id="08b78-184">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupContentWrappers%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-184">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupContentWrappers%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-185">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupContentWrappers%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-185">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupContentWrappers%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeferringLoader">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; DeferringLoader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; DeferringLoader" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.DeferringLoader" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeferringLoader As XamlValueConverter(Of XamlDeferringLoader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ DeferringLoader { System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeferringLoader : System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;" Usage="System.Xaml.XamlType.DeferringLoader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-186">获取 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />，它表示此类型的延迟加载转换行为。</span><span class="sxs-lookup"><span data-stu-id="08b78-186">Gets the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> that represents the deferred loading conversion behavior for this type.</span></span></summary>
        <value><span data-ttu-id="08b78-187">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.Xaml.XamlDeferringLoader" />，表示此类型的延迟加载行为。</span><span class="sxs-lookup"><span data-stu-id="08b78-187">The <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Xaml.XamlDeferringLoader" /> constraint that represents the deferred loading behavior for this type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-188">WPF 中的 XAML 模板行为是延迟加载行为的示例。</span><span class="sxs-lookup"><span data-stu-id="08b78-188">XAML template behavior in WPF is an example of deferred loading behavior.</span></span>  
  
 <span data-ttu-id="08b78-189">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupDeferringLoader%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-189">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupDeferringLoader%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-190">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupDeferringLoader%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-190">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupDeferringLoader%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="08b78-191">指示当前对象是否等于另一个对象。</span><span class="sxs-lookup"><span data-stu-id="08b78-191">Indicates whether the current object is equal to another object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xamlType.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="08b78-192">要与此对象进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="08b78-192">The object to compare with this object.</span></span></param>
        <summary><span data-ttu-id="08b78-193">指示当前对象是否等于另一个对象。</span><span class="sxs-lookup"><span data-stu-id="08b78-193">Indicates whether the current object is equal to another object.</span></span></summary>
        <returns><span data-ttu-id="08b78-194">如果当前对象等于 <paramref name="obj" /> 参数，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-194"><see langword="true" /> if the current object is equal to the <paramref name="obj" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Xaml.XamlType other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Xaml.XamlType other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As XamlType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Xaml::XamlType ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Xaml.XamlType -&gt; bool" Usage="xamlType.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="08b78-195">与此对象进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="08b78-195">An object to compare with this object.</span></span></param>
        <summary><span data-ttu-id="08b78-196">指示当前对象是否等于同一类型的另一个对象。</span><span class="sxs-lookup"><span data-stu-id="08b78-196">Indicates whether the current object is equal to another object of the same type.</span></span></summary>
        <returns><span data-ttu-id="08b78-197">如果当前对象等于 <paramref name="other" /> 参数，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-197"><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAliasedProperty">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember GetAliasedProperty (System.Xaml.XamlDirective directive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlMember GetAliasedProperty(class System.Xaml.XamlDirective directive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAliasedProperty (directive As XamlDirective) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::XamlMember ^ GetAliasedProperty(System::Xaml::XamlDirective ^ directive);" />
      <MemberSignature Language="F#" Value="member this.GetAliasedProperty : System.Xaml.XamlDirective -&gt; System.Xaml.XamlMember" Usage="xamlType.GetAliasedProperty directive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directive" Type="System.Xaml.XamlDirective" />
      </Parameters>
      <Docs>
        <param name="directive"><span data-ttu-id="08b78-198">要为其查找别名成员的指令。</span><span class="sxs-lookup"><span data-stu-id="08b78-198">The directive for which to find the aliased member.</span></span></param>
        <summary><span data-ttu-id="08b78-199">返回由此 <see cref="T:System.Xaml.XamlType" /> 将其别名设置为 XAML 指令的 XAML 成员。</span><span class="sxs-lookup"><span data-stu-id="08b78-199">Returns the XAML member that is aliased to a XAML directive by this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-200">如果可找到，则为别名成员，否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-200">The aliased member, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-201">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此方法的调用可以调用 <xref:System.Xaml.XamlType.LookupAliasedProperty%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-201">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this method can invoke <xref:System.Xaml.XamlType.LookupAliasedProperty%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-202">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupAliasedProperty%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-202">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupAliasedProperty%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllAttachableMembers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt; GetAllAttachableMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.Xaml.XamlMember&gt; GetAllAttachableMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAllAttachableMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllAttachableMembers () As ICollection(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::Xaml::XamlMember ^&gt; ^ GetAllAttachableMembers();" />
      <MemberSignature Language="F#" Value="member this.GetAllAttachableMembers : unit -&gt; System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt;" Usage="xamlType.GetAllAttachableMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-203">返回一个集合，该集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公开的所有可附加的属性。</span><span class="sxs-lookup"><span data-stu-id="08b78-203">Returns a collection that contains all the attachable properties that are exposed by this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-204">一个包含零个或多个 <see cref="T:System.Xaml.XamlMember" /> 值的集合。</span><span class="sxs-lookup"><span data-stu-id="08b78-204">A collection that contains zero or more <see cref="T:System.Xaml.XamlMember" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-205"><xref:System.Xaml.XamlMember>返回的集合中的每个都应包含支持为可附加成员的概念的值 <xref:System.Xaml.XamlMember> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-205">Each <xref:System.Xaml.XamlMember> in the returned collection should contain values that support the concept that the <xref:System.Xaml.XamlMember> is an attachable member.</span></span> <span data-ttu-id="08b78-206">例如，成员应 `true` 为 <xref:System.Xaml.XamlMember.IsAttachable%2A> 、类型为 <xref:System.Xaml.XamlMember.TargetType%2A> ，依此类推。</span><span class="sxs-lookup"><span data-stu-id="08b78-206">For example, members should return `true` for <xref:System.Xaml.XamlMember.IsAttachable%2A>, a type for <xref:System.Xaml.XamlMember.TargetType%2A>, and so on.</span></span>  
  
 <span data-ttu-id="08b78-207">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此方法的调用可以调用 <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-207">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this method can invoke <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-208">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-208">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAllMembers">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt; GetAllMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.ICollection`1&lt;class System.Xaml.XamlMember&gt; GetAllMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAllMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAllMembers () As ICollection(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::ICollection&lt;System::Xaml::XamlMember ^&gt; ^ GetAllMembers();" />
      <MemberSignature Language="F#" Value="member this.GetAllMembers : unit -&gt; System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt;" Usage="xamlType.GetAllMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.ICollection&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-209">返回一个集合，该集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公开的所有成员。</span><span class="sxs-lookup"><span data-stu-id="08b78-209">Returns a collection that contains all the members that are exposed by this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-210">一个包含零个或多个 <see cref="T:System.Xaml.XamlMember" /> 值的集合。</span><span class="sxs-lookup"><span data-stu-id="08b78-210">A collection that contains zero or more <see cref="T:System.Xaml.XamlMember" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-211">对此方法的调用可以调用 <xref:System.Xaml.XamlType.LookupAllMembers%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-211">Calls to this method can invoke <xref:System.Xaml.XamlType.LookupAllMembers%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttachableMember">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember GetAttachableMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlMember GetAttachableMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetAttachableMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttachableMember (name As String) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::XamlMember ^ GetAttachableMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetAttachableMember : string -&gt; System.Xaml.XamlMember" Usage="xamlType.GetAttachableMember name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="08b78-212">要获取的可附加成员的名称，形式为 <c>ownerTypeName.MemberName</c>。</span><span class="sxs-lookup"><span data-stu-id="08b78-212">The name of the attachable member to get, in <c>ownerTypeName.MemberName</c> form.</span></span></param>
        <summary><span data-ttu-id="08b78-213">返回一个 <see cref="T:System.Xaml.XamlMember" />，表示此 <see cref="T:System.Xaml.XamlType" /> 的一个命名的特定可附加成员。</span><span class="sxs-lookup"><span data-stu-id="08b78-213">Returns a <see cref="T:System.Xaml.XamlMember" /> representing a specific named attachable member of this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-214">请求的可附加成员的 <see cref="T:System.Xaml.XamlMember" /> 对象；如果不存在该名称的可附加成员，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-214">A <see cref="T:System.Xaml.XamlMember" /> object for the requested attachable member; otherwise, <see langword="null" />, if no attachable member by that name exists.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-215">对此方法的调用可以调用 <xref:System.Xaml.XamlType.LookupAttachableMember%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-215">Calls to this method can invoke <xref:System.Xaml.XamlType.LookupAttachableMember%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="08b78-216"><xref:System.Xaml.XamlType.LookupAttachableMember%2A> 是虚拟的，因此可以重写。</span><span class="sxs-lookup"><span data-stu-id="08b78-216"><xref:System.Xaml.XamlType.LookupAttachableMember%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="08b78-217">重写有可能 (出于恶意目的，或者) 更改 XAML 类型的已报告成员，使其不再按预期方式与 <xref:System.ComponentModel.TypeDescriptor> `Get*` 有关基础 CLR 类型的信息对齐。</span><span class="sxs-lookup"><span data-stu-id="08b78-217">The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <xref:System.ComponentModel.TypeDescriptor> `Get*` information about the underlying CLR type.</span></span> <span data-ttu-id="08b78-218">对于成员报告的任何安全关键检查，请改用基础 CLR 类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-218">For any security-critical checks of member reporting, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xamlType.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-219">返回该对象的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="08b78-219">Returns the hash code for this object.</span></span></summary>
        <returns><span data-ttu-id="08b78-220">整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="08b78-220">An integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlMember GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xaml.XamlMember GetMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xaml::XamlMember ^ GetMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.GetMember : string -&gt; System.Xaml.XamlMember" Usage="xamlType.GetMember name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="08b78-221">要获取的成员的名称（字符串形式）。</span><span class="sxs-lookup"><span data-stu-id="08b78-221">The name of the member to get (as a string).</span></span></param>
        <summary><span data-ttu-id="08b78-222">从此 <see cref="T:System.Xaml.XamlMember" /> 中返回特定命名成员的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-222">Returns a <see cref="T:System.Xaml.XamlMember" /> for a specific named member from this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-223">如果已找到此类成员，则为成员的 <see cref="T:System.Xaml.XamlMember" /> 信息；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-223">The <see cref="T:System.Xaml.XamlMember" /> information for the member, if such a member was found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-224">的值 `name` 应是非限定的。</span><span class="sxs-lookup"><span data-stu-id="08b78-224">The value for `name` is expected to be unqualified.</span></span> <span data-ttu-id="08b78-225">指示附加成员应改为提交到的类型限定名称 <xref:System.Xaml.XamlType.GetAttachableMember%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-225">Type-qualified names that indicate an attached member should be submitted to <xref:System.Xaml.XamlType.GetAttachableMember%2A> instead.</span></span> <span data-ttu-id="08b78-226">不应使用带前缀的成员名称;前缀是使用情况的，XAML 类型系统不能知道此类用法的上下文以及如何映射前缀。</span><span class="sxs-lookup"><span data-stu-id="08b78-226">Prefixed member names should not be used; a prefix is situational to a usage and the XAML type system cannot know the context of such a usage and how the prefix is mapped.</span></span>  
  
 <span data-ttu-id="08b78-227">对此方法的调用可以调用 <xref:System.Xaml.XamlType.LookupMember%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-227">Calls to this method can invoke <xref:System.Xaml.XamlType.LookupMember%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="08b78-228"><xref:System.Xaml.XamlType.LookupMember%2A> 是虚拟的，因此可以重写。</span><span class="sxs-lookup"><span data-stu-id="08b78-228"><xref:System.Xaml.XamlType.LookupMember%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="08b78-229">重写有可能 (出于恶意目的，或者) 更改 XAML 类型的已报告成员，使其不再按预期方式与 <xref:System.ComponentModel.TypeDescriptor> `Get*` 有关基础 CLR 类型的信息对齐。</span><span class="sxs-lookup"><span data-stu-id="08b78-229">The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <xref:System.ComponentModel.TypeDescriptor> `Get*` information about the underlying CLR type.</span></span> <span data-ttu-id="08b78-230">对于成员报告的任何安全关键检查，请改用基础 CLR 类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-230">For any security-critical checks of member reporting, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPositionalParameters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; GetPositionalParameters (int parameterCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; GetPositionalParameters(int32 parameterCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPositionalParameters (parameterCount As Integer) As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ GetPositionalParameters(int parameterCount);" />
      <MemberSignature Language="F#" Value="member this.GetPositionalParameters : int -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="xamlType.GetPositionalParameters parameterCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterCount"><span data-ttu-id="08b78-231">您需要其相关信息的特定语法或构造函数模式的计数 (arity)。</span><span class="sxs-lookup"><span data-stu-id="08b78-231">The count (arity) of the particular syntax or constructor mode that you want information about.</span></span></param>
        <summary><span data-ttu-id="08b78-232">对于标记扩展类型，返回此 <see cref="T:System.Xaml.XamlType" /> 的特定标记扩展用法中所支持位置参数的类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-232">For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-233"><see cref="T:System.Xaml.XamlType" /> 值的列表，其中每个 <see cref="T:System.Xaml.XamlType" /> 都是该位置在语法中的类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-233">A list of <see cref="T:System.Xaml.XamlType" /> values, where each <see cref="T:System.Xaml.XamlType" /> is the type for that position in the syntax.</span></span> <span data-ttu-id="08b78-234">您必须按照为标记扩展提供标记输入时的相同顺序指定类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-234">You must specify the types in the same order when you supply markup input for the markup extension.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-235">仅当这 <xref:System.Xaml.XamlType> 表示)  (标记扩展时，此 API 才适用 <xref:System.Xaml.XamlType.IsMarkupExtension%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-235">This API is only relevant if this <xref:System.Xaml.XamlType> represents a markup extension (<xref:System.Xaml.XamlType.IsMarkupExtension%2A> is `true`).</span></span>  
  
 <span data-ttu-id="08b78-236">输入 `parameterCount` 不用于请求特定位置参数的类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-236">The input `parameterCount` is not for requesting the type of a specific positional parameter.</span></span> <span data-ttu-id="08b78-237">它用于指定标记扩展用法的 arity。</span><span class="sxs-lookup"><span data-stu-id="08b78-237">It is for specifying the arity of a markup extension usage.</span></span> <span data-ttu-id="08b78-238">标记扩展用法通常包含多个 "签名"，并使用不同的参数 arity (要区分) 位置参数的数目。</span><span class="sxs-lookup"><span data-stu-id="08b78-238">Markup extension usage often has multiple "signatures" and uses different parameter arity (count) of positional parameters to differentiate.</span></span> <span data-ttu-id="08b78-239">不过，您可以将架构上下文配置为允许重复的 arities，并使用位置参数的类型进行区分。</span><span class="sxs-lookup"><span data-stu-id="08b78-239">However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation.</span></span> <span data-ttu-id="08b78-240">有关详细信息，请参阅 <xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>。</span><span class="sxs-lookup"><span data-stu-id="08b78-240">For more information, see <xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>.</span></span> <span data-ttu-id="08b78-241">对于特定 arity (计数) ，参数位置和类型可能会有所不同。</span><span class="sxs-lookup"><span data-stu-id="08b78-241">For a specific arity (count), the parameter positions and types can vary.</span></span> <span data-ttu-id="08b78-242">若要获取特定 arity 标记扩展用法的位置类型，请首先调用 <xref:System.Xaml.XamlType.GetPositionalParameters%2A> 指定 arity 计数。</span><span class="sxs-lookup"><span data-stu-id="08b78-242">To get the positional type of a specific arity's markup extension usage, you first call <xref:System.Xaml.XamlType.GetPositionalParameters%2A> specifying the arity count.</span></span> <span data-ttu-id="08b78-243">然后从返回的集合中获取该位置处的项。</span><span class="sxs-lookup"><span data-stu-id="08b78-243">Then get the item at that position from the returned collection.</span></span>  
  
 <span data-ttu-id="08b78-244">对此方法的调用可以调用 <xref:System.Xaml.XamlType.LookupPositionalParameters%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-244">Calls to this method can invoke <xref:System.Xaml.XamlType.LookupPositionalParameters%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXamlNamespaces">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; GetXamlNamespaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;string&gt; GetXamlNamespaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.GetXamlNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetXamlNamespaces () As IList(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IList&lt;System::String ^&gt; ^ GetXamlNamespaces();" />
      <MemberSignature Language="F#" Value="abstract member GetXamlNamespaces : unit -&gt; System.Collections.Generic.IList&lt;string&gt;&#xA;override this.GetXamlNamespaces : unit -&gt; System.Collections.Generic.IList&lt;string&gt;" Usage="xamlType.GetXamlNamespaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-245">为包括了类型的 XAML 命名空间返回字符串标识符的列表。</span><span class="sxs-lookup"><span data-stu-id="08b78-245">Returns a list of string identifiers for XAML namespaces that the type is included in.</span></span></summary>
        <returns><span data-ttu-id="08b78-246">字符串值的列表，其中的每个字符串都是 XAML 命名空间的 URI 标识符。</span><span class="sxs-lookup"><span data-stu-id="08b78-246">A list of string values, where each string is the URI identifier for a XAML namespace.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-247">典型的 XAML 命名空间标识符是 URI 格式的字符串。</span><span class="sxs-lookup"><span data-stu-id="08b78-247">Typical XAML namespace identifiers are strings in URI form.</span></span>  
  
 <span data-ttu-id="08b78-248">默认实现按顺序检查以下各项：构造中提供的 XAML 命名空间 (<xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29> 签名仅) ; 和架构上下文中可用的命名空间。</span><span class="sxs-lookup"><span data-stu-id="08b78-248">The default implementation checks the following, in order: the XAML namespace that is supplied in construction (<xref:System.Xaml.XamlType.%23ctor%28System.String%2CSystem.String%2CSystem.Collections.Generic.IList%7BSystem.Xaml.XamlType%7D%2CSystem.Xaml.XamlSchemaContext%29> signature only); and the namespaces that are available from the schema context.</span></span> <span data-ttu-id="08b78-249">如果这些都是 `null` ，则会生成一个新列表，其中包含一个空字符串。</span><span class="sxs-lookup"><span data-stu-id="08b78-249">If these are each `null`, a new list is generated that contains a single empty string.</span></span> <span data-ttu-id="08b78-250">您可以重写此方法以更改查找方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-250">You can override this method to change the lookup methodology.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoker">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlTypeInvoker Invoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlTypeInvoker Invoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.Invoker" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Invoker As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlTypeInvoker ^ Invoker { System::Xaml::Schema::XamlTypeInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Invoker : System.Xaml.Schema.XamlTypeInvoker" Usage="System.Xaml.XamlType.Invoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-251">获取与此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 关联的 <see cref="T:System.Xaml.XamlType" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="08b78-251">Gets the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> implementation that is associated with this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <value><span data-ttu-id="08b78-252">与此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 关联的 <see cref="T:System.Xaml.XamlType" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="08b78-252">The <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> implementation that is associated with this <see cref="T:System.Xaml.XamlType" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-253">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则调用 <xref:System.Xaml.XamlType.Invoker%2A> 可以调用 <xref:System.Xaml.XamlType.LookupInvoker%2A> 或该方法的特定重写。</span><span class="sxs-lookup"><span data-stu-id="08b78-253">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calling <xref:System.Xaml.XamlType.Invoker%2A> can invoke either <xref:System.Xaml.XamlType.LookupInvoker%2A> or a specific override of that method.</span></span> <span data-ttu-id="08b78-254">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupInvoker%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-254">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupInvoker%2A> on this type.</span></span>  
  
 <span data-ttu-id="08b78-255">如果 <xref:System.Xaml.XamlType.LookupInvoker%2A> 重写返回 `null` ，或如果 `null` 由于缺少此而导致默认实现返回 <xref:System.Xaml.XamlType.UnderlyingType%2A> <xref:System.Xaml.XamlType> ，则 <xref:System.Xaml.XamlType.Invoker%2A> 返回 <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-255">If a <xref:System.Xaml.XamlType.LookupInvoker%2A> override returns `null`, or if the default implementation returns `null` because of lack of <xref:System.Xaml.XamlType.UnderlyingType%2A> for this <xref:System.Xaml.XamlType>, then <xref:System.Xaml.XamlType.Invoker%2A> returns <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAmbient">
      <MemberSignature Language="C#" Value="public bool IsAmbient { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAmbient" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsAmbient" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAmbient As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAmbient { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAmbient : bool" Usage="System.Xaml.XamlType.IsAmbient" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-256">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示环境类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-256">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents an ambient type, as per the XAML definition.</span></span></summary>
        <value><span data-ttu-id="08b78-257">如果此 <see cref="T:System.Xaml.XamlType" /> 表示环境类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-257"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents an ambient type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-258">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupIsAmbient%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-258">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsAmbient%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-259">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupIsAmbient%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-259">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsAmbient%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArray : bool" Usage="System.Xaml.XamlType.IsArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-260">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示数组。</span><span class="sxs-lookup"><span data-stu-id="08b78-260">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents an array.</span></span></summary>
        <value><span data-ttu-id="08b78-261">如果此 <see cref="T:System.Xaml.XamlType" /> 表示数组，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-261"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents an array; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-262">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-262">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupCollectionKind%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-263">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-263">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupCollectionKind%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCollection">
      <MemberSignature Language="C#" Value="public bool IsCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCollection" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCollection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCollection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCollection : bool" Usage="System.Xaml.XamlType.IsCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-264">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示集合。</span><span class="sxs-lookup"><span data-stu-id="08b78-264">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a collection.</span></span></summary>
        <value><span data-ttu-id="08b78-265">如果此 <see cref="T:System.Xaml.XamlType" /> 表示集合，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-265"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a collection; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-266">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-266">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupCollectionKind%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-267">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-267">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupCollectionKind%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsConstructible">
      <MemberSignature Language="C#" Value="public bool IsConstructible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsConstructible" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsConstructible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsConstructible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsConstructible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsConstructible : bool" Usage="System.Xaml.XamlType.IsConstructible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-268">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示可构造类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-268">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a constructible type, as per the XAML definition.</span></span></summary>
        <value><span data-ttu-id="08b78-269">如果此 <see cref="T:System.Xaml.XamlType" /> 表示可构造类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-269"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a constructible type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-270">此属性与 `[is default constructible]` [ms-chap] 规范中的信息项对齐。</span><span class="sxs-lookup"><span data-stu-id="08b78-270">This property aligns to the `[is default constructible]` information item in the [MS-XAML] specification.</span></span>  
  
 <span data-ttu-id="08b78-271">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupIsConstructible%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-271">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsConstructible%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-272">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupIsConstructible%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-272">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsConstructible%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlType.ConstructionRequiresArguments" />
      </Docs>
    </Member>
    <Member MemberName="IsDictionary">
      <MemberSignature Language="C#" Value="public bool IsDictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDictionary" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsDictionary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDictionary As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDictionary { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDictionary : bool" Usage="System.Xaml.XamlType.IsDictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-273">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示字典。</span><span class="sxs-lookup"><span data-stu-id="08b78-273">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a dictionary, as per the XAML definition.</span></span></summary>
        <value><span data-ttu-id="08b78-274">如果此 <see cref="T:System.Xaml.XamlType" /> 表示字典，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-274"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a dictionary; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-275">此属性与 `[is dictionary]` [ms-chap] 规范中的信息项对齐。</span><span class="sxs-lookup"><span data-stu-id="08b78-275">This property aligns to the `[is dictionary]` information item in the [MS-XAML] specification.</span></span>  
  
 <span data-ttu-id="08b78-276">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-276">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupCollectionKind%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-277">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-277">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupCollectionKind%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsGeneric">
      <MemberSignature Language="C#" Value="public bool IsGeneric { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsGeneric" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsGeneric" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsGeneric As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsGeneric { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsGeneric : bool" Usage="System.Xaml.XamlType.IsGeneric" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-278">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示泛型类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-278">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a generic type.</span></span></summary>
        <value><span data-ttu-id="08b78-279">如果此 <see cref="T:System.Xaml.XamlType" /> 表示泛型类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-279"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a generic type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-280">此属性是一个帮助器属性，用于检查的 null 值 <xref:System.Xaml.XamlType.TypeArguments%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-280">This property is a helper property that checks for a null value of <xref:System.Xaml.XamlType.TypeArguments%2A>.</span></span> <span data-ttu-id="08b78-281">没有 `Lookup` 与相关的特定方法 <xref:System.Xaml.XamlType.IsGeneric%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-281">There is no specific `Lookup` method related to <xref:System.Xaml.XamlType.IsGeneric%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMarkupExtension">
      <MemberSignature Language="C#" Value="public bool IsMarkupExtension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarkupExtension" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsMarkupExtension" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMarkupExtension As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMarkupExtension { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMarkupExtension : bool" Usage="System.Xaml.XamlType.IsMarkupExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-282">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示标记扩展。</span><span class="sxs-lookup"><span data-stu-id="08b78-282">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a markup extension.</span></span></summary>
        <value><span data-ttu-id="08b78-283">如果此 <see cref="T:System.Xaml.XamlType" /> 表示标记扩展，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-283"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a markup extension; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-284">在 XAML 规范术语中，此类型必须可分配给，以便为 `x:MarkupExtension` 返回 `true` <xref:System.Xaml.XamlType.IsMarkupExtension%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-284">In XAML specification terms, this type must be assignable to `x:MarkupExtension` in order to return `true` for <xref:System.Xaml.XamlType.IsMarkupExtension%2A>.</span></span>  
  
 <span data-ttu-id="08b78-285">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-285">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-286">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-286">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsMarkupExtension%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameScope">
      <MemberSignature Language="C#" Value="public bool IsNameScope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameScope" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsNameScope" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNameScope As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNameScope { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNameScope : bool" Usage="System.Xaml.XamlType.IsNameScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-287">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示 XAML 名称范围。</span><span class="sxs-lookup"><span data-stu-id="08b78-287">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a XAML namescope, as per the XAML definition.</span></span></summary>
        <value><span data-ttu-id="08b78-288">如果此 <see cref="T:System.Xaml.XamlType" /> 表示 XAML 名称范围，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-288"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a XAML namescope; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-289">XAML 命名范围强制执行用于的属性或属性的名称的唯一性 `x:Name`  /  `[name property]` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-289">A XAML namescope enforces the name uniqueness of the property or properties used for `x:Name` / `[name property]`.</span></span> <span data-ttu-id="08b78-290">如果 <xref:System.Xaml.XamlType.IsNameScope%2A> 为 `true` ，则应存在一些强制唯一性的机制，并且应从拥有 XAML 名称范围的此类型的角度进行评估。</span><span class="sxs-lookup"><span data-stu-id="08b78-290">If <xref:System.Xaml.XamlType.IsNameScope%2A> is `true`, some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope.</span></span> <span data-ttu-id="08b78-291">然后，XAML 名称范围将扩展到该类型的内容，直到遇到另一个 XAML 名称范围类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-291">The XAML namescope then extends to the content of the type until another XAML namescope-owning type is encountered.</span></span>  
  
 <span data-ttu-id="08b78-292">此属性与 `[is name scope]` [ms-chap] 规范中的信息项对齐。</span><span class="sxs-lookup"><span data-stu-id="08b78-292">This property aligns to the `[is name scope]` information item in the [MS-XAML] specification.</span></span>  
  
 <span data-ttu-id="08b78-293">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupIsNameScope%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-293">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsNameScope%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameValid">
      <MemberSignature Language="C#" Value="public bool IsNameValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameValid" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsNameValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNameValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNameValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNameValid : bool" Usage="System.Xaml.XamlType.IsNameValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-294">获取一个值，该值指示是否使用有效的 <see langword="xamlName" /> 字符串作为其 <see cref="T:System.Xaml.XamlType" /> 来初始化此 <see cref="P:System.Xaml.XamlType.Name" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-294">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> is initialized by using a valid <see langword="xamlName" /> string as its <see cref="P:System.Xaml.XamlType.Name" />.</span></span></summary>
        <value><span data-ttu-id="08b78-295">如果使用有效的 <see langword="true" /> 字符串来初始化此 <see cref="T:System.Xaml.XamlType" />，则为 <see langword="xamlName" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-295"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> is initialized by using a valid <see langword="xamlName" /> string; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNullable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool" Usage="System.Xaml.XamlType.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-296">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示可以为 null 的类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-296">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a nullable type, as per the XAML definition.</span></span></summary>
        <value><span data-ttu-id="08b78-297">如果此 <see cref="T:System.Xaml.XamlType" /> 表示可以为 null 的类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-297"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a nullable type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-298">此属性与 `[is nullable]` [ms-chap] 规范中的信息项对齐。</span><span class="sxs-lookup"><span data-stu-id="08b78-298">This property aligns to the `[is nullable]` information item in the [MS-XAML] specification.</span></span>  
  
 <span data-ttu-id="08b78-299">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupIsNullable%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-299">If you are not using the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsNullable%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool" Usage="System.Xaml.XamlType.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-300">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示相关类型系统中的公共类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-300">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a public type in the relevant type system.</span></span></summary>
        <value><span data-ttu-id="08b78-301">如果此 <see cref="T:System.Xaml.XamlType" /> 表示公共类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-301"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a public type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-302">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupIsPublic%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-302">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsPublic%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="08b78-303"><xref:System.Xaml.XamlType.LookupIsPublic%2A> 是虚拟的，因此可以重写。</span><span class="sxs-lookup"><span data-stu-id="08b78-303"><xref:System.Xaml.XamlType.LookupIsPublic%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="08b78-304">重写可能 (出于恶意目的，或者) 更改有关 XAML 类型的报告访问信息，使其不再以预期方式与类型系统和其基础 CLR 类型的访问信息对齐。</span><span class="sxs-lookup"><span data-stu-id="08b78-304">The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system and access information of its underlying CLR type.</span></span> <span data-ttu-id="08b78-305">对于分配操作和访问的任何安全关键检查，请改用基础 CLR 类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-305">For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnknown">
      <MemberSignature Language="C#" Value="public bool IsUnknown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnknown" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsUnknown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnknown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnknown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnknown : bool" Usage="System.Xaml.XamlType.IsUnknown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-306">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示无法在基础类型系统中解析的类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-306">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a type that cannot be resolved in the underlying type system.</span></span></summary>
        <value><span data-ttu-id="08b78-307">如果此 <see cref="T:System.Xaml.XamlType" /> 表示不可解析的类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-307"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents an unresolvable type; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-308">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupIsUnknown%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-308">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsUnknown%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span>  
  
 <span data-ttu-id="08b78-309">对于涉及的加载路径 <xref:System.Xaml.XamlObjectWriter> ， <xref:System.Xaml.XamlType> 具有 `true` 的 <xref:System.Xaml.XamlType.IsUnknown%2A> 不能写入对象图。</span><span class="sxs-lookup"><span data-stu-id="08b78-309">For a load path that involves <xref:System.Xaml.XamlObjectWriter>, a <xref:System.Xaml.XamlType> that has `true` for <xref:System.Xaml.XamlType.IsUnknown%2A> cannot be written into an object graph.</span></span> <span data-ttu-id="08b78-310">在的默认实现下 <xref:System.Xaml> ， <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=nameWithType> 如果的相关报表，调用将引发 <xref:System.Xaml.XamlObjectWriterException> <xref:System.Xaml.XamlType> `true` <xref:System.Xaml.XamlType.IsUnknown%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-310">Under the default implementations in <xref:System.Xaml> , the <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A?displayProperty=nameWithType> call throws a <xref:System.Xaml.XamlObjectWriterException> when the relevant <xref:System.Xaml.XamlType> reports `true` for <xref:System.Xaml.XamlType.IsUnknown%2A>.</span></span> <span data-ttu-id="08b78-311">不应传递 <xref:System.Xaml.XamlType> 与相同的， <xref:System.Xaml.XamlType.IsUnknown%2A> `true` 除非您已准备好处理中的异常 <xref:System.Xaml.XamlObjectWriter> ，或者，您还可以通过其他方式在 <xref:System.Xaml.XamlObjectWriter> 编写对象图之前调整行为或 XAML 节点流。</span><span class="sxs-lookup"><span data-stu-id="08b78-311">You should not pass a <xref:System.Xaml.XamlType> that has <xref:System.Xaml.XamlType.IsUnknown%2A> as `true` unless you are prepared to handle the exceptions from <xref:System.Xaml.XamlObjectWriter>, or you have other ways to adjust the <xref:System.Xaml.XamlObjectWriter> behavior or the XAML node stream prior to writing the object graph.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUsableDuringInitialization">
      <MemberSignature Language="C#" Value="public bool IsUsableDuringInitialization { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUsableDuringInitialization" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsUsableDuringInitialization" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUsableDuringInitialization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUsableDuringInitialization { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUsableDuringInitialization : bool" Usage="System.Xaml.XamlType.IsUsableDuringInitialization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-312">获取一个值，该值指示在 XAML 初始化过程中是否自上而下生成此 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-312">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> is built top-down during XAML initialization.</span></span></summary>
        <value><span data-ttu-id="08b78-313">如果在 XAML 初始化过程中自上而下生成此 <see cref="T:System.Xaml.XamlType" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-313"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> is built top-down during XAML initialization; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="08b78-314">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-314">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-315">从上到下是在创建对象图时，与 XAML 处理器行为接近的比喻。</span><span class="sxs-lookup"><span data-stu-id="08b78-315">Top-down is a metaphor that approximates XAML processor behavior when creating the object graph.</span></span> <span data-ttu-id="08b78-316">当自上而下生成时，会实例化一个类型，并将其附加到父，然后设置其属性。</span><span class="sxs-lookup"><span data-stu-id="08b78-316">When built top-down, a type is instantiated, attached to the parent, and then has its properties set.</span></span> <span data-ttu-id="08b78-317">自上而下的构造避免多次调用属性更改的处理程序。</span><span class="sxs-lookup"><span data-stu-id="08b78-317">Top-down construction avoids invoking property-changed handlers multiple times.</span></span> <span data-ttu-id="08b78-318">此类处理 ripples 对象图，因此，消除了多个处理程序调用，并为启动对象图提供了性能优化。</span><span class="sxs-lookup"><span data-stu-id="08b78-318">Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.</span></span>  
  
 <span data-ttu-id="08b78-319">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-319">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-320">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-320">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupUsableDuringInitialization%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)" />
        <altmember cref="P:System.Windows.FrameworkElement.IsInitialized" />
      </Docs>
    </Member>
    <Member MemberName="IsWhitespaceSignificantCollection">
      <MemberSignature Language="C#" Value="public bool IsWhitespaceSignificantCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWhitespaceSignificantCollection" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWhitespaceSignificantCollection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWhitespaceSignificantCollection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWhitespaceSignificantCollection : bool" Usage="System.Xaml.XamlType.IsWhitespaceSignificantCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-321">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XML 定义是否表示空白有意义集合。</span><span class="sxs-lookup"><span data-stu-id="08b78-321">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a whitespace significant collection, as per the XML definition.</span></span></summary>
        <value><span data-ttu-id="08b78-322">如果此 <see cref="T:System.Xaml.XamlType" /> 表示空白有意义集合，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-322"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a whitespace significant collection; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-323">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-323">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-324">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-324">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsXData">
      <MemberSignature Language="C#" Value="public bool IsXData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsXData" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.IsXData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsXData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsXData { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsXData : bool" Usage="System.Xaml.XamlType.IsXData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-325">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示 XML <see langword="XDATA" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-325">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents XML <see langword="XDATA" />, as per the XAML definition.</span></span></summary>
        <value><span data-ttu-id="08b78-326">如果此 <see cref="T:System.Xaml.XamlType" /> 表示 <see langword="true" />，则为 <see langword="XDATA" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-326"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents <see langword="XDATA" />; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-327">此属性与 `[is xdata]` [ms-chap] 规范中的信息项对齐。</span><span class="sxs-lookup"><span data-stu-id="08b78-327">This property aligns to the `[is xdata]` information item in the [MS-XAML] specification.</span></span>  
  
 <span data-ttu-id="08b78-328">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupIsXData%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-328">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsXData%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-329">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupIsXData%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-329">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsXData%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType ItemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType ItemType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ItemType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ItemType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ ItemType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ItemType : System.Xaml.XamlType" Usage="System.Xaml.XamlType.ItemType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-330">获取一个值，该值为此 <see cref="T:System.Xaml.XamlType" /> 的 <see langword="Items" /> 属性提供类型信息。</span><span class="sxs-lookup"><span data-stu-id="08b78-330">Gets a value that provides the type information for the <see langword="Items" /> property of this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <value><span data-ttu-id="08b78-331">集合中项的类型的 <see cref="T:System.Xaml.XamlType" /> 对象；如果此 <see cref="T:System.Xaml.XamlType" /> 不表示集合，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-331">A <see cref="T:System.Xaml.XamlType" /> object for the type of the items in the collection; otherwise, <see langword="null" />, if this <see cref="T:System.Xaml.XamlType" /> does not represent a collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-332">仅当此属性 <xref:System.Xaml.XamlType> 表示)  (集合时，此属性才适用 <xref:System.Xaml.XamlType.IsCollection%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-332">This property is only relevant if this <xref:System.Xaml.XamlType> represents a collection (<xref:System.Xaml.XamlType.IsCollection%2A> is `true`).</span></span> <span data-ttu-id="08b78-333">`Items`属性是包含该类型的集合或数组中的项的任何属性。</span><span class="sxs-lookup"><span data-stu-id="08b78-333">The `Items` property is whatever property holds items in that type of collection or array.</span></span>  
  
 <span data-ttu-id="08b78-334">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupItemType%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-334">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupItemType%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-335">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupItemType%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-335">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupItemType%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType KeyType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType KeyType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.KeyType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ KeyType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyType : System.Xaml.XamlType" Usage="System.Xaml.XamlType.KeyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-336">如果 <see cref="T:System.Xaml.XamlType" /> 表示字典，则获取一个值，该值为此 <see cref="T:System.Xaml.XamlType" /> 的键属性提供类型信息。</span><span class="sxs-lookup"><span data-stu-id="08b78-336">Gets a value that provides the type information for the key property of this <see cref="T:System.Xaml.XamlType" />, if the <see cref="T:System.Xaml.XamlType" /> represents a dictionary.</span></span></summary>
        <value><span data-ttu-id="08b78-337">字典用法键的类型的 <see cref="T:System.Xaml.XamlType" /> 对象；否则，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示字典，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-337">A <see cref="T:System.Xaml.XamlType" /> object for the type of the key for dictionary usage, otherwise, <see langword="null" />, if this <see cref="T:System.Xaml.XamlType" /> does not represent a dictionary.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-338">仅当此属性 <xref:System.Xaml.XamlType> 表示)  (字典时，此属性才适用 <xref:System.Xaml.XamlType.IsDictionary%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-338">This property is only relevant if this <xref:System.Xaml.XamlType> represents a dictionary (<xref:System.Xaml.XamlType.IsDictionary%2A> is `true`).</span></span>  
  
 <span data-ttu-id="08b78-339">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupKeyType%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-339">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupKeyType%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-340">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupKeyType%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-340">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupKeyType%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAliasedProperty">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupAliasedProperty (System.Xaml.XamlDirective directive);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupAliasedProperty(class System.Xaml.XamlDirective directive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAliasedProperty (directive As XamlDirective) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlMember ^ LookupAliasedProperty(System::Xaml::XamlDirective ^ directive);" />
      <MemberSignature Language="F#" Value="abstract member LookupAliasedProperty : System.Xaml.XamlDirective -&gt; System.Xaml.XamlMember&#xA;override this.LookupAliasedProperty : System.Xaml.XamlDirective -&gt; System.Xaml.XamlMember" Usage="xamlType.LookupAliasedProperty directive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directive" Type="System.Xaml.XamlDirective" />
      </Parameters>
      <Docs>
        <param name="directive"><span data-ttu-id="08b78-341">要为其查找别名成员的指令。</span><span class="sxs-lookup"><span data-stu-id="08b78-341">The directive for which to find the aliased member.</span></span></param>
        <summary><span data-ttu-id="08b78-342">返回由此 <see cref="T:System.Xaml.XamlType" /> 将其别名设置为 XAML 指令的 XAML 成员。</span><span class="sxs-lookup"><span data-stu-id="08b78-342">Returns the XAML member that is aliased to a XAML directive by this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-343">如果可找到，则为别名成员，否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-343">The aliased member, if found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-344">当调用方从获取值时，可以调用此方法 <xref:System.Xaml.XamlType.GetAliasedProperty%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-344">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.GetAliasedProperty%2A>.</span></span>  
  
 <span data-ttu-id="08b78-345">默认实现可返回以下 XAML 指令的结果：、、 `Key` 、 `Name` `Uid` 和 `xml:lang` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-345">The default implementation can return results for the following XAML directives: `Key`; `Name`; `Uid`; and `xml:lang`.</span></span> <span data-ttu-id="08b78-346">这些属性的值取决于基础反射， `null` 如果未找到别名属性，可能仍返回。</span><span class="sxs-lookup"><span data-stu-id="08b78-346">Values for these depend on underlying reflection and might still return `null` if no aliased property is found.</span></span>  
  
 <span data-ttu-id="08b78-347">如果您不依赖于默认的内部 CLR 反射，并使用元数据或其他技术来报告 XAML 类型系统信息或类型的架构信息，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-347">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or the schema information of a type.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xaml.XamlDirective" />
        <altmember cref="T:System.Xaml.XamlLanguage" />
      </Docs>
    </Member>
    <Member MemberName="LookupAllAttachableMembers">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt; LookupAllAttachableMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlMember&gt; LookupAllAttachableMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAllAttachableMembers" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAllAttachableMembers () As IEnumerable(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlMember ^&gt; ^ LookupAllAttachableMembers();" />
      <MemberSignature Language="F#" Value="abstract member LookupAllAttachableMembers : unit -&gt; seq&lt;System.Xaml.XamlMember&gt;&#xA;override this.LookupAllAttachableMembers : unit -&gt; seq&lt;System.Xaml.XamlMember&gt;" Usage="xamlType.LookupAllAttachableMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-348">返回一个可枚举集合，该集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公开的所有可附加的属性。</span><span class="sxs-lookup"><span data-stu-id="08b78-348">Returns an enumerable set that contains all attachable properties that are exposed by this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-349">包含零个或多个 <see cref="T:System.Xaml.XamlMember" /> 值的可枚举集合；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-349">An enumerable set that contains zero or more <see cref="T:System.Xaml.XamlMember" /> values; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-350">当调用方从获取值时，可以调用此方法 <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-350">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A>.</span></span>  
  
 <span data-ttu-id="08b78-351">尽管 <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A> 返回泛型集合，但此 `Lookup` 方法返回泛型可枚举集。</span><span class="sxs-lookup"><span data-stu-id="08b78-351">Although <xref:System.Xaml.XamlType.GetAllAttachableMembers%2A> returns a generic collection, this `Lookup` method returns a generic enumerable set.</span></span>  
  
 <span data-ttu-id="08b78-352">默认实现使用内部 CLR 反射。</span><span class="sxs-lookup"><span data-stu-id="08b78-352">The default implementation uses the internal CLR reflection.</span></span> <span data-ttu-id="08b78-353">如果 <xref:System.Xaml.XamlType.UnderlyingType%2A> 为 `null` ，则默认实现可以使用 <xref:System.Xaml.XamlType.BaseType%2A> （如果可用）。</span><span class="sxs-lookup"><span data-stu-id="08b78-353">When <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`, the default implementation can use <xref:System.Xaml.XamlType.BaseType%2A>, if it is available.</span></span> <span data-ttu-id="08b78-354">此行为以 <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> 递归方式调用以尝试查找有效的基类型，并 `null` 在不存在有效的基类型时返回。</span><span class="sxs-lookup"><span data-stu-id="08b78-354">This behavior calls <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> recursively to attempt to find a valid base type and returns `null` if no valid base type exists.</span></span>  
  
 <span data-ttu-id="08b78-355">如果不依赖于默认的内部 CLR 反射，并使用元数据或其他技术报告类型的 XAML 类型系统信息或架构信息，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-355">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span> <span data-ttu-id="08b78-356">应为不能确定信息的情况保留空返回，因为缺乏类型系统或反射支持。</span><span class="sxs-lookup"><span data-stu-id="08b78-356">A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support.</span></span> <span data-ttu-id="08b78-357">如果类型有效且反射或其他技术可用，但类型没有可附加成员，则应改为返回空 <xref:System.Collections.Generic.IEnumerable%601> 集。</span><span class="sxs-lookup"><span data-stu-id="08b78-357">If a type is valid and reflection or other techniques are available, but a type does not have attachable members, you should instead return an empty <xref:System.Collections.Generic.IEnumerable%601> set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAllMembers">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt; LookupAllMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Xaml.XamlMember&gt; LookupAllMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAllMembers" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAllMembers () As IEnumerable(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IEnumerable&lt;System::Xaml::XamlMember ^&gt; ^ LookupAllMembers();" />
      <MemberSignature Language="F#" Value="abstract member LookupAllMembers : unit -&gt; seq&lt;System.Xaml.XamlMember&gt;&#xA;override this.LookupAllMembers : unit -&gt; seq&lt;System.Xaml.XamlMember&gt;" Usage="xamlType.LookupAllMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-358">返回一个可枚举集合，该集合包含由此 <see cref="T:System.Xaml.XamlType" /> 公开的所有成员。</span><span class="sxs-lookup"><span data-stu-id="08b78-358">Returns an enumerable set that contains all the members that are exposed by this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-359">包含零个或多个 <see cref="T:System.Xaml.XamlMember" /> 值的可枚举集合。</span><span class="sxs-lookup"><span data-stu-id="08b78-359">An enumerable set that contains zero or more <see cref="T:System.Xaml.XamlMember" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-360">当调用方从获取值时，可以调用此方法 <xref:System.Xaml.XamlType.GetAllMembers%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-360">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.GetAllMembers%2A>.</span></span>  
  
 <span data-ttu-id="08b78-361">尽管 <xref:System.Xaml.XamlType.GetAllMembers%2A> 返回泛型集合，但此 `Lookup` 方法返回泛型可枚举集。</span><span class="sxs-lookup"><span data-stu-id="08b78-361">Although <xref:System.Xaml.XamlType.GetAllMembers%2A> returns a generic collection, this `Lookup` method returns a generic enumerable set.</span></span>  
  
 <span data-ttu-id="08b78-362">默认实现使用内部 CLR 反射。</span><span class="sxs-lookup"><span data-stu-id="08b78-362">The default implementation uses the internal CLR reflection.</span></span> <span data-ttu-id="08b78-363">对于 <xref:System.Xaml.XamlType.UnderlyingType%2A> 为 `null` ，默认实现可以使用 <xref:System.Xaml.XamlType.BaseType%2A> （如果可用）。</span><span class="sxs-lookup"><span data-stu-id="08b78-363">For cases where <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`, the default implementation can use <xref:System.Xaml.XamlType.BaseType%2A>, if it is available.</span></span> <span data-ttu-id="08b78-364">此行为以 <xref:System.Xaml.XamlType.LookupAllMembers%2A> 递归方式调用以尝试查找有效的基类型， `null` 如果不存在有效的基类型，则返回。</span><span class="sxs-lookup"><span data-stu-id="08b78-364">This behavior calls <xref:System.Xaml.XamlType.LookupAllMembers%2A> recursively to attempt to find a valid base type, and returns `null` if no valid base type exists.</span></span>  
  
 <span data-ttu-id="08b78-365">如果不依赖于默认的内部 CLR 反射，并使用元数据或其他技术报告类型的 XAML 类型系统信息或架构信息，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-365">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span> <span data-ttu-id="08b78-366">应为不能确定信息的情况保留空返回，因为缺乏类型系统或反射支持。</span><span class="sxs-lookup"><span data-stu-id="08b78-366">A null return should be reserved for cases where information cannot be determined because of lack of type system or reflection support.</span></span> <span data-ttu-id="08b78-367">如果类型有效，则可以使用反射或其他技术;如果某个类型不具有成员，则应返回空 <xref:System.Collections.Generic.IEnumerable%601> 集。</span><span class="sxs-lookup"><span data-stu-id="08b78-367">If a type is valid, reflection or other techniques are available; if a type does not have members, you should instead return an empty <xref:System.Collections.Generic.IEnumerable%601> set.</span></span>  
  
 <span data-ttu-id="08b78-368">和的返回 <xref:System.Xaml.XamlType.LookupAllMembers%2A> 值 <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> 应互相排斥。</span><span class="sxs-lookup"><span data-stu-id="08b78-368">Return values for <xref:System.Xaml.XamlType.LookupAllMembers%2A> and <xref:System.Xaml.XamlType.LookupAllAttachableMembers%2A> should be mutually exclusive.</span></span> <span data-ttu-id="08b78-369">如果有一种情况，即后备类型系统属性可以支持标准实例使用情况以及可附加的用法，则应将该成员报告为两个不同的 <xref:System.Xaml.XamlMember> 值，其中一个值出现在可附加列表中，另一个值出现在标准成员列表中。</span><span class="sxs-lookup"><span data-stu-id="08b78-369">If you have a situation where a backing type system property can support a standard instance usage as well as an attachable usage, that member should be reported as two different <xref:System.Xaml.XamlMember> values, with one value appearing in the attachable list and another in the standard members list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAllowedContentTypes">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupAllowedContentTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; LookupAllowedContentTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAllowedContentTypes" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAllowedContentTypes () As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ LookupAllowedContentTypes();" />
      <MemberSignature Language="F#" Value="abstract member LookupAllowedContentTypes : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;&#xA;override this.LookupAllowedContentTypes : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="xamlType.LookupAllowedContentTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-370">返回类型的列表，这些类型可用作此 <see cref="P:System.Xaml.XamlType.ContentProperty" /> 的 <see cref="T:System.Xaml.XamlType" /> 值。</span><span class="sxs-lookup"><span data-stu-id="08b78-370">Returns a list of the types that are usable as the <see cref="P:System.Xaml.XamlType.ContentProperty" /> value for this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-371">可能的内容类型的列表。</span><span class="sxs-lookup"><span data-stu-id="08b78-371">A list of possible content types.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-372">当调用方从获取值时，可以调用此方法 <xref:System.Xaml.XamlType.AllowedContentTypes%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-372">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.AllowedContentTypes%2A>.</span></span>  
  
 <span data-ttu-id="08b78-373">针对 <xref:System.Xaml.XamlType.CanAssignTo%2A> 特定内容类型计算为的类型不会被视为用于的多个类型 <xref:System.Xaml.XamlType.AllowedContentTypes%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-373">Types that evaluate as <xref:System.Xaml.XamlType.CanAssignTo%2A> for a specific content type are not considered multiple types for purposes of <xref:System.Xaml.XamlType.AllowedContentTypes%2A>.</span></span>  
  
 <span data-ttu-id="08b78-374">默认实现可以使用 <xref:System.Xaml.XamlType> (<xref:System.Xaml.XamlType.ContentWrappers%2A> 、或) 的其他属性 <xref:System.Xaml.XamlType.ContentProperty%2A> <xref:System.Xaml.XamlType.ItemType%2A> 来获取结果。</span><span class="sxs-lookup"><span data-stu-id="08b78-374">The default implementation can use other properties of <xref:System.Xaml.XamlType> (<xref:System.Xaml.XamlType.ContentWrappers%2A>, <xref:System.Xaml.XamlType.ContentProperty%2A>, or <xref:System.Xaml.XamlType.ItemType%2A>) to obtain a result.</span></span> <span data-ttu-id="08b78-375">`Lookup`在此确定中，还可以调用前面属性列表的重写。</span><span class="sxs-lookup"><span data-stu-id="08b78-375">The `Lookup` overrides for the preceding property list can also be invoked in this determination.</span></span>  
  
 <span data-ttu-id="08b78-376">如果不依赖于默认的内部 CLR 反射，并使用元数据或其他技术报告类型的 XAML 类型系统信息或架构信息，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-376">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupAttachableMember">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupAttachableMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupAttachableMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupAttachableMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupAttachableMember (name As String) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlMember ^ LookupAttachableMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member LookupAttachableMember : string -&gt; System.Xaml.XamlMember&#xA;override this.LookupAttachableMember : string -&gt; System.Xaml.XamlMember" Usage="xamlType.LookupAttachableMember name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="08b78-377">要获取的可附加成员的名称，形式为 <c>ownerTypeName.MemberName</c>。</span><span class="sxs-lookup"><span data-stu-id="08b78-377">The name of the attachable member to get, in <c>ownerTypeName.MemberName</c> form.</span></span></param>
        <summary><span data-ttu-id="08b78-378">为 <see cref="T:System.Xaml.XamlType" /> 中特定的已命名可附加成员返回 <see cref="T:System.Xaml.XamlMember" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-378">Returns a <see cref="T:System.Xaml.XamlMember" /> for a specific named attachable from this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-379">请求的可附加成员的 <see cref="T:System.Xaml.XamlMember" /> 对象；如果不存在该名称的可附加成员，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-379">A <see cref="T:System.Xaml.XamlMember" /> object for the requested attachable member; otherwise, <see langword="null" />, if no attachable member by that name exists.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-380">当调用方从获取值时，可以调用此方法 <xref:System.Xaml.XamlType.GetAttachableMember%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-380">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.GetAttachableMember%2A>.</span></span>  
  
 <span data-ttu-id="08b78-381">默认实现使用内部 CLR 反射。</span><span class="sxs-lookup"><span data-stu-id="08b78-381">The default implementation uses the internal CLR reflection.</span></span> <span data-ttu-id="08b78-382">如果 <xref:System.Xaml.XamlType.UnderlyingType%2A> 为 `null` ，则默认实现可以使用 <xref:System.Xaml.XamlType.BaseType%2A> （如果可用）。</span><span class="sxs-lookup"><span data-stu-id="08b78-382">When <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`, the default implementation can use <xref:System.Xaml.XamlType.BaseType%2A>, if it is available.</span></span> <span data-ttu-id="08b78-383">此行为以 <xref:System.Xaml.XamlType.LookupAttachableMember%2A> 递归方式调用以尝试查找有效的基类型，并 `null` 在不存在有效的基类型时返回。</span><span class="sxs-lookup"><span data-stu-id="08b78-383">This behavior calls <xref:System.Xaml.XamlType.LookupAttachableMember%2A> recursively to attempt to find a valid base type and returns `null` if no valid base type exists.</span></span>  
  
 <span data-ttu-id="08b78-384">如果不依赖于默认的内部 CLR 反射，并使用元数据或其他技术报告类型的 XAML 类型系统信息或架构信息，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-384">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="08b78-385"><xref:System.Xaml.XamlType.LookupAttachableMember%2A> 是虚拟的，因此可以重写。</span><span class="sxs-lookup"><span data-stu-id="08b78-385"><xref:System.Xaml.XamlType.LookupAttachableMember%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="08b78-386">重写有可能 (出于恶意目的，或者) 更改 XAML 类型的已报告成员，使其不再按预期方式与 <xref:System.ComponentModel.TypeDescriptor> `Get*` 有关基础 CLR 类型的信息对齐。</span><span class="sxs-lookup"><span data-stu-id="08b78-386">The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <xref:System.ComponentModel.TypeDescriptor> `Get*` information about the underlying CLR type.</span></span> <span data-ttu-id="08b78-387">对于成员报告的任何安全关键检查，请改用基础 CLR 类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-387">For any security-critical checks of member reporting, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupBaseType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupBaseType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupBaseType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupBaseType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupBaseType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupBaseType();" />
      <MemberSignature Language="F#" Value="abstract member LookupBaseType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupBaseType : unit -&gt; System.Xaml.XamlType" Usage="xamlType.LookupBaseType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-388">返回此 XAML 类型的直接基类型的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-388">Returns the <see cref="T:System.Xaml.XamlType" /> for the immediate base type of this XAML type.</span></span> <span data-ttu-id="08b78-389">将基于此 <see cref="T:System.Xaml.XamlType" /> 的基础类型和架构上下文来确定此值。</span><span class="sxs-lookup"><span data-stu-id="08b78-389">Determination of this value is based on the underlying type of this <see cref="T:System.Xaml.XamlType" /> and schema context.</span></span></summary>
        <returns><span data-ttu-id="08b78-390">此 XAML 类型的直接基类型的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-390">The <see cref="T:System.Xaml.XamlType" /> for the immediate base type of this XAML type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-391">当调用方从获取值时，可以调用此方法 <xref:System.Xaml.XamlType.BaseType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-391">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.BaseType%2A>.</span></span>  
  
 <span data-ttu-id="08b78-392"><xref:System.Object>如果为，则默认实现可能返回表示的内部常数 <xref:System.Xaml.XamlType.UnderlyingType%2A> `null` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-392">The default implementation might return an internal constant that represents the <xref:System.Object> if <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`.</span></span>  
  
 <span data-ttu-id="08b78-393">如果不依赖于默认的内部 CLR 反射，并使用元数据或其他技术报告类型的 XAML 类型系统信息或架构信息，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-393">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="08b78-394"><xref:System.Xaml.XamlType.LookupBaseType%2A> 是虚拟的，因此可以重写。</span><span class="sxs-lookup"><span data-stu-id="08b78-394"><xref:System.Xaml.XamlType.LookupBaseType%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="08b78-395">重写有可能 (出于恶意目的，或者) 更改有关 XAML 类型的报告类型信息，使其不再以预期方式与其基础 CLR 类型的类型系统信息对齐。</span><span class="sxs-lookup"><span data-stu-id="08b78-395">The override has the potential (whether for malicious purposes or otherwise) to change the reported type information about a XAML type so that it no longer aligns in an expected way with the type system information of its underlying CLR type.</span></span> <span data-ttu-id="08b78-396">对于分配操作和访问的任何安全关键检查，请改用基础 CLR 类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-396">For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupCollectionKind">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlCollectionKind LookupCollectionKind ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Xaml.Schema.XamlCollectionKind LookupCollectionKind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupCollectionKind" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupCollectionKind () As XamlCollectionKind" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlCollectionKind LookupCollectionKind();" />
      <MemberSignature Language="F#" Value="abstract member LookupCollectionKind : unit -&gt; System.Xaml.Schema.XamlCollectionKind&#xA;override this.LookupCollectionKind : unit -&gt; System.Xaml.Schema.XamlCollectionKind" Usage="xamlType.LookupCollectionKind " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlCollectionKind</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-397">返回 <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> 枚举的一个值，该枚举声明此 <see cref="T:System.Xaml.XamlType" /> 使用哪种特定集合类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-397">Returns a value of the <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> enumeration that declares which specific collection type this <see cref="T:System.Xaml.XamlType" /> uses.</span></span></summary>
        <returns><span data-ttu-id="08b78-398"><see cref="T:System.Xaml.Schema.XamlCollectionKind" /> 枚举的一个值。</span><span class="sxs-lookup"><span data-stu-id="08b78-398">A value of the <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> enumeration.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-399">此方法由内部私有方法调用， (`CollectionKind` `GetCollectionKind` 在) 上不存在公共或 API <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-399">This method is invoked by an internal private method (no public `CollectionKind` or `GetCollectionKind` API exists on <xref:System.Xaml.XamlType>).</span></span>  
  
 <span data-ttu-id="08b78-400">默认实现使用内部 CLR 反射。</span><span class="sxs-lookup"><span data-stu-id="08b78-400">The default implementation uses the internal CLR reflection.</span></span> <span data-ttu-id="08b78-401">对于 <xref:System.Xaml.XamlType.UnderlyingType%2A> 为 `null` ，默认实现可以使用 <xref:System.Xaml.XamlType.BaseType%2A> （如果可用）。</span><span class="sxs-lookup"><span data-stu-id="08b78-401">For cases where <xref:System.Xaml.XamlType.UnderlyingType%2A> is `null`, the default implementation can use <xref:System.Xaml.XamlType.BaseType%2A>, if it is available.</span></span> <span data-ttu-id="08b78-402">此行为间接调用 <xref:System.Xaml.XamlType.LookupCollectionKind%2A> 以尝试查找有效的基类型; <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType> 如果不存在有效的基类型，则返回。</span><span class="sxs-lookup"><span data-stu-id="08b78-402">This behavior indirectly calls <xref:System.Xaml.XamlType.LookupCollectionKind%2A> recursively to attempt to find a valid base type; it returns <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType> if no valid base type exists.</span></span> <span data-ttu-id="08b78-403">通常，默认实现尝试 `Add` 通过反射查找基础类型的方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-403">In general, the default implementation attempts to find the `Add` method of the underlying type by reflection.</span></span> <span data-ttu-id="08b78-404">如果找到，则 <xref:System.Reflection.MethodInfo> 该 `Add` 方法的是足够的信息来确定 <xref:System.Xaml.Schema.XamlCollectionKind> 应返回的值。</span><span class="sxs-lookup"><span data-stu-id="08b78-404">If found, the <xref:System.Reflection.MethodInfo> of the `Add` method is enough information to determine which <xref:System.Xaml.Schema.XamlCollectionKind> value should be returned.</span></span> <span data-ttu-id="08b78-405">否则，它将返回 <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="08b78-405">Otherwise, it returns <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="08b78-406">如果不依赖于默认的内部 CLR 反射，并使用元数据或其他技术报告类型的 XAML 类型系统信息或架构信息，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-406">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupConstructionRequiresArguments">
      <MemberSignature Language="C#" Value="protected virtual bool LookupConstructionRequiresArguments ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupConstructionRequiresArguments() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupConstructionRequiresArguments" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupConstructionRequiresArguments () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupConstructionRequiresArguments();" />
      <MemberSignature Language="F#" Value="abstract member LookupConstructionRequiresArguments : unit -&gt; bool&#xA;override this.LookupConstructionRequiresArguments : unit -&gt; bool" Usage="xamlType.LookupConstructionRequiresArguments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-407">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否必须具有参数（通过 <see langword="x:TypeArguments" /> 实现的泛型约束、初始化文本或其他 XAML 技术）才能构造有效的类型实例。</span><span class="sxs-lookup"><span data-stu-id="08b78-407">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> must have arguments (generic constraints through <see langword="x:TypeArguments" />, initialization text, or other XAML techniques) to construct a valid instance of the type.</span></span></summary>
        <returns><span data-ttu-id="08b78-408">如果需要某个参数值才能构造实例，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-408"><see langword="true" /> if construction of an instance requires some argument value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-409">当调用方从获取值时，可以调用此方法 <xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-409">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>.</span></span>  
  
 <span data-ttu-id="08b78-410">默认实现 `false` 为 CLR 类型系统中被视为值类型的类型返回。</span><span class="sxs-lookup"><span data-stu-id="08b78-410">The default implementation returns `false` for types considered value types in the CLR type system.</span></span> <span data-ttu-id="08b78-411">对于除值类型以外的值，CLR 反射 <xref:System.Reflection.ConstructorInfo> 用于确定是否存在无参数的构造函数。</span><span class="sxs-lookup"><span data-stu-id="08b78-411">For other than value types, CLR reflection <xref:System.Reflection.ConstructorInfo> is used to determine whether a parameterless constructor exists.</span></span>  
  
 <span data-ttu-id="08b78-412">如果不依赖于默认的内部 CLR 反射，并使用元数据或其他技术报告类型的 XAML 类型系统信息或架构信息，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-412">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupContentProperty">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupContentProperty ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupContentProperty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupContentProperty" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupContentProperty () As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlMember ^ LookupContentProperty();" />
      <MemberSignature Language="F#" Value="abstract member LookupContentProperty : unit -&gt; System.Xaml.XamlMember&#xA;override this.LookupContentProperty : unit -&gt; System.Xaml.XamlMember" Usage="xamlType.LookupContentProperty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-413">返回此 <see cref="T:System.Xaml.XamlMember" /> 的内容属性的 <see cref="T:System.Xaml.XamlType" /> 信息。</span><span class="sxs-lookup"><span data-stu-id="08b78-413">Returns <see cref="T:System.Xaml.XamlMember" /> information for the content property of this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-414">此 <see cref="T:System.Xaml.XamlMember" /> 的内容属性的 <see cref="T:System.Xaml.XamlType" /> 信息。</span><span class="sxs-lookup"><span data-stu-id="08b78-414"><see cref="T:System.Xaml.XamlMember" /> information for the content property of this <see cref="T:System.Xaml.XamlType" />.</span></span> <span data-ttu-id="08b78-415">可为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-415">May be <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-416">当调用方从获取值时，可以调用此方法 <xref:System.Xaml.XamlType.ContentProperty%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-416">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.ContentProperty%2A>.</span></span>  
  
 <span data-ttu-id="08b78-417">默认实现检查 <xref:System.Windows.Markup.ContentPropertyAttribute> 类型定义上的。</span><span class="sxs-lookup"><span data-stu-id="08b78-417">The default implementation checks for <xref:System.Windows.Markup.ContentPropertyAttribute> on the type definition.</span></span> <span data-ttu-id="08b78-418"><xref:System.Xaml.XamlType.BaseType%2A>如果在直接基础类型上找不到属性，它还可以检查特性。</span><span class="sxs-lookup"><span data-stu-id="08b78-418">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="08b78-419">如果这些检查未发现内容类型，则默认实现返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-419">If these checks do not discover a content type, the default implementation returns `null`.</span></span>  
  
 <span data-ttu-id="08b78-420">如果不依赖于默认的内部 CLR 反射，并使用元数据或其他技术报告类型的 XAML 类型系统信息或架构信息，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-420">Override this method if you are not relying on default internal CLR reflection and are using metadata or other techniques for reporting the XAML type system information or schema information of a type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupContentWrappers">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupContentWrappers ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; LookupContentWrappers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupContentWrappers" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupContentWrappers () As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ LookupContentWrappers();" />
      <MemberSignature Language="F#" Value="abstract member LookupContentWrappers : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;&#xA;override this.LookupContentWrappers : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="xamlType.LookupContentWrappers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-421">获取 <see cref="T:System.Xaml.XamlType" /> 值的列表，这些值表示此 <see cref="T:System.Xaml.XamlType" /> 的内容包装。</span><span class="sxs-lookup"><span data-stu-id="08b78-421">Gets a list of <see cref="T:System.Xaml.XamlType" /> values that represent the content wrappers for this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-422"><see cref="T:System.Xaml.XamlType" /> 值的列表，这些值表示此 <see cref="T:System.Xaml.XamlType" /> 的内容包装。</span><span class="sxs-lookup"><span data-stu-id="08b78-422">A list of <see cref="T:System.Xaml.XamlType" /> values that represent the content wrappers for this <see cref="T:System.Xaml.XamlType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-423">当集合中使用的类型与类型系统不连续时，内容包装是一个表示内容集合类型的类。</span><span class="sxs-lookup"><span data-stu-id="08b78-423">A content wrapper is a class that represents the content collection type when the types that are used in that collection are not contiguous to the type system.</span></span> <span data-ttu-id="08b78-424">内容包装的集合项的类型应在某种程度上受到限制， <xref:System.Object> 或与非特定对象等效。</span><span class="sxs-lookup"><span data-stu-id="08b78-424">The types of collection items for the content wrapper are expected to be limited in some manner beyond <xref:System.Object> or a neutral object equivalent.</span></span> <span data-ttu-id="08b78-425">但是，此限制仅由使用该类型的属性的设计或用途而非类型系统强制实施。</span><span class="sxs-lookup"><span data-stu-id="08b78-425">However, this limitation is only enforced by the design or purpose of the properties that use that type, and not by the type system.</span></span> <span data-ttu-id="08b78-426">类型上可以存在多个内容包装。</span><span class="sxs-lookup"><span data-stu-id="08b78-426">More than one content wrapper can exist on a type.</span></span>  
  
 <span data-ttu-id="08b78-427">有关 WPF XAML 实现中的示例类和方案，请参阅 <xref:System.Windows.Documents.InlineCollection> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-427">For an example class and scenario from the WPF XAML implementation, see <xref:System.Windows.Documents.InlineCollection>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupCustomAttributeProvider">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupCustomAttributeProvider" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupCustomAttributeProvider () As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::ICustomAttributeProvider ^ LookupCustomAttributeProvider();" />
      <MemberSignature Language="F#" Value="abstract member LookupCustomAttributeProvider : unit -&gt; System.Reflection.ICustomAttributeProvider&#xA;override this.LookupCustomAttributeProvider : unit -&gt; System.Reflection.ICustomAttributeProvider" Usage="xamlType.LookupCustomAttributeProvider " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-428">在派生类中实现时，返回 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="08b78-428">When implemented in a derived class, returns an <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation.</span></span></summary>
        <returns><span data-ttu-id="08b78-429"><see cref="T:System.Reflection.ICustomAttributeProvider" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="08b78-429">An <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-430">重写此方法以使用替代方法获取内部反射，以获取 CLR 特性值。</span><span class="sxs-lookup"><span data-stu-id="08b78-430">Override this method to provide the internal reflection with an alternative way to obtain CLR attribute values.</span></span> <span data-ttu-id="08b78-431">在没有重写的情况下，内部反射器使用典型的 CLR 反射逻辑。</span><span class="sxs-lookup"><span data-stu-id="08b78-431">In absence of an override, the internal reflector uses typical CLR reflection logic.</span></span>  
  
 <span data-ttu-id="08b78-432">默认实现返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="08b78-432">The default implementation returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupDeferringLoader">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupDeferringLoader" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupDeferringLoader () As XamlValueConverter(Of XamlDeferringLoader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ LookupDeferringLoader();" />
      <MemberSignature Language="F#" Value="abstract member LookupDeferringLoader : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;&#xA;override this.LookupDeferringLoader : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;" Usage="xamlType.LookupDeferringLoader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-433">返回一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，该对象用于 XAML 声明的对象的延迟加载。</span><span class="sxs-lookup"><span data-stu-id="08b78-433">Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for deferred loading of XAML-declared objects.</span></span></summary>
        <returns><span data-ttu-id="08b78-434">对泛型具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.Xaml.XamlDeferringLoader" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-434">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> that has a <see cref="T:System.Xaml.XamlDeferringLoader" /> constraint on the generic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-435">当调用方从获取值时，可以调用此方法 <xref:System.Xaml.XamlType.DeferringLoader%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-435">This method can be invoked when a caller gets a value from <xref:System.Xaml.XamlType.DeferringLoader%2A>.</span></span> <span data-ttu-id="08b78-436">如果要 <xref:System.Xaml.XamlType.DeferringLoader%2A> 返回的值不同于默认内部反射启用的，并且还提供自定义信息，请重写此方法 <xref:System.Xaml.Schema.XamlTypeInvoker> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-436">Override this method if you want <xref:System.Xaml.XamlType.DeferringLoader%2A> to return a different value than is enabled by default internal reflection and are also providing custom <xref:System.Xaml.Schema.XamlTypeInvoker> information.</span></span>  
  
 <span data-ttu-id="08b78-437">默认实现通过读取来返回对象 <xref:System.Windows.Markup.XamlDeferLoadAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-437">The default implementation returns an object on the basis of reading <xref:System.Windows.Markup.XamlDeferLoadAttribute>.</span></span> <span data-ttu-id="08b78-438"><xref:System.Xaml.XamlType.BaseType%2A>如果在直接基础类型上找不到属性，它还可以检查特性。</span><span class="sxs-lookup"><span data-stu-id="08b78-438">It can also  check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="08b78-439">如果某个值不可用，则此方法返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-439">If a value is unavailable, this method returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupInvoker">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlTypeInvoker LookupInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlTypeInvoker LookupInvoker() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupInvoker" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupInvoker () As XamlTypeInvoker" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlTypeInvoker ^ LookupInvoker();" />
      <MemberSignature Language="F#" Value="abstract member LookupInvoker : unit -&gt; System.Xaml.Schema.XamlTypeInvoker&#xA;override this.LookupInvoker : unit -&gt; System.Xaml.Schema.XamlTypeInvoker" Usage="xamlType.LookupInvoker " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlTypeInvoker</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-440">返回与此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 关联的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-440">Returns a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is associated with this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-441">此 <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> 的 <see cref="T:System.Xaml.XamlType" /> 信息；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-441">The <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> information for this <see cref="T:System.Xaml.XamlType" />; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-442">可以通过调用来调用此方法 <xref:System.Xaml.XamlType.Invoker%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-442">This method can be invoked by calls to <xref:System.Xaml.XamlType.Invoker%2A>.</span></span>  
  
 <span data-ttu-id="08b78-443">默认实现不要求 <xref:System.Xaml.XamlType> 使用传递初始的构造函数之一来构造 <xref:System.Xaml.Schema.XamlTypeInvoker> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-443">The default implementation does not require that a <xref:System.Xaml.XamlType> be constructed by using one of the constructors that pass an initial <xref:System.Xaml.Schema.XamlTypeInvoker>.</span></span> <span data-ttu-id="08b78-444">但是， <xref:System.Xaml.XamlType.UnderlyingType%2A> 的值必须为 <xref:System.Xaml.XamlType> ; 否则，默认实现返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-444">However, an <xref:System.Xaml.XamlType.UnderlyingType%2A> value must exist for the <xref:System.Xaml.XamlType>; otherwise, the default implementation returns `null`.</span></span>  
  
 <span data-ttu-id="08b78-445">如果还从创建派生类 <xref:System.Xaml.Schema.XamlTypeInvoker> 并希望返回派生类，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-445">Override this method if you also create a derived class from <xref:System.Xaml.Schema.XamlTypeInvoker> and intend to return the derived class.</span></span> <span data-ttu-id="08b78-446">如果返回 `null` ，则 <xref:System.Xaml.XamlType.Invoker%2A> 返回 <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType> 到调用方。</span><span class="sxs-lookup"><span data-stu-id="08b78-446">If you return `null`, <xref:System.Xaml.XamlType.Invoker%2A> returns <xref:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker%2A?displayProperty=nameWithType> to callers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsAmbient">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsAmbient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsAmbient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsAmbient" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsAmbient () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsAmbient();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsAmbient : unit -&gt; bool&#xA;override this.LookupIsAmbient : unit -&gt; bool" Usage="xamlType.LookupIsAmbient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-447">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示环境类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-447">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents an ambient type, as per the XAML definition.</span></span></summary>
        <returns><span data-ttu-id="08b78-448">如果此 <see cref="T:System.Xaml.XamlType" /> 表示环境类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-448"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents an ambient type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-449">可以通过调用来调用此方法 <xref:System.Xaml.XamlType.IsAmbient%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-449">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsAmbient%2A>.</span></span>  
  
 <span data-ttu-id="08b78-450">默认实现使用上的 CLR 反射 <xref:System.Xaml.XamlType.UnderlyingType%2A> ，并可检查基类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-450">The default implementation uses CLR reflection on the <xref:System.Xaml.XamlType.UnderlyingType%2A> and can check the base types.</span></span> <span data-ttu-id="08b78-451">此实现将检查 <xref:System.Windows.Markup.AmbientAttribute> 应用于类级别的相关类型定义的，并 `true` 在此情况下返回。</span><span class="sxs-lookup"><span data-stu-id="08b78-451">This implementation checks for the <xref:System.Windows.Markup.AmbientAttribute> that is applied to the relevant type's definition at the class level and returns `true` in this case.</span></span> <span data-ttu-id="08b78-452">所有其他情况都返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-452">All other cases return `false`.</span></span>  
  
 <span data-ttu-id="08b78-453">如果要 <xref:System.Xaml.XamlType.IsAmbient%2A> 返回的值不同于默认的内部反射，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-453">Override this method if you want <xref:System.Xaml.XamlType.IsAmbient%2A> to return a different value than is enabled by default internal reflection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsConstructible">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsConstructible ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsConstructible() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsConstructible" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsConstructible () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsConstructible();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsConstructible : unit -&gt; bool&#xA;override this.LookupIsConstructible : unit -&gt; bool" Usage="xamlType.LookupIsConstructible " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-454">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示可构造类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-454">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a constructible type, as per the XAML definition.</span></span></summary>
        <returns><span data-ttu-id="08b78-455">如果此 <see cref="T:System.Xaml.XamlType" /> 表示可构造类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-455"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a constructible type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-456">可以通过调用来调用此方法 <xref:System.Xaml.XamlType.IsConstructible%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-456">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsConstructible%2A>.</span></span>  
  
 <span data-ttu-id="08b78-457">默认实现使用上的 CLR 反射 <xref:System.Xaml.XamlType.UnderlyingType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-457">The default implementation uses CLR reflection on the <xref:System.Xaml.XamlType.UnderlyingType%2A>.</span></span> <span data-ttu-id="08b78-458">类型必须为具体、非嵌套并已关闭。</span><span class="sxs-lookup"><span data-stu-id="08b78-458">The type must be concrete, non-nested, and closed.</span></span> <span data-ttu-id="08b78-459">默认实现检查类型是否为值类型和的返回值 <xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-459">The default implementation checks whether the type is a value type and the return of <xref:System.Xaml.XamlType.ConstructionRequiresArguments%2A>.</span></span> <span data-ttu-id="08b78-460">对于 null <xref:System.Xaml.XamlType.UnderlyingType%2A> ，此方法返回 `true` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-460">For a null <xref:System.Xaml.XamlType.UnderlyingType%2A>, this method returns `true`.</span></span>  
  
 <span data-ttu-id="08b78-461">如果要 <xref:System.Xaml.XamlType.IsConstructible%2A> 返回的值不同于默认的内部反射，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-461">Override this method if you want <xref:System.Xaml.XamlType.IsConstructible%2A> to return a different value than is enabled by default internal reflection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsMarkupExtension">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsMarkupExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsMarkupExtension() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsMarkupExtension" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsMarkupExtension () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsMarkupExtension();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsMarkupExtension : unit -&gt; bool&#xA;override this.LookupIsMarkupExtension : unit -&gt; bool" Usage="xamlType.LookupIsMarkupExtension " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-462">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示标记扩展。</span><span class="sxs-lookup"><span data-stu-id="08b78-462">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a markup extension.</span></span></summary>
        <returns><span data-ttu-id="08b78-463">如果此 <see cref="T:System.Xaml.XamlType" /> 表示标记扩展，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-463"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a markup extension; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-464">可以通过调用来调用此方法 <xref:System.Xaml.XamlType.IsMarkupExtension%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-464">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsMarkupExtension%2A>.</span></span>  
  
 <span data-ttu-id="08b78-465">默认实现仅包括此调用：</span><span class="sxs-lookup"><span data-stu-id="08b78-465">The default implementation consists only of this call:</span></span>  
  
 `return CanAssignTo(XamlLanguage.MarkupExtension);`  
  
 <span data-ttu-id="08b78-466">如果要 <xref:System.Xaml.XamlType.IsMarkupExtension%2A> 使用不同的逻辑，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-466">Override this method if you want <xref:System.Xaml.XamlType.IsMarkupExtension%2A> to use different logic.</span></span>  
  
 <span data-ttu-id="08b78-467">在 XAML 规范术语中，此类型必须可分配给，以便为 `x:MarkupExtension` 返回 `true` <xref:System.Xaml.XamlType.IsMarkupExtension%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-467">In XAML specification terms, this type must be assignable to `x:MarkupExtension` in order to return `true` for <xref:System.Xaml.XamlType.IsMarkupExtension%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsNameScope">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsNameScope ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsNameScope() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsNameScope" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsNameScope () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsNameScope();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsNameScope : unit -&gt; bool&#xA;override this.LookupIsNameScope : unit -&gt; bool" Usage="xamlType.LookupIsNameScope " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-468">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示 XAML 名称范围。</span><span class="sxs-lookup"><span data-stu-id="08b78-468">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a XAML namescope, as per the XAML definition.</span></span></summary>
        <returns><span data-ttu-id="08b78-469">如果此 <see cref="T:System.Xaml.XamlType" /> 表示 XAML 名称范围，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-469"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a XAML namescope; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-470">可以通过调用来调用此方法 <xref:System.Xaml.XamlType.IsNameScope%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-470">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsNameScope%2A>.</span></span>  
  
 <span data-ttu-id="08b78-471">默认实现 <xref:System.Xaml.XamlType.CanAssignTo%2A> 间接调用类型 <xref:System.Windows.Markup.INameScope> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-471">The default implementation makes a <xref:System.Xaml.XamlType.CanAssignTo%2A> call indirectly against the type <xref:System.Windows.Markup.INameScope>.</span></span> <span data-ttu-id="08b78-472"><xref:System.Windows.Markup.INameScope> 是在程序集 WindowsBase.dll 中定义的接口。</span><span class="sxs-lookup"><span data-stu-id="08b78-472"><xref:System.Windows.Markup.INameScope> is an interface that is defined in the assembly WindowsBase.dll.</span></span> <span data-ttu-id="08b78-473">Xaml 名称范围标识的这种方法可用于 WPF 和 XAML 的 Windows Workflow Foundation 实现。</span><span class="sxs-lookup"><span data-stu-id="08b78-473">This technique for XAML namescope identification is used both by WPF and Windows Workflow Foundation implementations of XAML.</span></span>  
  
 <span data-ttu-id="08b78-474">如果要 <xref:System.Xaml.XamlType.IsNameScope%2A> 使用不同的逻辑，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-474">Override this method if you want <xref:System.Xaml.XamlType.IsNameScope%2A> to use different logic.</span></span>  
  
 <span data-ttu-id="08b78-475">XAML 命名范围强制执行用于的属性或属性的名称的唯一性 `x:Name`  /  `[name property]` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-475">A XAML namescope enforces the name uniqueness of the property or properties that are used for `x:Name` / `[name property]`.</span></span> <span data-ttu-id="08b78-476">如果 <xref:System.Xaml.XamlType.IsNameScope%2A> 为 `true` ，则应存在一些强制唯一性的机制，并且应从拥有 XAML 名称范围的此类型的角度进行计算。</span><span class="sxs-lookup"><span data-stu-id="08b78-476">If <xref:System.Xaml.XamlType.IsNameScope%2A> is `true`, then some mechanism for enforcing uniqueness should exist and should evaluate from the perspective of this type owning a XAML namescope.</span></span> <span data-ttu-id="08b78-477">然后，XAML 名称范围将扩展到该类型的内容，直到遇到另一个 XAML 名称范围所属类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-477">The XAML namescope then extends to the content of the type until another XAML namescope owning type is encountered.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectWriter.RootNameScope" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsNullable">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsNullable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsNullable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsNullable" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsNullable () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsNullable();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsNullable : unit -&gt; bool&#xA;override this.LookupIsNullable : unit -&gt; bool" Usage="xamlType.LookupIsNullable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-478">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示可以为 null 的类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-478">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a nullable type, as per the XAML definition.</span></span></summary>
        <returns><span data-ttu-id="08b78-479">如果此 <see cref="T:System.Xaml.XamlType" /> 表示可以为 null 的类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-479"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a nullable type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-480">可以通过调用来调用此方法 <xref:System.Xaml.XamlType.IsNullable%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-480">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsNullable%2A>.</span></span>  
  
 <span data-ttu-id="08b78-481">默认实现基于 CLR 核心库可为 null 的概念进行确定，并对其进行检查 <xref:System.Xaml.XamlType.UnderlyingType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-481">The default implementation makes a determination based on the CLR core library nullable concept, checked against <xref:System.Xaml.XamlType.UnderlyingType%2A>.</span></span> <span data-ttu-id="08b78-482">对于 null <xref:System.Xaml.XamlType.UnderlyingType%2A> ，它将返回 `true` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-482">For a null <xref:System.Xaml.XamlType.UnderlyingType%2A>, it returns `true`.</span></span>  
  
 <span data-ttu-id="08b78-483">如果要 <xref:System.Xaml.XamlType.IsNullable%2A> 使用不同的逻辑，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-483">Override this method if you want <xref:System.Xaml.XamlType.IsNullable%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsPublic">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsPublic ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsPublic() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsPublic" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsPublic () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsPublic();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsPublic : unit -&gt; bool&#xA;override this.LookupIsPublic : unit -&gt; bool" Usage="xamlType.LookupIsPublic " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-484">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示相关类型系统中的公共类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-484">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a public type in the relevant type system.</span></span></summary>
        <returns><span data-ttu-id="08b78-485">如果此 <see cref="T:System.Xaml.XamlType" /> 表示公共类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-485"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a public type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-486">可以通过调用来调用此方法 <xref:System.Xaml.XamlType.IsPublic%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-486">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsPublic%2A>.</span></span>  
  
 <span data-ttu-id="08b78-487">默认实现对非 null 使用 CLR 反射 <xref:System.Xaml.XamlType.UnderlyingType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-487">The default implementation uses CLR reflection against a non-null <xref:System.Xaml.XamlType.UnderlyingType%2A>.</span></span> <span data-ttu-id="08b78-488">对于 null <xref:System.Xaml.XamlType.UnderlyingType%2A> ，它将返回 `true` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-488">For a null <xref:System.Xaml.XamlType.UnderlyingType%2A>, it returns `true`.</span></span>  
  
 <span data-ttu-id="08b78-489">如果要 <xref:System.Xaml.XamlType.IsPublic%2A> 使用不同的逻辑，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-489">Override this method if you want <xref:System.Xaml.XamlType.IsPublic%2A> to use different logic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="08b78-490"><xref:System.Xaml.XamlType.LookupIsPublic%2A> 是虚拟的，因此可以重写。</span><span class="sxs-lookup"><span data-stu-id="08b78-490"><xref:System.Xaml.XamlType.LookupIsPublic%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="08b78-491">重写有可能 (出于恶意目的，或者) 更改有关 XAML 类型的报告访问信息，使其不再以预期方式与类型系统或其基础 CLR 类型的访问信息对齐。</span><span class="sxs-lookup"><span data-stu-id="08b78-491">The override has the potential (whether for malicious purposes or otherwise) to change the reported access information about a XAML type so that it no longer aligns in an expected way with the type system or access information of its underlying CLR type.</span></span> <span data-ttu-id="08b78-492">对于分配操作和访问的任何安全关键检查，请改用基础 CLR 类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-492">For any security-critical checks of assignment operations and access, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsUnknown">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsUnknown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsUnknown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsUnknown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsUnknown () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsUnknown();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsUnknown : unit -&gt; bool&#xA;override this.LookupIsUnknown : unit -&gt; bool" Usage="xamlType.LookupIsUnknown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-493">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否表示无法在基础类型系统中解析的类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-493">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a type that cannot be resolved in the underlying type system.</span></span></summary>
        <returns><span data-ttu-id="08b78-494">如果此 <see cref="T:System.Xaml.XamlType" /> 表示不可解析的类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-494"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a nonresolvable type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-495">可以通过调用来调用此方法 <xref:System.Xaml.XamlType.IsUnknown%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-495">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="08b78-496">默认实现可以使用 CLR 反射。</span><span class="sxs-lookup"><span data-stu-id="08b78-496">The default implementation can use CLR reflection.</span></span> <span data-ttu-id="08b78-497">对于 null <xref:System.Xaml.XamlType.UnderlyingType%2A> ，它将返回 `true` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-497">For a null <xref:System.Xaml.XamlType.UnderlyingType%2A>, it returns `true`.</span></span>  
  
 <span data-ttu-id="08b78-498">如果要 <xref:System.Xaml.XamlType.IsUnknown%2A> 使用不同的逻辑，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-498">Override this method if you want <xref:System.Xaml.XamlType.IsUnknown%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsWhitespaceSignificantCollection">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsWhitespaceSignificantCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsWhitespaceSignificantCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsWhitespaceSignificantCollection () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsWhitespaceSignificantCollection();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsWhitespaceSignificantCollection : unit -&gt; bool&#xA;override this.LookupIsWhitespaceSignificantCollection : unit -&gt; bool" Usage="xamlType.LookupIsWhitespaceSignificantCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-499">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XML 定义是否表示空白有意义集合。</span><span class="sxs-lookup"><span data-stu-id="08b78-499">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a whitespace significant collection, as per the XML definition.</span></span></summary>
        <returns><span data-ttu-id="08b78-500">如果此 <see cref="T:System.Xaml.XamlType" /> 表示空白有意义集合，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-500"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a white-space significant collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-501">可以通过调用来调用此方法 <xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-501">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A>.</span></span>  
  
 <span data-ttu-id="08b78-502">默认实现基于读取返回值 <xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-502">The default implementation returns a value based on reading <xref:System.Windows.Markup.WhitespaceSignificantCollectionAttribute>.</span></span> <span data-ttu-id="08b78-503"><xref:System.Xaml.XamlType.BaseType%2A>如果在直接基础类型上找不到属性，还可以检查属性的是否为。</span><span class="sxs-lookup"><span data-stu-id="08b78-503">It can also check the <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="08b78-504">如果值不可用，则返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-504">If a value is not available, it returns `false`.</span></span>  
  
 <span data-ttu-id="08b78-505">如果要 <xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A> 使用不同的逻辑，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-505">Override this method if you want <xref:System.Xaml.XamlType.IsWhitespaceSignificantCollection%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupIsXData">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsXData ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsXData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupIsXData" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsXData () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsXData();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsXData : unit -&gt; bool&#xA;override this.LookupIsXData : unit -&gt; bool" Usage="xamlType.LookupIsXData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-506">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 按照 XAML 定义是否表示 XML <see langword="XDATA" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-506">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents XML <see langword="XDATA" />, as per the XAML definition.</span></span></summary>
        <returns><span data-ttu-id="08b78-507">如果此 <see cref="T:System.Xaml.XamlType" /> 表示 <see langword="true" />，则为 <see langword="XDATA" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-507"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents <see langword="XDATA" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-508">可以通过调用来调用此方法 <xref:System.Xaml.XamlType.IsXData%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-508">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsXData%2A>.</span></span>  
  
 <span data-ttu-id="08b78-509">默认实现 <xref:System.Xaml.XamlType.CanAssignTo%2A> 间接调用类型 <xref:System.Xml.Serialization.IXmlSerializable> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-509">The default implementation makes a <xref:System.Xaml.XamlType.CanAssignTo%2A> call indirectly against the type <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="08b78-510">如果要 <xref:System.Xaml.XamlType.IsXData%2A> 使用不同的逻辑，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-510">Override this method if you want <xref:System.Xaml.XamlType.IsXData%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupItemType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupItemType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupItemType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupItemType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupItemType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupItemType();" />
      <MemberSignature Language="F#" Value="abstract member LookupItemType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupItemType : unit -&gt; System.Xaml.XamlType" Usage="xamlType.LookupItemType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-511">返回一个值，该值为此 <see cref="T:System.Xaml.XamlType" /> 的 <see langword="Items" /> 属性提供类型信息。</span><span class="sxs-lookup"><span data-stu-id="08b78-511">Returns a value that provides the type information for the <see langword="Items" /> property of this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-512">集合中项的类型的 <see cref="T:System.Xaml.XamlType" /> 对象；如果此 <see cref="T:System.Xaml.XamlType" /> 不表示集合，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-512">A <see cref="T:System.Xaml.XamlType" /> object for the type of the items in the collection; otherwise, <see langword="null" /> if this <see cref="T:System.Xaml.XamlType" /> does not represent a collection.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-513">可以通过调用来调用此方法 <xref:System.Xaml.XamlType.ItemType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-513">This method can be invoked by calls to <xref:System.Xaml.XamlType.ItemType%2A>.</span></span>  
  
 <span data-ttu-id="08b78-514">默认实现可以使用 CLR 反射概念，例如通过检查方法并使用检查，并在 `Add` <xref:System.Reflection.MethodInfo> 此处检查 <xref:System.Reflection.ParameterInfo> <xref:System.Xaml.XamlType.IsArray%2A> <xref:System.Xaml.XamlType.BaseType%2A> 和尝试相同的逻辑。</span><span class="sxs-lookup"><span data-stu-id="08b78-514">The default implementation can use CLR reflection concepts, such as checking for an `Add` method by <xref:System.Reflection.MethodInfo> and using the <xref:System.Reflection.ParameterInfo>; checking <xref:System.Xaml.XamlType.IsArray%2A>; and checking <xref:System.Xaml.XamlType.BaseType%2A> and trying the same logic there.</span></span>  
  
 <span data-ttu-id="08b78-515">如果要 <xref:System.Xaml.XamlType.ItemType%2A> 使用不同的逻辑，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-515">Override this method if you want <xref:System.Xaml.XamlType.ItemType%2A> to use different logic.</span></span> <span data-ttu-id="08b78-516"><xref:System.Xaml.XamlType.LookupCollectionKind%2A>返回 <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType> 应返回的情况 `null` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-516">Cases where <xref:System.Xaml.XamlType.LookupCollectionKind%2A> returns <xref:System.Xaml.Schema.XamlCollectionKind.None?displayProperty=nameWithType> should return `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupKeyType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupKeyType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupKeyType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupKeyType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupKeyType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupKeyType();" />
      <MemberSignature Language="F#" Value="abstract member LookupKeyType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupKeyType : unit -&gt; System.Xaml.XamlType" Usage="xamlType.LookupKeyType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-517">如果 <see cref="T:System.Xaml.XamlType" /> 表示字典，则返回一个值，该值为此 <see cref="T:System.Xaml.XamlType" /> 的键属性提供类型信息。</span><span class="sxs-lookup"><span data-stu-id="08b78-517">Returns a value that provides the type information for the key property of this <see cref="T:System.Xaml.XamlType" />, if the <see cref="T:System.Xaml.XamlType" /> represents a dictionary.</span></span></summary>
        <returns><span data-ttu-id="08b78-518">字典用法的键类型的 <see cref="T:System.Xaml.XamlType" /> 对象，或者，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示字典，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-518">A <see cref="T:System.Xaml.XamlType" /> object for the type of the key for dictionary usage, or <see langword="null" /> if this <see cref="T:System.Xaml.XamlType" /> does not represent a dictionary,</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-519">可以通过调用来调用此方法 <xref:System.Xaml.XamlType.KeyType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-519">This method can be invoked by calls to <xref:System.Xaml.XamlType.KeyType%2A>.</span></span>  
  
 <span data-ttu-id="08b78-520">默认实现可以使用 CLR 反射概念，如 `Add` 通过和使用检查方法， <xref:System.Reflection.MethodInfo> 并在 <xref:System.Reflection.ParameterInfo> <xref:System.Xaml.XamlType.BaseType%2A> 此处检查和尝试相同的逻辑。</span><span class="sxs-lookup"><span data-stu-id="08b78-520">The default implementation can use CLR reflection concepts, such as checking for an `Add` method by <xref:System.Reflection.MethodInfo> and using the <xref:System.Reflection.ParameterInfo>; and checking <xref:System.Xaml.XamlType.BaseType%2A> and trying the same logic there.</span></span>  
  
 <span data-ttu-id="08b78-521">如果要 <xref:System.Xaml.XamlType.KeyType%2A> 使用不同的逻辑，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-521">Override this method if you want <xref:System.Xaml.XamlType.KeyType%2A> to use different logic.</span></span> <span data-ttu-id="08b78-522"><xref:System.Xaml.XamlType.LookupCollectionKind%2A>不返回的情况 <xref:System.Xaml.Schema.XamlCollectionKind.Dictionary?displayProperty=nameWithType> 应返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-522">Cases where <xref:System.Xaml.XamlType.LookupCollectionKind%2A> does not return <xref:System.Xaml.Schema.XamlCollectionKind.Dictionary?displayProperty=nameWithType> should return `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupMarkupExtensionReturnType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupMarkupExtensionReturnType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupMarkupExtensionReturnType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupMarkupExtensionReturnType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupMarkupExtensionReturnType();" />
      <MemberSignature Language="F#" Value="abstract member LookupMarkupExtensionReturnType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupMarkupExtensionReturnType : unit -&gt; System.Xaml.XamlType" Usage="xamlType.LookupMarkupExtensionReturnType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-523">如果此 <see cref="T:System.Xaml.XamlType" /> 表示标记扩展，则返回一个为其已返回的 <see langword="ProvideValue" /> 提供类型信息的值。</span><span class="sxs-lookup"><span data-stu-id="08b78-523">Returns a value that provides the type information for the returned <see langword="ProvideValue" /> of this <see cref="T:System.Xaml.XamlType" />, if it represents a markup extension.</span></span></summary>
        <returns><span data-ttu-id="08b78-524">标记扩展用法的返回类型的 <see cref="T:System.Xaml.XamlType" /> 对象；否则，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示标记扩展，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-524">A <see cref="T:System.Xaml.XamlType" /> object for the return type for markup extension usage; otherwise, <see langword="null" />, if this <see cref="T:System.Xaml.XamlType" /> does not represent a markup extension.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-525">可以通过调用来调用此方法 <xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-525">This method can be invoked by calls to <xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A>.</span></span>  
  
 <span data-ttu-id="08b78-526">默认实现 <xref:System.Xaml.XamlType> 在读取时返回 <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-526">The default implementation returns a <xref:System.Xaml.XamlType> on the basis of reading <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute>.</span></span> <span data-ttu-id="08b78-527"><xref:System.Xaml.XamlType.BaseType%2A>如果在直接基础类型上找不到属性，它还可以检查特性。</span><span class="sxs-lookup"><span data-stu-id="08b78-527">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="08b78-528">如果值不可用，则返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-528">If a value is not available, it returns `null`.</span></span>  
  
 <span data-ttu-id="08b78-529">如果要 <xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A> 使用不同的逻辑，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-529">Override this method if you want <xref:System.Xaml.XamlType.MarkupExtensionReturnType%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupMember">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlMember LookupMember (string name, bool skipReadOnlyCheck);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlMember LookupMember(string name, bool skipReadOnlyCheck) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupMember (name As String, skipReadOnlyCheck As Boolean) As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlMember ^ LookupMember(System::String ^ name, bool skipReadOnlyCheck);" />
      <MemberSignature Language="F#" Value="abstract member LookupMember : string * bool -&gt; System.Xaml.XamlMember&#xA;override this.LookupMember : string * bool -&gt; System.Xaml.XamlMember" Usage="xamlType.LookupMember (name, skipReadOnlyCheck)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="skipReadOnlyCheck" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="08b78-530">要获取的成员的名称（字符串形式）。</span><span class="sxs-lookup"><span data-stu-id="08b78-530">The name of the member to get (as a string).</span></span></param>
        <param name="skipReadOnlyCheck"><span data-ttu-id="08b78-531">设置为 <see langword="true" /> 以返回成员，即使该成员的 <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 值为 <see langword="true" />；设置为 <see langword="false" /> 以返回 <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> 成员。</span><span class="sxs-lookup"><span data-stu-id="08b78-531"><see langword="true" /> to return a member even if that member has a <see langword="true" /> value for <see cref="P:System.Xaml.XamlMember.IsReadOnly" />; <see langword="false" /> to not return a <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> member.</span></span> <span data-ttu-id="08b78-532">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-532">The default is <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="08b78-533">从此 <see cref="T:System.Xaml.XamlMember" /> 中返回特定命名成员的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-533">Returns the <see cref="T:System.Xaml.XamlMember" /> for a specific named member from this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-534">如果已找到成员，则为成员的 <see cref="T:System.Xaml.XamlMember" /> 信息；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-534">The <see cref="T:System.Xaml.XamlMember" /> information for the member, if a member was found; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-535">可以通过调用来调用此方法 <xref:System.Xaml.XamlType.GetMember%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-535">This method can be invoked by calls to <xref:System.Xaml.XamlType.GetMember%2A>.</span></span>  
  
 <span data-ttu-id="08b78-536">默认实现根据 <xref:System.Xaml.XamlType> 架构上下文的内部 CLR 反射和计算返回。</span><span class="sxs-lookup"><span data-stu-id="08b78-536">The default implementation returns a <xref:System.Xaml.XamlType> based on internal CLR reflection and evaluation against the schema context.</span></span>  
  
 <span data-ttu-id="08b78-537">如果要 <xref:System.Xaml.XamlType.GetMember%2A> 使用不同的逻辑，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-537">Override this method if you want <xref:System.Xaml.XamlType.GetMember%2A> to use different logic.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="08b78-538"><xref:System.Xaml.XamlType.LookupMember%2A> 是虚拟的，因此可以重写。</span><span class="sxs-lookup"><span data-stu-id="08b78-538"><xref:System.Xaml.XamlType.LookupMember%2A> is virtual, and therefore, can be overridden.</span></span> <span data-ttu-id="08b78-539">重写有可能 (出于恶意目的，或者) 更改 XAML 类型的已报告成员，使其不再按预期方式与 <xref:System.ComponentModel.TypeDescriptor> `Get*` 有关基础 CLR 类型的信息对齐。</span><span class="sxs-lookup"><span data-stu-id="08b78-539">The override has the potential (whether for malicious purposes or otherwise) to change the reported members of a XAML type so that they no longer align in an expected way with the <xref:System.ComponentModel.TypeDescriptor> `Get*` information about the underlying CLR type.</span></span> <span data-ttu-id="08b78-540">对于成员报告的任何安全关键检查，请改用基础 CLR 类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-540">For any security-critical checks of member reporting, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupPositionalParameters">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; LookupPositionalParameters (int parameterCount);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; LookupPositionalParameters(int32 parameterCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupPositionalParameters (parameterCount As Integer) As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ LookupPositionalParameters(int parameterCount);" />
      <MemberSignature Language="F#" Value="abstract member LookupPositionalParameters : int -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;&#xA;override this.LookupPositionalParameters : int -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="xamlType.LookupPositionalParameters parameterCount" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterCount"><span data-ttu-id="08b78-541">您需要其相关信息的特定语法或构造函数模式的计数 (arity)。</span><span class="sxs-lookup"><span data-stu-id="08b78-541">The count (arity) of the particular syntax or constructor mode that you want information about.</span></span></param>
        <summary><span data-ttu-id="08b78-542">对于标记扩展类型，返回此 <see cref="T:System.Xaml.XamlType" /> 的特定标记扩展用法中所支持位置参数的类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-542">For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-543"><see cref="T:System.Xaml.XamlType" /> 值的列表，其中每个此类 <see cref="T:System.Xaml.XamlType" /> 都是该位置在语法中的类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-543">A list of <see cref="T:System.Xaml.XamlType" /> values where each such <see cref="T:System.Xaml.XamlType" /> is the type for that position in the syntax.</span></span> <span data-ttu-id="08b78-544">您必须按照为标记扩展提供标记输入时的相同顺序指定这些类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-544">You must specify those types in the same order when supplying markup input for the markup extension.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-545">可以通过调用来调用此方法 <xref:System.Xaml.XamlType.GetPositionalParameters%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-545">This method can be invoked by calls to <xref:System.Xaml.XamlType.GetPositionalParameters%2A>.</span></span>  
  
 <span data-ttu-id="08b78-546">默认实现使用基于查找构造函数和检查 arity 的内部反射信息。</span><span class="sxs-lookup"><span data-stu-id="08b78-546">The default implementation uses internal reflection information based on finding constructors and checking the arity.</span></span> <span data-ttu-id="08b78-547">如果要 <xref:System.Xaml.XamlType.GetPositionalParameters%2A> 使用不同的逻辑，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-547">Override this method if you want <xref:System.Xaml.XamlType.GetPositionalParameters%2A> to use different logic.</span></span>  
  
 <span data-ttu-id="08b78-548">仅当这 <xref:System.Xaml.XamlType> 表示)  (标记扩展时，此 API 才适用 <xref:System.Xaml.XamlType.IsMarkupExtension%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-548">This API is only relevant if this <xref:System.Xaml.XamlType> represents a markup extension (<xref:System.Xaml.XamlType.IsMarkupExtension%2A> is `true`).</span></span>  
  
 <span data-ttu-id="08b78-549">输入 `parameterCount` 不用于请求特定位置参数的类型。</span><span class="sxs-lookup"><span data-stu-id="08b78-549">The input `parameterCount` is not for requesting the type of a specific positional parameter.</span></span> <span data-ttu-id="08b78-550">它用于指定标记扩展用法的 arity。</span><span class="sxs-lookup"><span data-stu-id="08b78-550">It is for specifying the arity of a markup extension usage.</span></span> <span data-ttu-id="08b78-551">标记扩展用法通常包含多个签名，并使用不同的参数 arity () 位置参数的计数来区分。</span><span class="sxs-lookup"><span data-stu-id="08b78-551">Markup extension usage often has multiple signatures and uses different parameter arity (count) of positional parameters to differentiate.</span></span> <span data-ttu-id="08b78-552">不过，您可以将架构上下文配置为允许重复的 arities，并使用位置参数的类型进行区分。</span><span class="sxs-lookup"><span data-stu-id="08b78-552">However, you can configure a schema context to allow duplicate arities and use types of the positional parameters for differentiation.</span></span> <span data-ttu-id="08b78-553">有关详细信息，请参阅 <xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>。</span><span class="sxs-lookup"><span data-stu-id="08b78-553">For more information, see <xref:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity%2A>.</span></span> <span data-ttu-id="08b78-554">对于特定数量的计数，参数位置和类型可能会有所不同。</span><span class="sxs-lookup"><span data-stu-id="08b78-554">For a specific arity count, the parameter positions and types can vary.</span></span> <span data-ttu-id="08b78-555">若要获取特定 arity 标记扩展用法的位置类型，请首先 <xref:System.Xaml.XamlType.GetPositionalParameters%2A> 使用 arity 计数调用。</span><span class="sxs-lookup"><span data-stu-id="08b78-555">To get the positional type of a specific arity's markup extension usage, you first call <xref:System.Xaml.XamlType.GetPositionalParameters%2A> with the arity count.</span></span> <span data-ttu-id="08b78-556">然后从返回的集合中获取该位置处的项。</span><span class="sxs-lookup"><span data-stu-id="08b78-556">Then get the item at that position from the returned collection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupSetMarkupExtensionHandler">
      <MemberSignature Language="C#" Value="protected virtual EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; LookupSetMarkupExtensionHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt; LookupSetMarkupExtensionHandler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupSetMarkupExtensionHandler () As EventHandler(Of XamlSetMarkupExtensionEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual EventHandler&lt;System::Windows::Markup::XamlSetMarkupExtensionEventArgs ^&gt; ^ LookupSetMarkupExtensionHandler();" />
      <MemberSignature Language="F#" Value="abstract member LookupSetMarkupExtensionHandler : unit -&gt; EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;&#xA;override this.LookupSetMarkupExtensionHandler : unit -&gt; EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;" Usage="xamlType.LookupSetMarkupExtensionHandler " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetMarkupExtensionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-557">返回一个用于标记扩展的 set 操作的处理程序回调。</span><span class="sxs-lookup"><span data-stu-id="08b78-557">Returns a handler callback to use for the set operations of markup extensions.</span></span></summary>
        <returns><span data-ttu-id="08b78-558">用于标记扩展的 set 操作的处理程序回调。</span><span class="sxs-lookup"><span data-stu-id="08b78-558">A handler callback to use for the set operations of markup extensions.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-559">默认实现基于读取返回值 <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-559">The default implementation returns a value based on reading <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>.</span></span> <span data-ttu-id="08b78-560"><xref:System.Xaml.XamlType.BaseType%2A>如果在直接基础类型上找不到属性，它还可以检查特性。</span><span class="sxs-lookup"><span data-stu-id="08b78-560">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="08b78-561">如果某个值不可用，则返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-561">If a value is unavailable, it returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupSetTypeConverterHandler">
      <MemberSignature Language="C#" Value="protected virtual EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; LookupSetTypeConverterHandler ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.EventHandler`1&lt;class System.Windows.Markup.XamlSetTypeConverterEventArgs&gt; LookupSetTypeConverterHandler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupSetTypeConverterHandler" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupSetTypeConverterHandler () As EventHandler(Of XamlSetTypeConverterEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual EventHandler&lt;System::Windows::Markup::XamlSetTypeConverterEventArgs ^&gt; ^ LookupSetTypeConverterHandler();" />
      <MemberSignature Language="F#" Value="abstract member LookupSetTypeConverterHandler : unit -&gt; EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;&#xA;override this.LookupSetTypeConverterHandler : unit -&gt; EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;" Usage="xamlType.LookupSetTypeConverterHandler " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Markup.XamlSetTypeConverterEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-562">返回一个用于类型转换器设置情况的处理程序。</span><span class="sxs-lookup"><span data-stu-id="08b78-562">Returns a handler to use for type converter setting cases.</span></span></summary>
        <returns><span data-ttu-id="08b78-563">一个用于类型转换器设置情况的处理程序。</span><span class="sxs-lookup"><span data-stu-id="08b78-563">A handler to use for type converter setting cases.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-564">默认实现基于读取返回值 <xref:System.Windows.Markup.XamlSetTypeConverterAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-564">The default implementation returns a value based on reading <xref:System.Windows.Markup.XamlSetTypeConverterAttribute>.</span></span> <span data-ttu-id="08b78-565"><xref:System.Xaml.XamlType.BaseType%2A>如果在直接基础类型上找不到属性，它还可以检查特性。</span><span class="sxs-lookup"><span data-stu-id="08b78-565">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="08b78-566">如果某个值不可用，则返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-566">If a value is unavailable, it returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTrimSurroundingWhitespace">
      <MemberSignature Language="C#" Value="protected virtual bool LookupTrimSurroundingWhitespace ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupTrimSurroundingWhitespace() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupTrimSurroundingWhitespace () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupTrimSurroundingWhitespace();" />
      <MemberSignature Language="F#" Value="abstract member LookupTrimSurroundingWhitespace : unit -&gt; bool&#xA;override this.LookupTrimSurroundingWhitespace : unit -&gt; bool" Usage="xamlType.LookupTrimSurroundingWhitespace " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-567">返回一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否应使用修整周围空白的模式进行序列化。</span><span class="sxs-lookup"><span data-stu-id="08b78-567">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> should be serialized using a mode that  trims surrounding whitespace.</span></span></summary>
        <returns><span data-ttu-id="08b78-568">如果此 <see cref="T:System.Xaml.XamlType" /> 应使用修整周围空白的模式进行序列化，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-568"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> should be serialized in a mode that trims surrounding whitespace; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-569">可以通过调用来调用此方法 <xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-569">This method can be invoked by calls to <xref:System.Xaml.XamlType.TrimSurroundingWhitespace%2A>.</span></span>  
  
 <span data-ttu-id="08b78-570">默认实现基于读取返回值 <xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-570">The default implementation returns a value based on reading <xref:System.Windows.Markup.TrimSurroundingWhitespaceAttribute>.</span></span> <span data-ttu-id="08b78-571"><xref:System.Xaml.XamlType.BaseType%2A>如果在直接基础类型上找不到属性，它还可以检查特性。</span><span class="sxs-lookup"><span data-stu-id="08b78-571">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="08b78-572">如果某个值不可用，则返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-572">If a value is unavailable, it returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTypeConverter">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; LookupTypeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; LookupTypeConverter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupTypeConverter" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupTypeConverter () As XamlValueConverter(Of TypeConverter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ LookupTypeConverter();" />
      <MemberSignature Language="F#" Value="abstract member LookupTypeConverter : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;&#xA;override this.LookupTypeConverter : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;" Usage="xamlType.LookupTypeConverter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-573">返回具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.ComponentModel.TypeConverter" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的类型转换行为。</span><span class="sxs-lookup"><span data-stu-id="08b78-573">Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> that has a <see cref="T:System.ComponentModel.TypeConverter" /> constraint, which represents type-conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-574">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.ComponentModel.TypeConverter" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的类型转换行为；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-574">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.ComponentModel.TypeConverter" /> constraint that represents type-conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-575">可以通过调用来调用此方法 <xref:System.Xaml.XamlType.TypeConverter%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-575">This method can be invoked by calls to <xref:System.Xaml.XamlType.TypeConverter%2A>.</span></span>  
  
 <span data-ttu-id="08b78-576">默认实现基于读取返回值 <xref:System.ComponentModel.TypeConverterAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-576">The default implementation returns a value based on reading <xref:System.ComponentModel.TypeConverterAttribute>.</span></span> <span data-ttu-id="08b78-577"><xref:System.Xaml.XamlType.BaseType%2A>如果在直接基础类型上找不到属性，则默认实现还可以检查特性。</span><span class="sxs-lookup"><span data-stu-id="08b78-577">The default implementation can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="08b78-578">它还包括枚举、常用值类型和泛型的默认转换的特殊逻辑。</span><span class="sxs-lookup"><span data-stu-id="08b78-578">It also includes special logic for default conversion of enumerations, common value types, and generics.</span></span> <span data-ttu-id="08b78-579">如果某个值不可用，则返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-579">If a value is unavailable, it returns `null`.</span></span>  
  
 <span data-ttu-id="08b78-580">如果要 <xref:System.Xaml.XamlType.TypeConverter%2A> 使用不同的逻辑，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-580">Override this method if you want <xref:System.Xaml.XamlType.TypeConverter%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingType">
      <MemberSignature Language="C#" Value="protected virtual Type LookupUnderlyingType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Type LookupUnderlyingType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupUnderlyingType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUnderlyingType () As Type" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual Type ^ LookupUnderlyingType();" />
      <MemberSignature Language="F#" Value="abstract member LookupUnderlyingType : unit -&gt; Type&#xA;override this.LookupUnderlyingType : unit -&gt; Type" Usage="xamlType.LookupUnderlyingType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-581">返回为此 <see cref="T:System.Type" /> 提供支持的 CLR <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-581">Returns the CLR <see cref="T:System.Type" /> that underlies this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-582">为此 <see cref="T:System.Type" /> 提供支持的 CLR <see cref="T:System.Xaml.XamlType" />；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-582">The CLR <see cref="T:System.Type" /> that underlies this <see cref="T:System.Xaml.XamlType" />; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-583">可以通过调用来调用此方法 <xref:System.Xaml.XamlType.UnderlyingType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-583">This method can be invoked by calls to <xref:System.Xaml.XamlType.UnderlyingType%2A>.</span></span>  
  
 <span data-ttu-id="08b78-584">默认实现返回内部字段。</span><span class="sxs-lookup"><span data-stu-id="08b78-584">The default implementation returns an internal field.</span></span> <span data-ttu-id="08b78-585">该字段通常在构造过程中初始化，其值基于调用的构造函数和提供的信息。</span><span class="sxs-lookup"><span data-stu-id="08b78-585">That field is generally initialized during construction and its value is based on which constructor was called and the information that you provided.</span></span>  
  
 <span data-ttu-id="08b78-586">如果要 <xref:System.Xaml.XamlType.UnderlyingType%2A> 使用不同的逻辑，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-586">Override this method if you want <xref:System.Xaml.XamlType.UnderlyingType%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupUsableDuringInitialization">
      <MemberSignature Language="C#" Value="protected virtual bool LookupUsableDuringInitialization ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupUsableDuringInitialization() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupUsableDuringInitialization" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUsableDuringInitialization () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupUsableDuringInitialization();" />
      <MemberSignature Language="F#" Value="abstract member LookupUsableDuringInitialization : unit -&gt; bool&#xA;override this.LookupUsableDuringInitialization : unit -&gt; bool" Usage="xamlType.LookupUsableDuringInitialization " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-587">返回一个值，该值指示在 XAML 初始化过程中是否自上而下生成此 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-587">Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> is built top-down during XAML initialization.</span></span></summary>
        <returns><span data-ttu-id="08b78-588">如果在 XAML 初始化过程中自上而下生成此 <see cref="T:System.Xaml.XamlType" />，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-588"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> is built top-down during XAML initialization; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-589">自顶向下是在创建对象图时模拟 XAML 处理器行为的比喻。</span><span class="sxs-lookup"><span data-stu-id="08b78-589">Top-down is a metaphor that approximates XAML processor behavior when it creates the object graph.</span></span> <span data-ttu-id="08b78-590">当自上而下生成时，会实例化一个类型，并将其附加到父，并设置其属性。</span><span class="sxs-lookup"><span data-stu-id="08b78-590">When built top-down, a type is instantiated, attached to the parent, and has its properties set.</span></span> <span data-ttu-id="08b78-591">自上而下的构造避免多次调用属性更改的处理程序。</span><span class="sxs-lookup"><span data-stu-id="08b78-591">Top-down construction avoids invoking property-changed handlers multiple times.</span></span> <span data-ttu-id="08b78-592">此类处理 ripples 对象图，因此，消除了多个处理程序调用，并为启动对象图提供了性能优化。</span><span class="sxs-lookup"><span data-stu-id="08b78-592">Such handling ripples up the object graph and therefore, eliminates the multiple handler calls and provides a performance optimization for startup of the object graph.</span></span>  
  
 <span data-ttu-id="08b78-593">可以通过调用来调用此方法 <xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-593">This method can be invoked by calls to <xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A>.</span></span>  
  
 <span data-ttu-id="08b78-594">默认实现基于读取返回值 <xref:System.Windows.Markup.UsableDuringInitializationAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-594">The default implementation returns a value based on reading <xref:System.Windows.Markup.UsableDuringInitializationAttribute>.</span></span> <span data-ttu-id="08b78-595"><xref:System.Xaml.XamlType.BaseType%2A>如果在直接基础类型上找不到属性，它还可以检查特性。</span><span class="sxs-lookup"><span data-stu-id="08b78-595">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="08b78-596">如果某个值不可用，则返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-596">If a value is unavailable, it returns `false`.</span></span>  
  
 <span data-ttu-id="08b78-597">如果要 <xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A> 使用不同的逻辑，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-597">Override this method if you want <xref:System.Xaml.XamlType.IsUsableDuringInitialization%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupValueSerializer">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.LookupValueSerializer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupValueSerializer () As XamlValueConverter(Of ValueSerializer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ LookupValueSerializer();" />
      <MemberSignature Language="F#" Value="abstract member LookupValueSerializer : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;&#xA;override this.LookupValueSerializer : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;" Usage="xamlType.LookupValueSerializer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-598">返回具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.Windows.Markup.ValueSerializer" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的值序列化行为。</span><span class="sxs-lookup"><span data-stu-id="08b78-598">Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> that has a <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint, which represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-599">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.Windows.Markup.ValueSerializer" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的值序列化行为；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-599">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint that represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />; otherwise, <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-600">可以通过调用来调用此方法 <xref:System.Xaml.XamlType.ValueSerializer%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-600">This method can be invoked by calls to <xref:System.Xaml.XamlType.ValueSerializer%2A>.</span></span>  
  
 <span data-ttu-id="08b78-601">默认实现基于读取返回值 <xref:System.Windows.Markup.ValueSerializerAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-601">The default implementation returns a value based on reading <xref:System.Windows.Markup.ValueSerializerAttribute>.</span></span> <span data-ttu-id="08b78-602"><xref:System.Xaml.XamlType.BaseType%2A>如果在直接基础类型上找不到属性，它还可以检查特性。</span><span class="sxs-lookup"><span data-stu-id="08b78-602">It can also check <xref:System.Xaml.XamlType.BaseType%2A> for the attribute if no attribute is found on the immediate underlying type.</span></span> <span data-ttu-id="08b78-603">它还包括枚举、常用值类型或泛型的默认序列化的特殊逻辑。</span><span class="sxs-lookup"><span data-stu-id="08b78-603">It also includes special logic for default serialization of enumerations, common value types, or generics.</span></span> <span data-ttu-id="08b78-604">如果某个值不可用，则返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="08b78-604">If a value is unavailable, it returns `null`.</span></span>  
  
 <span data-ttu-id="08b78-605">如果要 <xref:System.Xaml.XamlType.ValueSerializer%2A> 使用不同的逻辑，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="08b78-605">Override this method if you want <xref:System.Xaml.XamlType.ValueSerializer%2A> to use different logic.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkupExtensionReturnType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType MarkupExtensionReturnType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType MarkupExtensionReturnType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.MarkupExtensionReturnType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MarkupExtensionReturnType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ MarkupExtensionReturnType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MarkupExtensionReturnType : System.Xaml.XamlType" Usage="System.Xaml.XamlType.MarkupExtensionReturnType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-606">如果此 <see cref="T:System.Xaml.XamlType" /> 表示标记扩展，则获取一个为其已返回的 <see langword="ProvideValue" /> 提供类型信息的值。</span><span class="sxs-lookup"><span data-stu-id="08b78-606">Gets a value that provides the type information for the returned <see langword="ProvideValue" /> of this <see cref="T:System.Xaml.XamlType" />, if it represents a markup extension.</span></span></summary>
        <value><span data-ttu-id="08b78-607">标记扩展用法的返回类型的 <see cref="T:System.Xaml.XamlType" /> 对象；否则，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示标记扩展，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-607">A <see cref="T:System.Xaml.XamlType" /> object for the return type for markup extension usage; otherwise, <see langword="null" />, if this <see cref="T:System.Xaml.XamlType" /> does not represent a markup extension.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-608">此属性仅在以下情况下才相关 <xref:System.Xaml.XamlType> ：这表示标记扩展 (`x:MarkupExtension` 位于可分配的类型列表中) 。</span><span class="sxs-lookup"><span data-stu-id="08b78-608">This property is only relevant if this <xref:System.Xaml.XamlType> represents a markup extension (`x:MarkupExtension` is in the assignable types list).</span></span>  
  
 <span data-ttu-id="08b78-609">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-609">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-610">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-610">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupMarkupExtensionReturnType%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Xaml.XamlType.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-611">获取此 <see cref="T:System.Xaml.XamlType" /> 表示的类型的字符串名称。</span><span class="sxs-lookup"><span data-stu-id="08b78-611">Gets the string name of the type that this <see cref="T:System.Xaml.XamlType" /> represents.</span></span></summary>
        <value><span data-ttu-id="08b78-612">此 XAML 类型的字符串名称。</span><span class="sxs-lookup"><span data-stu-id="08b78-612">The string name of this XAML type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-613">此属性通常获取 (每个签名) 的架构构造名称 <xref:System.Xaml.XamlType.%23ctor%2A> ，或者 <xref:System.Type> ，如果它是使用 CLR 类型系统的相关构造函数构造的，则为的名称。</span><span class="sxs-lookup"><span data-stu-id="08b78-613">This property typically gets the schema-constructed name (per the <xref:System.Xaml.XamlType.%23ctor%2A> signature), or the name of the <xref:System.Type>, if it is constructed by using the pertinent constructor of the CLR type system.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xaml.XamlType xamlType1, class System.Xaml.XamlType xamlType2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (xamlType1 As XamlType, xamlType2 As XamlType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xaml::XamlType ^ xamlType1, System::Xaml::XamlType ^ xamlType2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xaml.XamlType * System.Xaml.XamlType -&gt; bool" Usage="xamlType1 = xamlType2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType1" Type="System.Xaml.XamlType" />
        <Parameter Name="xamlType2" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType1"><span data-ttu-id="08b78-614"><see cref="T:System.Xaml.XamlType" /> 或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-614">A <see cref="T:System.Xaml.XamlType" /> or <see langword="null" />.</span></span></param>
        <param name="xamlType2"><span data-ttu-id="08b78-615"><see cref="T:System.Xaml.XamlType" /> 或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-615">A <see cref="T:System.Xaml.XamlType" /> or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="08b78-616">确定两个指定的 <see cref="T:System.Xaml.XamlType" /> 对象是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="08b78-616">Determines whether two specified <see cref="T:System.Xaml.XamlType" /> objects have the same value.</span></span></summary>
        <returns><span data-ttu-id="08b78-617">如果 <see langword="true" /> 的值与 <paramref name="xamlType1" /> 的值相同，则为 <paramref name="xamlType2" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-617"><see langword="true" /> if the value of <paramref name="xamlType1" /> is the same as the value of <paramref name="xamlType2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xaml.XamlType xamlType1, System.Xaml.XamlType xamlType2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xaml.XamlType xamlType1, class System.Xaml.XamlType xamlType2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (xamlType1 As XamlType, xamlType2 As XamlType) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xaml::XamlType ^ xamlType1, System::Xaml::XamlType ^ xamlType2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xaml.XamlType * System.Xaml.XamlType -&gt; bool" Usage="System.Xaml.XamlType.op_Inequality (xamlType1, xamlType2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType1" Type="System.Xaml.XamlType" />
        <Parameter Name="xamlType2" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType1"><span data-ttu-id="08b78-618"><see cref="T:System.Xaml.XamlType" /> 或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-618">A <see cref="T:System.Xaml.XamlType" /> or <see langword="null" />.</span></span></param>
        <param name="xamlType2"><span data-ttu-id="08b78-619"><see cref="T:System.Xaml.XamlType" /> 或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-619">A <see cref="T:System.Xaml.XamlType" /> or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="08b78-620">确定两个指定的 <see cref="T:System.Xaml.XamlType" /> 对象是否具有不同的值。</span><span class="sxs-lookup"><span data-stu-id="08b78-620">Determines whether two specified <see cref="T:System.Xaml.XamlType" /> objects have different values.</span></span></summary>
        <returns><span data-ttu-id="08b78-621">如果 <paramref name="xamlType1" /> 的值与 <paramref name="xamlType2" /> 的值不同，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-621"><see langword="true" /> if the value of <paramref name="xamlType1" /> is different from the value of <paramref name="xamlType2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredXamlNamespace">
      <MemberSignature Language="C#" Value="public string PreferredXamlNamespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PreferredXamlNamespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.PreferredXamlNamespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreferredXamlNamespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PreferredXamlNamespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PreferredXamlNamespace : string" Usage="System.Xaml.XamlType.PreferredXamlNamespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-622">获取单个 XAML 命名空间，该命名空间是此 <see cref="T:System.Xaml.XamlType" /> 的主 XAML 命名空间。</span><span class="sxs-lookup"><span data-stu-id="08b78-622">Gets the single XAML namespace that is the primary XAML namespace for this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <value><span data-ttu-id="08b78-623">此 XAML 类型的主 XAML 命名空间的标识符（字符串形式）。</span><span class="sxs-lookup"><span data-stu-id="08b78-623">The identifier, as a string, of the primary XAML namespace for this XAML type.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-624">此实现提供与调用相同的值 <xref:System.Xaml.XamlType.GetXamlNamespaces%2A> ，并从返回的可枚举集中获取第一个值字符串。</span><span class="sxs-lookup"><span data-stu-id="08b78-624">This implementation provides the same value as calling <xref:System.Xaml.XamlType.GetXamlNamespaces%2A> and then getting the first value string from the returned enumerable set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlType.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-625">获取用于处理此 <see cref="T:System.Xaml.XamlSchemaContext" /> 的活动 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-625">Gets the active <see cref="T:System.Xaml.XamlSchemaContext" /> for processing this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <value><span data-ttu-id="08b78-626">用于处理此 <see cref="T:System.Xaml.XamlSchemaContext" /> 的活动 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-626">The active <see cref="T:System.Xaml.XamlSchemaContext" /> for processing this <see cref="T:System.Xaml.XamlType" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-627"><xref:System.Xaml.XamlSchemaContext> 构造时是必需的参数项 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-627"><xref:System.Xaml.XamlSchemaContext> is a required parameter entry when constructing a <xref:System.Xaml.XamlType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlType.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xamlType.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="08b78-628">返回此 <see cref="T:System.Xaml.XamlType" /> 的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="08b78-628">Returns a string representation of this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <returns><span data-ttu-id="08b78-629">此 <see cref="T:System.Xaml.XamlType" /> 的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="08b78-629">A string representation of this <see cref="T:System.Xaml.XamlType" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-630">的 <xref:System.Xaml.XamlType> 实现 <xref:System.Object.ToString%2A> 返回 <xref:System.Xaml.XamlType.Name%2A> 的属性 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-630">The <xref:System.Xaml.XamlType> implementation of <xref:System.Object.ToString%2A> returns the <xref:System.Xaml.XamlType.Name%2A> property of the <xref:System.Xaml.XamlType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrimSurroundingWhitespace">
      <MemberSignature Language="C#" Value="public bool TrimSurroundingWhitespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimSurroundingWhitespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.TrimSurroundingWhitespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TrimSurroundingWhitespace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TrimSurroundingWhitespace { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.TrimSurroundingWhitespace : bool" Usage="System.Xaml.XamlType.TrimSurroundingWhitespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-631">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlType" /> 是否具有用于在其内容中修整周围空白的序列化空白处理行为。</span><span class="sxs-lookup"><span data-stu-id="08b78-631">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> has whitespace handling behavior for serialization that trims the surrounding whitespace in its content.</span></span></summary>
        <value><span data-ttu-id="08b78-632">如果此 <see cref="T:System.Xaml.XamlType" /> 表示使用空白修整的类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-632"><see langword="true" /> if this <see cref="T:System.Xaml.XamlType" /> represents a type that uses whitespace trimming; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-633">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-633">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-634">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-634">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeArguments">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt; TypeArguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlType&gt; TypeArguments" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.TypeArguments" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeArguments As IList(Of XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ TypeArguments { System::Collections::Generic::IList&lt;System::Xaml::XamlType ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeArguments : System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;" Usage="System.Xaml.XamlType.TypeArguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlType&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-635">针对此 <see cref="T:System.Xaml.XamlType" /> 表示泛型的情况获取类型参数的列表。</span><span class="sxs-lookup"><span data-stu-id="08b78-635">Gets a list of type arguments for cases where this <see cref="T:System.Xaml.XamlType" /> represents a generic.</span></span></summary>
        <value><span data-ttu-id="08b78-636">类型参数类型的列表；否则，如果此 <see cref="T:System.Xaml.XamlType" /> 不表示泛型，则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-636">A list of type argument types; otherwise, <see langword="null" />, if this <see cref="T:System.Xaml.XamlType" /> does not represent a generic.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-637">在某些情况下，调用参数的情况会 <xref:System.Xaml.XamlType> <xref:System.Xaml.XamlType.TypeArguments%2A> 返回一个列表，其中的类型仍处于打开状态。</span><span class="sxs-lookup"><span data-stu-id="08b78-637">There are certain scenarios for a <xref:System.Xaml.XamlType> where calling the <xref:System.Xaml.XamlType.TypeArguments%2A> parameter returns a list where the types are still open.</span></span> <span data-ttu-id="08b78-638">在这种情况下，一个或多个返回 <xref:System.Xaml.XamlType> 值将具有占位符值 <xref:System.Xaml.XamlType.Name%2A?displayProperty=nameWithType> ，例如 `T` ，表示泛型仍处于打开状态。</span><span class="sxs-lookup"><span data-stu-id="08b78-638">In this case, one or more of the returned <xref:System.Xaml.XamlType> values will have placeholder values for <xref:System.Xaml.XamlType.Name%2A?displayProperty=nameWithType>, such as `T`, to represent that the generic is still open.</span></span> <span data-ttu-id="08b78-639">如果从对的调用中获取 <xref:System.Xaml.XamlType> <xref:System.Xaml.XamlSchemaContext.GetXamlType%2A> ，而不是从 XAML 读取器实现中获取，则会发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="08b78-639">This scenario can occur if you get a <xref:System.Xaml.XamlType> from a call to <xref:System.Xaml.XamlSchemaContext.GetXamlType%2A>, instead of from a XAML reader implementation.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeConverter">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; TypeConverter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; TypeConverter" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.TypeConverter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeConverter As XamlValueConverter(Of TypeConverter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ TypeConverter { System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeConverter : System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;" Usage="System.Xaml.XamlType.TypeConverter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-640">获取一个具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.ComponentModel.TypeConverter" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的类型转换行为。</span><span class="sxs-lookup"><span data-stu-id="08b78-640">Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.ComponentModel.TypeConverter" /> constraint that represents type conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <value><span data-ttu-id="08b78-641">一个具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.ComponentModel.TypeConverter" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的类型转换行为。</span><span class="sxs-lookup"><span data-stu-id="08b78-641">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.ComponentModel.TypeConverter" /> constraint that represents type conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-642">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupTypeConverter%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-642">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupTypeConverter%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-643">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupTypeConverter%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-643">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupTypeConverter%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingType">
      <MemberSignature Language="C#" Value="public Type UnderlyingType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.UnderlyingType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ UnderlyingType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingType : Type" Usage="System.Xaml.XamlType.UnderlyingType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-644">获取为此 <see cref="T:System.Type" /> 提供支持的 CLR <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-644">Gets the CLR <see cref="T:System.Type" /> that underlies this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <value><span data-ttu-id="08b78-645">为此 <see cref="T:System.Type" /> 提供支持的 CLR <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-645">The CLR <see cref="T:System.Type" /> that underlies this <see cref="T:System.Xaml.XamlType" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueSerializer">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; ValueSerializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; ValueSerializer" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlType.ValueSerializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSerializer As XamlValueConverter(Of ValueSerializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ ValueSerializer { System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSerializer : System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;" Usage="System.Xaml.XamlType.ValueSerializer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08b78-646">获取具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.Windows.Markup.ValueSerializer" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的值序列化行为。</span><span class="sxs-lookup"><span data-stu-id="08b78-646">Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint that represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />.</span></span></summary>
        <value><span data-ttu-id="08b78-647">具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.Windows.Markup.ValueSerializer" />，该约束表示此 <see cref="T:System.Xaml.XamlType" /> 的值的值序列化行为；否则为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="08b78-647">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint that represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />; otherwise, <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08b78-648">如果不使用默认的内部 CLR 反射技术 <xref:System.Xaml.XamlType> ，则对此属性的调用可以调用 <xref:System.Xaml.XamlType.LookupValueSerializer%2A> 派生类的重写 <xref:System.Xaml.XamlType> 。</span><span class="sxs-lookup"><span data-stu-id="08b78-648">If you do not use the default internal CLR reflection technique for a <xref:System.Xaml.XamlType>, calls to this property can invoke <xref:System.Xaml.XamlType.LookupValueSerializer%2A> overrides on <xref:System.Xaml.XamlType> derived classes.</span></span> <span data-ttu-id="08b78-649">有关返回值和其他行为的详细信息，请参阅有关 <xref:System.Xaml.XamlType.LookupValueSerializer%2A> 此类型的文档。</span><span class="sxs-lookup"><span data-stu-id="08b78-649">For more information about return values and other behavior, see the documentation for <xref:System.Xaml.XamlType.LookupValueSerializer%2A> on this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
