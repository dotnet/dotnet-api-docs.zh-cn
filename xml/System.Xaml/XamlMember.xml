<Type Name="XamlMember" FullName="System.Xaml.XamlMember">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ea871443b38f7423f01d37fee370ec94c724358a" /><Meta Name="ms.sourcegitcommit" Value="0bd9d099f2522ef14c6f48a8ea5f2c0650df0f6f" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="10/15/2020" /><Meta Name="ms.locfileid" Value="92087037" /></Metadata><TypeSignature Language="C#" Value="public class XamlMember : IEquatable&lt;System.Xaml.XamlMember&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlMember extends System.Object implements class System.IEquatable`1&lt;class System.Xaml.XamlMember&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlMember" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlMember&#xA;Implements IEquatable(Of XamlMember)" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlMember : IEquatable&lt;System::Xaml::XamlMember ^&gt;" />
  <TypeSignature Language="F#" Value="type XamlMember = class&#xA;    interface IEquatable&lt;XamlMember&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.Xaml.XamlMember&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="c0d4d-101">为 XAML 类型的成员提供 XAML 类型系统标识符。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-101">Provides the XAML type system identifier for members of XAML types.</span></span> <span data-ttu-id="c0d4d-102">该标识符由 XAML 读取器和 XAML 编写器在处理成员节点的过程中使用（如果 XAML 读取器位于 <see cref="F:System.Xaml.XamlNodeType.StartMember" /> 上），另外还用于常规 XAML 类型系统逻辑。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-102">The identifier is used by XAML readers and XAML writers during processing of member nodes (when the XAML reader is positioned on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />) and also for general XAML type system logic.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-103"><xref:System.Xaml.XamlMember> 可以使用三种方法来返回有关 XAML 成员的信息：标准公共语言运行时 (CLR) 反射;调用使用经过优化的位标志的内部 Api 的仅引用反射技术;或调入 `Lookup*` 可能子类提供的 API 的虚拟覆盖 <xref:System.Xaml.XamlMember> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-103"><xref:System.Xaml.XamlMember> can use three methodologies for returning information about a XAML member: standard common language runtime (CLR) reflection; a reference-only reflection technique calling internal APIs that use optimized bit flags; or calling into virtual overrides of the `Lookup*` API that is provided by possible <xref:System.Xaml.XamlMember> subclasses.</span></span> <span data-ttu-id="c0d4d-104">若要在大多数情况下使用 .NET Framework XAML 服务 Api 和 <xref:System.Xaml.XamlMember> API，请使用默认的 xaml 架构上下文。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-104">For most uses of .NET Framework XAML Services APIs and the <xref:System.Xaml.XamlMember> API, you use the default XAML schema context.</span></span> <span data-ttu-id="c0d4d-105">.NET Framework XAML 服务的默认 XAML 架构上下文将 CLR 支持用于类型系统。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-105">The default XAML schema context for .NET Framework XAML Services uses CLR backing for the type system.</span></span> <span data-ttu-id="c0d4d-106">这使得 XAML 读取器和 XAML 编写器可以使用在中定义的任何类型或成员，也可用于 CLR 及其反射技术。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-106">This enables the XAML readers and XAML writers to work with any type or member that is defined in, or otherwise available to, the CLR and its reflection techniques.</span></span>  
  
## <a name="lookup-apis-and-xamlmember-derived-classes"></a><span data-ttu-id="c0d4d-107">Lookup \* Api 和 XamlMember 派生类</span><span class="sxs-lookup"><span data-stu-id="c0d4d-107">Lookup\* APIs and XamlMember Derived Classes</span></span>  
 <span data-ttu-id="c0d4d-108"><xref:System.Xaml.XamlMember> 定义派生类可能重写的若干虚拟成员。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-108"><xref:System.Xaml.XamlMember> defines several virtual members that derived classes might override.</span></span> <span data-ttu-id="c0d4d-109">这些成员具有始终以字符串开头的名称 `Lookup` 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-109">These members have names that always start with the string `Lookup`.</span></span> <span data-ttu-id="c0d4d-110">然后，API 名称的其余部分引用该虚拟方法所影响的属性。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-110">The remainder of the API name then references the property that the virtual method influences.</span></span> <span data-ttu-id="c0d4d-111">例如， <xref:System.Xaml.XamlMember> 派生类可以重写， <xref:System.Xaml.XamlMember.LookupTargetType%2A> 以影响基定义属性 <xref:System.Xaml.XamlMember.TargetType%2A> 在派生类中返回的内容。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-111">For example, a <xref:System.Xaml.XamlMember> derived class might override <xref:System.Xaml.XamlMember.LookupTargetType%2A> to influence what the base-defined property <xref:System.Xaml.XamlMember.TargetType%2A> returns in a derived class.</span></span> <span data-ttu-id="c0d4d-112"><xref:System.Xaml.XamlMember>通过阅读相关方法的文档，可以预测或现有派生类中的此类属性的返回值 `Lookup*` 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-112">You can predict return values for such properties in <xref:System.Xaml.XamlMember> or existing derived classes by reading the documentation for the relevant `Lookup*` methods.</span></span>  
  
 <span data-ttu-id="c0d4d-113">方法的用途 `Lookup*` 是提供一个包含基类的 XAML 类型系统扩展技术 <xref:System.Xaml.XamlMember> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-113">The purpose of the `Lookup*` methods is to provide a XAML type system extension technique that incorporates the <xref:System.Xaml.XamlMember> base class.</span></span> <span data-ttu-id="c0d4d-114">通过从 <xref:System.Xaml.XamlMember> 和重写 `Lookup` 虚拟成员，您可以为 xaml 类型系统中的 xaml 架构定义 xaml 成员的概念，而不会绑定到后备类型系统或技术的具体内容。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-114">By deriving from <xref:System.Xaml.XamlMember> and overriding the `Lookup` virtual members, you can define the concept of a XAML member for a XAML schema in a XAML type system without being tied to the specifics of a backing type system or technology.</span></span> <span data-ttu-id="c0d4d-115">您还可以在此方案下使用提供的 XAML 架构上下文，并且仍返回所需的结果。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-115">You can also use a provided XAML schema context under this scheme and still return the results you want.</span></span>  
  
 <span data-ttu-id="c0d4d-116">例如，请考虑 <xref:System.Xaml.XamlMember> 属性 <xref:System.Xaml.XamlMember.IsWritePublic%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-116">As an example, consider the <xref:System.Xaml.XamlMember> property <xref:System.Xaml.XamlMember.IsWritePublic%2A>.</span></span> <span data-ttu-id="c0d4d-117">此属性通知调用方，如使用 <xref:System.Xaml.XamlWriter> 进行序列化等操作可以为目标对象上的此成员写入值。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-117">This property informs callers that operations such as using a <xref:System.Xaml.XamlWriter> for serialization can write a value for this member on a target object.</span></span> <span data-ttu-id="c0d4d-118">在默认实现中，确定成员是否可写是通过对后备 CLR 使用反射技术 <xref:System.Type> ，并将其成员 () 来实现的 <xref:System.Reflection.MemberInfo> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-118">In the default implementation, the determination of whether the member is writable is made by using reflection techniques against the backing CLR <xref:System.Type> and its members (the <xref:System.Reflection.MemberInfo>).</span></span> <span data-ttu-id="c0d4d-119">因此，默认情况下，XAML 类型系统依赖于 CLR 类型系统。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-119">Therefore, by default, the XAML type system depends on the CLR type system.</span></span> <span data-ttu-id="c0d4d-120">但是，你可以 <xref:System.Xaml.XamlMember.IsWritePublic%2A> 通过重写 API 来删除 XAML 类型系统报告的依赖关系 <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-120">However, you can remove this dependency for your XAML type system reporting of <xref:System.Xaml.XamlMember.IsWritePublic%2A> by overriding the API <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>.</span></span> <span data-ttu-id="c0d4d-121">在重写中，可以使用其他确定，例如特定于技术的元数据、针对固定 XAML 词汇进行了优化的主查找表或用于确定 xaml 成员在 XAML 词汇中是否可写的各种其他策略。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-121">Within your override, you can use other determinations, such as metadata that is specific to your technology, a master lookup table that is optimized for a fixed XAML vocabulary, or a variety of other strategies for determining whether a XAML member is writable in your XAML vocabulary.</span></span>  
  
## <a name="constructing-xamlmember-without-xaml-schema-context"></a><span data-ttu-id="c0d4d-122">构造没有 XAML 架构上下文的 XamlMember</span><span class="sxs-lookup"><span data-stu-id="c0d4d-122">Constructing XamlMember Without XAML Schema Context</span></span>  
 <span data-ttu-id="c0d4d-123">大多数构造函数都 <xref:System.Xaml.XamlMember> 需要 <xref:System.Xaml.XamlSchemaContext> 作为其初始化的一部分。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-123">Most constructors of <xref:System.Xaml.XamlMember> require a <xref:System.Xaml.XamlSchemaContext> as part of their initialization.</span></span> <span data-ttu-id="c0d4d-124"><xref:System.Xaml.XamlSchemaContext>许多内部 <xref:System.Xaml.XamlSchemaContext> 操作（例如，获取从支持类型转发的信息）也需要。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-124">The <xref:System.Xaml.XamlSchemaContext> is also necessary for many internal <xref:System.Xaml.XamlSchemaContext> operations, such as obtaining information that is being forwarded from the backing type.</span></span> <span data-ttu-id="c0d4d-125">使用 <xref:System.Xaml.XamlMember> API 时，通常具有 <xref:System.Xaml.XamlSchemaContext> 可从周围构造（如）获取的 <xref:System.Xaml.XamlWriter> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-125">When you are working with the <xref:System.Xaml.XamlMember> API, you typically have a <xref:System.Xaml.XamlSchemaContext> that is available from a surrounding construct such as a <xref:System.Xaml.XamlWriter>.</span></span> <span data-ttu-id="c0d4d-126">在这种情况下，可以将 <xref:System.Xaml.XamlSchemaContext> 引用传递到需要 xaml 架构上下文的所有 XAML 类型系统调用。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-126">In this case, you can pass the <xref:System.Xaml.XamlSchemaContext> reference through to all XAML type system calls that require a XAML schema context.</span></span>  
  
 <span data-ttu-id="c0d4d-127">一个特定构造函数 <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> 不需要 <xref:System.Xaml.XamlSchemaContext> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-127">One specific constructor, <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>, does not require a <xref:System.Xaml.XamlSchemaContext>.</span></span> <span data-ttu-id="c0d4d-128">但是， <xref:System.Xaml.XamlMember> 使用签名构造的将 <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> `true` 为返回 <xref:System.Xaml.XamlMember.IsUnknown%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-128">However, a <xref:System.Xaml.XamlMember> that is constructed with the <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> signature returns `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="c0d4d-129">对于涉及的加载路径 <xref:System.Xaml.XamlObjectWriter> ，此类成员不能写入对象图。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-129">For a load path that involves <xref:System.Xaml.XamlObjectWriter>, such a member cannot be written into an object graph.</span></span> <span data-ttu-id="c0d4d-130">使用 .NET Framework XAML 服务实现， <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> <xref:System.Xaml.XamlObjectWriterException> 当的相关报表时，调用将 <xref:System.Xaml.XamlMember> 引发 `true` <xref:System.Xaml.XamlMember.IsUnknown%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-130">Using the .NET Framework XAML services implementation, the <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> call throws a <xref:System.Xaml.XamlObjectWriterException> when the relevant <xref:System.Xaml.XamlMember> reports `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="c0d4d-131">您不应构造一个 <xref:System.Xaml.XamlMember> 具有值的， `true` <xref:System.Xaml.XamlMember.IsUnknown%2A> 除非您的实现可以处理中的异常 <xref:System.Xaml.XamlObjectWriter> ，或者您可以使用其他方法来调整 <xref:System.Xaml.XamlObjectWriter> 行为。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-131">You should not construct a <xref:System.Xaml.XamlMember> that has a value of `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A> unless your implementation can handle the exceptions from <xref:System.Xaml.XamlObjectWriter>, or you have other ways to adjust the <xref:System.Xaml.XamlObjectWriter> behavior.</span></span> <span data-ttu-id="c0d4d-132">例如，以下一项或多项操作可能适用于你的实现：</span><span class="sxs-lookup"><span data-stu-id="c0d4d-132">For example, one or more of the  following might be true of your implementation:</span></span>  
  
-   <span data-ttu-id="c0d4d-133">XAML 架构上下文稍后会提供。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-133">The XAML schema context is available later.</span></span>  
  
-   <span data-ttu-id="c0d4d-134">你使用成员调用程序模式。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-134">You use a member invoker pattern.</span></span>  
  
-   <span data-ttu-id="c0d4d-135">您 <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> 在自定义 XAML 编写器中有意重写。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-135">You deliberately override <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> in a custom XAML writer.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlType" />
    <altmember cref="T:System.Xaml.XamlDirective" />
    <altmember cref="T:System.Xaml.XamlObjectWriter" />
    <related type="Article" href="/dotnet/desktop-wpf/xaml-services/understanding-xaml-node-stream-structures-and-concepts"><span data-ttu-id="c0d4d-136">了解 XAML 节点流结构和概念</span><span class="sxs-lookup"><span data-stu-id="c0d4d-136">Understanding XAML Node Stream Structures and Concepts</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0d4d-137">初始化 <see cref="T:System.Xaml.XamlMember" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-137">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.EventInfo eventInfo, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventInfo As EventInfo, schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::Reflection::EventInfo ^ eventInfo, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : System.Reflection.EventInfo * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (eventInfo, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="eventInfo" Type="System.Reflection.EventInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="eventInfo"><span data-ttu-id="c0d4d-138">用于表示事件成员的 CLR 类型系统 <see cref="T:System.Reflection.EventInfo" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-138">The CLR type system <see cref="T:System.Reflection.EventInfo" /> that represents the event member.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="c0d4d-139">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-139">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <summary><span data-ttu-id="c0d4d-140">使用 CLR 类型系统 <see cref="T:System.Xaml.XamlMember" /> 和 <see cref="T:System.Reflection.EventInfo" /> 初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-140">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class using CLR type system <see cref="T:System.Reflection.EventInfo" /> and a <see cref="T:System.Xaml.XamlSchemaContext" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-141">如果成员表示事件 (事件处理程序连接点属性) ，请使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-141">Use this constructor if the member represents an event (event handler connection-point property).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.PropertyInfo propertyInfo, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyInfo As PropertyInfo, schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::Reflection::PropertyInfo ^ propertyInfo, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : System.Reflection.PropertyInfo * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (propertyInfo, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="propertyInfo"><span data-ttu-id="c0d4d-142">用于表示属性成员的 CLR 类型系统 <see cref="T:System.Reflection.PropertyInfo" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-142">The CLR type system <see cref="T:System.Reflection.PropertyInfo" /> that represents the property member.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="c0d4d-143">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-143">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <summary><span data-ttu-id="c0d4d-144">使用 CLR 类型系统 <see cref="T:System.Xaml.XamlMember" /> 和 <see cref="T:System.Reflection.PropertyInfo" /> 初始化 <see cref="T:System.Xaml.XamlSchemaContext" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-144">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class using CLR type system <see cref="T:System.Reflection.PropertyInfo" /> and a <see cref="T:System.Xaml.XamlSchemaContext" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-145">如果成员表示 (的属性，则使用此构造函数) 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-145">Use this constructor if the member represents a property (and specifically is not an event handler connection).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.EventInfo eventInfo, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlMemberInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (eventInfo As EventInfo, schemaContext As XamlSchemaContext, invoker As XamlMemberInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::Reflection::EventInfo ^ eventInfo, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlMemberInvoker ^ invoker);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : System.Reflection.EventInfo * System.Xaml.XamlSchemaContext * System.Xaml.Schema.XamlMemberInvoker -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (eventInfo, schemaContext, invoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="eventInfo" Type="System.Reflection.EventInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlMemberInvoker" />
      </Parameters>
      <Docs>
        <param name="eventInfo"><span data-ttu-id="c0d4d-146">用于表示事件成员的 CLR 类型系统 <see cref="T:System.Reflection.EventInfo" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-146">The CLR type system <see cref="T:System.Reflection.EventInfo" /> that represents the event member.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="c0d4d-147">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-147">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <param name="invoker"><span data-ttu-id="c0d4d-148">可针对 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 处理运行时反射调用的 <see cref="T:System.Xaml.XamlMember" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-148">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that handles run-time reflection calls against the <see cref="T:System.Xaml.XamlMember" />.</span></span></param>
        <summary><span data-ttu-id="c0d4d-149">使用 CLR 类型系统 <see cref="T:System.Xaml.XamlMember" /> 和 <see cref="T:System.Reflection.EventInfo" />（包括 <see cref="T:System.Xaml.XamlSchemaContext" /> 信息）初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-149">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class using CLR type system <see cref="T:System.Reflection.EventInfo" /> and a <see cref="T:System.Xaml.XamlSchemaContext" />, including <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-150">如果成员表示事件 (或事件处理程序连接点属性) ，请使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-150">Use this constructor if the member represents an event (or an event handler connection-point property).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.PropertyInfo propertyInfo, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlMemberInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyInfo As PropertyInfo, schemaContext As XamlSchemaContext, invoker As XamlMemberInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::Reflection::PropertyInfo ^ propertyInfo, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlMemberInvoker ^ invoker);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : System.Reflection.PropertyInfo * System.Xaml.XamlSchemaContext * System.Xaml.Schema.XamlMemberInvoker -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (propertyInfo, schemaContext, invoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyInfo" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlMemberInvoker" />
      </Parameters>
      <Docs>
        <param name="propertyInfo"><span data-ttu-id="c0d4d-151">用于表示属性成员的 CLR 类型系统 <see cref="T:System.Reflection.PropertyInfo" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-151">The CLR type system <see cref="T:System.Reflection.PropertyInfo" /> that represents the property member.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="c0d4d-152">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-152">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <param name="invoker"><span data-ttu-id="c0d4d-153">用于针对 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 处理运行时调用的 <see cref="T:System.Xaml.XamlMember" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-153">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that handles run-time invocation calls against the <see cref="T:System.Xaml.XamlMember" />.</span></span></param>
        <summary><span data-ttu-id="c0d4d-154">使用反射 <see cref="T:System.Xaml.XamlMember" /> 和 <see cref="T:System.Reflection.PropertyInfo" />（包括 <see cref="T:System.Xaml.XamlSchemaContext" /> 信息）初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-154">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class using reflection <see cref="T:System.Reflection.PropertyInfo" /> and a <see cref="T:System.Xaml.XamlSchemaContext" />, including <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-155">仅当成员表示属性并且不是事件处理程序连接时，才使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-155">Use this constructor only if the member represents a property and if it is not an event handler connection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string attachableEventName, class System.Reflection.MethodInfo adder, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (attachableEventName As String, adder As MethodInfo, schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::String ^ attachableEventName, System::Reflection::MethodInfo ^ adder, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : string * System.Reflection.MethodInfo * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (attachableEventName, adder, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="attachableEventName" Type="System.String" />
        <Parameter Name="adder" Type="System.Reflection.MethodInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="attachableEventName"><span data-ttu-id="c0d4d-156">可附加事件的字符串名称。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-156">The string name of the attachable event.</span></span></param>
        <param name="adder"><span data-ttu-id="c0d4d-157">可附加成员的支持实现的处理程序 <see langword="Add" /> 方法的 CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-157">The CLR type system <see cref="T:System.Reflection.MethodInfo" /> for the handler <see langword="Add" /> method of the attachable member's backing implementation.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="c0d4d-158">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-158">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <summary><span data-ttu-id="c0d4d-159">针对表示可附加事件的 <see cref="T:System.Xaml.XamlMember" /> 初始化 <see cref="T:System.Xaml.XamlMember" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-159">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class for a <see cref="T:System.Xaml.XamlMember" /> that represents an attachable event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-160">如果成员表示可附加的事件成员，请使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-160">Use this constructor if the member represents an attachable event member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string name, System.Xaml.XamlType declaringType, bool isAttachable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Xaml.XamlType declaringType, bool isAttachable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, declaringType As XamlType, isAttachable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::String ^ name, System::Xaml::XamlType ^ declaringType, bool isAttachable);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : string * System.Xaml.XamlType * bool -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (name, declaringType, isAttachable)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="declaringType" Type="System.Xaml.XamlType" />
        <Parameter Name="isAttachable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="c0d4d-161">成员的字符串名称。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-161">The string name of the member.</span></span></param>
        <param name="declaringType"><span data-ttu-id="c0d4d-162">声明类型的 <see cref="T:System.Xaml.XamlType" /> 信息。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-162">The <see cref="T:System.Xaml.XamlType" /> information for the declaring type.</span></span></param>
        <param name="isAttachable"><span data-ttu-id="c0d4d-163">如果要指示成员是可附加的，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-163"><see langword="true" /> to indicate that the member is attachable; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="c0d4d-164">使用字符串名称和声明 <see cref="T:System.Xaml.XamlMember" /> 信息初始化 <see cref="T:System.Xaml.XamlType" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-164">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class using a string name and declaring <see cref="T:System.Xaml.XamlType" /> information.</span></span> <span data-ttu-id="c0d4d-165">使用此签名构造的 <see cref="T:System.Xaml.XamlMember" /> 具有很大的限制。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-165">A <see cref="T:System.Xaml.XamlMember" /> that is constructed with this signature has significant limitations.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-166"><xref:System.Xaml.XamlMember>使用 <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> 签名的返回的 `true` <xref:System.Xaml.XamlMember.IsUnknown%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-166">A <xref:System.Xaml.XamlMember> that is constructed with the <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> signature returns `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="c0d4d-167">对于涉及的加载路径 <xref:System.Xaml.XamlObjectWriter> ，此类成员不能写入对象图。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-167">For a load path that involves <xref:System.Xaml.XamlObjectWriter>, such a member cannot be written into an object graph.</span></span> <span data-ttu-id="c0d4d-168">使用 .NET Framework XAML 服务实现， <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> <xref:System.Xaml.XamlObjectWriterException> 当的相关报表时，调用将 <xref:System.Xaml.XamlMember> 引发 `true` <xref:System.Xaml.XamlMember.IsUnknown%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-168">Using the .NET Framework XAML Services implementation, the <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> call throws a <xref:System.Xaml.XamlObjectWriterException> when the relevant <xref:System.Xaml.XamlMember> reports `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="c0d4d-169">除非您的 <xref:System.Xaml.XamlMember> <xref:System.Xaml.XamlMember.IsUnknown%2A> `true` 实现可以处理中的异常，否则您不应构造 <xref:System.Xaml.XamlObjectWriter> ，或者您可以使用其他方法来调整 <xref:System.Xaml.XamlObjectWriter> 行为。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-169">You should not construct a <xref:System.Xaml.XamlMember> with <xref:System.Xaml.XamlMember.IsUnknown%2A>`true` unless your implementation can handle the exceptions from <xref:System.Xaml.XamlObjectWriter>, or you have other ways to adjust the <xref:System.Xaml.XamlObjectWriter> behavior.</span></span> <span data-ttu-id="c0d4d-170">例如，以下一项或多项操作可能适用于你的实现：</span><span class="sxs-lookup"><span data-stu-id="c0d4d-170">For example, one or more of the following might be true of your implementation:</span></span>  
  
-   <span data-ttu-id="c0d4d-171">XAML 架构上下文稍后会提供。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-171">The XAML schema context is available later.</span></span>  
  
-   <span data-ttu-id="c0d4d-172">你使用成员调用程序模式。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-172">You use a member invoker pattern.</span></span>  
  
-   <span data-ttu-id="c0d4d-173">您 <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> 在自定义 XAML 编写器中有意重写。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-173">You deliberately override <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> in a custom XAML writer.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c0d4d-174"><paramref name="name" /> 或 <paramref name="declaringType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-174"><paramref name="name" /> or <paramref name="declaringType" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string attachablePropertyName, class System.Reflection.MethodInfo getter, class System.Reflection.MethodInfo setter, class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (attachablePropertyName As String, getter As MethodInfo, setter As MethodInfo, schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::String ^ attachablePropertyName, System::Reflection::MethodInfo ^ getter, System::Reflection::MethodInfo ^ setter, System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : string * System.Reflection.MethodInfo * System.Reflection.MethodInfo * System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (attachablePropertyName, getter, setter, schemaContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="attachablePropertyName" Type="System.String" />
        <Parameter Name="getter" Type="System.Reflection.MethodInfo" />
        <Parameter Name="setter" Type="System.Reflection.MethodInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="attachablePropertyName"><span data-ttu-id="c0d4d-175">可附加属性的字符串名称。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-175">The string name of the attachable property.</span></span></param>
        <param name="getter"><span data-ttu-id="c0d4d-176">可附加成员的支持实现的 <see langword="get" /> 访问器的 CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-176">The CLR type system <see cref="T:System.Reflection.MethodInfo" /> for the <see langword="get" /> accessor of the attachable member's backing implementation.</span></span></param>
        <param name="setter"><span data-ttu-id="c0d4d-177">可附加成员的支持实现的 <see langword="set" /> 访问器的 CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-177">The CLR type system <see cref="T:System.Reflection.MethodInfo" /> for the <see langword="set" /> accessor of the attachable member's backing implementation.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="c0d4d-178">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-178">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <summary><span data-ttu-id="c0d4d-179">针对表示可附加属性的 <see cref="T:System.Xaml.XamlMember" /> 初始化 <see cref="T:System.Xaml.XamlMember" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-179">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class for a <see cref="T:System.Xaml.XamlMember" /> that represents an attachable property.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-180">如果成员表示可附加的属性，请使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-180">Use this constructor if the member represents an attachable property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string attachableEventName, class System.Reflection.MethodInfo adder, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlMemberInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (attachableEventName As String, adder As MethodInfo, schemaContext As XamlSchemaContext, invoker As XamlMemberInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::String ^ attachableEventName, System::Reflection::MethodInfo ^ adder, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlMemberInvoker ^ invoker);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : string * System.Reflection.MethodInfo * System.Xaml.XamlSchemaContext * System.Xaml.Schema.XamlMemberInvoker -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (attachableEventName, adder, schemaContext, invoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="attachableEventName" Type="System.String" />
        <Parameter Name="adder" Type="System.Reflection.MethodInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlMemberInvoker" />
      </Parameters>
      <Docs>
        <param name="attachableEventName"><span data-ttu-id="c0d4d-181">可附加事件的字符串名称。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-181">The string name of the attachable event.</span></span></param>
        <param name="adder"><span data-ttu-id="c0d4d-182">可附加成员的支持实现的处理程序 <see langword="Add" /> 方法的 CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-182">The CLR type system <see cref="T:System.Reflection.MethodInfo" /> for the handler <see langword="Add" /> method of the attachable member's backing implementation.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="c0d4d-183">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-183">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <param name="invoker"><span data-ttu-id="c0d4d-184">用于针对 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 处理运行时调用的 <see cref="T:System.Xaml.XamlMember" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-184">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that handles run-time invocation calls against the <see cref="T:System.Xaml.XamlMember" />.</span></span></param>
        <summary><span data-ttu-id="c0d4d-185">针对表示可附加事件的 <see cref="T:System.Xaml.XamlMember" />（包括 <see cref="T:System.Xaml.XamlMember" /> 信息）初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-185">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class for a <see cref="T:System.Xaml.XamlMember" /> that represents an attachable event, including <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-186">如果成员表示可附加的事件成员，请使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-186">Use this constructor if the member represents an attachable event member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string attachablePropertyName, class System.Reflection.MethodInfo getter, class System.Reflection.MethodInfo setter, class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.Schema.XamlMemberInvoker invoker) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (attachablePropertyName As String, getter As MethodInfo, setter As MethodInfo, schemaContext As XamlSchemaContext, invoker As XamlMemberInvoker)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlMember(System::String ^ attachablePropertyName, System::Reflection::MethodInfo ^ getter, System::Reflection::MethodInfo ^ setter, System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::Schema::XamlMemberInvoker ^ invoker);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlMember : string * System.Reflection.MethodInfo * System.Reflection.MethodInfo * System.Xaml.XamlSchemaContext * System.Xaml.Schema.XamlMemberInvoker -&gt; System.Xaml.XamlMember" Usage="new System.Xaml.XamlMember (attachablePropertyName, getter, setter, schemaContext, invoker)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="attachablePropertyName" Type="System.String" />
        <Parameter Name="getter" Type="System.Reflection.MethodInfo" />
        <Parameter Name="setter" Type="System.Reflection.MethodInfo" />
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="invoker" Type="System.Xaml.Schema.XamlMemberInvoker" />
      </Parameters>
      <Docs>
        <param name="attachablePropertyName"><span data-ttu-id="c0d4d-187">可附加属性的字符串名称。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-187">The string name of the attachable property.</span></span></param>
        <param name="getter"><span data-ttu-id="c0d4d-188">可附加成员的支持实现的 <see langword="get" /> 访问器的 CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-188">The CLR type system <see cref="T:System.Reflection.MethodInfo" /> for the <see langword="get" /> accessor of the attachable member's backing implementation.</span></span></param>
        <param name="setter"><span data-ttu-id="c0d4d-189">可附加成员的支持实现的 <see langword="set" /> 访问器的 CLR 类型系统 <see cref="T:System.Reflection.MethodInfo" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-189">The CLR type system <see cref="T:System.Reflection.MethodInfo" /> for the <see langword="set" /> accessor of the attachable member's backing implementation.</span></span></param>
        <param name="schemaContext"><span data-ttu-id="c0d4d-190">用于限定成员的 <see cref="T:System.Xaml.XamlSchemaContext" /> 上下文。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-190">The <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</span></span></param>
        <param name="invoker"><span data-ttu-id="c0d4d-191">用于针对 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 处理运行时调用的 <see cref="T:System.Xaml.XamlMember" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-191">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that handles run-time invocation calls against the <see cref="T:System.Xaml.XamlMember" />.</span></span></param>
        <summary><span data-ttu-id="c0d4d-192">针对表示可附加属性的 <see cref="T:System.Xaml.XamlMember" />（包括 <see cref="T:System.Xaml.XamlMember" /> 信息）初始化 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-192">Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class for a <see cref="T:System.Xaml.XamlMember" /> that represents an attachable property, including <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-193">如果成员表示可附加的属性成员，则使用此构造函数。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-193">Use this constructor if the member represents an attachable property member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeclaringType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ DeclaringType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : System.Xaml.XamlType" Usage="System.Xaml.XamlMember.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-194">获取类型的 <see cref="T:System.Xaml.XamlType" />，该类型声明与此 <see cref="T:System.Xaml.XamlMember" /> 关联的成员。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-194">Gets the <see cref="T:System.Xaml.XamlType" /> for the type that declares the member that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <value><span data-ttu-id="c0d4d-195">类型的 <see cref="T:System.Xaml.XamlType" />，该类型声明与此 <see cref="T:System.Xaml.XamlMember" /> 关联的成员。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-195">The <see cref="T:System.Xaml.XamlType" /> for the type that declares the member that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-196">此值通常是在初始化过程中设置的，通常不是这样 `null` 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-196">This value is typically set during initialization and is usually not `null`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c0d4d-197"><xref:System.Xaml.XamlMember.DeclaringType%2A> 可以通过构造函数传入信息以进行初始化。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-197"><xref:System.Xaml.XamlMember.DeclaringType%2A> information can be passed in by constructors for initialization.</span></span> <span data-ttu-id="c0d4d-198">通过将直接调用到基构造函数中， <xref:System.Xaml.XamlMember> 派生类的初始化可能会忽略在基类中进行的一些值检查。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-198">By calling directly into base constructors, initialization for <xref:System.Xaml.XamlMember> derived classes can omit some of the value-checks that are made in the base class.</span></span> <span data-ttu-id="c0d4d-199">因此，派生的初始化可更改 XAML 成员的已报告类型成员关系信息，使其不再按预期方式与其基础 CLR 声明的类型系统信息对齐。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-199">Therefore, the derived initialization can change the reported type-member relationship information of a XAML member so that it no longer aligns in an expected way with the type system information of its underlying CLR declaration.</span></span> <span data-ttu-id="c0d4d-200">对于声明类型信息的任何安全关键检查，请改用基础 CLR 类型。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-200">For any security-critical checks of declaring type information, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeferringLoader">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; DeferringLoader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; DeferringLoader" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.DeferringLoader" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeferringLoader As XamlValueConverter(Of XamlDeferringLoader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ DeferringLoader { System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeferringLoader : System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;" Usage="System.Xaml.XamlMember.DeferringLoader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-201">获取一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，该对象用于 XAML 声明的对象的延迟加载。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-201">Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for deferred loading of XAML declared objects.</span></span></summary>
        <value><span data-ttu-id="c0d4d-202">一个对泛型具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.Xaml.XamlDeferringLoader" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-202">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Xaml.XamlDeferringLoader" /> constraint on the generic.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-203">调用 <xref:System.Xaml.XamlMember.DeferringLoader%2A> <xref:System.Xaml.XamlMember.LookupDeferringLoader%2A> 此方法的调用或特定的重写。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-203">Calling <xref:System.Xaml.XamlMember.DeferringLoader%2A> invokes <xref:System.Xaml.XamlMember.LookupDeferringLoader%2A> or a specific override of that method.</span></span> <span data-ttu-id="c0d4d-204">在初始内部反射逻辑尚未设置信息的情况下，会发生此行为。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-204">This behavior occurs in cases where the initial internal reflection logic has not already set the information.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DependsOn">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt; DependsOn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlMember&gt; DependsOn" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.DependsOn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DependsOn As IList(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IList&lt;System::Xaml::XamlMember ^&gt; ^ DependsOn { System::Collections::Generic::IList&lt;System::Xaml::XamlMember ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DependsOn : System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt;" Usage="System.Xaml.XamlMember.DependsOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-205">获取 <see cref="T:System.Xaml.XamlMember" /> 对象的列表。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-205">Gets a list of <see cref="T:System.Xaml.XamlMember" /> objects.</span></span> <span data-ttu-id="c0d4d-206">这些对象报告一些成员，其中的初始化顺序依赖关系相对于此 <see cref="T:System.Xaml.XamlMember" /> 存在。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-206">These report the members where dependency relationships for initialization order exist relative to this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <value><span data-ttu-id="c0d4d-207"><see cref="T:System.Xaml.XamlMember" /> 对象的列表。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-207">A list of <see cref="T:System.Xaml.XamlMember" /> objects.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-208">调用 <xref:System.Xaml.XamlMember.DependsOn%2A> <xref:System.Xaml.XamlMember.LookupDependsOn%2A> 此方法的调用或特定的重写。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-208">Calling <xref:System.Xaml.XamlMember.DependsOn%2A> invokes <xref:System.Xaml.XamlMember.LookupDependsOn%2A> or a specific override of that method.</span></span> <span data-ttu-id="c0d4d-209">在初始内部反射逻辑尚未设置信息的情况下，会发生此行为。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-209">This behavior occurs in cases where the initial internal reflection logic has not already set the information.</span></span>  
  
 <span data-ttu-id="c0d4d-210">此 `DependsOn` 模式可应用于特意矛盾一般 XAML 规则的对象模型事例。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-210">The `DependsOn` pattern can be applied to object model cases that deliberately contradict a general XAML rule.</span></span> <span data-ttu-id="c0d4d-211">一般的 XAML 规则是，不作为初始化文本传递的类型的成员 (或由 XAML 2009) 中的工厂方法传递的，必须能够以任意顺序分配。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-211">The general XAML rule is that members of a type that are not passed as initialization text (or by a factory method in XAML 2009) must be able to be assigned in any order.</span></span> <span data-ttu-id="c0d4d-212">通过 `DependsOn` 向成员应用模式，可以指示 XAML 编写器始终处理此成员之前的引用成员。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-212">By applying a `DependsOn` pattern to a member, you can instruct XAML writers to always process the referenced member before this member.</span></span> <span data-ttu-id="c0d4d-213">您可以在以下情况下应用此模式：当前成员的值需要上下文或其他仅在设置其他成员后才可用的信息。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-213">You can apply this pattern in situations where the value of the current member requires context or other information that is only available after the other member is set.</span></span>  
  
 <span data-ttu-id="c0d4d-214">`DependsOn`应慎用此模式，为其提供结构化用途的属性方案保留。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-214">The `DependsOn` pattern should be applied judiciously and reserved for property scenarios where it serves an architectural purpose.</span></span> <span data-ttu-id="c0d4d-215">大量依赖项可能会减慢 XAML 处理的速度。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-215">Large numbers of dependencies have the potential to slow down XAML processing.</span></span> <span data-ttu-id="c0d4d-216">此外，还可以生成循环依赖项，在这种情况下，XAML 处理行为是不确定的。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-216">Also, it is possible to produce circular dependencies, in which case the XAML processing behavior is undefined.</span></span>  
  
 <span data-ttu-id="c0d4d-217">`DependsOn`WPF 中的示例方案包括、、和上的特定属性 <xref:System.Windows.Controls.ControlTemplate> <xref:System.Windows.DataTemplate> <xref:System.Windows.Trigger> <xref:System.Windows.Setter> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-217">Example `DependsOn` scenarios from WPF include certain properties on <xref:System.Windows.Controls.ControlTemplate> and <xref:System.Windows.DataTemplate>, on <xref:System.Windows.Trigger>, and on <xref:System.Windows.Setter>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.DependsOnAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c0d4d-218">指示当前对象是否等于另一个对象。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-218">Indicates whether the current object is equal to another object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="xamlMember.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj"><span data-ttu-id="c0d4d-219">要与此对象进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-219">The object to compare with this object.</span></span></param>
        <summary><span data-ttu-id="c0d4d-220">指示当前对象是否等于另一个对象。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-220">Indicates whether the current object is equal to another object.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-221">如果当前对象等于 <paramref name="obj" /> 参数，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-221"><see langword="true" /> if the current object is equal to the <paramref name="obj" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Xaml.XamlMember other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Xaml.XamlMember other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As XamlMember) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(System::Xaml::XamlMember ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : System.Xaml.XamlMember -&gt; bool" Usage="xamlMember.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="other"><span data-ttu-id="c0d4d-222">一个与此对象进行比较的对象。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-222">An object to compare with this object.</span></span></param>
        <summary><span data-ttu-id="c0d4d-223">指示当前对象是否等于同一类型的另一个对象。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-223">Indicates whether the current object is equal to another object of the same type.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-224">如果当前对象等于 <paramref name="other" /> 参数，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-224"><see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="xamlMember.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-225">返回此对象的哈希代码。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-225">Returns the hash code for this object.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-226">整数哈希代码。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-226">An integer hash code.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXamlNamespaces">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;string&gt; GetXamlNamespaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;string&gt; GetXamlNamespaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.GetXamlNamespaces" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetXamlNamespaces () As IList(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IList&lt;System::String ^&gt; ^ GetXamlNamespaces();" />
      <MemberSignature Language="F#" Value="abstract member GetXamlNamespaces : unit -&gt; System.Collections.Generic.IList&lt;string&gt;&#xA;override this.GetXamlNamespaces : unit -&gt; System.Collections.Generic.IList&lt;string&gt;" Usage="xamlMember.GetXamlNamespaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-227">返回 XAML 命名空间的列表，此 XAML 成员可能存在于这些命名空间中。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-227">Returns a list of XAML namespaces where this XAML member can exist.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-228">字符串形式的 XAML 命名空间标识符的列表。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-228">A list of XAML namespace identifiers as strings.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-229">默认实现返回 <xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=nameWithType> 与此关联的的调用结果 <xref:System.Xaml.XamlMember.DeclaringType%2A> <xref:System.Xaml.XamlMember> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-229">The default implementation returns the <xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=nameWithType> call result from the <xref:System.Xaml.XamlMember.DeclaringType%2A> that is associated with this <xref:System.Xaml.XamlMember>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoker">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlMemberInvoker Invoker { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlMemberInvoker Invoker" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.Invoker" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Invoker As XamlMemberInvoker" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlMemberInvoker ^ Invoker { System::Xaml::Schema::XamlMemberInvoker ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Invoker : System.Xaml.Schema.XamlMemberInvoker" Usage="System.Xaml.XamlMember.Invoker" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlMemberInvoker</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-230">获取与此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 关联的 <see cref="T:System.Xaml.XamlMember" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-230">Gets the <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <value><span data-ttu-id="c0d4d-231">与此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 关联的 <see cref="T:System.Xaml.XamlMember" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-231">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-232">`Invoker`模式是一种高级的 XAML 类型系统扩展技术。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-232">The `Invoker` pattern is an advanced XAML type system extension technique.</span></span> <span data-ttu-id="c0d4d-233">`Invoker`模式提供了一种方法，用于注入不同的架构类型映射行为，同时仍然使用 xaml 类型系统定义 .NET FRAMEWORK Xaml 服务。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-233">The `Invoker` pattern provides a way to inject different schema type mapping behavior, while still using XAML type system definitions from .NET Framework XAML Services.</span></span>  
  
 <span data-ttu-id="c0d4d-234">如果 <xref:System.Xaml.XamlMember.LookupInvoker%2A> 重写返回 `null` ，或如果默认实现 `null` 由于缺少此的而返回 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> <xref:System.Xaml.XamlMember> ，则属性将 <xref:System.Xaml.XamlMember.Invoker%2A> 返回 <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-234">If a <xref:System.Xaml.XamlMember.LookupInvoker%2A> override returns `null`, or if the default implementation returns `null` because it lacks the <xref:System.Xaml.XamlMember.UnderlyingMember%2A> for this <xref:System.Xaml.XamlMember>, the <xref:System.Xaml.XamlMember.Invoker%2A> property returns <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="c0d4d-235"><xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType> 为默认值。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-235"><xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType> is the default.</span></span> <span data-ttu-id="c0d4d-236">这适用于大多数使用 .NET Framework XAML 服务和默认 XAML 架构上下文的操作，并且没有 `Invoker` 为 XAML 类型系统实体的构造传递特定的重写模式。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-236">This is true for most operations that use .NET Framework XAML Services and the default XAML schema context, and where no specific override `Invoker` patterns are passed for construction of XAML type system entities.</span></span>  
  
 <span data-ttu-id="c0d4d-237">调用 <xref:System.Xaml.XamlMember.Invoker%2A> <xref:System.Xaml.XamlMember.LookupInvoker%2A> 此方法的调用或特定的重写。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-237">Calling <xref:System.Xaml.XamlMember.Invoker%2A> invokes <xref:System.Xaml.XamlMember.LookupInvoker%2A> or a specific override of that method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAmbient">
      <MemberSignature Language="C#" Value="public bool IsAmbient { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAmbient" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsAmbient" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAmbient As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAmbient { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAmbient : bool" Usage="System.Xaml.XamlMember.IsAmbient" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-238">获取一个值，该值指示是否将此 <see cref="T:System.Xaml.XamlMember" /> 报告为一个环境属性。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-238">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> is reported as an ambient property.</span></span></summary>
        <value><span data-ttu-id="c0d4d-239">如果将此 <see cref="T:System.Xaml.XamlMember" /> 报告为环境属性，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-239"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> is reported as an ambient property; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-240">调用 <xref:System.Xaml.XamlMember.IsAmbient%2A> <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> 此方法的调用或特定的重写。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-240">Calling <xref:System.Xaml.XamlMember.IsAmbient%2A> invokes <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> or a specific override of that method.</span></span> <span data-ttu-id="c0d4d-241">此行为发生在初始内部反射逻辑尚未设置信息的实现中。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-241">This behavior occurs in implementations where the initial internal reflection logic has not already set the information.</span></span>  
  
 <span data-ttu-id="c0d4d-242">检查环境属性通常是 XAML 处理逻辑的一部分，以确保依赖于类型限定的环境使用的对象和值可以正常工作。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-242">Checking for ambient properties is are usually part of XAML processing logic to make sure that objects and values that rely on ambient usage for type qualification can function correctly.</span></span> <span data-ttu-id="c0d4d-243">.NET Framework XAML 服务 Api 和默认的 XAML 架构上下文根据的特性填充此值 <xref:System.Windows.Markup.AmbientAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-243">The .NET Framework XAML Services APIs and the default XAML schema context populates this value based on attribution with <xref:System.Windows.Markup.AmbientAttribute>.</span></span> <span data-ttu-id="c0d4d-244">的默认实现 <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> 使用此现有 <xref:System.Windows.Markup.AmbientAttribute> 方法， `true` 如果 <xref:System.Windows.Markup.AmbientAttribute> 存在于成员声明中，它将返回。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-244">The default implementation of <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> uses this existing <xref:System.Windows.Markup.AmbientAttribute> technique, and it returns `true` if <xref:System.Windows.Markup.AmbientAttribute> exists on a member declaration.</span></span>  
  
 <span data-ttu-id="c0d4d-245"><xref:System.Windows.Markup.AmbientAttribute> 在多个 WPF 类型的成员上找到，其中包括 <xref:System.Windows.Application> 、 <xref:System.Windows.Setter> 和 <xref:System.Windows.Style> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-245"><xref:System.Windows.Markup.AmbientAttribute> is found on members of several WPF types, which include <xref:System.Windows.Application>, <xref:System.Windows.Setter>, and <xref:System.Windows.Style>.</span></span> <span data-ttu-id="c0d4d-246">它也可以在类型上找到 <xref:System.Windows.ResourceDictionary> ，这隐含使用作为其类型的任何成员都 <xref:System.Windows.ResourceDictionary> 应被视为环境，即使成员并未专门进行特性化。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-246">It is also found on the <xref:System.Windows.ResourceDictionary> type, which connotes that any member that uses <xref:System.Windows.ResourceDictionary> as its type should be considered ambient even if the member is not specifically attributed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.AmbientAttribute" />
      </Docs>
    </Member>
    <Member MemberName="IsAttachable">
      <MemberSignature Language="C#" Value="public bool IsAttachable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAttachable" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsAttachable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAttachable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAttachable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAttachable : bool" Usage="System.Xaml.XamlMember.IsAttachable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-247">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否为可附加成员。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-247">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> is an attachable member.</span></span></summary>
        <value><span data-ttu-id="c0d4d-248">如果此 <see cref="T:System.Xaml.XamlMember" /> 是可附加成员，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-248"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> is an attachable member; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-249"><xref:System.Xaml.XamlMember.IsAttachable%2A>该值是根据用于构造的构造函数进行初始化的 <xref:System.Xaml.XamlMember> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-249">The <xref:System.Xaml.XamlMember.IsAttachable%2A> value is initialized based on which constructor was used to construct a <xref:System.Xaml.XamlMember>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirective">
      <MemberSignature Language="C#" Value="public bool IsDirective { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirective" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsDirective" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirective As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirective { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirective : bool" Usage="System.Xaml.XamlMember.IsDirective" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-250">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否为 XAML 指令。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-250">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> is a XAML directive.</span></span></summary>
        <value><span data-ttu-id="c0d4d-251">如果此 <see cref="T:System.Xaml.XamlMember" /> 是 XAML 指令，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-251"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> is a XAML directive; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-252"><xref:System.Xaml.XamlMember.IsDirective%2A>该值是根据用于构造的构造函数进行初始化的 <xref:System.Xaml.XamlMember> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-252">The <xref:System.Xaml.XamlMember.IsDirective%2A> value is initialized based on which constructor was used to construct a <xref:System.Xaml.XamlMember>.</span></span> <span data-ttu-id="c0d4d-253">基本 <xref:System.Xaml.XamlMember> 构造函数将初始化为，即 <xref:System.Xaml.XamlMember.IsDirective%2A> `false` 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-253">The base <xref:System.Xaml.XamlMember> constructors initialize so that <xref:System.Xaml.XamlMember.IsDirective%2A> is `false`.</span></span> <span data-ttu-id="c0d4d-254">但是， <xref:System.Xaml.XamlDirective> 派生类 (类 <xref:System.Xaml.XamlMember>) 初始化，因此 <xref:System.Xaml.XamlMember.IsDirective%2A> 为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-254">However, the <xref:System.Xaml.XamlDirective> class (a <xref:System.Xaml.XamlMember> derived class) initializes so that <xref:System.Xaml.XamlMember.IsDirective%2A> is `true`.</span></span>  
  
 <span data-ttu-id="c0d4d-255">如果要将报告 <xref:System.Xaml.XamlMember.IsDirective%2A> 为 `true` xaml 成员的自定义 xaml 架构类的调用方，请确保派生自， <xref:System.Xaml.XamlDirective> 因为这是启用该行为的唯一方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-255">If you want to report <xref:System.Xaml.XamlMember.IsDirective%2A> as `true` to callers of a custom XAML schema class for XAML members, make sure you derive from <xref:System.Xaml.XamlDirective> because that is the only way to enable that behavior.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEvent">
      <MemberSignature Language="C#" Value="public bool IsEvent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEvent" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsEvent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEvent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEvent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEvent : bool" Usage="System.Xaml.XamlMember.IsEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-256">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示事件成员。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-256">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> represents an event member.</span></span></summary>
        <value><span data-ttu-id="c0d4d-257">如果此 <see cref="T:System.Xaml.XamlMember" /> 表示事件，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-257"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents an event; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-258">调用 <xref:System.Xaml.XamlMember.IsEvent%2A> <xref:System.Xaml.XamlMember.LookupIsEvent%2A> 此方法的调用或特定的重写。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-258">Calling <xref:System.Xaml.XamlMember.IsEvent%2A> invokes <xref:System.Xaml.XamlMember.LookupIsEvent%2A> or a specific override of that method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNameValid">
      <MemberSignature Language="C#" Value="public bool IsNameValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNameValid" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsNameValid" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNameValid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNameValid { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNameValid : bool" Usage="System.Xaml.XamlMember.IsNameValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-259">获取一个值，该值指示是否使用有效的 <see langword="xamlName" /> 字符串作为其 <see cref="T:System.Xaml.XamlMember" /> 来初始化此 <see cref="P:System.Xaml.XamlMember.Name" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-259">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> is initialized with a valid <see langword="xamlName" /> string as its <see cref="P:System.Xaml.XamlMember.Name" />.</span></span></summary>
        <value><span data-ttu-id="c0d4d-260">如果使用有效的 <see langword="true" /> 字符串来初始化此 <see cref="T:System.Xaml.XamlMember" />，则为 <see langword="xamlName" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-260"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> is initialized with a valid <see langword="xamlName" /> string; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/desktop-wpf/xaml-services/xamlname-grammar"><span data-ttu-id="c0d4d-261">XamlName 语法</span><span class="sxs-lookup"><span data-stu-id="c0d4d-261">XamlName Grammar</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Xaml.XamlMember.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-262">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示只读成员。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-262">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> represents a read-only member.</span></span></summary>
        <value><span data-ttu-id="c0d4d-263">如果此 <see cref="T:System.Xaml.XamlMember" /> 表示只读成员，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-263"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a read-only member; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-264">调用 <xref:System.Xaml.XamlMember.IsReadOnly%2A> <xref:System.Xaml.XamlMember.LookupIsReadOnly%2A> 此方法的调用或特定的重写。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-264">Calling <xref:System.Xaml.XamlMember.IsReadOnly%2A> invokes <xref:System.Xaml.XamlMember.LookupIsReadOnly%2A> or a specific override of that method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadPublic">
      <MemberSignature Language="C#" Value="public bool IsReadPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadPublic" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsReadPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadPublic : bool" Usage="System.Xaml.XamlMember.IsReadPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-265">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个具有可调用公共 <see langword="get" /> 访问器的成员。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-265">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> represents a member with a callable public <see langword="get" /> accessor.</span></span></summary>
        <value><span data-ttu-id="c0d4d-266">如果此 <see cref="T:System.Xaml.XamlMember" /> 表示可调用公共 <see langword="true" /> 访问器，则为 <see langword="get" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-266"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a callable public <see langword="get" /> accessor; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-267"><xref:System.Xaml.XamlMember.IsReadPublic%2A>该值检查是否 <xref:System.Xaml.XamlMember.DeclaringType%2A> 为公共的。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-267">The <xref:System.Xaml.XamlMember.IsReadPublic%2A> value checks whether the <xref:System.Xaml.XamlMember.DeclaringType%2A> is public.</span></span> <span data-ttu-id="c0d4d-268">如果 <xref:System.Xaml.XamlMember.DeclaringType%2A> 是非公共的，则 `get` 访问器无法以实用方式调用，并 <xref:System.Xaml.XamlMember.IsReadPublic%2A> 返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-268">If <xref:System.Xaml.XamlMember.DeclaringType%2A> is nonpublic, the `get` accessor is not callable in a practical way, and <xref:System.Xaml.XamlMember.IsReadPublic%2A> returns `false`.</span></span>  
  
 <span data-ttu-id="c0d4d-269">调用 <xref:System.Xaml.XamlMember.IsReadPublic%2A> <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> 此方法的调用或特定的重写。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-269">Calling <xref:System.Xaml.XamlMember.IsReadPublic%2A> invokes <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> or a specific override of that method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c0d4d-270"><xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>方法是虚拟的，因此可以重写。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-270">The <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> method is virtual and therefore, can be overridden.</span></span> <span data-ttu-id="c0d4d-271">重写可能会 (恶意或以其他方式更改 XAML 成员的报告访问信息) ，使其不再按预期方式与其基础 CLR 声明的类型系统访问信息对齐。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-271">The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</span></span> <span data-ttu-id="c0d4d-272">对于访问级别的任何安全关键检查，请改用基础 CLR 类型。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-272">For any security-critical checks of access levels, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnknown">
      <MemberSignature Language="C#" Value="public bool IsUnknown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnknown" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsUnknown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnknown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnknown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnknown : bool" Usage="System.Xaml.XamlMember.IsUnknown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-273">获取一个值，该值指示用于类型和成员解析的支持系统是否无法解析成员。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-273">Gets a value that indicates whether the member is not resolvable by the backing system that is used for type and member resolution.</span></span></summary>
        <value><span data-ttu-id="c0d4d-274">如果成员不可解析，则为 <see langword="true" />；如果成员可解析，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-274"><see langword="true" /> if the member is not resolvable; <see langword="false" /> if the member is resolvable.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-275"><xref:System.Xaml.XamlMember>使用 <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> 签名的返回的 `true` <xref:System.Xaml.XamlMember.IsUnknown%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-275">A <xref:System.Xaml.XamlMember> that is constructed with the <xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> signature returns `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="c0d4d-276">对于涉及的加载路径 <xref:System.Xaml.XamlObjectWriter> ， <xref:System.Xaml.XamlMember> `true` 无法将具有的用于 <xref:System.Xaml.XamlMember.IsUnknown%2A> 写入对象关系图。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-276">For a load path that involves <xref:System.Xaml.XamlObjectWriter>, a <xref:System.Xaml.XamlMember> with `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A> cannot be written into an object graph.</span></span> <span data-ttu-id="c0d4d-277">在 .NET Framework XAML 服务 Api 中的默认实现下， <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> 调用会在 <xref:System.Xaml.XamlObjectWriterException> 相关报表时 <xref:System.Xaml.XamlMember> 引发 `true` <xref:System.Xaml.XamlMember.IsUnknown%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-277">Under the default implementations in .NET Framework XAML Services APIs, the <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=nameWithType> call throws a <xref:System.Xaml.XamlObjectWriterException> when the relevant <xref:System.Xaml.XamlMember> reports `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span>  
  
 <span data-ttu-id="c0d4d-278">您不应构造一个 <xref:System.Xaml.XamlMember> 具有值的， `true` <xref:System.Xaml.XamlMember.IsUnknown%2A> 除非您的实现可以处理中的异常 <xref:System.Xaml.XamlObjectWriter> ，或者您可以使用其他方法来调整 <xref:System.Xaml.XamlObjectWriter> 行为。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-278">You should not construct a <xref:System.Xaml.XamlMember> that has a value of `true` for <xref:System.Xaml.XamlMember.IsUnknown%2A> unless your implementation can handle the exceptions from <xref:System.Xaml.XamlObjectWriter>, or you have other ways to adjust the <xref:System.Xaml.XamlObjectWriter> behavior.</span></span>  
  
 <span data-ttu-id="c0d4d-279">调用 <xref:System.Xaml.XamlMember.IsUnknown%2A> <xref:System.Xaml.XamlMember.LookupIsUnknown%2A> 此方法的调用或特定的重写。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-279">Calling <xref:System.Xaml.XamlMember.IsUnknown%2A> invokes <xref:System.Xaml.XamlMember.LookupIsUnknown%2A> or a specific override of that method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWriteOnly">
      <MemberSignature Language="C#" Value="public bool IsWriteOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWriteOnly" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsWriteOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWriteOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWriteOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWriteOnly : bool" Usage="System.Xaml.XamlMember.IsWriteOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-280">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示只写成员。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-280">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> represents a write-only member.</span></span></summary>
        <value><span data-ttu-id="c0d4d-281">如果此 <see cref="T:System.Xaml.XamlMember" /> 表示只写成员，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-281"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a write-only member; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-282">调用 <xref:System.Xaml.XamlMember.IsWriteOnly%2A> <xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A> 此方法的调用或特定的重写。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-282">Calling <xref:System.Xaml.XamlMember.IsWriteOnly%2A> invokes <xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A> or a specific override of that method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWritePublic">
      <MemberSignature Language="C#" Value="public bool IsWritePublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWritePublic" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.IsWritePublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWritePublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWritePublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWritePublic : bool" Usage="System.Xaml.XamlMember.IsWritePublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-283">获取一个值，该值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个具有可调用公共 <see langword="set" /> 访问器的成员。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-283">Gets a value that indicates whether this <see cref="T:System.Xaml.XamlMember" /> represents a member that has a callable public <see langword="set" /> accessor.</span></span></summary>
        <value><span data-ttu-id="c0d4d-284">如果此 <see cref="T:System.Xaml.XamlMember" /> 表示可调用公共 <see langword="true" /> 访问器，则为 <see langword="set" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-284"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a callable public <see langword="set" /> accessor; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-285"><xref:System.Xaml.XamlMember.IsWritePublic%2A>值考虑是否 <xref:System.Xaml.XamlMember.DeclaringType%2A> 作为确定的一部分公开。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-285">The <xref:System.Xaml.XamlMember.IsWritePublic%2A> value considers whether the <xref:System.Xaml.XamlMember.DeclaringType%2A> is public as part of the determination.</span></span> <span data-ttu-id="c0d4d-286">如果 <xref:System.Xaml.XamlMember.DeclaringType%2A> 是非公共的，则 `set` 访问器无法以实用方式调用，并 <xref:System.Xaml.XamlMember.IsWritePublic%2A> 返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-286">If <xref:System.Xaml.XamlMember.DeclaringType%2A> is nonpublic, the `set` accessor is not callable in a practical way, and <xref:System.Xaml.XamlMember.IsWritePublic%2A> returns `false`.</span></span>  
  
 <span data-ttu-id="c0d4d-287">调用 <xref:System.Xaml.XamlMember.IsWritePublic%2A> <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> 此方法的调用或特定的重写。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-287">Calling <xref:System.Xaml.XamlMember.IsWritePublic%2A> invokes <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> or a specific override of that method.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c0d4d-288"><xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>方法是虚拟的，因此可以重写。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-288">The <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> method is virtual and therefore, can be overridden.</span></span> <span data-ttu-id="c0d4d-289">重写可能会 (恶意或以其他方式更改 XAML 成员的报告访问信息) ，使其不再按预期方式与其基础 CLR 声明的类型系统访问信息对齐。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-289">The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</span></span> <span data-ttu-id="c0d4d-290">对于访问级别的任何安全关键检查，请改用基础 CLR 类型。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-290">For any security-critical checks of access levels, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupCustomAttributeProvider">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupCustomAttributeProvider" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupCustomAttributeProvider () As ICustomAttributeProvider" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::ICustomAttributeProvider ^ LookupCustomAttributeProvider();" />
      <MemberSignature Language="F#" Value="abstract member LookupCustomAttributeProvider : unit -&gt; System.Reflection.ICustomAttributeProvider&#xA;override this.LookupCustomAttributeProvider : unit -&gt; System.Reflection.ICustomAttributeProvider" Usage="xamlMember.LookupCustomAttributeProvider " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ICustomAttributeProvider</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-291">在派生类中实现时，返回 <see cref="T:System.Reflection.ICustomAttributeProvider" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-291">When implemented in a derived class, returns an <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-292"><see cref="T:System.Reflection.ICustomAttributeProvider" /> 实现。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-292">An <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-293">重写此方法以使用替代方法获取内部反射，以获取 CLR 特性值。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-293">Override this method to provide the internal reflection with an alternative way to obtain CLR attribute values.</span></span> <span data-ttu-id="c0d4d-294">在没有重写的情况下，内部反射器使用典型的 CLR 反射逻辑，如对的调用 <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-294">In the absence of an override, the internal reflector uses typical CLR reflection logic such as calls to <xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>.</span></span>  
  
 <span data-ttu-id="c0d4d-295">默认实现返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-295">The default implementation returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupDeferringLoader">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Xaml.XamlDeferringLoader&gt; LookupDeferringLoader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupDeferringLoader" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupDeferringLoader () As XamlValueConverter(Of XamlDeferringLoader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::Xaml::XamlDeferringLoader ^&gt; ^ LookupDeferringLoader();" />
      <MemberSignature Language="F#" Value="abstract member LookupDeferringLoader : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;&#xA;override this.LookupDeferringLoader : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;" Usage="xamlMember.LookupDeferringLoader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Xaml.XamlDeferringLoader&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-296">返回一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，该对象用于 XAML 声明的对象的延迟加载。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-296">Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for deferred loading of XAML declared objects.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-297">对泛型具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.Xaml.XamlDeferringLoader" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-297">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> that has a <see cref="T:System.Xaml.XamlDeferringLoader" /> constraint on the generic.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-298">当调用方从属性获取值时，将调用此方法 <xref:System.Xaml.XamlMember.DeferringLoader%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-298">This method is invoked when a caller gets a value from the <xref:System.Xaml.XamlMember.DeferringLoader%2A> property.</span></span> <span data-ttu-id="c0d4d-299">如果要 <xref:System.Xaml.XamlMember.DeferringLoader%2A> 返回与默认内部反射启用的值不同的值，并且还提供自定义信息，请重写此方法 <xref:System.Xaml.Schema.XamlMemberInvoker> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-299">Override this method if you want <xref:System.Xaml.XamlMember.DeferringLoader%2A> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <xref:System.Xaml.Schema.XamlMemberInvoker> information.</span></span>  
  
 <span data-ttu-id="c0d4d-300">默认实现通过 <xref:System.Windows.Markup.XamlDeferLoadAttribute> 从声明类型读取或使用来返回对象 <xref:System.Xaml.XamlDeferringLoader> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-300">The default implementation returns an object either by reading <xref:System.Windows.Markup.XamlDeferLoadAttribute> or using a <xref:System.Xaml.XamlDeferringLoader> from the declaring type.</span></span> <span data-ttu-id="c0d4d-301">如果这两个对象均不可用，则此方法可能返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-301">If neither object is available, this method might return `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.DeferringLoader" />
      </Docs>
    </Member>
    <Member MemberName="LookupDependsOn">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt; LookupDependsOn ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IList`1&lt;class System.Xaml.XamlMember&gt; LookupDependsOn() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupDependsOn" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupDependsOn () As IList(Of XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IList&lt;System::Xaml::XamlMember ^&gt; ^ LookupDependsOn();" />
      <MemberSignature Language="F#" Value="abstract member LookupDependsOn : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt;&#xA;override this.LookupDependsOn : unit -&gt; System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt;" Usage="xamlMember.LookupDependsOn " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Xaml.XamlMember&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-302">返回 <see cref="T:System.Xaml.XamlMember" /> 对象的列表。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-302">Returns a list of <see cref="T:System.Xaml.XamlMember" /> objects.</span></span> <span data-ttu-id="c0d4d-303">此列表中的项报告一些成员，其中的初始化顺序依赖关系相对于此 <see cref="T:System.Xaml.XamlMember" /> 存在。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-303">Items in the list report the members where dependency relationships for initialization order exist relative to this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-304"><see cref="T:System.Xaml.XamlMember" /> 对象的列表。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-304">A list of <see cref="T:System.Xaml.XamlMember" /> objects.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-305">当调用方从属性获取值时，将调用此方法 <xref:System.Xaml.XamlMember.DependsOn%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-305">This method is invoked when a caller gets a value from the <xref:System.Xaml.XamlMember.DependsOn%2A> property.</span></span> <span data-ttu-id="c0d4d-306">如果要 <xref:System.Xaml.XamlMember.DependsOn%2A> 返回与默认内部反射启用的值不同的值，并且还提供自定义信息，请重写此方法 <xref:System.Xaml.Schema.XamlMemberInvoker> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-306">Override this method if you want <xref:System.Xaml.XamlMember.DependsOn%2A> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <xref:System.Xaml.Schema.XamlMemberInvoker> information.</span></span>  
  
 <span data-ttu-id="c0d4d-307">WPF XAML 读取器和编写器实现将这种情况与结合在一起 <xref:System.Windows.Markup.DependsOnAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-307">The WPF XAML reader and writer implementations attribute this case with <xref:System.Windows.Markup.DependsOnAttribute>.</span></span> <span data-ttu-id="c0d4d-308">默认实现使用此现有 <xref:System.Windows.Markup.DependsOnAttribute> 技术。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-308">The default implementation uses this existing <xref:System.Windows.Markup.DependsOnAttribute> technique.</span></span>  
  
 <span data-ttu-id="c0d4d-309">如果你不使用 <xref:System.Windows.Markup.DependsOnAttribute> 来实现此目的，并且想要将该方法替换为使用自己的方法指示属性处理顺序，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-309">Override this method if you are not using <xref:System.Windows.Markup.DependsOnAttribute> for this purpose and intend to replace that technique for indicating property processing order with your own technique.</span></span> <span data-ttu-id="c0d4d-310">如果不打算支持属性处理顺序，则可以使用默认实现，因为它不返回任何适当的结果。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-310">If you do not intend to support a property processing order, you can use the default implementation because it returns no results, which is appropriate.</span></span>  
  
 <span data-ttu-id="c0d4d-311">列表为只读。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-311">The list is read-only.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.DependsOn" />
      </Docs>
    </Member>
    <Member MemberName="LookupInvoker">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlMemberInvoker LookupInvoker ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlMemberInvoker LookupInvoker() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupInvoker" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupInvoker () As XamlMemberInvoker" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlMemberInvoker ^ LookupInvoker();" />
      <MemberSignature Language="F#" Value="abstract member LookupInvoker : unit -&gt; System.Xaml.Schema.XamlMemberInvoker&#xA;override this.LookupInvoker : unit -&gt; System.Xaml.Schema.XamlMemberInvoker" Usage="xamlMember.LookupInvoker " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlMemberInvoker</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-312">返回与此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 关联的 <see cref="T:System.Xaml.XamlMember" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-312">Returns a <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-313">此 <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> 的 <see cref="T:System.Xaml.XamlMember" /> 信息；或者为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-313">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information for this <see cref="T:System.Xaml.XamlMember" />; or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-314">此方法通过调用来调用 <xref:System.Xaml.XamlMember.Invoker%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-314">This method is invoked by calls to <xref:System.Xaml.XamlMember.Invoker%2A>.</span></span>  
  
 <span data-ttu-id="c0d4d-315">默认实现不要求 <xref:System.Xaml.XamlMember> 使用传递初始的构造函数之一来构造 <xref:System.Xaml.Schema.XamlMemberInvoker> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-315">The default implementation does not require that a <xref:System.Xaml.XamlMember> be constructed by using one of the constructors that pass an initial <xref:System.Xaml.Schema.XamlMemberInvoker>.</span></span> <span data-ttu-id="c0d4d-316">但是， <xref:System.Xaml.XamlMember.UnderlyingMember%2A> 的值必须为 <xref:System.Xaml.XamlMember> ; 否则，默认实现返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-316">However, an <xref:System.Xaml.XamlMember.UnderlyingMember%2A> value must exist for the <xref:System.Xaml.XamlMember>; otherwise, the default implementation returns `null`.</span></span>  
  
 <span data-ttu-id="c0d4d-317">如果还从派生 <xref:System.Xaml.Schema.XamlMemberInvoker> 并且打算返回派生类，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-317">Override this method if you also derive from <xref:System.Xaml.Schema.XamlMemberInvoker> and intend to return the derived class.</span></span> <span data-ttu-id="c0d4d-318">如果返回 `null` ，则 <xref:System.Xaml.XamlMember.Invoker%2A> 返回 <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType> 到调用方。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-318">If you return `null`, <xref:System.Xaml.XamlMember.Invoker%2A> returns <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=nameWithType> to callers.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.Invoker" />
        <altmember cref="T:System.Xaml.Schema.XamlMemberInvoker" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsAmbient">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsAmbient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsAmbient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsAmbient" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsAmbient () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsAmbient();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsAmbient : unit -&gt; bool&#xA;override this.LookupIsAmbient : unit -&gt; bool" Usage="xamlMember.LookupIsAmbient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-319">返回的值指示是否将此 <see cref="T:System.Xaml.XamlMember" /> 作为环境属性报告。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-319">Returns whether this <see cref="T:System.Xaml.XamlMember" /> is reported as an ambient property.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-320">如果要将此 <see cref="T:System.Xaml.XamlMember" /> 报告为环境属性，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-320"><see langword="true" /> to report this <see cref="T:System.Xaml.XamlMember" /> as an ambient property; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-321">此方法由检查环境 XAML 属性信息的内部调用调用。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-321">This method is invoked by internal calls that check for ambient XAML property information.</span></span> <span data-ttu-id="c0d4d-322">环境属性行为在 XAML 读取器和 XAML 编写器的公共 API 行为中进行考虑。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-322">Ambient property behavior is accounted for in the public API behavior of XAML readers and XAML writers.</span></span> <span data-ttu-id="c0d4d-323">引用的内部调用 <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> 通常是 XAML 处理逻辑的一部分，以确保依赖于类型限定的环境使用的对象和值可以正常工作。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-323">The internal calls that reference <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> are usually part of XAML processing logic to make sure that objects and values that rely on ambient usage for type qualification can function correctly.</span></span> <span data-ttu-id="c0d4d-324">XAML 服务实现的默认 .NET Framework 使用 CLR 特性化，以通过支持类型的反射获取此信息。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-324">The default .NET Framework XAML Services implementation uses CLR attributing to obtain this information from reflection over backing types.</span></span> <span data-ttu-id="c0d4d-325">具体而言，默认实现将检查 <xref:System.Windows.Markup.AmbientAttribute> 并返回 `true` <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> if <xref:System.Windows.Markup.AmbientAttribute> 在成员定义中是否存在。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-325">Specifically, the default implementation checks for <xref:System.Windows.Markup.AmbientAttribute> and returns `true` for <xref:System.Xaml.XamlMember.LookupIsAmbient%2A> if <xref:System.Windows.Markup.AmbientAttribute> exists on a member definition.</span></span>  
  
 <span data-ttu-id="c0d4d-326">如果你不使用 <xref:System.Windows.Markup.AmbientAttribute> 来实现此目的，并且打算使用自己的方法替换指示环境 XAML 属性的该方法，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-326">Override this method if you are not using <xref:System.Windows.Markup.AmbientAttribute> for this purpose and intend to replace that technique for indicating ambient XAML properties with your own technique.</span></span>  
  
 <span data-ttu-id="c0d4d-327">WPF 中具有的属性的示例 Api <xref:System.Windows.Markup.AmbientAttribute> 为 <xref:System.Windows.Trigger.Property%2A?displayProperty=nameWithType> 和 <xref:System.Windows.Style.BasedOn%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-327">Example APIs from WPF that attribute with <xref:System.Windows.Markup.AmbientAttribute> are <xref:System.Windows.Trigger.Property%2A?displayProperty=nameWithType> and <xref:System.Windows.Style.BasedOn%2A?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Markup.AmbientAttribute" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsEvent">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsEvent ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsEvent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsEvent" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsEvent () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsEvent();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsEvent : unit -&gt; bool&#xA;override this.LookupIsEvent : unit -&gt; bool" Usage="xamlMember.LookupIsEvent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-328">返回的值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个事件。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-328">Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents an event.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-329">如果要报告此 <see cref="T:System.Xaml.XamlMember" /> 表示事件，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-329"><see langword="true" /> to report that this <see cref="T:System.Xaml.XamlMember" /> represents an event; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-330">默认实现检查是否 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> 为类型 <xref:System.Reflection.EventInfo> ，如果为，则返回 `true` 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-330">The default implementation checks whether <xref:System.Xaml.XamlMember.UnderlyingMember%2A> is of type <xref:System.Reflection.EventInfo>, and if it is, returns `true`.</span></span>  
  
 <span data-ttu-id="c0d4d-331">当调用方从获取值时，将调用此方法 <xref:System.Xaml.XamlMember.IsEvent%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-331">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.IsEvent%2A>.</span></span> <span data-ttu-id="c0d4d-332">如果您想要为整个派生类报告统一的结果 <xref:System.Xaml.XamlMember> ，或者您具有可用的专用元数据（可以解释为按每个事例确定 XAML 类型系统表示形式），请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-332">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available that can be interpreted to determine XAML type system representations on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsEvent" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsReadOnly">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsReadOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsReadOnly();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsReadOnly : unit -&gt; bool&#xA;override this.LookupIsReadOnly : unit -&gt; bool" Usage="xamlMember.LookupIsReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-333">返回的值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示预期的只读属性。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-333">Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents an intended read-only property.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-334">如果要将此 <see cref="T:System.Xaml.XamlMember" /> 报告为预期的只读属性，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-334"><see langword="true" /> to report this <see cref="T:System.Xaml.XamlMember" /> as an intended read-only property; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-335">如果存在，则默认实现将返回 `true` <xref:System.Xaml.XamlMember.UnderlyingMember%2A> ，但 `set` 对于它不存在公共访问器，这是由内部反射确定的。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-335">The default implementation returns `true` if <xref:System.Xaml.XamlMember.UnderlyingMember%2A> exists, but a public `set` accessor does not exist for it, as determined by internal reflection.</span></span>  
  
 <span data-ttu-id="c0d4d-336">当调用方从获取值时，将调用此方法 <xref:System.Xaml.XamlMember.IsReadOnly%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-336">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.IsReadOnly%2A>.</span></span> <span data-ttu-id="c0d4d-337">如果您想要为整个派生类报告统一的结果 <xref:System.Xaml.XamlMember> ，或者您具有可用的专用元数据（可以解释为按每个事例确定 XAML 类型系统表示形式），请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-337">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available that can be interpreted to determine XAML type system representations on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsReadPublic">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsReadPublic ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsReadPublic() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsReadPublic" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsReadPublic () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsReadPublic();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsReadPublic : unit -&gt; bool&#xA;override this.LookupIsReadPublic : unit -&gt; bool" Usage="xamlMember.LookupIsReadPublic " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-338">返回的值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个具有公共 <see langword="get" /> 访问器的属性。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-338">Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents a property that has a public <see langword="get" /> accessor.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-339">如果此 <see cref="T:System.Xaml.XamlMember" /> 表示具有公共 <see langword="true" /> 访问器的属性，则为 <see langword="get" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-339"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a property that has a public <see langword="get" /> accessor; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-340">默认实现返回基于内部反射或的求反的结果，并 <xref:System.Xaml.XamlMember.IsWriteOnly%2A> 按该顺序进行处理。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-340">The default implementation returns results based either on internal reflection or the negation of <xref:System.Xaml.XamlMember.IsWriteOnly%2A>, processing in that order.</span></span>  
  
 <span data-ttu-id="c0d4d-341"><xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> 返回成员本身是否为公共的;它 `true` 为非公共声明类型上的公共成员返回。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-341"><xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> returns whether the member itself is public; it returns `true` for a public member on a nonpublic declaring type.</span></span> <span data-ttu-id="c0d4d-342"><xref:System.Xaml.XamlMember.IsReadPublic%2A>如果还想要考虑声明类型的可见性，请改用。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-342">Use <xref:System.Xaml.XamlMember.IsReadPublic%2A> instead, if you also want to consider the visibility of the declaring type.</span></span>  
  
 <span data-ttu-id="c0d4d-343">当调用方从获取值时，将调用此方法 <xref:System.Xaml.XamlMember.IsReadPublic%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-343">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.IsReadPublic%2A>.</span></span> <span data-ttu-id="c0d4d-344">如果您想要报告整个派生类的统一结果 <xref:System.Xaml.XamlMember> ，或者您有可用于根据每个案例来确定这一点的专用元数据，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-344">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c0d4d-345"><xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>方法是虚拟的，因此可以重写。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-345">The <xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> method is virtual and therefore, can be overridden.</span></span> <span data-ttu-id="c0d4d-346">重写可能会 (恶意或以其他方式更改 XAML 成员的报告访问信息) ，使其不再按预期方式与其基础 CLR 声明的类型系统访问信息对齐。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-346">The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</span></span> <span data-ttu-id="c0d4d-347">对于访问级别的任何安全关键检查，请改用基础 CLR 类型。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-347">For any security-critical checks of access levels, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsReadPublic" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsUnknown">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsUnknown ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsUnknown() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsUnknown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsUnknown () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsUnknown();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsUnknown : unit -&gt; bool&#xA;override this.LookupIsUnknown : unit -&gt; bool" Usage="xamlMember.LookupIsUnknown " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-348">返回的值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个用于类型和成员解析的支持系统无法解析的成员。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-348">Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents a member that is not resolvable by the backing system that is used for type and member resolution.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-349">如果此 <see cref="T:System.Xaml.XamlMember" /> 表示不可解析的成员，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-349"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a non-resolvable member; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-350">当调用方从获取值时，可以调用此方法 <xref:System.Xaml.XamlMember.IsUnknown%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-350">This method may be invoked when a caller gets a value from <xref:System.Xaml.XamlMember.IsUnknown%2A>.</span></span> <span data-ttu-id="c0d4d-351">默认实现返回基于内部反射或检查 `null` 值的结果 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> ，以该顺序进行处理。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-351">The default implementation returns results that are based on either internal reflection or checking for a `null` value of <xref:System.Xaml.XamlMember.UnderlyingMember%2A>, processing in that order.</span></span>  
  
 <span data-ttu-id="c0d4d-352">如果您想要报告整个派生类的统一结果 <xref:System.Xaml.XamlMember> ，或者您有可用于根据每个案例来确定这一点的专用元数据，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-352">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsUnknown" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsWriteOnly">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsWriteOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsWriteOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsWriteOnly" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsWriteOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsWriteOnly();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsWriteOnly : unit -&gt; bool&#xA;override this.LookupIsWriteOnly : unit -&gt; bool" Usage="xamlMember.LookupIsWriteOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-353">返回的值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个具有公共 <see langword="set" /> 访问器但没有公共 <see langword="get" /> 访问器的成员。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-353">Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents a member that has a public <see langword="set" /> accessor but not a public <see langword="get" /> accessor.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-354">如果此 <see cref="T:System.Xaml.XamlMember" /> 表示只写成员，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-354"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a write-only member; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-355">`true`如果 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> 存在具有公共 `set` 访问器和非公共访问器的，则默认实现将返回 `get` ，这取决于内部反射。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-355">The default implementation returns `true` if an <xref:System.Xaml.XamlMember.UnderlyingMember%2A> exists that has a public `set` accessor and a nonpublic `get` accessor, as determined by internal reflection.</span></span>  
  
 <span data-ttu-id="c0d4d-356">当调用方从获取值时，将调用此方法 <xref:System.Xaml.XamlMember.IsWriteOnly%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-356">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.IsWriteOnly%2A>.</span></span> <span data-ttu-id="c0d4d-357">如果您想要报告整个派生类的统一结果 <xref:System.Xaml.XamlMember> ，或者您有可用于根据每个案例来确定这一点的专用元数据，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-357">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsWriteOnly" />
      </Docs>
    </Member>
    <Member MemberName="LookupIsWritePublic">
      <MemberSignature Language="C#" Value="protected virtual bool LookupIsWritePublic ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool LookupIsWritePublic() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupIsWritePublic" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupIsWritePublic () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool LookupIsWritePublic();" />
      <MemberSignature Language="F#" Value="abstract member LookupIsWritePublic : unit -&gt; bool&#xA;override this.LookupIsWritePublic : unit -&gt; bool" Usage="xamlMember.LookupIsWritePublic " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-358">返回的值指示此 <see cref="T:System.Xaml.XamlMember" /> 是否表示一个具有公共 <see langword="set" /> 访问器的成员。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-358">Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents a member that has a public <see langword="set" /> accessor.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-359">如果此 <see cref="T:System.Xaml.XamlMember" /> 表示可写成员，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-359"><see langword="true" /> if this <see cref="T:System.Xaml.XamlMember" /> represents a writable member; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-360">默认实现返回基于内部反射或的求反的结果 <xref:System.Xaml.XamlMember.IsReadOnly%2A> ，并按该顺序进行处理。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-360">The default implementation returns results based  either internal reflection or the negation of <xref:System.Xaml.XamlMember.IsReadOnly%2A>, processing in that order.</span></span>  
  
 <span data-ttu-id="c0d4d-361">当调用方从获取值时，将调用此方法 <xref:System.Xaml.XamlMember.IsWritePublic%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-361">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.IsWritePublic%2A>.</span></span> <span data-ttu-id="c0d4d-362">如果您想要报告整个派生类的统一结果 <xref:System.Xaml.XamlMember> ，或者您有可用于根据每个案例来确定这一点的专用元数据，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-362">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c0d4d-363"><xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>方法是虚拟的，因此可以重写。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-363">The <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> method is virtual and therefore, can be overridden.</span></span> <span data-ttu-id="c0d4d-364">重写可能会 (恶意或以其他方式更改 XAML 成员的报告访问信息) ，使其不再按预期方式与其基础 CLR 声明的类型系统访问信息对齐。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-364">The override has the potential to change (maliciously or otherwise) the reported access information of a XAML member so that it no longer aligns in an expected way with the type system access information of its underlying CLR declaration.</span></span> <span data-ttu-id="c0d4d-365">对于访问级别的任何安全关键检查，请改用基础 CLR 类型。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-365">For any security-critical checks of access levels, use the underlying CLR type instead.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.IsWritePublic" />
      </Docs>
    </Member>
    <Member MemberName="LookupMarkupExtensionBracketCharacters">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.Generic.IReadOnlyDictionary&lt;char,char&gt; LookupMarkupExtensionBracketCharacters ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;char, char&gt; LookupMarkupExtensionBracketCharacters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupMarkupExtensionBracketCharacters" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupMarkupExtensionBracketCharacters () As IReadOnlyDictionary(Of Char, Char)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::Generic::IReadOnlyDictionary&lt;char, char&gt; ^ LookupMarkupExtensionBracketCharacters();" />
      <MemberSignature Language="F#" Value="abstract member LookupMarkupExtensionBracketCharacters : unit -&gt; System.Collections.Generic.IReadOnlyDictionary&lt;char, char&gt;&#xA;override this.LookupMarkupExtensionBracketCharacters : unit -&gt; System.Collections.Generic.IReadOnlyDictionary&lt;char, char&gt;" Usage="xamlMember.LookupMarkupExtensionBracketCharacters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.Char,System.Char&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-366">返回标记扩展的开始和结束括号字符。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-366">Returns the opening and closing bracket characters for a markup extension.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-367">包含开始和结束括号字符的集合。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-367">A collection containing the opening and closing bracket characters.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupTargetType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupTargetType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupTargetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupTargetType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupTargetType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupTargetType();" />
      <MemberSignature Language="F#" Value="abstract member LookupTargetType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupTargetType : unit -&gt; System.Xaml.XamlType" Usage="xamlMember.LookupTargetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-368">返回其中可能存在 <see cref="T:System.Xaml.XamlType" /> 的类型的 <see cref="T:System.Xaml.XamlMember" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-368">Returns the <see cref="T:System.Xaml.XamlType" /> of the type where the <see cref="T:System.Xaml.XamlMember" /> can exist.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-369">其中可能存在 <see cref="T:System.Xaml.XamlMember" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-369">The type where the <see cref="T:System.Xaml.XamlMember" /> can exist.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-370">默认实现可区分可附加和不可附加的成员。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-370">The default implementation distinguishes between attachable and non-attachable members.</span></span> <span data-ttu-id="c0d4d-371">对于不可附加的成员， <xref:System.Xaml.XamlMember.LookupTargetType%2A> 始终返回 <xref:System.Xaml.XamlMember.DeclaringType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-371">For non-attachable members, <xref:System.Xaml.XamlMember.LookupTargetType%2A> always returns <xref:System.Xaml.XamlMember.DeclaringType%2A>.</span></span> <span data-ttu-id="c0d4d-372">对于可附加成员， <xref:System.Xaml.XamlMember.LookupTargetType%2A> 返回基于检查 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> 访问器参数类型的结果，并基于 XAML 架构上下文解释该类型。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-372">For attachable members, <xref:System.Xaml.XamlMember.LookupTargetType%2A> returns a result based on examining the <xref:System.Xaml.XamlMember.UnderlyingMember%2A> accessor parameter type and interprets that type based on XAML schema context.</span></span>  
  
 <span data-ttu-id="c0d4d-373">当调用方从获取值时，将调用此方法 <xref:System.Xaml.XamlMember.TargetType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-373">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.TargetType%2A>.</span></span> <span data-ttu-id="c0d4d-374">如果您想要报告整个派生类的统一结果 <xref:System.Xaml.XamlMember> ，或者您有可用于根据每个案例来确定这一点的专用元数据，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-374">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.TargetType" />
      </Docs>
    </Member>
    <Member MemberName="LookupType">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.XamlType LookupType ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.XamlType LookupType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupType" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupType () As XamlType" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::XamlType ^ LookupType();" />
      <MemberSignature Language="F#" Value="abstract member LookupType : unit -&gt; System.Xaml.XamlType&#xA;override this.LookupType : unit -&gt; System.Xaml.XamlType" Usage="xamlMember.LookupType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-375">返回成员所使用的类型的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-375">Returns the <see cref="T:System.Xaml.XamlType" /> of the type that is used by the member.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-376">成员所使用的类型的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-376">The <see cref="T:System.Xaml.XamlType" /> of the type that is used by the member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-377">当调用方从获取值时，将调用此方法 <xref:System.Xaml.XamlMember.Type%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-377">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.Type%2A>.</span></span> <span data-ttu-id="c0d4d-378">如果要 <xref:System.Xaml.XamlMember.Type%2A> 返回与默认内部反射启用的值不同的值，并且还提供自定义信息，请重写此方法 <xref:System.Xaml.Schema.XamlMemberInvoker> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-378">Override this method if you want <xref:System.Xaml.XamlMember.Type%2A> to return a value that differs from the value that is enabled by default internal reflection, and if you are also providing custom <xref:System.Xaml.Schema.XamlMemberInvoker> information.</span></span>  
  
 <span data-ttu-id="c0d4d-379">默认实现对返回的使用不同的代码路径和概念含义， <xref:System.Xaml.XamlType> 具体取决于此是否 <xref:System.Xaml.XamlMember> 表示属性、方法或事件。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-379">The default implementation uses different code paths and conceptual meanings for the returned <xref:System.Xaml.XamlType> that is based on whether this <xref:System.Xaml.XamlMember> represents a property, method, or event.</span></span>  
  
-   <span data-ttu-id="c0d4d-380">对于属性，返回的 <xref:System.Xaml.XamlType> 是设置属性或由属性返回的类型。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-380">For a property, the returned <xref:System.Xaml.XamlType> is the type that sets the property or is returned by the property.</span></span>  
  
-   <span data-ttu-id="c0d4d-381">对于事件，返回的 <xref:System.Xaml.XamlType> 是 CLR 实现) 中的委托 (所需的事件处理程序类型。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-381">For an event, the returned <xref:System.Xaml.XamlType> is the required event handler type (a delegate in a CLR implementation).</span></span>  
  
-   <span data-ttu-id="c0d4d-382">对于方法， <xref:System.Xaml.XamlType> 是返回类型。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-382">For a method, <xref:System.Xaml.XamlType> is the return type.</span></span>  
  
 <span data-ttu-id="c0d4d-383">在每种情况下，XAML 架构上下文用于计算基础系统类型的 XAML 类型。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-383">In each case, XAML schema context is used to evaluate the XAML type from the underlying system type.</span></span>  
  
 <span data-ttu-id="c0d4d-384">当调用方从获取值时，将调用此方法 <xref:System.Xaml.XamlMember.Type%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-384">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.Type%2A>.</span></span> <span data-ttu-id="c0d4d-385">如果您想要报告整个派生类的统一结果 <xref:System.Xaml.XamlMember> ，或者您有可用于根据每个案例来确定这一点的专用元数据，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-385">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.Type" />
      </Docs>
    </Member>
    <Member MemberName="LookupTypeConverter">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; LookupTypeConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; LookupTypeConverter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupTypeConverter" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupTypeConverter () As XamlValueConverter(Of TypeConverter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ LookupTypeConverter();" />
      <MemberSignature Language="F#" Value="abstract member LookupTypeConverter : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;&#xA;override this.LookupTypeConverter : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;" Usage="xamlMember.LookupTypeConverter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-386">返回与此 <see cref="T:System.Xaml.XamlMember" /> 关联的类型转换器实现。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-386">Returns a type converter implementation that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-387">一个具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.ComponentModel.TypeConverter" /> 实例，或者为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-387">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> instance with <see cref="T:System.ComponentModel.TypeConverter" /> constraint; or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-388">默认实现使用以下逻辑和处理顺序：</span><span class="sxs-lookup"><span data-stu-id="c0d4d-388">The default implementation uses the following logic and processing order:</span></span>  
  
-   <span data-ttu-id="c0d4d-389">如果在成员级别存在特性化 (<xref:System.ComponentModel.TypeConverterAttribute>) ，则特性信息用于对 <xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> XAML 架构上下文调用。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-389">If attributing exists at the member level (<xref:System.ComponentModel.TypeConverterAttribute>), the attribute information is used for a call to <xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> against the XAML schema context.</span></span>  
  
-   <span data-ttu-id="c0d4d-390">如果 <xref:System.Xaml.XamlMember.Type%2A> 有效，则返回与该类型关联的类型转换器。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-390">If <xref:System.Xaml.XamlMember.Type%2A> is valid, a type converter that is associated with the type is returned.</span></span>  
  
-   <span data-ttu-id="c0d4d-391">如果成员是事件，则返回特定于事件的类型转换器。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-391">If the member is an event, an event-specific type converter is returned.</span></span>  
  
 <span data-ttu-id="c0d4d-392">当调用方从获取值时，将调用此方法 <xref:System.Xaml.XamlMember.TypeConverter%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-392">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.TypeConverter%2A>.</span></span> <span data-ttu-id="c0d4d-393">如果您想要报告整个派生类的统一结果 <xref:System.Xaml.XamlMember> ，或者您有可用于根据每个案例来确定这一点的专用元数据，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-393">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.TypeConverter" />
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingGetter">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo LookupUnderlyingGetter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo LookupUnderlyingGetter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupUnderlyingGetter" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUnderlyingGetter () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ LookupUnderlyingGetter();" />
      <MemberSignature Language="F#" Value="abstract member LookupUnderlyingGetter : unit -&gt; System.Reflection.MethodInfo&#xA;override this.LookupUnderlyingGetter : unit -&gt; System.Reflection.MethodInfo" Usage="xamlMember.LookupUnderlyingGetter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-394">返回与此 <see cref="T:System.Xaml.XamlMember" /> 关联的 <see langword="get" /> 访问器。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-394">Returns a <see langword="get" /> accessor that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-395">关联 <see langword="get" /> 访问器的 <see cref="T:System.Reflection.MethodInfo" />，或者为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-395">The <see cref="T:System.Reflection.MethodInfo" /> for the associated <see langword="get" /> accessor; or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-396">默认实现将属性解释 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> 为 <xref:System.Reflection.PropertyInfo> ，并返回 (的值 <xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=nameWithType> ，参数设置为 `true`) ，这意味着返回的方法可以是非公共的。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-396">The default implementation interprets the <xref:System.Xaml.XamlMember.UnderlyingMember%2A> property as <xref:System.Reflection.PropertyInfo> and returns the value of <xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=nameWithType> (with the parameter set to `true`), which means that the returned method can be nonpublic.</span></span> <span data-ttu-id="c0d4d-397">在某些情况下，此行为可能会导致 `null` 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-397">This behavior can result in `null` for certain cases.</span></span> <span data-ttu-id="c0d4d-398">包括不存在关联的访问器或成员不是属性的情况。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-398">including cases where no associated accessor exists or the member is not a property.</span></span>  
  
 <span data-ttu-id="c0d4d-399">当调用方从关联的的属性获取值时，将调用此方法 <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A> <xref:System.Xaml.Schema.XamlMemberInvoker> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-399">This method is invoked when a caller gets a value from the <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A> property on an associated <xref:System.Xaml.Schema.XamlMemberInvoker>.</span></span> <span data-ttu-id="c0d4d-400">如果您想要报告整个派生类的统一结果 <xref:System.Xaml.XamlMember> ，或者您有可用于根据每个案例来确定这一点的专用元数据，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-400">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span> <span data-ttu-id="c0d4d-401">请确保实现 <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A> 、 <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A> 和， <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> 以使它们都返回相关结果。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-401">Make sure to implement <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, and <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> so that they all return correlated results.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingMember">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MemberInfo LookupUnderlyingMember ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MemberInfo LookupUnderlyingMember() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupUnderlyingMember" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUnderlyingMember () As MemberInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MemberInfo ^ LookupUnderlyingMember();" />
      <MemberSignature Language="F#" Value="abstract member LookupUnderlyingMember : unit -&gt; System.Reflection.MemberInfo&#xA;override this.LookupUnderlyingMember : unit -&gt; System.Reflection.MemberInfo" Usage="xamlMember.LookupUnderlyingMember " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-402">返回与此 <see cref="T:System.Reflection.MemberInfo" /> 关联的 CLR 类型系统 <see cref="T:System.Xaml.XamlMember" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-402">Returns a CLR type system <see cref="T:System.Reflection.MemberInfo" /> that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-403">与此 <see cref="T:System.Reflection.MemberInfo" /> 关联的 CLR 类型系统 <see cref="T:System.Xaml.XamlMember" /> 对象，或者为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-403">A CLR type system <see cref="T:System.Reflection.MemberInfo" /> object that is associated with this <see cref="T:System.Xaml.XamlMember" />; or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-404">默认实现返回基于构造的基础成员信息。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-404">The default implementation returns the underlying member information, which is based on construction.</span></span> <span data-ttu-id="c0d4d-405">如果 <xref:System.Reflection.MemberInfo> 对象是使用未提供足够的信息来设置基础成员的签名构造的，则此方法返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-405">If the <xref:System.Reflection.MemberInfo> object is constructed with a signature that does not provide enough information to set the underlying member, this method returns `null`.</span></span>  
  
 <span data-ttu-id="c0d4d-406">如果基础成员是在构造过程中设置的，则无需调用此方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-406">If an underlying member was set during construction, you should not need to call this method.</span></span>  
  
 <span data-ttu-id="c0d4d-407">当调用方从获取值时，将调用此方法 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-407">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.UnderlyingMember%2A>.</span></span> <span data-ttu-id="c0d4d-408">如果您想要报告整个派生类的统一结果 <xref:System.Xaml.XamlMember> ，或者您有可用于根据每个案例来确定这一点的专用元数据，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-408">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span> <span data-ttu-id="c0d4d-409">请确保实现 <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A> 、 <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A> 和， <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> 以使它们都返回相关结果。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-409">Make sure to implement <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, and <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> so that they all return correlated results.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.UnderlyingMember" />
      </Docs>
    </Member>
    <Member MemberName="LookupUnderlyingSetter">
      <MemberSignature Language="C#" Value="protected virtual System.Reflection.MethodInfo LookupUnderlyingSetter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Reflection.MethodInfo LookupUnderlyingSetter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupUnderlyingSetter" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupUnderlyingSetter () As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Reflection::MethodInfo ^ LookupUnderlyingSetter();" />
      <MemberSignature Language="F#" Value="abstract member LookupUnderlyingSetter : unit -&gt; System.Reflection.MethodInfo&#xA;override this.LookupUnderlyingSetter : unit -&gt; System.Reflection.MethodInfo" Usage="xamlMember.LookupUnderlyingSetter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-410">返回与此 <see cref="T:System.Xaml.XamlMember" /> 关联的 <see langword="set" /> 访问器。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-410">Returns a <see langword="set" /> accessor that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-411">关联 <see langword="set" /> 访问器的 <see cref="T:System.Reflection.MethodInfo" />，或者为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-411">The <see cref="T:System.Reflection.MethodInfo" /> for the associated <see langword="set" /> accessor; or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-412">默认实现将解释 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> 为 <xref:System.Reflection.PropertyInfo> 并返回 (的值 <xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=nameWithType> ，参数设置为 `true`) ，这意味着返回的方法可以是非公共的。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-412">The default implementation interprets <xref:System.Xaml.XamlMember.UnderlyingMember%2A> as <xref:System.Reflection.PropertyInfo> and returns the value of <xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=nameWithType> (with the parameter set to `true`), which means that the returned method can be nonpublic.</span></span> <span data-ttu-id="c0d4d-413">这可能会导致 `null` 某些情况，其中包括没有此类访问器或成员不是属性的情况。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-413">This can result in `null` for certain cases, including cases where there is no such accessor, or the member is not a property.</span></span>  
  
 <span data-ttu-id="c0d4d-414">当调用方从关联的上的获取值时，将调用此方法 <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A> <xref:System.Xaml.Schema.XamlMemberInvoker> 。如果您想要报告整个派生类的统一结果 <xref:System.Xaml.XamlMember> ，或者您有可用于根据每个案例来确定这一点的专用元数据，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-414">This method is invoked when a caller gets a value from <xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A> on an associated <xref:System.Xaml.Schema.XamlMemberInvoker>.Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span> <span data-ttu-id="c0d4d-415">请确保实现 <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A> 、 <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A> 和， <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> 以使它们都返回相关结果。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-415">Make sure to implement <xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>, <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>, and <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> so that they all return correlated results.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupValueSerializer">
      <MemberSignature Language="C#" Value="protected virtual System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; LookupValueSerializer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.LookupValueSerializer" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function LookupValueSerializer () As XamlValueConverter(Of ValueSerializer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ LookupValueSerializer();" />
      <MemberSignature Language="F#" Value="abstract member LookupValueSerializer : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;&#xA;override this.LookupValueSerializer : unit -&gt; System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;" Usage="xamlMember.LookupValueSerializer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-416">返回与此 <see cref="T:System.Xaml.XamlMember" /> 关联的值序列化程序实现。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-416">Returns a value serializer implementation that is associated with this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-417">一个具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.Windows.Markup.ValueSerializer" /> 实例，或者为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-417">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> instance with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint, or <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-418">默认实现使用以下逻辑和处理顺序：</span><span class="sxs-lookup"><span data-stu-id="c0d4d-418">The default implementation uses the following logic and processing order:</span></span>  
  
-   <span data-ttu-id="c0d4d-419">如果在成员级别存在特性化 (<xref:System.Windows.Markup.ValueSerializerAttribute>) ，则特性信息用于对 <xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> XAML 架构上下文调用。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-419">If attributing exists at the member level (<xref:System.Windows.Markup.ValueSerializerAttribute>), the attribute information is used for a call to <xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> against the XAML schema context.</span></span>  
  
-   <span data-ttu-id="c0d4d-420">如果 <xref:System.Xaml.XamlMember.Type%2A> 有效，则返回与该类型相关联的值转换器。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-420">If <xref:System.Xaml.XamlMember.Type%2A> is valid, a value converter that is associated with the type is returned.</span></span>  
  
-   <span data-ttu-id="c0d4d-421">如果前面的条件不适用， `null` 则返回。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-421">If the previous conditions do not apply, `null` is returned.</span></span>  
  
 <span data-ttu-id="c0d4d-422">当调用方从获取值时，将调用此方法 <xref:System.Xaml.XamlMember.ValueSerializer%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-422">This method is invoked when a caller gets a value from <xref:System.Xaml.XamlMember.ValueSerializer%2A>.</span></span> <span data-ttu-id="c0d4d-423">如果您想要报告整个派生类的统一结果 <xref:System.Xaml.XamlMember> ，或者您有可用于根据每个案例来确定这一点的专用元数据，请重写此方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-423">Override this method if you want to report uniform results for an entire <xref:System.Xaml.XamlMember> derived class, or if you have specialized metadata available to determine this on a per-case basis.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlMember.ValueSerializer" />
      </Docs>
    </Member>
    <Member MemberName="MarkupExtensionBracketCharacters">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IReadOnlyDictionary&lt;char,char&gt; MarkupExtensionBracketCharacters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IReadOnlyDictionary`2&lt;char, char&gt; MarkupExtensionBracketCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.MarkupExtensionBracketCharacters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MarkupExtensionBracketCharacters As IReadOnlyDictionary(Of Char, Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Generic::IReadOnlyDictionary&lt;char, char&gt; ^ MarkupExtensionBracketCharacters { System::Collections::Generic::IReadOnlyDictionary&lt;char, char&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MarkupExtensionBracketCharacters : System.Collections.Generic.IReadOnlyDictionary&lt;char, char&gt;" Usage="System.Xaml.XamlMember.MarkupExtensionBracketCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IReadOnlyDictionary&lt;System.Char,System.Char&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-424">定义标记扩展的开始和结束括号字符。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-424">Defines the opening and closing bracket characters for a markup extension.</span></span></summary>
        <value><span data-ttu-id="c0d4d-425">包含开始和结束括号字符的集合。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-425">A collection containing the opening and closing bracket characters.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Xaml.XamlMember.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-426">获取 <see langword="xamlName" /> 名称字符串，该字符串声明此 <see cref="T:System.Xaml.XamlMember" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-426">Gets the <see langword="xamlName" /> name string that declares this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <value><span data-ttu-id="c0d4d-427"><see langword="xamlName" /> 名称字符串，该字符串声明此 <see cref="T:System.Xaml.XamlMember" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-427">The <see langword="xamlName" /> name string that declares this <see cref="T:System.Xaml.XamlMember" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-428">此值始终在构造过程中设置。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-428">This value is always set during construction.</span></span> <span data-ttu-id="c0d4d-429">如果未指定初始名称，则由实现的构造函数 <xref:System.Xaml.XamlMember> 通常会引发异常; 因此， `null` 如果您使用的是默认 .NET Framework XAML 服务实现，则不希望此属性为或空字符串。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-429">The constructors that are implemented by <xref:System.Xaml.XamlMember> typically throw an exception if an initial name is not specified; therefore, do not expect this property to be `null` or an empty string, if you are using default .NET Framework XAML Services implementations.</span></span>  
  
 <span data-ttu-id="c0d4d-430">CLR 类型和成员的[XamlName 语法](/dotnet/framework/xaml-services/xamlname-grammar)和命名规则并不完全相交。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-430">[XamlName Grammar](/dotnet/framework/xaml-services/xamlname-grammar) and naming rules for CLR type and members are not an exact intersect.</span></span> <span data-ttu-id="c0d4d-431">可以声明在 CLR 下合法但在 XAML 命名下无效的成员名称。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-431">It is possible to declare a member name that is legal under CLR but not valid under XAML naming.</span></span> <span data-ttu-id="c0d4d-432">如果可能，应尽量避免这种情况。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-432">You should avoid this situation if possible.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/desktop-wpf/xaml-services/xamlname-grammar"><span data-ttu-id="c0d4d-433">XamlName 语法</span><span class="sxs-lookup"><span data-stu-id="c0d4d-433">XamlName Grammar</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Xaml.XamlMember xamlMember1, class System.Xaml.XamlMember xamlMember2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (xamlMember1 As XamlMember, xamlMember2 As XamlMember) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Xaml::XamlMember ^ xamlMember1, System::Xaml::XamlMember ^ xamlMember2);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Xaml.XamlMember * System.Xaml.XamlMember -&gt; bool" Usage="xamlMember1 = xamlMember2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlMember1" Type="System.Xaml.XamlMember" />
        <Parameter Name="xamlMember2" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="xamlMember1"><span data-ttu-id="c0d4d-434"><see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-434">A <see cref="T:System.Xaml.XamlMember" /> or <see langword="null" />.</span></span></param>
        <param name="xamlMember2"><span data-ttu-id="c0d4d-435"><see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-435">A <see cref="T:System.Xaml.XamlMember" /> or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="c0d4d-436">确定两个指定的 <see cref="T:System.Xaml.XamlMember" /> 对象是否具有相同的值。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-436">Determines whether two specified <see cref="T:System.Xaml.XamlMember" /> objects have the same value.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-437">如果 <see langword="true" /> 的值与 <paramref name="xamlMember1" /> 的值相同，则为 <paramref name="xamlMember2" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-437"><see langword="true" /> if the value of <paramref name="xamlMember1" /> is the same as the value of <paramref name="xamlMember2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Xaml.XamlMember xamlMember1, class System.Xaml.XamlMember xamlMember2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (xamlMember1 As XamlMember, xamlMember2 As XamlMember) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Xaml::XamlMember ^ xamlMember1, System::Xaml::XamlMember ^ xamlMember2);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Xaml.XamlMember * System.Xaml.XamlMember -&gt; bool" Usage="System.Xaml.XamlMember.op_Inequality (xamlMember1, xamlMember2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlMember1" Type="System.Xaml.XamlMember" />
        <Parameter Name="xamlMember2" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="xamlMember1"><span data-ttu-id="c0d4d-438"><see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-438">A <see cref="T:System.Xaml.XamlMember" /> or <see langword="null" />.</span></span></param>
        <param name="xamlMember2"><span data-ttu-id="c0d4d-439"><see cref="T:System.Xaml.XamlMember" /> 或 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-439">A <see cref="T:System.Xaml.XamlMember" /> or <see langword="null" />.</span></span></param>
        <summary><span data-ttu-id="c0d4d-440">确定两个指定的 <see cref="T:System.Xaml.XamlMember" /> 对象是否具有不同的值。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-440">Determines whether two specified <see cref="T:System.Xaml.XamlMember" /> objects have different values.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-441">如果 <paramref name="xamlMember1" /> 的值与 <paramref name="xamlMember2" /> 的值不同，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-441"><see langword="true" /> if the value of <paramref name="xamlMember1" /> differs from the value of <paramref name="xamlMember2" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredXamlNamespace">
      <MemberSignature Language="C#" Value="public string PreferredXamlNamespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PreferredXamlNamespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.PreferredXamlNamespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreferredXamlNamespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PreferredXamlNamespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PreferredXamlNamespace : string" Usage="System.Xaml.XamlMember.PreferredXamlNamespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-442">获取单个 XAML 命名空间 URI，该 URI 标识此 <see cref="T:System.Xaml.XamlMember" /> 的主 XAML 命名空间。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-442">Gets the single XAML namespace URI that identifies the primary XAML namespace for this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <value><span data-ttu-id="c0d4d-443">此 <see cref="T:System.Xaml.XamlMember" /> 的主 XAML 命名空间的标识符（字符串形式）。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-443">The identifier for the primary XAML namespace for this <see cref="T:System.Xaml.XamlMember" />, as a string.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-444"><xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A>属性提供与调用相同的值 <xref:System.Xaml.XamlMember.GetXamlNamespaces%2A> ，并从返回的列表中获取第一个值字符串。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-444">The <xref:System.Xaml.XamlMember.PreferredXamlNamespace%2A> property provides the same value as calling <xref:System.Xaml.XamlMember.GetXamlNamespaces%2A> and then getting the first value string from the returned list.</span></span> <span data-ttu-id="c0d4d-445">将成员写回保留 XAML 命名空间信息的文本或其他表示形式时，应使用首选 XAML 命名空间。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-445">The preferred XAML namespace should be used when writing the member back to text or other representations that preserve XAML namespace information.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializationVisibility">
      <MemberSignature Language="C#" Value="public System.ComponentModel.DesignerSerializationVisibility SerializationVisibility { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ComponentModel.DesignerSerializationVisibility SerializationVisibility" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.SerializationVisibility" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SerializationVisibility As DesignerSerializationVisibility" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::DesignerSerializationVisibility SerializationVisibility { System::ComponentModel::DesignerSerializationVisibility get(); };" />
      <MemberSignature Language="F#" Value="member this.SerializationVisibility : System.ComponentModel.DesignerSerializationVisibility" Usage="System.Xaml.XamlMember.SerializationVisibility" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.DesignerSerializationVisibility</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-446">获取一个 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 值，该值指示可视化设计器应如何处理成员。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-446">Gets a <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> value, which indicates how a visual designer should process the member.</span></span></summary>
        <value><span data-ttu-id="c0d4d-447"><see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 枚举的一个值。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-447">A value of the <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> enumeration.</span></span> <span data-ttu-id="c0d4d-448">默认值为 <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-448">The default is <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetType">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType TargetType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType TargetType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.TargetType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetType As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ TargetType { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetType : System.Xaml.XamlType" Usage="System.Xaml.XamlMember.TargetType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-449">获取其中可能存在 <see cref="T:System.Xaml.XamlType" /> 的类型的 <see cref="T:System.Xaml.XamlMember" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-449">Gets the <see cref="T:System.Xaml.XamlType" /> of the type where the <see cref="T:System.Xaml.XamlMember" /> can exist.</span></span></summary>
        <value><span data-ttu-id="c0d4d-450">其中可能存在 <see cref="T:System.Xaml.XamlMember" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-450">The type where the <see cref="T:System.Xaml.XamlMember" /> can exist.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-451">对于可附加和不可附加成员，返回的值不同。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-451">The returned value is different for attachable and non-attachable members.</span></span> <span data-ttu-id="c0d4d-452">对于不可附加的成员，将 <xref:System.Xaml.XamlMember.TargetType%2A> 返回 <xref:System.Xaml.XamlMember.DeclaringType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-452">For non-attachable members, <xref:System.Xaml.XamlMember.TargetType%2A> returns <xref:System.Xaml.XamlMember.DeclaringType%2A>.</span></span> <span data-ttu-id="c0d4d-453">对于可附加成员， <xref:System.Xaml.XamlMember.LookupTargetType%2A> 返回基于此逻辑的结果：</span><span class="sxs-lookup"><span data-stu-id="c0d4d-453">For attachable members, <xref:System.Xaml.XamlMember.LookupTargetType%2A> returns a result that is based on this logic:</span></span>  
  
-   <span data-ttu-id="c0d4d-454">如果反射无法解析) 的后备 (<xref:System.Xaml.XamlMember.IsUnknown%2A> `true` ，则此方法将返回表示泛型对象类型的内部常数。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-454">If reflection cannot resolve a backing (<xref:System.Xaml.XamlMember.IsUnknown%2A> `true`), this method returns an internal constant that represents a generic object type.</span></span>  
  
-   <span data-ttu-id="c0d4d-455">如果前面的条件不适用， <xref:System.Xaml.XamlMember.LookupTargetType%2A> 则调用。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-455">If the previous condition does not apply, <xref:System.Xaml.XamlMember.LookupTargetType%2A> is called.</span></span> <span data-ttu-id="c0d4d-456">默认实现返回一个 <xref:System.Xaml.XamlType> ，它基于检查实现 `get` 和 `set` 访问器的方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-456">The default implementation returns a <xref:System.Xaml.XamlType> that is based on examining the methods that implement the `get` and `set` accessors.</span></span> <span data-ttu-id="c0d4d-457">类可以重写 <xref:System.Xaml.XamlMember.LookupTargetType%2A> ，以使用不同的行为，例如可能会报告可附加成员的目标类型的其他元数据形式。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-457">A class might override <xref:System.Xaml.XamlMember.LookupTargetType%2A> to use a different behavior such as other metadata forms that might report target types for attachable members.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlMember.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xamlMember.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c0d4d-458">返回此 <see cref="T:System.Xaml.XamlMember" /> 的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-458">Returns a string representation of this <see cref="T:System.Xaml.XamlMember" />.</span></span></summary>
        <returns><span data-ttu-id="c0d4d-459">此 <see cref="T:System.Xaml.XamlMember" /> 的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-459">A string representation of this <see cref="T:System.Xaml.XamlMember" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-460">此实现返回 <xref:System.Xaml.XamlMember.Name%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-460">This implementation returns <xref:System.Xaml.XamlMember.Name%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public System.Xaml.XamlType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType Type" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.Type" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Type As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::XamlType ^ Type { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : System.Xaml.XamlType" Usage="System.Xaml.XamlMember.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-461">获取成员所使用的类型的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-461">Gets the <see cref="T:System.Xaml.XamlType" /> of the type that is used by the member.</span></span></summary>
        <value><span data-ttu-id="c0d4d-462">成员所使用的类型的 <see cref="T:System.Xaml.XamlType" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-462">The <see cref="T:System.Xaml.XamlType" /> of the type that is used by the member.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-463">调用 <xref:System.Xaml.XamlMember.Type%2A> <xref:System.Xaml.XamlMember.LookupType%2A> 此方法的调用或特定的重写。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-463">Calling <xref:System.Xaml.XamlMember.Type%2A> invokes <xref:System.Xaml.XamlMember.LookupType%2A> or a specific override of that method.</span></span> <span data-ttu-id="c0d4d-464">初始内部反射逻辑尚未设置信息时，会发生这种情况。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-464">This occurs when the initial internal reflection logic has not already set the information.</span></span>  
  
 <span data-ttu-id="c0d4d-465">在默认行为中 (不 <xref:System.Xaml.XamlMember.LookupType%2A>) 重写时，返回的 <xref:System.Xaml.XamlType> 概念含义可能不同。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-465">In the default behavior (no <xref:System.Xaml.XamlMember.LookupType%2A> override), the returned <xref:System.Xaml.XamlType> can have different conceptual meanings.</span></span> <span data-ttu-id="c0d4d-466">适用的含义取决于它是 <xref:System.Xaml.XamlMember> 表示属性、方法还是事件，如以下列表所示：</span><span class="sxs-lookup"><span data-stu-id="c0d4d-466">Which meaning applies depends on whether this <xref:System.Xaml.XamlMember> represents a property, method, or event, as the following list shows:</span></span>  
  
-   <span data-ttu-id="c0d4d-467">对于属性，返回的 <xref:System.Xaml.XamlType> 是设置属性或由属性返回的类型。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-467">For a property, the returned <xref:System.Xaml.XamlType> is the type that sets the property or is returned by the property.</span></span>  
  
-   <span data-ttu-id="c0d4d-468">对于事件，返回的 <xref:System.Xaml.XamlType> 是 CLR 实现) 中的委托 (所需的事件处理程序类型。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-468">For an event, the returned <xref:System.Xaml.XamlType> is the required event handler type (a delegate in a CLR implementation).</span></span>  
  
-   <span data-ttu-id="c0d4d-469">对于方法， <xref:System.Xaml.XamlType> 是该方法的返回类型，它可以是 `null` 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-469">For a method, <xref:System.Xaml.XamlType> is the return type of that method, which may be `null`.</span></span>  
  
 <span data-ttu-id="c0d4d-470">在每种情况下，XAML 架构上下文用于计算来自后备类型的 XAML 类型。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-470">In each case, the XAML schema context is used to evaluate the XAML type from the backing type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeConverter">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt; TypeConverter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.ComponentModel.TypeConverter&gt; TypeConverter" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.TypeConverter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeConverter As XamlValueConverter(Of TypeConverter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ TypeConverter { System::Xaml::Schema::XamlValueConverter&lt;System::ComponentModel::TypeConverter ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeConverter : System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;" Usage="System.Xaml.XamlMember.TypeConverter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.ComponentModel.TypeConverter&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-471">获取一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，该对象可用于 XAML 声明的对象的类型转换构造。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-471">Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which can be used for type conversion construction of XAML declared objects.</span></span></summary>
        <value><span data-ttu-id="c0d4d-472">一个对泛型具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.ComponentModel.TypeConverter" /> 值。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-472">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> value, with a <see cref="T:System.ComponentModel.TypeConverter" /> constraint on the generic.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-473">调用 <xref:System.Xaml.XamlMember.TypeConverter%2A> <xref:System.Xaml.XamlMember.LookupTypeConverter%2A> 此方法的调用或特定的重写。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-473">Calling <xref:System.Xaml.XamlMember.TypeConverter%2A> invokes <xref:System.Xaml.XamlMember.LookupTypeConverter%2A> or a specific override of that method.</span></span> <span data-ttu-id="c0d4d-474">当初始内部反射逻辑尚未设置此信息时，会出现此行为。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-474">This behavior occurs when the initial internal reflection logic has not already set the information.</span></span>  
  
 <span data-ttu-id="c0d4d-475">为返回非 null 属性值的实现 <xref:System.Xaml.XamlMember.TypeConverter%2A> 并不一定是有效的 <xref:System.ComponentModel.TypeConverter> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-475">Implementations that return a non-null property value for <xref:System.Xaml.XamlMember.TypeConverter%2A> are not necessarily a working <xref:System.ComponentModel.TypeConverter>.</span></span> <span data-ttu-id="c0d4d-476">下面是的可能非 null 返回值的列表 <xref:System.Xaml.XamlMember.TypeConverter%2A> ，这些值表示的值是什么：</span><span class="sxs-lookup"><span data-stu-id="c0d4d-476">The following is a list of possible non-null return values for <xref:System.Xaml.XamlMember.TypeConverter%2A> and what these values represent:</span></span>  
  
-   <span data-ttu-id="c0d4d-477">返回值将报告特定于该成员或更一般为转换器的目标类型的类型转换器。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-477">The return value reports a type converter that is attributed specifically to that member or more generally to the target type of the converter.</span></span> <span data-ttu-id="c0d4d-478">此行为通常是大多数 XAML 类型系统和 XAML 处理器的外观，以便实例化类型转换器并调用其方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-478">This behavior is typically what most XAML type systems and XAML processors look for in order to instantiate a type converter and invoke its methods.</span></span>  
  
-   <span data-ttu-id="c0d4d-479">返回值报告内置值转换器。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-479">The return value reports a built-in value converter.</span></span> <span data-ttu-id="c0d4d-480">这些转换器适用于 XAML 编写器执行的某些内部操作。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-480">These converters exist for certain internal operations that are performed by a XAML writer.</span></span> <span data-ttu-id="c0d4d-481">特别是，这些内置值转换器将原始属性字符串值转换为 XAML 语言级基元。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-481">In particular, these built-in value converters convert the raw attribute string values to the XAML language-level primitives.</span></span> <span data-ttu-id="c0d4d-482">对于 .NET Framework XAML 服务实现，这些内置类型转换通常转发到系统程序集中定义的类型转换器。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-482">For the .NET Framework XAML Services implementation, these built-in type conversions often forward to a type converter that is defined in the System assembly.</span></span> <span data-ttu-id="c0d4d-483">例如，值的转换 <xref:System.Int32> 具有内置的正向转换，因此 <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A> 值引用 <xref:System.ComponentModel.Int32Converter> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-483">For example, a conversion for an <xref:System.Int32> value has built-in forwarded conversion, and therefore, the <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A> value references <xref:System.ComponentModel.Int32Converter>.</span></span>  
  
-   <span data-ttu-id="c0d4d-484">返回值报告不受约束的对象模型的特殊情况;也就是说，的 <xref:System.Xaml.XamlMember> <xref:System.Xaml.XamlMember.Type%2A> 值为 <xref:System.Object> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-484">The return value reports the special case of an unconstrained object model; that is, the <xref:System.Xaml.XamlMember> has a <xref:System.Xaml.XamlMember.Type%2A> value of <xref:System.Object>.</span></span> <span data-ttu-id="c0d4d-485">在这种情况下，将 <xref:System.Xaml.Schema.XamlValueConverter%601> 报告 <xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=nameWithType> 为 { `Object}` 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-485">In this case, the <xref:System.Xaml.Schema.XamlValueConverter%601> reports that the <xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=nameWithType> is {`Object}`.</span></span> <span data-ttu-id="c0d4d-486">但是， <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> `null` 因为没有可用于执行此转换的实际类型或实例。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-486">However, <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> is `null` because no actual type or instance is available to perform this conversion.</span></span> <span data-ttu-id="c0d4d-487">相反，在运行时，当特定技术的运行时确定其对象图的处理时，不能确定对象模型的行为。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-487">Instead, the object model behavior cannot be determined until run time, when the runtime of the specific technology determines the handling of its object graph.</span></span>  
  
 <span data-ttu-id="c0d4d-488">如果可以从访问工作 <xref:System.ComponentModel.TypeConverter> <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> ，则可以调用其转换方法。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-488">If you can access a working <xref:System.ComponentModel.TypeConverter> from <xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>, you can invoke its conversion methods.</span></span> <span data-ttu-id="c0d4d-489">但是，许多转换方法依赖于服务上下文。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-489">However, many conversion methods rely on service context.</span></span> <span data-ttu-id="c0d4d-490">如果你没有可用的相同服务上下文，并且类型转换器需要其为对象图写入对象的典型角色，则转换器方法可能会引发异常。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-490">If you do not have the same service context available that the type converter expects for its typical role of writing objects for object graphs, the converter methods can throw exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo UnderlyingMember { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.MemberInfo UnderlyingMember" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.UnderlyingMember" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingMember As MemberInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MemberInfo ^ UnderlyingMember { System::Reflection::MemberInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingMember : System.Reflection.MemberInfo" Usage="System.Xaml.XamlMember.UnderlyingMember" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-491">获取 CLR 类型系统 <see cref="T:System.Reflection.MemberInfo" />，它可用于由 <see cref="T:System.Reflection.PropertyInfo" />、<see cref="T:System.Reflection.MethodInfo" /> 或 <see cref="T:System.Reflection.EventInfo" /> 构造的成员。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-491">Gets the CLR type system <see cref="T:System.Reflection.MemberInfo" /> that is available for a member that is constructed by <see cref="T:System.Reflection.PropertyInfo" />, <see cref="T:System.Reflection.MethodInfo" />, or <see cref="T:System.Reflection.EventInfo" />.</span></span></summary>
        <value><span data-ttu-id="c0d4d-492">从初始构造函数参数强制转换的 CLR 类型系统 <see cref="T:System.Reflection.MemberInfo" /> 信息。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-492">CLR type system <see cref="T:System.Reflection.MemberInfo" /> information, as cast from the initial constructor parameters.</span></span> <span data-ttu-id="c0d4d-493">使用 <see cref="T:System.Xaml.XamlMember" /> 签名构造的 <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /> 返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-493">A <see cref="T:System.Xaml.XamlMember" /> that is constructed with the <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /> signature returns <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-494">调用 <xref:System.Xaml.XamlMember.UnderlyingMember%2A> <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> 此方法的调用或特定的重写。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-494">Calling <xref:System.Xaml.XamlMember.UnderlyingMember%2A> invokes <xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> or a specific override of that method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueSerializer">
      <MemberSignature Language="C#" Value="public System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt; ValueSerializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.Schema.XamlValueConverter`1&lt;class System.Windows.Markup.ValueSerializer&gt; ValueSerializer" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlMember.ValueSerializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValueSerializer As XamlValueConverter(Of ValueSerializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ ValueSerializer { System::Xaml::Schema::XamlValueConverter&lt;System::Windows::Markup::ValueSerializer ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValueSerializer : System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;" Usage="System.Xaml.XamlMember.ValueSerializer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.Schema.XamlValueConverter&lt;System.Windows.Markup.ValueSerializer&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="c0d4d-495">获取一个 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 对象，该对象用于 XAML 声明的对象的值序列化。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-495">Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for value serialization of XAML declared objects.</span></span></summary>
        <value><span data-ttu-id="c0d4d-496">一个对泛型具有 <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> 约束的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-496">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint on the generic.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c0d4d-497">调用 <xref:System.Xaml.XamlMember.ValueSerializer%2A> <xref:System.Xaml.XamlMember.LookupValueSerializer%2A> 此方法的调用或特定的重写。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-497">Calling <xref:System.Xaml.XamlMember.ValueSerializer%2A> invokes <xref:System.Xaml.XamlMember.LookupValueSerializer%2A> or a specific override of that method.</span></span> <span data-ttu-id="c0d4d-498">当初始内部反射逻辑尚未设置此信息时，会出现此行为。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-498">This behavior occurs when the initial internal reflection logic has not already set the information.</span></span>  
  
 <span data-ttu-id="c0d4d-499">并非所有为返回的非 null 属性值的情况 <xref:System.Xaml.XamlMember.ValueSerializer%2A> 都是有效的 <xref:System.Windows.Markup.ValueSerializer> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-499">Not all cases that return a non-null property value for <xref:System.Xaml.XamlMember.ValueSerializer%2A> are necessarily a working <xref:System.Windows.Markup.ValueSerializer>.</span></span> <span data-ttu-id="c0d4d-500">请参阅 <xref:System.Xaml.XamlMember.TypeConverter%2A> ; 同样适用于 <xref:System.Xaml.XamlMember.ValueSerializer%2A> 。</span><span class="sxs-lookup"><span data-stu-id="c0d4d-500">See <xref:System.Xaml.XamlMember.TypeConverter%2A>; the same considerations apply to <xref:System.Xaml.XamlMember.ValueSerializer%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
