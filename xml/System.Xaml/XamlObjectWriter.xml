<Type Name="XamlObjectWriter" FullName="System.Xaml.XamlObjectWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6713a2cb1884363c06d70a8db2a846ebfa8e3889" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86692157" /></Metadata><TypeSignature Language="C#" Value="public class XamlObjectWriter : System.Xaml.XamlWriter, System.Xaml.IXamlLineInfoConsumer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlObjectWriter extends System.Xaml.XamlWriter implements class System.Xaml.IXamlLineInfoConsumer" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlObjectWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlObjectWriter&#xA;Inherits XamlWriter&#xA;Implements IXamlLineInfoConsumer" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlObjectWriter : System::Xaml::XamlWriter, System::Xaml::IXamlLineInfoConsumer" />
  <TypeSignature Language="F#" Value="type XamlObjectWriter = class&#xA;    inherit XamlWriter&#xA;    interface IXamlLineInfoConsumer" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xaml.XamlWriter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xaml.IXamlLineInfoConsumer</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="75c6b-101">从源 XAML 节点流创建对象图。</span><span class="sxs-lookup"><span data-stu-id="75c6b-101">Creates an object graph from a source XAML node stream.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75c6b-102">的 `Write` 方法 <xref:System.Xaml.XamlObjectWriter> 实现模式，以便 <xref:System.Xaml.XamlObjectWriter> 使用 <xref:System.Xaml.XamlWriter> 由方法定义的 <xref:System.Xaml.XamlWriter.WriteNode%2A> 。</span><span class="sxs-lookup"><span data-stu-id="75c6b-102">The `Write` methods of <xref:System.Xaml.XamlObjectWriter> implement a pattern so that the <xref:System.Xaml.XamlObjectWriter> uses the <xref:System.Xaml.XamlWriter> that is defined by the <xref:System.Xaml.XamlWriter.WriteNode%2A> method.</span></span> <span data-ttu-id="75c6b-103"><xref:System.Xaml.XamlWriter.WriteNode%2A> 逻辑 `Write` 在方法之间切换，具体取决于读取器中当前位置的节点类型。</span><span class="sxs-lookup"><span data-stu-id="75c6b-103"><xref:System.Xaml.XamlWriter.WriteNode%2A> logic switches between the `Write` methods, depending on which node type is at the current position in the reader.</span></span>  
  
## <a name="scope"></a><span data-ttu-id="75c6b-104">范围</span><span class="sxs-lookup"><span data-stu-id="75c6b-104">Scope</span></span>  
 <span data-ttu-id="75c6b-105"><xref:System.Xaml.XamlObjectWriter>具有作用域的概念; 即，在 <xref:System.Xaml.XamlObjectWriter> 其输出对象关系图中维护一个概念点引用。</span><span class="sxs-lookup"><span data-stu-id="75c6b-105">A <xref:System.Xaml.XamlObjectWriter> has a concept of scope; that is, the <xref:System.Xaml.XamlObjectWriter> maintains a conceptual point of reference in its output object graph.</span></span> <span data-ttu-id="75c6b-106">对于特定范围，某些操作可能有效或无效，或者产生无操作结果。</span><span class="sxs-lookup"><span data-stu-id="75c6b-106">For a particular scope, certain operations might be valid or invalid, or produce a no-operation result.</span></span> <span data-ttu-id="75c6b-107">例如，如果您调用 <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> 来编写在已作为实例存在的对象上进行初始化的指令，则默认实现将引发异常。</span><span class="sxs-lookup"><span data-stu-id="75c6b-107">For example, if you call <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> to write directives for initialization on an object that already exists as an instance, the default implementation throws an exception.</span></span>  
  
 <span data-ttu-id="75c6b-108">跟踪自定义中的作用域的可能方法 <xref:System.Xaml.XamlObjectWriter> 是将节点操作与堆栈或帧类对齐。</span><span class="sxs-lookup"><span data-stu-id="75c6b-108">A possible technique for tracking scope in a custom <xref:System.Xaml.XamlObjectWriter> is to align the node actions with a stack or frame class.</span></span> <span data-ttu-id="75c6b-109">在写入对象图时，堆栈或帧可以跟踪输入或退出的对象模型深度的每个级别的 push 和 pop <xref:System.Xaml.XamlObjectWriter> 。</span><span class="sxs-lookup"><span data-stu-id="75c6b-109">The stack or frame can keep track of push and pop for each level of object-model depth that is entered or exited while the <xref:System.Xaml.XamlObjectWriter> writes the object graph.</span></span>  
  
## <a name="callbacks"></a><span data-ttu-id="75c6b-110">回调</span><span class="sxs-lookup"><span data-stu-id="75c6b-110">Callbacks</span></span>  
 <span data-ttu-id="75c6b-111">为了支持中级和高级 <xref:System.Xaml.XamlObjectWriter> 方案，编写对象图的机制提供了在 <xref:System.Xaml.XamlObjectWriter> 提交或将要提交特定操作时出现的回调入口点。</span><span class="sxs-lookup"><span data-stu-id="75c6b-111">To support intermediate and advanced <xref:System.Xaml.XamlObjectWriter> scenarios, the mechanism of writing an object graph provides callback entry points that occur when a <xref:System.Xaml.XamlObjectWriter> commits or is about to commit certain actions.</span></span> <span data-ttu-id="75c6b-112">某些回调在设置中启用，并且不特定于对象类型或被写入的成员;但是，回调信息通常在上下文中提供，或在通过回调发送的事件数据中提供。</span><span class="sxs-lookup"><span data-stu-id="75c6b-112">Some callbacks are enabled in the settings and are not specific to the object type or the member being written; however, callback information is often available in context or is in the event data that is sent through the callback.</span></span> <span data-ttu-id="75c6b-113">下面是相关回调的列表：</span><span class="sxs-lookup"><span data-stu-id="75c6b-113">The following is a list of relevant callbacks:</span></span>  
  
-   <span data-ttu-id="75c6b-114"><xref:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler%2A>当作用域进入新对象时，以及在 <xref:System.ComponentModel.ISupportInitialize.BeginInit%2A> 对象生存期的每个所创建对象的阶段，将调用由声明的回调。</span><span class="sxs-lookup"><span data-stu-id="75c6b-114">The callback that is declared by <xref:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler%2A> is invoked when the scope goes to a new object and at the <xref:System.ComponentModel.ISupportInitialize.BeginInit%2A> phase of object lifetime for each created object.</span></span>  
  
-   <span data-ttu-id="75c6b-115"><xref:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler%2A>当作用域进入新对象时，以及在 <xref:System.ComponentModel.ISupportInitialize.EndInit%2A> 对象生存期的每个所创建对象的阶段，将调用由声明的回调。</span><span class="sxs-lookup"><span data-stu-id="75c6b-115">The callback that is declared by <xref:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler%2A> is invoked when the scope goes to a new object and at the <xref:System.ComponentModel.ISupportInitialize.EndInit%2A> phase of object lifetime for each created object.</span></span>  
  
-   <span data-ttu-id="75c6b-116"><xref:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler%2A>当作用域在对象中启动时，将调用由声明的回调，并在第一次 <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> 调用该对象范围但尚未提交时发生。</span><span class="sxs-lookup"><span data-stu-id="75c6b-116">The callback that is declared by <xref:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler%2A> is invoked when the scope starts in an object, and occurs when the first <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> call to that object scope is made but not yet committed.</span></span>  
  
-   <span data-ttu-id="75c6b-117"><xref:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler%2A>当作用域在对象中启动时，将调用由声明的回调，并在对 <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> 该对象范围的调用但尚未提交时发生。</span><span class="sxs-lookup"><span data-stu-id="75c6b-117">The callback that is declared by <xref:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler%2A> is invoked when the scope starts in an object, and happens when the <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> call to that object scope is made but not yet committed.</span></span>  
  
-   <span data-ttu-id="75c6b-118">当调用时，将调用由声明的回调 <xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A> <xref:System.Xaml.XamlObjectWriter.OnSetValue%2A> 。</span><span class="sxs-lookup"><span data-stu-id="75c6b-118">The callback that is declared by <xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A> is invoked when <xref:System.Xaml.XamlObjectWriter.OnSetValue%2A> is called.</span></span>  
  
## <a name="writing-dictionary-keys"></a><span data-ttu-id="75c6b-119">写入字典键</span><span class="sxs-lookup"><span data-stu-id="75c6b-119">Writing Dictionary Keys</span></span>  
 <span data-ttu-id="75c6b-120"><xref:System.Xaml.XamlObjectWriter>在将 <xref:System.Collections.Generic.Dictionary%602> 字典内容添加到对象图之前，的默认实现支持对的约束的类型转换。</span><span class="sxs-lookup"><span data-stu-id="75c6b-120">The default implementation of <xref:System.Xaml.XamlObjectWriter> supports type conversion on the constraints of a <xref:System.Collections.Generic.Dictionary%602> before the dictionary contents are added to the object graph.</span></span> <span data-ttu-id="75c6b-121">通过这种方式，一般字典可在运行时按对象进行键控，并可与相关的泛型 `Add` 和索引器行为匹配。</span><span class="sxs-lookup"><span data-stu-id="75c6b-121">In this manner, a generic dictionary can be keyed at run time by objects and can match the relevant generic `Add` and indexer behavior.</span></span> <span data-ttu-id="75c6b-122">但是，在为基实现时 <xref:System.Xaml.XamlObjectWriter> ，此功能仅适用于从基类创建的对象图，不适用于的 <xref:System.Collections.Generic.Dictionary%602> 派生类 <xref:System.Collections.Generic.Dictionary%602> 。</span><span class="sxs-lookup"><span data-stu-id="75c6b-122">However, as implemented for the base <xref:System.Xaml.XamlObjectWriter>, this capability exists only for object graph creation from the base <xref:System.Collections.Generic.Dictionary%602> class and not for derived classes of <xref:System.Collections.Generic.Dictionary%602>.</span></span>  
  
## <a name="checks-for-disposed"></a><span data-ttu-id="75c6b-123">检查是否已释放</span><span class="sxs-lookup"><span data-stu-id="75c6b-123">Checks for Disposed</span></span>  
 <span data-ttu-id="75c6b-124">XAML 编写器可能用于延迟的操作，或对已在中期中释放的 XAML 编写器实例进行调用的位置。</span><span class="sxs-lookup"><span data-stu-id="75c6b-124">XAML writers are potentially used for deferred operations or where a call is made against a XAML writer instance that has been disposed in the interim.</span></span> <span data-ttu-id="75c6b-125"><xref:System.Xaml.XamlObjectWriter>在这些情况下，可能会引发的各种 api <xref:System.ObjectDisposedException> 。</span><span class="sxs-lookup"><span data-stu-id="75c6b-125">Various APIs of <xref:System.Xaml.XamlObjectWriter> might throw <xref:System.ObjectDisposedException> in these cases.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlWriter" />
    <altmember cref="T:System.Xaml.XamlObjectReader" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="75c6b-126">初始化 <see cref="T:System.Xaml.XamlObjectWriter" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="75c6b-126">Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriter" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlObjectWriter (System.Xaml.XamlSchemaContext schemaContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContext schemaContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (schemaContext As XamlSchemaContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlObjectWriter(System::Xaml::XamlSchemaContext ^ schemaContext);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlObjectWriter : System.Xaml.XamlSchemaContext -&gt; System.Xaml.XamlObjectWriter" Usage="new System.Xaml.XamlObjectWriter schemaContext" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
      </Parameters>
      <Docs>
        <param name="schemaContext"><span data-ttu-id="75c6b-127">与 XAML 读取器共享的 XAML 架构上下文，该读取器提供节点用于编写。</span><span class="sxs-lookup"><span data-stu-id="75c6b-127">A XAML schema context that is shared with the XAML reader that provides nodes for writing.</span></span></param>
        <summary><span data-ttu-id="75c6b-128">使用 <see cref="T:System.Xaml.XamlObjectWriter" /> 所用的 XAML 架构上下文初始化 <see cref="T:System.Xaml.XamlReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="75c6b-128">Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriter" /> class using  the XAML schema context that is used by a <see cref="T:System.Xaml.XamlReader" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="75c6b-129"><paramref name="schemaContext" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="75c6b-129"><paramref name="schemaContext" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlObjectWriter (System.Xaml.XamlSchemaContext schemaContext, System.Xaml.XamlObjectWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xaml.XamlSchemaContext schemaContext, class System.Xaml.XamlObjectWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (schemaContext As XamlSchemaContext, settings As XamlObjectWriterSettings)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlObjectWriter(System::Xaml::XamlSchemaContext ^ schemaContext, System::Xaml::XamlObjectWriterSettings ^ settings);" />
      <MemberSignature Language="F#" Value="new System.Xaml.XamlObjectWriter : System.Xaml.XamlSchemaContext * System.Xaml.XamlObjectWriterSettings -&gt; System.Xaml.XamlObjectWriter" Usage="new System.Xaml.XamlObjectWriter (schemaContext, settings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="schemaContext" Type="System.Xaml.XamlSchemaContext" />
        <Parameter Name="settings" Type="System.Xaml.XamlObjectWriterSettings" />
      </Parameters>
      <Docs>
        <param name="schemaContext"><span data-ttu-id="75c6b-130">与 XAML 读取器共享的 XAML 架构上下文，该读取器提供节点用于编写。</span><span class="sxs-lookup"><span data-stu-id="75c6b-130">A XAML schema context that is shared with the XAML reader that provides nodes for writing.</span></span></param>
        <param name="settings"><span data-ttu-id="75c6b-131">一个设置对象，该对象为 <see cref="T:System.Xaml.XamlObjectWriter" /> 行为和输出指定某些选项。</span><span class="sxs-lookup"><span data-stu-id="75c6b-131">A settings object that specifies certain options for <see cref="T:System.Xaml.XamlObjectWriter" /> behavior and output.</span></span></param>
        <summary><span data-ttu-id="75c6b-132">使用 <see cref="T:System.Xaml.XamlObjectWriter" /> 所用的上下文及其设置初始化 <see cref="T:System.Xaml.XamlReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="75c6b-132">Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriter" /> class using the context that is used by a <see cref="T:System.Xaml.XamlReader" /> and its settings.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="75c6b-133"><paramref name="schemaContext" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="75c6b-133"><paramref name="schemaContext" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="xamlObjectWriter.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="75c6b-134">重置所有可能的框架并清除对象图。</span><span class="sxs-lookup"><span data-stu-id="75c6b-134">Resets all possible frames and clears the object graph.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="xamlObjectWriter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="75c6b-135"><see langword="true" /> 表示释放托管资源；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="75c6b-135"><see langword="true" /> to release the managed resources; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="75c6b-136">释放由 <see cref="T:System.Xaml.XamlObjectWriter" /> 占用的非托管资源，也可以选择释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="75c6b-136">Releases the unmanaged resources used by the <see cref="T:System.Xaml.XamlObjectWriter" />, and optionally, releases the managed resources.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterBeginInit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterBeginInit (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterBeginInit(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterBeginInit (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterBeginInit(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnAfterBeginInit : obj -&gt; unit&#xA;override this.OnAfterBeginInit : obj -&gt; unit" Usage="xamlObjectWriter.OnAfterBeginInit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="75c6b-137">要报告的对象。</span><span class="sxs-lookup"><span data-stu-id="75c6b-137">The object to report on.</span></span> <span data-ttu-id="75c6b-138">在调用处理程序时，此对象封装在 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</span><span class="sxs-lookup"><span data-stu-id="75c6b-138">The object is packaged into <see cref="T:System.Xaml.XamlObjectEventArgs" /> when the handler is invoked.</span></span></param>
        <summary><span data-ttu-id="75c6b-139">为此 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /> 调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 关联的 <see cref="T:System.Xaml.XamlObjectWriter" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="75c6b-139">Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /> method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this <see cref="T:System.Xaml.XamlObjectWriter" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterEndInit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterEndInit (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterEndInit(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterEndInit (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterEndInit(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnAfterEndInit : obj -&gt; unit&#xA;override this.OnAfterEndInit : obj -&gt; unit" Usage="xamlObjectWriter.OnAfterEndInit value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="75c6b-140">要报告的对象。</span><span class="sxs-lookup"><span data-stu-id="75c6b-140">The object to report on.</span></span> <span data-ttu-id="75c6b-141">在调用处理程序时，此值封装在 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</span><span class="sxs-lookup"><span data-stu-id="75c6b-141">The value  is packaged into <see cref="T:System.Xaml.XamlObjectEventArgs" /> when the handler is invoked.</span></span></param>
        <summary><span data-ttu-id="75c6b-142">为此 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /> 调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 关联的 <see cref="T:System.Xaml.XamlObjectWriter" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="75c6b-142">Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /> method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this <see cref="T:System.Xaml.XamlObjectWriter" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAfterProperties">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterProperties (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterProperties(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterProperties (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterProperties(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnAfterProperties : obj -&gt; unit&#xA;override this.OnAfterProperties : obj -&gt; unit" Usage="xamlObjectWriter.OnAfterProperties value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="75c6b-143">要报告的对象。</span><span class="sxs-lookup"><span data-stu-id="75c6b-143">The object to report on.</span></span> <span data-ttu-id="75c6b-144">在调用处理程序时，此对象封装在 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 中。</span><span class="sxs-lookup"><span data-stu-id="75c6b-144">This is packaged into <see cref="T:System.Xaml.XamlObjectEventArgs" /> when the handler is invoked.</span></span></param>
        <summary><span data-ttu-id="75c6b-145">为此 <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /> 调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" />  关联的 <see cref="T:System.Xaml.XamlObjectWriter" /> 引用的方法。</span><span class="sxs-lookup"><span data-stu-id="75c6b-145">Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /> referenced method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this <see cref="T:System.Xaml.XamlObjectWriter" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeforeProperties">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeProperties (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeProperties(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBeforeProperties (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBeforeProperties(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnBeforeProperties : obj -&gt; unit&#xA;override this.OnBeforeProperties : obj -&gt; unit" Usage="xamlObjectWriter.OnBeforeProperties value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="75c6b-146">要在调用处理程序时通过 <see cref="T:System.Xaml.XamlObjectEventArgs" /> 传递的值。</span><span class="sxs-lookup"><span data-stu-id="75c6b-146">The value to pass through <see cref="T:System.Xaml.XamlObjectEventArgs" /> when the handler is invoked.</span></span></param>
        <summary><span data-ttu-id="75c6b-147">为此 <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /> 调用任何与 <see cref="T:System.Xaml.XamlObjectWriterSettings" />  关联的 <see cref="T:System.Xaml.XamlObjectWriter" /> 引用的方法。</span><span class="sxs-lookup"><span data-stu-id="75c6b-147">Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /> referenced method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this <see cref="T:System.Xaml.XamlObjectWriter" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSetValue">
      <MemberSignature Language="C#" Value="protected virtual bool OnSetValue (object eventSender, System.Xaml.XamlMember member, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool OnSetValue(object eventSender, class System.Xaml.XamlMember member, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnSetValue (eventSender As Object, member As XamlMember, value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnSetValue(System::Object ^ eventSender, System::Xaml::XamlMember ^ member, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member OnSetValue : obj * System.Xaml.XamlMember * obj -&gt; bool&#xA;override this.OnSetValue : obj * System.Xaml.XamlMember * obj -&gt; bool" Usage="xamlObjectWriter.OnSetValue (eventSender, member, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSender" Type="System.Object" />
        <Parameter Name="member" Type="System.Xaml.XamlMember" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventSender"><span data-ttu-id="75c6b-148">要作为源向处理程序报告的对象。</span><span class="sxs-lookup"><span data-stu-id="75c6b-148">The object to report as the source to the handler.</span></span></param>
        <param name="member"><span data-ttu-id="75c6b-149">要设置的属性的名称，该名称将作为 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 的一部分传递到处理程序。</span><span class="sxs-lookup"><span data-stu-id="75c6b-149">The name of the property to set, which is passed to the handler as part of <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />.</span></span></param>
        <param name="value"><span data-ttu-id="75c6b-150">要为由 <paramref name="property" /> 命名的属性提供的值。</span><span class="sxs-lookup"><span data-stu-id="75c6b-150">The value to provide for the property that is named by <paramref name="property" />.</span></span> <span data-ttu-id="75c6b-151">此值作为 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 的一部分传递给处理程序。</span><span class="sxs-lookup"><span data-stu-id="75c6b-151">The value is passed to the handler as part of <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />.</span></span></param>
        <summary><span data-ttu-id="75c6b-152">为此编写器调用任何与 <see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> 关联的 <see cref="T:System.Xaml.XamlObjectWriterSettings" /> 引用的方法（只要 <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> 事件数据中的 <paramref name="handled" /> 不为 <see langword="true" />）。</span><span class="sxs-lookup"><span data-stu-id="75c6b-152">Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> referenced method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this writer, as long as <paramref name="handled" /> in <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> event data is not <see langword="true" />.</span></span></summary>
        <returns><span data-ttu-id="75c6b-153">由任何关联的处理程序设置的布尔值；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="75c6b-153">A Boolean value that is set by any associated handler; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75c6b-154">如果 `SetValue` 此 XAML 编写器的操作具有关联的处理程序 (<xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A> 在) 中声明 <xref:System.Xaml.XamlObjectWriterSettings> ，则此方法将创建新的并将 <xref:System.Windows.Markup.XamlSetValueEventArgs> 其传递给处理程序。</span><span class="sxs-lookup"><span data-stu-id="75c6b-154">If the `SetValue` operation for this XAML writer has an associated handler (a <xref:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler%2A> is declared in <xref:System.Xaml.XamlObjectWriterSettings>), this method creates new <xref:System.Windows.Markup.XamlSetValueEventArgs> and passes them to the handler.</span></span> <span data-ttu-id="75c6b-155">返回值是通过读取 <xref:System.Windows.Markup.XamlSetValueEventArgs.Handled%2A> 通过事件数据传递的值来设置的。</span><span class="sxs-lookup"><span data-stu-id="75c6b-155">The return value is set by reading the <xref:System.Windows.Markup.XamlSetValueEventArgs.Handled%2A> value that is passed through the event data.</span></span> <span data-ttu-id="75c6b-156">如果不存在处理程序并且调用了此方法，则调用将返回 `false` 。</span><span class="sxs-lookup"><span data-stu-id="75c6b-156">If no handler exists and this method is invoked, the call returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public virtual object Result { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Result" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.Result" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Result As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ Result { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Result : obj" Usage="System.Xaml.XamlObjectWriter.Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="75c6b-157">获取写入的最后一个对象。</span><span class="sxs-lookup"><span data-stu-id="75c6b-157">Gets the last object that was written.</span></span> <span data-ttu-id="75c6b-158">通常，仅在节点流位于结尾且对象关系图完整时才调用。</span><span class="sxs-lookup"><span data-stu-id="75c6b-158">Typically only called when the node stream is at its end and the object graph is complete.</span></span></summary>
        <value><span data-ttu-id="75c6b-159">写入的最后一个对象，或者为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="75c6b-159">The last object written, or <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75c6b-160">最常见的用法 <xref:System.Xaml.XamlObjectWriter.Result%2A> 是仅当已知节点流的末尾时才调用此方法，并且对象图已经完成。</span><span class="sxs-lookup"><span data-stu-id="75c6b-160">The most typical usage of <xref:System.Xaml.XamlObjectWriter.Result%2A> is to call it only when the node stream is known to be at its end, and the object graph is complete.</span></span> <span data-ttu-id="75c6b-161">否则，对象图可能是不完整的，在大多数平台方案中都不适用。</span><span class="sxs-lookup"><span data-stu-id="75c6b-161">Otherwise, the object graph is likely to be incomplete, and is not useful for most platform scenarios.</span></span>  
  
 <span data-ttu-id="75c6b-162"><xref:System.Xaml.XamlObjectWriter.Result%2A> 通常，如果在调用后立即调用 <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> ，并且当前范围位于对象提供值的成员中，则通常仅包含非 null 值。</span><span class="sxs-lookup"><span data-stu-id="75c6b-162"><xref:System.Xaml.XamlObjectWriter.Result%2A> typically only contains a non-null value if it is called immediately after a call to <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A>, and if the current scope is in the member where the object provides a value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RootNameScope">
      <MemberSignature Language="C#" Value="public System.Windows.Markup.INameScope RootNameScope { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Markup.INameScope RootNameScope" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.RootNameScope" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RootNameScope As INameScope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Markup::INameScope ^ RootNameScope { System::Windows::Markup::INameScope ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RootNameScope : System.Windows.Markup.INameScope" Usage="System.Xaml.XamlObjectWriter.RootNameScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.INameScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="75c6b-163">获取 <see cref="T:System.Windows.Markup.INameScope" /> 服务，该服务为 XAML 对象编写器的绝对根节点维护 XAML 名称范围。</span><span class="sxs-lookup"><span data-stu-id="75c6b-163">Gets the <see cref="T:System.Windows.Markup.INameScope" /> service that maintains the XAML namescope for the absolute node root of the XAML object writer.</span></span></summary>
        <value><span data-ttu-id="75c6b-164"><see cref="T:System.Windows.Markup.INameScope" /> 服务，该服务为对象编写器的当前根维护 XAML 名称范围。</span><span class="sxs-lookup"><span data-stu-id="75c6b-164">The <see cref="T:System.Windows.Markup.INameScope" /> service that maintains the XAML namescope for the current root of the object writer.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75c6b-165">此属性的值可能来自对象编写器上下文。</span><span class="sxs-lookup"><span data-stu-id="75c6b-165">The value of this property may come from the object writer context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public override System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlObjectWriter.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="75c6b-166">获取活动 XAML 架构上下文。</span><span class="sxs-lookup"><span data-stu-id="75c6b-166">Gets the active XAML schema context.</span></span></summary>
        <value><span data-ttu-id="75c6b-167">XAML 架构上下文。</span><span class="sxs-lookup"><span data-stu-id="75c6b-167">The XAML schema context.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75c6b-168">XAML 架构上下文是大多数实际对象编写方案必需的信息源。</span><span class="sxs-lookup"><span data-stu-id="75c6b-168">XAML schema context is a necessary information source for most practical object-writing scenarios.</span></span> <span data-ttu-id="75c6b-169">XAML 架构上下文会影响后备类型的类型查找，并保存有关支持类型的程序集的信息。</span><span class="sxs-lookup"><span data-stu-id="75c6b-169">The XAML schema context influences the type lookup for backing types and holds information about the assemblies where backing types exist.</span></span> <span data-ttu-id="75c6b-170">默认 XAML 架构上下文基于 CLR 类型映射规则。</span><span class="sxs-lookup"><span data-stu-id="75c6b-170">The default XAML schema context is based on CLR type-mapping rules.</span></span> <span data-ttu-id="75c6b-171">框架通常提供自己的 XAML 架构上下文，以确保程序集加载机制与框架的编程 amd 应用程序模型匹配。</span><span class="sxs-lookup"><span data-stu-id="75c6b-171">Frameworks typically provide their own XAML schema context in order to assure that the assembly-loading mechanisms match the framework's programming amd application models.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLineInfo">
      <MemberSignature Language="C#" Value="public void SetLineInfo (int lineNumber, int linePosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLineInfo(int32 lineNumber, int32 linePosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetLineInfo (lineNumber As Integer, linePosition As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetLineInfo(int lineNumber, int linePosition);" />
      <MemberSignature Language="F#" Value="abstract member SetLineInfo : int * int -&gt; unit&#xA;override this.SetLineInfo : int * int -&gt; unit" Usage="xamlObjectWriter.SetLineInfo (lineNumber, linePosition)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
        <Parameter Name="linePosition" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber"><span data-ttu-id="75c6b-172">读取器中的行号。</span><span class="sxs-lookup"><span data-stu-id="75c6b-172">The line number from the reader.</span></span></param>
        <param name="linePosition"><span data-ttu-id="75c6b-173">读取器中的行位置。</span><span class="sxs-lookup"><span data-stu-id="75c6b-173">The line position from the reader.</span></span></param>
        <summary><span data-ttu-id="75c6b-174">实现 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" />，并为异常提供行信息。</span><span class="sxs-lookup"><span data-stu-id="75c6b-174">Implements <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> and provides line information for exceptions.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75c6b-175">此服务方法不应在代码中直接调用。</span><span class="sxs-lookup"><span data-stu-id="75c6b-175">This service method is not intended to be called directly from your code.</span></span> <span data-ttu-id="75c6b-176">但是，如果要从创建派生类 <xref:System.Xaml.XamlObjectWriter> ，并希望报告某个行号不可用或不有用的上下文，则可以调用此方法。</span><span class="sxs-lookup"><span data-stu-id="75c6b-176">However, if you are creating a derived class from <xref:System.Xaml.XamlObjectWriter> and expect to report a context where line numbers are unavailable or not useful, this method may be called.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldProvideLineInfo">
      <MemberSignature Language="C#" Value="public bool ShouldProvideLineInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldProvideLineInfo" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldProvideLineInfo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldProvideLineInfo { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldProvideLineInfo : bool" Usage="System.Xaml.XamlObjectWriter.ShouldProvideLineInfo" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xaml.IXamlLineInfoConsumer.ShouldProvideLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="75c6b-177">获取一个值，该值报告行信息服务是否应提供值并因此在相关时同时调用 <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="75c6b-177">Gets a value that reports whether a line information service should provide values and therefore, should also call the <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> method when it is relevant.</span></span></summary>
        <value><span data-ttu-id="75c6b-178">如果行信息由编写器使用，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="75c6b-178"><see langword="true" /> if line information is used by the writer; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75c6b-179">此实现始终返回 `true`。</span><span class="sxs-lookup"><span data-stu-id="75c6b-179">This implementation always returns `true`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndMember">
      <MemberSignature Language="C#" Value="public override void WriteEndMember ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndMember() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteEndMember" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndMember ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndMember();" />
      <MemberSignature Language="F#" Value="override this.WriteEndMember : unit -&gt; unit" Usage="xamlObjectWriter.WriteEndMember " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="75c6b-180">关闭当前成员范围，并且可能在关闭时写入成员范围的值。</span><span class="sxs-lookup"><span data-stu-id="75c6b-180">Closes the current member scope, and may write the value of the member scope while it closes.</span></span> <span data-ttu-id="75c6b-181">新范围将成为成员的父对象范围。</span><span class="sxs-lookup"><span data-stu-id="75c6b-181">The new scope becomes the parent object scope of the member.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException"><span data-ttu-id="75c6b-182">未能从在此调用和上一个 <see langword="StartMember" /> 之间遇到的值节点创建成员值。</span><span class="sxs-lookup"><span data-stu-id="75c6b-182">Failed to create member value from a value node that is encountered between this call and a previous <see langword="StartMember" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndObject">
      <MemberSignature Language="C#" Value="public override void WriteEndObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteEndObject" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndObject();" />
      <MemberSignature Language="F#" Value="override this.WriteEndObject : unit -&gt; unit" Usage="xamlObjectWriter.WriteEndObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="75c6b-183">关闭编写器中的当前对象范围。</span><span class="sxs-lookup"><span data-stu-id="75c6b-183">Closes the current object scope in the writer.</span></span> <span data-ttu-id="75c6b-184">新对象范围将成为的父成员范围。</span><span class="sxs-lookup"><span data-stu-id="75c6b-184">The new object scope becomes the parent member scope.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75c6b-185">如果此 `EndObject` 位置范围正在关闭根对象，则新的对象范围将成为根范围。</span><span class="sxs-lookup"><span data-stu-id="75c6b-185">If this `EndObject` position scope is closing the root object, the new object scope becomes the root scope.</span></span>  
  
 <span data-ttu-id="75c6b-186">对的调用 <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> 可能尚未创建对象，因为对象成员可能是必需的初始化路径，例如初始化文本或初始化参数。</span><span class="sxs-lookup"><span data-stu-id="75c6b-186">The call to <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> might not yet have created the object because an object member might be a necessary initialization pathway, such as initialization text or initialization parameters.</span></span> <span data-ttu-id="75c6b-187">对于这些情况，调用实际上会 <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> 写入对象。</span><span class="sxs-lookup"><span data-stu-id="75c6b-187">For these cases, the call to <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> actually writes the object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteGetObject">
      <MemberSignature Language="C#" Value="public override void WriteGetObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteGetObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteGetObject" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteGetObject ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteGetObject();" />
      <MemberSignature Language="F#" Value="override this.WriteGetObject : unit -&gt; unit" Usage="xamlObjectWriter.WriteGetObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="75c6b-188">当指定对象是父属性的默认值或隐式值时，将概念 <see langword="StartObject" /> 写入对象关系图。</span><span class="sxs-lookup"><span data-stu-id="75c6b-188">Writes the conceptual <see langword="StartObject" /> into the object graph when the specified object is a default or implicit value of the parent property.</span></span> <span data-ttu-id="75c6b-189">隐式值来自从 XAML 架构上下文中获取的信息以及后备类型信息，而不是指定为输入 XAML 节点集中的对象值。</span><span class="sxs-lookup"><span data-stu-id="75c6b-189">The implicit value comes from information that is obtained from the XAML schema context and backing type information, instead of being specified as an object value in the input XAML node set.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75c6b-190"><xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> 可在生成的对象图中查看通过编写和向写入的不同之处。</span><span class="sxs-lookup"><span data-stu-id="75c6b-190">The difference between writing with <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> and writing with <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> can be seen in the resulting object graph.</span></span> <span data-ttu-id="75c6b-191"><xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> 不构造类型的实例，因为 <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> API 没有信息来通知对象关系图的构造。</span><span class="sxs-lookup"><span data-stu-id="75c6b-191"><xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> does not construct an instance of a type because the <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> API has no information to inform the object graph of what to construct.</span></span> <span data-ttu-id="75c6b-192">相反，对象是在初始化父属性时创建的;因此，不 <xref:System.Xaml.XamlObjectWriter> 需要构造它。</span><span class="sxs-lookup"><span data-stu-id="75c6b-192">Instead, the object was created when the parent property was initialized; so a <xref:System.Xaml.XamlObjectWriter> does not need to construct it.</span></span> <span data-ttu-id="75c6b-193">相反， <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> 指定应构造该类型的实例并将其插入到对象图中。</span><span class="sxs-lookup"><span data-stu-id="75c6b-193">In contrast, <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> specifies that an instance of that type should be constructed and inserted into the object graph.</span></span>  
  
 <span data-ttu-id="75c6b-194">如果将 XAML 节点流视为一系列的帧，则会将其 <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> 平衡到 <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> 调用。</span><span class="sxs-lookup"><span data-stu-id="75c6b-194">If you think of the XAML node stream as a series of frames, a <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> is balanced to a <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> call.</span></span> <span data-ttu-id="75c6b-195">因此， <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> 加上调用的次数 <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> 应等于 <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> XAML 节点流的完整对象写入计算的一部分的调用数。</span><span class="sxs-lookup"><span data-stu-id="75c6b-195">Therefore, the number of <xref:System.Xaml.XamlObjectWriter.WriteGetObject%2A> plus <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> calls should equal the number of <xref:System.Xaml.XamlObjectWriter.WriteEndObject%2A> calls as part of a complete object-writing evaluation of the XAML node stream.</span></span>  
  
 <span data-ttu-id="75c6b-196">`StartObject`对象图中的隐式对象的概念位置是必需的，因为虽然对象值本身是隐式默认值，但该对象可能仍有需要基于 XAML 节点流编写的成员。</span><span class="sxs-lookup"><span data-stu-id="75c6b-196">The conceptual `StartObject` position for an implicit object in the object graph is necessary because although the object value itself is an implicit default, that object might still have members that need to be written based on the XAML node stream.</span></span> <span data-ttu-id="75c6b-197">出现这种情况的典型方案是：为 <xref:System.Xaml.XamlObjectWriter> 集合属性写入成员节点，并且集合初始化是隐式的，以创建拥有集合属性的对象。</span><span class="sxs-lookup"><span data-stu-id="75c6b-197">A typical scenario where this occurs is when <xref:System.Xaml.XamlObjectWriter> writes member nodes for a collection property, and the collection initialization is implicit to creating the object that owns the collection property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteNamespace">
      <MemberSignature Language="C#" Value="public override void WriteNamespace (System.Xaml.NamespaceDeclaration namespaceDeclaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteNamespace(class System.Xaml.NamespaceDeclaration namespaceDeclaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteNamespace (namespaceDeclaration As NamespaceDeclaration)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteNamespace(System::Xaml::NamespaceDeclaration ^ namespaceDeclaration);" />
      <MemberSignature Language="F#" Value="override this.WriteNamespace : System.Xaml.NamespaceDeclaration -&gt; unit" Usage="xamlObjectWriter.WriteNamespace namespaceDeclaration" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceDeclaration" Type="System.Xaml.NamespaceDeclaration" />
      </Parameters>
      <Docs>
        <param name="namespaceDeclaration"><span data-ttu-id="75c6b-198">要写入的命名空间声明。</span><span class="sxs-lookup"><span data-stu-id="75c6b-198">The namespace declaration to write.</span></span></param>
        <summary><span data-ttu-id="75c6b-199">定义一个命名空间声明，该声明适用于下一个对象范围或成员范围。</span><span class="sxs-lookup"><span data-stu-id="75c6b-199">Defines a namespace declaration that applies to the next object scope or member scope.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="75c6b-200">如果当前范围是根范围、对象范围或成员范围，则可以编写命名空间声明。</span><span class="sxs-lookup"><span data-stu-id="75c6b-200">A namespace declaration can be written if the current scope is a root scope, object scope, or member scope.</span></span> <span data-ttu-id="75c6b-201">但是， <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> 只能在调用以下项之一之前调用： <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> 、 <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> 或 <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> 。</span><span class="sxs-lookup"><span data-stu-id="75c6b-201">However, <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> can only be called immediately before a call to one of the following: <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A>, <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A>, or <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A>.</span></span> <span data-ttu-id="75c6b-202">连续的 <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> 情况是将多个命名空间声明写入同一节点。</span><span class="sxs-lookup"><span data-stu-id="75c6b-202">The consecutive <xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> case is for writing multiple namespace declarations to the same node.</span></span> <span data-ttu-id="75c6b-203">最终， <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> 必须调用或。</span><span class="sxs-lookup"><span data-stu-id="75c6b-203">Eventually, either <xref:System.Xaml.XamlObjectWriter.WriteStartObject%2A> or <xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A> must be called.</span></span>  
  
 <span data-ttu-id="75c6b-204"><xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A>不使用 `Start` / `End` 比喻。</span><span class="sxs-lookup"><span data-stu-id="75c6b-204"><xref:System.Xaml.XamlObjectWriter.WriteNamespace%2A> does not use a `Start`/`End` metaphor.</span></span> <span data-ttu-id="75c6b-205">尽管 XAML 命名空间具有 CLR 表示法中的成员，但这些成员是已知的，无需表示为可扩展性的特殊类型 <xref:System.Xaml.XamlMember> 。</span><span class="sxs-lookup"><span data-stu-id="75c6b-205">Although a XAML namespace has members in the CLR representation sense, the members are known and do not need to be represented as a special type of <xref:System.Xaml.XamlMember> for extensibility.</span></span> <span data-ttu-id="75c6b-206">若要访问的值 <xref:System.Xaml.NamespaceDeclaration> ，请访问其 <xref:System.Xaml.NamespaceDeclaration.Namespace%2A> 和 <xref:System.Xaml.NamespaceDeclaration.Prefix%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="75c6b-206">To access the values of a <xref:System.Xaml.NamespaceDeclaration>, you access its <xref:System.Xaml.NamespaceDeclaration.Namespace%2A> and <xref:System.Xaml.NamespaceDeclaration.Prefix%2A> properties.</span></span>  
  
 <span data-ttu-id="75c6b-207">命名空间声明可以具有 <xref:System.String.Empty?displayProperty=nameWithType> 前缀的值。</span><span class="sxs-lookup"><span data-stu-id="75c6b-207">A namespace declaration may have a <xref:System.String.Empty?displayProperty=nameWithType> value for the prefix.</span></span> <span data-ttu-id="75c6b-208"><xref:System.String.Empty?displayProperty=nameWithType>前缀表示默认 XAML 命名空间的声明。</span><span class="sxs-lookup"><span data-stu-id="75c6b-208">A <xref:System.String.Empty?displayProperty=nameWithType> prefix represents a declaration of the default XAML namespace.</span></span> <span data-ttu-id="75c6b-209">不要尝试使用 null 来表示默认前缀; 它在此 API 中引发异常。</span><span class="sxs-lookup"><span data-stu-id="75c6b-209">Do not attempt to use null to represent the default prefix;  it throws an exception in this API.</span></span> <span data-ttu-id="75c6b-210">有关详细信息，请参阅 <xref:System.Xaml.NamespaceDeclaration>。</span><span class="sxs-lookup"><span data-stu-id="75c6b-210">For more information, see <xref:System.Xaml.NamespaceDeclaration>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="75c6b-211"><paramref name="namespaceDeclaration" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="75c6b-211">The <paramref name="namespaceDeclaration" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="75c6b-212"><paramref name="namespaceDeclaration" /> 的组件为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="75c6b-212">A component of <paramref name="namespaceDeclaration" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Xaml.XamlObjectReaderException"><span data-ttu-id="75c6b-213">尝试在无效的范围中写入 XAML 命名空间节点。</span><span class="sxs-lookup"><span data-stu-id="75c6b-213">Tried to write a XAML namespace node in an invalid scope.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartMember">
      <MemberSignature Language="C#" Value="public override void WriteStartMember (System.Xaml.XamlMember property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartMember(class System.Xaml.XamlMember property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartMember (property As XamlMember)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartMember(System::Xaml::XamlMember ^ property);" />
      <MemberSignature Language="F#" Value="override this.WriteStartMember : System.Xaml.XamlMember -&gt; unit" Usage="xamlObjectWriter.WriteStartMember property" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Xaml.XamlMember" />
      </Parameters>
      <Docs>
        <param name="property"><span data-ttu-id="75c6b-214">要写入的 XAML 属性。</span><span class="sxs-lookup"><span data-stu-id="75c6b-214">The XAML property to write.</span></span> <span data-ttu-id="75c6b-215">通常，您通过中间 XAML 节点流从 XAML 读取器中获取此值。</span><span class="sxs-lookup"><span data-stu-id="75c6b-215">Typically you obtain this value from a XAML reader through the XAML node stream intermediate.</span></span></param>
        <summary><span data-ttu-id="75c6b-216">将新成员节点写入当前对象范围，并且该范围将成为新的成员范围。</span><span class="sxs-lookup"><span data-stu-id="75c6b-216">Writes a new member node into the current object scope, and the scope becomes a new member scope.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!TIP]
>  <span data-ttu-id="75c6b-217">监视 <xref:System.Xaml.XamlDuplicateMemberException> ，这在 xaml 输入中两次设置相同的 xaml 属性时发生。</span><span class="sxs-lookup"><span data-stu-id="75c6b-217">Watch for a <xref:System.Xaml.XamlDuplicateMemberException>, which occurs when the same XAML property is set twice in the XAML input.</span></span> <span data-ttu-id="75c6b-218">在简单的情况下（如在属性语法和属性元素语法中同时设置相同属性时），可以轻松地在输入标记中看到此异常。</span><span class="sxs-lookup"><span data-stu-id="75c6b-218">In simple cases, such as when the same property is set in both attribute syntax and property element syntax, you can easily see this exception in the input markup.</span></span> <span data-ttu-id="75c6b-219">但是，可能会出现更难以发现的更多微妙情况。</span><span class="sxs-lookup"><span data-stu-id="75c6b-219">However, more subtle cases can occur that are more difficult to spot.</span></span> <span data-ttu-id="75c6b-220">例如，如果您设置了 xaml 内容属性（包括 XAML 环境属性），并且属性同时启用了可附加的用法和实例使用情况，则可能会发生此异常。</span><span class="sxs-lookup"><span data-stu-id="75c6b-220">For example, this exception might occur if you set a XAML content property, if you involve XAML ambient properties, and if a property enables both an attachable usage and an instance usage.</span></span> <span data-ttu-id="75c6b-221">在开发的调试阶段，你通常可以通过查看连接标记读取和对象图写入的中间 XAML 节点表示形式来查找此异常。</span><span class="sxs-lookup"><span data-stu-id="75c6b-221">In the debugging phases of development, you can often locate this exception by viewing the intermediate XAML node representation that connects the markup read and the object graph write.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException"><span data-ttu-id="75c6b-222"><paramref name="property" /> 将 <see cref="P:System.Xaml.XamlMember.IsUnknown" /> 设置为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="75c6b-222"><paramref name="property" /> has <see cref="P:System.Xaml.XamlMember.IsUnknown" /> set to <see langword="true" />.</span></span>  
  
<span data-ttu-id="75c6b-223">- 或 -</span><span class="sxs-lookup"><span data-stu-id="75c6b-223">-or-</span></span> 
 <span data-ttu-id="75c6b-224"><see cref="P:System.Xaml.XamlLanguage.UnknownContent" /> 传递，指示 XAML 节点流为不支持内容的对象包含内容。</span><span class="sxs-lookup"><span data-stu-id="75c6b-224"><see cref="P:System.Xaml.XamlLanguage.UnknownContent" /> passed, which indicates that the XAML node stream contained content for an object that does not support content.</span></span>  
  
<span data-ttu-id="75c6b-225">- 或 -</span><span class="sxs-lookup"><span data-stu-id="75c6b-225">-or-</span></span> 
<span data-ttu-id="75c6b-226">尝试在无效的范围中写入开始成员。</span><span class="sxs-lookup"><span data-stu-id="75c6b-226">Attempted to write a start member in an invalid scope.</span></span></exception>
        <exception cref="T:System.Xaml.XamlDuplicateMemberException"><span data-ttu-id="75c6b-227"><paramref name="property" /> 指定父对象作用域中已显式设置的属性。</span><span class="sxs-lookup"><span data-stu-id="75c6b-227"><paramref name="property" /> specifies a property that is already explicitly set in the parent object scope.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="75c6b-228"><paramref name="property" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="75c6b-228"><paramref name="property" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartObject">
      <MemberSignature Language="C#" Value="public override void WriteStartObject (System.Xaml.XamlType xamlType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartObject(class System.Xaml.XamlType xamlType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartObject (xamlType As XamlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartObject(System::Xaml::XamlType ^ xamlType);" />
      <MemberSignature Language="F#" Value="override this.WriteStartObject : System.Xaml.XamlType -&gt; unit" Usage="xamlObjectWriter.WriteStartObject xamlType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlType" Type="System.Xaml.XamlType" />
      </Parameters>
      <Docs>
        <param name="xamlType"><span data-ttu-id="75c6b-229">要写入的类型。</span><span class="sxs-lookup"><span data-stu-id="75c6b-229">The type to write.</span></span> <span data-ttu-id="75c6b-230">通常，您从 XAML 读取器中获取此值。</span><span class="sxs-lookup"><span data-stu-id="75c6b-230">Typically you obtain this value from a XAML reader.</span></span></param>
        <summary><span data-ttu-id="75c6b-231">将对象节点写入当前范围，并将该范围设置为新对象范围。</span><span class="sxs-lookup"><span data-stu-id="75c6b-231">Writes an object node into the current scope, and sets the scope to a new object scope.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException"><span data-ttu-id="75c6b-232">处理 <see cref="P:System.Xaml.XamlType.IsUnknown" /> 类型，且无法创建对象。</span><span class="sxs-lookup"><span data-stu-id="75c6b-232">Processing an <see cref="P:System.Xaml.XamlType.IsUnknown" /> type and cannot create an object.</span></span>  
  
<span data-ttu-id="75c6b-233">- 或 -</span><span class="sxs-lookup"><span data-stu-id="75c6b-233">-or-</span></span> 
<span data-ttu-id="75c6b-234">尝试在无效的范围中写入开始对象。</span><span class="sxs-lookup"><span data-stu-id="75c6b-234">Attempted to write a start object in an invalid scope.</span></span></exception>
        <exception cref="T:System.Xaml.XamlParseException"><span data-ttu-id="75c6b-235">尝试在根对象已经在设置中提供时写入根对象。</span><span class="sxs-lookup"><span data-stu-id="75c6b-235">Attempted to write a root object when the root object was already provided in the settings.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="75c6b-236"><paramref name="xamlType" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="75c6b-236"><paramref name="xamlType" /> is <see langword="null" />.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="75c6b-237">如果当前范围位于集合、字典或数组中，则应使用相关类型的方法将新实例添加到集合、字典或数组 <see langword="Add" /> 。</span><span class="sxs-lookup"><span data-stu-id="75c6b-237">If the current scope is inside a collection, dictionary, or array, the new instance should be added to the collection, dictionary, or array by using the <see langword="Add" /> method of the relevant type.</span></span> <span data-ttu-id="75c6b-238">否则，应将成员分配给新的实例。</span><span class="sxs-lookup"><span data-stu-id="75c6b-238">Otherwise, the member should be assigned to the new instance.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public override void WriteValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteValue (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteValue(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="override this.WriteValue : obj -&gt; unit" Usage="xamlObjectWriter.WriteValue value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="75c6b-239">要写入的值。</span><span class="sxs-lookup"><span data-stu-id="75c6b-239">The value to write.</span></span></param>
        <summary><span data-ttu-id="75c6b-240">将值写入当前成员范围。</span><span class="sxs-lookup"><span data-stu-id="75c6b-240">Writes a value to the current member scope.</span></span> <span data-ttu-id="75c6b-241">如果当前范围位于集合、字典或数组对象内部，则应将该值添加到集合、字典或数组中。</span><span class="sxs-lookup"><span data-stu-id="75c6b-241">If the current scope is inside a collection, dictionary, or array object, the value should be added to the collection, dictionary, or array.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Xaml.XamlObjectWriterException"><span data-ttu-id="75c6b-242">尝试在无效的范围中写入值。</span><span class="sxs-lookup"><span data-stu-id="75c6b-242">Attempted to write a value in an invalid scope.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
