<Type Name="IDestinationTypeProvider" FullName="System.Xaml.IDestinationTypeProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d83c4c817ead32bb3ee3cfecc28db90bd1b90c3b" /><Meta Name="ms.sourcegitcommit" Value="5484acfd78fc29edb48fc1ca6925046c4672954a" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/16/2020" /><Meta Name="ms.locfileid" Value="90693516" /></Metadata><TypeSignature Language="C#" Value="public interface IDestinationTypeProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDestinationTypeProvider" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.IDestinationTypeProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDestinationTypeProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDestinationTypeProvider" />
  <TypeSignature Language="F#" Value="type IDestinationTypeProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>表示一个服务，该服务可返回目标类型的 CLR 类型系统标识符。 与目标类型相关的情况是属性设置操作的目标类型由反射或其他机制间接报告。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 返回的类型 <xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A> 是使用当前 xaml 架构上下文从 XAML 节点流的当前位置解析的。  
  
 如果使用 XAML 类型系统作为 .NET Framework XAML 服务实现的，并在这些条件下访问服务上下文，则将 <xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A> <xref:System.Xaml.XamlType.UnderlyingType%2A> 基于可用的 xaml 类型系统信息和基于 CLR 的 xaml 架构上下文返回。  
  
 此服务适用于纯 CLR 反射或其他机制可能无法提供与目标类型有关的信息的情况。 下面是一些适用于的相关方案的列表 <xref:System.Xaml.IDestinationTypeProvider> ：  
  
-   CLR 类型系统报告间接类型，这是因为 CLR 如何定义和使用类型，以及你需要真正的目标类型。 例如，.NET Framework XAML 服务中的 Api 在处理事件成员时在内部使用此服务。 事件由纯 CLR 反射作为进行报告 <xref:System.Delegate> 。  
  
-   你需要确保类型转换器用法的目标类型与类型转换器可以生成的预期类型匹配。 当目标类型为参数化或泛型时，此方案很有用。  
  
-   正在从嵌套在另一个值转换器中的用法调用值转换器。 在这种情况下， <xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A> 将展开嵌套并返回所设置的实际属性的目标类型，而不是返回任何干预值转换器的输出类型。  
  
 <xref:System.Xaml.IDestinationTypeProvider>当 xaml 对象编写器调用值转换行为时，类型转换器和标记扩展可以在 xaml 对象编写器提供的服务上下文上查询为服务。 有关详细信息，请参阅[可用于类型转换器和标记扩展](/dotnet/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions)[的 XAML 的类型转换器和标记扩展](/dotnet/framework/xaml-services/type-converters-and-markup-extensions-for-xaml)。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlObjectWriter" />
    <related type="Article" href="/dotnet/desktop-wpf/xaml-services/type-converters-and-markup-extensions">XAML 的类型转换器和标记扩展</related>
  </Docs>
  <Members>
    <Member MemberName="GetDestinationType">
      <MemberSignature Language="C#" Value="public Type GetDestinationType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetDestinationType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.IDestinationTypeProvider.GetDestinationType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDestinationType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetDestinationType();" />
      <MemberSignature Language="F#" Value="abstract member GetDestinationType : unit -&gt; Type" Usage="iDestinationTypeProvider.GetDestinationType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回 CLR <see cref="T:System.Type" />，用于标识相关类型转换器或标记扩展的目标类型。</summary>
        <returns>目标类型的 CLR <see cref="T:System.Type" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法没有输入参数。 返回 (，以及返回除) 以外的任何内容是否由 `null` XAML 节点流中的当前节点位置确定。  
  
## <a name="service-implementers"></a>服务实施者  
 如果重新实现此服务，则该 <xref:System.Xaml.IDestinationTypeProvider.GetDestinationType%2A> 方法应返回标记扩展或类型转换器期望对照其最具体的转换或输出类型进行检查的类型。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
