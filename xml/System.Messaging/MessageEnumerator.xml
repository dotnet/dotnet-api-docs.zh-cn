<Type Name="MessageEnumerator" FullName="System.Messaging.MessageEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8efdebcdda0d244a01f27597d636c3a6bc61870e" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83953893" /></Metadata><TypeSignature Language="C#" Value="public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageEnumerator extends System.MarshalByRefObject implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageEnumerator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageEnumerator : MarshalByRefObject, IDisposable, System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type MessageEnumerator = class&#xA;    inherit MarshalByRefObject&#xA;    interface IEnumerator&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>提供一个只进游标，用于枚举消息队列中的消息。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:System.Messaging.MessageEnumerator> 来与队列中的消息进行动态交互。 通过 <xref:System.Messaging.MessageQueue> 类提供的方法可以返回指向队列中的消息动态列表的 <xref:System.Messaging.MessageEnumerator>，或返回在调用指定方法时队列的给定即时快照上包含副本的数组。  
  
 与静态快照不同，枚举器允许您修改集合。 使用 <xref:System.Messaging.MessageEnumerator>，可以从队列中删除消息，而更改会立即反映在队列中。  
  
 枚举器在查询队列时不会从队列中删除消息。 它返回有关当前光标位置处的消息的信息，但它将消息保留在队列中。  
  
 <xref:System.Messaging.MessageEnumerator> 是游标，初始化为动态列表的开头。 列表的顺序与消息在队列中的顺序相同，具体取决于消息的优先级。 可以通过调用 <xref:System.Messaging.MessageEnumerator.MoveNext%2A>将光标移到队列中的第一条消息。 初始化枚举器后，可以使用 <xref:System.Messaging.MessageEnumerator.MoveNext%2A> 前进到其余的消息。 可以通过将超时传递到 <xref:System.Messaging.MessageEnumerator.MoveNext%2A> 方法来指定是否等待消息变为可用。  
  
 由于枚举器是动态的，因此枚举器可以访问附加在游标当前位置之外的消息（例如，由于低优先级）。 无法访问在游标的当前位置之前插入的消息。 不能使用 <xref:System.Messaging.MessageEnumerator>向后移动。 游标允许只进移动。 利用 <xref:System.Messaging.MessageEnumerator.Reset%2A> 方法，您可以将游标放回队列的开头。  
  
 给定队列的 <xref:System.Messaging.MessageEnumerator> 实例是独立工作的。 你可以创建两个适用于同一队列的 <xref:System.Messaging.MessageEnumerator> 实例。 如果第二个枚举器定位在第一个枚举器之前，则 <xref:System.Messaging.MessageEnumerator> 对队列中的消息所做的更改将立即反映在第二个枚举器中。 但是，如果两个枚举器具有相同的位置，并且其中一个枚举器删除了该位置的消息，则如果其他枚举器尝试获取现已删除消息的 <xref:System.Messaging.MessageEnumerator.Current%2A> 属性的值，则会引发异常。  
  
> [!NOTE]
>  如果创建 <xref:System.Messaging.MessageQueue> 的实例，并将 <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=nameWithType> 设置为 `true`，则在连接到队列时，其他应用程序不能修改枚举器中的消息。  
  
   
  
## Examples  
 下面的示例获取队列中消息的动态列表，并对 <xref:System.Messaging.Message.Priority%2A> 属性设置为 <xref:System.Messaging.MessagePriority.Lowest?displayProperty=nameWithType>的所有消息进行计数。  
  
 [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CPP/mqgetmessageenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CS/mqgetmessageenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/VB/mqgetmessageenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.Message" />
    <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="messageEnumerator.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放与枚举数关联的资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在游标的生存期内，操作系统会将打开的句柄保留到队列中。 使用完枚举器后，调用 <xref:System.Messaging.MessageEnumerator.Close%2A> 以释放与句柄关联的资源。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.Message Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Message ^ Current { System::Messaging::Message ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Messaging.Message" Usage="System.Messaging.MessageEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取该枚举数指向的当前 <see cref="T:System.Messaging.Message" />。</summary>
        <value>当前消息。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建枚举器后，该枚举数指向第一条消息之前的位置。 在这种情况下，<xref:System.Messaging.MessageEnumerator.Current%2A> 无效，如果访问，将引发异常。 必须调用 <xref:System.Messaging.MessageEnumerator.MoveNext%2A> 将游标定位到队列中的第一条消息。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">您在第一次调用 <see cref="P:System.Messaging.MessageEnumerator.Current" /> 之前调用了 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />。 游标位于消息枚举的第一个元素之前。  
  
- 或 - 
您在对 <see cref="P:System.Messaging.MessageEnumerator.Current" /> 的调用返回 <see langword="false" />（指示游标位于消息枚举中的最后一个元素之后）之后调用了 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">枚举数当前所指向的消息不再存在。 可能已将其删除。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="CursorHandle">
      <MemberSignature Language="C#" Value="public IntPtr CursorHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int CursorHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CursorHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr CursorHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.CursorHandle : nativeint" Usage="System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取用于浏览队列消息的本机消息队列游标句柄。</summary>
        <value>本机游标句柄。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性包含枚举的本机句柄。 使用完枚举器后，调用 <xref:System.Messaging.MessageEnumerator.Close%2A> 释放此资源。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">此句柄不存在。</exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>释放 <see cref="T:System.Messaging.MessageEnumerator" /> 使用的资源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放 <see cref="T:System.Messaging.MessageEnumerator" /> 使用的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 调用 <xref:System.Messaging.MessageEnumerator.Dispose%2A> 允许出于其他目的重新分配 <xref:System.Messaging.MessageEnumerator> 所使用的资源。 有关 <xref:System.Messaging.MessageEnumerator.Dispose%2A>的详细信息，请参阅[清理非托管资源](/dotnet/standard/garbage-collection/unmanaged)。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/garbage-collection/unmanaged">清理非托管资源</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageEnumerator.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">如果为 <see langword="true" />，则托管及非托管资源都释放；如果为 <see langword="false" />，则仅释放非托管资源。</param>
        <summary>释放 <see cref="T:System.Messaging.MessageEnumerator" /> 使用的非托管资源，并选择性地释放托管资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法由 public <xref:System.Messaging.MessageEnumerator.Dispose%2A> 方法和 <xref:System.Object.Finalize%2A> 方法调用。 `Dispose()` 调用受保护的 `Dispose(Boolean)` 方法，并将 `disposing` 参数设置为 `true`。 <xref:System.Object.Finalize%2A> 调用 `disposing` 设置为 `false`的 `Dispose`。  
  
 当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.Messaging.MessageEnumerator> 引用的、由任何托管对象持有的全部资源。 此方法将调用每个被引用对象的 `Dispose()` 方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Dispose" /> 可以由其他对象多次调用。 重写 <see langword="Dispose(Boolean)" /> 时，请注意不要引用在以前调用 <see langword="Dispose" /> 时已释放的对象。 有关如何实现 <see langword="Dispose" />的详细信息，请参阅[实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)。  
  
有关 <see langword="Dispose" /> 和 <see langword="Finalize" />的详细信息，请参阅[清理非托管资源](/dotnet/standard/garbage-collection/unmanaged)和[重写 Finalize 方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))。</para></block>
        <related type="Article" href="/dotnet/standard/garbage-collection/implementing-dispose">实现 Dispose 方法</related>
        <related type="Article" href="/dotnet/standard/garbage-collection/unmanaged">清理非托管资源</related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageEnumerator ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageEnumerator.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放枚举数控制的资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
此方法重写 <xref:System.Object.Finalize>。 应用程序代码不应调用此方法;在垃圾回收过程中会自动调用对象的 Finalize 方法，除非已通过调用 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> 方法禁用了垃圾回收器终止。

有关详细信息，请参阅[Finalize 方法和析构函数](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v=vs.100))、[清理非托管资源](/dotnet/standard/garbage-collection/unmanaged)和[重写 Finalize 方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))。

]]></format>
        </remarks>
        <forInternalUseOnly />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveNext">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使枚举数前进到队列中的下一条消息。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="messageEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>如果当前队列中有下一条可用的消息，则使枚举数前进到该消息。</summary>
        <returns>如果枚举器已成功推进到下一条消息，则为 <see langword="true" />；如果枚举器已传递到队列的末尾，则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果队列中没有消息，则此重载立即返回。 还有另一个重载，用于等待消息到达的指定 <xref:System.TimeSpan>。  
  
 如果消息当前不可用，因为队列为空或者已移出集合中的最后一个元素，则 <xref:System.Messaging.MessageEnumerator.MoveNext%2A> 将 `false` 返回到调用方法。  
  
 创建时，枚举器在概念上放置在队列的第一条消息之前，第一次调用 <xref:System.Messaging.MessageEnumerator.MoveNext%2A> 会将队列的第一条消息引入视图中。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">引发了消息队列特定的异常。</exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext (timeout As TimeSpan) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.MoveNext : TimeSpan -&gt; bool" Usage="messageEnumerator.MoveNext timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">枚举数位于队列的末尾时，等待消息变得可用的 <see cref="T:System.TimeSpan" />。</param>
        <summary>使枚举数前进到队列中的下一条消息。 如果枚举数位于队列的末尾，则 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> 将一直等到消息可用或给定 timeout 到期为止。</summary>
        <returns>如果枚举数成功地前进到下一条消息，为 <see langword="true" />；如果枚举数已经到达队列的末尾，并且在 <paramref name="timeout" /> 参数所指定的时间内没有消息变得可用，则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果队列中没有消息，或者游标已到达队列的末尾，则此重载将等待。 如果消息当前不可用，因为队列为空，或由于移动超出了集合中的最后一个元素，<xref:System.Messaging.MessageEnumerator.MoveNext%2A> 将等待指定的超时。  
  
 如果游标已在队列的末尾，<xref:System.Messaging.MessageEnumerator.MoveNext%2A> 仅在新消息到达指定的时间间隔内时返回 `true`，其优先级低于当前队列中的所有消息，并置于队列的末尾。 如果队列中没有更多的消息，则不会立即返回没有参数的重载。  
  
 创建时，枚举器在概念上定位在枚举的第一条消息之前，第一次调用 <xref:System.Messaging.MessageEnumerator.MoveNext%2A> 会将枚举的第一条消息引入视图中。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">为 timeout 参数指定的值无效。 它可能表示负数。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">引发了消息队列特定的异常。  
  
 - 或 -  
  
 超时已过期。</exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveCurrent">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从队列中移除当前消息并将该消息返回给调用应用程序。 移除消息即从队列中删除该消息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仅当使用 <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>检索 <xref:System.Messaging.MessageEnumerator> 实例时，才适用为这些重载描述的行为。 不要使用 <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> 检索 <xref:System.Messaging.MessageEnumerator> 的实例，因为此方法已弃用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent () As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent();" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : unit -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从事务性或非事务性队列中移除当前消息，并将该消息返回给调用应用程序。 对于消息到达队列的用时没有超时指定。</summary>
        <returns><see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 删除并返回光标当前位置的消息。  
  
 如果使用队列日志记录，删除消息将导致副本保留在日记队列中，就像 <xref:System.Messaging.MessageQueue> 类的 <xref:System.Messaging.MessageQueue.Receive%2A> 方法一样。  
  
 删除当前消息时，光标将移到下一条消息。 调用 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>后，无需调用 <xref:System.Messaging.MessageEnumerator.MoveNext%2A>。  
  
 如果在事务队列中调用此重载，则消息队列将创建单个内部事务。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transaction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="transaction">指定从中移除消息的事务的 <see cref="T:System.Messaging.MessageQueueTransaction" /> 对象。</param>
        <summary>从事务性队列中移除当前消息，并将该消息返回给调用应用程序。 对于消息到达队列的用时没有超时指定。</summary>
        <returns><see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 使用 `transaction` 参数定义的内部事务上下文删除并返回光标当前位置的消息。  
  
 如果使用队列日志记录，删除消息将导致副本保留在日记队列中，就像 <xref:System.Messaging.MessageQueue> 类的 <xref:System.Messaging.MessageQueue.Receive%2A> 方法一样。  
  
 使用事务性队列时，事务的回滚会导致通过调用 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 删除的任何消息都将返回到队列中。 在提交事务之前，删除操作不可逆。  
  
 删除当前消息时，光标将移到下一条消息。 调用 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>后，无需调用 <xref:System.Messaging.MessageEnumerator.MoveNext%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="transaction" /> 参数为 <see langword="null" />。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent transactionType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="transactionType"><see cref="T:System.Messaging.MessageQueueTransactionType" /> 值之一，它描述与消息关联的事务上下文的类型。</param>
        <summary>从队列中移除当前消息并将该消息返回给调用应用程序。 对于消息到达队列的用时没有超时指定。</summary>
        <returns><see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 使用 `transactionType` 参数定义的事务上下文删除并返回光标当前位置的消息。  
  
 如果已存在附加到要用于接收消息的线程的外部事务上下文，请指定 `transactionType` 参数 `Automatic`。 如果要将消息作为单个内部事务接收，请指定 `Single`。 如果要在事务上下文之外接收来自事务性队列的消息，可以指定 `None`。  
  
 如果使用队列日志记录，删除消息将导致副本保留在日记队列中，就像 <xref:System.Messaging.MessageQueue> 类的 <xref:System.Messaging.MessageQueue.Receive%2A> 方法一样。  
  
 使用事务性队列时，事务的回滚会导致通过调用 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 删除的任何消息都将返回到队列中。 在提交事务之前，删除操作不可逆。  
  
 删除当前消息时，光标将移到下一条消息。 调用 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>后，无需调用 <xref:System.Messaging.MessageEnumerator.MoveNext%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="transactionType" /> 参数不是 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 成员之一。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">等待消息到达队列的时间间隔。</param>
        <summary>从队列中移除当前消息并将该消息返回给调用应用程序。 如果有要移除的消息，该方法将立即返回该消息。 否则，该方法在指定的超时内等待新消息到达。</summary>
        <returns><see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 删除并返回光标当前位置的消息。 如果游标位于队列的末尾，则该方法的重载将一直等待，直到有可用的消息或 `timeout` 参数指定的间隔过期。  
  
 如果使用队列日志记录，删除消息将导致副本保留在日记队列中，就像 <xref:System.Messaging.MessageQueue> 类的 <xref:System.Messaging.MessageQueue.Receive%2A> 方法一样。  
  
 删除当前消息时，光标将移到下一条消息。 调用 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>后，无需调用 <xref:System.Messaging.MessageEnumerator.MoveNext%2A>。  
  
 如果在事务队列中调用此重载，则消息队列将创建单个内部事务。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">超时已过期。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transaction As MessageQueueTransaction) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransaction ^ transaction);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransaction -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="timeout">等待消息被移除的时间间隔。</param>
        <param name="transaction">为消息指定事务上下文的 <see cref="T:System.Messaging.MessageQueueTransaction" /> 对象。</param>
        <summary>从事务性队列中移除当前消息，并将该消息返回给调用应用程序。 如果有要移除的消息，该方法将立即返回该消息。 否则，该方法在指定的超时内等待新消息到达。</summary>
        <returns><see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 删除并返回光标当前位置的消息。 如果游标位于队列的末尾，则该方法的重载将一直等待，直到有可用的消息或 `timeout` 参数指定的间隔过期。  
  
 使用事务性队列时，事务的回滚会导致通过调用 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 删除的任何消息都将返回到队列中。 在提交事务之前，删除操作不可逆。  
  
 如果使用队列日志记录，删除消息将导致副本保留在日记队列中，就像 <xref:System.Messaging.MessageQueue> 类的 <xref:System.Messaging.MessageQueue.Receive%2A> 方法一样。  
  
 删除当前消息时，光标将移到下一条消息。 调用 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>后，无需调用 <xref:System.Messaging.MessageEnumerator.MoveNext%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="transaction" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">超时已过期。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveCurrent (timeout As TimeSpan, transactionType As MessageQueueTransactionType) As Message" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Messaging::Message ^ RemoveCurrent(TimeSpan timeout, System::Messaging::MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="F#" Value="member this.RemoveCurrent : TimeSpan * System.Messaging.MessageQueueTransactionType -&gt; System.Messaging.Message" Usage="messageEnumerator.RemoveCurrent (timeout, transactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="timeout">等待消息被移除的时间间隔。</param>
        <param name="transactionType"><see cref="T:System.Messaging.MessageQueueTransactionType" /> 值之一，它描述与消息关联的事务上下文的类型。</param>
        <summary>从队列中移除当前消息并将该消息返回给调用应用程序。 如果有要移除的消息，该方法将立即返回该消息。 否则，该方法在指定的超时内等待新消息到达。</summary>
        <returns><see cref="T:System.Messaging.Message" />，它引用队列中可用的第一条消息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 使用 `transactionType` 参数定义的事务上下文删除并返回光标当前位置的消息。 如果游标位于队列的末尾，则该方法的重载将一直等待，直到有可用的消息或 `timeout` 参数指定的间隔过期。  
  
 如果已存在附加到要用于接收消息的线程的外部事务上下文，请指定 `transactionType` 参数 `Automatic`。 如果要将消息作为单个内部事务接收，请指定 `Single`。 如果要在事务上下文之外接收来自事务性队列的消息，可以指定 `None`。  
  
 如果使用队列日志记录，删除消息将导致副本保留在日记队列中，就像 <xref:System.Messaging.MessageQueue> 类的 <xref:System.Messaging.MessageQueue.Receive%2A> 方法一样。  
  
 使用事务性队列时，事务的回滚会导致通过调用 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 删除的任何消息都将返回到队列中。 在提交事务之前，删除操作不可逆。  
  
 删除当前消息时，光标将移到下一条消息。 调用 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>后，无需调用 <xref:System.Messaging.MessageEnumerator.MoveNext%2A>。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">为 <paramref name="timeout" /> 参数指定的值无效。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">超时已过期。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="transactionType" /> 参数不是 <see cref="T:System.Messaging.MessageQueueTransactionType" /> 成员之一。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="messageEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>重置当前枚举数，使其指向队列开头。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 枚举器只能向前移动。 使用此方法可以在队列的开头重新开始。  
  
 调用 <xref:System.Messaging.MessageEnumerator.Reset%2A>后，游标将指向第一条消息。 调用 <xref:System.Messaging.MessageEnumerator.Reset%2A> 后，无需调用 <xref:System.Messaging.MessageEnumerator.MoveNext%2A>，以便将游标向前移动到队列中的第一条消息。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IEnumerator.Current : obj" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返回引用当前游标位置的消息的 <see cref="T:System.Messaging.Message" />。</summary>
        <value>引用当前游标位置的消息的 <see cref="T:System.Messaging.Message" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">您在第一次调用 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> 之前访问了此属性。 游标位于消息枚举的第一个元素之前。- 或 - 你在对 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> 的调用返回 false（指示游标位于消息枚举中的最后一个元素之后）之后访问了此属性。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">枚举数当前所指向的消息不再存在。 可能已将其删除。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
