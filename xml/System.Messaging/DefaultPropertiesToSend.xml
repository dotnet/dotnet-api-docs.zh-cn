<Type Name="DefaultPropertiesToSend" FullName="System.Messaging.DefaultPropertiesToSend">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f0fe3640da541008b62d5fb04df7b52be40c82f9" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89915999" /></Metadata><TypeSignature Language="C#" Value="public class DefaultPropertiesToSend" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DefaultPropertiesToSend extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.DefaultPropertiesToSend" />
  <TypeSignature Language="VB.NET" Value="Public Class DefaultPropertiesToSend" />
  <TypeSignature Language="C++ CLI" Value="public ref class DefaultPropertiesToSend" />
  <TypeSignature Language="F#" Value="type DefaultPropertiesToSend = class" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.ComponentModel.ExpandableObjectConverter))&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指定在向消息队列发送 <see cref="T:System.Messaging.Message" /> 实例以外的对象时所使用的默认属性值。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以对发送到的消息设置所选属性的默认值 <xref:System.Messaging.MessageQueue> 。 <xref:System.Messaging.DefaultPropertiesToSend> 用于指定在将实例以外的对象发送到队列时发送的消息的默认属性值 <xref:System.Messaging.Message> ，例如，传递到代码片段中的方法的字符串自变量 <xref:System.Messaging.MessageQueue.Send%2A> `myMessageQueue.Send("hello")` 。 <xref:System.Messaging.Message>类在中具有与相同的、具有相同命名的属性，这些属性在 <xref:System.Messaging.DefaultPropertiesToSend> 专门发送实例时提供值 <xref:System.Messaging.Message> 。 即使已 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=nameWithType> 为队列指定，也 <xref:System.Messaging.Message> 会将对象发送到该队列，这将导致具有相同命名属性的值 <xref:System.Messaging.Message> 覆盖队列的 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> 值。  
  
 未显式设置的属性默认为构造函数指定的值 <xref:System.Messaging.DefaultPropertiesToSend.%23ctor%2A> 。  
  
 有关实例的初始属性值的列表 <xref:System.Messaging.DefaultPropertiesToSend> ，请参见 <xref:System.Messaging.DefaultPropertiesToSend> 构造函数。  
  
   
  
## Examples  
 下面的代码示例使用消息的优先级来确定要为消息发送的默认属性。  
  
 [!code-cpp[MessageQueue.DefaultPropertiesToSend#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.DefaultPropertiesToSend/CPP/mqdefaultpropertiestosend.cpp#1)]
 [!code-csharp[MessageQueue.DefaultPropertiesToSend#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.DefaultPropertiesToSend/CS/mqdefaultpropertiestosend.cs#1)]
 [!code-vb[MessageQueue.DefaultPropertiesToSend#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.DefaultPropertiesToSend/VB/mqdefaultpropertiestosend.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.Message" />
    <altmember cref="P:System.Messaging.MessageQueue.DefaultPropertiesToSend" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DefaultPropertiesToSend ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.DefaultPropertiesToSend.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DefaultPropertiesToSend();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Messaging.DefaultPropertiesToSend" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 您可以创建的新实例 <xref:System.Messaging.DefaultPropertiesToSend> ，以定义要与发送到不属于类型的队列的对象关联的默认属性值 <xref:System.Messaging.Message> 。 使用对象时 <xref:System.Messaging.MessageQueue> ，将 <xref:System.Messaging.DefaultPropertiesToSend> 为你创建一个实例，并将其与 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=nameWithType> 的成员相关联 <xref:System.Messaging.MessageQueue> 。  
  
 可以通过两种方法来定义要发送的队列的默认属性，如下面的 c # 代码中所示。 可以设置此实例的值 <xref:System.Messaging.DefaultPropertiesToSend> ，并将其与队列的属性关联 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=nameWithType> ：  
  
```  
DefaultPropertiesToSend myDefaultProperties = new DefaultPropertiesToSend();  
  // Set default values for the properties.  
  myDefaultProperties.Label = "myLabel";  
  myDefaultProperties.Recoverable = false;  
 ...  
  myMessageQueue.DefaultPropertiesToSend = myDefaultProperties;  
  myMessageQueue.Send("hello");  
```  
  
 或者，可以直接将值分配给 <xref:System.Messaging.MessageQueue> 实例的 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> 属性：  
  
```  
myMessageQueue.DefaultPropertiesToSend.Label = "myLabel";  
  myMessageQueue.DefaultPropertiesToSend.Recoverable = false;  
...  
  myMessageQueue.Send("hello");  
```  
  
 如果选择其中的第二个选项，则无需 <xref:System.Messaging.DefaultPropertiesToSend.%23ctor%2A> 显式调用构造函数。 <xref:System.Messaging.DefaultPropertiesToSend>例如，如果属性的默认值取决于要发送的消息的某些条件，则您可能需要创建的实例。 可以创建多个 <xref:System.Messaging.DefaultPropertiesToSend> 实例，并在将 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=nameWithType> 消息发送到队列之前将一个实例分配给队列的属性。  
  
 下表显示了实例的初始属性值 <xref:System.Messaging.DefaultPropertiesToSend> 。  
  
|属性|初始值|  
|--------------|-------------------|  
|<xref:System.Messaging.DefaultPropertiesToSend.AcknowledgeType%2A>|`AcknowledgeTypes.None`|  
|<xref:System.Messaging.DefaultPropertiesToSend.AdministrationQueue%2A>|`null`|  
|<xref:System.Messaging.DefaultPropertiesToSend.AppSpecific%2A>|0|  
|<xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A>|`true`|  
|<xref:System.Messaging.DefaultPropertiesToSend.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  
|<xref:System.Messaging.DefaultPropertiesToSend.Extension%2A>|长度为零的字节数组|  
|<xref:System.Messaging.DefaultPropertiesToSend.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  
|<xref:System.Messaging.DefaultPropertiesToSend.Label%2A>|空字符串 ( "" ) |  
|<xref:System.Messaging.DefaultPropertiesToSend.Priority%2A>|`MessagePriority.Normal`|  
|<xref:System.Messaging.DefaultPropertiesToSend.Recoverable%2A>|`false`|  
|<xref:System.Messaging.DefaultPropertiesToSend.ResponseQueue%2A>|`null`|  
|<xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.DefaultPropertiesToSend.TransactionStatusQueue%2A>|`null`|  
|<xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>|`false`|  
|<xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A>|`false`|  
|<xref:System.Messaging.DefaultPropertiesToSend.UseEncryption%2A>|`false`|  
|<xref:System.Messaging.DefaultPropertiesToSend.UseJournalQueue%2A>|`false`|  
|<xref:System.Messaging.DefaultPropertiesToSend.UseTracing%2A>|`false`|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.AcknowledgeTypes" />
        <altmember cref="T:System.Messaging.EncryptionAlgorithm" />
        <altmember cref="T:System.Messaging.HashAlgorithm" />
        <altmember cref="T:System.Messaging.MessagePriority" />
        <altmember cref="F:System.Messaging.Message.InfiniteTimeout" />
        <altmember cref="P:System.Messaging.MessageQueue.DefaultPropertiesToSend" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="AcknowledgeType">
      <MemberSignature Language="C#" Value="public System.Messaging.AcknowledgeTypes AcknowledgeType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.AcknowledgeTypes AcknowledgeType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.AcknowledgeType" />
      <MemberSignature Language="VB.NET" Value="Public Property AcknowledgeType As AcknowledgeTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::AcknowledgeTypes AcknowledgeType { System::Messaging::AcknowledgeTypes get(); void set(System::Messaging::AcknowledgeTypes value); };" />
      <MemberSignature Language="F#" Value="member this.AcknowledgeType : System.Messaging.AcknowledgeTypes with get, set" Usage="System.Messaging.DefaultPropertiesToSend.AcknowledgeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgAcknowledgeType")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgAcknowledgeType")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.AcknowledgeTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置返回给发送应用程序的确认消息的类型。</summary>
        <value><see cref="T:System.Messaging.AcknowledgeTypes" /> 枚举值之一。 此值用于确定系统在管理队列中传递的确认消息的类型以及向发送应用程序返回确认消息的时间。 默认值为 <see langword="AcknowledgeTypes.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.AcknowledgeType%2A>属性指定要返回给发送应用程序的确认消息的类型。 例如，将属性设置 <xref:System.Messaging.DefaultPropertiesToSend.AcknowledgeType%2A> 为在消息到达其目标、检索时或超时是否阻止消息到达目标队列或从目标队列检索消息时请求通知。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.AdministrationQueue" />
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="T:System.Messaging.AcknowledgeTypes" />
      </Docs>
    </Member>
    <Member MemberName="AdministrationQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue AdministrationQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue AdministrationQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.AdministrationQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property AdministrationQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ AdministrationQueue { System::Messaging::MessageQueue ^ get(); void set(System::Messaging::MessageQueue ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AdministrationQueue : System.Messaging.MessageQueue with get, set" Usage="System.Messaging.DefaultPropertiesToSend.AdministrationQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgAdministrationQueue")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgAdministrationQueue")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置队列，该队列接收由消息队列生成的确认消息。</summary>
        <value><see cref="T:System.Messaging.MessageQueue" />，指定用于系统生成的确认消息的管理队列。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性中指定的队列 <xref:System.Messaging.DefaultPropertiesToSend.AdministrationQueue%2A> 可以是任何非事务性队列。 发送到管理队列的确认消息可以指示原始消息是否已到达其目标队列，以及是否已从队列中删除该消息。  
  
 当 <xref:System.Messaging.DefaultPropertiesToSend.AcknowledgeType%2A> 属性具有以外的任何值时 `None` ，发送应用程序必须指定要用作管理队列的队列。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.AcknowledgeType" />
        <altmember cref="P:System.Messaging.Message.AdministrationQueue" />
      </Docs>
    </Member>
    <Member MemberName="AppSpecific">
      <MemberSignature Language="C#" Value="public int AppSpecific { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AppSpecific" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.AppSpecific" />
      <MemberSignature Language="VB.NET" Value="Public Property AppSpecific As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AppSpecific { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.AppSpecific : int with get, set" Usage="System.Messaging.DefaultPropertiesToSend.AppSpecific" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(0)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgAppSpecific")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgAppSpecific")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置应用程序特定的附加信息。</summary>
        <value>应用程序特定的信息。 默认值为 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.AppSpecific%2A>属性包含附加的应用程序特定的信息，这些信息可用于组织不同类型的消息，例如，使用应用程序特定的索引。 应用程序负责解释 <xref:System.Messaging.DefaultPropertiesToSend.AppSpecific%2A> 信息。  
  
 如果可能，消息数据应包含在消息的正文中，而不是包含在 <xref:System.Messaging.DefaultPropertiesToSend.AppSpecific%2A> 属性中。  
  
 使用外部队列时，请使用 <xref:System.Messaging.DefaultPropertiesToSend.Extension%2A> 属性指定非消息队列消息属性。 与一样 <xref:System.Messaging.DefaultPropertiesToSend.AppSpecific%2A> ，应用程序负责了解属性的内容 <xref:System.Messaging.DefaultPropertiesToSend.Extension%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.Extension" />
        <altmember cref="P:System.Messaging.Message.AppSpecific" />
      </Docs>
    </Member>
    <Member MemberName="AttachSenderId">
      <MemberSignature Language="C#" Value="public bool AttachSenderId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AttachSenderId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.AttachSenderId" />
      <MemberSignature Language="VB.NET" Value="Public Property AttachSenderId As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AttachSenderId { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AttachSenderId : bool with get, set" Usage="System.Messaging.DefaultPropertiesToSend.AttachSenderId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgAttachSenderId")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgAttachSenderId")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示发送方 ID 是否应附在消息中。</summary>
        <value>如果发送方 ID 应附在消息中，则为 <see langword="true" />，否则为 <see langword="false" />。 默认值为 <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 发件人 ID 是表示发送用户的标识符的字节数组。 发件人 ID 由消息队列设置，接收队列管理器使用该 ID 来验证发送方是否有权访问队列。 仅当消息到达目标队列时已通过身份验证，才可信任发送方 ID。  
  
 如果未将发送方 ID 附加到消息，则发送应用程序会指示消息队列在将消息发送到目标队列时不应验证消息的发送方。 如果目标队列只接受经过身份验证的消息， <xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A> 或者或 <xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A> 为，则在 `false` 消息到达队列时将拒绝该消息。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.UseAuthentication" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.HashAlgorithm" />
        <altmember cref="P:System.Messaging.Message.AttachSenderId" />
        <altmember cref="P:System.Messaging.Message.SenderId" />
      </Docs>
    </Member>
    <Member MemberName="EncryptionAlgorithm">
      <MemberSignature Language="C#" Value="public System.Messaging.EncryptionAlgorithm EncryptionAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.EncryptionAlgorithm EncryptionAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.EncryptionAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Property EncryptionAlgorithm As EncryptionAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::EncryptionAlgorithm EncryptionAlgorithm { System::Messaging::EncryptionAlgorithm get(); void set(System::Messaging::EncryptionAlgorithm value); };" />
      <MemberSignature Language="F#" Value="member this.EncryptionAlgorithm : System.Messaging.EncryptionAlgorithm with get, set" Usage="System.Messaging.DefaultPropertiesToSend.EncryptionAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgEncryptionAlgorithm")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgEncryptionAlgorithm")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.EncryptionAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于加密私有消息体的加密算法。</summary>
        <value><see cref="T:System.Messaging.EncryptionAlgorithm" /> 枚举值之一。 默认值为 <see langword="RC2" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果消息是私有的，则在发送消息之前对其进行加密，并在收到消息时解密。 <xref:System.Messaging.DefaultPropertiesToSend.EncryptionAlgorithm%2A>属性指定用于对专用消息的消息正文进行加密的算法。  
  
 队列可能要求对传入消息进行加密。 如果将非加密 (非私有) 消息发送到只接受私有消息的队列，或将私有消息发送到只接受非私有消息的队列，则队列将拒绝该消息。 如果消息被拒绝，则发送应用程序可以请求向发送应用程序返回否定确认消息。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.UseEncryption" />
        <altmember cref="P:System.Messaging.MessageQueue.EncryptionRequired" />
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.AcknowledgeType" />
        <altmember cref="P:System.Messaging.Message.EncryptionAlgorithm" />
        <altmember cref="T:System.Messaging.EncryptionAlgorithm" />
      </Docs>
    </Member>
    <Member MemberName="Extension">
      <MemberSignature Language="C#" Value="public byte[] Extension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Extension" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.Extension" />
      <MemberSignature Language="VB.NET" Value="Public Property Extension As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Extension { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Extension : byte[] with get, set" Usage="System.Messaging.DefaultPropertiesToSend.Extension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.ComponentModel.Design.ArrayEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.ComponentModel.Design.ArrayEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgExtension")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgExtension")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.ComponentModel.Design.ArrayEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.ComponentModel.Design.ArrayEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.ComponentModel.Design.ArrayEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.ComponentModel.Design.ArrayEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与消息关联的附加信息。</summary>
        <value>字节数组，提供与消息关联的、应用程序定义的附加信息。 默认值为零长度的数组。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.Extension%2A>属性提供与消息关联的应用程序定义的附加信息，例如大型二进制对象。 接收应用程序负责解释的内容 <xref:System.Messaging.DefaultPropertiesToSend.Extension%2A> 。  
  
 如果可能，消息数据应包含在消息的正文中，而不是在扩展中。  
  
 使用外部队列时，请使用 <xref:System.Messaging.DefaultPropertiesToSend.Extension%2A> 属性指定非消息队列消息属性。  
  
 在非 Microsoft 消息队列的队列系统中存在一个外部队列。 Microsoft 消息队列通过连接器应用程序与此类队列通信。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.AppSpecific" />
        <altmember cref="P:System.Messaging.Message.Extension" />
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Messaging.HashAlgorithm HashAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.HashAlgorithm HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Property HashAlgorithm As HashAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::HashAlgorithm HashAlgorithm { System::Messaging::HashAlgorithm get(); void set(System::Messaging::HashAlgorithm value); };" />
      <MemberSignature Language="F#" Value="member this.HashAlgorithm : System.Messaging.HashAlgorithm with get, set" Usage="System.Messaging.DefaultPropertiesToSend.HashAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgHashAlgorithm")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgHashAlgorithm")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.HashAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在验证消息或为消息创建数字签名时使用的哈希算法。</summary>
        <value><see cref="T:System.Messaging.HashAlgorithm" /> 枚举值之一。 默认值为 <see langword="MD5" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 属性标识在对消息 <xref:System.Messaging.DefaultPropertiesToSend.HashAlgorithm%2A> 进行身份验证或为消息创建数字签名时消息队列使用的哈希算法。  
  
 在为消息创建数字签名时，源计算机上的消息队列将使用哈希算法。 然后，目标队列管理器使用相同的哈希算法在收到消息时对消息进行身份验证。  

 由于与 MD5 冲突，Microsoft 建议使用 SHA256。

 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.UseAuthentication" />
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.AttachSenderId" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="P:System.Messaging.Message.HashAlgorithm" />
        <altmember cref="T:System.Messaging.HashAlgorithm" />
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.Label" />
      <MemberSignature Language="VB.NET" Value="Public Property Label As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Label { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Label : string with get, set" Usage="System.Messaging.DefaultPropertiesToSend.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgLabel")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgLabel")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置应用程序定义的、描述消息的字符串。</summary>
        <value>消息的标签。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 例如，消息标签可用于显示目的，或根据标签值有选择地处理消息。 消息标签的最大长度为249个 Unicode 字符。 此标签在消息中不必是唯一的。  
  
 消息队列和消息标签代表一个应用程序定义的值，可帮助在用户可读的字词中标识队列或消息。 应用程序负责解释标签内容;它们对于消息队列应用程序没有内部意义。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.Message.Label" />
        <altmember cref="P:System.Messaging.MessageQueue.Label" />
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public System.Messaging.MessagePriority Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessagePriority Priority" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As MessagePriority" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessagePriority Priority { System::Messaging::MessagePriority get(); void set(System::Messaging::MessagePriority value); };" />
      <MemberSignature Language="F#" Value="member this.Priority : System.Messaging.MessagePriority with get, set" Usage="System.Messaging.DefaultPropertiesToSend.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgPriority")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgPriority")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessagePriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置消息优先级，用于确定消息在队列中的位置。</summary>
        <value>表示非事务性消息优先级的 <see cref="T:System.Messaging.MessagePriority" /> 枚举值之一。 默认值为 <see langword="Normal" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.Priority%2A>属性会影响消息队列在消息处理过程中处理消息的方式，以及消息到达其目标时消息在队列中的放置位置。 优先级较高的消息在路由过程中给予首选项，并在队列前面插入。 而具有相同优先级的消息则会按照到达的先后时间插入到队列中。  
  
 只能为非事务性消息设置消息优先级。 事务性消息的优先级自动设置为 `Lowest` ，从而导致忽略事务消息优先级。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.MessageQueue.BasePriority" />
        <altmember cref="P:System.Messaging.Message.Priority" />
        <altmember cref="T:System.Messaging.MessagePriority" />
      </Docs>
    </Member>
    <Member MemberName="Recoverable">
      <MemberSignature Language="C#" Value="public bool Recoverable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Recoverable" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.Recoverable" />
      <MemberSignature Language="VB.NET" Value="Public Property Recoverable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Recoverable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Recoverable : bool with get, set" Usage="System.Messaging.DefaultPropertiesToSend.Recoverable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgRecoverable")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgRecoverable")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示在出现计算机故障或网络问题时是否保证传递消息。</summary>
        <value>如果通过在消息传递过程中将消息保存到磁盘上来保证消息的传递，则为 <see langword="true" />；如果不能保证传递，则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.Recoverable%2A>属性指示是否保证消息的传递，即使在消息发送到目标队列时计算机发生崩溃。  
  
 如果保证消息的传递，则会在路由中的每个步骤本地存储消息，直到将消息成功转发到下一台计算机。 设置 <xref:System.Messaging.DefaultPropertiesToSend.Recoverable%2A> 为 `true` on <xref:System.Messaging.DefaultPropertiesToSend> 可能会影响吞吐量。  
  
 如果消息是事务性的，则无论是否设置为，消息队列都会自动将消息视为可恢复消息 <xref:System.Messaging.DefaultPropertiesToSend.Recoverable%2A> `true` 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.UseTracing" />
        <altmember cref="P:System.Messaging.Message.Recoverable" />
      </Docs>
    </Member>
    <Member MemberName="ResponseQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue ResponseQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue ResponseQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.ResponseQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property ResponseQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ ResponseQueue { System::Messaging::MessageQueue ^ get(); void set(System::Messaging::MessageQueue ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ResponseQueue : System.Messaging.MessageQueue with get, set" Usage="System.Messaging.DefaultPropertiesToSend.ResponseQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgResponseQueue")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgResponseQueue")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置接收应用程序生成的响应消息的队列。</summary>
        <value>应用程序生成的响应消息所返回到的 <see cref="T:System.Messaging.MessageQueue" />。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.ResponseQueue%2A>属性标识接收应用程序生成的响应消息的队列，该消息由接收应用程序返回到发送应用程序。 当应用程序发送消息时，发送应用程序会指定响应队列。 任何可用队列均可指定为响应队列。  
  
 返回到响应队列的消息是应用程序特定的。 应用程序必须定义消息中的内容，以及收到消息时要执行的操作。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.Message.ResponseQueue" />
      </Docs>
    </Member>
    <Member MemberName="TimeToBeReceived">
      <MemberSignature Language="C#" Value="public TimeSpan TimeToBeReceived { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeToBeReceived" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeToBeReceived As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeToBeReceived { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.TimeToBeReceived : TimeSpan with get, set" Usage="System.Messaging.DefaultPropertiesToSend.TimeToBeReceived" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.TimeoutConverter))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.TimeoutConverter))&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgTimeToBeReceived")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgTimeToBeReceived")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Messaging.TimeoutConverter))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Messaging.TimeoutConverter))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置从目标队列中检索消息的时间限制。</summary>
        <value>从目标队列中接收已发送消息的总时间（以秒计）。 默认值为 <see cref="F:System.Messaging.Message.InfiniteTimeout" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A>属性指定从目标队列接收发送的消息的总时间（以秒为单位）。 此时间限制包括进入目标队列所用的时间，以及应用程序检索消息之前在队列中等待的时间。  
  
> [!CAUTION]
>  使用从属客户端计算机时，请将客户端计算机上的时钟与运行消息队列的服务器上的时钟同步。 如果两个时钟不同步，则当不是时发送消息时，可能会出现不可预知的行为 <xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A> <xref:System.Messaging.Message.InfiniteTimeout> 。  
  
 如果 <xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A> 从队列中删除消息之前该间隔过期，则消息队列应用程序将丢弃该消息。 如果消息的 <xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A> 属性设置为 `true` ，或者如果为，则将消息发送到死信队列 <xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A> `false` 。 如果 <xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A> 小于，则 <xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A> <xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A> 优先。  
  
 <xref:System.Messaging.DefaultPropertiesToSend.AcknowledgeType%2A>如果在计时器过期之前未检索到消息，则可以将消息的属性设置为请求消息队列向发送应用程序发送否定确认消息。  
  
> [!CAUTION]
>  如果你指定接收 <xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A> 否定确认，则当的值小于的值时，将不会收到这些确认 <xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A> <xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A> 。  
  
 当在事务中发送多条消息时，消息队列将使用第一条消息的 <xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A> 属性的值。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue" />
        <altmember cref="F:System.Messaging.Message.InfiniteTimeout" />
        <altmember cref="P:System.Messaging.Message.TimeToBeReceived" />
      </Docs>
    </Member>
    <Member MemberName="TimeToReachQueue">
      <MemberSignature Language="C#" Value="public TimeSpan TimeToReachQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeToReachQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeToReachQueue As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeToReachQueue { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.TimeToReachQueue : TimeSpan with get, set" Usage="System.Messaging.DefaultPropertiesToSend.TimeToReachQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.TimeoutConverter))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.TimeoutConverter))&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgTimeToReachQueue")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgTimeToReachQueue")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Messaging.TimeoutConverter))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Messaging.TimeoutConverter))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置消息到达队列的时间限制。</summary>
        <value>从发送消息的时间算起，消息到达目标队列的时间限制（以秒计）。 默认值为 <see cref="F:System.Messaging.Message.InfiniteTimeout" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果该 <xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A> 时间间隔在消息到达其目标之前过期，则消息队列应用程序将丢弃该消息。 如果消息的 <xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A> 属性设置为 `true` ，或者如果为，则将消息发送到死信队列 <xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A> `false` 。 如果 <xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A> 大于，则 <xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A> <xref:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived%2A> 优先。  
  
 消息的 <xref:System.Messaging.DefaultPropertiesToSend.AcknowledgeType%2A> 属性可以设置为请求消息队列向发送应用程序发送否定确认消息（如果在计时器过期之前消息不会到达）。  
  
 如果 <xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A> 为0秒，则当队列正在等待消息时，消息队列将尝试将消息发送到其目标。 如果队列是本地的，则消息始终到达队列。  
  
 当在事务中发送多条消息时，消息队列将使用第一条消息的 <xref:System.Messaging.DefaultPropertiesToSend.TimeToReachQueue%2A> 属性的值。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.TimeToBeReceived" />
        <altmember cref="F:System.Messaging.Message.InfiniteTimeout" />
        <altmember cref="P:System.Messaging.Message.TimeToReachQueue" />
      </Docs>
    </Member>
    <Member MemberName="TransactionStatusQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue TransactionStatusQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue TransactionStatusQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.TransactionStatusQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property TransactionStatusQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ TransactionStatusQueue { System::Messaging::MessageQueue ^ get(); void set(System::Messaging::MessageQueue ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransactionStatusQueue : System.Messaging.MessageQueue with get, set" Usage="System.Messaging.DefaultPropertiesToSend.TransactionStatusQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(null)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(null)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgTransactionStatusQueue")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgTransactionStatusQueue")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取源计算机中的事务状态队列。</summary>
        <value>源计算机中的事务状态队列，用于将确认消息发回发送应用程序。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.TransactionStatusQueue%2A>属性标识源计算机上的事务状态队列。 属性由消息队列设置，在检索发送到外部队列的事务性消息时由连接器应用程序使用。  
  
 在非 Microsoft 消息队列的队列系统中存在一个外部队列。 Microsoft 消息队列通过连接器应用程序与此类队列通信。  
  
 连接器应用程序可以使用事务状态队列向发送应用程序发送确认消息。 即使发送应用程序未请求其他确认，事务状态队列也应该接收这些确认。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="T:System.Messaging.AcknowledgeTypes" />
        <altmember cref="P:System.Messaging.Message.TransactionStatusQueue" />
      </Docs>
    </Member>
    <Member MemberName="UseAuthentication">
      <MemberSignature Language="C#" Value="public bool UseAuthentication { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseAuthentication" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.UseAuthentication" />
      <MemberSignature Language="VB.NET" Value="Public Property UseAuthentication As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseAuthentication { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseAuthentication : bool with get, set" Usage="System.Messaging.DefaultPropertiesToSend.UseAuthentication" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgUseAuthentication")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgUseAuthentication")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示发送前是否必须验证消息。</summary>
        <value>如果发送应用程序请求对消息进行验证，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A>属性指定是否需要对消息进行身份验证。 如果发送应用程序请求身份验证，则消息队列会创建数字签名，并使用它在发送消息时对消息进行签名，并在收到消息时对消息进行身份验证。  
  
 如果将消息发送到只接受经过身份验证的消息的队列，当设置为时，消息到达队列时将被拒绝 <xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A> `false` 。  
  
 不能查看消息的属性，并确定消息身份验证是否失败。 身份验证失败的消息将被丢弃，且不会传递到队列。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.AcknowledgeType" />
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.AttachSenderId" />
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
      </Docs>
    </Member>
    <Member MemberName="UseDeadLetterQueue">
      <MemberSignature Language="C#" Value="public bool UseDeadLetterQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDeadLetterQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property UseDeadLetterQueue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseDeadLetterQueue { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseDeadLetterQueue : bool with get, set" Usage="System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgUseDeadLetterQueue")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgUseDeadLetterQueue")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否将未能传递的消息的副本发送到死信队列。</summary>
        <value>如果消息传递失败应导致向死信队列发送消息的副本，则为 <see langword="true" />，否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.UseJournalQueue%2A> 并 <xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A> 指定 "消息队列" 跟踪消息的方式。 如果 <xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A> 为 `true` ，则在) 的非事务性消息 (传递失败时，消息将发送到无法传递消息的计算机上的非事务性死信队列 (例如，如果消息计时器过期) 。  
  
 如果事务消息传递失败，则会在所有负面和有疑问的情况下将消息发送到源计算机上的事务性死信队列。  
  
 如果将消息存储在死信队列中，则定期清空队列以删除不再需要的消息。 死信队列中存储的消息会根据队列所在计算机的大小配额计数。 计算机配额由管理员设置，是指分配给计算机上的消息的总大小，而不只是在单个队列中。  
  
 不创建日志或死信队列。 这些都是消息队列生成的系统队列。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.UseJournalQueue" />
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.UseTracing" />
        <altmember cref="P:System.Messaging.Message.UseDeadLetterQueue" />
      </Docs>
    </Member>
    <Member MemberName="UseEncryption">
      <MemberSignature Language="C#" Value="public bool UseEncryption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseEncryption" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.UseEncryption" />
      <MemberSignature Language="VB.NET" Value="Public Property UseEncryption As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseEncryption { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseEncryption : bool with get, set" Usage="System.Messaging.DefaultPropertiesToSend.UseEncryption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgUseEncryption")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgUseEncryption")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否使消息成为私有的。</summary>
        <value>要求消息队列加密消息时为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果消息是私有的，则在发送消息并在收到消息时解密。 若要发送专用消息，发送应用程序必须指定使用加密，并根据需要指定要应用的加密算法。  
  
 发送专用消息时，应用程序不需要执行消息加密。 当你的应用程序在可访问目录服务的 Microsoft Windows 2000 企业内发送消息时，消息队列可以为你加密消息正文。 接收专用消息时，它始终是用于解密消息正文的接收队列管理器。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.EncryptionAlgorithm" />
        <altmember cref="P:System.Messaging.MessageQueue.EncryptionRequired" />
        <altmember cref="P:System.Messaging.Message.UseEncryption" />
      </Docs>
    </Member>
    <Member MemberName="UseJournalQueue">
      <MemberSignature Language="C#" Value="public bool UseJournalQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseJournalQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.UseJournalQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property UseJournalQueue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseJournalQueue { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseJournalQueue : bool with get, set" Usage="System.Messaging.DefaultPropertiesToSend.UseJournalQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgUseJournalQueue")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgUseJournalQueue")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否在始发计算机的计算机日记中保留消息的副本。</summary>
        <value>要求在消息成功地从发件计算机传送到下一步后，将消息的副本保存在发件计算机的计算机日记中时为 <see langword="true" />，否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.UseJournalQueue%2A> 并 <xref:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue%2A> 指定 "消息队列" 跟踪消息的方式。 如果 <xref:System.Messaging.DefaultPropertiesToSend.UseJournalQueue%2A> 为 `true` ，则在传输消息的每个步骤中，将副本保存在原始计算机上的计算机日志中。  
  
 如果目标队列位于远程计算机上，则仅将发送的消息复制到日记队列。 如果目标在本地计算机上，则该消息将直接发送到队列;无需执行日记操作的中间步骤。  
  
 在日志队列中存储消息时，请定期清空队列以删除不再需要的消息。 日志队列中存储的消息会根据队列所在计算机的配额计数 (计算机配额由管理员) 设置。  
  
 不创建日志或死信队列。 这些都是消息队列生成的系统队列。  
  
 消息和队列均可指定日志记录。 如果 <xref:System.Messaging.DefaultPropertiesToSend.UseJournalQueue%2A?displayProperty=nameWithType> 为 `true` ，则在发送消息时，会将其发送出去。 如果 <xref:System.Messaging.MessageQueue.UseJournalQueue%2A?displayProperty=nameWithType> 为 `true` ，则在收到消息时，将对其进行日记。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue" />
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.UseTracing" />
        <altmember cref="P:System.Messaging.MessageQueue.UseJournalQueue" />
        <altmember cref="P:System.Messaging.MessageQueue.MaximumJournalSize" />
        <altmember cref="P:System.Messaging.Message.UseJournalQueue" />
      </Docs>
    </Member>
    <Member MemberName="UseTracing">
      <MemberSignature Language="C#" Value="public bool UseTracing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseTracing" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.DefaultPropertiesToSend.UseTracing" />
      <MemberSignature Language="VB.NET" Value="Public Property UseTracing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseTracing { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseTracing : bool with get, set" Usage="System.Messaging.DefaultPropertiesToSend.UseTracing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgUseTracing")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgUseTracing")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示是否在消息向目标队列移动的过程中跟踪消息。</summary>
        <value>如果在发往目标队列的过程中，由原始消息产生的每个中间步骤都生成发送给系统报告队列的报告，则为 <see langword="true" />，否则为 <see langword="false" />。 默认值为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.DefaultPropertiesToSend.UseTracing%2A>属性指定在消息到达目标队列时是否跟踪该消息的路由。 如果 `true` 为，则每次消息通过消息队列路由服务器时，消息队列生成的报告消息都会发送到报表队列。 报表队列由源队列管理器指定。 报表队列并不限于消息队列生成的报表消息。 还可以将应用程序生成的消息发送到报表队列。  
  
 使用跟踪涉及到设置 Active Directory 和为消息队列企业指定报表队列。 这些设置由管理员配置。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.UseDeadLetterQueue" />
        <altmember cref="P:System.Messaging.DefaultPropertiesToSend.UseJournalQueue" />
        <altmember cref="P:System.Messaging.Message.UseTracing" />
      </Docs>
    </Member>
  </Members>
</Type>
