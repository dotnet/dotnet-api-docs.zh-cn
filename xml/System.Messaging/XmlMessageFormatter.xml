<Type Name="XmlMessageFormatter" FullName="System.Messaging.XmlMessageFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="16514590acdfe601cbe38ade0f4b024e24d61907" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89707844" /></Metadata><TypeSignature Language="C#" Value="public class XmlMessageFormatter : ICloneable, System.Messaging.IMessageFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlMessageFormatter extends System.Object implements class System.ICloneable, class System.Messaging.IMessageFormatter" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.XmlMessageFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlMessageFormatter&#xA;Implements ICloneable, IMessageFormatter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlMessageFormatter : ICloneable, System::Messaging::IMessageFormatter" />
  <TypeSignature Language="F#" Value="type XmlMessageFormatter = class&#xA;    interface IMessageFormatter&#xA;    interface ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Messaging.IMessageFormatter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>使用基于 XSD 架构定义的 XML 格式，将对象序列化和反序列化为消息体或从消息体序列化和反序列化对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.XmlMessageFormatter>是的实例使用的默认格式化程序， <xref:System.Messaging.MessageQueue> 用于序列化写入队列的消息。 当你创建的实例时 <xref:System.Messaging.MessageQueue> ， <xref:System.Messaging.XmlMessageFormatter> 将为你创建一个实例，并将其与关联 <xref:System.Messaging.MessageQueue> 。 可以通过在代码中创建并将其分配给的属性，来指定不同的格式化程序 <xref:System.Messaging.MessageQueue.Formatter%2A> <xref:System.Messaging.MessageQueue> 。  
  
 队列的默认 <xref:System.Messaging.XmlMessageFormatter> 实例可以用于写入队列，但在 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 格式化程序上设置或属性之前，不能使用它从队列中读取 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 。 您可以在默认格式化程序实例上设置这两个值中的一个或两个值，也可以创建格式化程序的新实例，并通过将这些值作为参数传递到相应的构造函数来自动设置这些值 <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> 。  
  
 当指定 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 而不是时 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> ，将在编译时（而不是读取时间）检查类型存在，从而降低错误的可能性。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 要求每个项都是完全限定的，并指定其程序集名称。 此外，在使用多个并发版本时，还必须将版本号附加到目标类型名称。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 属性告诉格式化程序在反序列化消息时要尝试匹配的架构。 这允许格式化程序解释消息正文。  
  
 在消息正文中序列化的实例必须符合类型数组中表示的架构之一。 使用方法读取消息时 <xref:System.Messaging.MessageQueue.Receive%2A> ，方法会创建一个类型为的对象，该对象对应于标识的架构并将消息正文读入其中。  
  
 从队列中读取时，只需设置这两个属性中的一个，但可以同时设置这两个属性。 类型集是这两个属性的组合集。 要使用哪个属性取决于您的应用程序。 如果消息正文包含一个类型，该类型的架构与任一属性的数组中的任何类型都不匹配，则在读取消息时将引发异常。  
  
 <xref:System.Messaging.XmlMessageFormatter>是松散耦合的基于 XML 的消息传递的重要组成部分。 XSD.exe 实用工具使用 XML 格式来生成 XML 架构，例如在使用实用工具序列化应用程序所使用的类时。 类必须具有一个无参数的构造函数。  
  
 当实用工具基于您分发的用于描述类数据的架构生成类时，将在反向处理中再次使用该格式。 使用实用工具和它生成的 XML 架构，你可以避免在类的实现已更改之后每次重新编译类时 redistributing.dll 文件。 只要该架构在客户端或服务器上不会更改，任何一侧的其他更改也不会影响另一方。  
  
   
  
## Examples  
 下面的代码示例包含三个代码段：服务器组件、订单类和客户端代码。 XSD.exe 实用工具可以使用 order 类生成服务器在传入消息内识别的架构。 架构是一种 XML 格式的文件，用于描述类的 "形状"。 然后，可以在客户端上使用此架构来生成客户端特定的 order 类，该类共享与服务器类相同的架构。  
  
 下面的代码示例表示一个服务器组件，该组件通过消息队列接收订单。 消息的正文应为顺序对象，其架构与下面的 Order.cs 类相匹配。 服务器进程或应用程序反序列化订单。  
  
 [!code-cpp[Classic XmlMessageFormatter Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic XmlMessageFormatter Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source.cs#1)]
 [!code-vb[Classic XmlMessageFormatter Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source.vb#1)]  
  
 下面的代码示例表示 order 类，它为服务器上的应用程序接收和反序列化的顺序对象提供架构。  
  
 [!code-cpp[Classic XmlMessageFormatter Example#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic XmlMessageFormatter Example#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source2.cs#2)]
 [!code-vb[Classic XmlMessageFormatter Example#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source2.vb#2)]  
  
 与服务器上的应用程序交互的任何客户端应用程序都必须通过将本地定义的 order 类中的信息序列化到消息正文中来向服务器发送消息。 本地定义的 order 类必须与服务器定义的 order 类具有相同的架构，服务器上的应用程序将尝试对消息正文进行反序列化。 XSD.exe 实用程序允许服务器上的应用程序管理器创建和分发客户端必须用于将消息序列化到服务器的架构。  
  
 当客户端应用程序的管理器接收订单类的架构时，将再次使用 XSD.exe 实用程序从架构生成客户端特定的 order 类。 下面是在下面的客户端代码示例中使用的类，而不是服务器的 order 类 (XSD.exe 实用工具使架构生成的类与原始类) 的名称相同。 此新 order 类用于将订单序列化为消息正文。  
  
 下面的代码示例是客户端处理，用于序列化订单并将与订单关联的信息发送到队列。 该代码将项、数量和地址信息与 XSD.exe 实用程序为 Order.cs 类生成的架构的元素相关联。 订单将发送到本地计算机上的 Orders 队列。  
  
 [!code-cpp[Classic XmlMessageFormatter Example#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CPP/source3.cpp#3)]
 [!code-csharp[Classic XmlMessageFormatter Example#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/CS/source3.cs#3)]
 [!code-vb[Classic XmlMessageFormatter Example#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic XmlMessageFormatter Example/VB/source3.vb#3)]  
  
 从服务器上的 order 类生成架构后，可以修改类。 除非架构发生更改，否则无需重新发布架构。 在您分配了架构并生成了客户端订单类之后，只要未修改架构本身，也可以独立于服务器的 order 类修改该客户端类。 这两个类已变得松散耦合。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
    <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
    <altmember cref="T:System.Messaging.IMessageFormatter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Messaging.XmlMessageFormatter" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Messaging.XmlMessageFormatter" /> 类的新实例但不设置目标类型。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 写入队列时最常使用构造函数的此重载，因为写入时不需要目标类型。  
  
 若要使用通过此构造函数创建的实例从队列中读取消息 <xref:System.Messaging.XmlMessageFormatter> ，必须设置 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 或属性， <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 以便格式化程序知道要尝试反序列化的类型。  
  
 创建新的时 <xref:System.Messaging.MessageQueue> ，将创建默认 <xref:System.Messaging.XmlMessageFormatter> 实例，而不设置目标类型。 对于使用此构造函数创建的格式化程序，如果想要从队列中读取，则必须为该格式化程序实例设置目标类型。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter (string[] targetTypeNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] targetTypeNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetTypeNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter(cli::array &lt;System::String ^&gt; ^ targetTypeNames);" />
      <MemberSignature Language="F#" Value="new System.Messaging.XmlMessageFormatter : string[] -&gt; System.Messaging.XmlMessageFormatter" Usage="new System.Messaging.XmlMessageFormatter targetTypeNames" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetTypeNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="targetTypeNames"><see cref="T:System.String" /> 类型的数组，指定可能的类型集，这些类型将由格式化程序从提供的消息进行反序列化。 这些值必须是完全限定的，例如“MyNamespace.MyOrders, MyOrdersAssemblyName”。</param>
        <summary>初始化 <see cref="T:System.Messaging.XmlMessageFormatter" /> 类的新实例，并将传入的目标类型设置为（完全限定）字符串值数组。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在从队列中读取时，最常使用具有目标类型参数的构造函数。 写入时，无需指定目标类型。  
  
 构造函数的此重载 <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> 将 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 属性设置为通过参数传入的数组值 `targetTypeNames` 。 设置此属性后，可以 <xref:System.Messaging.MessageQueue> 使用此 <xref:System.Messaging.XmlMessageFormatter> 实例来读取包含给定类型的对象的消息。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和属性都 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 告诉格式化程序在反序列化消息时要尝试匹配的架构。 这允许格式化程序解释消息正文。  
  
 在消息正文中序列化的实例必须符合类型数组中表示的架构之一。 使用方法读取消息时 <xref:System.Messaging.MessageQueue.Receive%2A> ，方法会创建一个类型为的对象，该对象对应于标识的架构并将消息正文读入其中。  
  
 从队列中读取时，只需设置这两个属性中的一个，但可以同时设置这两个属性。 类型集是这两个属性的组合集。 使用哪种特定于您的应用程序。 如果消息正文包含一个类型，该类型的架构与任一属性的数组中的任何类型都不匹配，则在读取时将引发异常。  
  
   
  
## Examples  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetTypeNames" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlMessageFormatter (Type[] targetTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type[] targetTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.#ctor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (targetTypes As Type())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlMessageFormatter(cli::array &lt;Type ^&gt; ^ targetTypes);" />
      <MemberSignature Language="F#" Value="new System.Messaging.XmlMessageFormatter : Type[] -&gt; System.Messaging.XmlMessageFormatter" Usage="new System.Messaging.XmlMessageFormatter targetTypes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="targetTypes" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="targetTypes"><see cref="T:System.Type" /> 类型的数组，指定可能的类型集，这些类型将由格式化程序从提供的消息进行反序列化。</param>
        <summary>初始化 <see cref="T:System.Messaging.XmlMessageFormatter" /> 类的新实例，并将传入的目标类型设置为对象类型的数组。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在从队列中读取时，最常使用具有目标类型参数的构造函数。 写入时，无需指定目标类型。  
  
 构造函数的此重载 <xref:System.Messaging.XmlMessageFormatter.%23ctor%2A> 将 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 属性设置为通过参数传入的数组值 `targetTypes` 。 设置此属性后，可以 <xref:System.Messaging.MessageQueue> 使用此 <xref:System.Messaging.XmlMessageFormatter> 实例来读取包含给定类型的对象的消息。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和属性都 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 告诉格式化程序在反序列化消息时要尝试匹配的架构。 这允许格式化程序解释消息正文。  
  
 在消息正文中序列化的实例必须符合类型数组中表示的架构之一。 使用方法读取消息时 <xref:System.Messaging.MessageQueue.Receive%2A> ，方法会创建一个类型为的对象，该对象对应于标识的架构并将消息正文读入其中。  
  
 从队列中读取时，只需设置这两个属性中的一个，但可以同时设置这两个属性。 类型集是这两个属性的组合集。 使用哪种特定于您的应用程序。 如果消息正文包含一个类型，该类型的架构与任一属性的数组中的任何类型都不匹配，则在读取时将引发异常。  
  
 当指定 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 而不是时 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> ，将在编译时（而不是读取时间）检查类型存在，从而降低错误的可能性。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 要求每个项都是完全限定的，并指定其程序集名称。 此外，在使用多个并发版本时，还必须将版本号附加到目标类型名称。  
  
 使用时 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> ，你可以将 (的每个对象添加 `MyClass` 到列表中，如以下 c # 代码演示的方法) 。  
  
```  
TargetTypes = new Type[]{typeof(MyClass)}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="targetTypes" /> 参数为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public bool CanRead (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRead(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanRead (message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanRead(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member CanRead : System.Messaging.Message -&gt; bool&#xA;override this.CanRead : System.Messaging.Message -&gt; bool" Usage="xmlMessageFormatter.CanRead message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">要检查的 <see cref="T:System.Messaging.Message" />。</param>
        <summary>确定格式化程序是否可以反序列化消息。</summary>
        <returns>如果 XML 格式化程序可以反序列化该消息，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.XmlMessageFormatter.CanRead%2A>调用时，格式化程序将尝试确定消息的内容是否可以反序列化。 如果消息正文中的类型与和属性表示的数组中的某个类型具有相同的架构，则该格式化程序只能反序列化 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 消息 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 。 <xref:System.Messaging.XmlMessageFormatter.CanRead%2A>`false`在以下两种情况下返回：  
  
-   未使用对消息进行格式设置 <xref:System.Messaging.XmlMessageFormatter> 。  
  
-   消息正文的架构不在 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 或属性中列出 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 属性告诉格式化程序必须能够反序列化哪些类型的对象。 如果列表中缺少任何类型，但在消息中找到了，则 <xref:System.Messaging.XmlMessageFormatter.CanRead%2A> 返回 `false` 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 和 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 属性都未设置。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> 参数为 <see langword="null" />。</exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
        <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="xmlMessageFormatter.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Messaging.XmlMessageFormatter" /> 类的实例，此实例的读/写属性（目标类型集）与当前 <see cref="T:System.Messaging.XmlMessageFormatter" /> 实例相同。</summary>
        <returns>一个对象，其属性与此 <see cref="T:System.Messaging.XmlMessageFormatter" /> 实例的属性相同，但其元数据并不将此实例指定为格式化程序类实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法创建格式化程序的副本，并将其所有属性初始化为此对象的值 <xref:System.Messaging.XmlMessageFormatter> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.IMessageFormatter" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public object Read (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Read(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      <MemberSignature Language="VB.NET" Value="Public Function Read (message As Message) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Read(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.Messaging.Message -&gt; obj&#xA;override this.Read : System.Messaging.Message -&gt; obj" Usage="xmlMessageFormatter.Read message" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Read(System.Messaging.Message)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message">要反序列化的 <see cref="T:System.Messaging.Message" />（XML 格式）。</param>
        <summary>从给定的消息中读取内容，并创建包含反序列化消息的对象。</summary>
        <returns>反序列化的消息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和属性都 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 告诉格式化程序在反序列化消息时要尝试匹配的架构。 必须先设置这些属性中的一个，然后才能反序列化消息。  
  
 在消息正文中序列化的实例必须符合类型数组中表示的架构之一。 使用方法读取消息时 <xref:System.Messaging.MessageQueue.Receive%2A> ，方法会创建一个类型为的对象，该对象对应于标识的架构并将消息正文读入其中。  
  
 无需指定目标类型即可写入队列。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 和 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 属性都未设置。  
  
- 或 - 
消息体中序列化的实例与 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 和 <see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 属性中的类型所表示的任何架构都不相符。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> 参数为 <see langword="null" />。</exception>
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="TargetTypeNames">
      <MemberSignature Language="C#" Value="public string[] TargetTypeNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] TargetTypeNames" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetTypeNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ TargetTypeNames { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetTypeNames : string[] with get, set" Usage="System.Messaging.XmlMessageFormatter.TargetTypeNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("XmlMsgTargetTypeNames")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("XmlMsgTargetTypeNames")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定可能的类型集，这些类型将由格式化程序从提供的消息进行反序列化。</summary>
        <value><see cref="T:System.String" /> 类型的数组，指定当读取消息时从消息体反序列化的对象的类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和属性都 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 告诉格式化程序在反序列化消息时要尝试匹配的架构。 这允许格式化程序解释消息正文。  
  
 在消息正文中序列化的实例必须符合类型数组中表示的架构之一。 使用方法读取消息时 <xref:System.Messaging.MessageQueue.Receive%2A> ，方法会创建一个类型为的对象，该对象对应于标识的架构并将消息正文读入其中。  
  
 从队列中读取时，只需设置这两个属性中的一个，但可以同时设置这两个属性。 类型集是这两个属性的组合集。 要使用哪个属性取决于您的应用程序。 如果消息正文包含一个类型，该类型的架构与任一属性的数组中的任何类型都不匹配，则在读取消息时将引发异常。  
  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> 要求每个项都是完全限定的，并指定其程序集名称。 此外，在使用多个并发版本时，还必须将版本号附加到目标类型名称。  
  
 只有从队列中读取时才需要目标类型。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 属性不需要设置为写入队列。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" /> 属性为 <see langword="null" />。</exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="TargetTypes">
      <MemberSignature Language="C#" Value="public Type[] TargetTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type[] TargetTypes" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.XmlMessageFormatter.TargetTypes" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetTypes As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;Type ^&gt; ^ TargetTypes { cli::array &lt;Type ^&gt; ^ get(); void set(cli::array &lt;Type ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetTypes : Type[] with get, set" Usage="System.Messaging.XmlMessageFormatter.TargetTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("XmlMsgTargetTypes")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("XmlMsgTargetTypes")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定可能的类型集，这些类型将由格式化程序从提供的消息进行反序列化。</summary>
        <value><see cref="T:System.Type" /> 类型的数组，指定当读取消息时从消息体反序列化的对象的类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和属性都 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 告诉格式化程序在反序列化消息时要尝试匹配的架构。 这允许格式化程序解释消息正文。  
  
 在消息正文中序列化的实例必须符合类型数组中表示的架构之一。 使用方法读取消息时 <xref:System.Messaging.MessageQueue.Receive%2A> ，方法会创建一个类型为的对象，该对象对应于标识的架构并将消息正文读入其中。  
  
 从队列中读取时，只需设置这两个属性中的一个，但可以同时设置这两个属性。 类型集是这两个属性的组合集。 要使用哪个属性取决于您的应用程序。 如果消息正文包含一个类型，该类型的架构与任一属性的数组中的任何类型都不匹配，则在读取消息时将引发异常。  
  
 只有从队列中读取时才需要目标类型。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A>和 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 属性不需要设置为写入队列。  
  
 当指定 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 而不是时 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> ，将在编译时（而不是读取时间）检查类型存在，从而降低错误的可能性。  
  
 使用时 <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> ，可以将每个对象 (例如，以 `MyClass` c # 代码演示的方式将) 到列表 `TargetTypes = new Type[]{typeof(MyClass), typeof (MyOtherClass)};` 。  
  
   
  
## Examples  
 下面的代码示例在队列中发送和接收包含订单的消息。  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Messaging.XmlMessageFormatter.TargetTypes" /> 属性为 <see langword="null" />。</exception>
        <altmember cref="P:System.Messaging.XmlMessageFormatter.TargetTypeNames" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.Messaging.Message message, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Messaging.Message message, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.XmlMessageFormatter.Write(System.Messaging.Message,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (message As Message, obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Write(System::Messaging::Message ^ message, System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.Messaging.Message * obj -&gt; unit&#xA;override this.Write : System.Messaging.Message * obj -&gt; unit" Usage="xmlMessageFormatter.Write (message, obj)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message"><see cref="T:System.Messaging.Message" />，其 <see cref="P:System.Messaging.Message.Body" /> 属性将包含序列化的对象。</param>
        <param name="obj">要序列化为消息体的 <see cref="T:System.Object" />。</param>
        <summary>将对象序列化为消息体。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不需要指定目标类型来写入队列，因为在读取时它们必须是如此。 <xref:System.Messaging.XmlMessageFormatter.TargetTypeNames%2A> <xref:System.Messaging.XmlMessageFormatter.TargetTypes%2A> 仅当反序列化消息时，格式化程序才使用或属性。  
  
 <xref:System.Messaging.XmlMessageFormatter>使用 <xref:System.Xml.Serialization.XmlSerializer> 类，该类定义可序列化的内容。 只能序列化公共字段和公共属性。 结构、具有数组的结构和结构数组都是可序列化的，只要它们不将编码样式与 SOAP 协议一起使用。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="message" /> 参数为 <see langword="null" />。  
  
- 或 - 
<paramref name="obj" /> 参数为 <see langword="null" />。</exception>
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      </Docs>
    </Member>
  </Members>
</Type>
