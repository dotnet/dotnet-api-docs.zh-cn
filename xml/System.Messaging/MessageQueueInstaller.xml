<Type Name="MessageQueueInstaller" FullName="System.Messaging.MessageQueueInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ffeafd160aeaf4f509deb4b83f0850acb4f13065" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86803338" /></Metadata><TypeSignature Language="C#" Value="public class MessageQueueInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type MessageQueueInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="948e2-101">允许安装并配置应用程序运行所需的队列。</span><span class="sxs-lookup"><span data-stu-id="948e2-101">Allows you to install and configure a queue that your application needs in order to run.</span></span> <span data-ttu-id="948e2-102">安装实用工具（例如 InstallUtil.exe）在安装 <see cref="T:System.Messaging.MessageQueue" /> 时调用此类。</span><span class="sxs-lookup"><span data-stu-id="948e2-102">This class is called by the installation utility, for example, InstallUtil.exe, when installing a <see cref="T:System.Messaging.MessageQueue" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="948e2-103"><xref:System.Messaging.MessageQueueInstaller>安装实用工具使用来写入与队列关联的注册表值。</span><span class="sxs-lookup"><span data-stu-id="948e2-103">The <xref:System.Messaging.MessageQueueInstaller> is used by the installation utility to write registry values that are associated with the queue.</span></span> <span data-ttu-id="948e2-104">有关安装实用工具的详细信息，请参阅 [Installutil.exe (安装程序工具) ](/dotnet/framework/tools/installutil-exe-installer-tool)。</span><span class="sxs-lookup"><span data-stu-id="948e2-104">For more information about installation utilities, see [Installutil.exe (Installer Tool)](/dotnet/framework/tools/installutil-exe-installer-tool).</span></span>  
  
 <span data-ttu-id="948e2-105">若要安装队列，请创建从中继承的项目安装程序类 <xref:System.Configuration.Install.Installer> ，并将 <xref:System.ComponentModel.RunInstallerAttribute> 类的设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="948e2-105">To install a queue, create a project installer class that inherits from the <xref:System.Configuration.Install.Installer>, and set the <xref:System.ComponentModel.RunInstallerAttribute> for the class to `true`.</span></span> <span data-ttu-id="948e2-106">在项目中， <xref:System.Messaging.MessageQueueInstaller> 为安装中的每个队列创建一个实例，并将该实例添加到项目安装程序类。</span><span class="sxs-lookup"><span data-stu-id="948e2-106">Within your project, create a <xref:System.Messaging.MessageQueueInstaller> instance for each queue in the installation and add the instance to your project installer class.</span></span>  
  
 <span data-ttu-id="948e2-107">创建实例时 <xref:System.Messaging.MessageQueueInstaller> ，可以选择传递现有 <xref:System.Messaging.MessageQueue> (例如，从测试服务器) 传递到 <xref:System.Messaging.MessageQueueInstaller.%23ctor%2A> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="948e2-107">When creating a <xref:System.Messaging.MessageQueueInstaller> instance, you can optionally pass an existing <xref:System.Messaging.MessageQueue> (for example, from a test server) to the <xref:System.Messaging.MessageQueueInstaller.%23ctor%2A> constructor.</span></span> <span data-ttu-id="948e2-108">此方法通过镜像传入队列的设置，自动为新队列提供配置设置。</span><span class="sxs-lookup"><span data-stu-id="948e2-108">This approach automatically provides the configuration settings for the new queue by mirroring the settings of the queue passed in.</span></span> <span data-ttu-id="948e2-109">或者，可以手动将实例中的属性设置 <xref:System.Messaging.MessageQueueInstaller> 为所需的状态，并调用无参数的构造函数。</span><span class="sxs-lookup"><span data-stu-id="948e2-109">Alternatively, you can manually set the properties in the <xref:System.Messaging.MessageQueueInstaller> instance to the states you want and call the parameterless constructor.</span></span>  
  
 <span data-ttu-id="948e2-110">在调用安装实用程序时，它将查找 <xref:System.ComponentModel.RunInstallerAttribute> 。</span><span class="sxs-lookup"><span data-stu-id="948e2-110">When the install utility is called, it looks for the <xref:System.ComponentModel.RunInstallerAttribute>.</span></span> <span data-ttu-id="948e2-111">如果是 `true` ，则实用工具将在 <xref:System.Configuration.Install.Installer.Installers%2A> 与项目安装程序关联的集合中安装所有队列。</span><span class="sxs-lookup"><span data-stu-id="948e2-111">If it is `true`, the utility installs all the queues in the <xref:System.Configuration.Install.Installer.Installers%2A> collection associated with your project installer.</span></span> <span data-ttu-id="948e2-112">如果 <xref:System.ComponentModel.RunInstallerAttribute> 为 `false` ，则实用工具将忽略项目安装程序。</span><span class="sxs-lookup"><span data-stu-id="948e2-112">If <xref:System.ComponentModel.RunInstallerAttribute> is `false`, the utility ignores the project installer.</span></span>  
  
 <span data-ttu-id="948e2-113">在 <xref:System.Messaging.MessageQueueInstaller> 将实例添加到 <xref:System.Configuration.Install.Installer.Installers%2A> 项目安装程序的集合之前或之后，可以修改实例的其他属性。</span><span class="sxs-lookup"><span data-stu-id="948e2-113">You modify other properties of a <xref:System.Messaging.MessageQueueInstaller> instance either before or after adding the instance to the <xref:System.Configuration.Install.Installer.Installers%2A> collection of your project installer.</span></span> <span data-ttu-id="948e2-114">例如， <xref:System.Messaging.MessageQueue.Path%2A> 必须在安装实用工具执行之前设置队列。</span><span class="sxs-lookup"><span data-stu-id="948e2-114">For example, a queue's <xref:System.Messaging.MessageQueue.Path%2A> must be set before the install utility executes.</span></span>  
  
 <span data-ttu-id="948e2-115">通常，你不会从代码中调用的方法， <xref:System.Messaging.MessageQueueInstaller> 通常仅由 installutil.exe 安装实用工具调用它们。</span><span class="sxs-lookup"><span data-stu-id="948e2-115">Typically, you do not call the methods of the <xref:System.Messaging.MessageQueueInstaller> from within your code; they are generally called only by the installutil.exe installation utility.</span></span> <span data-ttu-id="948e2-116">实用程序会在 <xref:System.Messaging.MessageQueueInstaller.Install%2A> 安装过程中自动调用方法，并在 <xref:System.Messaging.MessageQueueInstaller.Commit%2A> 安装未引发异常时调用。</span><span class="sxs-lookup"><span data-stu-id="948e2-116">The utility automatically calls the <xref:System.Messaging.MessageQueueInstaller.Install%2A> method during the installation process and calls <xref:System.Messaging.MessageQueueInstaller.Commit%2A> if the installation did not throw an exception.</span></span> <span data-ttu-id="948e2-117">如果需要，它会通过调用 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> 生成异常的对象来实现故障。</span><span class="sxs-lookup"><span data-stu-id="948e2-117">It backs out failures, if necessary, by calling <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> for the object that generated the exception.</span></span>  
  
 <span data-ttu-id="948e2-118">应用程序的安装例程使用项目安装程序的 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> 来自动维护有关已安装的组件的信息。</span><span class="sxs-lookup"><span data-stu-id="948e2-118">An application's install routine uses the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> to automatically maintain information about the components that have already been installed.</span></span> <span data-ttu-id="948e2-119">当应用程序安装每个实例时，此状态信息会不断更新 <xref:System.Messaging.MessageQueueInstaller> 。</span><span class="sxs-lookup"><span data-stu-id="948e2-119">This state information is continuously updated as each <xref:System.Messaging.MessageQueueInstaller> instance is installed by the utility.</span></span> <span data-ttu-id="948e2-120">通常，您的代码不需要显式修改状态信息。</span><span class="sxs-lookup"><span data-stu-id="948e2-120">It is not usually necessary for your code to explicitly modify the state information.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/tools/installutil-exe-installer-tool"><span data-ttu-id="948e2-121">Installutil.exe（安装程序工具）</span><span class="sxs-lookup"><span data-stu-id="948e2-121">Installutil.exe (Installer Tool)</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="948e2-122">初始化 <see cref="T:System.Messaging.MessageQueueInstaller" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="948e2-122">Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueInstaller" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="948e2-123">初始化 <see cref="T:System.Messaging.MessageQueueInstaller" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="948e2-123">Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueInstaller" /> class.</span></span> <span data-ttu-id="948e2-124">不设置任何实例属性。</span><span class="sxs-lookup"><span data-stu-id="948e2-124">Does not set any instance properties.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueInstaller (System.Messaging.MessageQueue componentToCopy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Messaging.MessageQueue componentToCopy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.#ctor(System.Messaging.MessageQueue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (componentToCopy As MessageQueue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueInstaller(System::Messaging::MessageQueue ^ componentToCopy);" />
      <MemberSignature Language="F#" Value="new System.Messaging.MessageQueueInstaller : System.Messaging.MessageQueue -&gt; System.Messaging.MessageQueueInstaller" Usage="new System.Messaging.MessageQueueInstaller componentToCopy" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="componentToCopy" Type="System.Messaging.MessageQueue" />
      </Parameters>
      <Docs>
        <param name="componentToCopy"><span data-ttu-id="948e2-125"><see cref="T:System.Messaging.MessageQueue" /> 组件，其设置确定安装的新队列的属性设置。</span><span class="sxs-lookup"><span data-stu-id="948e2-125">The <see cref="T:System.Messaging.MessageQueue" /> component whose settings determine the property settings of the new queue installed.</span></span></param>
        <summary><span data-ttu-id="948e2-126">初始化 <see cref="T:System.Messaging.MessageQueueInstaller" /> 类的新实例，将安装设置初始化为现有 <see cref="T:System.Messaging.MessageQueue" /> 实例的安装设置。</span><span class="sxs-lookup"><span data-stu-id="948e2-126">Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueInstaller" /> class, initializing the installation settings to those of an existing <see cref="T:System.Messaging.MessageQueue" /> instance.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public bool Authenticate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Authenticate" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Authenticate" />
      <MemberSignature Language="VB.NET" Value="Public Property Authenticate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Authenticate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Authenticate : bool with get, set" Usage="System.Messaging.MessageQueueInstaller.Authenticate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="948e2-127">获取或设置一个值，该值指示要安装的队列是否只接受已经过身份验证的消息。</span><span class="sxs-lookup"><span data-stu-id="948e2-127">Gets or sets a value that indicates whether the queue to be installed accepts only authenticated messages.</span></span></summary>
        <value><span data-ttu-id="948e2-128">如果队列仅接受已经过身份验证的消息，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="948e2-128"><see langword="true" /> if the queue accepts only authenticated messages; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="948e2-129">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="948e2-129">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="948e2-130">如果将未经过身份验证的消息发送到只接受经过身份验证的消息的队列，则会拒绝该消息。</span><span class="sxs-lookup"><span data-stu-id="948e2-130">When a non-authenticated message is sent to a queue that accepts only authenticated messages, the message is rejected.</span></span> <span data-ttu-id="948e2-131">发送应用程序可以通过设置消息的来请求拒绝消息 <xref:System.Messaging.Message.AcknowledgeType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="948e2-131">The sending application can request notification of a message rejection by setting the <xref:System.Messaging.Message.AcknowledgeType%2A> for the message.</span></span> <span data-ttu-id="948e2-132">否则，将不会指示消息被拒绝，因此除非将消息发送到死信队列，否则消息可能会丢失。</span><span class="sxs-lookup"><span data-stu-id="948e2-132">Otherwise, there is no indication that the message was rejected, so the message can be lost unless you send it to the dead-letter queue.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BasePriority">
      <MemberSignature Language="C#" Value="public short BasePriority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 BasePriority" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.BasePriority" />
      <MemberSignature Language="VB.NET" Value="Public Property BasePriority As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short BasePriority { short get(); void set(short value); };" />
      <MemberSignature Language="F#" Value="member this.BasePriority : int16 with get, set" Usage="System.Messaging.MessageQueueInstaller.BasePriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(0)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(0)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="948e2-133">获取或设置用于在网络上路由公共队列消息的基本优先级。</span><span class="sxs-lookup"><span data-stu-id="948e2-133">Gets or sets the base priority that is used to route a public queue's messages over the network.</span></span></summary>
        <value><span data-ttu-id="948e2-134">发送到公共队列的所有消息的单个基本优先级。</span><span class="sxs-lookup"><span data-stu-id="948e2-134">The single base priority for all messages sent to the public queue.</span></span> <span data-ttu-id="948e2-135">默认值为零 (0)。</span><span class="sxs-lookup"><span data-stu-id="948e2-135">The default is zero (0).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="948e2-136"><xref:System.Messaging.MessageQueueInstaller.BasePriority%2A>用于通过网络路由队列消息。</span><span class="sxs-lookup"><span data-stu-id="948e2-136">The <xref:System.Messaging.MessageQueueInstaller.BasePriority%2A> is used for routing the queue's messages over the network.</span></span> <span data-ttu-id="948e2-137">使用为发送到 <xref:System.Messaging.MessageQueueInstaller.BasePriority%2A> 队列的消息提供比发送到其他队列的消息更高或较低的优先级。</span><span class="sxs-lookup"><span data-stu-id="948e2-137">Use the <xref:System.Messaging.MessageQueueInstaller.BasePriority%2A> to give the messages sent to the queue a higher or lower priority than that for messages sent to other queues.</span></span> <span data-ttu-id="948e2-138">设置队列的基本优先级后，发送到该队列的所有消息的优先级高于基本优先级发送到队列的消息。</span><span class="sxs-lookup"><span data-stu-id="948e2-138">When a queue's base priority is set, all the messages sent to it are given a higher priority than that of the messages sent to queues with a lower base priority.</span></span> <span data-ttu-id="948e2-139">队列的基本优先级对队列中的消息顺序或如何从队列中读取消息不起作用。</span><span class="sxs-lookup"><span data-stu-id="948e2-139">The queue's base priority has no effect on the order of the messages in the queue or on how messages are read from the queue.</span></span>  
  
 <span data-ttu-id="948e2-140"><xref:System.Messaging.MessageQueueInstaller.BasePriority%2A>仅适用于通过域控制器访问的公共队列 (换言之，使用公共格式名称) 。</span><span class="sxs-lookup"><span data-stu-id="948e2-140">The <xref:System.Messaging.MessageQueueInstaller.BasePriority%2A> applies only to public queues that are accessed through the domain controller (in other words, using the public format name).</span></span> <span data-ttu-id="948e2-141">专用队列和直接访问的公共队列的基本优先级始终为零。</span><span class="sxs-lookup"><span data-stu-id="948e2-141">The base priority of private queues and of directly accessed public queues is always zero.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Category">
      <MemberSignature Language="C#" Value="public Guid Category { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid Category" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Category" />
      <MemberSignature Language="VB.NET" Value="Public Property Category As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid Category { Guid get(); void set(Guid value); };" />
      <MemberSignature Language="F#" Value="member this.Category : Guid with get, set" Usage="System.Messaging.MessageQueueInstaller.Category" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.ComponentModel.GuidConverter, System, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.ComponentModel.GuidConverter, System, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.ComponentModel.GuidConverter, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.ComponentModel.GuidConverter, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.ComponentModel.GuidConverter, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.ComponentModel.GuidConverter, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.ComponentModel.GuidConverter))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.ComponentModel.GuidConverter))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="948e2-142">获取或设置实现特定的队列类型。</span><span class="sxs-lookup"><span data-stu-id="948e2-142">Gets or sets an implementation-specific queue type.</span></span></summary>
        <value><span data-ttu-id="948e2-143"><see cref="T:System.Guid" />，表示队列类别（或“消息队列”类型标识符），允许应用程序按照其队列的使用方式对这些队列进行分类。</span><span class="sxs-lookup"><span data-stu-id="948e2-143">A <see cref="T:System.Guid" /> that represents the queue category (or Message Queuing type identifier), which allows applications to categorize their queues according to how they are used.</span></span> <span data-ttu-id="948e2-144">默认值为 <see langword="Guid.empty" />。</span><span class="sxs-lookup"><span data-stu-id="948e2-144">The default is <see langword="Guid.empty" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="948e2-145">使用 "队列" 类别，应用程序可以根据所用的方式对关联的队列进行分类。</span><span class="sxs-lookup"><span data-stu-id="948e2-145">The queue category enables an application to categorize associated queues according to the way they are used.</span></span> <span data-ttu-id="948e2-146"><xref:System.Messaging.MessageQueue.Category%2A>可以为 null 引用。</span><span class="sxs-lookup"><span data-stu-id="948e2-146">The <xref:System.Messaging.MessageQueue.Category%2A> can be a null reference.</span></span> <span data-ttu-id="948e2-147">还可以定义新类别。</span><span class="sxs-lookup"><span data-stu-id="948e2-147">You can also define a new category.</span></span>  
  
 <span data-ttu-id="948e2-148"><xref:System.Messaging.MessageQueue.Category%2A>属性提供对 "消息队列" 类型标识符属性的访问，该属性与特定队列相关联，并且是可读/写的。</span><span class="sxs-lookup"><span data-stu-id="948e2-148">The <xref:System.Messaging.MessageQueue.Category%2A> property provides access to the Message Queuing type identifier property, which is associated with a particular queue and is read/write.</span></span> <span data-ttu-id="948e2-149">您可以使用 <xref:System.Guid.NewGuid%2A> 方法来创建一个可保证在所有值之间唯一的类别值 <xref:System.Guid> 。</span><span class="sxs-lookup"><span data-stu-id="948e2-149">You can use the <xref:System.Guid.NewGuid%2A> method to create a category value that is guaranteed to be unique across all <xref:System.Guid> values.</span></span> <span data-ttu-id="948e2-150">但是，只需将类别值与其他类别（而不是所有其他值）区别 <xref:System.Guid> 。</span><span class="sxs-lookup"><span data-stu-id="948e2-150">However, it is necessary only for the category value to be distinct from other categories, not from all other <xref:System.Guid> values.</span></span> <span data-ttu-id="948e2-151">例如，你可以将 <xref:System.Messaging.MessageQueue.Category%2A> 一个队列组的设置为，并将另一个组的设置为 {00000000-0000-0000-0000-000000000001} <xref:System.Messaging.MessageQueue.Category%2A> {00000000-0000-0000-0000-000000000002} 。</span><span class="sxs-lookup"><span data-stu-id="948e2-151">For example, you can set the <xref:System.Messaging.MessageQueue.Category%2A> for one group of queues to {00000000-0000-0000-0000-000000000001} and the <xref:System.Messaging.MessageQueue.Category%2A> for another group to {00000000-0000-0000-0000-000000000002}.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Commit (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Commit(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Commit : System.Collections.IDictionary -&gt; unit" Usage="messageQueueInstaller.Commit savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><span data-ttu-id="948e2-152">一个 <see cref="T:System.Collections.IDictionary" />，它包含计算机的安装后状态。</span><span class="sxs-lookup"><span data-stu-id="948e2-152">A <see cref="T:System.Collections.IDictionary" /> that contains the post-installation state of the computer.</span></span></param>
        <summary><span data-ttu-id="948e2-153">通过提交 <see cref="T:System.Messaging.MessageQueue" /> 方法写入注册表的 <see cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" /> 安装信息来完成安装过程。</span><span class="sxs-lookup"><span data-stu-id="948e2-153">Completes the installation process by committing the <see cref="T:System.Messaging.MessageQueue" /> installation information that the <see cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" /> method wrote to the registry.</span></span> <span data-ttu-id="948e2-154">此方法应该由安装工具使用，安装工具将自动调用相应的方法。</span><span class="sxs-lookup"><span data-stu-id="948e2-154">This method is meant to be used by installation tools, which automatically call the appropriate methods.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="948e2-155">通常，你不会从代码中调用的方法， <xref:System.Messaging.MessageQueueInstaller> 通常仅由 installutil.exe 安装实用工具调用它们。</span><span class="sxs-lookup"><span data-stu-id="948e2-155">Typically, you do not call the methods of the <xref:System.Messaging.MessageQueueInstaller> from within your code; they are generally called only by the installutil.exe installation utility.</span></span> <span data-ttu-id="948e2-156">实用程序在 <xref:System.Messaging.MessageQueueInstaller.Install%2A> 安装过程中会自动调用方法。</span><span class="sxs-lookup"><span data-stu-id="948e2-156">The utility automatically calls the <xref:System.Messaging.MessageQueueInstaller.Install%2A> method during the installation process.</span></span> <span data-ttu-id="948e2-157">安装是事务性的，因此，如果在安装过程中任何安装项目组件发生故障，则所有以前安装的组件都将回滚到其安装前状态。</span><span class="sxs-lookup"><span data-stu-id="948e2-157">Installation is transactional, so if there is a failure of any installation project component during the installation, all the previously installed components are rolled back to their pre-installation states.</span></span> <span data-ttu-id="948e2-158">这可以通过调用每个组件的 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> 方法来实现。</span><span class="sxs-lookup"><span data-stu-id="948e2-158">This is accomplished by calling each component's <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> method.</span></span>  
  
 <span data-ttu-id="948e2-159">在成功安装与安装项目关联的所有组件后，安装实用程序会提交安装。</span><span class="sxs-lookup"><span data-stu-id="948e2-159">After a successful installation of all the components that are associated with the installation project has occurred, the installation utility commits the installations.</span></span> <span data-ttu-id="948e2-160"><xref:System.Messaging.MessageQueueInstaller.Commit%2A><xref:System.Messaging.MessageQueue>通过将队列设置为适当的初始状态来完成的安装。</span><span class="sxs-lookup"><span data-stu-id="948e2-160"><xref:System.Messaging.MessageQueueInstaller.Commit%2A> completes the installation of the <xref:System.Messaging.MessageQueue> by setting the queue to the appropriate initial state.</span></span> <span data-ttu-id="948e2-161">如果由属性指定的队列 <xref:System.Messaging.MessageQueueInstaller.Path%2A> 已存在并且包含消息，则 <xref:System.Messaging.MessageQueueInstaller.Commit%2A> 将清除消息。</span><span class="sxs-lookup"><span data-stu-id="948e2-161">If the queue specified by the <xref:System.Messaging.MessageQueueInstaller.Path%2A> property already exists and contains messages, <xref:System.Messaging.MessageQueueInstaller.Commit%2A> clears the messages.</span></span> <span data-ttu-id="948e2-162"><xref:System.Messaging.MessageQueueInstaller.Commit%2A>不 <xref:System.Messaging.MessageQueueInstaller.Install%2A> 会清除消息，因为无法回滚清除消息的操作。</span><span class="sxs-lookup"><span data-stu-id="948e2-162"><xref:System.Messaging.MessageQueueInstaller.Commit%2A>, rather than <xref:System.Messaging.MessageQueueInstaller.Install%2A>, clears the messages because the act of purging the messages cannot be rolled back.</span></span>  
  
 <span data-ttu-id="948e2-163">应用程序的安装例程使用项目安装程序的 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> 来自动维护有关已安装的组件的信息。</span><span class="sxs-lookup"><span data-stu-id="948e2-163">An application's install routine uses the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> to automatically maintain information about the components that have already been installed.</span></span> <span data-ttu-id="948e2-164"><xref:System.Messaging.MessageQueueInstaller.Commit%2A> `savedState` 当实用工具提交每个实例时，会不断更新作为参数传递给的状态信息 <xref:System.Messaging.MessageQueueInstaller> 。</span><span class="sxs-lookup"><span data-stu-id="948e2-164">This state information, which is passed to <xref:System.Messaging.MessageQueueInstaller.Commit%2A> as the `savedState` parameter, is continuously updated as the utility commits each <xref:System.Messaging.MessageQueueInstaller> instance.</span></span> <span data-ttu-id="948e2-165">通常，你的代码不需要显式修改此状态信息。</span><span class="sxs-lookup"><span data-stu-id="948e2-165">Usually, it is not necessary for your code to explicitly modify this state information.</span></span> <span data-ttu-id="948e2-166">清除队列后， <xref:System.Messaging.MessageQueueInstaller.Commit%2A> 会将一个日志条目发送到 `savedState` 与安装相关联的。</span><span class="sxs-lookup"><span data-stu-id="948e2-166">When the queue has been cleared, <xref:System.Messaging.MessageQueueInstaller.Commit%2A> posts a log entry to the `savedState` that is associated with the installation.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="messageQueueInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component"><span data-ttu-id="948e2-167">用作 <see cref="T:System.ComponentModel.IComponent" /> 的模板的 <see cref="T:System.Messaging.MessageQueueInstaller" />。</span><span class="sxs-lookup"><span data-stu-id="948e2-167">A <see cref="T:System.ComponentModel.IComponent" /> to use as a template for the <see cref="T:System.Messaging.MessageQueueInstaller" />.</span></span></param>
        <summary><span data-ttu-id="948e2-168">复制在安装时消息队列所需的 <see cref="T:System.Messaging.MessageQueue" /> 组件的属性值。</span><span class="sxs-lookup"><span data-stu-id="948e2-168">Copies the property values of a <see cref="T:System.Messaging.MessageQueue" /> component that are required at install time for a message queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="948e2-169">通常，你不会从代码中调用的方法， <xref:System.Messaging.MessageQueueInstaller> 通常仅由 installutil.exe 安装实用工具调用它们。</span><span class="sxs-lookup"><span data-stu-id="948e2-169">Typically, you do not call the methods of the <xref:System.Messaging.MessageQueueInstaller> from within your code; they are generally called only by the installutil.exe installation utility.</span></span> <span data-ttu-id="948e2-170"><xref:System.Messaging.MessageQueueInstaller.CopyFromComponent%2A> 由安装实用工具用来将的属性值设置 <xref:System.Messaging.MessageQueueInstaller> 为现有的的值 <xref:System.Messaging.MessageQueue> 。</span><span class="sxs-lookup"><span data-stu-id="948e2-170"><xref:System.Messaging.MessageQueueInstaller.CopyFromComponent%2A> is used by the installation utility to set the property values for the <xref:System.Messaging.MessageQueueInstaller> to the values of an existing <xref:System.Messaging.MessageQueue>.</span></span>  
  
 <span data-ttu-id="948e2-171">如果传入的的为 <xref:System.Messaging.MessageQueue.Path%2A> <xref:System.Messaging.MessageQueue> 空字符串 ( "" ) ，则必须在 <xref:System.Messaging.MessageQueue.Path%2A> 安装程序执行之前将属性设置为非空值。</span><span class="sxs-lookup"><span data-stu-id="948e2-171">If the <xref:System.Messaging.MessageQueue.Path%2A> of the <xref:System.Messaging.MessageQueue> that is passed in is an empty string (""), you must set the <xref:System.Messaging.MessageQueue.Path%2A> property to a non-empty value before the installer executes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="948e2-172">与此 <see cref="T:System.Messaging.MessageQueueInstaller" /> 关联的组件不是 <see cref="T:System.Messaging.MessageQueue" />。</span><span class="sxs-lookup"><span data-stu-id="948e2-172">The component associated with this <see cref="T:System.Messaging.MessageQueueInstaller" /> is not a <see cref="T:System.Messaging.MessageQueue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EncryptionRequired">
      <MemberSignature Language="C#" Value="public System.Messaging.EncryptionRequired EncryptionRequired { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.EncryptionRequired EncryptionRequired" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.EncryptionRequired" />
      <MemberSignature Language="VB.NET" Value="Public Property EncryptionRequired As EncryptionRequired" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::EncryptionRequired EncryptionRequired { System::Messaging::EncryptionRequired get(); void set(System::Messaging::EncryptionRequired value); };" />
      <MemberSignature Language="F#" Value="member this.EncryptionRequired : System.Messaging.EncryptionRequired with get, set" Usage="System.Messaging.MessageQueueInstaller.EncryptionRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.EncryptionRequired</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="948e2-173">获取或设置一个值，该值指示队列是否仅接受私有（或加密）消息。</span><span class="sxs-lookup"><span data-stu-id="948e2-173">Gets or sets a value that indicates whether the queue accepts only private, or encrypted, messages.</span></span></summary>
        <value><span data-ttu-id="948e2-174"><see cref="T:System.Messaging.EncryptionRequired" /> 值之一，指示发送到队列的消息所需的加密级别。</span><span class="sxs-lookup"><span data-stu-id="948e2-174">One of the <see cref="T:System.Messaging.EncryptionRequired" /> values that indicates the encryption level required on messages sent to the queue.</span></span> <span data-ttu-id="948e2-175">默认值为 <see langword="Optional" />。</span><span class="sxs-lookup"><span data-stu-id="948e2-175">The default is <see langword="Optional" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="948e2-176">指定 encryption 后，只 <xref:System.Messaging.Message.Body%2A> 加密消息的。</span><span class="sxs-lookup"><span data-stu-id="948e2-176">When encryption is specified, only the <xref:System.Messaging.Message.Body%2A> of a message is encrypted.</span></span> <span data-ttu-id="948e2-177">其他属性，例如 <xref:System.Messaging.Message.Label%2A> ，不加密。</span><span class="sxs-lookup"><span data-stu-id="948e2-177">Other properties, such as the <xref:System.Messaging.Message.Label%2A>, are not encrypted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="messageQueueInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver"><span data-ttu-id="948e2-178"><see cref="T:System.Collections.IDictionary" />，用于保存执行提交、回滚或卸载操作所需的信息。</span><span class="sxs-lookup"><span data-stu-id="948e2-178">A <see cref="T:System.Collections.IDictionary" /> used to save information needed to perform a commit, rollback, or uninstall operation.</span></span></param>
        <summary><span data-ttu-id="948e2-179">执行安装并将消息队列信息写入注册表。</span><span class="sxs-lookup"><span data-stu-id="948e2-179">Performs the installation and writes message queue information to the registry.</span></span> <span data-ttu-id="948e2-180">此方法应该由安装工具使用，安装工具将自动调用相应的方法。</span><span class="sxs-lookup"><span data-stu-id="948e2-180">This method is meant to be used by installation tools, which automatically call the appropriate methods.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="948e2-181"><xref:System.Messaging.MessageQueueInstaller.Install%2A>方法将消息队列信息写入注册表，并将该 <xref:System.Messaging.MessageQueue> 实例与位于属性指定的路径的队列关联 <xref:System.Messaging.MessageQueueInstaller.Path%2A> 。</span><span class="sxs-lookup"><span data-stu-id="948e2-181">The <xref:System.Messaging.MessageQueueInstaller.Install%2A> method writes message queue information to the registry, and associates the <xref:System.Messaging.MessageQueue> instance with a queue that is located at the path specified by the <xref:System.Messaging.MessageQueueInstaller.Path%2A> property.</span></span> <span data-ttu-id="948e2-182">如果该队列尚不存在，则 <xref:System.Messaging.MessageQueueInstaller.Install%2A> 创建一个事务性队列。</span><span class="sxs-lookup"><span data-stu-id="948e2-182">If the queue does not already exist, <xref:System.Messaging.MessageQueueInstaller.Install%2A> creates a transactional queue.</span></span> <span data-ttu-id="948e2-183"><xref:System.Messaging.MessageQueueInstaller.Install%2A> 将新的或现有的队列属性设置为你在中指定的属性 <xref:System.Messaging.MessageQueueInstaller> 。</span><span class="sxs-lookup"><span data-stu-id="948e2-183"><xref:System.Messaging.MessageQueueInstaller.Install%2A> sets the new or existing queue properties to those that you have specified in the <xref:System.Messaging.MessageQueueInstaller>.</span></span> <span data-ttu-id="948e2-184">如果队列已存在，则会将其属性重置为这些队列的属性 <xref:System.Messaging.MessageQueueInstaller> 。</span><span class="sxs-lookup"><span data-stu-id="948e2-184">If the queue already exists, its properties are reset to those of the <xref:System.Messaging.MessageQueueInstaller>.</span></span> <span data-ttu-id="948e2-185">如果现有队列不是事务性的，则会将其删除，然后重新创建为事务性队列。</span><span class="sxs-lookup"><span data-stu-id="948e2-185">If the existing queue is not transactional, it is deleted and then recreated as a transactional queue.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="948e2-186">如果需要重新创建队列，则队列中的消息将丢失。</span><span class="sxs-lookup"><span data-stu-id="948e2-186">If it is necessary to recreate the queue, messages in the queue will be lost.</span></span>  
  
 <span data-ttu-id="948e2-187">通常，你不会从代码中调用的方法， <xref:System.Messaging.MessageQueueInstaller> 通常仅由 installutil.exe 安装实用工具调用它们。</span><span class="sxs-lookup"><span data-stu-id="948e2-187">Typically, you do not call the methods of the <xref:System.Messaging.MessageQueueInstaller> from within your code; they are generally called only by the installutil.exe installation utility.</span></span> <span data-ttu-id="948e2-188">实用工具会在 <xref:System.Messaging.MessageQueueInstaller.Install%2A> 安装过程中自动调用方法，以写入与正在安装的消息队列关联的注册表信息。</span><span class="sxs-lookup"><span data-stu-id="948e2-188">The utility automatically calls the <xref:System.Messaging.MessageQueueInstaller.Install%2A> method during the installation process to write registry information that is associated with the message queue being installed.</span></span> <span data-ttu-id="948e2-189">安装是事务性的，因此，如果在安装过程中任何安装项目组件发生故障，则所有以前安装的组件都将回滚到其安装前状态。</span><span class="sxs-lookup"><span data-stu-id="948e2-189">Installation is transactional, so if there is a failure of any installation project component during the installation, all the previously installed components are rolled back to their pre-installation states.</span></span> <span data-ttu-id="948e2-190">这可以通过调用每个组件的 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> 方法来实现。</span><span class="sxs-lookup"><span data-stu-id="948e2-190">This is accomplished by calling each component's <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> method.</span></span>  
  
 <span data-ttu-id="948e2-191">在成功安装与安装项目关联的所有组件后，安装实用程序会提交安装。</span><span class="sxs-lookup"><span data-stu-id="948e2-191">After a successful installation of all the components that are associated with the installation project has occurred, the installation utility commits the installations.</span></span> <span data-ttu-id="948e2-192"><xref:System.Messaging.MessageQueueInstaller.Commit%2A><xref:System.Messaging.MessageQueue>通过将队列设置为适当的初始状态来完成的安装。</span><span class="sxs-lookup"><span data-stu-id="948e2-192"><xref:System.Messaging.MessageQueueInstaller.Commit%2A> completes the installation of the <xref:System.Messaging.MessageQueue> by setting the queue to the appropriate initial state.</span></span> <span data-ttu-id="948e2-193">如果由属性指定的队列 <xref:System.Messaging.MessageQueueInstaller.Path%2A> 已存在并且包含消息，则 <xref:System.Messaging.MessageQueueInstaller.Commit%2A> 将清除消息。</span><span class="sxs-lookup"><span data-stu-id="948e2-193">If the queue specified by the <xref:System.Messaging.MessageQueueInstaller.Path%2A> property already exists and contains messages, <xref:System.Messaging.MessageQueueInstaller.Commit%2A> clears the messages.</span></span> <span data-ttu-id="948e2-194"><xref:System.Messaging.MessageQueueInstaller.Commit%2A>不 <xref:System.Messaging.MessageQueueInstaller.Install%2A> 会清除消息，因为无法回滚清除消息的操作。</span><span class="sxs-lookup"><span data-stu-id="948e2-194"><xref:System.Messaging.MessageQueueInstaller.Commit%2A>, rather than <xref:System.Messaging.MessageQueueInstaller.Install%2A>, clears the messages because the act of purging the messages cannot be rolled back.</span></span>  
  
 <span data-ttu-id="948e2-195">应用程序的安装例程使用项目安装程序的 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> 来自动维护有关已安装的组件的信息。</span><span class="sxs-lookup"><span data-stu-id="948e2-195">An application's install routine uses the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> to automatically maintain information about the components that have already been installed.</span></span> <span data-ttu-id="948e2-196"><xref:System.Messaging.MessageQueueInstaller.Install%2A> `stateSaver` 当实用工具安装每个实例时，会不断更新作为参数传递给的状态信息 <xref:System.Messaging.MessageQueueInstaller> 。</span><span class="sxs-lookup"><span data-stu-id="948e2-196">This state information, which is passed to <xref:System.Messaging.MessageQueueInstaller.Install%2A> as the `stateSaver` parameter, is continuously updated as the utility installs each <xref:System.Messaging.MessageQueueInstaller> instance.</span></span> <span data-ttu-id="948e2-197">通常，你的代码不需要显式修改此状态信息。</span><span class="sxs-lookup"><span data-stu-id="948e2-197">Usually, it is not necessary for your code to explicitly modify this state information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="messageQueueInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller"><span data-ttu-id="948e2-198">要比较的安装程序。</span><span class="sxs-lookup"><span data-stu-id="948e2-198">The installer to compare.</span></span></param>
        <summary><span data-ttu-id="948e2-199">确定指定的安装程序能否处理与此安装程序相同的安装类型。</span><span class="sxs-lookup"><span data-stu-id="948e2-199">Determines whether the specified installer can handle the same kind of installation as this installer.</span></span></summary>
        <returns><span data-ttu-id="948e2-200">如果此安装程序和 <paramref name="otherInstaller" /> 参数指定的安装程序可以处理相同的安装类型，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="948e2-200"><see langword="true" /> if this installer and the installer specified by the <paramref name="otherInstaller" /> parameter can handle the same kind of installation; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="948e2-201">通常， <xref:System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller%2A> `true` 仅当此安装程序和参数指定的安装程序 `otherInstaller` 属于同一类型时才返回。</span><span class="sxs-lookup"><span data-stu-id="948e2-201">Typically, <xref:System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller%2A> returns `true` only if this installer and the installer specified by the `otherInstaller` parameter are of the same type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Label" />
      <MemberSignature Language="VB.NET" Value="Public Property Label As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Label { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Label : string with get, set" Usage="System.Messaging.MessageQueueInstaller.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="948e2-202">获取或设置队列说明。</span><span class="sxs-lookup"><span data-stu-id="948e2-202">Gets or sets a description of the queue.</span></span></summary>
        <value><span data-ttu-id="948e2-203">描述消息队列的标签。</span><span class="sxs-lookup"><span data-stu-id="948e2-203">The label that describes the message queue.</span></span> <span data-ttu-id="948e2-204">默认值为空字符串("")。</span><span class="sxs-lookup"><span data-stu-id="948e2-204">The default is an empty string ("").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="948e2-205"><xref:System.Messaging.MessageQueue.Label%2A>属性不需要在队列中是唯一的。</span><span class="sxs-lookup"><span data-stu-id="948e2-205">The <xref:System.Messaging.MessageQueue.Label%2A> property does not need to be unique across queues.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="948e2-206"><see cref="P:System.Messaging.MessageQueueInstaller.Label" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="948e2-206">The <see cref="P:System.Messaging.MessageQueueInstaller.Label" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="MaximumJournalSize">
      <MemberSignature Language="C#" Value="public long MaximumJournalSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumJournalSize" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.MaximumJournalSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumJournalSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumJournalSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumJournalSize : int64 with get, set" Usage="System.Messaging.MessageQueueInstaller.MaximumJournalSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.SizeConverter))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.SizeConverter))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="948e2-207">获取或设置与队列关联的日记的最大大小。</span><span class="sxs-lookup"><span data-stu-id="948e2-207">Gets or sets the maximum size of the journal that is associated with the queue.</span></span></summary>
        <value><span data-ttu-id="948e2-208">日记队列的最大大小（以千字节为单位），该队列记录从队列中移除的消息。</span><span class="sxs-lookup"><span data-stu-id="948e2-208">The maximum size, in kilobytes, of the journal queue, which records messages that are removed from the queue.</span></span> <span data-ttu-id="948e2-209">该消息队列默认为无限制。</span><span class="sxs-lookup"><span data-stu-id="948e2-209">The Message Queuing default is no limit.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="948e2-210">创建队列时，消息队列会在与新队列相同的位置自动创建队列日志。</span><span class="sxs-lookup"><span data-stu-id="948e2-210">When a queue is created, Message Queuing automatically creates a queue journal in the same location as the new queue.</span></span> <span data-ttu-id="948e2-211">队列日志用于跟踪从队列中删除的消息。</span><span class="sxs-lookup"><span data-stu-id="948e2-211">The queue journal is used to track the messages that are removed from the queue.</span></span>  
  
 <span data-ttu-id="948e2-212">两种类型的消息将保持未跟踪的：从队列中删除的消息，因为它们的接收时间计时器过期，而是从队列中清除的消息。</span><span class="sxs-lookup"><span data-stu-id="948e2-212">Two types of messages remain untracked: those that are removed from the queue because their time-to-be-received timer expired, and those that are purged from the queue.</span></span>  
  
 <span data-ttu-id="948e2-213">应用程序无法将消息发送到日记队列。</span><span class="sxs-lookup"><span data-stu-id="948e2-213">Applications cannot send messages to the journal queue.</span></span> <span data-ttu-id="948e2-214">但是，您必须定期清除队列，以删除不再需要的消息。</span><span class="sxs-lookup"><span data-stu-id="948e2-214">However, you must periodically clear the queue to remove the messages that are no longer needed.</span></span> <span data-ttu-id="948e2-215">日志队列中存储的消息会计入队列所在计算机的配额。</span><span class="sxs-lookup"><span data-stu-id="948e2-215">Messages stored in journal queues count toward the quota for the computer where the queues reside.</span></span> <span data-ttu-id="948e2-216"> (管理员设置计算机配额。 ) </span><span class="sxs-lookup"><span data-stu-id="948e2-216">(The computer quota is set by the administrator.)</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumQueueSize">
      <MemberSignature Language="C#" Value="public long MaximumQueueSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumQueueSize" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.MaximumQueueSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumQueueSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumQueueSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumQueueSize : int64 with get, set" Usage="System.Messaging.MessageQueueInstaller.MaximumQueueSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.SizeConverter))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.SizeConverter))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="948e2-217">获取或设置队列的最大大小。</span><span class="sxs-lookup"><span data-stu-id="948e2-217">Gets or sets the maximum size of the queue.</span></span></summary>
        <value><span data-ttu-id="948e2-218">队列的最大大小，以千字节为单位。</span><span class="sxs-lookup"><span data-stu-id="948e2-218">The maximum size, in kilobytes, of the queue.</span></span> <span data-ttu-id="948e2-219">该消息队列默认为无限制。</span><span class="sxs-lookup"><span data-stu-id="948e2-219">The Message Queuing default is no limit.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="948e2-220">最大队列大小通常是在创建队列时设置的，但可以在以后重置。</span><span class="sxs-lookup"><span data-stu-id="948e2-220">The maximum queue size is typically set at the time of queue creation, although it can be reset later.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MulticastAddress">
      <MemberSignature Language="C#" Value="public string MulticastAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MulticastAddress" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.MulticastAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property MulticastAddress As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MulticastAddress { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MulticastAddress : string with get, set" Usage="System.Messaging.MessageQueueInstaller.MulticastAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="948e2-221">在 MSMQ 3.0 中引入。</span><span class="sxs-lookup"><span data-stu-id="948e2-221">Introduced in MSMQ 3.0.</span></span> <span data-ttu-id="948e2-222">获取或设置与队列关联的多路广播地址。</span><span class="sxs-lookup"><span data-stu-id="948e2-222">Gets or sets the multicast address associated with the queue.</span></span></summary>
        <value><span data-ttu-id="948e2-223">包含有效的多路广播地址（格式如下）的 <see cref="T:System.String" />，或者为 <see langword="null" />，这表示队列与多路广播地址不关联。</span><span class="sxs-lookup"><span data-stu-id="948e2-223">A <see cref="T:System.String" /> that contains a valid multicast address (in the form shown below) or <see langword="null" />, which indicates that the queue is not associated with a multicast address.</span></span>  
  
```  
&lt;address&gt;:&lt;port&gt;  
```</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="948e2-224">未安装 MSMQ 3.0。</span><span class="sxs-lookup"><span data-stu-id="948e2-224">MSMQ 3.0 is not installed.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.MulticastAddress" />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.Messaging.MessageQueueInstaller.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="948e2-225">获取或设置由此对象引用的队列的位置。</span><span class="sxs-lookup"><span data-stu-id="948e2-225">Gets or sets the location of the queue that is referenced by this object.</span></span></summary>
        <value><span data-ttu-id="948e2-226">表示队列在网络中的位置的路径。</span><span class="sxs-lookup"><span data-stu-id="948e2-226">The path that represents the location of the queue in the network.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="948e2-227">属性的语法 <xref:System.Messaging.MessageQueue.Path%2A> 取决于它所引用的队列的类型。</span><span class="sxs-lookup"><span data-stu-id="948e2-227">The syntax for the <xref:System.Messaging.MessageQueue.Path%2A> property depends on the type of queue it references.</span></span> <span data-ttu-id="948e2-228">下表显示了在各种类型的队列中应使用的语法。</span><span class="sxs-lookup"><span data-stu-id="948e2-228">The following table shows the syntax you should use for queues of various types.</span></span>  
  
|<span data-ttu-id="948e2-229">队列类型</span><span class="sxs-lookup"><span data-stu-id="948e2-229">Queue type</span></span>|<span data-ttu-id="948e2-230">语法</span><span class="sxs-lookup"><span data-stu-id="948e2-230">Syntax</span></span>|  
|----------------|------------|  
|<span data-ttu-id="948e2-231">公用队列</span><span class="sxs-lookup"><span data-stu-id="948e2-231">Public queue</span></span>|`machineName`\\`queueName`|  
|<span data-ttu-id="948e2-232">专用队列</span><span class="sxs-lookup"><span data-stu-id="948e2-232">Private queue</span></span>|`machineName`\\`Private$`\\`queueName`|  
|<span data-ttu-id="948e2-233">日志队列</span><span class="sxs-lookup"><span data-stu-id="948e2-233">Journal queue</span></span>|`machineName`\\`queueName`\\`Journal$`|  
|<span data-ttu-id="948e2-234">计算机日志队列</span><span class="sxs-lookup"><span data-stu-id="948e2-234">Machine journal queue</span></span>|`machineName`\\`Journal$`|  
|<span data-ttu-id="948e2-235">计算机死信队列</span><span class="sxs-lookup"><span data-stu-id="948e2-235">Machine dead-letter queue</span></span>|`machineName`\\`Deadletter$`|  
|<span data-ttu-id="948e2-236">计算机事务性死信队列</span><span class="sxs-lookup"><span data-stu-id="948e2-236">Machine transactional dead-letter queue</span></span>|`machineName`\\`XactDeadletter$`|  
  
 <span data-ttu-id="948e2-237">使用 "." 表示本地计算机。</span><span class="sxs-lookup"><span data-stu-id="948e2-237">Use "." for the local computer.</span></span>  
  
 <span data-ttu-id="948e2-238">你还可以使用 <xref:System.Messaging.MessageQueue.FormatName%2A> <xref:System.Messaging.MessageQueue.Label%2A> 消息队列应用程序对象的或来描述队列路径。</span><span class="sxs-lookup"><span data-stu-id="948e2-238">You can also use the <xref:System.Messaging.MessageQueue.FormatName%2A> or <xref:System.Messaging.MessageQueue.Label%2A> of a Message Queuing application object to describe the queue path.</span></span> <span data-ttu-id="948e2-239">下表显示了每种类型的引用的正确语法。</span><span class="sxs-lookup"><span data-stu-id="948e2-239">The following table shows the proper syntax for each type of reference.</span></span>  
  
|<span data-ttu-id="948e2-240">参考</span><span class="sxs-lookup"><span data-stu-id="948e2-240">Reference</span></span>|<span data-ttu-id="948e2-241">语法</span><span class="sxs-lookup"><span data-stu-id="948e2-241">Syntax</span></span>|  
|---------------|------------|  
|<span data-ttu-id="948e2-242">格式名</span><span class="sxs-lookup"><span data-stu-id="948e2-242">Format name</span></span>|<span data-ttu-id="948e2-243">Msmq.formatname： [ *格式名* ]</span><span class="sxs-lookup"><span data-stu-id="948e2-243">FormatName:[ *format name* ]</span></span>|  
|<span data-ttu-id="948e2-244">Label</span><span class="sxs-lookup"><span data-stu-id="948e2-244">Label</span></span>|<span data-ttu-id="948e2-245">标签： [ *标签* ]</span><span class="sxs-lookup"><span data-stu-id="948e2-245">Label:[ *label* ]</span></span>|  
  
 <span data-ttu-id="948e2-246">如果正在脱机工作，则必须使用格式名来定义队列 <xref:System.Messaging.MessageQueue.Path%2A> 。</span><span class="sxs-lookup"><span data-stu-id="948e2-246">If you are working offline, you must use the format name to define the queue <xref:System.Messaging.MessageQueue.Path%2A>.</span></span> <span data-ttu-id="948e2-247">如果不这样做，应用程序将引发异常，因为主域控制器不可用于将解析为 <xref:System.Messaging.MessageQueue.Path%2A> <xref:System.Messaging.MessageQueue.FormatName%2A> 。</span><span class="sxs-lookup"><span data-stu-id="948e2-247">If you do not, the application will throw an exception, because the primary domain controller is unavailable to resolve the <xref:System.Messaging.MessageQueue.Path%2A> into the <xref:System.Messaging.MessageQueue.FormatName%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="948e2-248"><see cref="P:System.Messaging.MessageQueueInstaller.Path" /> 被设置为了无效值，可能是因为语法无效。</span><span class="sxs-lookup"><span data-stu-id="948e2-248">The <see cref="P:System.Messaging.MessageQueueInstaller.Path" /> was set to an invalid value, possibly because the syntax is not valid.</span></span>  
  
<span data-ttu-id="948e2-249">- 或 -</span><span class="sxs-lookup"><span data-stu-id="948e2-249">-or-</span></span> 
<span data-ttu-id="948e2-250"><see cref="P:System.Messaging.MessageQueueInstaller.Path" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="948e2-250">The <see cref="P:System.Messaging.MessageQueueInstaller.Path" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Permissions">
      <MemberSignature Language="C#" Value="public System.Messaging.AccessControlList Permissions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.AccessControlList Permissions" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Permissions" />
      <MemberSignature Language="VB.NET" Value="Public Property Permissions As AccessControlList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::AccessControlList ^ Permissions { System::Messaging::AccessControlList ^ get(); void set(System::Messaging::AccessControlList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Permissions : System.Messaging.AccessControlList with get, set" Usage="System.Messaging.MessageQueueInstaller.Permissions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.AccessControlList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="948e2-251">获取或设置与队列关联的权限。</span><span class="sxs-lookup"><span data-stu-id="948e2-251">Gets or sets permissions associated with the queue.</span></span></summary>
        <value><span data-ttu-id="948e2-252"><see cref="T:System.Messaging.AccessControlList" />，包含一个或多个指定受信者和为队列授予的权限的访问控制项。</span><span class="sxs-lookup"><span data-stu-id="948e2-252">A <see cref="T:System.Messaging.AccessControlList" /> that contains one or more access control entries that specify the trustees and permissions to grant for the queue.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="948e2-253">默认情况下，公用或专用队列的创建者具有 "完全控制" 权限，而 "域组" 有权获取队列属性、获取权限和写入队列。</span><span class="sxs-lookup"><span data-stu-id="948e2-253">By default, the creator of a public or private queue has full control, and the domain group Everyone has permission to get queue properties, get permissions, and write to the queue.</span></span> <span data-ttu-id="948e2-254">消息队列依次访问每个权限列表项，直到找到适用于当前用户和当前尝试的操作的权限列表。</span><span class="sxs-lookup"><span data-stu-id="948e2-254">Message Queuing accesses each permission list entry in turn until it finds one that applies to the current user and the current attempted action.</span></span> <span data-ttu-id="948e2-255">与操作系统权限一样，你明确拒绝用户的权限优先于你允许使用的权限。</span><span class="sxs-lookup"><span data-stu-id="948e2-255">As with the operating system permissions, the rights that you specifically deny to a user take precedence over those you allow.</span></span>  
  
 <span data-ttu-id="948e2-256">构造 <xref:System.Messaging.MessageQueueInstaller.Permissions%2A> 属性时，请将 <xref:System.Messaging.AccessControlEntry> 实例添加到集合中 <xref:System.Messaging.AccessControlList> 。</span><span class="sxs-lookup"><span data-stu-id="948e2-256">When you construct the <xref:System.Messaging.MessageQueueInstaller.Permissions%2A> property, add <xref:System.Messaging.AccessControlEntry> instances to your <xref:System.Messaging.AccessControlList> collection.</span></span> <span data-ttu-id="948e2-257">构造每个访问控制项时，可以指定常规或标准访问权限。</span><span class="sxs-lookup"><span data-stu-id="948e2-257">When you construct each access control entry, you can specify generic or standard access rights.</span></span> <span data-ttu-id="948e2-258">队列的权限可以是以下各项的任意组合：</span><span class="sxs-lookup"><span data-stu-id="948e2-258">The rights to a queue can be any combination of the following:</span></span>  
  
-   <span data-ttu-id="948e2-259">删除</span><span class="sxs-lookup"><span data-stu-id="948e2-259">Delete</span></span>  
  
-   <span data-ttu-id="948e2-260">读取安全</span><span class="sxs-lookup"><span data-stu-id="948e2-260">Read Security</span></span>  
  
-   <span data-ttu-id="948e2-261">写入安全性</span><span class="sxs-lookup"><span data-stu-id="948e2-261">Write Security</span></span>  
  
-   <span data-ttu-id="948e2-262">同步</span><span class="sxs-lookup"><span data-stu-id="948e2-262">Synchronize</span></span>  
  
-   <span data-ttu-id="948e2-263">修改所有者</span><span class="sxs-lookup"><span data-stu-id="948e2-263">Modify Owner</span></span>  
  
-   <span data-ttu-id="948e2-264">读取</span><span class="sxs-lookup"><span data-stu-id="948e2-264">Read</span></span>  
  
-   <span data-ttu-id="948e2-265">写入</span><span class="sxs-lookup"><span data-stu-id="948e2-265">Write</span></span>  
  
-   <span data-ttu-id="948e2-266">执行</span><span class="sxs-lookup"><span data-stu-id="948e2-266">Execute</span></span>  
  
-   <span data-ttu-id="948e2-267">必须</span><span class="sxs-lookup"><span data-stu-id="948e2-267">Required</span></span>  
  
-   <span data-ttu-id="948e2-268">All</span><span class="sxs-lookup"><span data-stu-id="948e2-268">All</span></span>  
  
-   <span data-ttu-id="948e2-269">无</span><span class="sxs-lookup"><span data-stu-id="948e2-269">None</span></span>  
  
 <span data-ttu-id="948e2-270">这些权限是一组可以使用按位 "或" 组合的位标志：</span><span class="sxs-lookup"><span data-stu-id="948e2-270">These rights are a set of bit flags that you can combine using the bitwise OR:</span></span>  
  
-   <span data-ttu-id="948e2-271">完全控制</span><span class="sxs-lookup"><span data-stu-id="948e2-271">Full Control</span></span>  
  
-   <span data-ttu-id="948e2-272">删除消息</span><span class="sxs-lookup"><span data-stu-id="948e2-272">Delete Message</span></span>  
  
-   <span data-ttu-id="948e2-273">接收消息</span><span class="sxs-lookup"><span data-stu-id="948e2-273">Receive Message</span></span>  
  
-   <span data-ttu-id="948e2-274">速览消息</span><span class="sxs-lookup"><span data-stu-id="948e2-274">Peek Message</span></span>  
  
-   <span data-ttu-id="948e2-275">接收日志消息</span><span class="sxs-lookup"><span data-stu-id="948e2-275">Receive Journal Message</span></span>  
  
-   <span data-ttu-id="948e2-276">获取队列属性</span><span class="sxs-lookup"><span data-stu-id="948e2-276">Get Queue Properties</span></span>  
  
-   <span data-ttu-id="948e2-277">设置队列属性</span><span class="sxs-lookup"><span data-stu-id="948e2-277">Set Queue Properties</span></span>  
  
-   <span data-ttu-id="948e2-278">获取权限</span><span class="sxs-lookup"><span data-stu-id="948e2-278">Get Permissions</span></span>  
  
-   <span data-ttu-id="948e2-279">设置权限</span><span class="sxs-lookup"><span data-stu-id="948e2-279">Set Permissions</span></span>  
  
-   <span data-ttu-id="948e2-280">获取队列所有权</span><span class="sxs-lookup"><span data-stu-id="948e2-280">Take Queue Ownership</span></span>  
  
-   <span data-ttu-id="948e2-281"> 编写消息</span><span class="sxs-lookup"><span data-stu-id="948e2-281">Write Message</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights)" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="messageQueueInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><span data-ttu-id="948e2-282"><see cref="T:System.Collections.IDictionary" />，包含计算机的安装前状态。</span><span class="sxs-lookup"><span data-stu-id="948e2-282">A <see cref="T:System.Collections.IDictionary" /> that contains the pre-installation state of the computer.</span></span></param>
        <summary><span data-ttu-id="948e2-283">通过回滚安装过程写入注册表的队列信息，将计算机还原到安装前的状态。</span><span class="sxs-lookup"><span data-stu-id="948e2-283">Restores the computer to the state it was in before the installation, by rolling back the queue information that the installation procedure wrote to the registry.</span></span> <span data-ttu-id="948e2-284">此方法应该由安装工具使用，安装工具将自动调用相应的方法。</span><span class="sxs-lookup"><span data-stu-id="948e2-284">This method is meant to be used by installation tools, which automatically call the appropriate methods.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="948e2-285"><xref:System.Messaging.MessageQueueInstaller.Rollback%2A>方法撤消方法的效果 <xref:System.Messaging.MessageQueueInstaller.Install%2A> 。</span><span class="sxs-lookup"><span data-stu-id="948e2-285">The <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> method undoes the effects of the <xref:System.Messaging.MessageQueueInstaller.Install%2A> method.</span></span> <span data-ttu-id="948e2-286"><xref:System.Messaging.MessageQueueInstaller.Rollback%2A> 如果安装项目中的任何组件的安装失败，则调用。</span><span class="sxs-lookup"><span data-stu-id="948e2-286"><xref:System.Messaging.MessageQueueInstaller.Rollback%2A> is called if the installation of any component in the installation project fails.</span></span> <span data-ttu-id="948e2-287"><xref:System.Messaging.MessageQueueInstaller.Install%2A>方法创建或设置队列的属性。</span><span class="sxs-lookup"><span data-stu-id="948e2-287">The <xref:System.Messaging.MessageQueueInstaller.Install%2A> method creates or sets the properties for a queue.</span></span> <span data-ttu-id="948e2-288"><xref:System.Messaging.MessageQueueInstaller.Rollback%2A> 删除队列或将预先存在的队列的属性重置为其预安装值。</span><span class="sxs-lookup"><span data-stu-id="948e2-288"><xref:System.Messaging.MessageQueueInstaller.Rollback%2A> either deletes the queue or resets the properties of a pre-existing queue to their pre-installation values.</span></span>  
  
 <span data-ttu-id="948e2-289">通常，你不会从代码中调用的方法， <xref:System.Messaging.MessageQueueInstaller> 通常仅由 InstallUtil.exe 安装实用工具调用它们。</span><span class="sxs-lookup"><span data-stu-id="948e2-289">Typically, you do not call the methods of the <xref:System.Messaging.MessageQueueInstaller> from within your code; they are generally called only by the InstallUtil.exe installation utility.</span></span> <span data-ttu-id="948e2-290">在安装失败后，实用工具会自动调用 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> 方法，以撤消安装进程已进行的任何更改。</span><span class="sxs-lookup"><span data-stu-id="948e2-290">The utility automatically calls the <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> method after an installation failure to undo any changes that the installation process has already made.</span></span>  
  
 <span data-ttu-id="948e2-291">应用程序的安装例程使用项目安装程序的 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> 来自动维护有关已安装的组件的信息。</span><span class="sxs-lookup"><span data-stu-id="948e2-291">An application's install routine uses the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> to automatically maintain information about the components that have already been installed.</span></span> <span data-ttu-id="948e2-292"><xref:System.Messaging.MessageQueueInstaller.Rollback%2A> `savedState` 当实用工具回滚每个实例时，会不断更新作为参数传递给的状态信息 <xref:System.Messaging.MessageQueueInstaller> 。</span><span class="sxs-lookup"><span data-stu-id="948e2-292">This state information, which is passed to <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> as the `savedState` parameter, is continuously updated as the utility rolls back each <xref:System.Messaging.MessageQueueInstaller> instance.</span></span> <span data-ttu-id="948e2-293">通常，你的代码不需要显式修改此状态信息。</span><span class="sxs-lookup"><span data-stu-id="948e2-293">Usually, it is not necessary for your code to explicitly modify this state information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="Transactional">
      <MemberSignature Language="C#" Value="public bool Transactional { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Transactional" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Transactional" />
      <MemberSignature Language="VB.NET" Value="Public Property Transactional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Transactional { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Transactional : bool with get, set" Usage="System.Messaging.MessageQueueInstaller.Transactional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="948e2-294">获取或设置一个值，该值指示队列是否仅接受作为事务的一部分发送的消息。</span><span class="sxs-lookup"><span data-stu-id="948e2-294">Gets or sets a value that indicates whether the queue accepts only messages sent as part of a transaction.</span></span></summary>
        <value><span data-ttu-id="948e2-295">如果队列仅接受作为事务的一部分发送的消息，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="948e2-295"><see langword="true" /> if the queue can only accept messages sent as part of a transaction; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="948e2-296">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="948e2-296">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="948e2-297">可以使用或不使用事务从本地事务队列检索消息。</span><span class="sxs-lookup"><span data-stu-id="948e2-297">Messages can be retrieved from a local transaction queue with or without using a transaction.</span></span> <span data-ttu-id="948e2-298">如果未指定事务上下文，则消息队列将为您创建单个内部事务。</span><span class="sxs-lookup"><span data-stu-id="948e2-298">If you do not specify a transaction context, Message Queuing creates a single internal transaction for you.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="messageQueueInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><span data-ttu-id="948e2-299">一个 <see cref="T:System.Collections.IDictionary" />，它包含计算机的安装后状态。</span><span class="sxs-lookup"><span data-stu-id="948e2-299">A <see cref="T:System.Collections.IDictionary" /> that contains the post-installation state of the computer.</span></span></param>
        <summary><span data-ttu-id="948e2-300">通过从注册表中移除队列信息来移除安装。</span><span class="sxs-lookup"><span data-stu-id="948e2-300">Removes an installation by removing queue information from the registry.</span></span> <span data-ttu-id="948e2-301">此方法应该由卸载工具使用，卸载工具自动调用相应的方法。</span><span class="sxs-lookup"><span data-stu-id="948e2-301">This method is meant to be used by uninstallation tools, which automatically call the appropriate methods.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="948e2-302">如果 <xref:System.Messaging.MessageQueueInstaller.UninstallAction%2A> 为 `Remove` ，则 <xref:System.Messaging.MessageQueueInstaller.Uninstall%2A> 还会删除与关联的队列 <xref:System.Messaging.MessageQueue> 。</span><span class="sxs-lookup"><span data-stu-id="948e2-302">If the <xref:System.Messaging.MessageQueueInstaller.UninstallAction%2A> is `Remove`, <xref:System.Messaging.MessageQueueInstaller.Uninstall%2A> also deletes the queue associated with the <xref:System.Messaging.MessageQueue>.</span></span>  
  
 <span data-ttu-id="948e2-303">通常情况下，你不会 <xref:System.Messaging.MessageQueueInstaller> 从代码中调用的方法; 它们通常仅由在卸载模式下 (InstallUtil.exe 安装实用工具调用) 。</span><span class="sxs-lookup"><span data-stu-id="948e2-303">Typically, you do not call the methods of the <xref:System.Messaging.MessageQueueInstaller> from within your code; they are generally called only by the InstallUtil.exe installation utility (in uninstall mode).</span></span> <span data-ttu-id="948e2-304">实用工具会自动调用 <xref:System.Messaging.MessageQueueInstaller.Uninstall%2A> 方法，将受安装影响的系统部件还原为其安装前的状态。</span><span class="sxs-lookup"><span data-stu-id="948e2-304">The utility automatically calls the <xref:System.Messaging.MessageQueueInstaller.Uninstall%2A> method to restore the parts of the system that were affected by the installation to their pre-installation states.</span></span> <span data-ttu-id="948e2-305">这包括删除与要卸载的 MessageQueue 关联的注册表信息。</span><span class="sxs-lookup"><span data-stu-id="948e2-305">This includes deleting registry information that is associated with the MessageQueue being uninstalled.</span></span>  
  
 <span data-ttu-id="948e2-306">应用程序的卸载例程使用项目安装程序的 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> 来自动维护有关已卸载的组件的信息。</span><span class="sxs-lookup"><span data-stu-id="948e2-306">An application's uninstall routine uses the project installer's <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> to automatically maintain information about the components that have already been uninstalled.</span></span> <span data-ttu-id="948e2-307"><xref:System.Messaging.MessageQueueInstaller.Uninstall%2A> `savedState` 当实用工具卸载每个实例时，会不断更新作为参数传递给的状态信息 <xref:System.Messaging.MessageQueueInstaller> 。</span><span class="sxs-lookup"><span data-stu-id="948e2-307">This state information, which is passed to <xref:System.Messaging.MessageQueueInstaller.Uninstall%2A> as the `savedState` parameter, is continuously updated as the utility uninstalls each <xref:System.Messaging.MessageQueueInstaller> instance.</span></span> <span data-ttu-id="948e2-308">通常，你的代码不需要显式修改此状态信息。</span><span class="sxs-lookup"><span data-stu-id="948e2-308">Usually, it is not necessary for your code to explicitly modify this state information.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="UninstallAction">
      <MemberSignature Language="C#" Value="public System.Configuration.Install.UninstallAction UninstallAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Configuration.Install.UninstallAction UninstallAction" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.UninstallAction" />
      <MemberSignature Language="VB.NET" Value="Public Property UninstallAction As UninstallAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Configuration::Install::UninstallAction UninstallAction { System::Configuration::Install::UninstallAction get(); void set(System::Configuration::Install::UninstallAction value); };" />
      <MemberSignature Language="F#" Value="member this.UninstallAction : System.Configuration.Install.UninstallAction with get, set" Usage="System.Messaging.MessageQueueInstaller.UninstallAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.Install.UninstallAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="948e2-309">获取或设置一个值，该值指示安装程序在卸载时对队列执行的操作：移除队列，将队列还原为安装前的状态，或者将队列保留为当前的已安装状态。</span><span class="sxs-lookup"><span data-stu-id="948e2-309">Gets or sets a value that indicates what the installer does with the queue at uninstall time: remove it, restore it to its pre-installation state, or leave it in its current installed state.</span></span></summary>
        <value><span data-ttu-id="948e2-310"><see cref="T:System.Configuration.Install.UninstallAction" /> 值之一，指示在卸载 <see cref="T:System.Messaging.MessageQueue" /> 时队列保留在什么状态。</span><span class="sxs-lookup"><span data-stu-id="948e2-310">One of the <see cref="T:System.Configuration.Install.UninstallAction" /> values that indicates what state to leave the queue in when the <see cref="T:System.Messaging.MessageQueue" /> is uninstalled.</span></span> <span data-ttu-id="948e2-311">默认值为 <see langword="Remove" />。</span><span class="sxs-lookup"><span data-stu-id="948e2-311">The default is <see langword="Remove" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="948e2-312">安装队列时，可以选择使用现有队列。</span><span class="sxs-lookup"><span data-stu-id="948e2-312">When you install a queue, you can optionally use an existing queue.</span></span> <span data-ttu-id="948e2-313">如果这样做，则必须确定队列是否应恢复为其安装前的状态，或保持其当前的安装后状态。</span><span class="sxs-lookup"><span data-stu-id="948e2-313">If you do so, you must decide whether the queue should return to its pre-installation state, or remain in its current, post-installation state.</span></span> <span data-ttu-id="948e2-314">如果选择将队列返回到安装前的状态，则在安装时从队列中删除的消息将不会还原。</span><span class="sxs-lookup"><span data-stu-id="948e2-314">If you elect to return the queue to its pre-installation state, messages that were deleted from the queue at install time are not restored.</span></span> <span data-ttu-id="948e2-315">你可以仅将与关联的队列属性重置 <xref:System.Messaging.MessageQueueInstaller> 为其预安装值。</span><span class="sxs-lookup"><span data-stu-id="948e2-315">You can reset only queue properties that are associated with the <xref:System.Messaging.MessageQueueInstaller> to their pre-installation values.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.Install.UninstallAction" />
      </Docs>
    </Member>
    <Member MemberName="UseJournalQueue">
      <MemberSignature Language="C#" Value="public bool UseJournalQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseJournalQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.UseJournalQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property UseJournalQueue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseJournalQueue { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseJournalQueue : bool with get, set" Usage="System.Messaging.MessageQueueInstaller.UseJournalQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="948e2-316">获取或设置一个值，该值指示从队列中检索的消息是否也复制到关联的日记队列。</span><span class="sxs-lookup"><span data-stu-id="948e2-316">Gets or sets a value that indicates whether messages that are retrieved from the queue are also copied to the associated journal queue.</span></span></summary>
        <value><span data-ttu-id="948e2-317">如果将从队列中检索的消息复制到日记队列，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="948e2-317"><see langword="true" /> to copy messages that are retrieved from the queue to the journal queue; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="948e2-318">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="948e2-318">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="948e2-319">使用日记队列可以跟踪消息，即使已从队列中检索消息。</span><span class="sxs-lookup"><span data-stu-id="948e2-319">A journal queue lets you keep track of messages even after they have been retrieved from the queue.</span></span> <span data-ttu-id="948e2-320">但是，两种类型的消息将保持未跟踪的：在接收时间计时器过期时从队列中删除的消息，以及从队列中清除的消息。</span><span class="sxs-lookup"><span data-stu-id="948e2-320">However, two types of messages remain untracked: those that are removed from the queue when their time-to-be-received timer expires, and those that are purged from the queue.</span></span>  
  
 <span data-ttu-id="948e2-321">应定期清除日记队列，以删除不再需要的消息。</span><span class="sxs-lookup"><span data-stu-id="948e2-321">A journal queue should be cleared periodically to remove messages that are no longer needed.</span></span> <span data-ttu-id="948e2-322">日志队列中存储的消息将计入日志所在计算机的配额。</span><span class="sxs-lookup"><span data-stu-id="948e2-322">Messages stored in the journal queue count toward the quota for the computer on which the journal is located.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
