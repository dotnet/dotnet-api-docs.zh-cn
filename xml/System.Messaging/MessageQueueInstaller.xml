<Type Name="MessageQueueInstaller" FullName="System.Messaging.MessageQueueInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ff0d833955923cb5cafe8e4db9cd614c4573ee6f" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83946763" /></Metadata><TypeSignature Language="C#" Value="public class MessageQueueInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type MessageQueueInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>允许安装并配置应用程序运行所需的队列。 安装实用工具（例如 InstallUtil.exe）在安装 <see cref="T:System.Messaging.MessageQueue" /> 时调用此类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 安装实用工具使用 <xref:System.Messaging.MessageQueueInstaller> 来写入与队列关联的注册表值。 有关安装实用工具的详细信息，请参阅[installutil.exe （安装程序工具）](/dotnet/framework/tools/installutil-exe-installer-tool)。  
  
 若要安装队列，请创建一个继承自 <xref:System.Configuration.Install.Installer>的项目安装程序类，并将该类的 <xref:System.ComponentModel.RunInstallerAttribute> 设置为 "`true`"。 在项目中，为安装中的每个队列创建一个 <xref:System.Messaging.MessageQueueInstaller> 实例，并将该实例添加到项目安装程序类。  
  
 创建 <xref:System.Messaging.MessageQueueInstaller> 实例时，可以选择将现有 <xref:System.Messaging.MessageQueue> （例如，从测试服务器）传递到 <xref:System.Messaging.MessageQueueInstaller.%23ctor%2A> 构造函数。 此方法通过镜像传入队列的设置，自动为新队列提供配置设置。 或者，可以手动将 <xref:System.Messaging.MessageQueueInstaller> 实例中的属性设置为所需的状态，并调用无参数的构造函数。  
  
 在调用安装实用程序时，它会查找 <xref:System.ComponentModel.RunInstallerAttribute>。 如果 `true`，则该实用工具会安装与项目安装程序关联的 <xref:System.Configuration.Install.Installer.Installers%2A> 集合中的所有队列。 如果 `false`<xref:System.ComponentModel.RunInstallerAttribute>，则实用工具将忽略项目安装程序。  
  
 在将实例添加到项目安装程序的 <xref:System.Configuration.Install.Installer.Installers%2A> 集合之前或之后，你可以修改 <xref:System.Messaging.MessageQueueInstaller> 实例的其他属性。 例如，必须在安装实用工具执行之前设置队列的 <xref:System.Messaging.MessageQueue.Path%2A>。  
  
 通常，你不会从代码中调用 <xref:System.Messaging.MessageQueueInstaller> 的方法;它们通常仅由 installutil.exe 安装实用工具调用。 实用程序会在安装过程中自动调用 <xref:System.Messaging.MessageQueueInstaller.Install%2A> 方法，如果安装未引发异常，则调用 <xref:System.Messaging.MessageQueueInstaller.Commit%2A>。 如果需要，它会通过对生成异常的对象调用 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> 来实现故障。  
  
 应用程序的安装例程使用项目安装程序的 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> 自动维护有关已安装的组件的信息。 当应用程序安装每个 <xref:System.Messaging.MessageQueueInstaller> 实例时，此状态信息会不断更新。 通常，您的代码不需要显式修改状态信息。  
  
 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/tools/installutil-exe-installer-tool">Installutil.exe（安装程序工具）</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Messaging.MessageQueueInstaller" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Messaging.MessageQueueInstaller" /> 类的新实例。 不设置任何实例属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueInstaller (System.Messaging.MessageQueue componentToCopy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Messaging.MessageQueue componentToCopy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.#ctor(System.Messaging.MessageQueue)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (componentToCopy As MessageQueue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueInstaller(System::Messaging::MessageQueue ^ componentToCopy);" />
      <MemberSignature Language="F#" Value="new System.Messaging.MessageQueueInstaller : System.Messaging.MessageQueue -&gt; System.Messaging.MessageQueueInstaller" Usage="new System.Messaging.MessageQueueInstaller componentToCopy" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="componentToCopy" Type="System.Messaging.MessageQueue" />
      </Parameters>
      <Docs>
        <param name="componentToCopy"><see cref="T:System.Messaging.MessageQueue" /> 组件，其设置确定安装的新队列的属性设置。</param>
        <summary>初始化 <see cref="T:System.Messaging.MessageQueueInstaller" /> 类的新实例，将安装设置初始化为现有 <see cref="T:System.Messaging.MessageQueue" /> 实例的安装设置。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Authenticate">
      <MemberSignature Language="C#" Value="public bool Authenticate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Authenticate" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Authenticate" />
      <MemberSignature Language="VB.NET" Value="Public Property Authenticate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Authenticate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Authenticate : bool with get, set" Usage="System.Messaging.MessageQueueInstaller.Authenticate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示要安装的队列是否只接受已经过身份验证的消息。</summary>
        <value>如果队列仅接受已经过身份验证的消息，则为 <see langword="true" />；否则为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果将未经过身份验证的消息发送到只接受经过身份验证的消息的队列，则会拒绝该消息。 发送应用程序可以通过设置消息的 <xref:System.Messaging.Message.AcknowledgeType%2A> 来请求拒绝消息。 否则，将不会指示消息被拒绝，因此除非将消息发送到死信队列，否则消息可能会丢失。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BasePriority">
      <MemberSignature Language="C#" Value="public short BasePriority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int16 BasePriority" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.BasePriority" />
      <MemberSignature Language="VB.NET" Value="Public Property BasePriority As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property short BasePriority { short get(); void set(short value); };" />
      <MemberSignature Language="F#" Value="member this.BasePriority : int16 with get, set" Usage="System.Messaging.MessageQueueInstaller.BasePriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于在网络上路由公共队列消息的基本优先级。</summary>
        <value>发送到公共队列的所有消息的单个基本优先级。 默认值为零 (0)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueInstaller.BasePriority%2A> 用于通过网络路由队列消息。 使用 <xref:System.Messaging.MessageQueueInstaller.BasePriority%2A> 为发送到队列的消息提供比发送到其他队列的消息更高或较低的优先级。 设置队列的基本优先级后，发送到该队列的所有消息的优先级高于基本优先级发送到队列的消息。 队列的基本优先级对队列中的消息顺序或如何从队列中读取消息不起作用。  
  
 <xref:System.Messaging.MessageQueueInstaller.BasePriority%2A> 仅适用于通过域控制器（即，使用公共格式名称）访问的公共队列。 专用队列和直接访问的公共队列的基本优先级始终为零。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Category">
      <MemberSignature Language="C#" Value="public Guid Category { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid Category" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Category" />
      <MemberSignature Language="VB.NET" Value="Public Property Category As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid Category { Guid get(); void set(Guid value); };" />
      <MemberSignature Language="F#" Value="member this.Category : Guid with get, set" Usage="System.Messaging.MessageQueueInstaller.Category" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.GuidConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.GuidConverter, System, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.GuidConverter, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.ComponentModel.GuidConverter, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置实现特定的队列类型。</summary>
        <value><see cref="T:System.Guid" />，表示队列类别（或“消息队列”类型标识符），允许应用程序按照其队列的使用方式对这些队列进行分类。 默认为 <see langword="Guid.empty" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 "队列" 类别，应用程序可以根据所用的方式对关联的队列进行分类。 <xref:System.Messaging.MessageQueue.Category%2A> 可以是空引用。 还可以定义新类别。  
  
 <xref:System.Messaging.MessageQueue.Category%2A> 属性提供对 "消息队列" 类型标识符属性的访问，该属性与特定队列相关联，并且是可读/写的。 您可以使用 <xref:System.Guid.NewGuid%2A> 方法来创建一个可保证在所有 <xref:System.Guid> 值中唯一的类别值。 但是，只需将类别值与其他类别（而不是其他所有 <xref:System.Guid> 值）区别。 例如，你可以将一个队列组的 <xref:System.Messaging.MessageQueue.Category%2A> 设置为 {00000000-0000-0000-0000-000000000001}，将另一个组的 <xref:System.Messaging.MessageQueue.Category%2A> 设置为 {00000000-0000-0000-0000-000000000002}。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Commit (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Commit(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Commit : System.Collections.IDictionary -&gt; unit" Usage="messageQueueInstaller.Commit savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">一个 <see cref="T:System.Collections.IDictionary" />，它包含计算机的安装后状态。</param>
        <summary>通过提交 <see cref="T:System.Messaging.MessageQueue" /> 方法写入注册表的 <see cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" /> 安装信息来完成安装过程。 此方法应该由安装工具使用，安装工具将自动调用相应的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，你不会从代码中调用 <xref:System.Messaging.MessageQueueInstaller> 的方法;它们通常仅由 installutil.exe 安装实用工具调用。 实用程序会在安装过程中自动调用 <xref:System.Messaging.MessageQueueInstaller.Install%2A> 方法。 安装是事务性的，因此，如果在安装过程中任何安装项目组件发生故障，则所有以前安装的组件都将回滚到其安装前状态。 这是通过调用每个组件的 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> 方法来完成的。  
  
 在成功安装与安装项目关联的所有组件后，安装实用程序会提交安装。 <xref:System.Messaging.MessageQueueInstaller.Commit%2A> 通过将队列设置为适当的初始状态来完成 <xref:System.Messaging.MessageQueue> 的安装。 如果 <xref:System.Messaging.MessageQueueInstaller.Path%2A> 属性指定的队列已存在并且包含消息，则 <xref:System.Messaging.MessageQueueInstaller.Commit%2A> 清除消息。 <xref:System.Messaging.MessageQueueInstaller.Commit%2A>，而不是 <xref:System.Messaging.MessageQueueInstaller.Install%2A>，因此会清除消息，因为无法回滚清除消息的操作。  
  
 应用程序的安装例程使用项目安装程序的 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> 自动维护有关已安装的组件的信息。 当实用工具提交每个 <xref:System.Messaging.MessageQueueInstaller> 实例时，将不断更新作为 `savedState` 参数传递给 <xref:System.Messaging.MessageQueueInstaller.Commit%2A> 的状态信息。 通常，你的代码不需要显式修改此状态信息。 清除队列后，<xref:System.Messaging.MessageQueueInstaller.Commit%2A> 会将日志条目发送到与安装相关联的 `savedState`。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="messageQueueInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">用作 <see cref="T:System.ComponentModel.IComponent" /> 的模板的 <see cref="T:System.Messaging.MessageQueueInstaller" />。</param>
        <summary>复制在安装时消息队列所需的 <see cref="T:System.Messaging.MessageQueue" /> 组件的属性值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，你不会从代码中调用 <xref:System.Messaging.MessageQueueInstaller> 的方法;它们通常仅由 installutil.exe 安装实用工具调用。 安装实用工具使用 <xref:System.Messaging.MessageQueueInstaller.CopyFromComponent%2A> 将 <xref:System.Messaging.MessageQueueInstaller> 的属性值设置为现有 <xref:System.Messaging.MessageQueue>的值。  
  
 如果传入的 <xref:System.Messaging.MessageQueue> 的 <xref:System.Messaging.MessageQueue.Path%2A> 为空字符串（""），则在执行安装程序之前，必须将 <xref:System.Messaging.MessageQueue.Path%2A> 属性设置为非空值。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">与此 <see cref="T:System.Messaging.MessageQueueInstaller" /> 关联的组件不是 <see cref="T:System.Messaging.MessageQueue" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="EncryptionRequired">
      <MemberSignature Language="C#" Value="public System.Messaging.EncryptionRequired EncryptionRequired { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.EncryptionRequired EncryptionRequired" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.EncryptionRequired" />
      <MemberSignature Language="VB.NET" Value="Public Property EncryptionRequired As EncryptionRequired" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::EncryptionRequired EncryptionRequired { System::Messaging::EncryptionRequired get(); void set(System::Messaging::EncryptionRequired value); };" />
      <MemberSignature Language="F#" Value="member this.EncryptionRequired : System.Messaging.EncryptionRequired with get, set" Usage="System.Messaging.MessageQueueInstaller.EncryptionRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.EncryptionRequired</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示队列是否仅接受私有（或加密）消息。</summary>
        <value><see cref="T:System.Messaging.EncryptionRequired" /> 值之一，指示发送到队列的消息所需的加密级别。 默认为 <see langword="Optional" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定 encryption 后，只加密消息的 <xref:System.Messaging.Message.Body%2A>。 其他属性（如 <xref:System.Messaging.Message.Label%2A>）未加密。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="messageQueueInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver"><see cref="T:System.Collections.IDictionary" />，用于保存执行提交、回滚或卸载操作所需的信息。</param>
        <summary>执行安装并将消息队列信息写入注册表。 此方法应该由安装工具使用，安装工具将自动调用相应的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueInstaller.Install%2A> 方法将消息队列信息写入注册表，并将 <xref:System.Messaging.MessageQueue> 实例与位于 <xref:System.Messaging.MessageQueueInstaller.Path%2A> 属性指定的路径的队列关联。 如果队列尚不存在，<xref:System.Messaging.MessageQueueInstaller.Install%2A> 将创建一个事务性队列。 <xref:System.Messaging.MessageQueueInstaller.Install%2A> 将新的或现有的队列属性设置为您在 <xref:System.Messaging.MessageQueueInstaller>中指定的属性。 如果队列已存在，则会将其属性重置为 <xref:System.Messaging.MessageQueueInstaller>的属性。 如果现有队列不是事务性的，则会将其删除，然后重新创建为事务性队列。  
  
> [!CAUTION]
>  如果需要重新创建队列，则队列中的消息将丢失。  
  
 通常，你不会从代码中调用 <xref:System.Messaging.MessageQueueInstaller> 的方法;它们通常仅由 installutil.exe 安装实用工具调用。 实用程序会在安装过程中自动调用 <xref:System.Messaging.MessageQueueInstaller.Install%2A> 方法，以写入与正在安装的消息队列关联的注册表信息。 安装是事务性的，因此，如果在安装过程中任何安装项目组件发生故障，则所有以前安装的组件都将回滚到其安装前状态。 这是通过调用每个组件的 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> 方法来完成的。  
  
 在成功安装与安装项目关联的所有组件后，安装实用程序会提交安装。 <xref:System.Messaging.MessageQueueInstaller.Commit%2A> 通过将队列设置为适当的初始状态来完成 <xref:System.Messaging.MessageQueue> 的安装。 如果 <xref:System.Messaging.MessageQueueInstaller.Path%2A> 属性指定的队列已存在并且包含消息，则 <xref:System.Messaging.MessageQueueInstaller.Commit%2A> 清除消息。 <xref:System.Messaging.MessageQueueInstaller.Commit%2A>，而不是 <xref:System.Messaging.MessageQueueInstaller.Install%2A>，因此会清除消息，因为无法回滚清除消息的操作。  
  
 应用程序的安装例程使用项目安装程序的 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> 自动维护有关已安装的组件的信息。 当实用工具安装每个 <xref:System.Messaging.MessageQueueInstaller> 实例时，将不断更新作为 `stateSaver` 参数传递给 <xref:System.Messaging.MessageQueueInstaller.Install%2A> 的状态信息。 通常，你的代码不需要显式修改此状态信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="messageQueueInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">要比较的安装程序。</param>
        <summary>确定指定的安装程序能否处理与此安装程序相同的安装类型。</summary>
        <returns>如果此安装程序和 <paramref name="otherInstaller" /> 参数指定的安装程序可以处理相同的安装类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常，仅当此安装程序和 `otherInstaller` 参数指定的安装程序属于同一类型时，<xref:System.Configuration.Install.ComponentInstaller.IsEquivalentInstaller%2A> 才返回 `true`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Label" />
      <MemberSignature Language="VB.NET" Value="Public Property Label As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Label { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Label : string with get, set" Usage="System.Messaging.MessageQueueInstaller.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置队列说明。</summary>
        <value>描述消息队列的标签。 默认值为空字符串("")。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueue.Label%2A> 属性不必在队列中是唯一的。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Messaging.MessageQueueInstaller.Label" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="MaximumJournalSize">
      <MemberSignature Language="C#" Value="public long MaximumJournalSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumJournalSize" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.MaximumJournalSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumJournalSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumJournalSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumJournalSize : int64 with get, set" Usage="System.Messaging.MessageQueueInstaller.MaximumJournalSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.SizeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与队列关联的日记的最大大小。</summary>
        <value>日记队列的最大大小（以千字节为单位），该队列记录从队列中移除的消息。 该消息队列默认为无限制。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 创建队列时，消息队列会在与新队列相同的位置自动创建队列日志。 队列日志用于跟踪从队列中删除的消息。  
  
 两种类型的消息将保持未跟踪的：从队列中删除的消息，因为它们的接收时间计时器过期，而是从队列中清除的消息。  
  
 应用程序无法将消息发送到日记队列。 但是，您必须定期清除队列，以删除不再需要的消息。 日志队列中存储的消息会计入队列所在计算机的配额。 （计算机配额由管理员设置。）  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumQueueSize">
      <MemberSignature Language="C#" Value="public long MaximumQueueSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumQueueSize" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.MaximumQueueSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumQueueSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumQueueSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumQueueSize : int64 with get, set" Usage="System.Messaging.MessageQueueInstaller.MaximumQueueSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.SizeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置队列的最大大小。</summary>
        <value>队列的最大大小，以千字节为单位。 该消息队列默认为无限制。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 最大队列大小通常是在创建队列时设置的，但可以在以后重置。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MulticastAddress">
      <MemberSignature Language="C#" Value="public string MulticastAddress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MulticastAddress" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.MulticastAddress" />
      <MemberSignature Language="VB.NET" Value="Public Property MulticastAddress As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MulticastAddress { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MulticastAddress : string with get, set" Usage="System.Messaging.MessageQueueInstaller.MulticastAddress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在 MSMQ 3.0 中引入。 获取或设置与队列关联的多路广播地址。</summary>
        <value>包含有效的多路广播地址（格式如下）的 <see cref="T:System.String" />，或者为 <see langword="null" />，这表示队列与多路广播地址不关联。  
  
```  
&lt;address&gt;:&lt;port&gt;  
```</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.PlatformNotSupportedException">未安装 MSMQ 3.0。</exception>
        <altmember cref="P:System.Messaging.MessageQueue.MulticastAddress" />
      </Docs>
    </Member>
    <Member MemberName="Path">
      <MemberSignature Language="C#" Value="public string Path { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Path" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Path" />
      <MemberSignature Language="VB.NET" Value="Public Property Path As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Path { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Path : string with get, set" Usage="System.Messaging.MessageQueueInstaller.Path" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Editor("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Messaging.Design.QueuePathEditor", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置由此对象引用的队列的位置。</summary>
        <value>表示队列在网络中的位置的路径。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueue.Path%2A> 属性的语法取决于它所引用的队列的类型。 下表显示了在各种类型的队列中应使用的语法。  
  
|队列类型|语法|  
|----------------|------------|  
|公用队列|`machineName`\\`queueName`|  
|专用队列|`machineName`\\`Private$`\\`queueName`|  
|日志队列|`machineName`\\`queueName`\\`Journal$`|  
|计算机日志队列|`machineName`\\`Journal$`|  
|计算机死信队列|`machineName`\\`Deadletter$`|  
|计算机事务性死信队列|`machineName`\\`XactDeadletter$`|  
  
 使用 "." 表示本地计算机。  
  
 你还可以使用消息队列应用程序对象的 <xref:System.Messaging.MessageQueue.FormatName%2A> 或 <xref:System.Messaging.MessageQueue.Label%2A> 来描述队列路径。 下表显示了每种类型的引用的正确语法。  
  
|参考|语法|  
|---------------|------------|  
|格式名|Msmq.formatname： [*格式名*]|  
|Label|标签： [*标签*]|  
  
 如果正在脱机工作，则必须使用格式名来定义队列 <xref:System.Messaging.MessageQueue.Path%2A>。 如果不这样做，应用程序将引发异常，因为主域控制器不可用于将 <xref:System.Messaging.MessageQueue.Path%2A> 解析到 <xref:System.Messaging.MessageQueue.FormatName%2A>中。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Messaging.MessageQueueInstaller.Path" /> 被设置为了无效值，可能是因为语法无效。  
  
- 或 - 
<see cref="P:System.Messaging.MessageQueueInstaller.Path" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Permissions">
      <MemberSignature Language="C#" Value="public System.Messaging.AccessControlList Permissions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.AccessControlList Permissions" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Permissions" />
      <MemberSignature Language="VB.NET" Value="Public Property Permissions As AccessControlList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::AccessControlList ^ Permissions { System::Messaging::AccessControlList ^ get(); void set(System::Messaging::AccessControlList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Permissions : System.Messaging.AccessControlList with get, set" Usage="System.Messaging.MessageQueueInstaller.Permissions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.AccessControlList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与队列关联的权限。</summary>
        <value><see cref="T:System.Messaging.AccessControlList" />，包含一个或多个指定受信者和为队列授予的权限的访问控制项。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 默认情况下，公用或专用队列的创建者具有 "完全控制" 权限，而 "域组" 有权获取队列属性、获取权限和写入队列。 消息队列依次访问每个权限列表项，直到找到适用于当前用户和当前尝试的操作的权限列表。 与操作系统权限一样，你明确拒绝用户的权限优先于你允许使用的权限。  
  
 构造 <xref:System.Messaging.MessageQueueInstaller.Permissions%2A> 属性时，请将 <xref:System.Messaging.AccessControlEntry> 实例添加到 <xref:System.Messaging.AccessControlList> 集合。 构造每个访问控制项时，可以指定常规或标准访问权限。 队列的权限可以是以下各项的任意组合：  
  
-   删除  
  
-   读取安全  
  
-   写入安全性  
  
-   同步  
  
-   修改所有者  
  
-   读  
  
-   写入  
  
-   执行  
  
-   必需  
  
-   全部  
  
-   无  
  
 这些权限是一组可以使用按位 "或" 组合的位标志：  
  
-   完全控制  
  
-   删除消息  
  
-   接收消息  
  
-   扫视消息  
  
-   接收日志消息  
  
-   获取队列属性  
  
-   设置队列属性  
  
-   获取权限  
  
-   设置权限  
  
-   获取队列所有权  
  
-   写入消息  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueue.SetPermissions(System.String,System.Messaging.MessageQueueAccessRights)" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="messageQueueInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState"><see cref="T:System.Collections.IDictionary" />，包含计算机的安装前状态。</param>
        <summary>通过回滚安装过程写入注册表的队列信息，将计算机还原到安装前的状态。 此方法应该由安装工具使用，安装工具将自动调用相应的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> 方法撤消 <xref:System.Messaging.MessageQueueInstaller.Install%2A> 方法的影响。 如果安装项目中的任何组件安装失败，则调用 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A>。 <xref:System.Messaging.MessageQueueInstaller.Install%2A> 方法创建或设置队列属性。 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> 删除队列或将预先存在的队列的属性重置为其预安装值。  
  
 通常，你不会从代码中调用 <xref:System.Messaging.MessageQueueInstaller> 的方法;它们通常仅由 Installutil.exe 安装实用工具调用。 在安装失败时，该实用工具会自动调用 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> 方法，以撤消安装进程已进行的任何更改。  
  
 应用程序的安装例程使用项目安装程序的 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> 自动维护有关已安装的组件的信息。 当实用工具回滚每个 <xref:System.Messaging.MessageQueueInstaller> 实例时，将不断更新作为 `savedState` 参数传递给 <xref:System.Messaging.MessageQueueInstaller.Rollback%2A> 的状态信息。 通常，你的代码不需要显式修改此状态信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="Transactional">
      <MemberSignature Language="C#" Value="public bool Transactional { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Transactional" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.Transactional" />
      <MemberSignature Language="VB.NET" Value="Public Property Transactional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Transactional { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Transactional : bool with get, set" Usage="System.Messaging.MessageQueueInstaller.Transactional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示队列是否仅接受作为事务的一部分发送的消息。</summary>
        <value>如果队列仅接受作为事务的一部分发送的消息，则为 <see langword="true" />；否则为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以使用或不使用事务从本地事务队列检索消息。 如果未指定事务上下文，则消息队列将为您创建单个内部事务。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="messageQueueInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">一个 <see cref="T:System.Collections.IDictionary" />，它包含计算机的安装后状态。</param>
        <summary>通过从注册表中移除队列信息来移除安装。 此方法应该由卸载工具使用，卸载工具自动调用相应的方法。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Messaging.MessageQueueInstaller.UninstallAction%2A> `Remove`，<xref:System.Messaging.MessageQueueInstaller.Uninstall%2A> 还会删除与 <xref:System.Messaging.MessageQueue>关联的队列。  
  
 通常，你不会从代码中调用 <xref:System.Messaging.MessageQueueInstaller> 的方法;它们通常仅由 Installutil.exe 安装实用工具（在卸载模式下）调用。 实用工具会自动调用 <xref:System.Messaging.MessageQueueInstaller.Uninstall%2A> 方法，将受安装影响的系统部件还原为其安装前状态。 这包括删除与要卸载的 MessageQueue 关联的注册表信息。  
  
 应用程序的卸载例程使用项目安装程序的 <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType> 自动维护有关已卸载的组件的信息。 当实用工具卸载每个 <xref:System.Messaging.MessageQueueInstaller> 实例时，会不断更新作为 `savedState` 参数传递给 <xref:System.Messaging.MessageQueueInstaller.Uninstall%2A> 的状态信息。 通常，你的代码不需要显式修改此状态信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="T:System.Collections.IDictionary" />
      </Docs>
    </Member>
    <Member MemberName="UninstallAction">
      <MemberSignature Language="C#" Value="public System.Configuration.Install.UninstallAction UninstallAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Configuration.Install.UninstallAction UninstallAction" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.UninstallAction" />
      <MemberSignature Language="VB.NET" Value="Public Property UninstallAction As UninstallAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Configuration::Install::UninstallAction UninstallAction { System::Configuration::Install::UninstallAction get(); void set(System::Configuration::Install::UninstallAction value); };" />
      <MemberSignature Language="F#" Value="member this.UninstallAction : System.Configuration.Install.UninstallAction with get, set" Usage="System.Messaging.MessageQueueInstaller.UninstallAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Configuration.Install.UninstallAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示安装程序在卸载时对队列执行的操作：移除队列，将队列还原为安装前的状态，或者将队列保留为当前的已安装状态。</summary>
        <value><see cref="T:System.Configuration.Install.UninstallAction" /> 值之一，指示在卸载 <see cref="T:System.Messaging.MessageQueue" /> 时队列保留在什么状态。 默认为 <see langword="Remove" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 安装队列时，可以选择使用现有队列。 如果这样做，则必须确定队列是否应恢复为其安装前的状态，或保持其当前的安装后状态。 如果选择将队列返回到安装前的状态，则在安装时从队列中删除的消息将不会还原。 你可以仅将与 <xref:System.Messaging.MessageQueueInstaller> 关联的队列属性重置为其预安装值。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.Install.UninstallAction" />
      </Docs>
    </Member>
    <Member MemberName="UseJournalQueue">
      <MemberSignature Language="C#" Value="public bool UseJournalQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseJournalQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueInstaller.UseJournalQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property UseJournalQueue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseJournalQueue { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseJournalQueue : bool with get, set" Usage="System.Messaging.MessageQueueInstaller.UseJournalQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示从队列中检索的消息是否也复制到关联的日记队列。</summary>
        <value>如果将从队列中检索的消息复制到日记队列，则为 <see langword="true" />；否则为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用日记队列可以跟踪消息，即使已从队列中检索消息。 但是，两种类型的消息将保持未跟踪的：在接收时间计时器过期时从队列中删除的消息，以及从队列中清除的消息。  
  
 应定期清除日记队列，以删除不再需要的消息。 日志队列中存储的消息将计入日志所在计算机的配额。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
