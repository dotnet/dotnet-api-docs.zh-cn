<Type Name="IMessageFormatter" FullName="System.Messaging.IMessageFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f7618f81cc46e64fd1db7e68c55c2b8546a1ab34" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89819275" /></Metadata><TypeSignature Language="C#" Value="public interface IMessageFormatter : ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMessageFormatter implements class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.IMessageFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IMessageFormatter&#xA;Implements ICloneable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IMessageFormatter : ICloneable" />
  <TypeSignature Language="F#" Value="type IMessageFormatter = interface&#xA;    interface ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.MessageFormatterConverter))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.MessageFormatterConverter))&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="da12c-101">从“消息队列”消息体序列化或反序列化对象。</span><span class="sxs-lookup"><span data-stu-id="da12c-101">Serializes or deserializes objects from the body of a Message Queuing message.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="da12c-102">当应用程序使用类的实例将消息发送到队列时 <xref:System.Messaging.MessageQueue> ，格式化程序将 (该对象序列化，该对象可以是) 到流中的任何类的实例，并将其插入消息正文。</span><span class="sxs-lookup"><span data-stu-id="da12c-102">When an application sends a message to the queue using an instance of the <xref:System.Messaging.MessageQueue> class, the formatter serializes the object (which can be an instance of any class) into a stream and inserts it into the message body.</span></span> <span data-ttu-id="da12c-103">当使用从队列进行读取时 <xref:System.Messaging.MessageQueue> ，格式化程序将消息数据反序列化为的 <xref:System.Messaging.Message.Body%2A> 属性 <xref:System.Messaging.Message> 。</span><span class="sxs-lookup"><span data-stu-id="da12c-103">When reading from a queue using a <xref:System.Messaging.MessageQueue>, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property of a <xref:System.Messaging.Message>.</span></span>  
  
 <span data-ttu-id="da12c-104"><xref:System.Messaging.BinaryMessageFormatter> 与 <xref:System.Messaging.ActiveXMessageFormatter> 相比，提供更快的吞吐量 <xref:System.Messaging.XmlMessageFormatter> 。</span><span class="sxs-lookup"><span data-stu-id="da12c-104"><xref:System.Messaging.BinaryMessageFormatter> and <xref:System.Messaging.ActiveXMessageFormatter> provide faster throughput than the <xref:System.Messaging.XmlMessageFormatter>.</span></span> <span data-ttu-id="da12c-105"><xref:System.Messaging.ActiveXMessageFormatter>允许与 Visual Basic 6.0 消息队列应用程序的互操作性。</span><span class="sxs-lookup"><span data-stu-id="da12c-105">The <xref:System.Messaging.ActiveXMessageFormatter> allows interoperability with Visual Basic 6.0 Message Queuing applications.</span></span> <span data-ttu-id="da12c-106"><xref:System.Messaging.XmlMessageFormatter>是松散耦合的，这意味着服务器和客户端可以对单独发送和接收的类型进行版本保证。</span><span class="sxs-lookup"><span data-stu-id="da12c-106">The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, which means that the server and client can version the type that is sent and received independently.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Messaging.MessageQueue.Formatter" />
    <altmember cref="P:System.Messaging.Message.Formatter" />
    <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
    <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
    <altmember cref="T:System.Messaging.XmlMessageFormatter" />
  </Docs>
  <Members>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public bool CanRead (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanRead(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)" />
      <MemberSignature Language="VB.NET" Value="Public Function CanRead (message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool CanRead(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member CanRead : System.Messaging.Message -&gt; bool" Usage="iMessageFormatter.CanRead message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="da12c-107">要检查的 <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="da12c-107">The <see cref="T:System.Messaging.Message" /> to inspect.</span></span></param>
        <summary><span data-ttu-id="da12c-108">在类中实现时，确定格式化程序是否可以反序列化消息的内容。</span><span class="sxs-lookup"><span data-stu-id="da12c-108">When implemented in a class, determines whether the formatter can deserialize the contents of the message.</span></span></summary>
        <returns><span data-ttu-id="da12c-109">如果格式化程序可以反序列化消息，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="da12c-109"><see langword="true" /> if the formatter can deserialize the message; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.Read(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.CanRead(System.Messaging.Message)" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public object Read (System.Messaging.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Read(class System.Messaging.Message message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.IMessageFormatter.Read(System.Messaging.Message)" />
      <MemberSignature Language="VB.NET" Value="Public Function Read (message As Message) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Read(System::Messaging::Message ^ message);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.Messaging.Message -&gt; obj" Usage="iMessageFormatter.Read message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="da12c-110">要反序列化的 <see cref="T:System.Messaging.Message" />。</span><span class="sxs-lookup"><span data-stu-id="da12c-110">The <see cref="T:System.Messaging.Message" /> to deserialize.</span></span></param>
        <summary><span data-ttu-id="da12c-111">在类中实现时，读取给定消息中的内容并创建包含该消息中的数据的对象。</span><span class="sxs-lookup"><span data-stu-id="da12c-111">When implemented in a class, reads the contents from the given message and creates an object that contains data from the message.</span></span></summary>
        <returns><span data-ttu-id="da12c-112">反序列化的消息。</span><span class="sxs-lookup"><span data-stu-id="da12c-112">The deserialized message.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.Write(System.Messaging.Message,System.Object)" />
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.Read(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.Messaging.Message message, object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.Messaging.Message message, object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.IMessageFormatter.Write(System.Messaging.Message,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (message As Message, obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::Messaging::Message ^ message, System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.Messaging.Message * obj -&gt; unit" Usage="iMessageFormatter.Write (message, obj)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Messaging.Message" />
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="message"><span data-ttu-id="da12c-113"><see cref="T:System.Messaging.Message" />，它将包含序列化的对象。</span><span class="sxs-lookup"><span data-stu-id="da12c-113">The <see cref="T:System.Messaging.Message" /> that will contain the serialized object.</span></span></param>
        <param name="obj"><span data-ttu-id="da12c-114">要序列化为消息的对象。</span><span class="sxs-lookup"><span data-stu-id="da12c-114">The object to be serialized into the message.</span></span></param>
        <summary><span data-ttu-id="da12c-115">在类中实现时，将对象序列化到消息体中。</span><span class="sxs-lookup"><span data-stu-id="da12c-115">When implemented in a class, serializes an object into the body of the message.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.BinaryMessageFormatter.Read(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)" />
        <altmember cref="M:System.Messaging.XmlMessageFormatter.Read(System.Messaging.Message)" />
      </Docs>
    </Member>
  </Members>
</Type>
