<Type Name="Message" FullName="System.Messaging.Message">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7099b37d9e607c027df03615f1080672fb68c235" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86803364" /></Metadata><TypeSignature Language="C#" Value="public class Message : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Message extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.Message" />
  <TypeSignature Language="VB.NET" Value="Public Class Message&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Message : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type Message = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Messaging.Design.MessageDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Messaging.Design.MessageDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Messaging.Design.MessageDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Messaging.Design.MessageDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.ComponentModel.Designer("System.Messaging.Design.MessageDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("System.Messaging.Design.MessageDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="8fcc6-101">提供对定义消息队列消息所需的属性的访问。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-101">Provides access to the properties needed to define a Message Queuing message.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-102">使用 <xref:System.Messaging.Message> 类查看或接收来自队列的消息，或在将消息发送到队列时对消息属性进行精细控制。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-102">Use the <xref:System.Messaging.Message> class to peek or receive messages from a queue, or to have fine control over message properties when sending a message to a queue.</span></span>  
  
 <span data-ttu-id="8fcc6-103"><xref:System.Messaging.MessageQueue> 使用 <xref:System.Messaging.Message> 类查看或接收来自队列的消息时，因为 <xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=nameWithType> 和 <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> 方法都创建类的新实例 <xref:System.Messaging.Message> 并设置该实例的属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-103"><xref:System.Messaging.MessageQueue> uses the <xref:System.Messaging.Message> class when it peeks or receives messages from queues, because both the <xref:System.Messaging.MessageQueue.Peek%2A?displayProperty=nameWithType> and <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> methods create a new instance of the <xref:System.Messaging.Message> class and set the instance's properties.</span></span> <span data-ttu-id="8fcc6-104"><xref:System.Messaging.Message>类的只读属性适用于从队列中检索消息，而读取/写入属性应用于发送和检索消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-104">The <xref:System.Messaging.Message> class's read-only properties apply to retrieving messages from a queue, while the read/write properties apply to sending and retrieving messages.</span></span> <span data-ttu-id="8fcc6-105"><xref:System.Messaging.MessageQueue>扫视或接收来自队列的消息时，其 <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> 属性将确定检索消息的哪些属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-105">When <xref:System.Messaging.MessageQueue> peeks or receives a message from a queue, its <xref:System.Messaging.MessageQueue.MessageReadPropertyFilter%2A> property determines which of the message's properties are retrieved.</span></span>  
  
 <span data-ttu-id="8fcc6-106">使用 <xref:System.Messaging.MessageQueue> 类的 <xref:System.Messaging.MessageQueue.Send%2A> 方法可以为发送到该队列的消息指定任何对象类型。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-106">The <xref:System.Messaging.MessageQueue> class's <xref:System.Messaging.MessageQueue.Send%2A> method allows you to specify any object type for a message being sent to that queue.</span></span> <span data-ttu-id="8fcc6-107">您可以使用 <xref:System.Messaging.MessageQueue> 实例的 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> 属性来指定发送到队列的一般消息的设置。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-107">You can use the <xref:System.Messaging.MessageQueue> instance's <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property to specify settings for generic messages sent to the queue.</span></span> <span data-ttu-id="8fcc6-108">设置类型包括格式化程序、标签、加密和身份验证。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-108">The types of settings include formatter, label, encryption, and authentication.</span></span> <span data-ttu-id="8fcc6-109">在 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> 协调消息传递应用程序以响应确认和报告消息时，还可以指定相应成员的值。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-109">You can also specify values for the appropriate <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> members when you coordinate your messaging application to respond to acknowledgment and report messages.</span></span> <span data-ttu-id="8fcc6-110">使用 <xref:System.Messaging.Message> 实例将消息发送到队列，你可以灵活地访问和修改其中的许多属性-无论是单个消息还是按消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-110">Using a <xref:System.Messaging.Message> instance to send a message to the queue gives you the flexibility to access and modify many of these properties - either for a single message or on a message-by-message basis.</span></span> <span data-ttu-id="8fcc6-111"><xref:System.Messaging.Message> 属性优先于 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-111"><xref:System.Messaging.Message> properties take precedence over <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A>.</span></span>  
  
 <span data-ttu-id="8fcc6-112">消息数据存储在属性中 <xref:System.Messaging.Message.Body%2A> ，并在较小的范围内存储 <xref:System.Messaging.Message.AppSpecific%2A> 和 <xref:System.Messaging.Message.Extension%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-112">Message data is stored in the <xref:System.Messaging.Message.Body%2A> property and to a lesser extent, the <xref:System.Messaging.Message.AppSpecific%2A> and <xref:System.Messaging.Message.Extension%2A> properties.</span></span> <span data-ttu-id="8fcc6-113">对消息数据进行加密、序列化或反序列化时，仅 <xref:System.Messaging.Message.Body%2A> 影响属性的内容。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-113">When message data is encrypted, serialized, or deserialized, only the contents of the <xref:System.Messaging.Message.Body%2A> property are affected.</span></span>  
  
 <span data-ttu-id="8fcc6-114"><xref:System.Messaging.Message.Body%2A>发送消息时，将使用指定的属性对属性的内容进行序列化 <xref:System.Messaging.Message.Formatter%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-114">The contents of the <xref:System.Messaging.Message.Body%2A> property are serialized when the message is sent, using the <xref:System.Messaging.Message.Formatter%2A> property you specify.</span></span> <span data-ttu-id="8fcc6-115">序列化的内容位于属性中 <xref:System.Messaging.Message.BodyStream%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-115">The serialized contents are found in the <xref:System.Messaging.Message.BodyStream%2A> property.</span></span> <span data-ttu-id="8fcc6-116">您还可以直接设置 <xref:System.Messaging.Message.BodyStream%2A> 属性，例如，将文件作为消息的数据内容发送。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-116">You can also set the <xref:System.Messaging.Message.BodyStream%2A> property directly, for example, to send a file as the data content of a message.</span></span> <span data-ttu-id="8fcc6-117">你可以随时更改 <xref:System.Messaging.Message.Body%2A> 或 <xref:System.Messaging.Message.Formatter%2A> 属性，然后再发送消息，并且在调用时，将相应地序列化数据 <xref:System.Messaging.MessageQueue.Send%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-117">You can change the <xref:System.Messaging.Message.Body%2A> or <xref:System.Messaging.Message.Formatter%2A> properties at any time before sending the message, and the data will be serialized appropriately when you call <xref:System.Messaging.MessageQueue.Send%2A>.</span></span>  
  
 <span data-ttu-id="8fcc6-118">属性定义的属性 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=nameWithType> 仅适用于不属于类型的消息 <xref:System.Messaging.Message> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-118">The properties defined by the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A?displayProperty=nameWithType> property apply only to messages that are not of type <xref:System.Messaging.Message>.</span></span> <span data-ttu-id="8fcc6-119">如果 <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> 为指定了属性，则 <xref:System.Messaging.MessageQueue> 发送到该队列的实例中的名称相同的属性将 <xref:System.Messaging.Message> 导致忽略这些默认属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-119">If you specify the <xref:System.Messaging.MessageQueue.DefaultPropertiesToSend%2A> property for a <xref:System.Messaging.MessageQueue>, the identically named properties in a <xref:System.Messaging.Message> instance sent to that queue cause these default properties to be ignored.</span></span>  
  
 <span data-ttu-id="8fcc6-120">有关实例的初始属性值的列表 <xref:System.Messaging.Message> ，请参见 <xref:System.Messaging.Message.%23ctor%2A> 构造函数。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-120">For a list of initial property values for an instance of <xref:System.Messaging.Message>, see the <xref:System.Messaging.Message.%23ctor%2A> constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-121">下面的代码示例演示如何使用格式化消息正文 <xref:System.Messaging.BinaryMessageFormatter> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-121">The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.</span></span>  
  
 [!code-cpp[MessagingBinaryFormatter#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessagingBinaryFormatter/CPP/message_binaryformatter.cpp#1)]
 [!code-csharp[MessagingBinaryFormatter#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessagingBinaryFormatter/CS/message_binaryformatter.cs#1)]
 [!code-vb[MessagingBinaryFormatter#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessagingBinaryFormatter/VB/message_binaryformatter.vb#1)]  
  
 <span data-ttu-id="8fcc6-122">下面的代码示例演示如何使用格式化消息正文 <xref:System.Messaging.XmlMessageFormatter> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-122">The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.</span></span>  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="T:System.Messaging.DefaultPropertiesToSend" />
    <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
    <altmember cref="M:System.Messaging.MessageQueue.Receive" />
    <altmember cref="M:System.Messaging.MessageQueue.Peek" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="8fcc6-123">初始化 <see cref="T:System.Messaging.Message" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-123">Initializes a new instance of the <see cref="T:System.Messaging.Message" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Message ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Message.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Message();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="8fcc6-124">初始化 <see cref="T:System.Messaging.Message" /> 类的新实例（主体为空）。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-124">Initializes a new instance of the <see cref="T:System.Messaging.Message" /> class with an empty body.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-125">使用此重载创建 <xref:System.Messaging.Message> 类的新实例，该实例的正文为空。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-125">Use this overload to create a new instance of the <xref:System.Messaging.Message> class that has an empty body.</span></span>  
  
 <span data-ttu-id="8fcc6-126"><xref:System.Messaging.Message.Body%2A>发送对象之前，请指定属性或 <xref:System.Messaging.Message.BodyStream%2A> 属性 <xref:System.Messaging.Message> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-126">Specify either the <xref:System.Messaging.Message.Body%2A> property or the <xref:System.Messaging.Message.BodyStream%2A> property before sending the <xref:System.Messaging.Message> object.</span></span> <span data-ttu-id="8fcc6-127"><xref:System.Messaging.Message.Body%2A>属性可以是可序列化的任何对象，例如文本字符串、结构对象、类实例或嵌入的对象。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-127">The <xref:System.Messaging.Message.Body%2A> property can be any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object.</span></span>  
  
 <span data-ttu-id="8fcc6-128">除非将消息内容直接写入 <xref:System.Messaging.Message.BodyStream%2A> 属性，否则在 <xref:System.Messaging.Message.Formatter%2A> 发送消息之前，请设置属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-128">Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message.</span></span> <span data-ttu-id="8fcc6-129">在 <xref:System.Messaging.Message.Formatter%2A> <xref:System.Messaging.MessageQueue.Send%2A> 实例上调用方法时，将使用属性的值对正文进行序列化 <xref:System.Messaging.MessageQueue> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-129">The body is serialized using the <xref:System.Messaging.Message.Formatter%2A> property's value at the time the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance.</span></span>  
  
 <span data-ttu-id="8fcc6-130"><xref:System.Messaging.XmlMessageFormatter>是松散耦合的，因此在使用此格式时，不需要在发送方和接收方上具有相同的对象类型。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-130">The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format.</span></span> <span data-ttu-id="8fcc6-131">将 <xref:System.Messaging.ActiveXMessageFormatter> <xref:System.Messaging.BinaryMessageFormatter> 数据序列化为二进制表示形式。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-131">The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation.</span></span> <span data-ttu-id="8fcc6-132">在 <xref:System.Messaging.ActiveXMessageFormatter> 发送或接收 COM 组件时使用。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-132">The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.</span></span>  
  
 <span data-ttu-id="8fcc6-133">下表显示了实例的初始属性值 <xref:System.Messaging.Message> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-133">The following table shows initial property values for an instance of <xref:System.Messaging.Message>.</span></span>  
  
|<span data-ttu-id="8fcc6-134">属性</span><span class="sxs-lookup"><span data-stu-id="8fcc6-134">Property</span></span>|<span data-ttu-id="8fcc6-135">初始值</span><span class="sxs-lookup"><span data-stu-id="8fcc6-135">Initial value</span></span>|  
|--------------|-------------------|  
|<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  
|<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  
|<xref:System.Messaging.Message.AppSpecific%2A>|<span data-ttu-id="8fcc6-136">0</span><span class="sxs-lookup"><span data-stu-id="8fcc6-136">0</span></span>|  
|<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  
|<xref:System.Messaging.Message.AuthenticationProviderName%2A>|<span data-ttu-id="8fcc6-137">Microsoft 基本加密提供程序版本1。0</span><span class="sxs-lookup"><span data-stu-id="8fcc6-137">Microsoft Base Cryptographic Provider version 1.0</span></span>|  
|<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  
|<xref:System.Messaging.Message.Body%2A>|`null`|  
|<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  
|<xref:System.Messaging.Message.BodyType%2A>|<span data-ttu-id="8fcc6-138">0</span><span class="sxs-lookup"><span data-stu-id="8fcc6-138">0</span></span>|  
|<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  
|<xref:System.Messaging.Message.CorrelationId%2A>|<span data-ttu-id="8fcc6-139">空字符串 ( "" ) </span><span class="sxs-lookup"><span data-stu-id="8fcc6-139">An empty string ("")</span></span>|  
|<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|<span data-ttu-id="8fcc6-140">长度为零的字节数组</span><span class="sxs-lookup"><span data-stu-id="8fcc6-140">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.DigitalSignature%2A>|<span data-ttu-id="8fcc6-141">长度为零的字节数组</span><span class="sxs-lookup"><span data-stu-id="8fcc6-141">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  
|<xref:System.Messaging.Message.Extension%2A>|<span data-ttu-id="8fcc6-142">长度为零的字节数组</span><span class="sxs-lookup"><span data-stu-id="8fcc6-142">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.Formatter%2A>|`XmlMessageFormatter`|  
|<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  
|<xref:System.Messaging.Message.Label%2A>|<span data-ttu-id="8fcc6-143">空字符串 ( "" ) </span><span class="sxs-lookup"><span data-stu-id="8fcc6-143">An empty string ("")</span></span>|  
|<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  
|<xref:System.Messaging.Message.Recoverable%2A>|`false`|  
|<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  
|<xref:System.Messaging.Message.SenderCertificate%2A>|<span data-ttu-id="8fcc6-144">长度为零的字节数组</span><span class="sxs-lookup"><span data-stu-id="8fcc6-144">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  
|<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  
|<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  
|<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseTracing%2A>|`false`|  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-145">下面的代码示例将两个不同优先级的消息发送到队列，然后检索它们。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-145">The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.</span></span>  
  
 [!code-cpp[Message.DefaultPropertiesToSend#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CPP/message_defaultandpriority.cpp#1)]
 [!code-csharp[Message.DefaultPropertiesToSend#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CS/message_defaultandpriority.cs#1)]
 [!code-vb[Message.DefaultPropertiesToSend#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/VB/message_defaultandpriority.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.XmlMessageFormatter" />
        <altmember cref="P:System.Messaging.Message.Body" />
        <altmember cref="T:System.Messaging.DefaultPropertiesToSend" />
        <altmember cref="T:System.Messaging.MessageQueue" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Message (object body);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Message.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (body As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Message(System::Object ^ body);" />
      <MemberSignature Language="F#" Value="new System.Messaging.Message : obj -&gt; System.Messaging.Message" Usage="new System.Messaging.Message body" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="body" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="8fcc6-146">要序列化到消息体中的对象。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-146">The object to be serialized into the body of the message.</span></span></param>
        <summary><span data-ttu-id="8fcc6-147">通过用 <see cref="T:System.Messaging.Message" /> 将指定的对象序列化到消息体中，初始化 <see cref="T:System.Messaging.XmlMessageFormatter" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-147">Initializes a new instance of the <see cref="T:System.Messaging.Message" /> class, using the <see cref="T:System.Messaging.XmlMessageFormatter" /> to serialize the specified object into the body of the message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-148">使用此重载创建 <xref:System.Messaging.Message> 类的新实例，该类包含 <xref:System.Messaging.Message.Body%2A> 由参数指定的 `body` 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-148">Use this overload to create a new instance of the <xref:System.Messaging.Message> class that contains the <xref:System.Messaging.Message.Body%2A> specified by the `body` parameter.</span></span> <span data-ttu-id="8fcc6-149">`body`参数可以是可序列化的任何对象，例如文本字符串、结构对象、类实例或嵌入的对象。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-149">The `body` parameter can be any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object.</span></span> <span data-ttu-id="8fcc6-150">使用来序列化正文， <xref:System.Messaging.XmlMessageFormatter> 除非在 <xref:System.Messaging.Message.Formatter%2A> 发送之前更改属性 <xref:System.Messaging.Message> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-150">The body is serialized using the <xref:System.Messaging.XmlMessageFormatter> unless you change the <xref:System.Messaging.Message.Formatter%2A> property before the <xref:System.Messaging.Message> is sent.</span></span> <span data-ttu-id="8fcc6-151">如果 <xref:System.Messaging.Message.Body%2A> <xref:System.Messaging.Message.Formatter%2A> 在调用之前随时更改或属性 <xref:System.Messaging.MessageQueue.Send%2A> ，将根据新的属性值对消息进行序列化。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-151">If you change the <xref:System.Messaging.Message.Body%2A> or <xref:System.Messaging.Message.Formatter%2A> property at any time before calling <xref:System.Messaging.MessageQueue.Send%2A>, the message will be serialized according to the new property value.</span></span>  
  
 <span data-ttu-id="8fcc6-152"><xref:System.Messaging.XmlMessageFormatter>是松散耦合的，因此在使用此格式时，不需要在发送方和接收方上具有相同的对象类型。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-152">The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format.</span></span> <span data-ttu-id="8fcc6-153">将 <xref:System.Messaging.ActiveXMessageFormatter> <xref:System.Messaging.BinaryMessageFormatter> 数据序列化为二进制表示形式。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-153">The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation.</span></span> <span data-ttu-id="8fcc6-154">在 <xref:System.Messaging.ActiveXMessageFormatter> 发送或接收 COM 组件时使用。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-154">The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.</span></span>  
  
 <span data-ttu-id="8fcc6-155">下表显示了实例的初始属性值 <xref:System.Messaging.Message> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-155">The following table shows initial property values for an instance of <xref:System.Messaging.Message>.</span></span>  
  
|<span data-ttu-id="8fcc6-156">属性</span><span class="sxs-lookup"><span data-stu-id="8fcc6-156">Property</span></span>|<span data-ttu-id="8fcc6-157">初始值</span><span class="sxs-lookup"><span data-stu-id="8fcc6-157">Initial value</span></span>|  
|--------------|-------------------|  
|<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  
|<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  
|<xref:System.Messaging.Message.AppSpecific%2A>|<span data-ttu-id="8fcc6-158">0</span><span class="sxs-lookup"><span data-stu-id="8fcc6-158">0</span></span>|  
|<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  
|<xref:System.Messaging.Message.AuthenticationProviderName%2A>|<span data-ttu-id="8fcc6-159">Microsoft 基本加密提供程序版本1。0</span><span class="sxs-lookup"><span data-stu-id="8fcc6-159">Microsoft Base Cryptographic Provider version 1.0</span></span>|  
|<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  
|<xref:System.Messaging.Message.Body%2A>|<span data-ttu-id="8fcc6-160">`body` 参数。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-160">The `body` parameter.</span></span>|  
|<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  
|<xref:System.Messaging.Message.BodyType%2A>|<span data-ttu-id="8fcc6-161">0</span><span class="sxs-lookup"><span data-stu-id="8fcc6-161">0</span></span>|  
|<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  
|<xref:System.Messaging.Message.CorrelationId%2A>|<span data-ttu-id="8fcc6-162">空字符串 ( "" ) </span><span class="sxs-lookup"><span data-stu-id="8fcc6-162">An empty string ("")</span></span>|  
|<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|<span data-ttu-id="8fcc6-163">长度为零的字节数组</span><span class="sxs-lookup"><span data-stu-id="8fcc6-163">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.DigitalSignature%2A>|<span data-ttu-id="8fcc6-164">长度为零的字节数组</span><span class="sxs-lookup"><span data-stu-id="8fcc6-164">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  
|<xref:System.Messaging.Message.Extension%2A>|<span data-ttu-id="8fcc6-165">长度为零的字节数组</span><span class="sxs-lookup"><span data-stu-id="8fcc6-165">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.Formatter%2A>|`XmlMessageFormatter`|  
|<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  
|<xref:System.Messaging.Message.Label%2A>|<span data-ttu-id="8fcc6-166">空字符串 ( "" ) </span><span class="sxs-lookup"><span data-stu-id="8fcc6-166">An empty string ("")</span></span>|  
|<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  
|<xref:System.Messaging.Message.Recoverable%2A>|`false`|  
|<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  
|<xref:System.Messaging.Message.SenderCertificate%2A>|<span data-ttu-id="8fcc6-167">长度为零的字节数组</span><span class="sxs-lookup"><span data-stu-id="8fcc6-167">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  
|<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  
|<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  
|<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseTracing%2A>|`false`|  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-168">下面的代码示例创建一个新队列，将包含订单的消息发送到该队列，然后检索该队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-168">The following code example creates a new queue, sends a message that contains an order to it, and then retrieves it.</span></span>  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.XmlMessageFormatter" />
        <altmember cref="T:System.Messaging.DefaultPropertiesToSend" />
        <altmember cref="T:System.Messaging.MessageQueue" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Message (object body, System.Messaging.IMessageFormatter formatter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object body, class System.Messaging.IMessageFormatter formatter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.Message.#ctor(System.Object,System.Messaging.IMessageFormatter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (body As Object, formatter As IMessageFormatter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Message(System::Object ^ body, System::Messaging::IMessageFormatter ^ formatter);" />
      <MemberSignature Language="F#" Value="new System.Messaging.Message : obj * System.Messaging.IMessageFormatter -&gt; System.Messaging.Message" Usage="new System.Messaging.Message (body, formatter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="body" Type="System.Object" />
        <Parameter Name="formatter" Type="System.Messaging.IMessageFormatter" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="8fcc6-169">要序列化到消息体中的对象。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-169">The object to be serialized into the body of the message.</span></span></param>
        <param name="formatter"><span data-ttu-id="8fcc6-170"><see cref="T:System.Messaging.IMessageFormatter" />，指定用于序列化消息体的格式化程序。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-170">A <see cref="T:System.Messaging.IMessageFormatter" /> that specifies the formatter with which to serialize the message body.</span></span></param>
        <summary><span data-ttu-id="8fcc6-171">初始化 <see cref="T:System.Messaging.Message" /> 类的新实例，使用指定的格式化程序将指定的对象序列化到消息体中。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-171">Initializes a new instance of the <see cref="T:System.Messaging.Message" /> class using the specified formatter to serialize the specified object into the body of the message.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-172">使用此重载创建 <xref:System.Messaging.Message> 类的新实例，该类包含 <xref:System.Messaging.Message.Body%2A> 由参数指定的， `body` 并使用任何有效的格式化程序来序列化正文。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-172">Use this overload to create a new instance of the <xref:System.Messaging.Message> class that contains the <xref:System.Messaging.Message.Body%2A> specified by the `body` parameter and that uses any valid formatter to serialize the body.</span></span> <span data-ttu-id="8fcc6-173">`body`参数是可序列化的任何对象，例如文本字符串、结构对象、类实例或嵌入的对象。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-173">The `body` parameter is any object that can be serialized, such as a text string, a structure object, a class instance, or an embedded object.</span></span> <span data-ttu-id="8fcc6-174">如果 <xref:System.Messaging.Message.Body%2A> <xref:System.Messaging.Message.Formatter%2A> 在调用之前随时更改或属性 <xref:System.Messaging.MessageQueue.Send%2A> ，将根据新的属性值对消息进行序列化。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-174">If you change the <xref:System.Messaging.Message.Body%2A> or <xref:System.Messaging.Message.Formatter%2A> property at any time before calling <xref:System.Messaging.MessageQueue.Send%2A>, the message will be serialized according to the new property value.</span></span>  
  
 <span data-ttu-id="8fcc6-175"><xref:System.Messaging.XmlMessageFormatter>是松散耦合的，因此在使用此格式时，不需要在发送方和接收方上具有相同的对象类型。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-175">The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format.</span></span> <span data-ttu-id="8fcc6-176">将 <xref:System.Messaging.ActiveXMessageFormatter> <xref:System.Messaging.BinaryMessageFormatter> 数据序列化为二进制表示形式。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-176">The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation.</span></span> <span data-ttu-id="8fcc6-177">在 <xref:System.Messaging.ActiveXMessageFormatter> 发送或接收 COM 组件时使用。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-177">The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.</span></span>  
  
 <span data-ttu-id="8fcc6-178">下表显示了实例的初始属性值 <xref:System.Messaging.Message> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-178">The following table shows initial property values for an instance of <xref:System.Messaging.Message>.</span></span>  
  
|<span data-ttu-id="8fcc6-179">属性</span><span class="sxs-lookup"><span data-stu-id="8fcc6-179">Property</span></span>|<span data-ttu-id="8fcc6-180">初始值</span><span class="sxs-lookup"><span data-stu-id="8fcc6-180">Initial value</span></span>|  
|--------------|-------------------|  
|<xref:System.Messaging.Message.AcknowledgeType%2A>|`AcknowledgeType.None`|  
|<xref:System.Messaging.Message.AdministrationQueue%2A>|`null`|  
|<xref:System.Messaging.Message.AppSpecific%2A>|<span data-ttu-id="8fcc6-181">0</span><span class="sxs-lookup"><span data-stu-id="8fcc6-181">0</span></span>|  
|<xref:System.Messaging.Message.AttachSenderId%2A>|`true`|  
|<xref:System.Messaging.Message.AuthenticationProviderName%2A>|<span data-ttu-id="8fcc6-182">Microsoft 基本加密提供程序版本1。0</span><span class="sxs-lookup"><span data-stu-id="8fcc6-182">Microsoft Base Cryptographic Provider version 1.0</span></span>|  
|<xref:System.Messaging.Message.AuthenticationProviderType%2A>|`CryptoProviderType.RSA_FULL`|  
|<xref:System.Messaging.Message.Body%2A>|<span data-ttu-id="8fcc6-183">`body` 参数。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-183">The `body` parameter.</span></span>|  
|<xref:System.Messaging.Message.BodyStream%2A>|`Stream.null`|  
|<xref:System.Messaging.Message.BodyType%2A>|<span data-ttu-id="8fcc6-184">0</span><span class="sxs-lookup"><span data-stu-id="8fcc6-184">0</span></span>|  
|<xref:System.Messaging.Message.ConnectorType%2A>|`Guid.Empty`|  
|<xref:System.Messaging.Message.CorrelationId%2A>|<span data-ttu-id="8fcc6-185">空字符串 ( "" ) </span><span class="sxs-lookup"><span data-stu-id="8fcc6-185">An empty string ("")</span></span>|  
|<xref:System.Messaging.Message.DestinationSymmetricKey%2A>|<span data-ttu-id="8fcc6-186">长度为零的字节数组</span><span class="sxs-lookup"><span data-stu-id="8fcc6-186">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.DigitalSignature%2A>|<span data-ttu-id="8fcc6-187">长度为零的字节数组</span><span class="sxs-lookup"><span data-stu-id="8fcc6-187">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.EncryptionAlgorithm%2A>|`EncryptionAlgorithm.RC2`|  
|<xref:System.Messaging.Message.Extension%2A>|<span data-ttu-id="8fcc6-188">长度为零的字节数组</span><span class="sxs-lookup"><span data-stu-id="8fcc6-188">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.Formatter%2A>|<span data-ttu-id="8fcc6-189">`formatter` 参数。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-189">The `formatter` parameter.</span></span>|  
|<xref:System.Messaging.Message.HashAlgorithm%2A>|`HashAlgorithm.MD5`|  
|<xref:System.Messaging.Message.Label%2A>|<span data-ttu-id="8fcc6-190">空字符串 ( "" ) </span><span class="sxs-lookup"><span data-stu-id="8fcc6-190">An empty string ("")</span></span>|  
|<xref:System.Messaging.Message.Priority%2A>|`MessagePriority.Normal`|  
|<xref:System.Messaging.Message.Recoverable%2A>|`false`|  
|<xref:System.Messaging.Message.ResponseQueue%2A>|`null`|  
|<xref:System.Messaging.Message.SenderCertificate%2A>|<span data-ttu-id="8fcc6-191">长度为零的字节数组</span><span class="sxs-lookup"><span data-stu-id="8fcc6-191">A zero-length array of bytes</span></span>|  
|<xref:System.Messaging.Message.TimeToBeReceived%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TimeToReachQueue%2A>|`Message.InfiniteTimeout`|  
|<xref:System.Messaging.Message.TransactionStatusQueue%2A>|`null`|  
|<xref:System.Messaging.Message.UseAuthentication%2A>|`false`|  
|<xref:System.Messaging.Message.UseDeadLetterQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseEncryption%2A>|`false`|  
|<xref:System.Messaging.Message.UseJournalQueue%2A>|`false`|  
|<xref:System.Messaging.Message.UseTracing%2A>|`false`|  
  
   
  
## Examples  
 [!code-cpp[MessagingBinaryFormatter#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessagingBinaryFormatter/CPP/message_binaryformatter.cpp#1)]
 [!code-csharp[MessagingBinaryFormatter#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessagingBinaryFormatter/CS/message_binaryformatter.cs#1)]
 [!code-vb[MessagingBinaryFormatter#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessagingBinaryFormatter/VB/message_binaryformatter.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.XmlMessageFormatter" />
        <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
        <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
        <altmember cref="T:System.Messaging.DefaultPropertiesToSend" />
        <altmember cref="T:System.Messaging.MessageQueue" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
        <altmember cref="M:System.Messaging.MessageQueue.Peek" />
        <altmember cref="M:System.Messaging.MessageQueue.Receive" />
      </Docs>
    </Member>
    <Member MemberName="AcknowledgeType">
      <MemberSignature Language="C#" Value="public System.Messaging.AcknowledgeTypes AcknowledgeType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.AcknowledgeTypes AcknowledgeType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AcknowledgeType" />
      <MemberSignature Language="VB.NET" Value="Public Property AcknowledgeType As AcknowledgeTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::AcknowledgeTypes AcknowledgeType { System::Messaging::AcknowledgeTypes get(); void set(System::Messaging::AcknowledgeTypes value); };" />
      <MemberSignature Language="F#" Value="member this.AcknowledgeType : System.Messaging.AcknowledgeTypes with get, set" Usage="System.Messaging.Message.AcknowledgeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgAcknowledgeType")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgAcknowledgeType")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.AcknowledgeTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-192">获取或设置返回给发送应用程序的确认消息的类型。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-192">Gets or sets the type of acknowledgment message to be returned to the sending application.</span></span></summary>
        <value><span data-ttu-id="8fcc6-193"><see cref="T:System.Messaging.AcknowledgeTypes" /> 值之一，该值表示系统在管理队列中传递的确认消息类型，以及在何种条件下将确认消息返回发送应用程序。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-193">One of the <see cref="T:System.Messaging.AcknowledgeTypes" /> values, which represent both the types of acknowledgment messages the system posts in the administration queue and the conditions under which acknowledgments are returned to the sending application.</span></span> <span data-ttu-id="8fcc6-194">默认值为 <see langword="None" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-194">The default is <see langword="None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-195"><xref:System.Messaging.Message.AcknowledgeType%2A>属性指定发送应用程序所请求的确认消息的类型。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-195">The <xref:System.Messaging.Message.AcknowledgeType%2A> property specifies the type of acknowledgment messages requested by the sending application.</span></span> <span data-ttu-id="8fcc6-196"><xref:System.Messaging.Message.AcknowledgeType%2A>在发送消息之前设置属性，以请求某些出现的通知（例如，到达其目标队列的消息、要检索的消息，或阻止消息到达目标队列或从目标队列中检索消息的超时）。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-196">Set the <xref:System.Messaging.Message.AcknowledgeType%2A> property before sending the message to request notification of certain occurrences - for example, a message reaching its destination queue, a message being retrieved, or a time-out preventing a message from reaching or being retrieved from the destination queue.</span></span>  
  
 <span data-ttu-id="8fcc6-197">消息队列通过将确认消息发送到 <xref:System.Messaging.Message.AdministrationQueue%2A> 原始消息指定的属性来返回通知。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-197">Message Queuing returns notification by sending acknowledgment messages to the <xref:System.Messaging.Message.AdministrationQueue%2A> property specified by the original message.</span></span> <span data-ttu-id="8fcc6-198">确认消息的 <xref:System.Messaging.Message.Acknowledgment%2A> 属性指示它所表示的确认类型。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-198">An acknowledgment message's <xref:System.Messaging.Message.Acknowledgment%2A> property indicates the type of acknowledgment that it represents.</span></span> <span data-ttu-id="8fcc6-199">例如，如果由于消息在间隔过期之前未到达目标而发送确认消息 <xref:System.Messaging.Message.TimeToReachQueue%2A> ， <xref:System.Messaging.Message.Acknowledgment%2A> 确认消息的属性将包含值 `ReachQueueTimeout` 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-199">For example, if an acknowledgment message was sent because a message did not reach the destination before the <xref:System.Messaging.Message.TimeToReachQueue%2A> interval expired, the <xref:System.Messaging.Message.Acknowledgment%2A> property of the acknowledgment message would contain the value `ReachQueueTimeout`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-200">下面的代码示例在队列中发送和接收包含订单的消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-200">The following code example sends and receives a message containing an order to and from a queue.</span></span> <span data-ttu-id="8fcc6-201">当原始消息到达或从队列中检索时，它专门请求肯定确认。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-201">It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.</span></span>  
  
 [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]
 [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]
 [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-202">消息经过筛选后忽略了 <see cref="P:System.Messaging.Message.AcknowledgeType" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-202">The message is filtered to ignore the <see cref="P:System.Messaging.Message.AcknowledgeType" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.AdministrationQueue" />
        <altmember cref="P:System.Messaging.Message.Acknowledgment" />
      </Docs>
    </Member>
    <Member MemberName="Acknowledgment">
      <MemberSignature Language="C#" Value="public System.Messaging.Acknowledgment Acknowledgment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.Acknowledgment Acknowledgment" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Acknowledgment" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Acknowledgment As Acknowledgment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::Acknowledgment Acknowledgment { System::Messaging::Acknowledgment get(); };" />
      <MemberSignature Language="F#" Value="member this.Acknowledgment : System.Messaging.Acknowledgment" Usage="System.Messaging.Message.Acknowledgment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgAcknowledgement")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgAcknowledgement")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.Acknowledgment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-203">获取该消息表示的确认分类。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-203">Gets the classification of acknowledgment that this message represents.</span></span></summary>
        <value><span data-ttu-id="8fcc6-204"><see cref="T:System.Messaging.Acknowledgment" /> 枚举值之一。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-204">One of the <see cref="T:System.Messaging.Acknowledgment" /> enumeration values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-205">接收来自管理队列的消息时，请阅读 <xref:System.Messaging.Message.Acknowledgment%2A> 属性以验证原始消息的状态。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-205">When you receive a message from an administration queue, read the <xref:System.Messaging.Message.Acknowledgment%2A> property to verify the status of the original message.</span></span>  
  
 <span data-ttu-id="8fcc6-206">将消息发送到其目标队列时，可以请求消息队列发布确认消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-206">When a message is sent to its destination queue, Message Queuing can be requested to post an acknowledgment message.</span></span> <span data-ttu-id="8fcc6-207">例如，此类消息可以指示消息是在指定的超时内到达，还是在指定的超时内检索到，或者指示在传递失败的情况下出现了什么问题。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-207">Such a message can indicate, for example, whether the message arrived and was retrieved within specified time-outs, or it can indicate what went wrong in the case of delivery failure.</span></span> <span data-ttu-id="8fcc6-208">目标队列返回确认消息，并将其发送到原始消息的属性中指定的管理队列 <xref:System.Messaging.Message.AdministrationQueue%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-208">The destination queue returns acknowledgment messages and posts them to the administration queue specified in the original message's <xref:System.Messaging.Message.AdministrationQueue%2A> property.</span></span> <span data-ttu-id="8fcc6-209"><xref:System.Messaging.Message.Id%2A>确认消息的属性标识确认消息，而不是原始消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-209">The <xref:System.Messaging.Message.Id%2A> property of an acknowledgment message identifies the acknowledgment message, not the original message.</span></span> <span data-ttu-id="8fcc6-210">可以在确认实例的属性中找到原始消息的标识符 <xref:System.Messaging.Message> <xref:System.Messaging.Message.CorrelationId%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-210">You can find the identifier of the original message in the acknowledgment <xref:System.Messaging.Message> instance's <xref:System.Messaging.Message.CorrelationId%2A> property.</span></span>  
  
 <span data-ttu-id="8fcc6-211">如果此 <xref:System.Messaging.Message> 实例表示确认消息，则该 <xref:System.Messaging.Message.Acknowledgment%2A> 属性指定确认类型。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-211">If this <xref:System.Messaging.Message> instance represents an acknowledgment message, the <xref:System.Messaging.Message.Acknowledgment%2A> property specifies the type of acknowledgment.</span></span> <span data-ttu-id="8fcc6-212">否则， <xref:System.Messaging.Message.Acknowledgment%2A> 属性包含值 `Normal` 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-212">Otherwise, the <xref:System.Messaging.Message.Acknowledgment%2A> property contains the value `Normal`.</span></span>  
  
 <span data-ttu-id="8fcc6-213">使用 <xref:System.Messaging.Message.AcknowledgeType%2A> 原始消息的属性来指定将在哪些情况下返回确认。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-213">Use the <xref:System.Messaging.Message.AcknowledgeType%2A> property of the original message to specify the circumstances under which acknowledgments will be returned.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-214">消息尚未发送。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-214">The message has not been sent.</span></span> <span data-ttu-id="8fcc6-215">该属性只能在从队列中检索的消息上读取。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-215">This property can only be read on messages retrieved from a queue.</span></span>  
  
<span data-ttu-id="8fcc6-216">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8fcc6-216">-or-</span></span> 
<span data-ttu-id="8fcc6-217">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.MessagePropertyFilter.Acknowledgment" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-217">The message queue is filtered to ignore the <see cref="P:System.Messaging.MessagePropertyFilter.Acknowledgment" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="P:System.Messaging.Message.AdministrationQueue" />
        <altmember cref="P:System.Messaging.Message.CorrelationId" />
        <altmember cref="M:System.Messaging.MessageQueue.PeekById(System.String)" />
        <altmember cref="M:System.Messaging.MessageQueue.PeekByCorrelationId(System.String)" />
        <altmember cref="M:System.Messaging.MessageQueue.ReceiveById(System.String)" />
        <altmember cref="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="AdministrationQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue AdministrationQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue AdministrationQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AdministrationQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property AdministrationQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ AdministrationQueue { System::Messaging::MessageQueue ^ get(); void set(System::Messaging::MessageQueue ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AdministrationQueue : System.Messaging.MessageQueue with get, set" Usage="System.Messaging.Message.AdministrationQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgAdministrationQueue")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgAdministrationQueue")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-218">获取或设置接收由消息队列生成的确认消息的队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-218">Gets or sets the queue that receives the acknowledgement messages that Message Queuing generates.</span></span></summary>
        <value><span data-ttu-id="8fcc6-219"><see cref="T:System.Messaging.MessageQueue" />，指定用于系统生成的确认消息的管理队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-219">The <see cref="T:System.Messaging.MessageQueue" /> that specifies the administration queue used for system-generated acknowledgment messages.</span></span> <span data-ttu-id="8fcc6-220">默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-220">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-221">属性中指定的队列 <xref:System.Messaging.Message.AdministrationQueue%2A> 可以是任何非事务性队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-221">The queue specified in the <xref:System.Messaging.Message.AdministrationQueue%2A> property can be any non-transactional queue.</span></span> <span data-ttu-id="8fcc6-222">发送到管理队列的确认消息可以指示原始消息是否到达了目标队列，以及是否被从该队列中移除。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-222">The acknowledgment messages sent to the administration queue can indicate whether the original message reached its destination queue and whether it was removed from the queue.</span></span>  
  
 <span data-ttu-id="8fcc6-223">当 <xref:System.Messaging.Message.AcknowledgeType%2A> 属性具有以外的任何值时 `None` ，发送应用程序必须指定要用作管理队列的队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-223">When the <xref:System.Messaging.Message.AcknowledgeType%2A> property has any value other than `None`, the sending application must specify the queue to use as the administration queue.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-224">下面的代码示例在队列中发送和接收包含订单的消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-224">The following code example sends and receives a message containing an order to and from a queue.</span></span> <span data-ttu-id="8fcc6-225">当原始消息到达或从队列中检索时，它专门请求肯定确认。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-225">It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.</span></span>  
  
 [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]
 [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]
 [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-226">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.AdministrationQueue" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-226">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.AdministrationQueue" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="P:System.Messaging.Message.Acknowledgment" />
      </Docs>
    </Member>
    <Member MemberName="AppSpecific">
      <MemberSignature Language="C#" Value="public int AppSpecific { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AppSpecific" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AppSpecific" />
      <MemberSignature Language="VB.NET" Value="Public Property AppSpecific As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int AppSpecific { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.AppSpecific : int with get, set" Usage="System.Messaging.Message.AppSpecific" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgAppSpecific")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgAppSpecific")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-227">获取或设置应用程序特定的附加信息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-227">Gets or sets additional, application-specific information.</span></span></summary>
        <value><span data-ttu-id="8fcc6-228">应用程序特定的信息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-228">Information that is specific to the application.</span></span> <span data-ttu-id="8fcc6-229">默认值为零。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-229">The default is zero.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-230"><xref:System.Messaging.Message.AppSpecific%2A>属性包含特定于应用程序的信息，您可以使用这些信息来组织不同类型的消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-230">The <xref:System.Messaging.Message.AppSpecific%2A> property contains application-specific information that you can use to organize different types of messages.</span></span> <span data-ttu-id="8fcc6-231">例如，可使用应用程序特定的索引。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-231">For example, you can use application-specific indexes.</span></span> <span data-ttu-id="8fcc6-232">应用程序负责解释 <xref:System.Messaging.Message.AppSpecific%2A> 属性信息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-232">It is the responsibility of the application to interpret <xref:System.Messaging.Message.AppSpecific%2A> property information.</span></span>  
  
 <span data-ttu-id="8fcc6-233">如果可能，应在消息正文中（而不是属性）中包含消息数据 <xref:System.Messaging.Message.AppSpecific%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-233">Whenever possible, you should include message data in the body of the message rather than the <xref:System.Messaging.Message.AppSpecific%2A> property.</span></span>  
  
 <span data-ttu-id="8fcc6-234">使用外部队列时，请使用 <xref:System.Messaging.Message.Extension%2A> 属性来指定消息队列中不存在的消息属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-234">When working with foreign queues, use the <xref:System.Messaging.Message.Extension%2A> property to specify message properties that do not exist in Message Queuing.</span></span> <span data-ttu-id="8fcc6-235">与属性一样 <xref:System.Messaging.Message.AppSpecific%2A> ，应用程序负责了解属性的内容 <xref:System.Messaging.Message.Extension%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-235">As with the <xref:System.Messaging.Message.AppSpecific%2A> property, it is the responsibility of the application to understand the content of the <xref:System.Messaging.Message.Extension%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-236">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.AppSpecific" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-236">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.AppSpecific" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.Extension" />
        <altmember cref="P:System.Messaging.Message.Body" />
      </Docs>
    </Member>
    <Member MemberName="ArrivedTime">
      <MemberSignature Language="C#" Value="public DateTime ArrivedTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime ArrivedTime" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.ArrivedTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArrivedTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime ArrivedTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.ArrivedTime : DateTime" Usage="System.Messaging.Message.ArrivedTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgArrivedTime")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgArrivedTime")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-237">获取消息到达目标队列的时间。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-237">Gets the time that the message arrived in the destination queue.</span></span></summary>
        <value><span data-ttu-id="8fcc6-238"><see cref="T:System.DateTime" />，表示消息到达目标队列的时间。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-238">A <see cref="T:System.DateTime" /> that represents the message's arrival time in the destination queue.</span></span> <span data-ttu-id="8fcc6-239">该时间被从 GMT 调整为目标队列驻留的计算机上的本地时间。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-239">The time is adjusted from GMT to the local time of the computer on which the destination queue resides.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-240">消息的 <xref:System.Messaging.Message.TimeToBeReceived%2A> 属性指示必须从目标队列接收消息的速度。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-240">The message's <xref:System.Messaging.Message.TimeToBeReceived%2A> property indicates how quickly the message must be received from the destination queue.</span></span> <span data-ttu-id="8fcc6-241"><xref:System.Messaging.Message.TimeToBeReceived%2A>属性计时器在发送消息时启动，而不是在消息到达队列时启动。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-241">The <xref:System.Messaging.Message.TimeToBeReceived%2A> property timer starts when the message is sent, not when the message arrives in the queue.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-242">下面的代码示例显示消息的属性的值 <xref:System.Messaging.Message.ArrivedTime%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-242">The following code example displays the value of a message's <xref:System.Messaging.Message.ArrivedTime%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-243">消息尚未发送。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-243">The message has not been sent.</span></span> <span data-ttu-id="8fcc6-244">该属性只能在从队列中检索的消息上读取。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-244">This property can only be read on messages retrieved from a queue.</span></span>  
  
<span data-ttu-id="8fcc6-245">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8fcc6-245">-or-</span></span> 
<span data-ttu-id="8fcc6-246">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.ArrivedTime" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-246">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.ArrivedTime" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.TimeToBeReceived" />
      </Docs>
    </Member>
    <Member MemberName="AttachSenderId">
      <MemberSignature Language="C#" Value="public bool AttachSenderId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AttachSenderId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AttachSenderId" />
      <MemberSignature Language="VB.NET" Value="Public Property AttachSenderId As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AttachSenderId { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AttachSenderId : bool with get, set" Usage="System.Messaging.Message.AttachSenderId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgAttachSenderId")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgAttachSenderId")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-247">获取或设置一个值，该值指示发送方 ID 是否应附在消息中。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-247">Gets or sets a value that indicates whether the sender ID should be attached to the message.</span></span></summary>
        <value><span data-ttu-id="8fcc6-248">如果 <see cref="P:System.Messaging.Message.SenderId" /> 应附在消息中，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-248"><see langword="true" /> if the <see cref="P:System.Messaging.Message.SenderId" /> should be attached to the message; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8fcc6-249">默认值为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-249">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-250"><xref:System.Messaging.Message.SenderId%2A>属性是一个字节数组，表示发送用户的标识符。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-250">The <xref:System.Messaging.Message.SenderId%2A> property is an array of bytes that represents the identifier of the sending user.</span></span> <span data-ttu-id="8fcc6-251">发件人 ID 由消息队列设置，接收队列管理器使用该 ID 来验证发送方是否有权访问队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-251">The sender ID is set by Message Queuing and is used by the receiving Queue Manager to verify whether the sender has access rights to a queue.</span></span>  
  
 <span data-ttu-id="8fcc6-252">缺少发送方 ID 是由发送应用程序指示的，消息队列不应验证消息的发送方，也不验证发送方对接收队列的访问权限。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-252">The absence of the sender ID is an indication by the sending application that Message Queuing should not validate the message's sender nor verify the sender's access rights to the receiving queue.</span></span> <span data-ttu-id="8fcc6-253"><xref:System.Messaging.Message.SenderId%2A>仅当消息到达目标队列时已通过身份验证，才可信任。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-253">The <xref:System.Messaging.Message.SenderId%2A> is trustworthy only if the message was authenticated when it reached the destination queue.</span></span> <span data-ttu-id="8fcc6-254">如果队列仅接受经过身份验证的消息并且 <xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A> 或属性为，则消息在到达目标队列时被拒绝 <xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A> `false` 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-254">The message is rejected when it reaches the destination queue if the queue accepts only authenticated messages and either the <xref:System.Messaging.DefaultPropertiesToSend.UseAuthentication%2A> or the <xref:System.Messaging.DefaultPropertiesToSend.AttachSenderId%2A> property is `false`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="8fcc6-255">如果消息被拒绝，则会将消息发送到死信队列 (如果) ，则会将其 <xref:System.Messaging.Message.UseDeadLetterQueue%2A> `true` 忽略。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-255">If a message is rejected, it is either sent to the dead-letter queue (if <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `true`), or it is ignored.</span></span> <span data-ttu-id="8fcc6-256">如果消息无法到达队列，可以请求确认。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-256">You can request acknowledgments when a message fails to reach a queue.</span></span> <span data-ttu-id="8fcc6-257">否则，如果 <xref:System.Messaging.Message.UseDeadLetterQueue%2A> 为，则 `false` 消息可能会丢失，并且不发出警告。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-257">Otherwise, when <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `false` the message might be lost without warning.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-258">下面的代码示例获取并设置消息的属性的值 <xref:System.Messaging.Message.AttachSenderId%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-258">The following code example gets and sets the value of a message's <xref:System.Messaging.Message.AttachSenderId%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-259">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.AttachSenderId" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-259">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.AttachSenderId" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.SenderId" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.Authenticated" />
        <altmember cref="P:System.Messaging.Message.HashAlgorithm" />
        <altmember cref="P:System.Messaging.Message.SenderCertificate" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
      </Docs>
    </Member>
    <Member MemberName="Authenticated">
      <MemberSignature Language="C#" Value="public bool Authenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Authenticated" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Authenticated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Authenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Authenticated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Authenticated : bool" Usage="System.Messaging.Message.Authenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgAuthenticated")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgAuthenticated")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-260">获取一个值，该值指示消息是否已验证。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-260">Gets a value that indicates whether the message was authenticated.</span></span></summary>
        <value><span data-ttu-id="8fcc6-261">如果在消息进入队列时请求了验证，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-261"><see langword="true" /> if authentication was requested for the message when it entered the queue; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-262"><xref:System.Messaging.Message.Authenticated%2A>仅当应用程序与消息进行交互并尝试确定是否请求身份验证时，该属性才使用此属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-262">The <xref:System.Messaging.Message.Authenticated%2A> property is used only by the application while it is interacting with the message and trying to determine if authentication was requested.</span></span> <span data-ttu-id="8fcc6-263">如果消息在队列中，则会对消息进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-263">If the message is in the queue, the message was authenticated.</span></span> <span data-ttu-id="8fcc6-264">相反，如果 <xref:System.Messaging.Message.Authenticated%2A> 属性为 `true` ，则接收队列管理器在收到消息时对消息进行了身份验证。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-264">Conversely, if the <xref:System.Messaging.Message.Authenticated%2A> property is `true`, the receiving Queue Manager authenticated the message when it received that message.</span></span>  
  
 <span data-ttu-id="8fcc6-265">通过查看消息的属性，不能确定消息是否失败。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-265">You cannot determine if a message failed authentication by looking at its properties.</span></span> <span data-ttu-id="8fcc6-266">消息队列在将身份验证传递到队列之前，会丢弃这些消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-266">Message Queuing discards messages that fail authentication before they are delivered to the queue.</span></span> <span data-ttu-id="8fcc6-267">但是，如果传递失败阻止消息到达队列，你可以请求发送确认消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-267">However, you can request that an acknowledgment message be sent if a delivery failure prevents the message from arriving in the queue.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-268">下面的代码示例显示消息的属性的值 <xref:System.Messaging.Message.Authenticated%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-268">The following code example displays the value of a message's <xref:System.Messaging.Message.Authenticated%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-269">消息尚未发送。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-269">The message has not been sent.</span></span> <span data-ttu-id="8fcc6-270">该属性只能在从队列中检索的消息上读取。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-270">This property can only be read on messages retrieved from a queue.</span></span>  
  
<span data-ttu-id="8fcc6-271">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8fcc6-271">-or-</span></span> 
<span data-ttu-id="8fcc6-272">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.Authenticated" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-272">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.Authenticated" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticationProviderName">
      <MemberSignature Language="C#" Value="public string AuthenticationProviderName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AuthenticationProviderName" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AuthenticationProviderName" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationProviderName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AuthenticationProviderName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AuthenticationProviderName : string with get, set" Usage="System.Messaging.Message.AuthenticationProviderName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgAuthenticationProviderName")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgAuthenticationProviderName")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-273">获取或设置用于生成消息数字签名的加密提供程序的名称。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-273">Gets or sets the name of the cryptographic provider used to generate the digital signature of the message.</span></span></summary>
        <value><span data-ttu-id="8fcc6-274">用于生成消息数字签名的加密提供程序的名称。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-274">The name of the cryptographic provider used to generate the digital signature of the message.</span></span> <span data-ttu-id="8fcc6-275">默认值为 Microsoft 基础加密提供程序版本 1.0.</span><span class="sxs-lookup"><span data-stu-id="8fcc6-275">The default is Microsoft Base Cryptographic Provider version 1.0.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-276">使用 <xref:System.Messaging.Message.AuthenticationProviderName%2A> 外部队列时，通常使用。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-276">You typically use the <xref:System.Messaging.Message.AuthenticationProviderName%2A> when working with foreign queues.</span></span> <span data-ttu-id="8fcc6-277">消息队列需要身份验证提供程序的名称和身份验证提供程序类型 (身份验证提供程序) 验证发送到外部队列的消息的数字签名以及从外部队列传递到消息队列的消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-277">Message Queuing requires the authentication provider name and authentication provider type of the cryptographic provider (authentication provider) to validate the digital signatures of both messages sent to a foreign queue and messages passed to Message Queuing from a foreign queue.</span></span>  
  
 <span data-ttu-id="8fcc6-278">发送消息时，请始终同时设置 <xref:System.Messaging.Message.AuthenticationProviderName%2A> 和 <xref:System.Messaging.Message.ConnectorType%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-278">When sending a message, always set the <xref:System.Messaging.Message.AuthenticationProviderName%2A> and <xref:System.Messaging.Message.ConnectorType%2A> properties together.</span></span> <span data-ttu-id="8fcc6-279">发送消息时，如果未同时设置连接器类型，则消息队列将忽略身份验证提供程序名称。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-279">When the message is sent, Message Queuing ignores the authentication provider name if the connector type is not also set.</span></span>  
  
 <span data-ttu-id="8fcc6-280"><xref:System.Messaging.Message.AuthenticationProviderName%2A>属性不能为 `null` ，但它可以是空字符串 ( "" ) 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-280">The <xref:System.Messaging.Message.AuthenticationProviderName%2A> property cannot be `null`, but it can be an empty string ("").</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-281">未能设置 <see cref="P:System.Messaging.Message.AuthenticationProviderName" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-281">The <see cref="P:System.Messaging.Message.AuthenticationProviderName" /> property could not be set.</span></span>  
  
<span data-ttu-id="8fcc6-282">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8fcc6-282">-or-</span></span> 
<span data-ttu-id="8fcc6-283">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.AuthenticationProviderName" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-283">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.AuthenticationProviderName" /> property.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8fcc6-284"><see cref="P:System.Messaging.Message.AuthenticationProviderName" /> 被设置成了 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-284">The <see cref="P:System.Messaging.Message.AuthenticationProviderName" /> was set to <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.Authenticated" />
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderType" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticationProviderType">
      <MemberSignature Language="C#" Value="public System.Messaging.CryptographicProviderType AuthenticationProviderType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.CryptographicProviderType AuthenticationProviderType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.AuthenticationProviderType" />
      <MemberSignature Language="VB.NET" Value="Public Property AuthenticationProviderType As CryptographicProviderType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::CryptographicProviderType AuthenticationProviderType { System::Messaging::CryptographicProviderType get(); void set(System::Messaging::CryptographicProviderType value); };" />
      <MemberSignature Language="F#" Value="member this.AuthenticationProviderType : System.Messaging.CryptographicProviderType with get, set" Usage="System.Messaging.Message.AuthenticationProviderType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgAuthenticationProviderType")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgAuthenticationProviderType")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.CryptographicProviderType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-285">获取或设置用于生成消息数字签名的加密提供程序类型。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-285">Gets or sets the type of cryptographic provider used to generate the digital signature of the message.</span></span></summary>
        <value><span data-ttu-id="8fcc6-286"><see cref="T:System.Messaging.CryptographicProviderType" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-286">One of the <see cref="T:System.Messaging.CryptographicProviderType" /> values.</span></span> <span data-ttu-id="8fcc6-287">默认值为 <see langword="RSA_FULL" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-287">The default is <see langword="RSA_FULL" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-288">使用 <xref:System.Messaging.Message.AuthenticationProviderType%2A> 外部队列时，通常使用属性来指定与消息关联的加密服务提供程序。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-288">You typically use the <xref:System.Messaging.Message.AuthenticationProviderType%2A> property when working with foreign queues to specify which cryptographic service provider is associated with a message.</span></span> <span data-ttu-id="8fcc6-289">消息队列需要身份验证提供程序的名称和身份验证提供程序类型 (身份验证提供程序) 验证发送到外部队列的消息的数字签名以及从外部队列传递到消息队列的消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-289">Message Queuing requires the authentication provider name and authentication provider type of the cryptographic provider (authentication provider) to validate the digital signatures of both messages sent to a foreign queue and messages passed to Message Queuing from a foreign queue.</span></span>  
  
 <span data-ttu-id="8fcc6-290">仅 `RsaFull` 适用于消息传送。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-290">Only `RsaFull` is intended to be used with messaging.</span></span>  
  
 <span data-ttu-id="8fcc6-291">发送消息时，请始终同时设置 <xref:System.Messaging.Message.AuthenticationProviderType%2A> 和 <xref:System.Messaging.Message.ConnectorType%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-291">When sending a message, always set the <xref:System.Messaging.Message.AuthenticationProviderType%2A> and <xref:System.Messaging.Message.ConnectorType%2A> properties together.</span></span> <span data-ttu-id="8fcc6-292">发送消息时，如果未同时设置连接器类型，则消息队列将忽略身份验证提供程序类型。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-292">When the message is sent, Message Queuing ignores the authentication provider type if the connector type is not also set.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-293">未能设置 <see cref="P:System.Messaging.Message.AuthenticationProviderType" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-293">The <see cref="P:System.Messaging.Message.AuthenticationProviderType" /> property could not be set.</span></span>  
  
<span data-ttu-id="8fcc6-294">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8fcc6-294">-or-</span></span> 
<span data-ttu-id="8fcc6-295">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.AuthenticationProviderType" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-295">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.AuthenticationProviderType" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.Authenticated" />
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderName" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="T:System.Messaging.CryptographicProviderType" />
      </Docs>
    </Member>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public object Body { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Body" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Body" />
      <MemberSignature Language="VB.NET" Value="Public Property Body As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Body { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Body : obj with get, set" Usage="System.Messaging.Message.Body" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-296">获取或设置消息的内容。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-296">Gets or sets the content of the message.</span></span></summary>
        <value><span data-ttu-id="8fcc6-297">指定消息内容的对象。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-297">An object that specifies the message contents.</span></span> <span data-ttu-id="8fcc6-298">该对象可以是字符串、日期、货币、数字、字节数组或任何托管对象。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-298">The object can be a string, a date, a currency, a number, an array of bytes, or any managed object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-299">消息的 <xref:System.Messaging.Message.Body%2A> 属性通常包含与消息关联的数据。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-299">The message's <xref:System.Messaging.Message.Body%2A> property usually contains the data associated with the message.</span></span> <span data-ttu-id="8fcc6-300">尽管你还可以在和属性中发送应用程序特定的数据 <xref:System.Messaging.Message.AppSpecific%2A> <xref:System.Messaging.Message.Extension%2A> ，但应尽可能在消息中包含消息数据 <xref:System.Messaging.Message.Body%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-300">Although you can also send application-specific data in the <xref:System.Messaging.Message.AppSpecific%2A> and <xref:System.Messaging.Message.Extension%2A> properties, you should include message data in the <xref:System.Messaging.Message.Body%2A> of the message whenever possible.</span></span> <span data-ttu-id="8fcc6-301">仅对 <xref:System.Messaging.Message.Body%2A> 属性内容进行序列化或加密。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-301">Only the <xref:System.Messaging.Message.Body%2A> property contents are serialized or encrypted.</span></span>  
  
 <span data-ttu-id="8fcc6-302"><xref:System.Messaging.Message.Body%2A>属性可包含任何大小不超过 4 MB 的对象。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-302">The <xref:System.Messaging.Message.Body%2A> property can contain any object whose size does not exceed 4 MB.</span></span> <span data-ttu-id="8fcc6-303">如果你使用将 <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> 不属于类型的任何对象发送 <xref:System.Messaging.Message> 到，则 <xref:System.Messaging.MessageQueue> 该对象将位于 <xref:System.Messaging.Message.Body%2A> <xref:System.Messaging.Message> 由或返回的实例的属性中 <xref:System.Messaging.MessageQueue.Peek%2A> <xref:System.Messaging.MessageQueue.Receive%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-303">If you use <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> to send any object that is not of type <xref:System.Messaging.Message> to the <xref:System.Messaging.MessageQueue>, that object will be located in the <xref:System.Messaging.Message.Body%2A> property of the <xref:System.Messaging.Message> instance returned by <xref:System.Messaging.MessageQueue.Peek%2A> or <xref:System.Messaging.MessageQueue.Receive%2A>.</span></span>  
  
 <span data-ttu-id="8fcc6-304">中的字符串自变量 `MessageQueue.Send("hello.")` 是此类泛型对象的一个示例。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-304">The string argument in `MessageQueue.Send("hello.")` is an example of such a generic object.</span></span>  
  
 <span data-ttu-id="8fcc6-305"><xref:System.Messaging.Message.BodyType%2A>属性指示消息正文中存储的信息的类型。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-305">The <xref:System.Messaging.Message.BodyType%2A> property indicates the type of information that is stored in the message body.</span></span> <span data-ttu-id="8fcc6-306">消息队列使用此信息来标识属性内容的类型 <xref:System.Messaging.Message.Body%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-306">Message Queuing uses this information to identify the type of the <xref:System.Messaging.Message.Body%2A> property contents.</span></span>  
  
 <span data-ttu-id="8fcc6-307"><xref:System.Messaging.Message.Body%2A>发送对象之前，请指定属性或 <xref:System.Messaging.Message.BodyStream%2A> 属性 <xref:System.Messaging.Message> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-307">Specify either the <xref:System.Messaging.Message.Body%2A> property or the <xref:System.Messaging.Message.BodyStream%2A> property before sending the <xref:System.Messaging.Message> object.</span></span> <span data-ttu-id="8fcc6-308"><xref:System.Messaging.Message.Body%2A>属性可以是任何可序列化对象，例如文本字符串、结构对象、类实例或嵌入的对象。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-308">The <xref:System.Messaging.Message.Body%2A> property can be any serializable object, such as a text string, structure object, class instance, or embedded object.</span></span>  
  
 <span data-ttu-id="8fcc6-309">除非将消息内容直接写入 <xref:System.Messaging.Message.BodyStream%2A> 属性，否则在 <xref:System.Messaging.Message.Formatter%2A> 发送消息之前，请设置属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-309">Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message.</span></span> <span data-ttu-id="8fcc6-310">在 <xref:System.Messaging.MessageQueue.Send%2A> 实例上调用方法时 <xref:System.Messaging.MessageQueue> ，使用属性中包含的格式化程序对正文进行序列化 <xref:System.Messaging.Message.Formatter%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-310">When the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance, the body is serialized using the formatter contained in the <xref:System.Messaging.Message.Formatter%2A> property.</span></span> <span data-ttu-id="8fcc6-311">如果在未指定属性值的情况下发送消息 <xref:System.Messaging.Message.Formatter%2A> ，则格式化程序默认为 <xref:System.Messaging.XmlMessageFormatter> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-311">If you send the message without specifying a value for the <xref:System.Messaging.Message.Formatter%2A> property, the formatter defaults to <xref:System.Messaging.XmlMessageFormatter>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8fcc6-312"><xref:System.Decimal.MaxValue> <xref:System.OverflowException> 如果 `Send` <xref:System.Messaging.MessageQueue> 调用类的方法并 <xref:System.Messaging.ActiveXMessageFormatter> 使用，则尝试将消息的正文设置为将导致。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-312">Attempting to set the body of a message to <xref:System.Decimal.MaxValue> will cause a <xref:System.OverflowException> when the `Send` method of the <xref:System.Messaging.MessageQueue> class is called and the <xref:System.Messaging.ActiveXMessageFormatter> is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-313">下面的代码示例将两个不同优先级的消息发送到队列，然后检索它们。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-313">The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.</span></span>  
  
 [!code-cpp[Message.DefaultPropertiesToSend#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CPP/message_defaultandpriority.cpp#1)]
 [!code-csharp[Message.DefaultPropertiesToSend#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CS/message_defaultandpriority.cs#1)]
 [!code-vb[Message.DefaultPropertiesToSend#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/VB/message_defaultandpriority.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-314"><see cref="P:System.Messaging.Message.Formatter" /> 属性为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-314">The <see cref="P:System.Messaging.Message.Formatter" /> property is <see langword="null" />.</span></span>  
  
<span data-ttu-id="8fcc6-315">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8fcc6-315">-or-</span></span> 
<span data-ttu-id="8fcc6-316">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.Body" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-316">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.Body" /> property.</span></span></exception>
        <altmember cref="T:System.Messaging.Message" />
        <altmember cref="P:System.Messaging.Message.BodyStream" />
        <altmember cref="P:System.Messaging.Message.BodyType" />
        <altmember cref="P:System.Messaging.Message.Formatter" />
        <altmember cref="P:System.Messaging.Message.AppSpecific" />
        <altmember cref="P:System.Messaging.Message.Extension" />
        <altmember cref="P:System.Messaging.Message.UseEncryption" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BodyStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream BodyStream { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream BodyStream" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.BodyStream" />
      <MemberSignature Language="VB.NET" Value="Public Property BodyStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ BodyStream { System::IO::Stream ^ get(); void set(System::IO::Stream ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BodyStream : System.IO.Stream with get, set" Usage="System.Messaging.Message.BodyStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.ComponentModel.Design.BinaryEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.ComponentModel.Design.BinaryEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgBodyStream")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgBodyStream")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.ComponentModel.Design.BinaryEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.ComponentModel.Design.BinaryEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Editor("System.ComponentModel.Design.BinaryEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Editor("System.ComponentModel.Design.BinaryEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-317">获取或设置消息正文中的信息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-317">Gets or sets the information in the body of the message.</span></span></summary>
        <value><span data-ttu-id="8fcc6-318"><see cref="T:System.IO.Stream" />，包含消息的 <see cref="P:System.Messaging.Message.Body" /> 中包括的已序列化信息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-318">A <see cref="T:System.IO.Stream" /> that contains the serialized information included in the <see cref="P:System.Messaging.Message.Body" /> of the message.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-319">消息的正文可以包含任何类型的信息（例如，字符串、日期、货币、数字、字节数组或任何托管对象）。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-319">The body of a message can consist of any type of information - for example, a string, a date, a currency, a number, an array of bytes, or any managed object.</span></span> <span data-ttu-id="8fcc6-320">此信息将序列化为 <xref:System.IO.Stream> 要传递到队列的。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-320">This information is serialized into a <xref:System.IO.Stream> to be passed to the queue.</span></span>  
  
 <span data-ttu-id="8fcc6-321"><xref:System.Messaging.Message.Body%2A>发送对象之前，请指定属性或 <xref:System.Messaging.Message.BodyStream%2A> 属性 <xref:System.Messaging.Message> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-321">Specify either the <xref:System.Messaging.Message.Body%2A> property or the <xref:System.Messaging.Message.BodyStream%2A> property before sending the <xref:System.Messaging.Message> object.</span></span> <span data-ttu-id="8fcc6-322">如果设置了 <xref:System.Messaging.Message.Body%2A> 属性，则会将内容序列化到 <xref:System.Messaging.Message.BodyStream%2A> 属性中。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-322">If you set the <xref:System.Messaging.Message.Body%2A> property, the contents are serialized into the <xref:System.Messaging.Message.BodyStream%2A> property.</span></span> <span data-ttu-id="8fcc6-323">不过，您可以选择 <xref:System.Messaging.Message.BodyStream%2A> 直接编写属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-323">However, you can choose to write the <xref:System.Messaging.Message.BodyStream%2A> property directly.</span></span> <span data-ttu-id="8fcc6-324">这很有用，例如，当你想要打开到文件的连接并将其内容流式传输为消息正文时，这很有用。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-324">This is useful, for example, when you want to open a connection to a file and stream its contents as the body of your message.</span></span>  
  
 <span data-ttu-id="8fcc6-325">除非将消息内容直接写入 <xref:System.Messaging.Message.BodyStream%2A> 属性，否则在 <xref:System.Messaging.Message.Formatter%2A> 发送消息之前，请设置属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-325">Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message.</span></span> <span data-ttu-id="8fcc6-326">在 <xref:System.Messaging.MessageQueue.Send%2A> 实例上调用方法时 <xref:System.Messaging.MessageQueue> ，使用属性中包含的格式化程序对正文进行序列化 <xref:System.Messaging.Message.Formatter%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-326">When the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance, the body is serialized using the formatter contained in the <xref:System.Messaging.Message.Formatter%2A> property.</span></span> <span data-ttu-id="8fcc6-327">如果在未指定属性值的情况下发送消息 <xref:System.Messaging.Message.Formatter%2A> ，则格式化程序默认为 <xref:System.Messaging.XmlMessageFormatter> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-327">If you send the message without specifying a value for the <xref:System.Messaging.Message.Formatter%2A> property, the formatter defaults to <xref:System.Messaging.XmlMessageFormatter>.</span></span>  
  
 <span data-ttu-id="8fcc6-328">如果将 <xref:System.Messaging.Message.UseEncryption%2A> 此消息正文的属性设置为，则在 `true` 发送消息时将加密该消息，而不是在设置属性时加密 <xref:System.Messaging.Message.Body%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-328">If you set the <xref:System.Messaging.Message.UseEncryption%2A> property to `true` for the body of this message, the message will be encrypted when it is sent, not when you set the <xref:System.Messaging.Message.Body%2A> property.</span></span> <span data-ttu-id="8fcc6-329">因此，永远不会 <xref:System.Messaging.Message.BodyStream%2A> 加密该属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-329">Therefore, the <xref:System.Messaging.Message.BodyStream%2A> property is never encrypted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-330">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.Body" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-330">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.Body" /> property.</span></span></exception>
        <altmember cref="T:System.Messaging.Message" />
        <altmember cref="P:System.Messaging.Message.Body" />
        <altmember cref="P:System.Messaging.Message.BodyType" />
        <altmember cref="P:System.Messaging.Message.Formatter" />
        <altmember cref="P:System.Messaging.Message.AppSpecific" />
        <altmember cref="P:System.Messaging.Message.Extension" />
        <altmember cref="P:System.Messaging.Message.UseEncryption" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="BodyType">
      <MemberSignature Language="C#" Value="public int BodyType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BodyType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.BodyType" />
      <MemberSignature Language="VB.NET" Value="Public Property BodyType As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int BodyType { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.BodyType : int with get, set" Usage="System.Messaging.Message.BodyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgBodyType")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgBodyType")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-331">获取或设置消息正文所包含数据的类型。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-331">Gets or sets the type of data that the message body contains.</span></span></summary>
        <value><span data-ttu-id="8fcc6-332">消息体的真实类型，如字符串、日期、货币或数字。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-332">The message body's true type, such as a string, a date, a currency, or a number.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-333">消息队列将正文内容识别为对象或序列化流。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-333">Message Queuing recognizes the body contents as an object or as a serialized stream.</span></span> <span data-ttu-id="8fcc6-334"><xref:System.Messaging.Message.BodyType%2A>属性指示消息的属性中的对象的类型 <xref:System.Messaging.Message.Body%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-334">The <xref:System.Messaging.Message.BodyType%2A> property indicates the type of the object within the <xref:System.Messaging.Message.Body%2A> property of the message.</span></span>  
  
 <span data-ttu-id="8fcc6-335">在 <xref:System.Messaging.XmlMessageFormatter> 本机类型与消息体中的对象之间执行绑定。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-335">The <xref:System.Messaging.XmlMessageFormatter> performs binding between native types and the object in a message body.</span></span> <span data-ttu-id="8fcc6-336">如果使用，则 <xref:System.Messaging.XmlMessageFormatter> 格式化程序将 <xref:System.Messaging.Message.BodyType%2A> 为您设置属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-336">If you use the <xref:System.Messaging.XmlMessageFormatter>, the formatter sets the <xref:System.Messaging.Message.BodyType%2A> property for you.</span></span>  
  
 <span data-ttu-id="8fcc6-337">其他格式化程序还可以提供绑定功能，如下面的 c # 代码中所示。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-337">Other formatters can provide binding functionality also, as shown in the following C# code.</span></span>  
  
```  
message.Formatter = new ActiveXMessageFormatter();  
object myObject message.Body;  
if (myObject is string) {  
}  
if (myObject is int) {  
}  
if (myObject is float) {  
}  
```  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-338">下面的代码示例显示消息的属性的值 <xref:System.Messaging.Message.BodyType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-338">The following code example displays the value of a message's <xref:System.Messaging.Message.BodyType%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-339">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.Body" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-339">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.Body" /> property.</span></span></exception>
        <altmember cref="T:System.Messaging.Message" />
        <altmember cref="P:System.Messaging.Message.Body" />
        <altmember cref="P:System.Messaging.Message.BodyStream" />
        <altmember cref="P:System.Messaging.Message.Formatter" />
        <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ConnectorType">
      <MemberSignature Language="C#" Value="public Guid ConnectorType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid ConnectorType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.ConnectorType" />
      <MemberSignature Language="VB.NET" Value="Public Property ConnectorType As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid ConnectorType { Guid get(); void set(Guid value); };" />
      <MemberSignature Language="F#" Value="member this.ConnectorType : Guid with get, set" Usage="System.Messaging.Message.ConnectorType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgConnectorType")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgConnectorType")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-340">获取或设置一个值，该值指示由发送应用程序设置通常由消息队列设置的某些消息属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-340">Gets or sets a value that indicates that some message properties typically set by Message Queuing were set by the sending application.</span></span></summary>
        <value><span data-ttu-id="8fcc6-341">由应用程序定义的 <see cref="T:System.Guid" />，与连接器应用程序或消息加密一起使用。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-341">A <see cref="T:System.Guid" /> defined by the application and used in conjunction with connector applications or message encryption.</span></span> <span data-ttu-id="8fcc6-342">此 <see cref="T:System.Guid" /> 允许接收应用程序解释由发送应用程序设置、但通常由消息队列设置的消息属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-342">This <see cref="T:System.Guid" /> allows a receiving application to interpret message properties that were set by the sending application but that are usually set by Message Queuing.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-343"><xref:System.Messaging.Message.ConnectorType%2A>每当应用程序设置通常由消息队列设置的消息属性时，消息队列都需要设置属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-343">Message Queuing requires the <xref:System.Messaging.Message.ConnectorType%2A> property be set whenever an application sets a message property that is usually set by Message Queuing.</span></span> <span data-ttu-id="8fcc6-344">在以下两种情况下，应用程序通常使用 <xref:System.Messaging.Message.ConnectorType%2A> ：</span><span class="sxs-lookup"><span data-stu-id="8fcc6-344">An application typically uses a <xref:System.Messaging.Message.ConnectorType%2A> in the following two cases:</span></span>  
  
-   <span data-ttu-id="8fcc6-345">每当连接器应用程序传递消息时。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-345">Whenever a connector application passes a message.</span></span> <span data-ttu-id="8fcc6-346"><xref:System.Messaging.Message.ConnectorType%2A>通知发送和接收应用程序如何解释消息的安全和确认属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-346">The <xref:System.Messaging.Message.ConnectorType%2A> tells the sending and receiving applications how to interpret the security and acknowledgment properties of the message.</span></span>  
  
-   <span data-ttu-id="8fcc6-347">只要发送应用程序（而不是消息队列），就会对消息进行加密。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-347">Whenever the sending application, rather than Message Queuing, encrypts a message.</span></span> <span data-ttu-id="8fcc6-348"><xref:System.Messaging.Message.ConnectorType%2A>指示消息队列使用 <xref:System.Messaging.Message.DestinationSymmetricKey%2A> 属性值对消息进行解密。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-348">The <xref:System.Messaging.Message.ConnectorType%2A> tells Message Queuing to use the <xref:System.Messaging.Message.DestinationSymmetricKey%2A> property value to decrypt the message.</span></span>  
  
 <span data-ttu-id="8fcc6-349"><xref:System.Messaging.Message.ConnectorType%2A>如果设置以下任何属性，则必须设置属性 (否则，在发送消息时，队列将忽略这些属性) ：</span><span class="sxs-lookup"><span data-stu-id="8fcc6-349">You must set the <xref:System.Messaging.Message.ConnectorType%2A> property if you set any of the following properties (otherwise, the queue ignores these properties when the message is sent):</span></span>  
  
-   <xref:System.Messaging.Message.AuthenticationProviderName%2A>  
  
-   <xref:System.Messaging.Message.AuthenticationProviderType%2A>  
  
-   <xref:System.Messaging.Message.DestinationSymmetricKey%2A>  
  
-   <xref:System.Messaging.Message.DigitalSignature%2A>  
  
-   <xref:System.Messaging.Message.MessageType%2A>  
  
-   <xref:System.Messaging.Message.SenderId%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-350">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.ConnectorType" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-350">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.ConnectorType" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderName" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderType" />
        <altmember cref="P:System.Messaging.Message.DestinationSymmetricKey" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
        <altmember cref="P:System.Messaging.Message.MessageType" />
        <altmember cref="P:System.Messaging.Message.SenderId" />
      </Docs>
    </Member>
    <Member MemberName="CorrelationId">
      <MemberSignature Language="C#" Value="public string CorrelationId { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CorrelationId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.CorrelationId" />
      <MemberSignature Language="VB.NET" Value="Public Property CorrelationId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CorrelationId { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CorrelationId : string with get, set" Usage="System.Messaging.Message.CorrelationId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgCorrelationId")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgCorrelationId")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-351">获取或设置确认、报告和响应消息用以引用原始消息的消息标识符。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-351">Gets or sets the message identifier used by acknowledgment, report, and response messages to reference the original message.</span></span></summary>
        <value><span data-ttu-id="8fcc6-352">原始消息的 <see cref="P:System.Messaging.Message.Id" /> 属性指定的消息标识符。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-352">The message identifier specified by the <see cref="P:System.Messaging.Message.Id" /> property of the original message.</span></span> <span data-ttu-id="8fcc6-353">消息队列在生成确认或报告消息时使用相关标识符；而应用程序在生成响应消息时使用相关标识符。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-353">The correlation identifier is used by Message Queuing when it generates an acknowledgment or report message, and by an application when it generates a response message.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-354">当消息队列生成确认或报告消息时，它使用相关标识符属性来指定原始消息的消息标识符。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-354">When Message Queuing generates an acknowledgment or report message, it uses the correlation identifier property to specify the message identifier of the original message.</span></span> <span data-ttu-id="8fcc6-355">这样，相关标识符就可将报告或确认消息与原始消息关联起来。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-355">In this manner, the correlation identifier ties the report or acknowledgment message to the original message.</span></span>  
  
 <span data-ttu-id="8fcc6-356">然后，发送应用程序可以通过使用 <xref:System.Messaging.Message.CorrelationId%2A> 属性标识原始消息的属性，将确认或报告与原始消息相匹配 <xref:System.Messaging.Message.Id%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-356">The sending application can then match the acknowledgment or report with the original message by using the <xref:System.Messaging.Message.CorrelationId%2A> property to identify the original message's <xref:System.Messaging.Message.Id%2A> property.</span></span>  
  
 <span data-ttu-id="8fcc6-357">连接器应用程序还必须将 <xref:System.Messaging.Message.CorrelationId%2A> 确认和报告消息的属性设置为原始消息的消息标识符。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-357">Connector applications also must set the <xref:System.Messaging.Message.CorrelationId%2A> property of the acknowledgment and report messages to the message identifier of the original message.</span></span>  
  
 <span data-ttu-id="8fcc6-358">当应用程序将响应消息发送到发送应用程序时，可以将 <xref:System.Messaging.Message.CorrelationId%2A> 响应消息的属性设置为原始消息的消息标识符。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-358">When your application sends a response message to the sending application, you can set the <xref:System.Messaging.Message.CorrelationId%2A> property of the response message to the message identifier of the original message.</span></span> <span data-ttu-id="8fcc6-359">然后，发送应用程序可以将响应消息与发送的消息相匹配。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-359">The sending application can then match your response message to the message that was sent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-360">下面的代码示例在队列中发送和接收包含订单的消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-360">The following code example sends and receives a message that contains an order to and from a queue.</span></span> <span data-ttu-id="8fcc6-361">当原始消息到达或从队列中检索时，它专门请求肯定确认。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-361">It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.</span></span>  
  
 [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]
 [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]
 [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-362">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.CorrelationId" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-362">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.CorrelationId" /> property.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8fcc6-363"><see cref="P:System.Messaging.Message.CorrelationId" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-363">The <see cref="P:System.Messaging.Message.CorrelationId" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.Id" />
        <altmember cref="P:System.Messaging.MessagePropertyFilter.Acknowledgment" />
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="P:System.Messaging.Message.ResponseQueue" />
        <altmember cref="M:System.Messaging.MessageQueue.PeekByCorrelationId(System.String)" />
        <altmember cref="M:System.Messaging.MessageQueue.ReceiveByCorrelationId(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DestinationQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue DestinationQueue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue DestinationQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.DestinationQueue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DestinationQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ DestinationQueue { System::Messaging::MessageQueue ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DestinationQueue : System.Messaging.MessageQueue" Usage="System.Messaging.Message.DestinationQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgDestinationQueue")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgDestinationQueue")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-364">获取消息的预期目标队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-364">Gets the intended destination queue for a message.</span></span></summary>
        <value><span data-ttu-id="8fcc6-365"><see cref="T:System.Messaging.MessageQueue" />，指定消息的预期目标队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-365">A <see cref="T:System.Messaging.MessageQueue" /> that specifies the intended destination queue for the message.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-366"><xref:System.Messaging.Message.DestinationQueue%2A>属性最常用于确定到达日志或死信队列的消息的原始目标。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-366">The <xref:System.Messaging.Message.DestinationQueue%2A> property is most commonly used to determine the original destination of a message that arrived in a journal or dead-letter queue.</span></span> <span data-ttu-id="8fcc6-367">通常不需要检查此属性，因为通常从其目标队列检索消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-367">Usually, you do not need to examine this property, because you typically retrieve the message from its destination queue.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-368">下面的代码示例显示消息的属性的值 <xref:System.Messaging.Message.DestinationQueue%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-368">The following code example displays the value of a message's <xref:System.Messaging.Message.DestinationQueue%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-369">消息尚未发送。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-369">The message has not been sent.</span></span> <span data-ttu-id="8fcc6-370">该属性只能在从队列中检索的消息上读取。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-370">This property can only be read on messages retrieved from a queue.</span></span>  
  
<span data-ttu-id="8fcc6-371">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8fcc6-371">-or-</span></span> 
<span data-ttu-id="8fcc6-372">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.DestinationQueue" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-372">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.DestinationQueue" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.UseDeadLetterQueue" />
        <altmember cref="P:System.Messaging.Message.UseJournalQueue" />
        <altmember cref="P:System.Messaging.Message.ResponseQueue" />
      </Docs>
    </Member>
    <Member MemberName="DestinationSymmetricKey">
      <MemberSignature Language="C#" Value="public byte[] DestinationSymmetricKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] DestinationSymmetricKey" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.DestinationSymmetricKey" />
      <MemberSignature Language="VB.NET" Value="Public Property DestinationSymmetricKey As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ DestinationSymmetricKey { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DestinationSymmetricKey : byte[] with get, set" Usage="System.Messaging.Message.DestinationSymmetricKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgDestinationSymmetricKey")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgDestinationSymmetricKey")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-373">获取或设置用于对应用程序加密的消息或发送到外部队列的消息进行加密的对称密钥。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-373">Gets or sets the symmetric key used to encrypt application-encrypted messages or messages sent to foreign queues.</span></span></summary>
        <value><span data-ttu-id="8fcc6-374">字节值的数组，指定用于加密消息的目标对称密钥。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-374">An array of byte values that specifies the destination symmetric key used to encrypt the message.</span></span> <span data-ttu-id="8fcc6-375">默认值为零长度的数组。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-375">The default is a zero-length array.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-376">两个方案要求使用 <xref:System.Messaging.Message.DestinationSymmetricKey%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-376">Two scenarios require you to use the <xref:System.Messaging.Message.DestinationSymmetricKey%2A> property.</span></span> <span data-ttu-id="8fcc6-377">第一种情况是，应用程序（而不是消息队列）会对消息进行加密。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-377">The first is when your application, rather than Message Queuing, encrypts a message.</span></span> <span data-ttu-id="8fcc6-378">第二种情况是将加密消息发送到消息队列之外的队列系统。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-378">The second is when you send an encrypted message to a queuing system other than Message Queuing.</span></span>  
  
 <span data-ttu-id="8fcc6-379">在设置此属性之前，必须用接收队列管理器的公钥来加密对称密钥。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-379">Before you set this property, you must encrypt the symmetric key with the public key of the receiving queue manager.</span></span> <span data-ttu-id="8fcc6-380">发送应用程序加密的消息时，接收队列管理器使用对称密钥对消息进行解密，然后将消息发送到目标队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-380">When you send an application-encrypted message, the receiving queue manager uses the symmetric key to decrypt the message before sending it to its destination queue.</span></span>  
  
 <span data-ttu-id="8fcc6-381">如果将消息发送到外部队列，则相应的连接器应用程序将首先收到该消息，该应用程序会将加密的消息连同附加的对称密钥转发给接收应用程序。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-381">If you send a message to a foreign queue, the message is first received by the appropriate connector application, which forwards the encrypted message with the attached symmetric key to the receiving application.</span></span> <span data-ttu-id="8fcc6-382">然后，接收应用程序负责使用对称密钥对消息进行解密。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-382">It is then the responsibility of the receiving application to decrypt the message using the symmetric key.</span></span>  
  
 <span data-ttu-id="8fcc6-383">设置 <xref:System.Messaging.Message.DestinationSymmetricKey%2A> 属性时，还必须设置 <xref:System.Messaging.Message.ConnectorType%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-383">When you set the <xref:System.Messaging.Message.DestinationSymmetricKey%2A> property, you must also set the <xref:System.Messaging.Message.ConnectorType%2A> property.</span></span> <span data-ttu-id="8fcc6-384">发送消息时， <xref:System.Messaging.Message.DestinationSymmetricKey%2A> 如果还未设置该属性，则消息队列将忽略该属性 <xref:System.Messaging.Message.ConnectorType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-384">When the message is sent, Message Queuing ignores the <xref:System.Messaging.Message.DestinationSymmetricKey%2A> property if the <xref:System.Messaging.Message.ConnectorType%2A> property is not also set.</span></span>  
  
 <span data-ttu-id="8fcc6-385"><xref:System.Messaging.Message.DestinationSymmetricKey%2A>属性的最大数组大小为256。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-385">The <xref:System.Messaging.Message.DestinationSymmetricKey%2A> property has a maximum array size of 256.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-386">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.DestinationSymmetricKey" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-386">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.DestinationSymmetricKey" /> property.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8fcc6-387"><see cref="P:System.Messaging.Message.DestinationSymmetricKey" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-387">The <see cref="P:System.Messaging.Message.DestinationSymmetricKey" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.UseEncryption" />
      </Docs>
    </Member>
    <Member MemberName="DigitalSignature">
      <MemberSignature Language="C#" Value="public byte[] DigitalSignature { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] DigitalSignature" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.DigitalSignature" />
      <MemberSignature Language="VB.NET" Value="Public Property DigitalSignature As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ DigitalSignature { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DigitalSignature : byte[] with get, set" Usage="System.Messaging.Message.DigitalSignature" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgDigitalSignature")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgDigitalSignature")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-388">获取或设置消息队列用于验证消息的数字签名。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-388">Gets or sets the digital signature that Message Queuing uses to authenticate the message.</span></span></summary>
        <value><span data-ttu-id="8fcc6-389">字节值的数组，指定用于对消息进行身份验证的消息队列 1.0 数字签名。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-389">An array of byte values that specifies the Message Queuing 1.0 digital signature used to authenticate the message.</span></span> <span data-ttu-id="8fcc6-390">默认值为零长度的数组。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-390">The default is a zero-length array.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-391">消息队列在对消息队列版本1.0 发送的消息进行身份验证时使用数字签名。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-391">Message Queuing uses the digital signature when authenticating messages that were sent by Message Queuing version 1.0.</span></span> <span data-ttu-id="8fcc6-392">在大多数情况下，消息队列在 <xref:System.Messaging.Message.DigitalSignature%2A> 发送应用程序请求身份验证时生成并设置属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-392">In most cases, Message Queuing generates and sets the <xref:System.Messaging.Message.DigitalSignature%2A> property when the sending application requests authentication.</span></span> <span data-ttu-id="8fcc6-393">接收应用程序使用此属性来检索附加到消息的数字签名。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-393">The receiving application uses this property to retrieve the digital signature attached to the message.</span></span>  
  
 <span data-ttu-id="8fcc6-394">在 <xref:System.Messaging.Message.DigitalSignature%2A> 运行消息队列版本2.0 时，只能使用属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-394">You can only use the <xref:System.Messaging.Message.DigitalSignature%2A> property when running Message Queuing version 2.0.</span></span> <span data-ttu-id="8fcc6-395">在请求身份验证时，发送应用程序必须指定消息队列版本1.0 签名。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-395">The sending application must specify Message Queuing version 1.0 signatures when requesting authentication.</span></span> <span data-ttu-id="8fcc6-396">如果发送应用程序发送消息队列版本2.0 签名，则此属性包含四个字节（每个字节都包含零）的缓冲区。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-396">If the sending application sends a Message Queuing version 2.0 signature, this property contains a buffer of four bytes, each containing zero.</span></span>  
  
 <span data-ttu-id="8fcc6-397"><xref:System.Messaging.Message.DigitalSignature%2A> <xref:System.Messaging.Message.SenderCertificate%2A> 发送消息时，连接器应用程序也使用属性和属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-397">The <xref:System.Messaging.Message.DigitalSignature%2A> property, together with the <xref:System.Messaging.Message.SenderCertificate%2A> property, is also used by connector applications when a message is sent.</span></span> <span data-ttu-id="8fcc6-398">在此方案中，连接器应用程序（而不是消息队列）生成数字签名，它基于发送消息的用户的证书。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-398">In this scenario, the connector application - rather than Message Queuing - generates the digital signature, which it bases on the certificate of the user sending the message.</span></span>  
  
 <span data-ttu-id="8fcc6-399"><xref:System.Messaging.Message.DigitalSignature%2A>属性的最大数组大小为256。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-399">The <xref:System.Messaging.Message.DigitalSignature%2A> property has a maximum array size of 256.</span></span>  
  
 <span data-ttu-id="8fcc6-400">设置 <xref:System.Messaging.Message.DigitalSignature%2A> 属性时，还必须设置 <xref:System.Messaging.Message.ConnectorType%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-400">When you set the <xref:System.Messaging.Message.DigitalSignature%2A> property, you must also set the <xref:System.Messaging.Message.ConnectorType%2A> property.</span></span> <span data-ttu-id="8fcc6-401">发送消息时， <xref:System.Messaging.Message.DigitalSignature%2A> 如果还未设置该属性，则消息队列将忽略该属性 <xref:System.Messaging.Message.ConnectorType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-401">When a message is sent, Message Queuing ignores the <xref:System.Messaging.Message.DigitalSignature%2A> property if the <xref:System.Messaging.Message.ConnectorType%2A> property is not also set.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-402">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.DigitalSignature" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-402">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.DigitalSignature" /> property.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8fcc6-403"><see cref="P:System.Messaging.Message.DigitalSignature" /> 属性为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-403">The <see cref="P:System.Messaging.Message.DigitalSignature" /> property is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.SenderCertificate" />
        <altmember cref="P:System.Messaging.Message.HashAlgorithm" />
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
      </Docs>
    </Member>
    <Member MemberName="EncryptionAlgorithm">
      <MemberSignature Language="C#" Value="public System.Messaging.EncryptionAlgorithm EncryptionAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.EncryptionAlgorithm EncryptionAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.EncryptionAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Property EncryptionAlgorithm As EncryptionAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::EncryptionAlgorithm EncryptionAlgorithm { System::Messaging::EncryptionAlgorithm get(); void set(System::Messaging::EncryptionAlgorithm value); };" />
      <MemberSignature Language="F#" Value="member this.EncryptionAlgorithm : System.Messaging.EncryptionAlgorithm with get, set" Usage="System.Messaging.Message.EncryptionAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgEncryptionAlgorithm")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgEncryptionAlgorithm")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.EncryptionAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-404">获取或设置用于加密私有消息体的加密算法。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-404">Gets or sets the encryption algorithm used to encrypt the body of a private message.</span></span></summary>
        <value><span data-ttu-id="8fcc6-405"><see cref="T:System.Messaging.EncryptionAlgorithm" /> 枚举值之一。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-405">One of the <see cref="T:System.Messaging.EncryptionAlgorithm" /> enumeration values.</span></span> <span data-ttu-id="8fcc6-406">默认值为 <see langword="RC2" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-406">The default is <see langword="RC2" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-407">如果 (加密的) 消息是私有的，则会在收到消息之前对其进行加密。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-407">If a message is private (encrypted), it is encrypted before it is sent and decrypted upon receipt.</span></span> <span data-ttu-id="8fcc6-408"><xref:System.Messaging.Message.EncryptionAlgorithm%2A>属性指定用于对专用消息的消息正文进行加密的算法。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-408">The <xref:System.Messaging.Message.EncryptionAlgorithm%2A> property specifies the algorithm used to encrypt the message body of a private message.</span></span>  
  
 <span data-ttu-id="8fcc6-409">队列可能要求对传入消息进行加密。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-409">A queue can require that incoming messages be encrypted.</span></span> <span data-ttu-id="8fcc6-410">如果应用程序将非加密 (非私有) 消息发送到只接受专用消息的队列，或将专用消息发送到只接受非私有消息的队列，则队列将拒绝该消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-410">If an application sends a non-encrypted (non-private) message to a queue that accepts only private messages, or if it sends a private message to a queue that accepts only non-private messages, the queue rejects the message.</span></span> <span data-ttu-id="8fcc6-411">发送应用程序可以请求在这种情况下返回否定确认消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-411">The sending application can request that a negative acknowledgment message be returned in such a case.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-412">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.EncryptionAlgorithm" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-412">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.EncryptionAlgorithm" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.UseEncryption" />
        <altmember cref="P:System.Messaging.MessageQueue.EncryptionRequired" />
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="T:System.Messaging.EncryptionRequired" />
      </Docs>
    </Member>
    <Member MemberName="Extension">
      <MemberSignature Language="C#" Value="public byte[] Extension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Extension" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Extension" />
      <MemberSignature Language="VB.NET" Value="Public Property Extension As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ Extension { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Extension : byte[] with get, set" Usage="System.Messaging.Message.Extension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgExtension")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgExtension")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-413">获取或设置与消息关联的、应用程序定义的附加信息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-413">Gets or sets additional, application-defined information associated with the message.</span></span></summary>
        <value><span data-ttu-id="8fcc6-414">字节值的数组，提供与消息关联的、应用程序定义的信息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-414">An array of byte values that provides application-defined information associated with the message.</span></span> <span data-ttu-id="8fcc6-415">默认值为零长度的数组。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-415">The default is a zero-length array.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-416"><xref:System.Messaging.Message.Extension%2A>属性提供与消息关联的应用程序定义的信息（如大型二进制对象）。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-416">The <xref:System.Messaging.Message.Extension%2A> property provides for application-defined information, like a large binary object, that is associated with the message.</span></span> <span data-ttu-id="8fcc6-417">接收应用程序负责解释属性的内容 <xref:System.Messaging.Message.Extension%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-417">It is the responsibility of the receiving application to interpret the contents of the <xref:System.Messaging.Message.Extension%2A> property.</span></span>  
  
 <span data-ttu-id="8fcc6-418">如果可能，应在 <xref:System.Messaging.Message.Body%2A> 消息的属性中（而不是属性）中包含消息数据 <xref:System.Messaging.Message.Extension%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-418">Where possible, you should include message data in the <xref:System.Messaging.Message.Body%2A> property of the message rather than the <xref:System.Messaging.Message.Extension%2A> property.</span></span>  
  
 <span data-ttu-id="8fcc6-419">使用外部队列时，请使用 <xref:System.Messaging.Message.Extension%2A> 属性来指定消息队列中不存在的消息属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-419">When working with foreign queues, use the <xref:System.Messaging.Message.Extension%2A> property to specify message properties that do not exist in Message Queuing.</span></span>  
  
 <span data-ttu-id="8fcc6-420">在非 Microsoft 消息队列的队列系统中存在一个外部队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-420">A foreign queue exists in a queuing system other than Microsoft Message Queuing.</span></span> <span data-ttu-id="8fcc6-421">消息队列通过连接器应用程序与此类队列通信。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-421">Message Queuing communicates with such queues through a connector application.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-422">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.Extension" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-422">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.Extension" /> property.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8fcc6-423"><see cref="P:System.Messaging.Message.Extension" /> 属性为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-423">The <see cref="P:System.Messaging.Message.Extension" /> property is <see langword="null" />.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.AppSpecific" />
        <altmember cref="P:System.Messaging.Message.Body" />
      </Docs>
    </Member>
    <Member MemberName="Formatter">
      <MemberSignature Language="C#" Value="public System.Messaging.IMessageFormatter Formatter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.IMessageFormatter Formatter" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Formatter" />
      <MemberSignature Language="VB.NET" Value="Public Property Formatter As IMessageFormatter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::IMessageFormatter ^ Formatter { System::Messaging::IMessageFormatter ^ get(); void set(System::Messaging::IMessageFormatter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Formatter : System.Messaging.IMessageFormatter with get, set" Usage="System.Messaging.Message.Formatter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.IMessageFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-424">获取或设置用于将对象序列化到消息体中，或从消息体中反序列化对象的格式化程序。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-424">Gets or sets the formatter used to serialize an object into or deserialize an object from the message body.</span></span></summary>
        <value><span data-ttu-id="8fcc6-425">该 <see cref="T:System.Messaging.IMessageFormatter" /> 产生要写入消息体或要从消息体中读取的流。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-425">The <see cref="T:System.Messaging.IMessageFormatter" /> that produces a stream to be written to or read from the message body.</span></span> <span data-ttu-id="8fcc6-426">默认值为 <see cref="T:System.Messaging.XmlMessageFormatter" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-426">The default is <see cref="T:System.Messaging.XmlMessageFormatter" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-427"><xref:System.Messaging.Message.Formatter%2A>在读取和写入消息时使用属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-427">Use the <xref:System.Messaging.Message.Formatter%2A> property when reading and writing a message.</span></span> <span data-ttu-id="8fcc6-428">将消息发送到队列时，格式化程序会将属性序列化为 <xref:System.Messaging.Message.Body%2A> 可发送到消息队列的流。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-428">When a message is sent to the queue, the formatter serializes the <xref:System.Messaging.Message.Body%2A> property into a stream that can be sent to the message queue.</span></span> <span data-ttu-id="8fcc6-429">从队列中进行读取时，格式化程序将消息数据反序列化为 <xref:System.Messaging.Message.Body%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-429">When reading from a queue, the formatter deserializes the message data into the <xref:System.Messaging.Message.Body%2A> property.</span></span>  
  
 <span data-ttu-id="8fcc6-430">除非将消息内容直接写入 <xref:System.Messaging.Message.BodyStream%2A> 属性，否则在 <xref:System.Messaging.Message.Formatter%2A> 发送消息之前，请设置属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-430">Unless you write the contents of the message directly to the <xref:System.Messaging.Message.BodyStream%2A> property, set the <xref:System.Messaging.Message.Formatter%2A> property before you send the message.</span></span> <span data-ttu-id="8fcc6-431">在 <xref:System.Messaging.MessageQueue.Send%2A> 实例上调用方法时 <xref:System.Messaging.MessageQueue> ，使用属性中包含的格式化程序对正文进行序列化 <xref:System.Messaging.Message.Formatter%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-431">When the <xref:System.Messaging.MessageQueue.Send%2A> method is called on the <xref:System.Messaging.MessageQueue> instance, the body is serialized using the formatter contained in the <xref:System.Messaging.Message.Formatter%2A> property.</span></span> <span data-ttu-id="8fcc6-432">如果在未指定属性值的情况下发送消息 <xref:System.Messaging.Message.Formatter%2A> ，则格式化程序默认为 <xref:System.Messaging.XmlMessageFormatter> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-432">If you send the message without specifying a value for the <xref:System.Messaging.Message.Formatter%2A> property, the formatter defaults to <xref:System.Messaging.XmlMessageFormatter>.</span></span>  
  
 <span data-ttu-id="8fcc6-433"><xref:System.Messaging.XmlMessageFormatter>是松散耦合的，因此在使用此格式时，不需要在发送方和接收方上具有相同的对象类型。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-433">The <xref:System.Messaging.XmlMessageFormatter> is loosely coupled, so it is not necessary to have the same object type on the sender and receiver when using this format.</span></span> <span data-ttu-id="8fcc6-434">将 <xref:System.Messaging.ActiveXMessageFormatter> <xref:System.Messaging.BinaryMessageFormatter> 数据序列化为二进制表示形式。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-434">The <xref:System.Messaging.ActiveXMessageFormatter> and <xref:System.Messaging.BinaryMessageFormatter> serialize the data into binary representation.</span></span> <span data-ttu-id="8fcc6-435">在 <xref:System.Messaging.ActiveXMessageFormatter> 发送或接收 COM 组件时使用。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-435">The <xref:System.Messaging.ActiveXMessageFormatter> is used when sending or receiving COM components.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-436">下面的代码示例演示如何使用格式化消息正文 <xref:System.Messaging.BinaryMessageFormatter> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-436">The following code example demonstrates formatting a message body using <xref:System.Messaging.BinaryMessageFormatter>.</span></span>  
  
 [!code-cpp[MessagingBinaryFormatter#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessagingBinaryFormatter/CPP/message_binaryformatter.cpp#1)]
 [!code-csharp[MessagingBinaryFormatter#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessagingBinaryFormatter/CS/message_binaryformatter.cs#1)]
 [!code-vb[MessagingBinaryFormatter#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessagingBinaryFormatter/VB/message_binaryformatter.vb#1)]  
  
 <span data-ttu-id="8fcc6-437">下面的代码示例演示如何使用格式化消息正文 <xref:System.Messaging.XmlMessageFormatter> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-437">The following code example demonstrates formatting a message body using <xref:System.Messaging.XmlMessageFormatter>.</span></span>  
  
 [!code-cpp[Message.Body#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Body/CPP/message_sendreceive.cpp#1)]
 [!code-csharp[Message.Body#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Body/CS/message_sendreceive.cs#1)]
 [!code-vb[Message.Body#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Body/VB/message_sendreceive.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8fcc6-438"><see cref="P:System.Messaging.Message.Formatter" /> 属性为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-438">The <see cref="P:System.Messaging.Message.Formatter" /> property is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Messaging.IMessageFormatter.CanRead(System.Messaging.Message)" />
        <altmember cref="T:System.Messaging.XmlMessageFormatter" />
        <altmember cref="T:System.Messaging.ActiveXMessageFormatter" />
        <altmember cref="T:System.Messaging.BinaryMessageFormatter" />
        <altmember cref="P:System.Messaging.MessageQueue.Formatter" />
      </Docs>
    </Member>
    <Member MemberName="HashAlgorithm">
      <MemberSignature Language="C#" Value="public System.Messaging.HashAlgorithm HashAlgorithm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.HashAlgorithm HashAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.HashAlgorithm" />
      <MemberSignature Language="VB.NET" Value="Public Property HashAlgorithm As HashAlgorithm" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::HashAlgorithm HashAlgorithm { System::Messaging::HashAlgorithm get(); void set(System::Messaging::HashAlgorithm value); };" />
      <MemberSignature Language="F#" Value="member this.HashAlgorithm : System.Messaging.HashAlgorithm with get, set" Usage="System.Messaging.Message.HashAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgHashAlgorithm")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgHashAlgorithm")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.HashAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-439">获取或设置消息队列在验证消息或为消息创建数字签名时使用的哈希算法。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-439">Gets or sets the hashing algorithm that Message Queuing uses when authenticating a message or creating a digital signature for a message.</span></span></summary>
        <value><span data-ttu-id="8fcc6-440"><see cref="T:System.Messaging.HashAlgorithm" /> 枚举值之一。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-440">One of the <see cref="T:System.Messaging.HashAlgorithm" /> enumeration values.</span></span> <span data-ttu-id="8fcc6-441">对于 Windows XP，默认值为 <see langword="SHA" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-441">For Windows XP, the default is <see langword="SHA" />.</span></span> <span data-ttu-id="8fcc6-442">否则默认值为 <see langword="MD5" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-442">Otherwise, the default is <see langword="MD5" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-443">在源计算机上，消息队列在为消息创建数字签名时使用哈希算法。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-443">On the source computer, Message Queuing uses the hashing algorithm when creating a digital signature for a message.</span></span> <span data-ttu-id="8fcc6-444">然后，目标队列管理器使用相同的哈希算法在收到消息时对消息进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-444">The target Queue Manager then uses the same hashing algorithm to authenticate the message when it is received.</span></span>  

 <span data-ttu-id="8fcc6-445">由于 MD5 和 SHA1 出现冲突，Microsoft 建议 SHA256。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-445">Due to collision problems with MD5 and SHA1, Microsoft recommends SHA256.</span></span> 
 
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-446">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.HashAlgorithm" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-446">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.HashAlgorithm" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.AttachSenderId" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
        <altmember cref="T:System.Messaging.HashAlgorithm" />
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.Messaging.Message.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgId")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgId")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-447">获取消息的标识符。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-447">Gets the message's identifier.</span></span></summary>
        <value><span data-ttu-id="8fcc6-448">消息的唯一标识符，由消息队列生成。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-448">The message's unique identifier, which is generated by Message Queuing.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-449">发送消息时，消息队列会生成消息标识符。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-449">Message Queuing generates a message identifier when the message is sent.</span></span> <span data-ttu-id="8fcc6-450">标识符由20个字节组成，其中包含两个项： <xref:System.Guid> 发送计算机的计算机和计算机上消息的唯一标识符。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-450">The identifier is composed of 20 bytes and includes two items: the machine <xref:System.Guid> of the sending computer and a unique identifier for the message on the computer.</span></span> <span data-ttu-id="8fcc6-451">这两项组合在一起，就产生了一个在网络上唯一的消息标识符。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-451">The combination of the two items produces a message identifier that is unique on the network.</span></span>  
  
 <span data-ttu-id="8fcc6-452">消息队列为所有消息（包括确认消息和报告消息）生成消息标识符。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-452">Message Queuing generates message identifiers for all messages - including acknowledgment and report messages.</span></span> <span data-ttu-id="8fcc6-453">确认消息通常由消息队列发送，以反映原始消息的到达或失败。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-453">An acknowledgment message is generally sent by Message Queuing in reaction to the arrival or failure of an original, sent message.</span></span> <span data-ttu-id="8fcc6-454">可以 <xref:System.Messaging.Message.Id%2A> 在确认消息的属性中找到原始消息的属性值 <xref:System.Messaging.Message.CorrelationId%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-454">You can find the <xref:System.Messaging.Message.Id%2A> property value of the original message in the <xref:System.Messaging.Message.CorrelationId%2A> property of an acknowledgment message.</span></span>  
  
 <span data-ttu-id="8fcc6-455">将 <xref:System.Messaging.Message.Id%2A> 响应消息发送到响应队列时，还可以使用属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-455">You can also use the <xref:System.Messaging.Message.Id%2A> property when sending a response message to a response queue.</span></span> <span data-ttu-id="8fcc6-456">若要在响应消息中包含原始消息的标识符，请将 <xref:System.Messaging.Message.CorrelationId%2A> 响应消息的属性设置为 <xref:System.Messaging.Message.Id%2A> 原始消息的属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-456">To include the identifier of the original message in a response message, set the <xref:System.Messaging.Message.CorrelationId%2A> property of the response message to the <xref:System.Messaging.Message.Id%2A> property of the original message.</span></span> <span data-ttu-id="8fcc6-457">然后，读取响应消息的应用程序可以使用响应消息的相关标识符来标识原始消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-457">The application reading the response message can then use the correlation identifier of the response message to identify the original message.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-458">下面的代码示例在队列中发送和接收包含订单的消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-458">The following code example sends and receives a message containing an order to and from a queue.</span></span> <span data-ttu-id="8fcc6-459">当原始消息到达或从队列中检索时，它专门请求肯定确认。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-459">It specifically requests a positive acknowledgment when the original message reaches or is retrieved from the queue.</span></span>  
  
 [!code-cpp[Message.Acknowledgment#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.Acknowledgment/CPP/message_acknowledgment.cpp#1)]
 [!code-csharp[Message.Acknowledgment#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.Acknowledgment/CS/message_acknowledgment.cs#1)]
 [!code-vb[Message.Acknowledgment#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.Acknowledgment/VB/message_acknowledgment.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-460">消息尚未发送。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-460">The message has not been sent.</span></span> <span data-ttu-id="8fcc6-461">该属性只能在从队列中检索的消息上读取。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-461">This property can only be read on messages retrieved from a queue.</span></span>  
  
<span data-ttu-id="8fcc6-462">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8fcc6-462">-or-</span></span> 
<span data-ttu-id="8fcc6-463">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.Id" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-463">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.Id" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.CorrelationId" />
      </Docs>
    </Member>
    <Member MemberName="InfiniteTimeout">
      <MemberSignature Language="C#" Value="public static readonly TimeSpan InfiniteTimeout;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly valuetype System.TimeSpan InfiniteTimeout" />
      <MemberSignature Language="DocId" Value="F:System.Messaging.Message.InfiniteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly InfiniteTimeout As TimeSpan " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly TimeSpan InfiniteTimeout;" />
      <MemberSignature Language="F#" Value=" staticval mutable InfiniteTimeout : TimeSpan" Usage="System.Messaging.Message.InfiniteTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-464">指定不存在超时。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-464">Specifies that no time-out exists.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-465"><xref:System.Messaging.Message.TimeToBeReceived%2A> 和 <xref:System.Messaging.Message.TimeToReachQueue%2A> 需要一个指定超时值的值。对于前一种情况，超时是指从队列中接收消息所允许的最长时间。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-465"><xref:System.Messaging.Message.TimeToBeReceived%2A> and <xref:System.Messaging.Message.TimeToReachQueue%2A> require a value that specifies a time-out. For the former, the time-out is the maximum time allowed for a message to be received from the queue.</span></span> <span data-ttu-id="8fcc6-466">对于后一种情况，超时是指允许消息到达队列的时间。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-466">For the latter, the time-out is the time allowed for a message to reach the queue.</span></span> <span data-ttu-id="8fcc6-467">在这两种情况下，可以指定超时值（以秒为单位），也可以使用 <xref:System.Messaging.Message.InfiniteTimeout> 指示不存在超时。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-467">In both cases, you can specify the time-out as a number of seconds or use <xref:System.Messaging.Message.InfiniteTimeout> to indicate that no time-out exists.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-468">下面的代码示例演示如何使用 <xref:System.Messaging.Message.InfiniteTimeout> 字段。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-468">The following code example demonstrates the use of the <xref:System.Messaging.Message.InfiniteTimeout> field.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Messaging.Message.TimeToBeReceived" />
        <altmember cref="P:System.Messaging.Message.TimeToReachQueue" />
      </Docs>
    </Member>
    <Member MemberName="IsFirstInTransaction">
      <MemberSignature Language="C#" Value="public bool IsFirstInTransaction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFirstInTransaction" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.IsFirstInTransaction" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsFirstInTransaction As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsFirstInTransaction { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsFirstInTransaction : bool" Usage="System.Messaging.Message.IsFirstInTransaction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgIsFirstInTransaction")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgIsFirstInTransaction")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-469">获取一个值，该值指示消息是否是事务中发送的第一条消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-469">Gets a value that indicates whether the message was the first message sent in a transaction.</span></span></summary>
        <value><span data-ttu-id="8fcc6-470">如果消息是事务中发送的第一条消息，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-470"><see langword="true" /> if the message was the first message sent in a transaction; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-471">接收应用程序使用 <xref:System.Messaging.Message.IsFirstInTransaction%2A> 属性来验证消息是否是在单个事务中发送到单个队列的第一条消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-471">Receiving applications use the <xref:System.Messaging.Message.IsFirstInTransaction%2A> property to verify that a message was the first message sent in a single transaction to a single queue.</span></span>  
  
 <span data-ttu-id="8fcc6-472">此属性仅适用于消息队列版本2.0 及更高版本。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-472">This property is available only with Message Queuing version 2.0 and later.</span></span>  
  
 <span data-ttu-id="8fcc6-473">若要验证事务边界，可以结合使用 <xref:System.Messaging.Message.IsFirstInTransaction%2A> 属性和两个其他属性： <xref:System.Messaging.Message.IsLastInTransaction%2A> 和 <xref:System.Messaging.Message.TransactionId%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-473">To verify transaction boundaries, you can use the <xref:System.Messaging.Message.IsFirstInTransaction%2A> property along with two other properties: <xref:System.Messaging.Message.IsLastInTransaction%2A> and <xref:System.Messaging.Message.TransactionId%2A>.</span></span> <span data-ttu-id="8fcc6-474">使用前者检查消息是否是事务中发送的最后一条消息，并使用后者来检索事务的标识符。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-474">Use the former to check whether a message was the last message sent in the transaction, and use the latter to retrieve the identifier of the transaction.</span></span>  
  
 <span data-ttu-id="8fcc6-475">如果在事务中只发送一条消息，则 <xref:System.Messaging.Message.IsFirstInTransaction%2A> 和 <xref:System.Messaging.Message.IsLastInTransaction%2A> 属性都设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-475">If only one message is sent in a transaction, the <xref:System.Messaging.Message.IsFirstInTransaction%2A> and <xref:System.Messaging.Message.IsLastInTransaction%2A> properties are both set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-476">下面的代码示例显示消息的属性的值 <xref:System.Messaging.Message.IsFirstInTransaction%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-476">The following code example displays the value of a message's <xref:System.Messaging.Message.IsFirstInTransaction%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-477">消息尚未发送。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-477">The message has not been sent.</span></span> <span data-ttu-id="8fcc6-478">该属性只能在从队列中检索的消息上读取。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-478">This property can only be read on messages retrieved from a queue.</span></span>  
  
<span data-ttu-id="8fcc6-479">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8fcc6-479">-or-</span></span> 
<span data-ttu-id="8fcc6-480">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.IsFirstInTransaction" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-480">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.IsFirstInTransaction" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.IsLastInTransaction" />
        <altmember cref="P:System.Messaging.Message.TransactionId" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="IsLastInTransaction">
      <MemberSignature Language="C#" Value="public bool IsLastInTransaction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLastInTransaction" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.IsLastInTransaction" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLastInTransaction As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLastInTransaction { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLastInTransaction : bool" Usage="System.Messaging.Message.IsLastInTransaction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgIsLastInTransaction")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgIsLastInTransaction")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-481">获取一个值，该值指示消息是否是事务中发送的最后一条消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-481">Gets a value that indicates whether the message was the last message sent in a transaction.</span></span></summary>
        <value><span data-ttu-id="8fcc6-482">如果消息是单个事务中发送的最后一条消息，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-482"><see langword="true" /> if the message was the last message sent in a single transaction; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-483">接收应用程序使用 <xref:System.Messaging.Message.IsLastInTransaction%2A> 属性来验证消息是否是在单个事务中发送到单个队列的最后一条消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-483">Receiving applications use the <xref:System.Messaging.Message.IsLastInTransaction%2A> property to verify that a message was the last message sent in a single transaction to a single queue.</span></span>  
  
 <span data-ttu-id="8fcc6-484">此属性仅适用于消息队列版本2.0 及更高版本。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-484">This property is available only with Message Queuing version 2.0 and later.</span></span>  
  
 <span data-ttu-id="8fcc6-485">若要验证事务边界，可以结合使用 <xref:System.Messaging.Message.IsLastInTransaction%2A> 属性和两个其他属性： <xref:System.Messaging.Message.IsFirstInTransaction%2A> 和 <xref:System.Messaging.Message.TransactionId%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-485">To verify transaction boundaries, you can use the <xref:System.Messaging.Message.IsLastInTransaction%2A> property along with two other properties: <xref:System.Messaging.Message.IsFirstInTransaction%2A> and <xref:System.Messaging.Message.TransactionId%2A>.</span></span> <span data-ttu-id="8fcc6-486">使用前者检查消息是否是事务中发送的第一条消息，并使用后者来检索事务的标识符。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-486">Use the former to check whether a message was the first message sent in the transaction, and use the latter to retrieve the identifier of the transaction.</span></span>  
  
 <span data-ttu-id="8fcc6-487">如果在事务中只发送一条消息，则 <xref:System.Messaging.Message.IsFirstInTransaction%2A> 和 <xref:System.Messaging.Message.IsLastInTransaction%2A> 属性都设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-487">If only one message is sent in a transaction, the <xref:System.Messaging.Message.IsFirstInTransaction%2A> and <xref:System.Messaging.Message.IsLastInTransaction%2A> properties are both set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-488">下面的代码示例显示消息的属性的值 <xref:System.Messaging.Message.IsLastInTransaction%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-488">The following code example displays the value of a message's <xref:System.Messaging.Message.IsLastInTransaction%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-489">消息尚未发送。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-489">The message has not been sent.</span></span> <span data-ttu-id="8fcc6-490">该属性只能在从队列中检索的消息上读取。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-490">This property can only be read on messages retrieved from a queue.</span></span>  
  
<span data-ttu-id="8fcc6-491">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8fcc6-491">-or-</span></span> 
<span data-ttu-id="8fcc6-492">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.IsLastInTransaction" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-492">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.IsLastInTransaction" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.IsFirstInTransaction" />
        <altmember cref="P:System.Messaging.Message.TransactionId" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Label" />
      <MemberSignature Language="VB.NET" Value="Public Property Label As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Label { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Label : string with get, set" Usage="System.Messaging.Message.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgLabel")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgLabel")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-493">获取或设置描述消息的应用程序定义的 Unicode 字符串。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-493">Gets or sets an application-defined Unicode string that describes the message.</span></span></summary>
        <value><span data-ttu-id="8fcc6-494">消息的标签。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-494">The label of the message.</span></span> <span data-ttu-id="8fcc6-495">默认值为空字符串("")。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-495">The default is an empty string ("").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-496">消息标签有多种用途。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-496">You can use a message label for several purposes.</span></span> <span data-ttu-id="8fcc6-497">例如，可用于显示消息，或根据标签值有选择地处理消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-497">For example, you can use it for display purposes or to selectively process messages based on the label value.</span></span> <span data-ttu-id="8fcc6-498">此标签在消息中不必是唯一的。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-498">The label does not need to be unique across messages.</span></span>  
  
 <span data-ttu-id="8fcc6-499">消息队列和消息标签表示一个应用程序定义的值，可利用该值将标识队列或消息用人可识别的词条标识出来。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-499">Message queue and message labels represent an application-defined value that can help identify the queue or message in human-readable terms.</span></span> <span data-ttu-id="8fcc6-500">应用程序负责解释标签内容，这对 "消息队列" 应用程序没有内部意义。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-500">It is the responsibility of the application to interpret the label contents, which have no intrinsic meaning to the Message Queuing application.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-501">下面的代码示例获取并设置消息的属性的值 <xref:System.Messaging.Message.Label%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-501">The following code example gets and sets the value of a message's <xref:System.Messaging.Message.Label%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-502">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.Label" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-502">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.Label" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.Label" />
      </Docs>
    </Member>
    <Member MemberName="LookupId">
      <MemberSignature Language="C#" Value="public long LookupId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LookupId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.LookupId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LookupId As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LookupId { long get(); };" />
      <MemberSignature Language="F#" Value="member this.LookupId : int64" Usage="System.Messaging.Message.LookupId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-503">在 MSMQ 3.0 中引入。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-503">Introduced in MSMQ 3.0.</span></span> <span data-ttu-id="8fcc6-504">获取消息的查找标识符。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-504">Gets the message's lookup identifier.</span></span></summary>
        <value><span data-ttu-id="8fcc6-505">消息的查找标识符，由消息队列生成，对消息驻留的队列是唯一的。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-505">The message's lookup identifier, which is generated by Message Queuing and is unique to the queue where the message resides.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-506"><xref:System.Messaging.Message.LookupId%2A>属性提供对消息查找标识符的只读访问。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-506">The <xref:System.Messaging.Message.LookupId%2A> property provides read-only access to a message's lookup identifier.</span></span> <span data-ttu-id="8fcc6-507">MSMQ 3.0 中引入的查找标识符是一个64位标识符，由消息队列生成并在消息放入队列中时分配给每个消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-507">The lookup identifier, introduced in MSMQ 3.0, is a 64-bit identifier that is generated by Message Queuing and assigned to each message when the message is placed in the queue.</span></span> <span data-ttu-id="8fcc6-508">查找标识符不同于发送消息时生成的消息标识符。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-508">The lookup identifier is not the same as the message identifier that is generated when the message is sent.</span></span>  
  
 <span data-ttu-id="8fcc6-509">消息队列为放置在任何队列中的所有消息生成一个查找标识符，包括应用程序生成的目标、管理和报表队列，以及系统生成的日志、死信、连接器和传出队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-509">Message Queuing generates a lookup identifier for all messages that are placed in any queue, including application-generated destination, administration, and report queues, as well as system-generated journal, dead-letter, connector, and outgoing queues.</span></span> <span data-ttu-id="8fcc6-510">换句话说，这包括通过发送应用程序和消息队列发送的消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-510">In other words, this includes both messages sent by sending applications and by Message Queuing.</span></span> <span data-ttu-id="8fcc6-511">查找标识符对于队列是唯一的，在队列外没有意义。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-511">The lookup identifier is unique to the queue and has no meaning outside the queue.</span></span>  
  
 <span data-ttu-id="8fcc6-512">如果将一条消息发送到多个目标队列，或将消息的副本存储在计算机日志或队列日志中，则该消息的每个副本都将具有自己的查找标识符，同时将其放入各自的队列中。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-512">If a message is sent to several destination queues, or if a copy of a message is stored in a computer journal or queue journal, each copy of the message will have its own lookup identifier when it is placed in its respective queue.</span></span>  
  
 <span data-ttu-id="8fcc6-513"><xref:System.Messaging.Message.LookupId%2A>仅可对从队列中检索到的消息读取属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-513">The <xref:System.Messaging.Message.LookupId%2A> property can only be read on messages retrieved from a queue.</span></span>  
  
 <span data-ttu-id="8fcc6-514">查找标识符用于读取队列中的特定消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-514">A lookup identifier is used to read a specific message in the queue.</span></span> <span data-ttu-id="8fcc6-515">已知消息的查找标识符后，接收方应用程序可以调用 <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> 或 <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> 函数直接转到该消息，并从队列中查看或检索该消息，这不同于必须从队列的前面开始并导航到队列末尾的游标。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-515">Once the lookup identifier of a message is known, the receiving application can call the <xref:System.Messaging.MessageQueue.PeekByLookupId%2A> or <xref:System.Messaging.MessageQueue.ReceiveByLookupId%2A> function to go directly to that message and peek at or retrieve it from the queue, unlike cursors that must start at the front of the queue and navigate towards the end of the queue,</span></span>  
  
 <span data-ttu-id="8fcc6-516">获取队列中消息的查找标识符是应用程序的责任。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-516">Obtaining the lookup identifiers of the messages in the queue is the responsibility of the application.</span></span> <span data-ttu-id="8fcc6-517">获取查找标识符的一种可行方法是为目标队列创建一个触发器，以便在将每条消息放置到队列中时调用该组件来缓存每个消息的标识符。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-517">One possible way to obtain the lookup identifiers is to create a trigger for the destination queue that invokes a component that caches the identifiers of each message as they are placed in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="8fcc6-518">未安装 MSMQ 3.0。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-518">MSMQ 3.0 is not installed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-519">消息尚未发送。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-519">The message has not been sent.</span></span> <span data-ttu-id="8fcc6-520">该属性只能在从队列中检索的消息上读取。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-520">This property can only be read on messages retrieved from a queue.</span></span>  
  
<span data-ttu-id="8fcc6-521">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8fcc6-521">-or-</span></span> 
<span data-ttu-id="8fcc6-522">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.LookupId" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-522">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.LookupId" /> property.</span></span></exception>
        <altmember cref="Overload:System.Messaging.MessageQueue.PeekByLookupId" />
        <altmember cref="Overload:System.Messaging.MessageQueue.ReceiveByLookupId" />
      </Docs>
    </Member>
    <Member MemberName="MessageType">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageType MessageType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageType MessageType" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.MessageType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MessageType As MessageType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageType MessageType { System::Messaging::MessageType get(); };" />
      <MemberSignature Language="F#" Value="member this.MessageType : System.Messaging.MessageType" Usage="System.Messaging.Message.MessageType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgMessageType")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgMessageType")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-523">获取消息类型：<see langword="Normal" />、<see langword="Acknowledgment" /> 或 <see langword="Report" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-523">Gets the message type: <see langword="Normal" />, <see langword="Acknowledgment" />, or <see langword="Report" />.</span></span></summary>
        <value><span data-ttu-id="8fcc6-524"><see cref="P:System.Messaging.Message.MessageType" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-524">One of the <see cref="P:System.Messaging.Message.MessageType" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-525">消息队列通常在发送消息时设置此属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-525">Message Queuing typically sets this property when it sends the message.</span></span> <span data-ttu-id="8fcc6-526">消息队列消息可以是下列类型之一：</span><span class="sxs-lookup"><span data-stu-id="8fcc6-526">A Message Queuing message can be one of the following types:</span></span>  
  
-   <span data-ttu-id="8fcc6-527">`Normal`，它是从应用程序发送到队列的典型消息，或返回给发送应用程序的响应消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-527">`Normal`, which is either a typical message sent from an application to a queue, or a response message returned to the sending application.</span></span>  
  
-   <span data-ttu-id="8fcc6-528">`Acknowledgement`，在发送应用程序请求消息时，将生成消息队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-528">`Acknowledgement`, which Message Queuing generates whenever the sending application requests one.</span></span> <span data-ttu-id="8fcc6-529">例如，消息队列可生成肯定消息或否定消息，以指示原始消息已到达或已被读取。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-529">For example, Message Queuing can generate positive or negative messages to indicate that the original message arrived or was read.</span></span> <span data-ttu-id="8fcc6-530">消息队列会将相应的确认消息返回到发送应用程序所指定的管理队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-530">Message Queuing returns the appropriate acknowledgment message to the administration queue specified by the sending application.</span></span>  
  
-   <span data-ttu-id="8fcc6-531">`Report`，只要在源队列管理器中定义了报表队列，消息队列就会生成。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-531">`Report`, which Message Queuing generates whenever a report queue is defined at the source Queue Manager.</span></span> <span data-ttu-id="8fcc6-532">如果启用了跟踪，则每当原始消息进入或离开消息队列服务器时，消息队列都会向消息队列报告队列发送报告消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-532">When tracing is enabled, Message Queuing sends a report message to the Message Queuing report queue each time the original message enters or leaves a Message Queuing server.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-533">下面的代码示例显示消息的属性的值 <xref:System.Messaging.Message.MessageType%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-533">The following code example displays the value of a message's <xref:System.Messaging.Message.MessageType%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-534">消息尚未发送。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-534">The message has not been sent.</span></span> <span data-ttu-id="8fcc6-535">该属性只能在从队列中检索的消息上读取。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-535">This property can only be read on messages retrieved from a queue.</span></span>  
  
<span data-ttu-id="8fcc6-536">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8fcc6-536">-or-</span></span> 
<span data-ttu-id="8fcc6-537">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.MessageType" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-537">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.MessageType" /> property.</span></span></exception>
        <altmember cref="T:System.Messaging.MessageType" />
        <altmember cref="P:System.Messaging.MessagePropertyFilter.Acknowledgment" />
        <altmember cref="P:System.Messaging.Message.AcknowledgeType" />
        <altmember cref="P:System.Messaging.Message.ResponseQueue" />
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public System.Messaging.MessagePriority Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessagePriority Priority" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Property Priority As MessagePriority" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessagePriority Priority { System::Messaging::MessagePriority get(); void set(System::Messaging::MessagePriority value); };" />
      <MemberSignature Language="F#" Value="member this.Priority : System.Messaging.MessagePriority with get, set" Usage="System.Messaging.Message.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgPriority")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgPriority")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessagePriority</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-538">获取或设置消息优先级，该优先级用于确定消息在队列中的位置。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-538">Gets or sets the message priority, which determines where in the queue the message is placed.</span></span></summary>
        <value><span data-ttu-id="8fcc6-539"><see cref="T:System.Messaging.MessagePriority" /> 值之一，表示非事务性消息的优先级。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-539">One of the <see cref="T:System.Messaging.MessagePriority" /> values, which represent the priority levels of non-transactional messages.</span></span> <span data-ttu-id="8fcc6-540">默认值为 <see langword="Normal" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-540">The default is <see langword="Normal" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-541"><xref:System.Messaging.Message.Priority%2A>属性会影响消息队列在消息传送过程中以及到达其目标后如何处理消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-541">The <xref:System.Messaging.Message.Priority%2A> property affects how Message Queuing handles the message both while it is en route and once it reaches its destination.</span></span> <span data-ttu-id="8fcc6-542">在路由过程中，优先级高的消息具有优先权，将会插入到目标队列的队首。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-542">Higher-priority messages are given preference during routing and inserted toward the front of the destination queue.</span></span> <span data-ttu-id="8fcc6-543">而具有相同优先级的消息则会按照到达的先后时间插入到队列中。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-543">Messages with the same priority are placed in the queue according to their arrival time.</span></span>  
  
 <span data-ttu-id="8fcc6-544">只能为非事务性消息设置有意义的优先级。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-544">You can set a meaningful priority only for non-transactional messages.</span></span> <span data-ttu-id="8fcc6-545">消息队列会将事务性消息的优先级自动设置为 `Lowest` ，从而导致忽略事务性消息的优先级。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-545">Message Queuing automatically sets the priority for transactional messages to `Lowest`, which causes transactional message priority to be ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-546">下面的代码示例将两个不同优先级的消息发送到队列，然后检索它们。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-546">The following code example sends two messages of different priorities to the queue, and retrieves them subsequently.</span></span>  
  
 [!code-cpp[Message.DefaultPropertiesToSend#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CPP/message_defaultandpriority.cpp#1)]
 [!code-csharp[Message.DefaultPropertiesToSend#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/CS/message_defaultandpriority.cs#1)]
 [!code-vb[Message.DefaultPropertiesToSend#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Message.DefaultPropertiesToSend/VB/message_defaultandpriority.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-547">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.Priority" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-547">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.Priority" /> property.</span></span></exception>
        <altmember cref="T:System.Messaging.MessagePriority" />
        <altmember cref="P:System.Messaging.Message.MessageType" />
        <altmember cref="P:System.Messaging.MessageQueue.BasePriority" />
      </Docs>
    </Member>
    <Member MemberName="Recoverable">
      <MemberSignature Language="C#" Value="public bool Recoverable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Recoverable" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.Recoverable" />
      <MemberSignature Language="VB.NET" Value="Public Property Recoverable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Recoverable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Recoverable : bool with get, set" Usage="System.Messaging.Message.Recoverable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgRecoverable")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgRecoverable")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-548">获取或设置一个值，该值指示在出现计算机故障或网络问题时是否保证传递消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-548">Gets or sets a value that indicates whether the message is guaranteed to be delivered in the event of a computer failure or network problem.</span></span></summary>
        <value><span data-ttu-id="8fcc6-549">如果通过在消息传递过程中将消息保存到磁盘上来保证消息的传递，则为 <see langword="true" />；如果不能保证传递，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-549"><see langword="true" /> if delivery of the message is guaranteed (through saving the message to disk while en route); <see langword="false" /> if delivery is not assured.</span></span> <span data-ttu-id="8fcc6-550">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-550">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-551"><xref:System.Messaging.Message.Recoverable%2A>属性指示消息的传递是否得到保证，即使在消息发送到目标队列的过程中出现计算机崩溃。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-551">The <xref:System.Messaging.Message.Recoverable%2A> property indicates whether the delivery of a message is guaranteed - even if a computer crashes while the message is en route to the destination queue.</span></span>  
  
 <span data-ttu-id="8fcc6-552">如果保证消息的传递，则会在路由过程中的每个步骤本地存储消息，直到将消息成功转发到下一台计算机。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-552">If delivery of a message is guaranteed, the message is stored locally at every step along the route, until the message is successfully forwarded to the next computer.</span></span> <span data-ttu-id="8fcc6-553">将 <xref:System.Messaging.Message.Recoverable%2A> 属性设置为 `true` 可能会影响吞吐量。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-553">Setting the <xref:System.Messaging.Message.Recoverable%2A> property to `true` could affect throughput.</span></span>  
  
 <span data-ttu-id="8fcc6-554">如果消息是事务性的，消息队列会自动将消息视为可恢复消息，而不考虑属性的值 <xref:System.Messaging.Message.Recoverable%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-554">If the message is transactional, Message Queuing automatically treats the message as recoverable, regardless of the value of the <xref:System.Messaging.Message.Recoverable%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-555">下面的代码示例获取并设置消息的属性的值 <xref:System.Messaging.Message.Recoverable%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-555">The following code example gets and sets the value of a message's <xref:System.Messaging.Message.Recoverable%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-556">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.Recoverable" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-556">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.Recoverable" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.UseTracing" />
      </Docs>
    </Member>
    <Member MemberName="ResponseQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue ResponseQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue ResponseQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.ResponseQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property ResponseQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ ResponseQueue { System::Messaging::MessageQueue ^ get(); void set(System::Messaging::MessageQueue ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ResponseQueue : System.Messaging.MessageQueue with get, set" Usage="System.Messaging.Message.ResponseQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgResponseQueue")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgResponseQueue")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-557">获取或设置接收应用程序生成的响应消息的队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-557">Gets or sets the queue that receives application-generated response messages.</span></span></summary>
        <value><span data-ttu-id="8fcc6-558">应用程序生成的响应消息所返回到的 <see cref="T:System.Messaging.MessageQueue" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-558">The <see cref="T:System.Messaging.MessageQueue" /> to which application-generated response messages are returned.</span></span> <span data-ttu-id="8fcc6-559">默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-559">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-560"><xref:System.Messaging.Message.ResponseQueue%2A>属性标识接收应用程序生成的响应消息的队列，接收方应用程序将该消息返回给发送应用程序。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-560">The <xref:System.Messaging.Message.ResponseQueue%2A> property identifies the queue that receives application-generated response messages, which the receiving application returns to the sending application.</span></span> <span data-ttu-id="8fcc6-561">当应用程序发送其消息时，发送应用程序会指定响应队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-561">The sending application specifies response queues when the application sends its messages.</span></span> <span data-ttu-id="8fcc6-562">任何可用队列均可指定为响应队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-562">Any available queue can be specified as a response queue.</span></span>  
  
 <span data-ttu-id="8fcc6-563">返回到响应队列的消息是应用程序特定的。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-563">Messages returned to the response queue are application-specific.</span></span> <span data-ttu-id="8fcc6-564">应用程序必须定义消息的内容以及收到消息时采取的操作。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-564">The application must define the contents of the messages as well as the action to take upon receipt of a message.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-565">下面的代码示例获取并设置消息的属性的值 <xref:System.Messaging.Message.ResponseQueue%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-565">The following code example gets and sets the value of a message's <xref:System.Messaging.Message.ResponseQueue%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-566">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.ResponseQueue" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-566">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.ResponseQueue" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.AdministrationQueue" />
        <altmember cref="P:System.Messaging.Message.DestinationQueue" />
        <altmember cref="P:System.Messaging.Message.TransactionStatusQueue" />
      </Docs>
    </Member>
    <Member MemberName="SecurityContext">
      <MemberSignature Language="C#" Value="public System.Messaging.SecurityContext SecurityContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.SecurityContext SecurityContext" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SecurityContext" />
      <MemberSignature Language="VB.NET" Value="Public Property SecurityContext As SecurityContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::SecurityContext ^ SecurityContext { System::Messaging::SecurityContext ^ get(); void set(System::Messaging::SecurityContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SecurityContext : System.Messaging.SecurityContext with get, set" Usage="System.Messaging.Message.SecurityContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.SecurityContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-567">获取或设置消息的安全上下文。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-567">Gets or sets the security context for a message.</span></span></summary>
        <value><span data-ttu-id="8fcc6-568">如果以前曾经设置该属性，则为 <see cref="T:System.Messaging.SecurityContext" /> 对象，其中包含用于消息的安全上下文；否则为 NULL。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-568">A <see cref="T:System.Messaging.SecurityContext" /> object that contains the security context for a message, if the property has previously been set; otherwise NULL.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SenderCertificate">
      <MemberSignature Language="C#" Value="public byte[] SenderCertificate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SenderCertificate" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SenderCertificate" />
      <MemberSignature Language="VB.NET" Value="Public Property SenderCertificate As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SenderCertificate { cli::array &lt;System::Byte&gt; ^ get(); void set(cli::array &lt;System::Byte&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SenderCertificate : byte[] with get, set" Usage="System.Messaging.Message.SenderCertificate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgSenderCertificate")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgSenderCertificate")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-569">获取或设置用于验证消息的安全证书。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-569">Gets or sets the security certificate used to authenticate messages.</span></span></summary>
        <value><span data-ttu-id="8fcc6-570">表示安全证书的字节值数组，消息队列用该数组验证消息的发送方。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-570">An array of byte values that represents a security certificate, which Message Queuing uses to verify the sender of the message.</span></span> <span data-ttu-id="8fcc6-571">默认值为零长度的数组。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-571">The default is a zero-length array.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-572"><xref:System.Messaging.Message.SenderCertificate%2A>当消息包含外部安全证书时，接收应用程序将使用属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-572">The receiving application uses the <xref:System.Messaging.Message.SenderCertificate%2A> property when the message includes an external security certificate.</span></span>  
  
 <span data-ttu-id="8fcc6-573">消息队列可以使用内部或外部安全证书对消息进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-573">Message Queuing can authenticate a message using either an internal or external security certificate.</span></span> <span data-ttu-id="8fcc6-574">消息队列提供用于验证消息完整性的内部证书。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-574">Message Queuing provides internal certificates, which are used to verify message integrity.</span></span> <span data-ttu-id="8fcc6-575">证书颁发机构提供外部证书，可通过消息的属性访问该证书 <xref:System.Messaging.Message.SenderCertificate%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-575">A certification authority provides an external certificate, which you can access through the <xref:System.Messaging.Message.SenderCertificate%2A> property of the message.</span></span> <span data-ttu-id="8fcc6-576">除了允许消息队列对消息进行身份验证外，外部证书还允许接收应用程序进一步验证发送方。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-576">In addition to allowing Message Queuing to authenticate the message, an external certificate allows the receiving application to further verify the sender.</span></span> <span data-ttu-id="8fcc6-577">内部证书对于接收应用程序没有可用的值。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-577">An internal certificate has no usable value to a receiving application.</span></span>  
  
 <span data-ttu-id="8fcc6-578">必须向消息队列系统的目录服务注册外部证书。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-578">An external certificate must be registered with the directory service of the Message Queuing system.</span></span> <span data-ttu-id="8fcc6-579">外部证书包含有关证书颁发机构、证书用户、证书有效期、证书用户公钥和证书颁发机构签名的信息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-579">An external certificate contains information about the certification authority, the certificate user, the validity period of the certificate, the public key of the certificate user, and the certification authority's signature.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-580">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.SenderCertificate" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-580">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.SenderCertificate" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.UseAuthentication" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
        <altmember cref="P:System.Messaging.Message.Authenticated" />
      </Docs>
    </Member>
    <Member MemberName="SenderId">
      <MemberSignature Language="C#" Value="public byte[] SenderId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] SenderId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SenderId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SenderId As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Byte&gt; ^ SenderId { cli::array &lt;System::Byte&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SenderId : byte[]" Usage="System.Messaging.Message.SenderId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgSenderId")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgSenderId")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-581">获取发送用户的标识符。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-581">Gets the identifier of the sending user.</span></span></summary>
        <value><span data-ttu-id="8fcc6-582">标识发送方的字节值数组。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-582">An array of byte values that identifies the sender.</span></span> <span data-ttu-id="8fcc6-583">接收队列管理器在对消息进行身份验证时使用标识符 — 以验证消息的发送方和发送方对队列的访问权限。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-583">The receiving Queue Manager uses the identifier when it authenticates the message to verify the sender of the message and the sender's access rights to the queue.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-584">如果 <xref:System.Messaging.Message.AttachSenderId%2A> 属性为 `false` ，则在发送时，属性中指定的发送方标识符 <xref:System.Messaging.Message.SenderId%2A> 不会附加到消息中。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-584">If the <xref:System.Messaging.Message.AttachSenderId%2A> property is `false`, the sender identifier specified in the <xref:System.Messaging.Message.SenderId%2A> property is not attached to the message when it is sent.</span></span> <span data-ttu-id="8fcc6-585">这会指示消息队列，指出发送方在向目标队列发送消息时不应验证发送方。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-585">This indicates to Message Queuing that the sender should not be validated when it sends the message to the destination queue.</span></span> <span data-ttu-id="8fcc6-586">如果 <xref:System.Messaging.Message.AttachSenderId%2A> 属性为 `true` ，则只有在 <xref:System.Messaging.Message.SenderId%2A> 对消息进行身份验证时，属性值才是可信任的。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-586">If the <xref:System.Messaging.Message.AttachSenderId%2A> property is `true`, the <xref:System.Messaging.Message.SenderId%2A> property value is trustworthy only if the message was authenticated.</span></span> <span data-ttu-id="8fcc6-587">将 <xref:System.Messaging.Message.Authenticated%2A> 属性与属性结合使用 <xref:System.Messaging.Message.SenderId%2A> ，验证发件人的访问权限。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-587">Use the <xref:System.Messaging.Message.Authenticated%2A> property in conjunction with the <xref:System.Messaging.Message.SenderId%2A> property to verify the sender's access rights.</span></span>  
  
 <span data-ttu-id="8fcc6-588">连接器应用程序是一种应用程序，它使用连接器服务器来提供消息队列与其他队列系统之间的通信。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-588">A connector application is an application that uses a connector server to provide communication between Message Queuing and other queuing systems.</span></span> <span data-ttu-id="8fcc6-589">消息队列需要连接器应用程序来提供发送程序标识。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-589">Message Queuing requires connector applications to provide sender identification.</span></span> <span data-ttu-id="8fcc6-590"><xref:System.Messaging.Message.ConnectorType%2A>通过连接器应用程序发送消息时，必须设置属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-590">You must set the <xref:System.Messaging.Message.ConnectorType%2A> property when sending a message through a connector application.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-591">消息尚未发送。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-591">The message has not been sent.</span></span> <span data-ttu-id="8fcc6-592">该属性只能在从队列中检索的消息上读取。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-592">This property can only be read on messages retrieved from a queue.</span></span>  
  
<span data-ttu-id="8fcc6-593">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8fcc6-593">-or-</span></span> 
<span data-ttu-id="8fcc6-594">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.SenderId" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-594">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.SenderId" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.Authenticated" />
        <altmember cref="P:System.Messaging.Message.AttachSenderId" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderName" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderType" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
      </Docs>
    </Member>
    <Member MemberName="SenderVersion">
      <MemberSignature Language="C#" Value="public long SenderVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 SenderVersion" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SenderVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SenderVersion As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long SenderVersion { long get(); };" />
      <MemberSignature Language="F#" Value="member this.SenderVersion : int64" Usage="System.Messaging.Message.SenderVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgSenderVersion")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgSenderVersion")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-595">获取用于发送消息的消息队列版本。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-595">Gets the version of Message Queuing used to send the message.</span></span></summary>
        <value><span data-ttu-id="8fcc6-596">用于发送消息的消息队列版本。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-596">The version of Message Queuing used to send the message.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-597"><xref:System.Messaging.Message.SenderVersion%2A>属性对某些功能很重要。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-597">The <xref:System.Messaging.Message.SenderVersion%2A> property is important for certain features.</span></span> <span data-ttu-id="8fcc6-598">例如，仅消息队列2.0 和更高版本支持事务处理，并使用数字签名对 MSMQ 1.0 发送的消息进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-598">For example, transaction processing is supported only by Message Queuing 2.0 and later, and digital signatures are used to authenticate messages sent by MSMQ 1.0.</span></span>  
  
 <span data-ttu-id="8fcc6-599">发送队列管理器在 <xref:System.Messaging.Message.SenderVersion%2A> 发送消息时设置属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-599">The sending Queue Manager sets the <xref:System.Messaging.Message.SenderVersion%2A> property when the message is sent.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-600">下面的代码示例显示消息的属性的值 <xref:System.Messaging.Message.SenderVersion%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-600">The following code example displays the value of a message's <xref:System.Messaging.Message.SenderVersion%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-601">消息尚未发送。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-601">The message has not been sent.</span></span> <span data-ttu-id="8fcc6-602">该属性只能在从队列中检索的消息上读取。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-602">This property can only be read on messages retrieved from a queue.</span></span>  
  
<span data-ttu-id="8fcc6-603">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8fcc6-603">-or-</span></span> 
<span data-ttu-id="8fcc6-604">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.SenderVersion" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-604">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.SenderVersion" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.TransactionId" />
        <altmember cref="P:System.Messaging.Message.IsFirstInTransaction" />
        <altmember cref="P:System.Messaging.Message.IsLastInTransaction" />
        <altmember cref="P:System.Messaging.Message.TransactionStatusQueue" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
      </Docs>
    </Member>
    <Member MemberName="SentTime">
      <MemberSignature Language="C#" Value="public DateTime SentTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime SentTime" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SentTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SentTime As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property DateTime SentTime { DateTime get(); };" />
      <MemberSignature Language="F#" Value="member this.SentTime : DateTime" Usage="System.Messaging.Message.SentTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgSentTime")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgSentTime")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-605">获取发送计算机上的源队列管理器发送消息的日期和时间。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-605">Gets the date and time on the sending computer that the message was sent by the source queue manager.</span></span></summary>
        <value><span data-ttu-id="8fcc6-606">表示消息发送时间的 <see cref="T:System.DateTime" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-606">A <see cref="T:System.DateTime" /> that represents the time the message was sent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-607">将 <xref:System.Messaging.Message.SentTime%2A> 属性调整为在其上创建此类的实例的计算机的本地时间 <xref:System.Messaging.Message> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-607">The <xref:System.Messaging.Message.SentTime%2A> property is adjusted to the local time of the computer on which this instance of the <xref:System.Messaging.Message> class was created.</span></span> <span data-ttu-id="8fcc6-608">此时区可能与源和目标队列的时区不同。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-608">This time zone could be different from those of the source and destination queues.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-609">下面的代码示例显示消息的属性的值 <xref:System.Messaging.Message.SentTime%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-609">The following code example displays the value of a message's <xref:System.Messaging.Message.SentTime%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-610">消息尚未发送。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-610">The message has not been sent.</span></span> <span data-ttu-id="8fcc6-611">该属性只能在从队列中检索的消息上读取。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-611">This property can only be read on messages retrieved from a queue.</span></span>  
  
<span data-ttu-id="8fcc6-612">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8fcc6-612">-or-</span></span> 
<span data-ttu-id="8fcc6-613">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.SentTime" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-613">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.SentTime" /> property.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SourceMachine">
      <MemberSignature Language="C#" Value="public string SourceMachine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceMachine" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.SourceMachine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SourceMachine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceMachine { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SourceMachine : string" Usage="System.Messaging.Message.SourceMachine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgSourceMachine")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgSourceMachine")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-614">获取发出消息的计算机。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-614">Gets the computer from which the message originated.</span></span></summary>
        <value><span data-ttu-id="8fcc6-615">发送消息的计算机的名称。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-615">The name of the computer from which the message was sent.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-616">属性的格式 <xref:System.Messaging.Message.SourceMachine%2A> 不包括前面两个正斜杠 (\\ \\) 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-616">The format of the <xref:System.Messaging.Message.SourceMachine%2A> property does not include preceding two forward slashes (\\\\).</span></span> <span data-ttu-id="8fcc6-617">例如， `myServer` 是有效的 <xref:System.Messaging.Message.SourceMachine%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-617">For example, `myServer` is a valid <xref:System.Messaging.Message.SourceMachine%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-618">下面的代码示例显示消息的属性的值 <xref:System.Messaging.Message.SourceMachine%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-618">The following code example displays the value of a message's <xref:System.Messaging.Message.SourceMachine%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-619">消息尚未发送。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-619">The message has not been sent.</span></span> <span data-ttu-id="8fcc6-620">该属性只能在从队列中检索的消息上读取。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-620">This property can only be read on messages retrieved from a queue.</span></span>  
  
<span data-ttu-id="8fcc6-621">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8fcc6-621">-or-</span></span> 
<span data-ttu-id="8fcc6-622">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.SourceMachine" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-622">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.SourceMachine" /> property.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="8fcc6-623">未能访问计算机信息和目录服务。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-623">The computer information or directory service could not be accessed.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueue.MachineName" />
      </Docs>
    </Member>
    <Member MemberName="TimeToBeReceived">
      <MemberSignature Language="C#" Value="public TimeSpan TimeToBeReceived { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeToBeReceived" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.TimeToBeReceived" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeToBeReceived As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeToBeReceived { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.TimeToBeReceived : TimeSpan with get, set" Usage="System.Messaging.Message.TimeToBeReceived" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.TimeoutConverter))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.TimeoutConverter))&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgTimeToBeReceived")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgTimeToBeReceived")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Messaging.TimeoutConverter))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Messaging.TimeoutConverter))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-624">获取或设置要从目标队列接收消息所需的最长时间。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-624">Gets or sets the maximum amount of time for the message to be received from the destination queue.</span></span></summary>
        <value><span data-ttu-id="8fcc6-625">从目标队列接收已发送消息所需的总时间。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-625">The total time for a sent message to be received from the destination queue.</span></span> <span data-ttu-id="8fcc6-626">默认值为 <see cref="F:System.Messaging.Message.InfiniteTimeout" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-626">The default is <see cref="F:System.Messaging.Message.InfiniteTimeout" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-627"><xref:System.Messaging.Message.TimeToBeReceived%2A>属性指定从目标队列接收发送消息所用的总时间。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-627">The <xref:System.Messaging.Message.TimeToBeReceived%2A> property specifies the total time for a sent message to be received from the destination queue.</span></span> <span data-ttu-id="8fcc6-628">时间限制包括获取目标队列所用的时间，以及在接收消息之前在队列中等待的时间。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-628">The time limit includes the time spent getting to the destination queue and the time spent waiting in the queue before the message is received.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="8fcc6-629">使用从属客户端计算机时，请确保客户端计算机上的时钟与运行消息队列的服务器上的时钟同步。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-629">When using dependent client computers, be sure the clock on the client computer is synchronized with the clock on the server that is running Message Queuing.</span></span> <span data-ttu-id="8fcc6-630">否则，如果发送的消息的属性不是，则可能导致不可预知的行为 <xref:System.Messaging.Message.TimeToBeReceived%2A> <xref:System.Messaging.Message.InfiniteTimeout> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-630">Otherwise, unpredictable behavior might result when sending a message whose <xref:System.Messaging.Message.TimeToBeReceived%2A> property is not <xref:System.Messaging.Message.InfiniteTimeout>.</span></span>  
  
 <span data-ttu-id="8fcc6-631">如果 <xref:System.Messaging.Message.TimeToBeReceived%2A> 从队列中删除消息之前，由属性指定的间隔过期，则消息队列将以两种方式之一丢弃该消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-631">If the interval specified by the <xref:System.Messaging.Message.TimeToBeReceived%2A> property expires before the message is removed from the queue, Message Queuing discards the message in one of two ways.</span></span> <span data-ttu-id="8fcc6-632">如果消息的 <xref:System.Messaging.Message.UseDeadLetterQueue%2A> 属性为 `true`，则将该消息发送到死信队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-632">If the message's <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property is `true`, the message is sent to the dead-letter queue.</span></span> <span data-ttu-id="8fcc6-633">如果 <xref:System.Messaging.Message.UseDeadLetterQueue%2A> 为 `false` ，则忽略该消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-633">If <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `false`, the message is ignored.</span></span>  
  
 <span data-ttu-id="8fcc6-634">如果在计时器过期之前未检索到消息，则可以设置消息的 <xref:System.Messaging.Message.AcknowledgeType%2A> 属性以请求消息队列向发送应用程序发送否定确认消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-634">You can set the message's <xref:System.Messaging.Message.AcknowledgeType%2A> property to request that Message Queuing send a negative acknowledgment message back to the sending application if the message is not retrieved before the timer expires.</span></span>  
  
 <span data-ttu-id="8fcc6-635">如果由属性指定的值 <xref:System.Messaging.Message.TimeToBeReceived%2A> 小于属性指定的值 <xref:System.Messaging.Message.TimeToReachQueue%2A> ，则 <xref:System.Messaging.Message.TimeToBeReceived%2A> 优先使用。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-635">If the value specified by the <xref:System.Messaging.Message.TimeToBeReceived%2A> property is less than the value specified by the <xref:System.Messaging.Message.TimeToReachQueue%2A> property, <xref:System.Messaging.Message.TimeToBeReceived%2A> takes precedence.</span></span>  
  
 <span data-ttu-id="8fcc6-636">在单个事务中发送多个消息时，消息队列将使用 <xref:System.Messaging.Message.TimeToBeReceived%2A> 第一条消息的属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-636">When several messages are sent in a single transaction, Message Queuing uses the <xref:System.Messaging.Message.TimeToBeReceived%2A> property of the first message.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-637">下面的代码示例获取并设置消息的属性的值 <xref:System.Messaging.Message.TimeToBeReceived%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-637">The following code example gets and sets the value of a message's <xref:System.Messaging.Message.TimeToBeReceived%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-638">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.TimeToBeReceived" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-638">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.TimeToBeReceived" /> property.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8fcc6-639">为 <see cref="P:System.Messaging.Message.TimeToBeReceived" /> 指定的值无效。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-639">The value specified for <see cref="P:System.Messaging.Message.TimeToBeReceived" /> is invalid.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.TimeToReachQueue" />
        <altmember cref="F:System.Messaging.Message.InfiniteTimeout" />
      </Docs>
    </Member>
    <Member MemberName="TimeToReachQueue">
      <MemberSignature Language="C#" Value="public TimeSpan TimeToReachQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan TimeToReachQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.TimeToReachQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property TimeToReachQueue As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan TimeToReachQueue { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.TimeToReachQueue : TimeSpan with get, set" Usage="System.Messaging.Message.TimeToReachQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.TimeoutConverter))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Messaging.Design.TimeoutConverter))&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgTimeToReachQueue")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgTimeToReachQueue")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Messaging.TimeoutConverter))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Messaging.TimeoutConverter))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-640">获取或设置消息到达队列所用的最长时间。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-640">Gets or sets the maximum amount of time for the message to reach the queue.</span></span></summary>
        <value><span data-ttu-id="8fcc6-641">从发送消息的时间开始算起，消息到达目标队列的时间限制。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-641">The time limit for the message to reach the destination queue, beginning from the time the message is sent.</span></span> <span data-ttu-id="8fcc6-642">默认值为 <see cref="F:System.Messaging.Message.InfiniteTimeout" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-642">The default is <see cref="F:System.Messaging.Message.InfiniteTimeout" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-643">如果由属性指定的时间间隔在 <xref:System.Messaging.Message.TimeToReachQueue%2A> 消息到达其目标之前过期，则消息队列将通过以下两种方式之一丢弃消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-643">If the interval specified by the <xref:System.Messaging.Message.TimeToReachQueue%2A> property expires before the message reaches its destination, Message Queuing discards the message in one of two ways.</span></span> <span data-ttu-id="8fcc6-644">如果消息的 <xref:System.Messaging.Message.UseDeadLetterQueue%2A> 属性为 `true`，则将该消息发送到死信队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-644">If the message's <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property is `true`, the message is sent to the dead-letter queue.</span></span> <span data-ttu-id="8fcc6-645">如果 <xref:System.Messaging.Message.UseDeadLetterQueue%2A> 为 `false` ，则忽略消息</span><span class="sxs-lookup"><span data-stu-id="8fcc6-645">If <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `false`, the message is ignored</span></span>  
  
 <span data-ttu-id="8fcc6-646"><xref:System.Messaging.Message.AcknowledgeType%2A>如果消息不会在计时器过期前到达，则可以设置该消息的属性，请求消息队列向发送应用程序发送否定确认消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-646">You can set he message's <xref:System.Messaging.Message.AcknowledgeType%2A> property to request that Message Queuing send a negative acknowledgment message back to the sending application if the message does not arrive before the timer expires.</span></span>  
  
 <span data-ttu-id="8fcc6-647">如果该 <xref:System.Messaging.Message.TimeToReachQueue%2A> 属性设置为0秒，则消息队列将尝试将消息发送到其目标-如果队列正在等待消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-647">If the <xref:System.Messaging.Message.TimeToReachQueue%2A> property is set to 0 seconds, Message Queuing tries once to send the message to its destination - if the queue is waiting for the message.</span></span> <span data-ttu-id="8fcc6-648">如果队列是本地的，则消息始终到达该队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-648">If the queue is local, the message always reaches it.</span></span>  
  
 <span data-ttu-id="8fcc6-649">如果由属性指定的值 <xref:System.Messaging.Message.TimeToReachQueue%2A> 大于属性指定的值 <xref:System.Messaging.Message.TimeToBeReceived%2A> ，则 <xref:System.Messaging.Message.TimeToBeReceived%2A> 优先使用。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-649">If the value specified by the <xref:System.Messaging.Message.TimeToReachQueue%2A> property is greater than the value specified by the <xref:System.Messaging.Message.TimeToBeReceived%2A> property, <xref:System.Messaging.Message.TimeToBeReceived%2A> takes precedence.</span></span>  
  
 <span data-ttu-id="8fcc6-650">在单个事务中发送多个消息时，消息队列将使用 <xref:System.Messaging.Message.TimeToReachQueue%2A> 第一条消息的属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-650">When several messages are sent in a single transaction, Message Queuing uses the <xref:System.Messaging.Message.TimeToReachQueue%2A> property of the first message.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-651">下面的代码示例获取并设置消息的属性的值 <xref:System.Messaging.Message.TimeToReachQueue%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-651">The following code example gets and sets the value of a message's <xref:System.Messaging.Message.TimeToReachQueue%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-652">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.TimeToReachQueue" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-652">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.TimeToReachQueue" /> property.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="8fcc6-653">为 <see cref="P:System.Messaging.Message.TimeToReachQueue" /> 指定的值无效。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-653">The value specified for <see cref="P:System.Messaging.Message.TimeToReachQueue" /> is invalid.</span></span> <span data-ttu-id="8fcc6-654">它可能表示负数。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-654">It might represent a negative number.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.TimeToBeReceived" />
        <altmember cref="F:System.Messaging.Message.InfiniteTimeout" />
      </Docs>
    </Member>
    <Member MemberName="TransactionId">
      <MemberSignature Language="C#" Value="public string TransactionId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TransactionId" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.TransactionId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TransactionId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TransactionId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TransactionId : string" Usage="System.Messaging.Message.TransactionId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgTransactionId")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgTransactionId")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-655">获取曾包含消息的事务的标识符。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-655">Gets the identifier for the transaction of which the message was a part.</span></span></summary>
        <value><span data-ttu-id="8fcc6-656">与消息关联的事务的标识符。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-656">The identifier for the transaction associated with the message.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-657">接收应用程序使用 <xref:System.Messaging.Message.TransactionId%2A> 属性来验证消息是否是作为特定事务的一部分发送的。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-657">Receiving applications use the <xref:System.Messaging.Message.TransactionId%2A> property to verify that a message was sent as part of a specific transaction.</span></span> <span data-ttu-id="8fcc6-658">事务标识符包含发送计算机的标识符 (前16位) 后跟4个字节的事务序列号。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-658">The transaction identifier contains the identifier of the sending computer (first 16 bits) followed by a 4-byte transaction sequence number.</span></span>  
  
 <span data-ttu-id="8fcc6-659">此属性仅适用于消息队列版本2.0 及更高版本。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-659">This property is available only for Message Queuing version 2.0 and later.</span></span>  
  
 <span data-ttu-id="8fcc6-660">事务标识符不一定是唯一的，因为事务序列号不是持久的，它们会在 2 <sup>20</sup>重新开始。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-660">Transaction identifiers are not guaranteed to be unique, because transaction sequence numbers are not persistent, and they start over again at 2 <sup>20</sup>.</span></span> <span data-ttu-id="8fcc6-661">消息队列仅保证后续事务具有不同的事务序列号。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-661">Message Queuing guarantees only that subsequent transactions will have different transaction sequence numbers.</span></span>  
  
 <span data-ttu-id="8fcc6-662">可以结合使用 <xref:System.Messaging.Message.TransactionId%2A> 属性 <xref:System.Messaging.Message.IsFirstInTransaction%2A> 和和 <xref:System.Messaging.Message.IsLastInTransaction%2A> 属性来验证事务边界。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-662">You can use the <xref:System.Messaging.Message.TransactionId%2A> property along with the <xref:System.Messaging.Message.IsFirstInTransaction%2A> and <xref:System.Messaging.Message.IsLastInTransaction%2A> properties to verify transaction boundaries.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-663">下面的代码示例显示消息的属性的值 <xref:System.Messaging.Message.TransactionId%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-663">The following code example displays the value of a message's <xref:System.Messaging.Message.TransactionId%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-664">消息尚未发送。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-664">The message has not been sent.</span></span> <span data-ttu-id="8fcc6-665">该属性只能在从队列中检索的消息上读取。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-665">This property can only be read on messages retrieved from a queue.</span></span>  
  
<span data-ttu-id="8fcc6-666">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8fcc6-666">-or-</span></span> 
<span data-ttu-id="8fcc6-667">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.TransactionId" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-667">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.TransactionId" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.IsFirstInTransaction" />
        <altmember cref="P:System.Messaging.Message.IsLastInTransaction" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="TransactionStatusQueue">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue TransactionStatusQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue TransactionStatusQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.TransactionStatusQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property TransactionStatusQueue As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ TransactionStatusQueue { System::Messaging::MessageQueue ^ get(); void set(System::Messaging::MessageQueue ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TransactionStatusQueue : System.Messaging.MessageQueue with get, set" Usage="System.Messaging.Message.TransactionStatusQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgTransactionStatusQueue")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgTransactionStatusQueue")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-668">获取源计算机中的事务状态队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-668">Gets the transaction status queue on the source computer.</span></span></summary>
        <value><span data-ttu-id="8fcc6-669">源计算机中的事务状态队列，用于将确认消息发回发送应用程序。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-669">The transaction status queue on the source computer, which is used for sending acknowledgement messages back to the sending application.</span></span> <span data-ttu-id="8fcc6-670">默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-670">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-671"><xref:System.Messaging.Message.TransactionStatusQueue%2A>属性标识源计算机上的事务队列，该队列接收来自连接器应用程序的已读回执确认。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-671">The <xref:System.Messaging.Message.TransactionStatusQueue%2A> property identifies the transactional queue on the source computer that receives read-receipt acknowledgments from connector applications.</span></span> <span data-ttu-id="8fcc6-672">消息队列在检索发送到外部队列的事务性消息时，将设置属性和连接器应用程序使用属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-672">Message Queuing sets the property, and connector applications use the property when retrieving transactional messages sent to foreign queues.</span></span>  
  
 <span data-ttu-id="8fcc6-673">在非 Microsoft 消息队列的队列系统中存在一个外部队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-673">A foreign queue exists in a queuing system other than Microsoft Message Queuing.</span></span> <span data-ttu-id="8fcc6-674">消息队列通过连接器应用程序与此类队列通信。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-674">Message Queuing communicates with such queues through a connector application.</span></span>  
  
 <span data-ttu-id="8fcc6-675">连接器应用程序可以使用事务状态队列向发送应用程序发送确认消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-675">The connector application can use the transaction status queue to send acknowledgment messages back to the sending application.</span></span> <span data-ttu-id="8fcc6-676">即使发送应用程序未请求其他确认，事务状态队列也应该接收这些确认。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-676">The transaction status queue should receive these acknowledgments even if the sending application does not request other acknowledgments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-677">下面的代码示例显示消息的属性的值 <xref:System.Messaging.Message.TransactionStatusQueue%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-677">The following code example displays the value of a message's <xref:System.Messaging.Message.TransactionStatusQueue%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-678">消息尚未发送。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-678">The message has not been sent.</span></span> <span data-ttu-id="8fcc6-679">该属性只能在从队列中检索的消息上读取。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-679">This property can only be read on messages retrieved from a queue.</span></span>  
  
<span data-ttu-id="8fcc6-680">- 或 -</span><span class="sxs-lookup"><span data-stu-id="8fcc6-680">-or-</span></span> 
<span data-ttu-id="8fcc6-681">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.TransactionStatusQueue" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-681">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.TransactionStatusQueue" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.TransactionId" />
        <altmember cref="P:System.Messaging.Message.AdministrationQueue" />
        <altmember cref="P:System.Messaging.Message.DestinationQueue" />
        <altmember cref="P:System.Messaging.Message.ResponseQueue" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
        <altmember cref="T:System.Messaging.AcknowledgeTypes" />
      </Docs>
    </Member>
    <Member MemberName="UseAuthentication">
      <MemberSignature Language="C#" Value="public bool UseAuthentication { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseAuthentication" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.UseAuthentication" />
      <MemberSignature Language="VB.NET" Value="Public Property UseAuthentication As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseAuthentication { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseAuthentication : bool with get, set" Usage="System.Messaging.Message.UseAuthentication" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgUseAuthentication")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgUseAuthentication")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-682">获取或设置一个值，该值指示消息发送前是否验证了（或是否必须验证）。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-682">Gets or sets a value that indicates whether the message was (or must be) authenticated before being sent.</span></span></summary>
        <value><span data-ttu-id="8fcc6-683">如果发送应用程序请求对消息进行验证，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-683"><see langword="true" /> if the sending application requested authentication for the message; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-684"><xref:System.Messaging.Message.UseAuthentication%2A>属性指定是否需要对消息进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-684">The <xref:System.Messaging.Message.UseAuthentication%2A> property specifies whether the message needs to be authenticated.</span></span> <span data-ttu-id="8fcc6-685">如果发送应用程序请求身份验证，则消息队列会创建数字签名，并使用它在发送消息时对消息进行签名，并在收到消息时对消息进行身份验证。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-685">If the sending application requests authentication, Message Queuing creates a digital signature and uses it to sign the message when it is sent and authenticate the message when it is received.</span></span>  
  
 <span data-ttu-id="8fcc6-686">如果 <xref:System.Messaging.Message.UseAuthentication%2A> 为 `false` 并且向只接受经过身份验证的消息的队列发送消息，则在消息到达队列时将拒绝该消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-686">If <xref:System.Messaging.Message.UseAuthentication%2A> is `false` and a message is sent to a queue that accepts only authenticated messages, the message will be rejected when it reaches the queue.</span></span>  
  
 <span data-ttu-id="8fcc6-687">通过查看消息的属性，不能确定消息是否失败。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-687">You cannot determine if a message failed authentication by looking at its properties.</span></span> <span data-ttu-id="8fcc6-688">消息队列在传递到队列之前会丢弃此类消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-688">Message Queuing discards such messages before they are delivered to the queue.</span></span> <span data-ttu-id="8fcc6-689">但是，如果传递失败阻止消息到达队列，则可以请求发送确认消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-689">However, you can request that an acknowledgment message be sent if a delivery failure prevents a message from arriving in the queue.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-690">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.UseAuthentication" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-690">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.UseAuthentication" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.Authenticated" />
        <altmember cref="P:System.Messaging.Message.ConnectorType" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderName" />
        <altmember cref="P:System.Messaging.Message.AuthenticationProviderType" />
        <altmember cref="P:System.Messaging.Message.DigitalSignature" />
        <altmember cref="P:System.Messaging.MessageQueue.Authenticate" />
        <altmember cref="T:System.Messaging.AcknowledgeTypes" />
        <altmember cref="P:System.Messaging.Message.AttachSenderId" />
      </Docs>
    </Member>
    <Member MemberName="UseDeadLetterQueue">
      <MemberSignature Language="C#" Value="public bool UseDeadLetterQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseDeadLetterQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.UseDeadLetterQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property UseDeadLetterQueue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseDeadLetterQueue { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseDeadLetterQueue : bool with get, set" Usage="System.Messaging.Message.UseDeadLetterQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgUseDeadLetterQueue")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgUseDeadLetterQueue")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-691">获取或设置一个值，该值指示是否将未能传递的消息的副本发送到死信队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-691">Gets or sets a value that indicates whether a copy of the message that could not be delivered should be sent to a dead-letter queue.</span></span></summary>
        <value><span data-ttu-id="8fcc6-692">如果消息传递失败应导致向死信队列发送消息的副本，则为 <see langword="true" />，否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-692"><see langword="true" /> if message-delivery failure should result in a copy of the message being sent to a dead-letter queue; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8fcc6-693">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-693">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-694"><xref:System.Messaging.Message.UseJournalQueue%2A>和 <xref:System.Messaging.Message.UseDeadLetterQueue%2A> 属性指定消息队列跟踪消息的方式。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-694">The <xref:System.Messaging.Message.UseJournalQueue%2A> and <xref:System.Messaging.Message.UseDeadLetterQueue%2A> properties specify how Message Queuing tracks a message.</span></span> <span data-ttu-id="8fcc6-695">如果 <xref:System.Messaging.Message.UseDeadLetterQueue%2A> 为 `true` ，则) 的非事务性消息 (传递失败将导致消息发送到无法传递消息的计算机上的非事务性死信队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-695">If <xref:System.Messaging.Message.UseDeadLetterQueue%2A> is `true`, delivery failure (of a non-transactional message), causes the message to be sent to the non-transactional dead-letter queue on the computer that could not deliver the message.</span></span> <span data-ttu-id="8fcc6-696">例如，消息计时器过期可能会导致传递失败。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-696">Delivery failure could be caused by a message timer expiring, for example.</span></span>  
  
 <span data-ttu-id="8fcc6-697">如果事务消息传递失败，则消息队列会在所有负面和有疑问的情况下将消息发送到源计算机上的事务性死信队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-697">In the case of delivery failure for a transactional message, Message Queuing sends the message to the transactional dead-letter queue on the source machine in all negative and in-doubt cases.</span></span>  
  
 <span data-ttu-id="8fcc6-698">将消息存储在死信队列中时，应定期清除队列，以删除不再需要的消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-698">When you store messages in a dead-letter queue, you should clear the queue periodically to remove messages that are no longer needed.</span></span> <span data-ttu-id="8fcc6-699">死信队列中存储的消息会根据队列所在计算机的大小配额计数。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-699">Messages stored in dead-letter queues count against the size quota for the computer where the queue resides.</span></span> <span data-ttu-id="8fcc6-700">计算机配额由管理员设置，是指为在整个计算机上存储消息而不只是在单个队列中分配的大小。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-700">The computer quota is set by the administrator and refers to the size allocated for storing messages on the whole computer, not just in a single queue.</span></span>  
  
 <span data-ttu-id="8fcc6-701">不创建日志或死信队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-701">You do not create a journal or dead-letter queue.</span></span> <span data-ttu-id="8fcc6-702">这两个都是消息队列生成的系统队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-702">These are both system queues that Message Queuing generates.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-703">下面的代码示例获取并设置消息的属性的值 <xref:System.Messaging.Message.UseDeadLetterQueue%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-703">The following code example gets and sets the value of a message's <xref:System.Messaging.Message.UseDeadLetterQueue%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-704">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.UseDeadLetterQueue" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-704">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.UseDeadLetterQueue" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.UseJournalQueue" />
        <altmember cref="P:System.Messaging.Message.UseTracing" />
      </Docs>
    </Member>
    <Member MemberName="UseEncryption">
      <MemberSignature Language="C#" Value="public bool UseEncryption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseEncryption" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.UseEncryption" />
      <MemberSignature Language="VB.NET" Value="Public Property UseEncryption As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseEncryption { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseEncryption : bool with get, set" Usage="System.Messaging.Message.UseEncryption" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgUseEncryption")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgUseEncryption")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-705">获取或设置一个值，该值指示是否使消息成为私有的。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-705">Gets or sets a value that indicates whether to make the message private.</span></span></summary>
        <value><span data-ttu-id="8fcc6-706">要求消息队列加密消息时为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-706"><see langword="true" /> to require Message Queuing to encrypt the message; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8fcc6-707">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-707">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-708">如果消息是私有的，则在发送和解密消息时，消息的正文会被加密。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-708">If a message is private, its body is encrypted before it is sent and decrypted when it is received.</span></span> <span data-ttu-id="8fcc6-709">若要发送专用消息，发送应用程序必须指定使用加密，并根据需要指定加密算法。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-709">To send a private message, the sending application must specify that encryption be used and, optionally, the encryption algorithm.</span></span>  
  
 <span data-ttu-id="8fcc6-710">发送专用消息时，应用程序不需要执行消息加密。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-710">When sending private messages, your application does not need to perform the message encryption.</span></span> <span data-ttu-id="8fcc6-711">如果你的应用程序在 Microsoft Windows 2000 企业内发送消息，并且该企业有权访问目录服务，则消息队列可以为你加密消息正文。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-711">Message Queuing can encrypt the message body for you if your application is sending messages within a Microsoft Windows 2000 enterprise, which has access to the directory service.</span></span> <span data-ttu-id="8fcc6-712">接收专用消息时，接收队列管理器始终会解密消息正文。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-712">When receiving private messages, the receiving Queue Manager always decrypts the message body.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-713">下面的代码示例获取并设置消息的属性的值 <xref:System.Messaging.Message.UseEncryption%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-713">The following code example gets and sets the value of a message's <xref:System.Messaging.Message.UseEncryption%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-714">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.UseEncryption" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-714">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.UseEncryption" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.EncryptionAlgorithm" />
        <altmember cref="P:System.Messaging.MessageQueue.EncryptionRequired" />
      </Docs>
    </Member>
    <Member MemberName="UseJournalQueue">
      <MemberSignature Language="C#" Value="public bool UseJournalQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseJournalQueue" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.UseJournalQueue" />
      <MemberSignature Language="VB.NET" Value="Public Property UseJournalQueue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseJournalQueue { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseJournalQueue : bool with get, set" Usage="System.Messaging.Message.UseJournalQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgUseJournalQueue")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgUseJournalQueue")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-715">获取或设置一个值，该值指示是否在始发计算机的计算机日记中保留消息的副本。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-715">Gets or sets a value that indicates whether a copy of the message should be kept in a machine journal on the originating computer.</span></span></summary>
        <value><span data-ttu-id="8fcc6-716">在成功地将消息从始发计算机传输到下一个服务器后，要求在始发计算机的计算机日记中保留消息副本时为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-716"><see langword="true" /> to require that a copy of a message be kept in the originating computer's machine journal after the message has been successfully transmitted (from the originating computer to the next server); otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8fcc6-717">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-717">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-718"><xref:System.Messaging.Message.UseJournalQueue%2A>和 <xref:System.Messaging.Message.UseDeadLetterQueue%2A> 属性指定消息队列跟踪消息的方式。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-718">The <xref:System.Messaging.Message.UseJournalQueue%2A> and <xref:System.Messaging.Message.UseDeadLetterQueue%2A> properties specify how Message Queuing tracks a message.</span></span> <span data-ttu-id="8fcc6-719">如果 <xref:System.Messaging.Message.UseJournalQueue%2A> 为 `true` ，则在传输消息的每个步骤中，将副本保存在原始计算机上的计算机日志中。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-719">If <xref:System.Messaging.Message.UseJournalQueue%2A> is `true`, then a copy is kept in the computer journal on the originating machine at each step that a message is transmitted.</span></span>  
  
 <span data-ttu-id="8fcc6-720">如果目标队列位于远程计算机上，则仅将发送的消息复制到日记队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-720">The sent message is only copied to the journal queue if the destination queue is on a remote computer.</span></span> <span data-ttu-id="8fcc6-721">如果目标在本地计算机上，则该消息将直接发送到队列;无需执行日记操作的中间步骤。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-721">If the destination is on the local computer, the message is sent directly to the queue; there are no intermediate steps to require journaling.</span></span>  
  
 <span data-ttu-id="8fcc6-722">在日志队列中存储消息时，请定期清除队列，以删除不再需要的消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-722">When you store messages in a journal queue, clear the queue periodically to remove messages that are no longer needed.</span></span> <span data-ttu-id="8fcc6-723">日志队列中存储的消息会根据队列所在的计算机的配额计数。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-723">Messages stored in journal queues count against the quota for the computer where the queue resides.</span></span> <span data-ttu-id="8fcc6-724"> (管理员设置计算机配额。 ) </span><span class="sxs-lookup"><span data-stu-id="8fcc6-724">(The computer quota is set by the administrator.)</span></span>  
  
 <span data-ttu-id="8fcc6-725">不创建日志或死信队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-725">You do not create a journal or dead-letter queue.</span></span> <span data-ttu-id="8fcc6-726">这两个都是消息队列生成的系统队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-726">These are both system queues that Message Queuing generates.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-727">下面的代码示例获取并设置消息的属性的值 <xref:System.Messaging.Message.UseJournalQueue%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-727">The following code example gets and sets the value of a message's <xref:System.Messaging.Message.UseJournalQueue%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-728">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.UseJournalQueue" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-728">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.UseJournalQueue" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.UseDeadLetterQueue" />
        <altmember cref="P:System.Messaging.Message.UseTracing" />
        <altmember cref="P:System.Messaging.MessageQueue.UseJournalQueue" />
        <altmember cref="P:System.Messaging.MessageQueue.MaximumJournalSize" />
      </Docs>
    </Member>
    <Member MemberName="UseTracing">
      <MemberSignature Language="C#" Value="public bool UseTracing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseTracing" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.Message.UseTracing" />
      <MemberSignature Language="VB.NET" Value="Public Property UseTracing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseTracing { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseTracing : bool with get, set" Usage="System.Messaging.Message.UseTracing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.ReadOnly(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.ReadOnly(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Messaging.MessagingDescription("MsgUseTracing")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Messaging.MessagingDescription("MsgUseTracing")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="8fcc6-729">获取或设置一个值，该值指示是否在消息向目标队列移动的过程中跟踪消息。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-729">Gets or sets a value that indicates whether to trace a message as it moves toward its destination queue.</span></span></summary>
        <value><span data-ttu-id="8fcc6-730">如果在发往目标队列的过程中，由原始消息产生的每个中间步骤都生成发送给系统报告队列的报告，则为 <see langword="true" />，否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-730"><see langword="true" /> if each intermediate step made by the original message en route to the destination queue generates a report to be sent to the system's report queue; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="8fcc6-731">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-731">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8fcc6-732"><xref:System.Messaging.Message.UseTracing%2A>属性指定在消息到达目标队列时是否跟踪该消息的路由。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-732">The <xref:System.Messaging.Message.UseTracing%2A> property specifies whether to track the route of a message as it moves toward its destination queue.</span></span> <span data-ttu-id="8fcc6-733">如果为，则每当消息通过 `true` 消息队列路由服务器时，消息队列) 生成的报表消息 (都将发送到报表队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-733">If `true`, a report message (generated by Message Queuing) is sent to a report queue each time the message passes through a Message Queuing routing server.</span></span> <span data-ttu-id="8fcc6-734">报表队列由源队列管理器指定。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-734">The report queue is specified by the source Queue Manager.</span></span> <span data-ttu-id="8fcc6-735">报表队列并不限于消息队列生成的报表消息;还可以将应用程序生成的消息发送到报表队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-735">Report queues are not limited to report messages generated by Message Queuing; your application-generated messages can also be sent to report queues.</span></span>  
  
 <span data-ttu-id="8fcc6-736">使用跟踪涉及到设置 Active Directory 和为消息队列企业指定报表队列。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-736">Using tracing involves setting up Active Directory and specifying a report queue for the Message Queuing enterprise.</span></span> <span data-ttu-id="8fcc6-737">管理员配置这些设置。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-737">The administrator configures these settings.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8fcc6-738">下面的代码示例获取并设置消息的属性的值 <xref:System.Messaging.Message.UseTracing%2A> 。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-738">The following code example gets and sets the value of a message's <xref:System.Messaging.Message.UseTracing%2A> property.</span></span>  
  
  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="8fcc6-739">消息队列经过筛选后忽略了 <see cref="P:System.Messaging.Message.UseTracing" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="8fcc6-739">The message queue is filtered to ignore the <see cref="P:System.Messaging.Message.UseTracing" /> property.</span></span></exception>
        <altmember cref="P:System.Messaging.Message.UseDeadLetterQueue" />
        <altmember cref="P:System.Messaging.Message.UseJournalQueue" />
      </Docs>
    </Member>
  </Members>
</Type>
