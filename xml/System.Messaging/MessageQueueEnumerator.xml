<Type Name="MessageQueueEnumerator" FullName="System.Messaging.MessageQueueEnumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c1b7141eeeb7a43f95afa09569f8c6dd7c3b9218" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89942805" /></Metadata><TypeSignature Language="C#" Value="public class MessageQueueEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueEnumerator extends System.MarshalByRefObject implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueEnumerator" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueEnumerator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable, IEnumerator" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueEnumerator : MarshalByRefObject, IDisposable, System::Collections::IEnumerator" />
  <TypeSignature Language="F#" Value="type MessageQueueEnumerator = class&#xA;    inherit MarshalByRefObject&#xA;    interface IEnumerator&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="2b97d-101">提供一个只进游标，用于枚举消息队列中的消息。</span><span class="sxs-lookup"><span data-stu-id="2b97d-101">Provides a forward-only cursor to enumerate through messages in a message queue.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b97d-102">用于 <xref:System.Messaging.MessageQueueEnumerator> 与网络上的队列进行动态交互。</span><span class="sxs-lookup"><span data-stu-id="2b97d-102">Use <xref:System.Messaging.MessageQueueEnumerator> for dynamic interaction with queues on the network.</span></span> <span data-ttu-id="2b97d-103">通过 <xref:System.Messaging.MessageQueue> 类提供的方法可以返回一个 <xref:System.Messaging.MessageQueueEnumerator> 包含动态队列列表的，也可以返回一个数组，该数组包含调用指定方法时队列集合的快照。</span><span class="sxs-lookup"><span data-stu-id="2b97d-103">Methods available through the <xref:System.Messaging.MessageQueue> class can return either a <xref:System.Messaging.MessageQueueEnumerator> containing a dynamic list of queues, or an array that contains a snapshot of the queue collection at the time the specified method was called.</span></span>  
  
 <span data-ttu-id="2b97d-104">网络中未定义队列的顺序。</span><span class="sxs-lookup"><span data-stu-id="2b97d-104">There is no defined ordering of queues in a network.</span></span> <span data-ttu-id="2b97d-105">它们不是按顺序进行排序，例如，按计算机、标签、公共或私有状态或其他用户可访问的条件。</span><span class="sxs-lookup"><span data-stu-id="2b97d-105">They are not ordered, for example, by computer, label, public or private status, or other user-accessible criteria.</span></span> <span data-ttu-id="2b97d-106"><xref:System.Messaging.MessageQueueEnumerator>是游标，初始化为动态列表的开头。</span><span class="sxs-lookup"><span data-stu-id="2b97d-106">A <xref:System.Messaging.MessageQueueEnumerator> is a cursor, initialized to the head of a dynamic list.</span></span> <span data-ttu-id="2b97d-107">可以通过调用将光标移到枚举的第一个队列 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 。</span><span class="sxs-lookup"><span data-stu-id="2b97d-107">You can move the cursor to the first queue of the enumeration by calling <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>.</span></span> <span data-ttu-id="2b97d-108">枚举器初始化完成后，可以使用前进到 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 剩余队列。</span><span class="sxs-lookup"><span data-stu-id="2b97d-108">After the enumerator has been initialized, you can use <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> to step forward through the remaining queues.</span></span>  
  
 <span data-ttu-id="2b97d-109">不可能向后移动 <xref:System.Messaging.MessageQueueEnumerator> 。</span><span class="sxs-lookup"><span data-stu-id="2b97d-109">It is not possible to step backward with a <xref:System.Messaging.MessageQueueEnumerator>.</span></span> <span data-ttu-id="2b97d-110">游标只允许在队列枚举中向前移动。</span><span class="sxs-lookup"><span data-stu-id="2b97d-110">A cursor only allows forward movement through the queue enumeration.</span></span> <span data-ttu-id="2b97d-111">但是，可以调用 <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> 来重置枚举，并将光标再次置于列表的开头。</span><span class="sxs-lookup"><span data-stu-id="2b97d-111">However, you can call <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> to reset the enumeration and put the cursor at the beginning of the list again.</span></span> <span data-ttu-id="2b97d-112">由于枚举器是动态的，因此，枚举数追加到游标当前位置之外的队列可以由枚举器访问。</span><span class="sxs-lookup"><span data-stu-id="2b97d-112">Because the enumerator is dynamic, a queue that is appended beyond the cursor's current position can be accessed by the enumerator.</span></span> <span data-ttu-id="2b97d-113">如果不首先调用 Reset，则无法访问在游标当前位置之前插入的队列。</span><span class="sxs-lookup"><span data-stu-id="2b97d-113">A queue that is inserted before the cursor's current position cannot be accessed without first calling Reset.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2b97d-114">下面的代码示例将循环访问网络中的所有消息队列，并检查每个队列的路径。</span><span class="sxs-lookup"><span data-stu-id="2b97d-114">The following code example iterates through all the message queues in the network, and examines the path for each queue.</span></span> <span data-ttu-id="2b97d-115">最后，它显示网络上公用队列的数量。</span><span class="sxs-lookup"><span data-stu-id="2b97d-115">Finally, it displays the number of public queues on the network.</span></span>  
  
 [!code-cpp[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/CPP/mqgetmessagequeueenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/CS/mqgetmessagequeueenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/VB/mqgetmessagequeueenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="messageQueueEnumerator.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2b97d-116">释放与枚举数关联的资源。</span><span class="sxs-lookup"><span data-stu-id="2b97d-116">Frees the resources associated with the enumerator.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b97d-117">操作系统在 <xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A> 游标的生存期内将打开的句柄保留到队列枚举器。</span><span class="sxs-lookup"><span data-stu-id="2b97d-117">The operating system retains an open handle, <xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A>, to the queue enumerator during the lifetime of the cursor.</span></span> <span data-ttu-id="2b97d-118">使用完枚举器后，调用 <xref:System.Messaging.MessageQueueEnumerator.Close%2A> 以释放与句柄关联的资源。</span><span class="sxs-lookup"><span data-stu-id="2b97d-118">When you finish working with the enumerator, call <xref:System.Messaging.MessageQueueEnumerator.Close%2A> to release the resources associated with the handle.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueEnumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As MessageQueue" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueue ^ Current { System::Messaging::MessageQueue ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : System.Messaging.MessageQueue" Usage="System.Messaging.MessageQueueEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b97d-119">获取枚举的当前 <see cref="T:System.Messaging.MessageQueue" />。</span><span class="sxs-lookup"><span data-stu-id="2b97d-119">Gets the current <see cref="T:System.Messaging.MessageQueue" /> of the enumeration.</span></span></summary>
        <value><span data-ttu-id="2b97d-120">游标当前所在的队列。</span><span class="sxs-lookup"><span data-stu-id="2b97d-120">The queue at which the cursor is currently positioned.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b97d-121">创建枚举器后，它不会指向任何内容，因此无效， <xref:System.Messaging.MessageQueueEnumerator.Current%2A> 如果访问，将引发异常。</span><span class="sxs-lookup"><span data-stu-id="2b97d-121">When the enumerator is created, it does not point to anything, so <xref:System.Messaging.MessageQueueEnumerator.Current%2A> is not valid and will throw an exception if it is accessed.</span></span> <span data-ttu-id="2b97d-122">您必须调用 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 以将游标定位到枚举中的第一个队列。</span><span class="sxs-lookup"><span data-stu-id="2b97d-122">You must call <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> to position the cursor at the first queue in the enumeration.</span></span>  
  
 <span data-ttu-id="2b97d-123">对 <xref:System.Messaging.MessageQueueEnumerator.Current%2A> 没有干预调用的多个调用 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 将返回相同的 <xref:System.Messaging.MessageQueue> 对象。</span><span class="sxs-lookup"><span data-stu-id="2b97d-123">Multiple calls to <xref:System.Messaging.MessageQueueEnumerator.Current%2A> with no intervening calls to <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> will return the same <xref:System.Messaging.MessageQueue> object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="2b97d-124">您在第一次调用 <see cref="P:System.Messaging.MessageQueueEnumerator.Current" /> 之前调用了 <see cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />。</span><span class="sxs-lookup"><span data-stu-id="2b97d-124">You called <see cref="P:System.Messaging.MessageQueueEnumerator.Current" /> before the first call to <see cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />.</span></span> <span data-ttu-id="2b97d-125">游标位于枚举中的第一个队列之前。</span><span class="sxs-lookup"><span data-stu-id="2b97d-125">The cursor is located before the first queue in the enumeration.</span></span>  
  
<span data-ttu-id="2b97d-126">- 或 -</span><span class="sxs-lookup"><span data-stu-id="2b97d-126">-or-</span></span> 
<span data-ttu-id="2b97d-127">您在对 <see cref="P:System.Messaging.MessageQueueEnumerator.Current" /> 的调用返回假（指示游标位于枚举中的最后一个队列之后）后调用了 <see cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />。</span><span class="sxs-lookup"><span data-stu-id="2b97d-127">You called <see cref="P:System.Messaging.MessageQueueEnumerator.Current" /> after a call to <see cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" /> had returned false (indicating the cursor is located after the last queue in the enumeration).</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.Reset" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="2b97d-128">释放由 <see cref="T:System.Messaging.MessageQueueEnumerator" /> 占用的资源。</span><span class="sxs-lookup"><span data-stu-id="2b97d-128">Releases the resources used by the <see cref="T:System.Messaging.MessageQueueEnumerator" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageQueueEnumerator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2b97d-129">释放由 <see cref="T:System.Messaging.MessageQueueEnumerator" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="2b97d-129">Releases all resources used by the <see cref="T:System.Messaging.MessageQueueEnumerator" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b97d-130">调用 <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> 会允许出于其他目的重新分配所使用的资源 <xref:System.Messaging.MessageQueueEnumerator> 。</span><span class="sxs-lookup"><span data-stu-id="2b97d-130">Calling <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageQueueEnumerator> to be reallocated for other purposes.</span></span> <span data-ttu-id="2b97d-131">有关的详细信息 <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> ，请参阅 [清理非托管资源](/dotnet/standard/garbage-collection/unmanaged)。</span><span class="sxs-lookup"><span data-stu-id="2b97d-131">For more information about <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A>, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged).</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/standard/garbage-collection/unmanaged"><span data-ttu-id="2b97d-132">清理非托管资源</span><span class="sxs-lookup"><span data-stu-id="2b97d-132">Cleaning Up Unmanaged Resources</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageQueueEnumerator.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="2b97d-133">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2b97d-133"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="2b97d-134">释放由 <see cref="T:System.Messaging.MessageQueueEnumerator" /> 占用的非托管资源，还可以另外再释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="2b97d-134">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageQueueEnumerator" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b97d-135">此方法由公共 <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> 方法和 <xref:System.Object.Finalize%2A> 方法调用。</span><span class="sxs-lookup"><span data-stu-id="2b97d-135">This method is called by the public <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="2b97d-136">`Dispose` 调用受保护的 `Dispose(Boolean)` 方法，并将 `disposing` 参数设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="2b97d-136">`Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="2b97d-137"><xref:System.Object.Finalize%2A>`Dispose`在设置为的情况调用 `disposing` `false` 。</span><span class="sxs-lookup"><span data-stu-id="2b97d-137"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="2b97d-138">当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.Messaging.MessageQueueEnumerator> 引用的、由任何托管对象持有的全部资源。</span><span class="sxs-lookup"><span data-stu-id="2b97d-138">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueEnumerator> references.</span></span> <span data-ttu-id="2b97d-139">此方法将调用每个被引用对象的 `Dispose` 方法。</span><span class="sxs-lookup"><span data-stu-id="2b97d-139">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="2b97d-140">
            <see langword="Dispose" /> 可以由其他对象多次调用。</span><span class="sxs-lookup"><span data-stu-id="2b97d-140">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="2b97d-141">重写 <see langword="Dispose(Boolean)" /> 时，请注意不要引用在以前调用 <see langword="Dispose" /> 时已释放的对象。</span><span class="sxs-lookup"><span data-stu-id="2b97d-141">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="2b97d-142">有关如何实现的详细信息 <see langword="Dispose" /> ，请参阅 [实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)。</span><span class="sxs-lookup"><span data-stu-id="2b97d-142">For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](/dotnet/standard/garbage-collection/implementing-dispose).</span></span>  
  
<span data-ttu-id="2b97d-143">有关和的详细 <see langword="Dispose" /> 信息 <see langword="Finalize" /> ，请参阅 [清理非托管资源](/dotnet/standard/garbage-collection/unmanaged) 和 [重写 Finalize 方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="2b97d-143">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
        <related type="Article" href="/dotnet/standard/garbage-collection/implementing-dispose"><span data-ttu-id="2b97d-144">实现 Dispose 方法</span><span class="sxs-lookup"><span data-stu-id="2b97d-144">Implementing a Dispose method</span></span></related>
        <related type="Article" href="/dotnet/standard/garbage-collection/unmanaged"><span data-ttu-id="2b97d-145">清理非托管资源</span><span class="sxs-lookup"><span data-stu-id="2b97d-145">Cleaning Up Unmanaged Resources</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageQueueEnumerator ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageQueueEnumerator.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2b97d-146">释放队列控制的资源。</span><span class="sxs-lookup"><span data-stu-id="2b97d-146">Releases the resources held by the queue.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<span data-ttu-id="2b97d-147">此方法重写 <xref:System.Object.Finalize>。</span><span class="sxs-lookup"><span data-stu-id="2b97d-147">This method overrides <xref:System.Object.Finalize>.</span></span> <span data-ttu-id="2b97d-148">应用程序代码不应调用此方法;在垃圾回收过程中会自动调用对象的 Finalize 方法，除非通过对方法的调用禁用了垃圾回收器终止 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="2b97d-148">Application code should not call this method; an object's Finalize method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>

<span data-ttu-id="2b97d-149">有关详细信息，请参阅 [Finalize 方法和析构函数](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v=vs.100))、 [清理非托管资源](/dotnet/standard/garbage-collection/unmanaged)和 [重写 Finalize 方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="2b97d-149">For more information, see [Finalize Methods and Destructors](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v=vs.100)), [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged), and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span>

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocatorHandle">
      <MemberSignature Language="C#" Value="public IntPtr LocatorHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int LocatorHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueEnumerator.LocatorHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocatorHandle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr LocatorHandle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.LocatorHandle : nativeint" Usage="System.Messaging.MessageQueueEnumerator.LocatorHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b97d-150">获取用于在网络中定位队列的本机消息队列句柄。</span><span class="sxs-lookup"><span data-stu-id="2b97d-150">Gets the native Message Queuing handle used to locate queues in a network.</span></span></summary>
        <value><span data-ttu-id="2b97d-151">当前队列的本机句柄。</span><span class="sxs-lookup"><span data-stu-id="2b97d-151">The native handle to the current queue.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b97d-152">如果不再需要此 <xref:System.Messaging.MessageQueueEnumerator> 实例，请调用 <xref:System.Messaging.MessageQueueEnumerator.Close%2A> 以释放资源的此句柄。</span><span class="sxs-lookup"><span data-stu-id="2b97d-152">When you no longer need this <xref:System.Messaging.MessageQueueEnumerator> instance, call <xref:System.Messaging.MessageQueueEnumerator.Close%2A> to free this handle to the resource.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="2b97d-153">此句柄不存在。</span><span class="sxs-lookup"><span data-stu-id="2b97d-153">The handle does not exist.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="2b97d-154">调用代码没有浏览权限。</span><span class="sxs-lookup"><span data-stu-id="2b97d-154">The calling code does not have browse permissions.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueueEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool MoveNext();" />
      <MemberSignature Language="F#" Value="abstract member MoveNext : unit -&gt; bool&#xA;override this.MoveNext : unit -&gt; bool" Usage="messageQueueEnumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.MoveNext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2b97d-155">如果当前有可用的枚举数，使该枚举数前进到枚举的下一个队列。</span><span class="sxs-lookup"><span data-stu-id="2b97d-155">Advances the enumerator to the next queue of the enumeration, if one is currently available.</span></span></summary>
        <returns><span data-ttu-id="2b97d-156">如果枚举数成功地前进到了下一个队列，则为 <see langword="true" />；如果枚举数已经到达枚举的末尾，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="2b97d-156"><see langword="true" /> if the enumerator was successfully advanced to the next queue; <see langword="false" /> if the enumerator has reached the end of the enumeration.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b97d-157"><xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>`false`如果没有与枚举关联的队列，则立即返回。</span><span class="sxs-lookup"><span data-stu-id="2b97d-157"><xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> returns `false` immediately if there are no queues associated with the enumeration.</span></span>  
  
 <span data-ttu-id="2b97d-158"><xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 将返回， `true` 直到它到达集合的末尾。</span><span class="sxs-lookup"><span data-stu-id="2b97d-158"><xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> will return `true` until it has reached the end of the collection.</span></span> <span data-ttu-id="2b97d-159">然后，它将 `false` 针对每个连续调用返回。</span><span class="sxs-lookup"><span data-stu-id="2b97d-159">It will then return `false` for each successive call.</span></span> <span data-ttu-id="2b97d-160">但一旦 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 返回 `false` ，访问 <xref:System.Messaging.MessageQueueEnumerator.Current%2A> 属性将引发异常。</span><span class="sxs-lookup"><span data-stu-id="2b97d-160">However once <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> has returned `false`, accessing the <xref:System.Messaging.MessageQueueEnumerator.Current%2A> property will throw an exception.</span></span>  
  
 <span data-ttu-id="2b97d-161">创建时，枚举器在概念上放置在第一个 <xref:System.Messaging.MessageQueue> 枚举之前，第一次调用会使 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 枚举的第一个队列进入视图。</span><span class="sxs-lookup"><span data-stu-id="2b97d-161">Upon creation, an enumerator is conceptually positioned before the first <xref:System.Messaging.MessageQueue> of the enumeration, and the first call to <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> brings the first queue of the enumeration into view.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="2b97d-162">调用代码没有浏览权限。</span><span class="sxs-lookup"><span data-stu-id="2b97d-162">The calling code does not have browse permissions.</span></span></exception>
        <altmember cref="P:System.Messaging.MessageQueueEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.Reset" />
        <altmember cref="T:System.Messaging.MessageQueue" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="messageQueueEnumerator.Reset " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerator.Reset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="2b97d-163">重置游标，使其指向枚举的开头。</span><span class="sxs-lookup"><span data-stu-id="2b97d-163">Resets the cursor, so it points to the beginning of the enumeration.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2b97d-164">枚举器按只进方向移动。</span><span class="sxs-lookup"><span data-stu-id="2b97d-164">An enumerator moves in a forward-only direction.</span></span> <span data-ttu-id="2b97d-165">使用此方法返回到队列的枚举的开头。</span><span class="sxs-lookup"><span data-stu-id="2b97d-165">Use this method to return to the beginning of the enumeration of queues.</span></span>  
  
 <span data-ttu-id="2b97d-166"><xref:System.Messaging.MessageQueueEnumerator.Reset%2A> 将游标定位到列表中的第一个队列。</span><span class="sxs-lookup"><span data-stu-id="2b97d-166"><xref:System.Messaging.MessageQueueEnumerator.Reset%2A> positions the cursor at the first queue in the list.</span></span> <span data-ttu-id="2b97d-167">在调用后，您无需调用将 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> 游标向前移动到枚举中的第一个队列。</span><span class="sxs-lookup"><span data-stu-id="2b97d-167">You do not need to call <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> after calling <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> to move the cursor forward to the first queue in the enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageQueueEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Current As Object Implements IEnumerator.Current" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IEnumerator::Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.IEnumerator.Current : obj" Usage="System.Collections.IEnumerator.Current" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IEnumerator.Current</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="2b97d-168">获取枚举的当前 <see cref="T:System.Messaging.MessageQueue" />。</span><span class="sxs-lookup"><span data-stu-id="2b97d-168">Gets the current <see cref="T:System.Messaging.MessageQueue" /> of the enumeration.</span></span></summary>
        <value><span data-ttu-id="2b97d-169">游标当前所在的队列。</span><span class="sxs-lookup"><span data-stu-id="2b97d-169">The queue at which the cursor is currently positioned.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
