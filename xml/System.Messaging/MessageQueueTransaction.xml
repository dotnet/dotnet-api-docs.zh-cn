<Type Name="MessageQueueTransaction" FullName="System.Messaging.MessageQueueTransaction">
  <Metadata><Meta Name="ms.openlocfilehash" Value="727f94b84fb3059cd238ddb0db653c4a2697a109" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89819153" /></Metadata><TypeSignature Language="C#" Value="public class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueTransaction extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueTransaction" />
  <TypeSignature Language="VB.NET" Value="Public Class MessageQueueTransaction&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="F#" Value="type MessageQueueTransaction = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="0c372-101">提供消息队列内部事务。</span><span class="sxs-lookup"><span data-stu-id="0c372-101">Provides a Message Queuing internal transaction.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c372-102">若要在事务中发送或接收消息，可以使用 <xref:System.Messaging.MessageQueueTransaction> 类创建事务，并将其传递给方法的重载 <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> 或 <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> 采用参数的方法 `transaction` 。</span><span class="sxs-lookup"><span data-stu-id="0c372-102">To send or receive a message as part of a transaction, you can use the <xref:System.Messaging.MessageQueueTransaction> class to create a transaction and pass it to an overload of the <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=nameWithType> method or the <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=nameWithType> method that takes a `transaction` parameter.</span></span> <span data-ttu-id="0c372-103">作为事务的一部分发送的消息必须发送到事务性队列。</span><span class="sxs-lookup"><span data-stu-id="0c372-103">Messages sent as part of a transaction must be sent to transactional queues.</span></span> <span data-ttu-id="0c372-104">必须使用指定的事务接收从事务性队列接收的消息。</span><span class="sxs-lookup"><span data-stu-id="0c372-104">Messages received from transactional queues must be received using a specified transaction.</span></span>  
  
 <span data-ttu-id="0c372-105">除了 <xref:System.Messaging.MessageQueue.Receive%2A> 方法之外，还可以接收具有指定标识符或指定相关标识符的消息。</span><span class="sxs-lookup"><span data-stu-id="0c372-105">In addition to the <xref:System.Messaging.MessageQueue.Receive%2A> method, you can receive messages with a specified identifier or specified correlation identifier.</span></span> <span data-ttu-id="0c372-106">有关 <xref:System.Messaging.MessageQueue.ReceiveById%2A> <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> 有选择地接收来自事务性队列的消息的详细信息，请参阅和方法。</span><span class="sxs-lookup"><span data-stu-id="0c372-106">See the <xref:System.Messaging.MessageQueue.ReceiveById%2A> and <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> methods for more information about selectively receiving messages from transactional queues.</span></span>  
  
 <span data-ttu-id="0c372-107">如果提交事务，则会删除发送到事务性队列的消息。</span><span class="sxs-lookup"><span data-stu-id="0c372-107">Messages sent to transactional queues are removed if the transaction is committed.</span></span> <span data-ttu-id="0c372-108">同样，如果事务回滚，则从事务性队列收到的消息将返回到队列。</span><span class="sxs-lookup"><span data-stu-id="0c372-108">Similarly, messages received from transactional queues are returned to the queue if the transaction is rolled back.</span></span>  
  
 <span data-ttu-id="0c372-109">如果实例化 <xref:System.Messaging.MessageQueueTransaction> 并将其传递到方法或方法的适当重载， <xref:System.Messaging.MessageQueue.Send%2A> 以将 <xref:System.Messaging.MessageQueue.Receive%2A> 消息发送到非事务性队列或从非事务性队列接收消息，则该方法将引发异常，指示 "事务使用错误"。</span><span class="sxs-lookup"><span data-stu-id="0c372-109">If you instantiate a <xref:System.Messaging.MessageQueueTransaction> and pass it to an applicable overload of the <xref:System.Messaging.MessageQueue.Send%2A> method or <xref:System.Messaging.MessageQueue.Receive%2A> method to send a message to a non-transactional queue or receive a message from a non-transactional queue, the method throws an exception that indicates "Wrong Transaction Usage."</span></span>  
  
 <span data-ttu-id="0c372-110"><xref:System.Messaging.MessageQueueTransaction> 线程单元感知，因此，如果单元状态为 `STA` ，则不能在多个线程中使用事务。</span><span class="sxs-lookup"><span data-stu-id="0c372-110"><xref:System.Messaging.MessageQueueTransaction> is threading apartment aware, so if your apartment state is `STA`, you cannot use the transaction in multiple threads.</span></span> <span data-ttu-id="0c372-111">Visual Basic 将主线程的状态设置为 `STA` ，因此你必须 <xref:System.MTAThreadAttribute> 在子例程中应用 `Main` 。</span><span class="sxs-lookup"><span data-stu-id="0c372-111">Visual Basic sets the state of the main thread to `STA`, so you must apply the <xref:System.MTAThreadAttribute> in the `Main` subroutine.</span></span> <span data-ttu-id="0c372-112">否则，利用另一个线程发送事务性消息将引发 <xref:System.Messaging.MessageQueueException> 异常。</span><span class="sxs-lookup"><span data-stu-id="0c372-112">Otherwise, sending a transactional message using another thread throws a <xref:System.Messaging.MessageQueueException> exception.</span></span> <span data-ttu-id="0c372-113"><xref:System.MTAThreadAttribute>使用以下片段应用。</span><span class="sxs-lookup"><span data-stu-id="0c372-113">You apply the <xref:System.MTAThreadAttribute> by using the following fragment.</span></span>  
  
```vb  
<System.MTAThreadAttribute>  
 public sub Main()  
```  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="0c372-114">此类型是线程安全的。</span><span class="sxs-lookup"><span data-stu-id="0c372-114">This type is thread safe.</span></span></threadsafe>
    <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
    <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MessageQueueTransaction();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0c372-115">初始化 <see cref="T:System.Messaging.MessageQueueTransaction" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="0c372-115">Initializes a new instance of the <see cref="T:System.Messaging.MessageQueueTransaction" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c372-116">此构造函数将 <xref:System.Messaging.MessageQueueTransaction.Status%2A> 属性设置为 `Initialized` 。</span><span class="sxs-lookup"><span data-stu-id="0c372-116">This constructor sets the <xref:System.Messaging.MessageQueueTransaction.Status%2A> property to `Initialized`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Abort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Abort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Abort();" />
      <MemberSignature Language="F#" Value="member this.Abort : unit -&gt; unit" Usage="messageQueueTransaction.Abort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0c372-117">回滚正挂起的内部事务。</span><span class="sxs-lookup"><span data-stu-id="0c372-117">Rolls back the pending internal transaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c372-118"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> 标记在调用时开始的进程的未成功完成 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> 。</span><span class="sxs-lookup"><span data-stu-id="0c372-118"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> marks the unsuccessful completion of a process begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="0c372-119">通常，一种方式是在 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> `Try...Catch` 异常处理块中调用，并在子句中放置对的调用， <xref:System.Messaging.MessageQueueTransaction.Commit%2A> `Try` 并在 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> 子句中调用 `Catch` 。</span><span class="sxs-lookup"><span data-stu-id="0c372-119">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 <span data-ttu-id="0c372-120"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> 回滚整个事务。</span><span class="sxs-lookup"><span data-stu-id="0c372-120"><xref:System.Messaging.MessageQueueTransaction.Abort%2A> rolls back the entire transaction.</span></span> <span data-ttu-id="0c372-121">这包括调用后发送或接收的所有消息 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> 。</span><span class="sxs-lookup"><span data-stu-id="0c372-121">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0c372-122">您正尝试回滚的内部事务尚未开始。</span><span class="sxs-lookup"><span data-stu-id="0c372-122">The internal transaction you are attempting to roll back has not started.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="0c372-123">发生内部消息队列错误。</span><span class="sxs-lookup"><span data-stu-id="0c372-123">An internal Message Queuing error occurs.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Begin" />
      <MemberSignature Language="VB.NET" Value="Public Sub Begin ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Begin();" />
      <MemberSignature Language="F#" Value="member this.Begin : unit -&gt; unit" Usage="messageQueueTransaction.Begin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0c372-124">开始新的消息队列内部事务。</span><span class="sxs-lookup"><span data-stu-id="0c372-124">Begins a new Message Queuing internal transaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c372-125"><xref:System.Messaging.MessageQueueTransaction.Begin%2A> 标记将提交或回滚的处理的开始时间，这取决于事务是否成功。</span><span class="sxs-lookup"><span data-stu-id="0c372-125"><xref:System.Messaging.MessageQueueTransaction.Begin%2A> marks the start of processing that will be committed or rolled back, depending on the success of the transaction.</span></span> <span data-ttu-id="0c372-126">如果在处理过程中发生异常，则将回滚整个事务。</span><span class="sxs-lookup"><span data-stu-id="0c372-126">If an exception occurs during processing, the entire transaction is rolled back.</span></span> <span data-ttu-id="0c372-127">这包括调用后发送或接收的所有消息 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> 。</span><span class="sxs-lookup"><span data-stu-id="0c372-127">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="0c372-128">通常，一种方式是在 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> `Try...Catch` 异常处理块中调用，并在子句中放置对的调用， <xref:System.Messaging.MessageQueueTransaction.Commit%2A> `Try` 并在 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> 子句中调用 `Catch` 。</span><span class="sxs-lookup"><span data-stu-id="0c372-128">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0c372-129">事务已开始。</span><span class="sxs-lookup"><span data-stu-id="0c372-129">The transaction has already been started.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="0c372-130">发生内部消息队列错误。</span><span class="sxs-lookup"><span data-stu-id="0c372-130">An internal Message Queuing error occurs.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Commit();" />
      <MemberSignature Language="F#" Value="member this.Commit : unit -&gt; unit" Usage="messageQueueTransaction.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0c372-131">提交正挂起的内部事务。</span><span class="sxs-lookup"><span data-stu-id="0c372-131">Commits a pending internal transaction.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c372-132"><xref:System.Messaging.MessageQueueTransaction.Commit%2A> 标记在对的调用后开始处理的成功完成 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> 。</span><span class="sxs-lookup"><span data-stu-id="0c372-132"><xref:System.Messaging.MessageQueueTransaction.Commit%2A> marks the successful completion of processing begun at a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span> <span data-ttu-id="0c372-133">如果调用和对的调用之间发生异常 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> <xref:System.Messaging.MessageQueueTransaction.Commit%2A> ，则将回滚整个事务。</span><span class="sxs-lookup"><span data-stu-id="0c372-133">If an exception occurs between the call the <xref:System.Messaging.MessageQueueTransaction.Begin%2A> and the call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, the entire transaction is rolled back.</span></span> <span data-ttu-id="0c372-134">这包括调用后发送或接收的所有消息 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> 。</span><span class="sxs-lookup"><span data-stu-id="0c372-134">This includes all messages sent or received after the call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</span></span>  
  
 <span data-ttu-id="0c372-135">通常，一种方式是在 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> `Try...Catch` 异常处理块中调用，并在子句中放置对的调用， <xref:System.Messaging.MessageQueueTransaction.Commit%2A> `Try` 并在 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> 子句中调用 `Catch` 。</span><span class="sxs-lookup"><span data-stu-id="0c372-135">Typically, one makes a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> within a `Try...Catch` exception-handling block, putting a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> in the `Try` clause, and a call to <xref:System.Messaging.MessageQueueTransaction.Abort%2A> in the `Catch` clause.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="0c372-136">尚未开始正尝试提交的事务。</span><span class="sxs-lookup"><span data-stu-id="0c372-136">The transaction you are trying to commit has not started.</span></span></exception>
        <exception cref="T:System.Messaging.MessageQueueException"><span data-ttu-id="0c372-137">发生内部消息队列错误。</span><span class="sxs-lookup"><span data-stu-id="0c372-137">An internal Message Queuing error occurs.</span></span></exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="0c372-138">释放由 <see cref="T:System.Messaging.MessageQueueTransaction" /> 占用的资源。</span><span class="sxs-lookup"><span data-stu-id="0c372-138">Releases the resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="messageQueueTransaction.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0c372-139">释放由 <see cref="T:System.Messaging.MessageQueueTransaction" /> 使用的所有资源。</span><span class="sxs-lookup"><span data-stu-id="0c372-139">Releases all resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c372-140">调用 <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> 会允许出于其他目的重新分配所使用的资源 <xref:System.Messaging.MessageQueueTransaction> 。</span><span class="sxs-lookup"><span data-stu-id="0c372-140">Calling <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageQueueTransaction> to be reallocated for other purposes.</span></span> <span data-ttu-id="0c372-141">有关的详细信息 `Dispose` ，请参阅 [清理非托管资源](/dotnet/standard/garbage-collection/unmanaged)。</span><span class="sxs-lookup"><span data-stu-id="0c372-141">For more information about `Dispose`, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged).</span></span>  
  
 <span data-ttu-id="0c372-142">将回滚所有挂起的内部事务 <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> 。</span><span class="sxs-lookup"><span data-stu-id="0c372-142">Any pending internal transactions are rolled back by <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="messageQueueTransaction.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="0c372-143">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="0c372-143"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="0c372-144">释放由 <see cref="T:System.Messaging.MessageQueueTransaction" /> 占用的非托管资源，还可以另外再释放托管资源。</span><span class="sxs-lookup"><span data-stu-id="0c372-144">Releases the unmanaged resources used by the <see cref="T:System.Messaging.MessageQueueTransaction" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c372-145">此方法由公共 <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> 方法和 <xref:System.Object.Finalize%2A> 方法调用。</span><span class="sxs-lookup"><span data-stu-id="0c372-145">This method is called by the public <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="0c372-146">`Dispose` 调用受保护的 `Dispose(Boolean)` 方法，并将 `disposing` 参数设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="0c372-146">`Dispose` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="0c372-147"><xref:System.Object.Finalize%2A>`Dispose`在设置为的情况调用 `disposing` `false` 。</span><span class="sxs-lookup"><span data-stu-id="0c372-147"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="0c372-148">当 `disposing` 参数为 `true` 时，此方法释放该 <xref:System.Messaging.MessageQueueTransaction> 引用的、由任何托管对象持有的全部资源。</span><span class="sxs-lookup"><span data-stu-id="0c372-148">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueTransaction> references.</span></span> <span data-ttu-id="0c372-149">此方法将调用每个被引用对象的 `Dispose` 方法。</span><span class="sxs-lookup"><span data-stu-id="0c372-149">This method invokes the `Dispose` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="0c372-150">
            <see langword="Dispose" /> 可以由其他对象多次调用。</span><span class="sxs-lookup"><span data-stu-id="0c372-150">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="0c372-151">重写 <see langword="Dispose(Boolean)" /> 时，请注意不要引用在以前调用 <see langword="Dispose" /> 时已释放的对象。</span><span class="sxs-lookup"><span data-stu-id="0c372-151">When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="0c372-152">有关如何实现的详细信息 <see langword="Dispose" /> ，请参阅 [实现 Dispose 方法](/dotnet/standard/garbage-collection/implementing-dispose)。</span><span class="sxs-lookup"><span data-stu-id="0c372-152">For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](/dotnet/standard/garbage-collection/implementing-dispose).</span></span>  
  
<span data-ttu-id="0c372-153">有关和的详细 <see langword="Dispose" /> 信息 <see langword="Finalize" /> ，请参阅 [清理非托管资源](/dotnet/standard/garbage-collection/unmanaged) 和 [重写 Finalize 方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="0c372-153">For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!MessageQueueTransaction ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="messageQueueTransaction.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="0c372-154">释放由当前实例所持有的资源。</span><span class="sxs-lookup"><span data-stu-id="0c372-154">Releases the resources held by the current instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c372-155">此方法重写 <xref:System.Object.Finalize%2A?displayProperty=nameWithType>。</span><span class="sxs-lookup"><span data-stu-id="0c372-155">This method overrides <xref:System.Object.Finalize%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="0c372-156">应用程序代码不应调用此方法; <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> 在垃圾回收过程中会自动调用对象的方法，除非已通过调用方法禁用了垃圾回收器终止 <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="0c372-156">Application code should not call this method; an object's <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="0c372-157">有关详细信息，请参阅 [Finalize 方法和析构函数](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100))、 [清理非托管资源](/dotnet/standard/garbage-collection/unmanaged)和 [重写 Finalize 方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="0c372-157">For more information, see [Finalize Methods and Destructors](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/0s71x931(v%3dvs.100)), [Cleaning Up Unmanaged Resources](/dotnet/standard/garbage-collection/unmanaged), and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueueTransactionStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageQueueTransactionStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueTransaction.Status" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Status As MessageQueueTransactionStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Messaging::MessageQueueTransactionStatus Status { System::Messaging::MessageQueueTransactionStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.Status : System.Messaging.MessageQueueTransactionStatus" Usage="System.Messaging.MessageQueueTransaction.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueueTransactionStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="0c372-158">获取事务的状态。</span><span class="sxs-lookup"><span data-stu-id="0c372-158">Gets the status of the transaction.</span></span></summary>
        <value><span data-ttu-id="0c372-159"><see cref="T:System.Messaging.MessageQueueTransactionStatus" /> 值之一，指示事务是否已被提交、中止、初始化或正被挂起。</span><span class="sxs-lookup"><span data-stu-id="0c372-159">One of the <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> values that indicates whether the transaction has been committed, aborted, initialized, or is pending.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="0c372-160">创建类的实例后 <xref:System.Messaging.MessageQueueTransaction> ， <xref:System.Messaging.MessageQueueTransaction.Status%2A> 由构造函数将设置为 `Initialized` 。</span><span class="sxs-lookup"><span data-stu-id="0c372-160">When an instance of the <xref:System.Messaging.MessageQueueTransaction> class has been created, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is set by the constructor to `Initialized`.</span></span> <span data-ttu-id="0c372-161">调用之后，在 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> 调用 <xref:System.Messaging.MessageQueueTransaction.Commit%2A> 或之前 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> ， <xref:System.Messaging.MessageQueueTransaction.Status%2A> 为 `Pending` 。</span><span class="sxs-lookup"><span data-stu-id="0c372-161">After a call to <xref:System.Messaging.MessageQueueTransaction.Begin%2A> but before a call to <xref:System.Messaging.MessageQueueTransaction.Commit%2A> or <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, the <xref:System.Messaging.MessageQueueTransaction.Status%2A> is `Pending`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.MessageQueueTransactionStatus" />
      </Docs>
    </Member>
  </Members>
</Type>
