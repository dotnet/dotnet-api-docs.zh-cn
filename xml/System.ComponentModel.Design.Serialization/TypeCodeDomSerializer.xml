<Type Name="TypeCodeDomSerializer" FullName="System.ComponentModel.Design.Serialization.TypeCodeDomSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cf21db9d5afb8d7a3f65772a10b16bb4b023599a" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83961714" /></Metadata><TypeSignature Language="C#" Value="public class TypeCodeDomSerializer : System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TypeCodeDomSerializer extends System.ComponentModel.Design.Serialization.CodeDomSerializerBase" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" />
  <TypeSignature Language="VB.NET" Value="Public Class TypeCodeDomSerializer&#xA;Inherits CodeDomSerializerBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeCodeDomSerializer : System::ComponentModel::Design::Serialization::CodeDomSerializerBase" />
  <TypeSignature Language="F#" Value="type TypeCodeDomSerializer = class&#xA;    inherit CodeDomSerializerBase" />
  <AssemblyInfo>
    <AssemblyName>System.Design</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms.Design</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="System.Design" FromVersion="5.0.0.0" To="System.Windows.Forms.Design" ToVersion="5.0.0.0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0" />
    <TypeForwarding From="System.Design" FromVersion="4.0.0.0" To="System.Windows.Forms.Design" ToVersion="4.0.0.0" FrameworkAlternate="netcore-3.0;netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ComponentModel.Design.Serialization.CodeDomSerializerBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Design.Serialization.DefaultSerializationProvider(typeof(System.ComponentModel.Design.Serialization.CodeDomSerializationProvider))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="e3ff2-101">将对象序列化为新类型。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-101">Serializes an object to a new type.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3ff2-102"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer> 类与 <xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>执行相同的任务，但通过此类序列化对象会定义一个新类型。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-102">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer> class performs the same tasks as a <xref:System.ComponentModel.Design.Serialization.CodeDomSerializer>, but serializing an object through this class defines a new type.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
    <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
    <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
    <related type="Article" href="/dotnet/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation"><span data-ttu-id="e3ff2-103">动态源代码生成和编译</span><span class="sxs-lookup"><span data-stu-id="e3ff2-103">Dynamic Source Code Generation and Compilation</span></span></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeCodeDomSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeCodeDomSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e3ff2-104">初始化 <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-104">Initializes a new instance of the <see cref="T:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deserialize">
      <MemberSignature Language="C#" Value="public virtual object Deserialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Deserialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Deserialize (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Deserialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberSignature Language="F#" Value="abstract member Deserialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; obj&#xA;override this.Deserialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; obj" Usage="typeCodeDomSerializer.Deserialize (manager, declaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="e3ff2-105">用于序列化的序列化管理器。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-105">The serialization manager to use for serialization.</span></span></param>
        <param name="declaration"><span data-ttu-id="e3ff2-106">用于序列化的类型声明。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-106">Type declaration to use for serialization.</span></span></param>
        <summary><span data-ttu-id="e3ff2-107">将给定类型声明反序列化。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-107">Deserializes the given type declaration.</span></span></summary>
        <returns><span data-ttu-id="e3ff2-108">根对象。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-108">The root object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3ff2-109"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> 方法反序列化先前序列化的代码类型声明。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-109">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> method deserializes a previously serialized code type declaration.</span></span> <span data-ttu-id="e3ff2-110">下表显示了默认实现执行的任务。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-110">The following table shows the tasks default implementation performs.</span></span>  
  
|<span data-ttu-id="e3ff2-111">任务</span><span class="sxs-lookup"><span data-stu-id="e3ff2-111">Task</span></span>|<span data-ttu-id="e3ff2-112">说明</span><span class="sxs-lookup"><span data-stu-id="e3ff2-112">Description</span></span>|  
|----------|-----------------|  
|<span data-ttu-id="e3ff2-113">区分大小写检查</span><span class="sxs-lookup"><span data-stu-id="e3ff2-113">Case Sensitivity Checks</span></span>|<span data-ttu-id="e3ff2-114">实现搜索 <xref:System.CodeDom.Compiler.CodeDomProvider> 服务，以确定是否应将成员视为区分大小写或不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-114">The implementation searches for a <xref:System.CodeDom.Compiler.CodeDomProvider> service to decide if it should treat members as case sensitive or case insensitive.</span></span>|  
|<span data-ttu-id="e3ff2-115">语句排序</span><span class="sxs-lookup"><span data-stu-id="e3ff2-115">Statement Sorting</span></span>|<span data-ttu-id="e3ff2-116">Init 方法中的所有成员变量和局部变量均存储在一个表中。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-116">All member variables and local variables from init methods are stored in a table.</span></span> <span data-ttu-id="e3ff2-117">然后，init 方法中的每个语句都会添加到根据其左侧分组的语句集合，因此，对特定变量的赋值或操作的所有语句都将在该变量下进行分组。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-117">Then each statement in an init method is added to a statement collection grouped according to its left-hand side, so all statements assigning or operating on a particular variable are grouped under that variable.</span></span> <span data-ttu-id="e3ff2-118">不包含语句的变量将被丢弃。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-118">Variables that have no statements are discarded.</span></span>|  
|<span data-ttu-id="e3ff2-119">反序列化</span><span class="sxs-lookup"><span data-stu-id="e3ff2-119">Deserialization</span></span>|<span data-ttu-id="e3ff2-120">根据变量对每个变量的语句集合进行反序列化。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-120">The statement collections for each variable are deserialized according to the variable.</span></span>|  
  
 <span data-ttu-id="e3ff2-121">下表显示 <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> 方法所需的服务。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-121">The following table shows the services the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Deserialize%2A> method requires.</span></span>  
  
|<span data-ttu-id="e3ff2-122">服务</span><span class="sxs-lookup"><span data-stu-id="e3ff2-122">Service</span></span>|<span data-ttu-id="e3ff2-123">说明</span><span class="sxs-lookup"><span data-stu-id="e3ff2-123">Description</span></span>|  
|-------------|-----------------|  
|<xref:System.CodeDom.Compiler.CodeDomProvider>|<span data-ttu-id="e3ff2-124">虽然不是绝对必要，但使用服务（如果可用）来确定序列化是否应区分大小写或不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-124">While not strictly necessary, the service, if available, is used to determine if the serialization should be case sensitive or case insensitive.</span></span>|  
|<xref:System.ComponentModel.IContainer>|<span data-ttu-id="e3ff2-125">如果反序列化过程中名称表中不存在对象，则会对 <xref:System.ComponentModel.IContainer> 进行查询。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-125">If an object does not exist in the name table during deserialization, a query for <xref:System.ComponentModel.IContainer> is made.</span></span> <span data-ttu-id="e3ff2-126">如果此查询成功，则检查该对象的容器。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-126">If this query succeeds, the container is checked for the object.</span></span> <span data-ttu-id="e3ff2-127">容器还可用作组件所需的任何容器参数的内置。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-127">The container is also used as a stand-in for any container argument needed by components.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3ff2-128"><paramref name="manager" /> 或 <paramref name="typeDecl" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-128"><paramref name="manager" /> or <paramref name="typeDecl" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="/dotnet/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation"><span data-ttu-id="e3ff2-129">动态源代码生成和编译</span><span class="sxs-lookup"><span data-stu-id="e3ff2-129">Dynamic Source Code Generation and Compilation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethod">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod GetInitializeMethod (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod GetInitializeMethod(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethod (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration, value As Object) As CodeMemberMethod" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::CodeDom::CodeMemberMethod ^ GetInitializeMethod(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializeMethod : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration * obj -&gt; System.CodeDom.CodeMemberMethod&#xA;override this.GetInitializeMethod : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration * obj -&gt; System.CodeDom.CodeMemberMethod" Usage="typeCodeDomSerializer.GetInitializeMethod (manager, declaration, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="e3ff2-130">用于序列化的序列化管理器。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-130">The serialization manager to use for serialization.</span></span></param>
        <param name="declaration"><span data-ttu-id="e3ff2-131">用于序列化的类型声明。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-131">The type declaration to use for serialization.</span></span></param>
        <param name="value"><span data-ttu-id="e3ff2-132">用于序列化的值。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-132">The value to use for serialization.</span></span></param>
        <summary><span data-ttu-id="e3ff2-133">返回存储用于序列化成员的语句的方法。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-133">Returns the method where statements used to serialize a member are stored.</span></span></summary>
        <returns><span data-ttu-id="e3ff2-134">用于为给定成员发出所有初始化代码的方法。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-134">The method used to emit all of the initialization code for the given member.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3ff2-135"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A> 方法返回为给定成员发出所有初始化代码的方法。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-135">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A> method returns the method to emit all of the initialization code for the given member.</span></span> <span data-ttu-id="e3ff2-136">默认实现返回一个空的构造函数。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-136">The default implementation returns an empty constructor.</span></span> <span data-ttu-id="e3ff2-137">如果要为多个值返回相同的方法，则应返回该方法的相同实例。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-137">If the same method is to be returned for multiple values, the same instance of the method should be returned.</span></span> <span data-ttu-id="e3ff2-138">您可以使用 <xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType> 字典记住您创建的方法。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-138">You can use the <xref:System.CodeDom.CodeObject.UserData%2A?displayProperty=nameWithType> dictionary to remember methods you have created.</span></span> <span data-ttu-id="e3ff2-139">`typeDecl` 参数还可用于添加基础结构方法。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-139">The `typeDecl` parameter can also be used to add infrastructure methods.</span></span> <span data-ttu-id="e3ff2-140">例如，如果想要为每个对象发出一个单独的方法，则需要使用一种方法来依次调用所有这些方法。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-140">For example, if you want to emit a separate method for each object, you need a single method that calls all of these methods in turn.</span></span> <span data-ttu-id="e3ff2-141">可根据需要将此方法添加到代码类型声明。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-141">This method can be added to the code type declaration as needed.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3ff2-142"><paramref name="manager" />、<paramref name="typeDecl" /> 或 <paramref name="value" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-142"><paramref name="manager" />, <paramref name="typeDecl" />, or <paramref name="value" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="/dotnet/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation"><span data-ttu-id="e3ff2-143">动态源代码生成和编译</span><span class="sxs-lookup"><span data-stu-id="e3ff2-143">Dynamic Source Code Generation and Compilation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetInitializeMethods">
      <MemberSignature Language="C#" Value="protected virtual System.CodeDom.CodeMemberMethod[] GetInitializeMethods (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, System.CodeDom.CodeTypeDeclaration declaration);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.CodeDom.CodeMemberMethod[] GetInitializeMethods(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, class System.CodeDom.CodeTypeDeclaration declaration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetInitializeMethods (manager As IDesignerSerializationManager, declaration As CodeTypeDeclaration) As CodeMemberMethod()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual cli::array &lt;System::CodeDom::CodeMemberMethod ^&gt; ^ GetInitializeMethods(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::CodeDom::CodeTypeDeclaration ^ declaration);" />
      <MemberSignature Language="F#" Value="abstract member GetInitializeMethods : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; System.CodeDom.CodeMemberMethod[]&#xA;override this.GetInitializeMethods : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * System.CodeDom.CodeTypeDeclaration -&gt; System.CodeDom.CodeMemberMethod[]" Usage="typeCodeDomSerializer.GetInitializeMethods (manager, declaration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeMemberMethod[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="declaration" Type="System.CodeDom.CodeTypeDeclaration" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="e3ff2-144">用于序列化的序列化管理器。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-144">The serialization manager to use for serialization.</span></span></param>
        <param name="declaration"><span data-ttu-id="e3ff2-145">用于序列化的类型声明。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-145">The type declaration to use for serialization.</span></span></param>
        <summary><span data-ttu-id="e3ff2-146">返回要在反序列化期间解释的方法数组。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-146">Returns an array of methods to be interpreted during deserialization.</span></span></summary>
        <returns><span data-ttu-id="e3ff2-147">要在反序列化期间解释的方法的 <see cref="T:System.CodeDom.CodeMemberMethod" /> 数组。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-147">A <see cref="T:System.CodeDom.CodeMemberMethod" /> array of methods to be interpreted during deserialization.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3ff2-148">默认实现返回一个包含构造函数的单元素数组。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-148">The default implementation returns a single-element array with the constructor in it.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3ff2-149"><paramref name="manager" /> 或 <paramref name="typeDecl" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-149"><paramref name="manager" /> or <paramref name="typeDecl" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="/dotnet/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation"><span data-ttu-id="e3ff2-150">动态源代码生成和编译</span><span class="sxs-lookup"><span data-stu-id="e3ff2-150">Dynamic Source Code Generation and Compilation</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Serialize">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeTypeDeclaration Serialize (System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, System.Collections.ICollection members);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeTypeDeclaration Serialize(class System.ComponentModel.Design.Serialization.IDesignerSerializationManager manager, object root, class System.Collections.ICollection members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Serialize (manager As IDesignerSerializationManager, root As Object, members As ICollection) As CodeTypeDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeTypeDeclaration ^ Serialize(System::ComponentModel::Design::Serialization::IDesignerSerializationManager ^ manager, System::Object ^ root, System::Collections::ICollection ^ members);" />
      <MemberSignature Language="F#" Value="abstract member Serialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * obj * System.Collections.ICollection -&gt; System.CodeDom.CodeTypeDeclaration&#xA;override this.Serialize : System.ComponentModel.Design.Serialization.IDesignerSerializationManager * obj * System.Collections.ICollection -&gt; System.CodeDom.CodeTypeDeclaration" Usage="typeCodeDomSerializer.Serialize (manager, root, members)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Design</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms.Design</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeDeclaration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <Parameter Name="root" Type="System.Object" />
        <Parameter Name="members" Type="System.Collections.ICollection" />
      </Parameters>
      <Docs>
        <param name="manager"><span data-ttu-id="e3ff2-151">用于序列化的序列化管理器。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-151">The serialization manager to use for serialization.</span></span></param>
        <param name="root"><span data-ttu-id="e3ff2-152">要序列化的对象。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-152">The object to serialize.</span></span></param>
        <param name="members"><span data-ttu-id="e3ff2-153">可选的成员集合。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-153">Optional collection of members.</span></span> <span data-ttu-id="e3ff2-154">可以为 <see langword="null" /> 或空。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-154">Can be <see langword="null" /> or empty.</span></span></param>
        <summary><span data-ttu-id="e3ff2-155">通过创建定义根的新类型声明将对象根序列化。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-155">Serializes the object root by creating a new type declaration that defines root.</span></span></summary>
        <returns><span data-ttu-id="e3ff2-156">定义根对象的 <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-156">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that defines the root object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3ff2-157"><xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> 方法会序列化给定的根对象和可选的成员集合以创建新的类型定义。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-157">The <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method serializes the given root object and optional collection of members to create a new type definition.</span></span> <span data-ttu-id="e3ff2-158">如果 `members` 集合包含值，则会序列化这些值。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-158">If the `members` collection contains values, these values are serialized.</span></span> <span data-ttu-id="e3ff2-159">值本身可能会序列化为成员变量或局部变量。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-159">Values themselves may serialize as either member variables or local variables.</span></span> <span data-ttu-id="e3ff2-160">通过在名为 `GenerateMember`的对象上搜索扩展器属性来确定这一点。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-160">This determination is done by searching for an extender property on the object called `GenerateMember`.</span></span> <span data-ttu-id="e3ff2-161">如果 `true`，则生成一个成员。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-161">If `true`, a member is generated.</span></span> <span data-ttu-id="e3ff2-162">否则，将生成局部变量。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-162">Otherwise, a local variable is generated.</span></span> <span data-ttu-id="e3ff2-163">为方便起见，`members` 集合可以包含根对象。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-163">For convenience, the `members` collection can contain the root object.</span></span> <span data-ttu-id="e3ff2-164">在这种情况下，根对象还不添加为成员或局部变量。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-164">In this case, the root object is not also added as a member or local variable.</span></span>  
  
 <span data-ttu-id="e3ff2-165">返回的类型的名称是从根对象的名称获取的（如果它是命名对象）。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-165">The name of the returned type is taken from the root object's name, if it was a named object.</span></span> <span data-ttu-id="e3ff2-166">如果不是，则从根类的简单类型名称中制造一个名称。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-166">If not, a name is fabricated from the simple type name of the root class.</span></span>  
  
 <span data-ttu-id="e3ff2-167">下表显示 <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> 方法的默认实现所执行的任务。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-167">The following table shows the tasks performed by the default implementation of the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method.</span></span>  
  
|<span data-ttu-id="e3ff2-168">任务</span><span class="sxs-lookup"><span data-stu-id="e3ff2-168">Task</span></span>|<span data-ttu-id="e3ff2-169">说明</span><span class="sxs-lookup"><span data-stu-id="e3ff2-169">Description</span></span>|  
|----------|-----------------|  
|<span data-ttu-id="e3ff2-170">上下文种子设定</span><span class="sxs-lookup"><span data-stu-id="e3ff2-170">Context Seeding</span></span>|<span data-ttu-id="e3ff2-171">序列化上下文用包括 <xref:System.ComponentModel.Design.Serialization.RootContext> 和 <xref:System.CodeDom.CodeTypeDeclaration> 的数据初始化</span><span class="sxs-lookup"><span data-stu-id="e3ff2-171">The serialization context is initialized with data including the <xref:System.ComponentModel.Design.Serialization.RootContext> and <xref:System.CodeDom.CodeTypeDeclaration></span></span>|  
|<span data-ttu-id="e3ff2-172">成员序列化</span><span class="sxs-lookup"><span data-stu-id="e3ff2-172">Member Serialization</span></span>|<span data-ttu-id="e3ff2-173">接下来，<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> 将遍历所有成员并调用 <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-173">Next, <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> walks all of the members and calls <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>.</span></span> <span data-ttu-id="e3ff2-174">由于序列化是 <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>中的找机会，因此这可以确保不会执行序列化。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-174">Because serialization is done opportunistically in <xref:System.ComponentModel.Design.Serialization.CodeDomSerializerBase.SerializeToExpression%2A>, this ensures that serialization is not done twice.</span></span>|  
|<span data-ttu-id="e3ff2-175">根序列化</span><span class="sxs-lookup"><span data-stu-id="e3ff2-175">Root Serialization</span></span>|<span data-ttu-id="e3ff2-176">接下来，将对根对象进行序列化，并将其语句添加到语句集合中。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-176">Next, the root object is serialized and its statements are added to the statement collection.</span></span>|  
|<span data-ttu-id="e3ff2-177">语句集成</span><span class="sxs-lookup"><span data-stu-id="e3ff2-177">Statement Integration</span></span>|<span data-ttu-id="e3ff2-178">序列化所有对象后，<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> 方法将对语句排序并将它们添加到从 <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>返回的方法。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-178">After all objects are serialized, the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method orders the statements and adds them to a method returned from <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.</span></span> <span data-ttu-id="e3ff2-179">最后，构造一个构造函数，用于调用从 <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>返回的所有方法。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-179">Finally, a constructor is fabricated that calls all of the methods returned from <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.GetInitializeMethod%2A>.</span></span>|  
  
-  
  
 <span data-ttu-id="e3ff2-180">下表显示 <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> 方法放置在上下文堆栈上的对象。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-180">The following table shows the objects the <xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer.Serialize%2A> method places on the context stack.</span></span>  
  
|<span data-ttu-id="e3ff2-181">实例</span><span class="sxs-lookup"><span data-stu-id="e3ff2-181">Instance</span></span>|<span data-ttu-id="e3ff2-182">说明</span><span class="sxs-lookup"><span data-stu-id="e3ff2-182">Description</span></span>|  
|--------------|-----------------|  
|<xref:System.ComponentModel.Design.Serialization.TypeCodeDomSerializer>|<span data-ttu-id="e3ff2-183">此序列化程序。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-183">This serializer.</span></span> <span data-ttu-id="e3ff2-184">派生类可能会发现向此类添加公共属性很有用。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-184">Deriving classes may find it useful to add public properties to this class.</span></span>|  
|<xref:System.CodeDom.CodeTypeDeclaration>|<span data-ttu-id="e3ff2-185">正在创建的类型。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-185">The type being created.</span></span> <span data-ttu-id="e3ff2-186">大多数对象不需要直接访问此。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-186">Most objects do not need direct access to this.</span></span>|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="e3ff2-187"><paramref name="manager" /> 或 <paramref name="root" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="e3ff2-187"><paramref name="manager" /> or <paramref name="root" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" />
        <altmember cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />
        <altmember cref="T:System.CodeDom.Compiler.CodeDomProvider" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <related type="Article" href="/dotnet/framework/reflection-and-codedom/dynamic-source-code-generation-and-compilation"><span data-ttu-id="e3ff2-188">动态源代码生成和编译</span><span class="sxs-lookup"><span data-stu-id="e3ff2-188">Dynamic Source Code Generation and Compilation</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
