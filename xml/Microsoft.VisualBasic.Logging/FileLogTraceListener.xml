<Type Name="FileLogTraceListener" FullName="Microsoft.VisualBasic.Logging.FileLogTraceListener">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b4df8513e074048d69f2e54b65df56adaf368a94" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86592148" /></Metadata><TypeSignature Language="C#" Value="public class FileLogTraceListener : System.Diagnostics.TraceListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FileLogTraceListener extends System.Diagnostics.TraceListener" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
  <TypeSignature Language="VB.NET" Value="Public Class FileLogTraceListener&#xA;Inherits TraceListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileLogTraceListener : System::Diagnostics::TraceListener" />
  <TypeSignature Language="F#" Value="type FileLogTraceListener = class&#xA;    inherit TraceListener" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Diagnostics.TraceListener</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.InteropServices.ComVisible(false)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.InteropServices.ComVisible(false)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>提供一个简单的侦听器，用于将日志记录输出指引至文件。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 类提供了自动维护功能，可根据需要每天或按应用程序存档日志文件。 此自动存档功能有助于降低开发人员和管理员的维护责任。  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>可将的实例添加到 <xref:System.Diagnostics.Debug.Listeners%2A?displayProperty=nameWithType> 或 <xref:System.Diagnostics.Trace.Listeners%2A?displayProperty=nameWithType> 集合，以将日志记录的输出重定向到文本文件。 此类的实例还可以添加到 `My.Application.Log` `My.Log` Visual Basic 应用程序中的 Web 应用程序) 或 (。 有关详细信息，请参阅 [演练：更改 My. Log 写入信息的位置](/dotnet/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information)`.`  
  
 此类的主要功能是：  
  
1.  *存档功能*。 此类生成的日志文件根据基名称和日期命名，以及一个数字来区分日志文件与日志的后续版本。 根据需要创建新的日志文件。  
  
     文件名的显式形式为 `baseName` [- `dateStamp` ] [- `version` ] .log，其中：  
  
    -   `baseName`部分是由属性指定的基本日志名称 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> 。  
  
    -   `dateStamp`部分的格式为 "yyyy-mm-dd"，当为或时，将显示它 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly> 。  
  
    -   如果需要多个具有相同和的日志文件 `baseName` `dateStamp` ，则会在文件名中 `version` 添加该部分 `Integer` 。  
  
2.  *多个类实例*。 如果类的实例 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 写入正在使用的文件：  
  
    -   如果文件正由同一进程中的类的另一个实例使用，则该类共享该文件 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 。  
  
    -   类将使用下一个可用的名称创建新的日志文件（如果该文件正由另一个进程使用）。  
  
3.  *线程安全性*。 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>类是线程安全的。 这使你可以从多个线程安全地将消息写入日志，而无需使用锁定。  
  
 **日志文件位置**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A>属性采用 <xref:Microsoft.VisualBasic.Logging.LogFileLocation> 枚举来指定要将日志文件写入其中的一个典型目录。  
  
-   若要将日志写入到其他位置，请将 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> 属性设置为该位置。  
  
 **日志文件名**  
  
-   日志文件的基名称由 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> 属性指定。  
  
-   可以从属性读取当前日志文件的名称 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> 。 它派生自多个其他属性以及文件系统中日志的当前状态。  
  
 **日志维护**  
  
-   创建新日志文件的最小频率由 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> 属性确定。 如果值为 <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> 或 <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly> ，则每日或每周至少创建一次新的日志文件，并且名称中包含日期戳 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> 。  
  
-   日志文件的最大大小 (（以字节为单位）) 由 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> 属性确定。 如果日志文件大小超过此大小，则会丢弃写入到日志中的其他消息，并根据 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> 属性引发异常。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A>属性确定) 必须可用 (的可用空间量（以字节为单位）。 这有助于确保 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 类不会使用所有可用的磁盘空间。 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A>当 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> 可用空间小于可用字节时，使用属性指定日志写入的行为。  
  
 **日志文件输出设置**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A>属性指定是否应在每次写入日志文件后自动刷新基础流。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A>属性指定是将消息追加到当前日志文件（如果允许），还是将其写入新的日志文件。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>属性指定用于在日志消息中分隔字段的字符串。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A>属性指定在创建新日志文件时使用的编码。  
  
 **日志文件输出**  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A>和 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> 方法将消息写入日志文件。 这些方法将检查 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> 属性以及具有相同基名称的任何现有日志，以确定是否应创建新日志。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A>方法将当前在输出缓冲区中的所有消息刷新到日志文件。  
  
-   <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A>方法会关闭日志文件，以使其可供其他进程使用。  
  
 **启用输出**  
  
 您必须启用跟踪或调试才能使用跟踪侦听器。 以下语法是编译器特定的。 如果使用 c # 或 Visual Basic 以外的编译器，请参阅编译器的文档。  
  
-   若要在 c # 中启用调试，请在 `/d:DEBUG` 编译代码时将标志添加到编译器命令行，或者将添加 `#define DEBUG` 到文件的顶部。 在 Visual Basic 中，将 `/d:DEBUG=True` 标志添加到编译器命令行。  
  
-   若要在 c # 中启用跟踪，请在 `/d:TRACE` 编译代码时将标志添加到编译器命令行，或将添加 `#define TRACE` 到文件的顶部。 在 Visual Basic 中，将 `/d:TRACE=True` 标志添加到编译器命令行。  
  
 若要设置侦听器的级别，请编辑应用程序的配置文件。 在此文件中，您可以添加一个侦听器，设置其类型并设置其参数，删除侦听器，或者清除之前由应用程序设置的所有侦听器。 配置文件的格式应与下面的示例类似。  
  
 若要运行此示例，必须提供完全限定的程序集名称。 有关如何获取完全限定的程序集名称的信息，请参阅 [程序集名称](/dotnet/standard/assembly/names)。  
  
```xml  
<configuration>  
    <system.diagnostics>  
        <sharedListeners>  
            <add name="FileLog"  
                type="Microsoft.VisualBasic.Logging.FileLogTraceListener,   
                      Microsoft.VisualBasic, Version=8.0.0.0,   
                      Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a,   
                      processorArchitecture=MSIL"   
                initializeData="FileLogWriter"/>  
        </sharedListeners>  
    </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
    <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
    <related type="Article" href="/dotnet/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information">演练：更改 My.Application.Log 写入信息的位置</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 类的新实例并设置名称。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>使用默认名称初始化 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将类的实例名称设置 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 为 microsoft.visualbasic.logging.filelogtracelistener。  
  
 您可以通过属性访问实例名称 <xref:System.Diagnostics.TraceListener.Name%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FileLogTraceListener (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FileLogTraceListener(System::String ^ name);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.Logging.FileLogTraceListener : string -&gt; Microsoft.VisualBasic.Logging.FileLogTraceListener" Usage="new Microsoft.VisualBasic.Logging.FileLogTraceListener name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><see langword="String" />. 实例对象的名称。</param>
        <summary>用提供的名称初始化 <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法将类的实例名称设置 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 为 `name` 。  
  
 您可以使用属性来访问实例名称 <xref:System.Diagnostics.TraceListener.Name%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.Log" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
        <related type="Article" href="/dotnet/visual-basic/language-reference/objects/">对象 (Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public bool Append { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Append" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberSignature Language="VB.NET" Value="Public Property Append As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Append { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Append : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Append" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[set: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定是将输出追加到当前文件还是将输出写入新文件或现有文件。</summary>
        <value><see langword="Boolean" />，<see langword="True" /> 指示将输出追加到当前文件，<see langword="False" /> 指示将输出写入新文件。 此属性的默认设置为 <see langword="True" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
   
## Remarks  

当 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Append%2A> 属性为时 `True` ，将在模式下打开日志文件 <xref:System.IO.FileMode.Append> 以保留现有日志。 当前写入位置从文件末尾开始，以便将所有新日志追加到文件末尾。

当 `Append` 属性为时 `False` ，将在模式下打开日志文件，在该文件中 <xref:System.IO.FileMode.Truncate> 打开日志文件时，所有日志数据都将被删除。 在 `FileLogTraceListener` `Append` 将 "设置为" `False` 或打开文件并写入第一个日志之前，将删除日志文件的现有内容。 然后，将 `FileLogTraceListener` 附加跟踪数据追加到文件末尾。 如果在 `FileLogTraceListener` Append 设置为 False 的情况下关闭该实例，则会在写入其他日志之前删除日志文件数据。 这可能导致丢失数据，尤其是在 `Append` 配置文件中将属性的值设置为时 `False` 。

在以下情况下，会重写此行为：

- 输出文件被另一个进程锁定。 将创建新的日志文件，其中包含包含在名称中的版本号 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> 。  
  
- 当前文件的大小大于属性允许的大小 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> 。  其他消息将被丢弃。 根据 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> 属性，将引发异常。
  
- 根据属性指定的日志创建计划，现有文件名已过期 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> 。 创建新的日志文件。 日期戳将合并到名称中 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> 。  

 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoFlush : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[set: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示写入日志文件流时是否刷新缓冲区。</summary>
        <value><see langword="Boolean" />，<see langword="True" /> 指示每次写入之后都刷新日志文件流；否则将缓存日志条目，这样写入会更有效率。 此属性的默认设置为 <see langword="False" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `False`属性的设置 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.AutoFlush%2A> 可为大多数应用程序提供最佳性能，因为一次将多个消息写入日志文件会更有效。 您可以使用 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> 方法来刷新日志文件的输出缓冲区中当前的所有消息。 你还可以使用 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> 方法，该方法在关闭日志文件之前隐式刷新流。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      </Docs>
    </Member>
    <Member MemberName="BaseFileName">
      <MemberSignature Language="C#" Value="public string BaseFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberSignature Language="VB.NET" Value="Public Property BaseFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BaseFileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BaseFileName : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置日志文件的基名称，该名称用于创建日志文件的完整名称。</summary>
        <value><see langword="String" />. 日志文件的基名称。 默认为应用程序的产品名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A>属性确定类写入的日志文件的基名称 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 。  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>属性提供当前日志文件的完整名称。 它是根据日志路径、基名称、日期和数字生成的，以将其与不同的日志版本区分开来。 根据需要创建新的日志文件。  
  
 完整日志文件名称的显式形式为 `path` \\ `baseName` [- `dateStamp` ] [- `iteration` ] .log，其中  
  
-   `path`部分由属性确定， <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> 如果该属性值设置为，则由属性确定 <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom> <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> 。  
  
-   `baseName`部分是由属性指定的基本日志名称 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> 。  
  
-   `dateStamp`部件的格式为 "yyyy-mm-dd"，当 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> 设置为或时，将显示它 <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly> 。  
  
-   如果需要多个具有相同和的日志文件 `baseName` `dateStamp` ，则会在文件名中 `iteration` 添加该部分 `Integer` 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" FrameworkAlternate="net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="fileLogTraceListener.Close " />
      <MemberSignature Language="ILAsm" Value=".method public virtual instance void Close() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭当前日志文件的基础流，并释放与当前流关联的所有资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不需要 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Close%2A> 显式调用方法，因为 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 类管理基础流。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomLocation">
      <MemberSignature Language="C#" Value="public string CustomLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CustomLocation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomLocation As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CustomLocation { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CustomLocation : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当 <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" /> 属性设置为 <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" /> 时获取或设置日志文件目录。</summary>
        <value><see langword="String" />，日志文件目录的名称。 此属性的默认设置是用户的应用程序数据目录。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>设置属性时，它还将 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> 属性设置为 <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom> 。  
  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A>如果无法解析该目录，则该属性将引发异常。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      </Docs>
    </Member>
    <Member MemberName="Delimiter">
      <MemberSignature Language="C#" Value="public string Delimiter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Delimiter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Delimiter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Delimiter : string with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于在日志消息中分隔字段的分隔符。</summary>
        <value><see langword="String" />，用作日志消息中字段的分隔符。 此属性的默认设置为制表符字符。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A>属性允许您更改默认分隔符。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiskSpaceExhaustedBehavior">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property DiskSpaceExhaustedBehavior As DiskSpaceExhaustedOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption DiskSpaceExhaustedBehavior { Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption get(); void set(Microsoft::VisualBasic::Logging::DiskSpaceExhaustedOption value); };" />
      <MemberSignature Language="F#" Value="member this.DiskSpaceExhaustedBehavior : Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[set: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定在写入日志文件时，如果可用磁盘空间小于 <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" /> 属性所指定的磁盘空间时应采取的操作。</summary>
        <value><see cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />. 确定在尝试写入日志文件时，如果可用磁盘空间小于 <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" /> 属性所指定的磁盘空间，或日志文件大小大于 <see cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" /> 属性所允许的大小，应采取的操作。 默认值为 <see cref="F:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> 属性设置为时 <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.DiscardMessages> ，如果没有足够的保留磁盘空间，则会悄悄地丢弃日志消息。 这是默认行为，它会阻止简单应用程序在磁盘太满时失败。  
  
 更可靠的应用程序可以将 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> 属性设置为 <xref:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption.ThrowException> ，并在 `Try...Catch` 写入日志的所有代码周围添加块。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.DiskSpaceExhaustedOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" FrameworkAlternate="net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="fileLogTraceListener.Dispose disposing" />
      <MemberSignature Language="ILAsm" Value=".method familyvirtual instance void Dispose(bool disposing) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">若为 <see langword="True" />，释放托管资源和非托管资源；若为 <see langword="False" />，则只释放非托管资源。</param>
        <summary>关闭基础流，并可以选择释放托管资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 `disposing` 参数为 `True` 时，此方法释放该 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 引用的、由任何托管对象持有的全部资源。 此方法将调用每个被引用对象的 `Dispose` 方法。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>
            <see langword="Dispose" /> 可以由其他对象多次调用。 重写 <see langword="Dispose" /> 时，请注意不要引用在以前调用 <see langword="Dispose" /> 时已释放的对象。  
  
此方法调用 <see langword="Dispose" /> 基类的方法 <see langword="Dispose" /> 。</para></block>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置创建新日志文件时使用的编码。</summary>
        <value><see cref="T:System.Text.Encoding" />，创建新日志文件时使用的编码。 此属性的默认值为 <see cref="T:System.Text.UTF8Encoding" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将文本追加到现有日志文件时，将使用该文件的编码，而不是由属性指定的编码 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Encoding%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
        <altmember cref="T:System.Text.UTF8Encoding" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" FrameworkAlternate="net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="fileLogTraceListener.Flush " />
      <MemberSignature Language="ILAsm" Value=".method public virtual instance void Flush() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>刷新写入当前日志文件的基础流。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Flush%2A> 方法将所有缓冲数据写入当前日志文件。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullLogFileName">
      <MemberSignature Language="C#" Value="public string FullLogFileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullLogFileName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullLogFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullLogFileName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullLogFileName : string" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[get: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取当前日志文件的完整名称。</summary>
        <value><see langword="String" />，当前日志文件的完整名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A>属性提供当前日志文件的完整名称。 它是根据日志路径、基名称、日期和数字生成的，以将其与不同的日志版本区分开来。 根据需要创建新的日志文件。  
  
 完整日志文件名称的显式形式为 `path` \\ `baseName` [- `dateStamp` ] [- `iteration` ] .log，其中：  
  
-   `path`部分由属性确定， <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> 如果该属性值设置为，则由属性确定 <xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom> <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> 。  
  
-   `baseName`部分是由属性指定的基本日志名称 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName%2A> 。  
  
-   `dateStamp`部分的格式为 yyyy-mm-dd，当为或时，将显示此部分 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily> <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly> 。  
  
-   如果需要多个具有相同和的日志文件 `baseName` `dateStamp` ，则会在文件名中 `iteration` 添加该部分 `Integer` 。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.BaseFileName" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
        <altmember cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.Custom" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      </Docs>
    </Member>
    <Member MemberName="GetSupportedAttributes">
      <MemberSignature Language="C#" Value="protected override string[] GetSupportedAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string[] GetSupportedAttributes() cil managed" FrameworkAlternate="net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.GetSupportedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSupportedAttributes () As String()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override cli::array &lt;System::String ^&gt; ^ GetSupportedAttributes();" />
      <MemberSignature Language="F#" Value="override this.GetSupportedAttributes : unit -&gt; string[]" Usage="fileLogTraceListener.GetSupportedAttributes " />
      <MemberSignature Language="ILAsm" Value=".method familyvirtual instance string[] GetSupportedAttributes() cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取跟踪侦听器支持的自定义 XML 配置特性。</summary>
        <returns><see langword="String" /> 数组，包含此侦听器识别的 XML 配置特性。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>可在 XML 配置文件中使用的自定义特性，以控制类的实例的行为 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 。 使用任何其他特性会导致配置异常。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.TraceSource.GetSupportedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="IncludeHostName">
      <MemberSignature Language="C#" Value="public bool IncludeHostName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeHostName" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeHostName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeHostName { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IncludeHostName : bool with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[set: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示输出中是否应包括日志记录计算机的主机名。</summary>
        <value><see langword="Boolean" />. 如果应包括主机标识符，则为 <see langword="True" />；否则为 <see langword="False" />。 默认值为 <see langword="False" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用属性配置 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> 和方法的行为 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileLocation Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileLocation Location" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberSignature Language="VB.NET" Value="Public Property Location As LogFileLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileLocation Location { Microsoft::VisualBasic::Logging::LogFileLocation get(); void set(Microsoft::VisualBasic::Logging::LogFileLocation value); };" />
      <MemberSignature Language="F#" Value="member this.Location : Microsoft.VisualBasic.Logging.LogFileLocation with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置日志文件的位置。</summary>
        <value><see cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />，日志文件的位置。 默认值为 <see cref="F:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Location%2A> 属性将日志路径设置为预定义的路径之一，由 <xref:Microsoft.VisualBasic.Logging.LogFileLocation> 枚举值确定。  
  
|**位置值**|**路径**|  
|------------------------|--------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.CommonApplicationDirectory>|所有用户共享的应用程序数据的路径，格式为：<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> 的典型值 `BasePath` 为：<br /><br /> C:\documents and 和 Settings\All Users\Application 数据<br /><br /> 、和的值来自 `CompanyName` `ProductName` `ProductVersion` 程序集。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.ExecutableDirectory>|启动了应用程序的可执行文件的路径。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.LocalUserApplicationDirectory>|用户的应用程序数据的路径，格式为：<br /><br /> `BasePath`\\`CompanyName`\\`ProductName`\\`ProductVersion`<br /><br /> 的典型值 `BasePath` 为：<br /><br /> C:\Documents and Settings\\`username`\Application Data<br /><br /> 、和的值将 `CompanyName` `ProductName` `ProductVersion` 构成程序集。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.TempDirectory>|当前系统的临时文件夹的路径。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileLocation.Custom>|如果由指定的字符串 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.CustomLocation%2A> 不为空，则将其用作路径; 否则，请使用用户的应用程序数据的路径。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileLocation" />
      </Docs>
    </Member>
    <Member MemberName="LogFileCreationSchedule">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption LogFileCreationSchedule" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberSignature Language="VB.NET" Value="Public Property LogFileCreationSchedule As LogFileCreationScheduleOption" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption LogFileCreationSchedule { Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption get(); void set(Microsoft::VisualBasic::Logging::LogFileCreationScheduleOption value); };" />
      <MemberSignature Language="F#" Value="member this.LogFileCreationSchedule : Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>确定要包括在日志文件名称中的日期。</summary>
        <value><see cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />. 此项指示要包括在日志文件名称中的日期。 默认值为 <see cref="F:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将其中一个 <xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption> 枚举值分配给 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.LogFileCreationSchedule%2A> 属性，以指定要包含在日志文件名称中的日期。  
  
 日期的格式为 YYYY-MM-DD。 有关日志文件名格式的详细信息，请参阅 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> 。  
  
|**LogFileCreationSchedule 值**|**日志文件名称中的日期**|  
|---------------------------------------|-----------------------------------|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Daily>|将当前日期包括在日志文件名称中。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.None>|不要将日期包括在日志文件名称中。|  
|<xref:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption.Weekly>|将当前周的第一天包括在日志文件名称中。<br /><br /> 周从星期六开始。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.LogFileCreationScheduleOption" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="MaxFileSize">
      <MemberSignature Language="C#" Value="public long MaxFileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxFileSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxFileSize As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxFileSize { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxFileSize : int64 with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[set: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置所允许的日志文件的最大大小，以字节为单位。</summary>
        <value><see langword="Long" />. 这是允许的日志文件的最大大小（以字节为单位）。 默认值为5000000。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性可确保日志文件不会增长得太大。  
  
 如果日志文件大小 (以字节为单位) 大于此属性的值，则当 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 类尝试将消息写入日志时，消息将被丢弃，失败或引发异常的原因取决于属性的值 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> 。 否则，如果可用磁盘空间量 (以字节为单位) 小于，则会将消息写入日志 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">当此属性被设置为一个小于 1000 的值时。</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
      </Docs>
    </Member>
    <Member MemberName="ReserveDiskSpace">
      <MemberSignature Language="C#" Value="public long ReserveDiskSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ReserveDiskSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property ReserveDiskSpace As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ReserveDiskSpace { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.ReserveDiskSpace : int64 with get, set" Usage="Microsoft.VisualBasic.Logging.FileLogTraceListener.ReserveDiskSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[set: System.Security.SecuritySafeCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecuritySafeCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置在将消息写入日志文件之前需要满足的可用磁盘空间量（以字节为单位）。</summary>
        <value><see langword="Long" />. 这是所需的可用磁盘空间量。 默认值为10000000。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用此属性可确保日志文件不会完全填满磁盘空间。  
  
 如果可用磁盘空间量 (以字节为单位，) 小于此属性的值，则当 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> 类尝试将消息写入日志时，消息将被丢弃，失败或引发异常的原因取决于属性的值 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior%2A> 。 否则，如果日志文件大小 (以字节为单位) 大于，则会将消息写入日志 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.MaxFileSize%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">当此属性被设置为小于 0 的值时。</exception>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.DiskSpaceExhaustedBehavior" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceData">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>向输出文件写入跟踪数据。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> 方法不应由应用程序代码调用。 这些方法由 <xref:System.Diagnostics.Debug> 、和类的成员调用 <xref:System.Diagnostics.Trace> 以将 <xref:System.Diagnostics.TraceSource> 跟踪数据写入输出。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" FrameworkAlternate="net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj -&gt; unit" Usage="fileLogTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberSignature Language="ILAsm" Value=".method public virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object data) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
        <param name="source">调用此方法的跟踪源的名称。</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 枚举值之一。</param>
        <param name="id">事件的数值标识符。</param>
        <param name="data">要发出的跟踪数据。</param>
        <summary>向输出文件或流中写入跟踪信息、数据对象和事件信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法：  
  
1.  设置输出的数据和上下文信息的格式。  
  
2.  如有必要，创建新的日志文件。  
  
3.  将信息写入日志文件。  
  
 有关创建新日志文件的详细信息，请参阅 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> 。  
  
 下表按显示的顺序列出了输出字段。 这些字段由属性指定的字符串进行分隔 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> ，后跟行结束符。  
  
|字段|**输出条件**|**说明**|  
|---------------|--------------------------|---------------------|  
|`source`|Always|`name` 的值。|  
|`severity`|Always|的枚举值名称 `eventType` 。|  
|`id`|Always|`id` 的字符串表示形式。|  
|`message`|Always|`data` 的字符串表示形式。|  
|`callStack`|如果在 <xref:System.Diagnostics.TraceOptions.Callstack> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的 <xref:System.Diagnostics.TraceEventCache.Callstack%2A> 属性 `eventCache` 。|  
|`CorrelationID`|如果在 <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的 <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> 属性 `eventCache` 。|  
|`DateTime`|如果在 <xref:System.Diagnostics.TraceOptions.DateTime> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的属性的字符串表示形式 <xref:System.Diagnostics.TraceEventCache.DateTime%2A> `eventCache` 。 固定区域性用于字符串转换。|  
|`ProcessID`|如果在 <xref:System.Diagnostics.TraceOptions.ProcessId> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的属性的字符串表示形式 <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> `eventCache` 。 固定区域性用于字符串转换。|  
|`ThreadID`|如果在 <xref:System.Diagnostics.TraceOptions.ThreadId> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的 <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> 属性 `eventCache` 。|  
|`Timestamp`|如果在 <xref:System.Diagnostics.TraceOptions.Timestamp> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的属性的字符串表示形式 <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> `eventCache` 。 固定区域性用于字符串转换。|  
|`HostName`|当 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> 属性为时 `True` 。|计算机的名称。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceData">
      <MemberSignature Language="C#" Value="public override void TraceData (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, params object[] data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" FrameworkAlternate="net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceData (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, ParamArray data As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceData(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, ... cli::array &lt;System::Object ^&gt; ^ data);" />
      <MemberSignature Language="F#" Value="override this.TraceData : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * obj[] -&gt; unit" Usage="fileLogTraceListener.TraceData (eventCache, source, eventType, id, data)" />
      <MemberSignature Language="ILAsm" Value=".method public virtual instance void TraceData(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, object[] data) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="data" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
        <param name="source">调用此方法的跟踪源的名称。</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 枚举值之一。</param>
        <param name="id">事件的数值标识符。</param>
        <param name="data">要作为数据发出的对象数组。</param>
        <summary>将跟踪信息、数据对象数组和事件信息写入输出文件或流中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法：  
  
1.  设置输出的数据和上下文信息的格式，  
  
2.  创建新的日志文件（如有必要）  
  
3.  将信息写入日志文件。  
  
 有关创建新日志文件的详细信息，请参阅 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> 。  
  
 此表按显示的顺序列出输出字段。 这些字段由属性指定的字符串进行分隔 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> ，后跟行结束符。  
  
|字段|**输出条件**|**说明**|  
|---------------|--------------------------|---------------------|  
|`source`|Always|`name` 的值。|  
|`severity`|Always|的枚举值名称 `eventType` 。|  
|`id`|Always|`id` 的字符串表示形式。|  
|`message`|Always|由中每个元素的字符串表示形式组成的字符串 `data` ，每个元素由分隔 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> 。|  
|`callStack`|如果在 <xref:System.Diagnostics.TraceOptions.Callstack> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的 <xref:System.Diagnostics.TraceEventCache.Callstack%2A> 属性 `eventCache` 。|  
|`CorrelationID`|如果在 <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的 <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> 属性 `eventCache` 。|  
|`DateTime`|如果在 <xref:System.Diagnostics.TraceOptions.DateTime> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的属性的字符串表示形式 <xref:System.Diagnostics.TraceEventCache.DateTime%2A> `eventCache` 。 固定区域性用于字符串转换。|  
|`ProcessID`|如果在 <xref:System.Diagnostics.TraceOptions.ProcessId> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的属性的字符串表示形式 <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> `eventCache` 。 固定区域性用于字符串转换。|  
|`ThreadID`|如果在 <xref:System.Diagnostics.TraceOptions.ThreadId> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的 <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> 属性 `eventCache` 。|  
|`Timestamp`|如果在 <xref:System.Diagnostics.TraceOptions.Timestamp> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的属性的字符串表示形式 <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> `eventCache` 。 固定区域性用于字符串转换。|  
|`HostName`|当 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> 属性为时 `True` 。|计算机的名称。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TraceEvent">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>向输出文件或流中写入跟踪信息和事件信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent%2A> 方法不应由应用程序代码调用。 这些方法由 <xref:System.Diagnostics.Debug> 、和类的成员调用 <xref:System.Diagnostics.Trace> 以将 <xref:System.Diagnostics.TraceSource> 跟踪数据写入输出。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" FrameworkAlternate="net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string -&gt; unit" Usage="fileLogTraceListener.TraceEvent (eventCache, source, eventType, id, message)" />
      <MemberSignature Language="ILAsm" Value=".method public virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string message) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
        <param name="source">调用此方法的跟踪源的名称。</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 枚举值之一。</param>
        <param name="id">事件的数值标识符。</param>
        <param name="message">要写入的消息。</param>
        <summary>将跟踪信息、消息和事件信息写入输出文件或流中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法：  
  
1.  设置输出的数据和上下文信息的格式。  
  
2.  如有必要，创建新的日志文件。  
  
3.  将信息写入日志文件。  
  
 有关创建新日志文件的详细信息，请参阅 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> 。  
  
 此表按其显示顺序列出了输出字段。 这些字段由属性指定的字符串进行分隔 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> ，后跟行结束符。  
  
|字段|**输出条件**|**说明**|  
|---------------|--------------------------|---------------------|  
|`source`|始终。|`name` 的值。|  
|`severity`|始终。|的枚举值名称 `eventType` 。|  
|`id`|始终。|`id` 的字符串表示形式。|  
|`message`|始终。|`message` 的值。|  
|`callStack`|如果在 <xref:System.Diagnostics.TraceOptions.Callstack> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的 <xref:System.Diagnostics.TraceEventCache.Callstack%2A> 属性 `eventCache` 。|  
|`CorrelationID`|如果在 <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的 <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> 属性 `eventCache` 。|  
|`DateTime`|如果在 <xref:System.Diagnostics.TraceOptions.DateTime> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的属性的字符串表示形式 <xref:System.Diagnostics.TraceEventCache.DateTime%2A> `eventCache` 。 固定区域性用于字符串转换。|  
|`ProcessID`|如果在 <xref:System.Diagnostics.TraceOptions.ProcessId> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的属性的字符串表示形式 <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> `eventCache` 。 固定区域性用于字符串转换。|  
|`ThreadID`|如果在 <xref:System.Diagnostics.TraceOptions.ThreadId> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的 <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> 属性 `eventCache` 。|  
|`Timestamp`|如果在 <xref:System.Diagnostics.TraceOptions.Timestamp> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的属性的字符串表示形式 <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> `eventCache` 。 固定区域性用于字符串转换。|  
|`HostName`|当 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> 属性为时 `True` 。|计算机的名称。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="TraceEvent">
      <MemberSignature Language="C#" Value="public override void TraceEvent (System.Diagnostics.TraceEventCache eventCache, string source, System.Diagnostics.TraceEventType eventType, int id, string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" FrameworkAlternate="net-5.0;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub TraceEvent (eventCache As TraceEventCache, source As String, eventType As TraceEventType, id As Integer, format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void TraceEvent(System::Diagnostics::TraceEventCache ^ eventCache, System::String ^ source, System::Diagnostics::TraceEventType eventType, int id, System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="override this.TraceEvent : System.Diagnostics.TraceEventCache * string * System.Diagnostics.TraceEventType * int * string * obj[] -&gt; unit" Usage="fileLogTraceListener.TraceEvent (eventCache, source, eventType, id, format, args)" />
      <MemberSignature Language="ILAsm" Value=".method public virtual instance void TraceEvent(class System.Diagnostics.TraceEventCache eventCache, string source, valuetype System.Diagnostics.TraceEventType eventType, int32 id, string format, object[] args) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventCache" Type="System.Diagnostics.TraceEventCache" />
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="eventType" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="eventCache">包含当前进程 ID、线程 ID 以及堆栈跟踪信息的 <see cref="T:System.Diagnostics.TraceEventCache" /> 对象。</param>
        <param name="source">调用此方法的跟踪源的名称。</param>
        <param name="eventType"><see cref="T:System.Diagnostics.TraceEventType" /> 枚举值之一。</param>
        <param name="id">事件的数值标识符。</param>
        <param name="format">一个格式字符串，其中包含零个或多个格式项，它们对应于 <paramref name="args" /> 数组中的对象。</param>
        <param name="args">包含零个或多个要格式化的对象的 <see langword="Object" /> 数组。</param>
        <summary>将跟踪信息、格式化对象数组和事件信息写入输出文件或流中。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此方法：  
  
1.  设置输出的数据和上下文信息的格式。  
  
2.  创建新的日志文件（如有必要）。  
  
3.  将信息写入日志文件。  
  
 有关创建新日志文件的详细信息，请参阅 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName%2A> 。  
  
 此表按其显示顺序列出了输出字段。 这些字段由属性指定的字符串分隔 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Delimiter%2A> ，后跟行结束符。  
  
|字段|**输出条件**|**说明**|  
|---------------|--------------------------|---------------------|  
|`source`|Always|`name` 的值。|  
|`severity`|Always|的枚举值名称 `eventType` 。|  
|`id`|Always|`id` 的字符串表示形式。|  
|`message`|Always|`args`使用字符串格式化的数据 `format` ，并使用固定区域性进行字符串转换。|  
|`callStack`|如果在 <xref:System.Diagnostics.TraceOptions.Callstack> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的 <xref:System.Diagnostics.TraceEventCache.Callstack%2A> 属性 `eventCache` 。|  
|`CorrelationID`|如果在 <xref:System.Diagnostics.TraceOptions.LogicalOperationStack> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的 <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> 属性 `eventCache` 。|  
|`DateTime`|如果在 <xref:System.Diagnostics.TraceOptions.DateTime> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的属性的字符串表示形式 <xref:System.Diagnostics.TraceEventCache.DateTime%2A> `eventCache` 。 固定区域性用于字符串转换。|  
|`ProcessID`|如果在 <xref:System.Diagnostics.TraceOptions.ProcessId> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的属性的字符串表示形式 <xref:System.Diagnostics.TraceEventCache.ProcessId%2A> `eventCache` 。 固定区域性用于字符串转换。|  
|`ThreadID`|如果在 <xref:System.Diagnostics.TraceOptions.ThreadId> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的 <xref:System.Diagnostics.TraceEventCache.ThreadId%2A> 属性 `eventCache` 。|  
|`Timestamp`|如果在 <xref:System.Diagnostics.TraceOptions.Timestamp> 属性中设置了标志，则为 <xref:System.Diagnostics.TraceListener.TraceOutputOptions%2A> 。|的属性的字符串表示形式 <xref:System.Diagnostics.TraceEventCache.Timestamp%2A> `eventCache` 。 固定区域性用于字符串转换。|  
|`HostName`|当 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.IncludeHostName%2A> 属性为时 `True` 。|计算机的名称。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="P:System.Diagnostics.TraceListener.TraceOutputOptions" />
        <altmember cref="T:System.Diagnostics.TraceEventCache" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.Write : string -&gt; unit" Usage="fileLogTraceListener.Write message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><see langword="String" />. 要写入的自定义消息。</param>
        <summary>将消息逐字写入磁盘，不带任何附加上下文信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.Write%2A>方法将特定消息写入日志文件，而不包含任何其他上下文信息。  
  
 使用其中一种 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> 方法在日志输出中包含上下文信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public override void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteLine(System::String ^ message);" />
      <MemberSignature Language="F#" Value="override this.WriteLine : string -&gt; unit" Usage="fileLogTraceListener.WriteLine message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic.Forms</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><see langword="String" />. 要写入的自定义消息。</param>
        <summary>将消息逐字写入磁盘，后跟当前行分隔符，不带任何附加上下文信息。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.WriteLine%2A>方法将特定消息写入日志文件，而不包含任何其他上下文信息。  
  
 使用其中一种 <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData%2A> 方法在日志输出中包含上下文信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.Logging.FileLogTraceListener.FullLogFileName" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Logging.FileLogTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
