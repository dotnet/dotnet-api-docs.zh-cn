<Type Name="DataTableExtensions" FullName="System.Data.DataTableExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4587b90d08657fd171699d2b68f6f7a93831bc1d" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83947260" /></Metadata><TypeSignature Language="C#" Value="public static class DataTableExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataTableExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataTableExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module DataTableExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataTableExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type DataTableExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Data.Common" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Data.DataSetExtensions" FromVersion="4.0.0.0" To="System.Data.Common" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Data.DataSetExtensions" FromVersion="4.0.0.0" To="System.Data.Common" ToVersion="4.2.1.0" FrameworkAlternate="netcore-3.0" />
    <TypeForwarding From="System.Data.DataSetExtensions" FromVersion="4.0.1.0" To="System.Data.Common" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>定义 <see cref="T:System.Data.DataTable" /> 类的扩展方法。 <see cref="T:System.Data.DataTableExtensions" /> 是一个静态类。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsDataView">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView (this System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView (table As DataTable) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.DataTable -&gt; System.Data.DataView" Usage="System.Data.DataTableExtensions.AsDataView table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" RefType="this" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <param name="table">从中创建支持 LINQ 的 <see cref="T:System.Data.DataTable" /> 的源 <see cref="T:System.Data.DataView" />。</param>
        <summary>创建并返回支持 LINQ 的 <see cref="T:System.Data.DataView" /> 对象。</summary>
        <returns>支持 LINQ 的 <see cref="T:System.Data.DataView" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView> 启用 [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] 的数据绑定方案，可以从类型化或非类型化 <xref:System.Data.DataTable>创建，提供该表的默认视图。 在从 <xref:System.Data.DataView> 创建 <xref:System.Data.DataTable> 后，可以在其上设置筛选和排序。 然后，<xref:System.Data.DataView> 将绑定到一个 UI 控件，如 <xref:System.Windows.Forms.DataGrid> 或 <xref:System.Windows.Forms.DataGridView>，提供简单的数据绑定模型。  
  
 有关详细信息和示例，请参阅[创建 DataView 对象](/dotnet/framework/data/adonet/creating-a-dataview-object-linq-to-dataset)。  
  
   
  
## Examples  
 下面的示例从 SalesOrderDetail 表创建 <xref:System.Data.DataView>，并将其设置为 <xref:System.Windows.Forms.BindingSource> 对象的数据源，该对象充当 <xref:System.Windows.Forms.DataGridView> 控件的代理：  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromtable)]
 [!code-vb[DP DataView Samples#CreateLDVFromTable](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromtable)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsDataView&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataView AsDataView&lt;T&gt; (this System.Data.EnumerableRowCollection&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataView AsDataView&lt;(class System.Data.DataRow) T&gt;(class System.Data.EnumerableRowCollection`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsDataView(Of T As DataRow) (source As EnumerableRowCollection(Of T)) As DataView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataView ^ AsDataView(System::Data::EnumerableRowCollection&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsDataView : System.Data.EnumerableRowCollection&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataView (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.AsDataView source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataView</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Data.EnumerableRowCollection&lt;T&gt;" RefType="this" Index="0" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0;netstandard-2.1;netcore-3.1;net-5.0" />
      </Parameters>
      <Docs>
        <typeparam name="T">源序列中的对象类型（通常为 <see cref="T:System.Data.DataRow" />）。</typeparam>
        <param name="source">从中创建支持 LINQ 的 <see cref="T:System.Data.DataView" /> 的源 [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] 查询。</param>
        <summary>创建并返回一个支持 LINQ 的 <see cref="T:System.Data.DataView" /> 对象，该对象表示 [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] 查询。</summary>
        <returns>支持 LINQ 的 <see cref="T:System.Data.DataView" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataView> 启用 [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] 的数据绑定方案，可以从 [!INCLUDE[linq_dataset](~/includes/linq-dataset-md.md)] 查询创建。 <xref:System.Data.DataView> 表示查询本身，而不是查询顶部的视图。 新创建的 <xref:System.Data.DataView> 从创建它的查询推断筛选和排序信息。 然后，<xref:System.Data.DataView> 绑定到 UI 控件，如 <xref:System.Windows.Forms.DataGrid> 或 <xref:System.Windows.Forms.DataGridView>，提供简单的数据绑定模型。  
  
 输入参数 `T` 的参数 `source` 只能是 <xref:System.Data.DataRow> 类型或从 <xref:System.Data.DataRow>派生的类型。  
  
 以下查询运算符仅在用于创建 <xref:System.Data.DataView>的查询中受支持：  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Cast%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.OrderByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Select%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenBy%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.ThenByDescending%2A>  
  
-   <xref:System.Data.EnumerableRowCollectionExtensions.Where%2A>  
  
 有关详细信息和示例，请参阅[创建 DataView 对象](/dotnet/framework/data/adonet/creating-a-dataview-object-linq-to-dataset)。  
  
   
  
## Examples  
 下面的示例创建按总计到期顺序排序的联机订单 <xref:System.Data.DataView>：  
  
 [!code-csharp[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP DataView Samples/CS/Form1.cs#createldvfromquery1)]
 [!code-vb[DP DataView Samples#CreateLDVFromQuery1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP DataView Samples/VB/Form1.vb#createldvfromquery1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsEnumerable">
      <MemberSignature Language="C#" Value="public static System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt; AsEnumerable (this System.Data.DataTable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.EnumerableRowCollection`1&lt;class System.Data.DataRow&gt; AsEnumerable(class System.Data.DataTable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsEnumerable (source As DataTable) As EnumerableRowCollection(Of DataRow)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::EnumerableRowCollection&lt;System::Data::DataRow ^&gt; ^ AsEnumerable(System::Data::DataTable ^ source);" />
      <MemberSignature Language="F#" Value="static member AsEnumerable : System.Data.DataTable -&gt; System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;" Usage="System.Data.DataTableExtensions.AsEnumerable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EnumerableRowCollection&lt;System.Data.DataRow&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.DataTable" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">可枚举的源 <see cref="T:System.Data.DataTable" />。</param>
        <summary>返回一个 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象，其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" />。 此对象可用在 [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] 表达式或方法查询中。</summary>
        <returns>一个 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象，其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)] 查询适用于实现 <xref:System.Collections.Generic.IEnumerable%601> 接口或 <xref:System.Linq.IQueryable> 接口的数据源。  <xref:System.Data.DataTable> 类不实现任何一个接口，因此必须调用 <xref:System.Data.DataTableExtensions.AsEnumerable%2A> 方法，以将 <xref:System.Data.DataTable> 用作 [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] 查询的 `From` 子句中的源。 还可以通过返回 <xref:System.Collections.Generic.IEnumerable%601> 对象来获取自定义的特定于域的运算符，如 <xref:System.Data.DataTableExtensions.CopyToDataTable%2A>。  
  
 <xref:System.Data.DataTableExtensions.AsEnumerable%2A> 方法返回的可枚举对象将永久绑定到生成它的 <xref:System.Data.DataTable> 中。 多次调用 <xref:System.Data.DataTableExtensions.AsEnumerable%2A> 方法将返回多个独立的可查询对象，这些对象都绑定到源 <xref:System.Data.DataTable>。  
  
   
  
## Examples  
 在下面的示例中，`DisplayProducts` 方法接收包含名为 `ProductName`的 DataColumn 的 DataTable，提取 `ProductName` 值，然后打印这些值。  
  
 [!code-csharp[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/cs/source.cs#1)]
 [!code-vb[system.data.DataTableExtensions.AsEnumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.data.datatableextensions.asenumerable/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">源 <see cref="T:System.Data.DataTable" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyToDataTable&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在给定输入 <see cref="T:System.Data.DataTable" /> 对象的情况下，返回包含 <see cref="T:System.Data.DataRow" /> 对象副本的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Data.DataTable CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Data.DataTable CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T)) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static System::Data::DataTable ^ CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; -&gt; System.Data.DataTable (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="T">源序列中的对象类型（通常为 <see cref="T:System.Data.DataRow" />）。</typeparam>
        <param name="source">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</param>
        <summary>在给定其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataTable" /> 的输入 <see cref="T:System.Data.DataRow" /> 对象的情况下，返回包含 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象副本的 <see cref="T:System.Data.DataRow" />。</summary>
        <returns>一个 <see cref="T:System.Data.DataTable" />，其中包含作为 <see cref="T:System.Data.DataRow" /> 对象的类型的输入序列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 输入参数 `T` 的参数 `source` 只能是 <xref:System.Data.DataRow> 类型或从 <xref:System.Data.DataRow>派生的类型。  
  
 输入序列可以是任何 <xref:System.Collections.Generic.IEnumerable%601> 源，而不仅是对 <xref:System.Data.DataTable>的查询或查询。 请注意，如果源序列是查询，则调用此运算符将强制立即执行。 枚举源序列也会导致引发异常。  
  
 目标表的架构基于源序列中第一个 <xref:System.Data.DataRow> 行的架构。 表元数据从 <xref:System.Data.DataRow>的列值 <xref:System.Data.DataRow> 元数据和表值中提取。 对于类型化的 <xref:System.Data.DataTable>，不会保留类型。 传输数据和架构，但是输出表的结果行不属于类型化 <xref:System.Data.DataRow> 类型。 从源 <xref:System.Data.DataRow> 复制到返回的 <xref:System.Data.DataTable>期间，不会保留 <xref:System.Data.DataRow.RowState%2A> 和 <xref:System.Data.DataRow.RowError%2A> 属性。  
  
 在源 <xref:System.Data.DataRow>中找到值为**null**的**空**引用或可为 null 的类型时，此方法会将目标 <xref:System.Data.DataTable> 中的值替换为 <xref:System.DBNull.Value>值。  
  
 方法返回的生成表具有默认的表名称。 如果要为 <xref:System.Data.DataTable>命名，请将其附加到 <xref:System.Data.DataSet>，或者执行任何其他 <xref:System.Data.DataTable> 特定操作，则必须在创建并返回表后执行此操作。  
  
 有关详细信息，请参阅[从查询创建 DataTable](/dotnet/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset)。  
  
   
  
## Examples  
 下面的示例在2001年8月8日之后查询 SalesOrderHeader 表中的订单，并使用 <xref:System.Data.DataTableExtensions.CopyToDataTable%2A> 方法从该查询创建 <xref:System.Data.DataTable>。 然后将 <xref:System.Data.DataTable> 绑定到作为 <xref:System.Windows.Forms.BindingSource> 的代理的 <xref:System.Windows.Forms.DataGridView>。  
  
 [!code-csharp[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/CS/Program.cs#copytodatatable1)]
 [!code-vb[DP LINQ to DataSet Examples#CopyToDataTable1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DP LINQ to DataSet Examples/VB/Module1.vb#copytodatatable1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列为 <see langword="null" />，因此无法创建新表。</exception>
        <exception cref="T:System.InvalidOperationException">源序列中的 <see cref="T:System.Data.DataRow" /> 的状态为 <see cref="F:System.Data.DataRowState.Deleted" />。  
  
源序列不包含任何 <see cref="T:System.Data.DataRow" /> 对象。  
  
源序列中的 <see cref="T:System.Data.DataRow" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
      </Parameters>
      <Docs>
        <typeparam name="T">源序列中的对象类型（通常为 <see cref="T:System.Data.DataRow" />）。</typeparam>
        <param name="source">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</param>
        <param name="table">目标 <see cref="T:System.Data.DataTable" />。</param>
        <param name="options"><see cref="T:System.Data.LoadOption" /> 枚举，用于指定 <see cref="T:System.Data.DataTable" /> 加载选项。</param>
        <summary>在给定其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" /> 的输入 <see cref="T:System.Data.DataTable" /> 对象的情况下，将 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象复制到指定的 <see cref="T:System.Data.DataRow" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 输入参数 `T` 的参数 `source` 只能是 <xref:System.Data.DataRow>类型或从 <xref:System.Data.DataRow>派生的类型。  
  
 输入序列可以是任何 <xref:System.Collections.Generic.IEnumerable%601> 源，而不仅是对 <xref:System.Data.DataTable>的查询。 请注意，如果源序列是查询，则调用此运算符将强制立即执行。 枚举源序列也会导致引发异常。  
  
 目标表的架构基于源序列中第一个 <xref:System.Data.DataRow> 行的架构。 表元数据从 <xref:System.Data.DataRow>的列值 <xref:System.Data.DataRow> 元数据和表值中提取。 对于类型化的 <xref:System.Data.DataTable>，不会保留类型。 传输数据和架构，但是输出表的结果行不属于类型化 <xref:System.Data.DataRow> 类型。 从源 <xref:System.Data.DataRow> 复制到返回的 <xref:System.Data.DataTable>期间，不会保留 <xref:System.Data.DataRow.RowState%2A> 和 <xref:System.Data.DataRow.RowError%2A> 属性。  
  
 在源 <xref:System.Data.DataRow>中找到值为**null**的**空**引用或可为 null 的类型时，此方法会将目标 <xref:System.Data.DataTable> 中的值替换为 <xref:System.DBNull.Value>值。  
  
 方法返回的生成表具有默认的表名称。 如果要为 <xref:System.Data.DataTable>命名，请将其附加到 <xref:System.Data.DataSet>，或者执行任何其他 <xref:System.Data.DataTable> 特定操作，则必须在创建并返回表后执行此操作。  
  
 有关详细信息，请参阅[从查询创建 DataTable](/dotnet/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">复制的 <see cref="T:System.Data.DataRow" /> 对象不符合目标 <see cref="T:System.Data.DataTable" /> 的架构。</exception>
        <exception cref="T:System.ArgumentNullException">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列为 <see langword="null" />，或者目标 <see cref="T:System.Data.DataTable" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">源序列中的 <see cref="T:System.Data.DataRow" /> 的状态为 <see cref="F:System.Data.DataRowState.Deleted" />。  
  
源序列不包含任何 <see cref="T:System.Data.DataRow" /> 对象。  
  
源序列中的 <see cref="T:System.Data.DataRow" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyToDataTable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void CopyToDataTable&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; source, System.Data.DataTable table, System.Data.LoadOption options, System.Data.FillErrorEventHandler errorHandler) where T : System.Data.DataRow;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CopyToDataTable&lt;(class System.Data.DataRow) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; source, class System.Data.DataTable table, valuetype System.Data.LoadOption options, class System.Data.FillErrorEventHandler errorHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub CopyToDataTable(Of T As DataRow) (source As IEnumerable(Of T), table As DataTable, options As LoadOption, errorHandler As FillErrorEventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : System::Data::DataRow[System::Runtime::CompilerServices::Extension]&#xA; static void CopyToDataTable(System::Collections::Generic::IEnumerable&lt;T&gt; ^ source, System::Data::DataTable ^ table, System::Data::LoadOption options, System::Data::FillErrorEventHandler ^ errorHandler);" />
      <MemberSignature Language="F#" Value="static member CopyToDataTable : seq&lt;'T (requires 'T :&gt; System.Data.DataRow)&gt; * System.Data.DataTable * System.Data.LoadOption * System.Data.FillErrorEventHandler -&gt; unit (requires 'T :&gt; System.Data.DataRow)" Usage="System.Data.DataTableExtensions.CopyToDataTable (source, table, options, errorHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>System.Data.DataRow</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="options" Type="System.Data.LoadOption" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" />
      </Parameters>
      <Docs>
        <typeparam name="T">源序列中的对象类型（通常为 <see cref="T:System.Data.DataRow" />）。</typeparam>
        <param name="source">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列。</param>
        <param name="table">目标 <see cref="T:System.Data.DataTable" />。</param>
        <param name="options"><see cref="T:System.Data.LoadOption" /> 枚举，用于指定 <see cref="T:System.Data.DataTable" /> 加载选项。</param>
        <param name="errorHandler"><see cref="T:System.Data.FillErrorEventHandler" /> 委托，表示将处理错误的方法。</param>
        <summary>在给定其泛型参数 <paramref name="T" /> 为 <see cref="T:System.Data.DataRow" /> 的输入 <see cref="T:System.Data.DataTable" /> 对象的情况下，将 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 对象复制到指定的 <see cref="T:System.Data.DataRow" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 输入参数 `T` 的参数 `source` 只能是 <xref:System.Data.DataRow>类型或从 <xref:System.Data.DataRow>派生的类型。  
  
 输入序列可以是任何 <xref:System.Collections.Generic.IEnumerable%601> 源，而不仅是对 <xref:System.Data.DataTable>的查询。 请注意，如果源序列是查询，则调用此运算符将强制立即执行。 枚举源序列也会导致引发异常。  
  
 目标表的架构基于源序列中第一个 <xref:System.Data.DataRow> 行的架构。 表元数据从 <xref:System.Data.DataRow>的列值 <xref:System.Data.DataRow> 元数据和表值中提取。 对于类型化的 <xref:System.Data.DataTable>，不会保留类型。 传输数据和架构，但是输出表的结果行不属于类型化 <xref:System.Data.DataRow> 类型。 从源 <xref:System.Data.DataRow> 复制到返回的 <xref:System.Data.DataTable>期间，不会保留 <xref:System.Data.DataRow.RowState%2A> 和 <xref:System.Data.DataRow.RowError%2A> 属性。  
  
 在源 <xref:System.Data.DataRow>中找到值为**null**的**空**引用或可为 null 的类型时，此方法会将目标 <xref:System.Data.DataTable> 中的值替换为 <xref:System.DBNull.Value>值。  
  
 方法返回的生成表具有默认的表名称。 如果要为 <xref:System.Data.DataTable>命名，请将其附加到 <xref:System.Data.DataSet>，或者执行任何其他 <xref:System.Data.DataTable> 特定操作，则必须在创建并返回表后执行此操作。  
  
 如果在将数据行复制到目标表期间引发了异常，如约束异常，则调用 `errorHandler` 委托。 使用以下值将 <xref:System.Data.FillErrorEventArgs> 传递到 `errorHandler` 委托：  
  
-   <xref:System.Data.FillErrorEventArgs.Values%2A> 属性设置为源数据的副本。  
  
-   <xref:System.Data.FillErrorEventArgs.DataTable%2A> 属性设置为目标 <xref:System.Data.DataTable>。  
  
-   <xref:System.Data.FillErrorEventArgs.Errors%2A> 属性设置为捕获的异常。  
  
 在委托调用返回后，将读取 <xref:System.Data.FillErrorEventArgs.Continue%2A> 属性。 如果 `true`<xref:System.Data.FillErrorEventArgs.Continue%2A> 属性，则继续枚举源序列并将其加载到数据表中。 如果 `false`<xref:System.Data.FillErrorEventArgs.Continue%2A> 属性，则从 <xref:System.Data.DataTableExtensions.CopyToDataTable%2A> 方法引发原始异常。  
  
 有关详细信息，请参阅[从查询创建 DataTable](/dotnet/framework/data/adonet/creating-a-datatable-from-a-query-linq-to-dataset)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">复制的 <see cref="T:System.Data.DataRow" /> 对象不符合目标 <see cref="T:System.Data.DataTable" /> 的架构。</exception>
        <exception cref="T:System.ArgumentNullException">源 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 序列为 <see langword="null" />，或者目标 <see cref="T:System.Data.DataTable" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">源序列中的 <see cref="T:System.Data.DataRow" /> 的状态为 <see cref="F:System.Data.DataRowState.Deleted" />。  
  
-或- 
源序列不包含任何 <see cref="T:System.Data.DataRow" /> 对象。  
  
-或- 
源序列中的 <see cref="T:System.Data.DataRow" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
