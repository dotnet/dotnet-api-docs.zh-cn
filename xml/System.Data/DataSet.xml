<Type Name="DataSet" FullName="System.Data.DataSet">
  <Metadata><Meta Name="ms.openlocfilehash" Value="28f53e887052b33e68ed186d67d0470144d5aef9" /><Meta Name="ms.sourcegitcommit" Value="ec905a25e6dd05a6a3ffa7f30bf59f3095a8cd67" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/01/2020" /><Meta Name="ms.locfileid" Value="89249963" /></Metadata><TypeSignature Language="C#" Value="public class DataSet : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitialize, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataSet extends System.ComponentModel.MarshalByValueComponent implements class System.ComponentModel.IListSource, class System.ComponentModel.ISupportInitialize, class System.ComponentModel.ISupportInitializeNotification, class System.Runtime.Serialization.ISerializable, class System.Xml.Serialization.IXmlSerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataSet" />
  <TypeSignature Language="VB.NET" Value="Public Class DataSet&#xA;Inherits MarshalByValueComponent&#xA;Implements IListSource, ISerializable, ISupportInitialize, ISupportInitializeNotification, IXmlSerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataSet : System::ComponentModel::MarshalByValueComponent, System::ComponentModel::IListSource, System::ComponentModel::ISupportInitialize, System::ComponentModel::ISupportInitializeNotification, System::Runtime::Serialization::ISerializable, System::Xml::Serialization::IXmlSerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="F#" Value="type DataSet = class&#xA;    inherit MarshalByValueComponent&#xA;    interface IListSource&#xA;    interface ISupportInitialize&#xA;    interface ISupportInitializeNotification&#xA;    interface ISerializable&#xA;    interface IXmlSerializable" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netstandard-2.0;netstandard-2.1" />
  <TypeSignature Language="C#" Value="public class DataSet : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitialize, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DataSet extends System.ComponentModel.MarshalByValueComponent implements class System.ComponentModel.IListSource, class System.ComponentModel.ISupportInitialize, class System.Runtime.Serialization.ISerializable, class System.Xml.Serialization.IXmlSerializable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="VB.NET" Value="Public Class DataSet&#xA;Inherits MarshalByValueComponent&#xA;Implements IListSource, ISerializable, ISupportInitialize, IXmlSerializable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataSet : System::ComponentModel::MarshalByValueComponent, System::ComponentModel::IListSource, System::ComponentModel::ISupportInitialize, System::Runtime::Serialization::ISerializable, System::Xml::Serialization::IXmlSerializable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type DataSet = class&#xA;    inherit MarshalByValueComponent&#xA;    interface IListSource&#xA;    interface IXmlSerializable&#xA;    interface ISupportInitialize&#xA;    interface ISerializable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="C#" Value="public class DataSet : System.ComponentModel.MarshalByValueComponent, System.ComponentModel.IListSource, System.ComponentModel.ISupportInitializeNotification, System.Runtime.Serialization.ISerializable, System.Xml.Serialization.IXmlSerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit DataSet extends System.ComponentModel.MarshalByValueComponent implements class System.ComponentModel.IListSource, class System.ComponentModel.ISupportInitialize, class System.ComponentModel.ISupportInitializeNotification, class System.Runtime.Serialization.ISerializable, class System.Xml.Serialization.IXmlSerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="VB.NET" Value="Public Class DataSet&#xA;Inherits MarshalByValueComponent&#xA;Implements IListSource, ISerializable, ISupportInitializeNotification, IXmlSerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataSet : System::ComponentModel::MarshalByValueComponent, System::ComponentModel::IListSource, System::ComponentModel::ISupportInitializeNotification, System::Runtime::Serialization::ISerializable, System::Xml::Serialization::IXmlSerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <TypeSignature Language="F#" Value="type DataSet = class&#xA;    inherit MarshalByValueComponent&#xA;    interface IListSource&#xA;    interface IXmlSerializable&#xA;    interface ISupportInitializeNotification&#xA;    interface ISupportInitialize&#xA;    interface ISerializable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type DataSet = class&#xA;    inherit MarshalByValueComponent&#xA;    interface IListSource&#xA;    interface IXmlSerializable&#xA;    interface ISupportInitializeNotification&#xA;    interface ISerializable&#xA;    interface ISupportInitialize" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Data.Common" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <InterfaceName>System.ComponentModel.ISupportInitializeNotification</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.Serialization.IXmlSerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.ComponentModel.DefaultProperty("DataSetName")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultProperty("DataSetName")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1">
      <AttributeName Language="C#">[System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Xml.Serialization.XmlSchemaProvider("GetDataSetSchema")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Xml.Serialization.XmlSchemaProvider("GetDataSetSchema")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Xml.Serialization.XmlRoot("DataSet")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Xml.Serialization.XmlRoot("DataSet")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName Language="C#">[System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName Language="C#">[System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=7.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName Language="C#">[System.Serializable]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Serializable&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName Language="C#">[System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName Language="C#">[System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName Language="C#">[System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName Language="C#">[System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinmac-3.0">
      <AttributeName Language="C#">[System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.DataSetDesigner, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarinmac-3.0">
      <AttributeName Language="C#">[System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.DataSetToolboxItem, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="9cf18-101">表示数据的内存中缓存。</span><span class="sxs-lookup"><span data-stu-id="9cf18-101">Represents an in-memory cache of data.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-102">是 <xref:System.Data.DataSet> 从数据源检索的数据的内存中缓存，是 ADO.NET 体系结构的主要组件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-102">The <xref:System.Data.DataSet>, which is an in-memory cache of data retrieved from a data source, is a major component of the ADO.NET architecture.</span></span> <span data-ttu-id="9cf18-103"><xref:System.Data.DataSet>包含一个 <xref:System.Data.DataTable> 对象集合，这些对象可以与对象相关联 <xref:System.Data.DataRelation> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-103">The <xref:System.Data.DataSet> consists of a collection of <xref:System.Data.DataTable> objects that you can relate to each other with <xref:System.Data.DataRelation> objects.</span></span> <span data-ttu-id="9cf18-104">你还可以 <xref:System.Data.DataSet> 使用和对象在中强制执行数据 <xref:System.Data.UniqueConstraint> 完整性 <xref:System.Data.ForeignKeyConstraint> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-104">You can also enforce data integrity in the <xref:System.Data.DataSet> by using the <xref:System.Data.UniqueConstraint> and <xref:System.Data.ForeignKeyConstraint> objects.</span></span> <span data-ttu-id="9cf18-105">有关使用对象的更多详细信息 <xref:System.Data.DataSet> ，请参阅 [数据集、数据表和 dataview](/dotnet/framework/data/adonet/dataset-datatable-dataview/)。</span><span class="sxs-lookup"><span data-stu-id="9cf18-105">For further details about working with <xref:System.Data.DataSet> objects, see [DataSets, DataTables, and DataViews](/dotnet/framework/data/adonet/dataset-datatable-dataview/).</span></span>  
  
 <span data-ttu-id="9cf18-106">尽管 <xref:System.Data.DataTable> 对象包含数据，但 <xref:System.Data.DataRelationCollection> 允许您通过表层次结构进行导航。</span><span class="sxs-lookup"><span data-stu-id="9cf18-106">Whereas <xref:System.Data.DataTable> objects contain the data, the <xref:System.Data.DataRelationCollection> allows you to navigate though the table hierarchy.</span></span> <span data-ttu-id="9cf18-107">这些表包含在 <xref:System.Data.DataTableCollection> 通过属性访问的中 <xref:System.Data.DataSet.Tables%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-107">The tables are contained in a <xref:System.Data.DataTableCollection> accessed through the <xref:System.Data.DataSet.Tables%2A> property.</span></span> <span data-ttu-id="9cf18-108">在访问 <xref:System.Data.DataTable> 对象时，请注意，它们具有条件区分大小写。</span><span class="sxs-lookup"><span data-stu-id="9cf18-108">When accessing <xref:System.Data.DataTable> objects, note that they are conditionally case sensitive.</span></span> <span data-ttu-id="9cf18-109">例如，如果一个 <xref:System.Data.DataTable> 名为 "mydatatable"，另一个名为 "mydatatable"，则用于搜索其中一个表的字符串被视为区分大小写。</span><span class="sxs-lookup"><span data-stu-id="9cf18-109">For example, if one <xref:System.Data.DataTable> is named "mydatatable" and another is named "Mydatatable", a string used to search for one of the tables is regarded as case sensitive.</span></span> <span data-ttu-id="9cf18-110">但是，如果 "mydatatable" 存在并且 "Mydatatable" 不是，则搜索字符串将被视为不区分大小写。</span><span class="sxs-lookup"><span data-stu-id="9cf18-110">However, if "mydatatable" exists and "Mydatatable" does not, the search string is regarded as case insensitive.</span></span> <span data-ttu-id="9cf18-111">有关使用对象的详细信息 <xref:System.Data.DataTable> ，请参阅 [创建 DataTable](/dotnet/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable)。</span><span class="sxs-lookup"><span data-stu-id="9cf18-111">For more information about working with <xref:System.Data.DataTable> objects, see [Creating a DataTable](/dotnet/framework/data/adonet/dataset-datatable-dataview/creating-a-datatable).</span></span>  
  
 <span data-ttu-id="9cf18-112"><xref:System.Data.DataSet>可以将数据和架构作为 XML 文档进行读取和写入。</span><span class="sxs-lookup"><span data-stu-id="9cf18-112">A <xref:System.Data.DataSet> can read and write data and schema as XML documents.</span></span> <span data-ttu-id="9cf18-113">然后，可以在启用 XML 的任何平台上跨 HTTP 传输数据和架构，并将其用于任何应用程序。</span><span class="sxs-lookup"><span data-stu-id="9cf18-113">The data and schema can then be transported across HTTP and used by any application, on any platform that is XML-enabled.</span></span> <span data-ttu-id="9cf18-114">您可以使用方法将架构保存为 XML 架构 <xref:System.Data.DataSet.WriteXmlSchema%2A> ，并且可以使用方法保存架构和数据 <xref:System.Data.DataSet.WriteXml%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-114">You can save the schema as an XML schema with the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and both schema and data can be saved using the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="9cf18-115">若要读取同时包含架构和数据的 XML 文档，请使用 <xref:System.Data.DataSet.ReadXml%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-115">To read an XML document that includes both schema and data, use the <xref:System.Data.DataSet.ReadXml%2A> method.</span></span>  
  
 <span data-ttu-id="9cf18-116">在典型的多层实现中，用于创建和刷新 <xref:System.Data.DataSet> ，进而更新原始数据的步骤如下：</span><span class="sxs-lookup"><span data-stu-id="9cf18-116">In a typical multiple-tier implementation, the steps for creating and refreshing a <xref:System.Data.DataSet>, and in turn, updating the original data are to:</span></span>  
  
1.  <span data-ttu-id="9cf18-117"><xref:System.Data.DataTable> <xref:System.Data.DataSet> 使用从数据源中的数据生成并填充中的每个 <xref:System.Data.Common.DataAdapter> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-117">Build and fill each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> with data from a data source using a <xref:System.Data.Common.DataAdapter>.</span></span>  
  
2.  <span data-ttu-id="9cf18-118"><xref:System.Data.DataTable>通过添加、更新或删除对象，更改各个对象中的数据 <xref:System.Data.DataRow> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-118">Change the data in individual <xref:System.Data.DataTable> objects by adding, updating, or deleting <xref:System.Data.DataRow> objects.</span></span>  
  
3.  <span data-ttu-id="9cf18-119">调用 <xref:System.Data.DataSet.GetChanges%2A> 方法以创建 <xref:System.Data.DataSet> 仅具有数据更改的第二个。</span><span class="sxs-lookup"><span data-stu-id="9cf18-119">Invoke the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> that features only the changes to the data.</span></span>  
  
4.  <span data-ttu-id="9cf18-120">调用 <xref:System.Data.Common.DataAdapter.Update%2A> 的方法，将 <xref:System.Data.Common.DataAdapter> 第二个 <xref:System.Data.DataSet> 作为参数传递。</span><span class="sxs-lookup"><span data-stu-id="9cf18-120">Call the <xref:System.Data.Common.DataAdapter.Update%2A> method of the <xref:System.Data.Common.DataAdapter>, passing the second <xref:System.Data.DataSet> as an argument.</span></span>  
  
5.  <span data-ttu-id="9cf18-121">调用 <xref:System.Data.DataSet.Merge%2A> 方法以将更改从秒合并 <xref:System.Data.DataSet> 到第一个中。</span><span class="sxs-lookup"><span data-stu-id="9cf18-121">Invoke the <xref:System.Data.DataSet.Merge%2A> method to merge the changes from the second <xref:System.Data.DataSet> into the first.</span></span>  
  
6.  <span data-ttu-id="9cf18-122"><xref:System.Data.DataSet.AcceptChanges%2A>在上调用 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-122">Invoke the <xref:System.Data.DataSet.AcceptChanges%2A> on the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-123">或者，调用 <xref:System.Data.DataSet.RejectChanges%2A> 以取消更改。</span><span class="sxs-lookup"><span data-stu-id="9cf18-123">Alternatively, invoke <xref:System.Data.DataSet.RejectChanges%2A> to cancel the changes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-124"><xref:System.Data.DataSet>和 <xref:System.Data.DataTable> 对象从继承而 <xref:System.ComponentModel.MarshalByValueComponent> 来，并且支持 <xref:System.Runtime.Serialization.ISerializable> 用于远程处理的接口。</span><span class="sxs-lookup"><span data-stu-id="9cf18-124">The <xref:System.Data.DataSet> and <xref:System.Data.DataTable> objects inherit from <xref:System.ComponentModel.MarshalByValueComponent>, and support the <xref:System.Runtime.Serialization.ISerializable> interface for remoting.</span></span> <span data-ttu-id="9cf18-125">这两个对象是唯一可远程处理的 ADO.NET 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-125">These are the only ADO.NET objects that can be remoted.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-126">从继承的类 <xref:System.Data.DataSet> 不是由垃圾回收器来完成的，因为终结器已在中取消 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-126">Classes inherited from <xref:System.Data.DataSet> are not finalized by the garbage collector, because the finalizer has been suppressed in <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-127">派生类可以 <xref:System.GC.ReRegisterForFinalize%2A> 在其构造函数中调用方法，以允许垃圾回收器来完成类。</span><span class="sxs-lookup"><span data-stu-id="9cf18-127">The derived class can call the <xref:System.GC.ReRegisterForFinalize%2A> method in its constructor to allow the class to be finalized by the garbage collector.</span></span>

### <a name="security-considerations"></a><span data-ttu-id="9cf18-128">安全注意事项</span><span class="sxs-lookup"><span data-stu-id="9cf18-128">Security considerations</span></span>
    
<span data-ttu-id="9cf18-129">有关数据集和 DataTable 安全性的信息，请参阅 [安全指南](/dotnet/framework/data/adonet/dataset-datatable-dataview/security-guidance)。</span><span class="sxs-lookup"><span data-stu-id="9cf18-129">For information about DataSet and DataTable security, see [Security guidance](/dotnet/framework/data/adonet/dataset-datatable-dataview/security-guidance).</span></span>
  
## Examples  
 <span data-ttu-id="9cf18-130">下面的示例包含多个方法，这些方法组合、创建和填充 <xref:System.Data.DataSet> **Northwind** 数据库。</span><span class="sxs-lookup"><span data-stu-id="9cf18-130">The following example consists of several methods that, combined, create and fill a <xref:System.Data.DataSet> from the **Northwind** database.</span></span>  
  
 [!code-csharp[Classic WebData DataSet Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="9cf18-131">对于多线程读取操作，此类型是安全的。</span><span class="sxs-lookup"><span data-stu-id="9cf18-131">This type is safe for multithreaded read operations.</span></span> <span data-ttu-id="9cf18-132">必须同步任何写入操作。</span><span class="sxs-lookup"><span data-stu-id="9cf18-132">You must synchronize any write operations.</span></span></threadsafe>
    <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-133">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-133">Using DataSets in ADO.NET</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9cf18-134">初始化 <see cref="T:System.Data.DataSet" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="9cf18-134">Initializes a new instance of the <see cref="T:System.Data.DataSet" /> class.</span></span></summary>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-135">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-135">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9cf18-136">初始化 <see cref="T:System.Data.DataSet" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="9cf18-136">Initializes a new instance of the <see cref="T:System.Data.DataSet" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-137">此 <xref:System.Data.DataSet> 构造函数的实现不使用任何参数，并为新实例创建默认名称 "NewDataSet"。</span><span class="sxs-lookup"><span data-stu-id="9cf18-137">This implementation of the <xref:System.Data.DataSet> constructor takes no parameters, and creates a default name, "NewDataSet," for the new instance.</span></span>  
  
 <span data-ttu-id="9cf18-138">需要的名称 <xref:System.Data.DataSet> 才能确保的 XML 表示形式 <xref:System.Data.DataSet> 始终具有文档元素的名称，该元素是架构定义中的最高级别的元素。</span><span class="sxs-lookup"><span data-stu-id="9cf18-138">A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest-level element in a schema definition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-139">下面的示例创建一个新的 <xref:System.Data.DataSet> ，并向其中添加两个 <xref:System.Data.DataTable> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-139">The following example creates a new <xref:System.Data.DataSet>, and adds two <xref:System.Data.DataTable> objects to it.</span></span>  
  
 [!code-vb[Classic WebData DataSet.DataSet Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSet Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataTableCollection" />
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-140">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-140">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataSet (string dataSetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dataSetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dataSetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataSet(System::String ^ dataSetName);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : string -&gt; System.Data.DataSet" Usage="new System.Data.DataSet dataSetName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dataSetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSetName"><span data-ttu-id="9cf18-141"><see cref="T:System.Data.DataSet" /> 的名称。</span><span class="sxs-lookup"><span data-stu-id="9cf18-141">The name of the <see cref="T:System.Data.DataSet" />.</span></span></param>
        <summary><span data-ttu-id="9cf18-142">用给定名称初始化 <see cref="T:System.Data.DataSet" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="9cf18-142">Initializes a new instance of a <see cref="T:System.Data.DataSet" /> class with the given name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-143">需要的名称 <xref:System.Data.DataSet> 才能确保的 XML 表示形式 <xref:System.Data.DataSet> 始终具有文档元素的名称，该元素是架构定义中的最高级别的元素。</span><span class="sxs-lookup"><span data-stu-id="9cf18-143">A name for the <xref:System.Data.DataSet> is required to ensure that the XML representation of the <xref:System.Data.DataSet> always has a name for the document element, which is the highest level element in a schema definition.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-144">下面的示例创建一个新的 <xref:System.Data.DataSet> ，其中添加了两个 <xref:System.Data.DataTable> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-144">The following example creates a new <xref:System.Data.DataSet>, to which two <xref:System.Data.DataTable> objects are added.</span></span>  
  
 [!code-vb[Classic WebData DataSet.DataSet1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSet1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataSet.DataSetName" />
        <altmember cref="T:System.Data.DataTableCollection" />
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-145">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-145">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataSet(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Data.DataSet" Usage="new System.Data.DataSet (info, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="9cf18-146">序列化或反序列化对象所需的数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-146">The data needed to serialize or deserialize an object.</span></span></param>
        <param name="context"><span data-ttu-id="9cf18-147">给定序列化流的源和目标。</span><span class="sxs-lookup"><span data-stu-id="9cf18-147">The source and destination of a given serialized stream.</span></span></param>
        <summary><span data-ttu-id="9cf18-148">初始化具有给定序列化信息和上下文的 <see cref="T:System.Data.DataSet" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="9cf18-148">Initializes a new instance of a <see cref="T:System.Data.DataSet" /> class that has the given serialization information and context.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected DataSet (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context, bool ConstructSchema);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context, bool ConstructSchema) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (info As SerializationInfo, context As StreamingContext, ConstructSchema As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; DataSet(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context, bool ConstructSchema);" />
      <MemberSignature Language="F#" Value="new System.Data.DataSet : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext * bool -&gt; System.Data.DataSet" Usage="new System.Data.DataSet (info, context, ConstructSchema)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ConstructSchema" Type="System.Boolean" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="9cf18-149"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-149">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</span></span></param>
        <param name="context"><span data-ttu-id="9cf18-150"><see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-150">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</span></span></param>
        <param name="ConstructSchema"><span data-ttu-id="9cf18-151">布尔值。</span><span class="sxs-lookup"><span data-stu-id="9cf18-151">The boolean value.</span></span></param>
        <summary><span data-ttu-id="9cf18-152">初始化 <see cref="T:System.Data.DataSet" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="9cf18-152">Initializes a new instance of the <see cref="T:System.Data.DataSet" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
[!INCLUDE [untrusted-data-instance-note](~/includes/untrusted-data-instance-note.md)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptChanges">
      <MemberSignature Language="C#" Value="public void AcceptChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.AcceptChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcceptChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcceptChanges();" />
      <MemberSignature Language="F#" Value="member this.AcceptChanges : unit -&gt; unit" Usage="dataSet.AcceptChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9cf18-153">提交自加载此 <see cref="T:System.Data.DataSet" /> 或上次调用 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以来对其进行的所有更改。</span><span class="sxs-lookup"><span data-stu-id="9cf18-153">Commits all the changes made to this <see cref="T:System.Data.DataSet" /> since it was loaded or since the last time <see cref="M:System.Data.DataSet.AcceptChanges" /> was called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-154"><xref:System.Data.DataRow>和 <xref:System.Data.DataTable> 类都包含 <xref:System.Data.DataSet.AcceptChanges%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-154">Both the <xref:System.Data.DataRow> and <xref:System.Data.DataTable> classes have <xref:System.Data.DataSet.AcceptChanges%2A> methods.</span></span> <span data-ttu-id="9cf18-155"><xref:System.Data.DataTable.AcceptChanges%2A>在级别调用将 <xref:System.Data.DataTable> 导致 <xref:System.Data.DataRow.AcceptChanges%2A> 调用每个的方法 <xref:System.Data.DataRow> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-155">Calling <xref:System.Data.DataTable.AcceptChanges%2A> at the <xref:System.Data.DataTable> level causes the <xref:System.Data.DataRow.AcceptChanges%2A> method for each <xref:System.Data.DataRow> to be called.</span></span> <span data-ttu-id="9cf18-156">同样，对 <xref:System.Data.DataSet.AcceptChanges%2A> 中的 <xref:System.Data.DataSet> <xref:System.Data.DataTable.AcceptChanges%2A> 每个表调用会导致的 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-156">Similarly, invoking <xref:System.Data.DataSet.AcceptChanges%2A> on the <xref:System.Data.DataSet> causes <xref:System.Data.DataTable.AcceptChanges%2A> to be called on each table within the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-157">通过这种方式，可以调用方法的多个级别。</span><span class="sxs-lookup"><span data-stu-id="9cf18-157">In this manner, you have multiple levels at which the method can be invoked.</span></span> <span data-ttu-id="9cf18-158">通过调用的， <xref:System.Data.DataSet.AcceptChanges%2A> <xref:System.Data.DataSet> 可以在所有从属对象上调用方法 (例如，通过一个调用) 的表和行。</span><span class="sxs-lookup"><span data-stu-id="9cf18-158">Calling the <xref:System.Data.DataSet.AcceptChanges%2A> of the <xref:System.Data.DataSet> enables you to invoke the method on all subordinate objects (for example, tables and rows) with one call.</span></span>  
  
 <span data-ttu-id="9cf18-159">当在 `AcceptChanges` 上调用时 `DataSet` ， <xref:System.Data.DataRow> 仍处于编辑模式的任何对象都将成功完成其编辑。</span><span class="sxs-lookup"><span data-stu-id="9cf18-159">When you call `AcceptChanges` on the `DataSet`, any <xref:System.Data.DataRow> objects still in edit-mode end their edits successfully.</span></span> <span data-ttu-id="9cf18-160"><xref:System.Data.DataRow.RowState%2A>每个的属性 <xref:System.Data.DataRow> 也会发生变化; `Added` `Modified` 行 `Unchanged` 将变为，并 `Deleted` 删除行。</span><span class="sxs-lookup"><span data-stu-id="9cf18-160">The <xref:System.Data.DataRow.RowState%2A> property of each <xref:System.Data.DataRow> also changes; `Added` and `Modified` rows become `Unchanged`, and `Deleted` rows are removed.</span></span>  
  
 <span data-ttu-id="9cf18-161">如果 `DataSet` 包含 <xref:System.Data.ForeignKeyConstraint> 对象，则调用 `AcceptChanges` 方法还会导致 <xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A> 强制执行。</span><span class="sxs-lookup"><span data-stu-id="9cf18-161">If the `DataSet` contains <xref:System.Data.ForeignKeyConstraint> objects, invoking the `AcceptChanges` method also causes the <xref:System.Data.ForeignKeyConstraint.AcceptRejectRule%2A> to be enforced.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-162">`AcceptChanges``RejectChanges`仅应用于 `DataRow` 相关更改， (即添加、删除、删除和修改) 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-162">`AcceptChanges` and `RejectChanges` only apply to `DataRow` related changes (that is, Add, Remove, Delete, and Modify).</span></span> <span data-ttu-id="9cf18-163">它们不适用于架构或结构更改。</span><span class="sxs-lookup"><span data-stu-id="9cf18-163">They are not applicable to schema or structural changes.</span></span>  
>   
>  <span data-ttu-id="9cf18-164">如果已使用 DataAdapter 填充 DataSet，则调用 AcceptChange 不会将这些更改复制回数据源中。</span><span class="sxs-lookup"><span data-stu-id="9cf18-164">Calling AcceptChanges will not replicate these changes back to the data source if the DataSet was filled using a DataAdapter.</span></span> <span data-ttu-id="9cf18-165">在此情况下，请改为调用 <xref:System.Data.Common.DataAdapter.Update%2A>。</span><span class="sxs-lookup"><span data-stu-id="9cf18-165">In that situation, call <xref:System.Data.Common.DataAdapter.Update%2A> instead.</span></span> <span data-ttu-id="9cf18-166">有关详细信息，请参阅 [通过 Dataadapter 更新数据源](/dotnet/framework/data/adonet/updating-data-sources-with-dataadapters) 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-166">See [Updating Data Sources with DataAdapters](/dotnet/framework/data/adonet/updating-data-sources-with-dataadapters) for more information.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-167">下面的示例将添加 <xref:System.Data.DataRow> 到 <xref:System.Data.DataTable> 中的 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-167">The following example adds a <xref:System.Data.DataRow> to a <xref:System.Data.DataTable> in a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-168"><xref:System.Data.DataSet.AcceptChanges%2A>然后在上调用方法，该方法 <xref:System.Data.DataSet> 可与它包含的所有对象进行级联 <xref:System.Data.DataTable> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-168">The <xref:System.Data.DataSet.AcceptChanges%2A> method is then called on the <xref:System.Data.DataSet>, which cascades to all <xref:System.Data.DataTable> objects that it contains.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.AcceptChanges#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.AcceptChanges/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.AcceptChanges#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.AcceptChanges/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-169">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-169">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberSignature Language="F#" Value="abstract member BeginInit : unit -&gt; unit&#xA;override this.BeginInit : unit -&gt; unit" Usage="dataSet.BeginInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9cf18-170">开始初始化在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-170">Begins the initialization of a <see cref="T:System.Data.DataSet" /> that is used on a form or used by another component.</span></span> <span data-ttu-id="9cf18-171">初始化发生在运行时。</span><span class="sxs-lookup"><span data-stu-id="9cf18-171">The initialization occurs at run time.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-172">Visual Studio .NET 设计环境使用此方法开始初始化在窗体上使用或由另一个组件使用的组件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-172">The Visual Studio .NET design environment uses this method to start the initialization of a component that is used on a form or used by another component.</span></span> <span data-ttu-id="9cf18-173"><xref:System.Data.DataSet.EndInit%2A>方法结束初始化。</span><span class="sxs-lookup"><span data-stu-id="9cf18-173">The <xref:System.Data.DataSet.EndInit%2A> method ends the initialization.</span></span> <span data-ttu-id="9cf18-174">使用 <xref:System.Data.DataSet.BeginInit%2A> 和 <xref:System.Data.DataSet.EndInit%2A> 方法可防止控件在完全初始化之前被使用。</span><span class="sxs-lookup"><span data-stu-id="9cf18-174">Using the <xref:System.Data.DataSet.BeginInit%2A> and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-175">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-175">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CaseSensitive">
      <MemberSignature Language="C#" Value="public bool CaseSensitive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CaseSensitive" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.CaseSensitive" />
      <MemberSignature Language="VB.NET" Value="Public Property CaseSensitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CaseSensitive { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CaseSensitive : bool with get, set" Usage="System.Data.DataSet.CaseSensitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Data.DataSysDescription("DataSetCaseSensitiveDescr")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Data.DataSysDescription("DataSetCaseSensitiveDescr")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9cf18-176">获取或设置一个值，该值指示 <see cref="T:System.Data.DataTable" /> 对象中的字符串比较是否区分大小写。</span><span class="sxs-lookup"><span data-stu-id="9cf18-176">Gets or sets a value indicating whether string comparisons within <see cref="T:System.Data.DataTable" /> objects are case-sensitive.</span></span></summary>
        <value><span data-ttu-id="9cf18-177"><see langword="true" /> 如果字符串比较区分大小写，则为; 否则为。否则为 <see langword="false" /> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-177"><see langword="true" /> if string comparisons are case-sensitive; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="9cf18-178">默认为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-178">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-179"><xref:System.Data.DataSet.CaseSensitive%2A>使用方法时，属性会影响对 <xref:System.Data.DataTable> 中包含的每个对象执行排序、搜索和筛选操作的方式 <xref:System.Data.DataSet> <xref:System.Data.DataTable.Select%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-179">The <xref:System.Data.DataSet.CaseSensitive%2A> property affects how sorting, searching, and filtering operations are performed on each <xref:System.Data.DataTable> object contained in a <xref:System.Data.DataSet> when using the <xref:System.Data.DataTable.Select%2A> method.</span></span>  
  
 <span data-ttu-id="9cf18-180">默认情况下，设置的 <xref:System.Data.DataSet.CaseSensitive%2A> 属性 <xref:System.Data.DataSet> 还会将 <xref:System.Data.DataTable.CaseSensitive%2A> 每个关联的的属性设置 <xref:System.Data.DataTable> 为相同的值。</span><span class="sxs-lookup"><span data-stu-id="9cf18-180">By default, setting the <xref:System.Data.DataSet.CaseSensitive%2A> property for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataTable.CaseSensitive%2A> property of each associated <xref:System.Data.DataTable> to the same value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-181">下面的示例将切换 <xref:System.Data.DataSet.CaseSensitive%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="9cf18-181">The following example toggles the <xref:System.Data.DataSet.CaseSensitive%2A> property.</span></span>  
  
 [!code-vb[Classic WebData DataSet.CaseSensitive Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.CaseSensitive Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-182">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-182">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="dataSet.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9cf18-183">通过移除所有表中的所有行来清除任何数据的 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-183">Clears the <see cref="T:System.Data.DataSet" /> of any data by removing all rows in all tables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-184">如果 <xref:System.Data.DataSet> 绑定到 <xref:System.Xml.XmlDataDocument> ，则调用 <xref:System.Data.DataSet.Clear%2A?displayProperty=nameWithType> 或 <xref:System.Data.DataTable.Clear%2A?displayProperty=nameWithType> 引发 <xref:System.NotSupportedException> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-184">If the <xref:System.Data.DataSet> is bound to an <xref:System.Xml.XmlDataDocument>, calling <xref:System.Data.DataSet.Clear%2A?displayProperty=nameWithType> or <xref:System.Data.DataTable.Clear%2A?displayProperty=nameWithType> raises the <xref:System.NotSupportedException>.</span></span> <span data-ttu-id="9cf18-185">若要避免这种情况，请遍历每个表，一次删除一个行。</span><span class="sxs-lookup"><span data-stu-id="9cf18-185">To avoid this situation, traverse each table, removing each row one at a time.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-186">下面的示例将清除 <xref:System.Data.DataSet> 所有表中所有行的。</span><span class="sxs-lookup"><span data-stu-id="9cf18-186">The following example clears the <xref:System.Data.DataSet> of all rows in all tables.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-187">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-187">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual System.Data.DataSet Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataSet Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Clone () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Data::DataSet ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; System.Data.DataSet&#xA;override this.Clone : unit -&gt; System.Data.DataSet" Usage="dataSet.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9cf18-188">复制 <see cref="T:System.Data.DataSet" /> 的结构，包括所有 <see cref="T:System.Data.DataTable" /> 架构、关系和约束。</span><span class="sxs-lookup"><span data-stu-id="9cf18-188">Copies the structure of the <see cref="T:System.Data.DataSet" />, including all <see cref="T:System.Data.DataTable" /> schemas, relations, and constraints.</span></span> <span data-ttu-id="9cf18-189">不要复制任何数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-189">Does not copy any data.</span></span></summary>
        <returns><span data-ttu-id="9cf18-190">新 <see cref="T:System.Data.DataSet" />，其架构与当前 <see cref="T:System.Data.DataSet" /> 的架构相同，但是不包含任何数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-190">A new <see cref="T:System.Data.DataSet" /> with the same schema as the current <see cref="T:System.Data.DataSet" />, but none of the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-191">如果这些类已被细分，则克隆还会属于相同的子类。</span><span class="sxs-lookup"><span data-stu-id="9cf18-191">If these classes have been subclassed, the clone will also be of the same subclasses.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-192">下面的示例创建 <xref:System.Data.DataSet> 对象的架构的克隆。</span><span class="sxs-lookup"><span data-stu-id="9cf18-192">The following example creates a clone of a <xref:System.Data.DataSet> object's schema.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Clone Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Clone Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Clone Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Clone Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.Copy" />
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-193">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-193">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Data.DataSet Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ Copy();" />
      <MemberSignature Language="F#" Value="member this.Copy : unit -&gt; System.Data.DataSet" Usage="dataSet.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9cf18-194">复制该 <see cref="T:System.Data.DataSet" /> 的结构和数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-194">Copies both the structure and data for this <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="9cf18-195">新的 <see cref="T:System.Data.DataSet" />，具有与该 <see cref="T:System.Data.DataSet" /> 相同的结构（表架构、关系和约束）和数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-195">A new <see cref="T:System.Data.DataSet" /> with the same structure (table schemas, relations, and constraints) and data as this <see cref="T:System.Data.DataSet" />.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="9cf18-196">如果已创建这些类的子类，则副本也将属于相同的子类。</span><span class="sxs-lookup"><span data-stu-id="9cf18-196">If these classes have been subclassed, the copy will also be of the same subclasses.</span></span>  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9cf18-197">下面的示例使用 <xref:System.Data.DataSet.Copy%2A> 方法创建原始的副本 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-197">The following example uses the <xref:System.Data.DataSet.Copy%2A> method to create a copy of the original <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Copy Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Copy Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Copy Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Copy Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.Clone" />
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-198">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-198">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateDataReader">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9cf18-199">为每个 <see cref="T:System.Data.DataTableReader" /> 返回带有一个结果集的 <see cref="T:System.Data.DataTable" />，顺序与 <see cref="P:System.Data.DataSet.Tables" /> 集合中表的显示顺序相同。</span><span class="sxs-lookup"><span data-stu-id="9cf18-199">Returns a <see cref="T:System.Data.DataTableReader" /> with one result set per <see cref="T:System.Data.DataTable" />, in the same sequence as the tables appear in the <see cref="P:System.Data.DataSet.Tables" /> collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-200">为了确保返回的中的结果集的顺序， <xref:System.Data.DataTableReader> 如果中的为 <xref:System.Data.DataTable> <xref:System.Data.DataSet> 空，则将在返回的内由空的结果集表示 `DataTableReader` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-200">In order to ensure the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it will be represented by an empty result set within the returned `DataTableReader`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-201">此示例是一个控制台应用程序，它创建三个 <xref:System.Data.DataTable> 实例，并将每个实例添加到 <xref:System.Data.DataSet> 中。</span><span class="sxs-lookup"><span data-stu-id="9cf18-201">This example, a Console application, creates three <xref:System.Data.DataTable> instances and adds each to a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-202">该示例调用 <xref:System.Data.DataSet.CreateDataReader%2A> 方法，并显示返回的的内容 <xref:System.Data.DataTableReader> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-202">The example calls the <xref:System.Data.DataSet.CreateDataReader%2A> method and displays the contents of the returned <xref:System.Data.DataTableReader>.</span></span> <span data-ttu-id="9cf18-203">请注意，中的结果集的顺序由 `DataTableReader` `DataTable` 作为参数传递的实例的顺序控制。</span><span class="sxs-lookup"><span data-stu-id="9cf18-203">Note that the order of the result sets in the `DataTableReader` is controlled by the order of the `DataTable` instances passed as parameters.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-204">此示例演示如何使用的重载版本之一 `CreateDataReader` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-204">This example shows how to use one of the overloaded versions of `CreateDataReader`.</span></span> <span data-ttu-id="9cf18-205">有关可能可用的其他示例，请参阅各个重载主题。</span><span class="sxs-lookup"><span data-stu-id="9cf18-205">For other examples that might be available, see the individual overload topics.</span></span>  
  
 [!code-csharp[DataWorks DataSet.CreateDataReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.CreateDataReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.CreateDataReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.CreateDataReader/VB/source.vb#1)]  
  
 <span data-ttu-id="9cf18-206">该示例在控制台窗口中显示以下代码：</span><span class="sxs-lookup"><span data-stu-id="9cf18-206">The example displays the following code in the Console window:</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-207">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-207">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateDataReader">
      <MemberSignature Language="C#" Value="public System.Data.DataTableReader CreateDataReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTableReader CreateDataReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.CreateDataReader" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDataReader () As DataTableReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTableReader ^ CreateDataReader();" />
      <MemberSignature Language="F#" Value="member this.CreateDataReader : unit -&gt; System.Data.DataTableReader" Usage="dataSet.CreateDataReader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9cf18-208">为每个 <see cref="T:System.Data.DataTableReader" /> 返回带有一个结果集的 <see cref="T:System.Data.DataTable" />，顺序与 <see cref="P:System.Data.DataSet.Tables" /> 集合中表的显示顺序相同。</span><span class="sxs-lookup"><span data-stu-id="9cf18-208">Returns a <see cref="T:System.Data.DataTableReader" /> with one result set per <see cref="T:System.Data.DataTable" />, in the same sequence as the tables appear in the <see cref="P:System.Data.DataSet.Tables" /> collection.</span></span></summary>
        <returns><span data-ttu-id="9cf18-209">包含一个或多个结果集的 <see cref="T:System.Data.DataTableReader" />，与源 <see cref="T:System.Data.DataTable" /> 中包含的 <see cref="T:System.Data.DataSet" /> 实例相对应。</span><span class="sxs-lookup"><span data-stu-id="9cf18-209">A <see cref="T:System.Data.DataTableReader" /> containing one or more result sets, corresponding to the <see cref="T:System.Data.DataTable" /> instances contained within the source <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-210">为了确保返回的中的结果集的顺序， <xref:System.Data.DataTableReader> 如果中的为 <xref:System.Data.DataTable> <xref:System.Data.DataSet> 空，则它由返回的中的空结果集表示 `DataTableReader` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-210">In order to ensure the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-211">下面的示例创建三个 <xref:System.Data.DataTable> 实例，并将每个实例添加到 <xref:System.Data.DataSet> 中。</span><span class="sxs-lookup"><span data-stu-id="9cf18-211">The following example creates three <xref:System.Data.DataTable> instances, and adds each to a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-212">然后，该示例将填充的传递 `DataSet` 给调用方法的过程 <xref:System.Data.DataSet.CreateDataReader%2A> ，并继续循环访问中包含的所有结果集 <xref:System.Data.DataTableReader> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-212">The example then passes the filled `DataSet` to a procedure that calls the <xref:System.Data.DataSet.CreateDataReader%2A> method, and proceeds to iterate through all the result sets contained within the <xref:System.Data.DataTableReader>.</span></span> <span data-ttu-id="9cf18-213">该示例在控制台窗口中显示结果。</span><span class="sxs-lookup"><span data-stu-id="9cf18-213">The example displays the results in the Console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.DataTableReader#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReader/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.DataTableReader#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReader/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-214">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-214">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CreateDataReader">
      <MemberSignature Language="C#" Value="public System.Data.DataTableReader CreateDataReader (params System.Data.DataTable[] dataTables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataTableReader CreateDataReader(class System.Data.DataTable[] dataTables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.CreateDataReader(System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDataReader (ParamArray dataTables As DataTable()) As DataTableReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataTableReader ^ CreateDataReader(... cli::array &lt;System::Data::DataTable ^&gt; ^ dataTables);" />
      <MemberSignature Language="F#" Value="member this.CreateDataReader : System.Data.DataTable[] -&gt; System.Data.DataTableReader" Usage="dataSet.CreateDataReader dataTables" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTableReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTables" Type="System.Data.DataTable[]" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="dataTables"><span data-ttu-id="9cf18-215">一个 DataTable 数组，它提供要在 <see cref="T:System.Data.DataTableReader" /> 中返回的结果集的顺序。</span><span class="sxs-lookup"><span data-stu-id="9cf18-215">An array of DataTables providing the order of the result sets to be returned in the <see cref="T:System.Data.DataTableReader" />.</span></span></param>
        <summary><span data-ttu-id="9cf18-216">为每个 <see cref="T:System.Data.DataTableReader" /> 返回带有一个结果集的 <see cref="T:System.Data.DataTable" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-216">Returns a <see cref="T:System.Data.DataTableReader" /> with one result set per <see cref="T:System.Data.DataTable" />.</span></span></summary>
        <returns><span data-ttu-id="9cf18-217">包含一个或多个结果集的 <see cref="T:System.Data.DataTableReader" />，与源 <see cref="T:System.Data.DataTable" /> 中包含的 <see cref="T:System.Data.DataSet" /> 实例相对应。</span><span class="sxs-lookup"><span data-stu-id="9cf18-217">A <see cref="T:System.Data.DataTableReader" /> containing one or more result sets, corresponding to the <see cref="T:System.Data.DataTable" /> instances contained within the source <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="9cf18-218">返回的结果集按 <paramref name="dataTables" /> 参数所指定的顺序排列。</span><span class="sxs-lookup"><span data-stu-id="9cf18-218">The returned result sets are in the order specified by the <paramref name="dataTables" /> parameter.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-219">为了确保返回的中的结果集的顺序为 <xref:System.Data.DataTableReader> 空，如果中的为 <xref:System.Data.DataTable> <xref:System.Data.DataSet> 空，则它由返回的中的空结果集表示 `DataTableReader` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-219">In order to ensure that the order of the result sets within the returned <xref:System.Data.DataTableReader>, if a <xref:System.Data.DataTable> within the <xref:System.Data.DataSet> is empty, it is represented by an empty result set within the returned `DataTableReader`.</span></span> <span data-ttu-id="9cf18-220">由于此重载版本允许您将 `DataTable` 实例列表作为参数提供，因此您可以指定结果集在返回的中的显示顺序 `DataTableReader` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-220">Because this overloaded version allows you to supply a list of `DataTable` instances as parameters, you can specify the order in which the result sets appear within the returned `DataTableReader`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-221">此示例是一个控制台应用程序，它创建三个 <xref:System.Data.DataTable> 实例，并将每个实例添加到 <xref:System.Data.DataSet> 中。</span><span class="sxs-lookup"><span data-stu-id="9cf18-221">This example, a Console application, creates three <xref:System.Data.DataTable> instances and adds each to a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-222">该示例调用 <xref:System.Data.DataSet.CreateDataReader%2A> 方法，并显示返回的的内容 <xref:System.Data.DataTableReader> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-222">The example calls the <xref:System.Data.DataSet.CreateDataReader%2A> method and displays the contents of the returned <xref:System.Data.DataTableReader>.</span></span> <span data-ttu-id="9cf18-223">请注意，中的结果集的顺序由 `DataTableReader` `DataTable` 作为参数传递的实例的顺序控制。</span><span class="sxs-lookup"><span data-stu-id="9cf18-223">Note that the order of the result sets in the `DataTableReader` is controlled by the order of the `DataTable` instances passed as parameters.</span></span> <span data-ttu-id="9cf18-224">该示例在控制台窗口中显示结果。</span><span class="sxs-lookup"><span data-stu-id="9cf18-224">The example displays the results in the Console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.DataTableReaderTables#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReaderTables/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.DataTableReaderTables#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.DataTableReaderTables/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-225">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-225">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DataSetName">
      <MemberSignature Language="C#" Value="public string DataSetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSetName" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.DataSetName" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSetName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DataSetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataSetName : string with get, set" Usage="System.Data.DataSet.DataSetName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Data.DataSysDescription("DataSetDataSetNameDescr")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Data.DataSysDescription("DataSetDataSetNameDescr")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9cf18-226">获取或设置当前 <see cref="T:System.Data.DataSet" /> 的名称。</span><span class="sxs-lookup"><span data-stu-id="9cf18-226">Gets or sets the name of the current <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="9cf18-227"><see cref="T:System.Data.DataSet" /> 的名称。</span><span class="sxs-lookup"><span data-stu-id="9cf18-227">The name of the <see cref="T:System.Data.DataSet" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9cf18-228">下面的示例使用给定的创建新的 <xref:System.Data.DataSet> <xref:System.Data.DataSet.DataSetName%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-228">The following example creates a new <xref:System.Data.DataSet> with the given <xref:System.Data.DataSet.DataSetName%2A>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.DataSetName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSetName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.DataSetName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DataSetName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-229">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-229">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DefaultViewManager">
      <MemberSignature Language="C#" Value="public System.Data.DataViewManager DefaultViewManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataViewManager DefaultViewManager" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.DefaultViewManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultViewManager As DataViewManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataViewManager ^ DefaultViewManager { System::Data::DataViewManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultViewManager : System.Data.DataViewManager" Usage="System.Data.DataSet.DefaultViewManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Data.DataSysDescription("DataSetDefaultViewDescr")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Data.DataSysDescription("DataSetDefaultViewDescr")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataViewManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9cf18-230">获取 <see cref="T:System.Data.DataSet" /> 所包含的数据的自定义视图，以允许使用自定义的 <see cref="T:System.Data.DataViewManager" /> 进行筛选、搜索和导航。</span><span class="sxs-lookup"><span data-stu-id="9cf18-230">Gets a custom view of the data contained in the <see cref="T:System.Data.DataSet" /> to allow filtering, searching, and navigating using a custom <see cref="T:System.Data.DataViewManager" />.</span></span></summary>
        <value><span data-ttu-id="9cf18-231"><see cref="T:System.Data.DataViewManager" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-231">A <see cref="T:System.Data.DataViewManager" /> object.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-232"><xref:System.Data.DataViewManager>通过属性返回的， <xref:System.Data.DataSet.DefaultViewManager%2A> 您可以在中为每个创建自定义设置 <xref:System.Data.DataTable> <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-232">The <xref:System.Data.DataViewManager> returned by the <xref:System.Data.DataSet.DefaultViewManager%2A> property allows you to create custom settings for each <xref:System.Data.DataTable> in the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="9cf18-233">从获取时 <xref:System.Data.DataView> <xref:System.Data.DataTable> ，将 <xref:System.Data.DataViewRowState> 根据属性中的设置来配置排序顺序、筛选和 <xref:System.Data.DataSet.DefaultViewManager%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-233">When you obtain a <xref:System.Data.DataView> from a <xref:System.Data.DataTable>, the sort order, filtering, and <xref:System.Data.DataViewRowState> are configured according to the settings in the <xref:System.Data.DataSet.DefaultViewManager%2A> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-234">下面的示例获取的默认值 <xref:System.Data.DataViewManager> <xref:System.Data.DataSet> ，并将添加 <xref:System.Data.DataTable> 到 <xref:System.Data.DataTableCollection> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-234">The following example gets the default <xref:System.Data.DataViewManager> for a <xref:System.Data.DataSet>, and adds a <xref:System.Data.DataTable> to the <xref:System.Data.DataTableCollection>.</span></span>  
  
 [!code-vb[Classic WebData DataSet.DefaultViewManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.DefaultViewManager Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-235">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-235">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DetermineSchemaSerializationMode">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9cf18-236">确定 <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> 的 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-236">Determines the <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-237">在反序列化类型时，可以调用此方法 <xref:System.Data.DataSet> 以确定其 <xref:System.Data.DataSet.SchemaSerializationMode%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-237">This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-238">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-238">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="DetermineSchemaSerializationMode">
      <MemberSignature Language="C#" Value="protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Data.SchemaSerializationMode DetermineSchemaSerializationMode(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Function DetermineSchemaSerializationMode (reader As XmlReader) As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Data::SchemaSerializationMode DetermineSchemaSerializationMode(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.DetermineSchemaSerializationMode : System.Xml.XmlReader -&gt; System.Data.SchemaSerializationMode" Usage="dataSet.DetermineSchemaSerializationMode reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9cf18-239">在对 <see cref="T:System.Xml.XmlReader" /> 进行反序列化期间传递的 <see cref="T:System.Data.DataSet" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="9cf18-239">The <see cref="T:System.Xml.XmlReader" /> instance that is passed during deserialization of the <see cref="T:System.Data.DataSet" />.</span></span></param>
        <summary><span data-ttu-id="9cf18-240">确定 <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> 的 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-240">Determines the <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="9cf18-241">一个 <see cref="T:System.Data.SchemaSerializationMode" /> 枚举，指示是否已从负载中忽略架构信息。</span><span class="sxs-lookup"><span data-stu-id="9cf18-241">An <see cref="T:System.Data.SchemaSerializationMode" /> enumeration indicating whether schema information has been omitted from the payload.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-242">在反序列化类型时，可以调用此方法 <xref:System.Data.DataSet> 以确定其 <xref:System.Data.DataSet.SchemaSerializationMode%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-242">This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-243">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-243">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DetermineSchemaSerializationMode">
      <MemberSignature Language="C#" Value="protected System.Data.SchemaSerializationMode DetermineSchemaSerializationMode (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Data.SchemaSerializationMode DetermineSchemaSerializationMode(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function DetermineSchemaSerializationMode (info As SerializationInfo, context As StreamingContext) As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Data::SchemaSerializationMode DetermineSchemaSerializationMode(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.DetermineSchemaSerializationMode : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; System.Data.SchemaSerializationMode" Usage="dataSet.DetermineSchemaSerializationMode (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="9cf18-244"><see cref="T:System.Runtime.Serialization.SerializationInfo" />，在远程处理方案中进行反序列化期间将使用它调用 <see langword="DataSet" /> 的受保护构造函数 <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-244">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that a <see langword="DataSet" />'s protected constructor <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> is invoked with during deserialization in remoting scenarios.</span></span></param>
        <param name="context"><span data-ttu-id="9cf18-245"><see cref="T:System.Runtime.Serialization.StreamingContext" />，在远程处理方案中进行反序列化期间将使用它调用 <see langword="DataSet" /> 的受保护构造函数 <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-245">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that a <see langword="DataSet" />'s protected constructor <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> is invoked with during deserialization in remoting scenarios.</span></span></param>
        <summary><span data-ttu-id="9cf18-246">确定 <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> 的 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-246">Determines the <see cref="P:System.Data.DataSet.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="9cf18-247">一个 <see cref="T:System.Data.SchemaSerializationMode" /> 枚举，指示是否已从负载中忽略架构信息。</span><span class="sxs-lookup"><span data-stu-id="9cf18-247">An <see cref="T:System.Data.SchemaSerializationMode" /> enumeration indicating whether schema information has been omitted from the payload.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-248">在反序列化类型时，可以调用此方法 <xref:System.Data.DataSet> 以确定其 <xref:System.Data.DataSet.SchemaSerializationMode%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-248">This method can be called when deserializing a typed <xref:System.Data.DataSet> to determine its <xref:System.Data.DataSet.SchemaSerializationMode%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-249">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-249">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberSignature Language="F#" Value="abstract member EndInit : unit -&gt; unit&#xA;override this.EndInit : unit -&gt; unit" Usage="dataSet.EndInit " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9cf18-250">结束在窗体上使用或由另一个组件使用的 <see cref="T:System.Data.DataSet" /> 的初始化。</span><span class="sxs-lookup"><span data-stu-id="9cf18-250">Ends the initialization of a <see cref="T:System.Data.DataSet" /> that is used on a form or used by another component.</span></span> <span data-ttu-id="9cf18-251">初始化发生在运行时。</span><span class="sxs-lookup"><span data-stu-id="9cf18-251">The initialization occurs at run time.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-252">Visual Studio .NET 设计环境使用此方法来结束在窗体上使用或由另一个组件使用的组件的初始化。</span><span class="sxs-lookup"><span data-stu-id="9cf18-252">The Visual Studio .NET design environment uses this method to end the initialization of a component that is used on a form or used by another component.</span></span> <span data-ttu-id="9cf18-253"><xref:System.Data.DataSet.BeginInit%2A>方法启动初始化。</span><span class="sxs-lookup"><span data-stu-id="9cf18-253">The <xref:System.Data.DataSet.BeginInit%2A> method starts the initialization.</span></span> <span data-ttu-id="9cf18-254">使用 <xref:System.Data.DataSet.BeginInit%2A> 和 <xref:System.Data.DataSet.EndInit%2A> 方法可防止控件在完全初始化之前被使用。</span><span class="sxs-lookup"><span data-stu-id="9cf18-254">Using the <xref:System.Data.DataSet.BeginInit%2A> and <xref:System.Data.DataSet.EndInit%2A> methods prevents the control from being used before it is fully initialized.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-255">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-255">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="EnforceConstraints">
      <MemberSignature Language="C#" Value="public bool EnforceConstraints { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnforceConstraints" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.EnforceConstraints" />
      <MemberSignature Language="VB.NET" Value="Public Property EnforceConstraints As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnforceConstraints { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnforceConstraints : bool with get, set" Usage="System.Data.DataSet.EnforceConstraints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(true)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Data.DataSysDescription("DataSetEnforceConstraintsDescr")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Data.DataSysDescription("DataSetEnforceConstraintsDescr")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9cf18-256">获取或设置一个值，该值指示在尝试执行任何更新操作时是否遵循约束规则。</span><span class="sxs-lookup"><span data-stu-id="9cf18-256">Gets or sets a value indicating whether constraint rules are followed when attempting any update operation.</span></span></summary>
        <value><span data-ttu-id="9cf18-257"><see langword="true" /> 如果强制执行规则，则为;否则为 <see langword="false" /> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-257"><see langword="true" /> if rules are enforced; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="9cf18-258">默认为 <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-258">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-259">在 <xref:System.Data.DataTable> 级别 (属性) 设置约束 <xref:System.Data.DataTable.Constraints%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-259">Constraints are set at the <xref:System.Data.DataTable> level (<xref:System.Data.DataTable.Constraints%2A> property).</span></span> <span data-ttu-id="9cf18-260">有关创建约束的详细信息，请参阅 [DataTable 约束](/dotnet/framework/data/adonet/dataset-datatable-dataview/datatable-constraints)。</span><span class="sxs-lookup"><span data-stu-id="9cf18-260">For more information about creating constraints, see [DataTable Constraints](/dotnet/framework/data/adonet/dataset-datatable-dataview/datatable-constraints).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-261">下面的示例创建一个 <xref:System.Data.DataSet> 具有一个表、一个列、五行和一个表的 <xref:System.Data.UniqueConstraint> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-261">The following example creates a <xref:System.Data.DataSet> with one table, one column, five rows, and one <xref:System.Data.UniqueConstraint>.</span></span> <span data-ttu-id="9cf18-262"><xref:System.Data.DataSet.EnforceConstraints%2A>属性设置为 `false` ，每行的值都设置为相同的值。</span><span class="sxs-lookup"><span data-stu-id="9cf18-262">The <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false` and the values of each row are set to the same value.</span></span> <span data-ttu-id="9cf18-263">如果将 <xref:System.Data.DataSet.EnforceConstraints%2A> 属性重置为 `true` ， <xref:System.Data.ConstraintException> 则会生成。</span><span class="sxs-lookup"><span data-stu-id="9cf18-263">When the <xref:System.Data.DataSet.EnforceConstraints%2A> property is reset to `true`, a <xref:System.Data.ConstraintException> is generated.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.EnforceConstraints Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.EnforceConstraints Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.EnforceConstraints Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.EnforceConstraints Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.ConstraintException"><span data-ttu-id="9cf18-264">无法实施一个或多个约束。</span><span class="sxs-lookup"><span data-stu-id="9cf18-264">One or more constraints cannot be enforced.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-265">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-265">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProperties">
      <MemberSignature Language="C#" Value="public System.Data.PropertyCollection ExtendedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.PropertyCollection ExtendedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.ExtendedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExtendedProperties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::PropertyCollection ^ ExtendedProperties { System::Data::PropertyCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExtendedProperties : System.Data.PropertyCollection" Usage="System.Data.DataSet.ExtendedProperties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Data.DataSysDescription("ExtendedPropertiesDescr")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Data.DataSysDescription("ExtendedPropertiesDescr")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9cf18-266">获取与 <see langword="DataSet" /> 相关的自定义用户信息的集合。</span><span class="sxs-lookup"><span data-stu-id="9cf18-266">Gets the collection of customized user information associated with the <see langword="DataSet" />.</span></span></summary>
        <value><span data-ttu-id="9cf18-267">包含所有自定义用户信息的 <see cref="T:System.Data.PropertyCollection" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-267">A <see cref="T:System.Data.PropertyCollection" /> with all custom user information.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-268"><xref:System.Data.DataSet.ExtendedProperties%2A>属性使您可以存储的自定义信息 `DataSet` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-268">The <xref:System.Data.DataSet.ExtendedProperties%2A> property enables you to store custom information with the `DataSet`.</span></span> <span data-ttu-id="9cf18-269">例如，您可以存储数据的刷新时间。</span><span class="sxs-lookup"><span data-stu-id="9cf18-269">For example, you might store a time when the data should be refreshed.</span></span>  
  
 <span data-ttu-id="9cf18-270"><xref:System.String>如果希望在写入为 XML 时保留这些属性，则扩展属性必须为类型 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-270">Extended properties must be of type <xref:System.String> if you want them persisted when the <xref:System.Data.DataSet> is written as XML.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-271">下面的示例将自定义属性添加到 <xref:System.Data.PropertyCollection> 由属性返回的 <xref:System.Data.DataColumn.ExtendedProperties%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-271">The following example adds a custom property to the <xref:System.Data.PropertyCollection> returned by the <xref:System.Data.DataColumn.ExtendedProperties%2A> property.</span></span> <span data-ttu-id="9cf18-272">第二个示例检索自定义属性。</span><span class="sxs-lookup"><span data-stu-id="9cf18-272">The second example retrieves the custom property.</span></span>  
  
 [!code-csharp[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-273">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-273">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9cf18-274">获取 <see cref="T:System.Data.DataSet" /> 的副本，该副本包含自上次加载以来或自调用 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以来的所有更改。</span><span class="sxs-lookup"><span data-stu-id="9cf18-274">Gets a copy of the <see cref="T:System.Data.DataSet" /> containing all changes made to it since it was last loaded, or since <see cref="M:System.Data.DataSet.AcceptChanges" /> was called.</span></span></summary>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-275">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-275">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataSet GetChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet GetChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChanges () As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ GetChanges();" />
      <MemberSignature Language="F#" Value="member this.GetChanges : unit -&gt; System.Data.DataSet" Usage="dataSet.GetChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9cf18-276">获取 <see cref="T:System.Data.DataSet" /> 的副本，该副本包含自加载以来或自上次调用 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以来对该数据集进行的所有更改。</span><span class="sxs-lookup"><span data-stu-id="9cf18-276">Gets a copy of the <see cref="T:System.Data.DataSet" /> that contains all changes made to it since it was loaded or since <see cref="M:System.Data.DataSet.AcceptChanges" /> was last called.</span></span></summary>
        <returns><span data-ttu-id="9cf18-277">此 <see cref="T:System.Data.DataSet" /> 中更改的副本，可以对该副本执行操作，然后可以使用 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 将其合并回去。</span><span class="sxs-lookup"><span data-stu-id="9cf18-277">A copy of the changes from this <see cref="T:System.Data.DataSet" /> that can have actions performed on it and later be merged back in using <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />.</span></span> <span data-ttu-id="9cf18-278">如果未找到更改的行，则该方法将返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-278">If no changed rows are found, the method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-279">创建一个新 <xref:System.Data.DataSet> 的，它包含原始中 <xref:System.Data.DataSet> 具有挂起的更改的所有行的副本。</span><span class="sxs-lookup"><span data-stu-id="9cf18-279">Creates a new <xref:System.Data.DataSet> that contains a copy of all rows in the original <xref:System.Data.DataSet> that have pending changes.</span></span> <span data-ttu-id="9cf18-280"><xref:System.Data.DataSet>如果未更改的行包含与更改的行中的外键相对应的主键，则关系约束可能导致将其他未更改的行添加到新的中。</span><span class="sxs-lookup"><span data-stu-id="9cf18-280">Relationship constraints can cause additional unchanged rows to be added to the new <xref:System.Data.DataSet> if the unchanged rows contain primary keys corresponding to foreign keys in the changed rows.</span></span> <span data-ttu-id="9cf18-281">`null`如果原始中没有行 <xref:System.Data.DataSet> 具有挂起的更改，则该方法将返回。</span><span class="sxs-lookup"><span data-stu-id="9cf18-281">The method returns `null` if there are no rows in the original <xref:System.Data.DataSet> that have pending changes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-282">下面的示例创建一个 <xref:System.Data.DataSet> 具有一个表、两列和10行的简单。</span><span class="sxs-lookup"><span data-stu-id="9cf18-282">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="9cf18-283">更改了两个值，并添加了一行。</span><span class="sxs-lookup"><span data-stu-id="9cf18-283">Two values are changed, and one row is added.</span></span> <span data-ttu-id="9cf18-284">使用方法创建更改的数据的子集 <xref:System.Data.DataSet.GetChanges%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-284">A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method.</span></span> <span data-ttu-id="9cf18-285">在协调错误后，会将一个新列添加到子集，从而更改架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-285">After reconciling errors, a new column is added to the subset, changing the schema.</span></span> <span data-ttu-id="9cf18-286">在 <xref:System.Data.DataSet.Merge%2A> 将设置为的情况下调用方法时 `missingSchemaAction` `MissingSchemaAction.Add` ，会将新列添加到原始 <xref:System.Data.DataSet> 对象的架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-286">When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.HasChanges" />
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-287">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-287">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetChanges">
      <MemberSignature Language="C#" Value="public System.Data.DataSet GetChanges (System.Data.DataRowState rowStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.DataSet GetChanges(valuetype System.Data.DataRowState rowStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetChanges(System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChanges (rowStates As DataRowState) As DataSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::DataSet ^ GetChanges(System::Data::DataRowState rowStates);" />
      <MemberSignature Language="F#" Value="member this.GetChanges : System.Data.DataRowState -&gt; System.Data.DataSet" Usage="dataSet.GetChanges rowStates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowStates" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="rowStates"><span data-ttu-id="9cf18-288"><see cref="T:System.Data.DataRowState" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="9cf18-288">One of the <see cref="T:System.Data.DataRowState" /> values.</span></span></param>
        <summary><span data-ttu-id="9cf18-289">获取由 <see cref="T:System.Data.DataRowState" /> 筛选的 <see cref="T:System.Data.DataSet" /> 的副本，该副本包含上次加载以来或调用 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以来进行的所有更改。</span><span class="sxs-lookup"><span data-stu-id="9cf18-289">Gets a copy of the <see cref="T:System.Data.DataSet" /> containing all changes made to it since it was last loaded, or since <see cref="M:System.Data.DataSet.AcceptChanges" /> was called, filtered by <see cref="T:System.Data.DataRowState" />.</span></span></summary>
        <returns><span data-ttu-id="9cf18-290">此 <see cref="T:System.Data.DataSet" /> 的筛选副本，可以对该副本执行操作，然后使用 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 将其合并回数据集。</span><span class="sxs-lookup"><span data-stu-id="9cf18-290">A filtered copy of the <see cref="T:System.Data.DataSet" /> that can have actions performed on it, and subsequently be merged back in using <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />.</span></span> <span data-ttu-id="9cf18-291">如果未找到所需 <see cref="T:System.Data.DataRowState" /> 的行，则该方法返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-291">If no rows of the desired <see cref="T:System.Data.DataRowState" /> are found, the method returns <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-292"><xref:System.Data.DataSet.GetChanges%2A>方法用于生成第二个 <xref:System.Data.DataSet> 对象，该对象仅包含在原始中引入的更改。</span><span class="sxs-lookup"><span data-stu-id="9cf18-292">The <xref:System.Data.DataSet.GetChanges%2A> method is used to produce a second <xref:System.Data.DataSet> object that contains only the changes introduced into the original.</span></span> <span data-ttu-id="9cf18-293">使用 `rowStates` 参数可指定新对象应包含的更改类型。</span><span class="sxs-lookup"><span data-stu-id="9cf18-293">Use the `rowStates` argument to specify the type of changes the new object should include.</span></span>  
  
 <span data-ttu-id="9cf18-294">此返回的副本旨在合并回原始 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-294">This returned copy is designed to be merged back in to this original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-295">关系约束可能会导致包含标记 `Unchanged` 为的父行。</span><span class="sxs-lookup"><span data-stu-id="9cf18-295">Relationship constraints may cause parent rows marked `Unchanged` to be included.</span></span> <span data-ttu-id="9cf18-296">如果未找到所需的行 <xref:System.Data.DataRowState> ，则该 <xref:System.Data.DataSet.GetChanges%2A> 方法将返回 `null` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-296">If no rows of the desired <xref:System.Data.DataRowState> are found, the <xref:System.Data.DataSet.GetChanges%2A> method returns `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-297">下面的示例使用 <xref:System.Data.DataSet.GetChanges%2A> 方法来创建第二个 <xref:System.Data.DataSet> 对象，然后使用该对象更新数据源。</span><span class="sxs-lookup"><span data-stu-id="9cf18-297">The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-298">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-298">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetDataSetSchema">
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema (System.Xml.Schema.XmlSchemaSet? schemaSet);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema(class System.Xml.Schema.XmlSchemaSet schemaSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDataSetSchema (schemaSet As XmlSchemaSet) As XmlSchemaComplexType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xml::Schema::XmlSchemaComplexType ^ GetDataSetSchema(System::Xml::Schema::XmlSchemaSet ^ schemaSet);" />
      <MemberSignature Language="F#" Value="static member GetDataSetSchema : System.Xml.Schema.XmlSchemaSet -&gt; System.Xml.Schema.XmlSchemaComplexType" Usage="System.Data.DataSet.GetDataSetSchema schemaSet" />
      <MemberSignature Language="C#" Value="public static System.Xml.Schema.XmlSchemaComplexType GetDataSetSchema (System.Xml.Schema.XmlSchemaSet schemaSet);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaComplexType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="schemaSet" Type="System.Xml.Schema.XmlSchemaSet" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="schemaSet"><span data-ttu-id="9cf18-299">指定的架构集。</span><span class="sxs-lookup"><span data-stu-id="9cf18-299">The specified schema set.</span></span></param>
        <summary><span data-ttu-id="9cf18-300">获取数据集的 <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的副本。</span><span class="sxs-lookup"><span data-stu-id="9cf18-300">Gets a copy of <see cref="T:System.Xml.Schema.XmlSchemaSet" /> for the DataSet.</span></span></summary>
        <returns><span data-ttu-id="9cf18-301"><see cref="T:System.Xml.Schema.XmlSchemaSet" /> 的副本。</span><span class="sxs-lookup"><span data-stu-id="9cf18-301">A copy of <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dataSet.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="9cf18-302">一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />，它保存与 <see cref="T:System.Data.DataSet" /> 关联的序列化数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-302">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized data associated with the <see cref="T:System.Data.DataSet" />.</span></span></param>
        <param name="context"><span data-ttu-id="9cf18-303">一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />，它包含与 <see cref="T:System.Data.DataSet" /> 关联的序列化流的源和目标。</span><span class="sxs-lookup"><span data-stu-id="9cf18-303">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the source and destination of the serialized stream associated with the <see cref="T:System.Data.DataSet" />.</span></span></param>
        <summary><span data-ttu-id="9cf18-304">使用序列化 <see cref="T:System.Data.DataSet" /> 时所需的数据填充序列化信息对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-304">Populates a serialization information object with the data needed to serialize the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9cf18-305"><paramref name="info" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-305">The <paramref name="info" /> parameter is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-306">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-306">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaSerializable">
      <MemberSignature Language="C#" Value="protected virtual System.Xml.Schema.XmlSchema GetSchemaSerializable ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Xml.Schema.XmlSchema GetSchemaSerializable() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetSchemaSerializable" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetSchemaSerializable () As XmlSchema" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Xml::Schema::XmlSchema ^ GetSchemaSerializable();" />
      <MemberSignature Language="F#" Value="abstract member GetSchemaSerializable : unit -&gt; System.Xml.Schema.XmlSchema&#xA;override this.GetSchemaSerializable : unit -&gt; System.Xml.Schema.XmlSchema" Usage="dataSet.GetSchemaSerializable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9cf18-307">返回一个可序列化的 <see cref="T:System.Xml.Schema.XmlSchema" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="9cf18-307">Returns a serializable <see cref="T:System.Xml.Schema.XmlSchema" /> instance.</span></span></summary>
        <returns><span data-ttu-id="9cf18-308"><see cref="T:System.Xml.Schema.XmlSchema" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="9cf18-308">The <see cref="T:System.Xml.Schema.XmlSchema" /> instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSerializationData">
      <MemberSignature Language="C#" Value="protected void GetSerializationData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void GetSerializationData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub GetSerializationData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void GetSerializationData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.GetSerializationData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dataSet.GetSerializationData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="9cf18-309"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="9cf18-309">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> instance.</span></span></param>
        <param name="context"><span data-ttu-id="9cf18-310">流上下文。</span><span class="sxs-lookup"><span data-stu-id="9cf18-310">The streaming context.</span></span></param>
        <summary><span data-ttu-id="9cf18-311">从二进制或 XML 流反序列化表数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-311">Deserializes the table data from the binary or XML stream.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetXml">
      <MemberSignature Language="C#" Value="public string GetXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetXml" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXml () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetXml();" />
      <MemberSignature Language="F#" Value="member this.GetXml : unit -&gt; string" Usage="dataSet.GetXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9cf18-312">返回存储在 <see cref="T:System.Data.DataSet" /> 中的数据的 XML 表示形式。</span><span class="sxs-lookup"><span data-stu-id="9cf18-312">Returns the XML representation of the data stored in the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="9cf18-313">表示存储在 <see cref="T:System.Data.DataSet" /> 中的数据的字符串。</span><span class="sxs-lookup"><span data-stu-id="9cf18-313">A string that is a representation of the data stored in the <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-314">调用此方法与 <xref:System.Data.DataSet.WriteXml%2A> <xref:System.Data.XmlWriteMode> 将设置为时相同 <xref:System.Data.XmlWriteMode.IgnoreSchema> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-314">Calling this method is identical to calling <xref:System.Data.DataSet.WriteXml%2A> with <xref:System.Data.XmlWriteMode> set to <xref:System.Data.XmlWriteMode.IgnoreSchema>.</span></span>  
  
 <span data-ttu-id="9cf18-315"><xref:System.Data.DataSet.GetXml%2A> 将 XML 作为字符串返回，因此需要的开销比 <xref:System.Data.DataSet.WriteXml%2A> 将 xml 写入文件的开销更多。</span><span class="sxs-lookup"><span data-stu-id="9cf18-315"><xref:System.Data.DataSet.GetXml%2A> returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXml%2A> to write XML to a file.</span></span>  
  
 <span data-ttu-id="9cf18-316">如果 <xref:System.Data.DataSet> 使用架构推理构建并使用 XML 或 Web 服务对其进行序列化，则列排序可能会更改。</span><span class="sxs-lookup"><span data-stu-id="9cf18-316">If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-317">下面的示例创建一个 <xref:System.Data.DataSet> 并 <xref:System.Data.DataTable> 添加示例数据，然后以 XML 格式显示数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-317">The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, adds sample data, and then displays the data in XML format.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXml Example/VB/source.vb#1)]  
  
 <span data-ttu-id="9cf18-318">此示例演示如何从数据集将数据写入 XML 文件中并从 XML 中将数据读取到数据集中。</span><span class="sxs-lookup"><span data-stu-id="9cf18-318">This sample demonstrates how to write data into an XML file from a DataSet and read data into DataSet from XML.</span></span> <span data-ttu-id="9cf18-319">此示例将创建一个具有两个表的数据集，使用两种方法将数据集导出到 XML 文件（WriteXml 和 GetXml）中，并使用两种方法（ReadXml 和 InferXmlSchema）从 XML 文件中导入数据集。</span><span class="sxs-lookup"><span data-stu-id="9cf18-319">This sample will create one dataset with two tables, use two ways to export a dataset into the XML files (WriteXml and GetXml), and use two ways (ReadXml and InferXmlSchema) to import a dataset from the XML files.</span></span>  
  
 <span data-ttu-id="9cf18-320">在编译并运行此示例之前，您需要在示例目录中创建四个 XML 文件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-320">Before you compile and run the sample, you need to create four XML files in the sample directory.</span></span> <span data-ttu-id="9cf18-321">首先，创建 ElementsWithAttributes.xml：</span><span class="sxs-lookup"><span data-stu-id="9cf18-321">First, create ElementsWithAttributes.xml:</span></span>  
  
```xml  
<MySchool>  
  <Course CourseID="C1045" Year="2012"  Title="Calculus" Credits="4" DepartmentID="7">New</Course>  
  <Course CourseID="C1061" Year="2012"  Title="Physics" Credits="4" DepartmentID="1" />  
  <Department DepartmentID="1" Name="Engineering" Budget="350000" StartDate="2007-09-01T00:00:00+08:00" Administrator="2" />  
  <Department DepartmentID="7" Name="Mathematics" Budget="250024" StartDate="2007-09-01T00:00:00+08:00" Administrator="3">Cancelled</Department>  
</MySchool>  
```  
  
 <span data-ttu-id="9cf18-322">接下来，创建 ElementsWithChildElementsxml.xml：</span><span class="sxs-lookup"><span data-stu-id="9cf18-322">Next, create ElementsWithChildElementsxml.xml:</span></span>  
  
```xml  
<MySchool>  
  <Course>  
    <CourseID>C1045</CourseID>  
    <Year>2012</Year>  
    <Title>Calculus</Title>  
    <Credits>4</Credits>  
    <DepartmentID>7</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C1061</CourseID>  
    <Year>2012</Year>  
    <Title>Physics</Title>  
    <Credits>4</Credits>  
    <DepartmentID>1</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C2021</CourseID>  
    <Year>2012</Year>  
    <Title>Composition</Title>  
    <Credits>3</Credits>  
    <DepartmentID>2</DepartmentID>  
  </Course>  
  <Course>  
    <CourseID>C2042</CourseID>  
    <Year>2012</Year>  
    <Title>Literature</Title>  
    <Credits>4</Credits>  
    <DepartmentID>2</DepartmentID>  
  </Course>  
  <Department>  
    <DepartmentID>1</DepartmentID>  
    <Name>Engineering</Name>  
    <Budget>350000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>2</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>2</DepartmentID>  
    <Name>English</Name>  
    <Budget>120000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>6</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>4</DepartmentID>  
    <Name>Economics</Name>  
    <Budget>200000</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>4</Administrator>  
  </Department>  
  <Department>  
    <DepartmentID>7</DepartmentID>  
    <Name>Mathematics</Name>  
    <Budget>250024</Budget>  
    <StartDate>2007-09-01T00:00:00+08:00</StartDate>  
    <Administrator>3</Administrator>  
  </Department>  
</MySchool>  
```  
  
 <span data-ttu-id="9cf18-323">现在创建 ElementsWithOnlyAttributes.xml：</span><span class="sxs-lookup"><span data-stu-id="9cf18-323">Now create ElementsWithOnlyAttributes.xml:</span></span>  
  
```xml
<MySchool>  
  <Course CourseID="C1045" Year="2012"  Title="Calculus" Credits="4" DepartmentID="7" />  
  <Course CourseID="C1061" Year="2012"  Title="Physics" Credits="4" DepartmentID="1" />  
  <Department DepartmentID="1" Name="Engineering" Budget="350000" StartDate="2007-09-01T00:00:00+08:00" Administrator="2" />  
  <Department DepartmentID="7" Name="Mathematics" Budget="250024" StartDate="2007-09-01T00:00:00+08:00" Administrator="3" />  
</MySchool>  
```  
  
 <span data-ttu-id="9cf18-324">最后，创建 RepeatingElements.xml：</span><span class="sxs-lookup"><span data-stu-id="9cf18-324">And finally, create RepeatingElements.xml:</span></span>  
  
```xml
<MySchool>  
  <Course>C1045</Course>  
  <Course>C1061</Course>  
  <Department>Engineering</Department>   
  <Department>Mathematics</Department>  
</MySchool>  
```  
  
 <span data-ttu-id="9cf18-325">现在你可编译并运行以下源代码。</span><span class="sxs-lookup"><span data-stu-id="9cf18-325">Now you can compile and run the following source code.</span></span>  <span data-ttu-id="9cf18-326">对于本示例，[如何将数据集的数据存储到 XML 文件中](https://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3)具有 Visual Basic 和 c # 项目。</span><span class="sxs-lookup"><span data-stu-id="9cf18-326">[How to Store Data of DataSet into XML File](https://code.msdn.microsoft.com/How-to-Store-Data-of-7b9710f3) has Visual Basic and C# projects for this sample.</span></span>  
  
```csharp
using System;  
using System.Data;  
using System.IO;  
using System.Text;  
using System.Xml;  
  
// Use WriteXml method to export the dataset.  
static class DataTableHelper {  
   public static void WriteDataSetToXML(DataSet dataset, String xmlFileName) {  
      using (FileStream fsWriterStream = new FileStream(xmlFileName, FileMode.Create)) {  
         using (XmlTextWriter xmlWriter = new XmlTextWriter(fsWriterStream, Encoding.Unicode)) {  
            dataset.WriteXml(xmlWriter, XmlWriteMode.WriteSchema);  
            Console.WriteLine("Write {0} to the File {1}.", dataset.DataSetName, xmlFileName);  
            Console.WriteLine();  
         }  
      }  
   }  
  
   // Use GetXml method to get the XML data of the dataset and then export to the file.  
   public static void GetXMLFromDataSet(DataSet dataset, String xmlFileName) {  
      using (StreamWriter writer = new StreamWriter(xmlFileName)) {  
         writer.WriteLine(dataset.GetXml());  
         Console.WriteLine("Get Xml data from {0} and write to the File {1}.", dataset.DataSetName, xmlFileName);  
         Console.WriteLine();  
      }  
   }  
  
   // Use ReadXml method to import the dataset from the dataset.  
   public static void ReadXmlIntoDataSet(DataSet newDataSet, String xmlFileName) {  
      using (FileStream fsReaderStream = new FileStream(xmlFileName, FileMode.Open)) {  
         using (XmlTextReader xmlReader = new XmlTextReader(fsReaderStream)) {  
            newDataSet.ReadXml(xmlReader, XmlReadMode.ReadSchema);  
         }  
      }  
   }  
  
   // Display the columns and value of DataSet.  
   public static void ShowDataSet(DataSet dataset) {  
      foreach (DataTable table in dataset.Tables) {  
         Console.WriteLine("Table {0}:", table.TableName);  
         ShowDataTable(table);  
      }  
   }  
  
   // Display the columns and value of DataTable.  
   private static void ShowDataTable(DataTable table) {  
      foreach (DataColumn col in table.Columns) {  
         Console.Write("{0,-14}", col.ColumnName);  
      }  
      Console.WriteLine("{0,-14}", "");  
  
      foreach (DataRow row in table.Rows) {  
         if (row.RowState == DataRowState.Deleted) {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime))) {  
                  Console.Write("{0,-14:d}", row[col, DataRowVersion.Original]);  
               }  
               else if (col.DataType.Equals(typeof(Decimal))) {  
                  Console.Write("{0,-14:C}", row[col, DataRowVersion.Original]);  
               }  
               else {  
                  Console.Write("{0,-14}", row[col, DataRowVersion.Original]);  
               }  
            }  
         }  
         else {  
            foreach (DataColumn col in table.Columns) {  
               if (col.DataType.Equals(typeof(DateTime))) {  
                  Console.Write("{0,-14:d}", row[col]);  
               }  
               else if (col.DataType.Equals(typeof(Decimal))) {  
                  Console.Write("{0,-14:C}", row[col]);  
               }  
               else {  
                  Console.Write("{0,-14}", row[col]);  
               }  
            }  
         }  
         Console.WriteLine("{0,-14}", "");  
      }  
   }  
  
   // Display the columns of DataSet.  
   public static void ShowDataSetSchema(DataSet dataSet) {  
      Console.WriteLine("{0} contains the following tables:", dataSet.DataSetName);  
      foreach (DataTable table in dataSet.Tables) {  
         Console.WriteLine("   Table {0} contains the following columns:", table.TableName);  
         ShowDataTableSchema(table);  
      }  
   }  
  
   // Display the columns of DataTable  
   private static void ShowDataTableSchema(DataTable table) {  
      String columnString = "";  
      foreach (DataColumn col in table.Columns) {  
         columnString += col.ColumnName + "   ";  
      }  
      Console.WriteLine(columnString);  
   }  
}  
  
class Program {  
   static void Main(string[] args) {  
      // Create the DataSet  
      DataSet school = new DataSet("MySchool");  
      DataTable course = CreateCourse();  
      DataTable department = CreateDepartment();  
      school.Tables.Add(course);  
      school.Tables.Add(department);  
  
      // Define the constraint between the tables.  
      ForeignKeyConstraint courseDepartFK = new ForeignKeyConstraint("CourseDepartFK", department.Columns["DepartmentID"], course.Columns["DepartmentID"]);  
      courseDepartFK.DeleteRule = Rule.Cascade;  
      courseDepartFK.UpdateRule = Rule.Cascade;  
      courseDepartFK.AcceptRejectRule = AcceptRejectRule.None;  
      course.Constraints.Add(courseDepartFK);  
  
      InsertDepartments(department);  
      InsertCourses(course);  
  
      // Export the dataset to the XML file.  
      Console.WriteLine("Data of the whole DataSet {0}", school.DataSetName);  
      DataTableHelper.ShowDataSet(school);  
  
      String xmlWithSchemaFileName = "WriterXMLWithSchema.xml";  
      String xmlGetDataFileName = "GetXML.xml";  
  
      // Use two ways to export the dataset to the Xml file.  
      DataTableHelper.WriteDataSetToXML(school, xmlWithSchemaFileName);  
      DataTableHelper.GetXMLFromDataSet(school, xmlGetDataFileName);  
  
      // Import the dataset from the XML file.  
      // Use two ways to import the dataset from the Xml file.  
      Console.WriteLine("Read Xml document into a new DataSet:");  
      DataSet newSchool = new DataSet("NewSchool");  
      DataTableHelper.ReadXmlIntoDataSet(newSchool, xmlWithSchemaFileName);  
      DataTableHelper.ShowDataSetSchema(newSchool);  
      Console.WriteLine();  
  
      Console.WriteLine("Infer a schema for a DataSet from an XML document:");  
      InferDataSetSchemaFromXml();  
  
      Console.WriteLine("Press any key to exit.");  
      Console.ReadKey();  
   }  
  
   static DataTable CreateCourse() {  
      DataTable course = new DataTable("Course");  
      DataColumn[] cols ={  
                              new DataColumn("CourseID",typeof(String)),  
                              new DataColumn("Year",typeof(Int32)),  
                              new DataColumn("Title",typeof(String)),  
                              new DataColumn("Credits",typeof(Int32)),  
                              new DataColumn("DepartmentID",typeof(Int32))};  
      course.Columns.AddRange(cols);  
  
      course.PrimaryKey = new DataColumn[] { course.Columns["CourseID"], course.Columns["Year"] };  
  
      return course;  
   }  
  
   static DataTable CreateDepartment() {  
      DataTable department = new DataTable("Department");  
      DataColumn[] cols = {   
                                new DataColumn("DepartmentID", typeof(Int32)),  
                                new DataColumn("Name",typeof(String)),  
                                new DataColumn("Budget",typeof(Decimal)),  
                                new DataColumn("StartDate",typeof(DateTime)),  
                                new DataColumn("Administrator",typeof(Int32))};  
      department.Columns.AddRange(cols);  
  
      department.PrimaryKey = new DataColumn[] { department.Columns["DepartmentID"] };  
  
      return department;  
   }  
  
   static void InsertDepartments(DataTable department) {  
      Object[] rows = {   
                            new Object[]{1,"Engineering",350000.00,new DateTime(2007,9,1),2},  
                            new Object[]{2,"English",120000.00,new DateTime(2007,9,1),6},  
                            new Object[]{4,"Economics",200000.00,new DateTime(2007,9,1),4},  
                            new Object[]{7,"Mathematics",250024.00,new DateTime(2007,9,1),3}};  
  
      foreach (Object[] row in rows) {  
         department.Rows.Add(row);  
      }  
   }  
  
   static void InsertCourses(DataTable course) {  
      Object[] rows ={  
                               new Object[]{"C1045",2012,"Calculus",4,7},  
                               new Object[]{"C1061",2012,"Physics",4,1},  
                               new Object[]{"C2021",2012,"Composition",3,2},  
                               new Object[]{"C2042",2012,"Literature",4,2}};  
  
      foreach (Object[] row in rows) {  
         course.Rows.Add(row);  
      }  
   }  
  
   // Display the results of inferring schema from four types of XML structures  
   private static void InferDataSetSchemaFromXml() {  
      String[] xmlFileNames = {   
  
                                    @"ElementsWithOnlyAttributes.xml",   
                                    @"ElementsWithAttributes.xml",  
                                    @"RepeatingElements.xml",   
                                    @"ElementsWithChildElements.xml" };  
  
      foreach (String xmlFileName in xmlFileNames) {  
         Console.WriteLine("Result of {0}", Path.GetFileNameWithoutExtension(xmlFileName));  
         DataSet newSchool = new DataSet();  
         newSchool.InferXmlSchema(xmlFileName, null);  
         DataTableHelper.ShowDataSetSchema(newSchool);  
         Console.WriteLine();  
      }  
   }  
}  
```  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-327">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-327">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetXmlSchema">
      <MemberSignature Language="C#" Value="public string GetXmlSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetXmlSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.GetXmlSchema" />
      <MemberSignature Language="VB.NET" Value="Public Function GetXmlSchema () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetXmlSchema();" />
      <MemberSignature Language="F#" Value="member this.GetXmlSchema : unit -&gt; string" Usage="dataSet.GetXmlSchema " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9cf18-328">返回存储在 <see cref="T:System.Data.DataSet" /> 中的数据的 XML 表示形式的 XML 架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-328">Returns the XML Schema for the XML representation of the data stored in the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="9cf18-329">字符串，它是存储在 <see cref="T:System.Data.DataSet" /> 中的数据的 XML 表示形式的 XML 架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-329">String that is the XML Schema for the XML representation of the data stored in the <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-330">调用此方法与调用相同 <xref:System.Data.DataSet.WriteXmlSchema%2A> ，只不过只写入主架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-330">Calling this method is identical to calling <xref:System.Data.DataSet.WriteXmlSchema%2A>, except that only the primary schema is written.</span></span>  
  
 <span data-ttu-id="9cf18-331"><xref:System.Data.DataSet.GetXmlSchema%2A> 将 XML 作为字符串返回，因此需要的开销比 <xref:System.Data.DataSet.WriteXmlSchema%2A> 将 xml 写入文件的开销更多。</span><span class="sxs-lookup"><span data-stu-id="9cf18-331"><xref:System.Data.DataSet.GetXmlSchema%2A> returns XML as a string, and therefore requires more overhead than <xref:System.Data.DataSet.WriteXmlSchema%2A> to write XML to a file.</span></span>  
  
 <span data-ttu-id="9cf18-332">如果 <xref:System.Data.DataSet> 使用架构推理构建并使用 XML 或 Web 服务对其进行序列化，则列排序可能会更改。</span><span class="sxs-lookup"><span data-stu-id="9cf18-332">If you build a <xref:System.Data.DataSet> using schema inference and serialize it using XML or Web services, the column ordering may change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-333">下面的示例创建 <xref:System.Data.DataSet> 和 <xref:System.Data.DataTable> ，然后以 XML 格式显示架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-333">The following example creates a <xref:System.Data.DataSet> and <xref:System.Data.DataTable>, and then displays the schema in XML format.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-334">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-334">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="HasChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9cf18-335">获取一个值，该值指示 <see cref="T:System.Data.DataSet" /> 是否有更改，包括新增行、已删除的行或已修改的行。</span><span class="sxs-lookup"><span data-stu-id="9cf18-335">Gets a value indicating whether the <see cref="T:System.Data.DataSet" /> has changes, including new, deleted, or modified rows.</span></span></summary>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-336">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-336">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="HasChanges">
      <MemberSignature Language="C#" Value="public bool HasChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.HasChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function HasChanges () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasChanges();" />
      <MemberSignature Language="F#" Value="member this.HasChanges : unit -&gt; bool" Usage="dataSet.HasChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9cf18-337">获取一个值，该值指示 <see cref="T:System.Data.DataSet" /> 是否有更改，包括新增行、已删除的行或已修改的行。</span><span class="sxs-lookup"><span data-stu-id="9cf18-337">Gets a value indicating whether the <see cref="T:System.Data.DataSet" /> has changes, including new, deleted, or modified rows.</span></span></summary>
        <returns><span data-ttu-id="9cf18-338">如果 <see cref="T:System.Data.DataSet" /> 有更改，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-338"><see langword="true" /> if the <see cref="T:System.Data.DataSet" /> has changes; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9cf18-339">下面的示例使用 <xref:System.Data.DataSet.GetChanges%2A> 方法来创建第二个 <xref:System.Data.DataSet> 对象，然后使用该对象更新数据源。</span><span class="sxs-lookup"><span data-stu-id="9cf18-339">The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object that is then used to update a data source.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.HasChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.HasChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.HasChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.HasChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-340">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-340">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasChanges">
      <MemberSignature Language="C#" Value="public bool HasChanges (System.Data.DataRowState rowStates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasChanges(valuetype System.Data.DataRowState rowStates) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.HasChanges(System.Data.DataRowState)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasChanges (rowStates As DataRowState) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasChanges(System::Data::DataRowState rowStates);" />
      <MemberSignature Language="F#" Value="member this.HasChanges : System.Data.DataRowState -&gt; bool" Usage="dataSet.HasChanges rowStates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rowStates" Type="System.Data.DataRowState" />
      </Parameters>
      <Docs>
        <param name="rowStates"><span data-ttu-id="9cf18-341"><see cref="T:System.Data.DataRowState" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="9cf18-341">One of the <see cref="T:System.Data.DataRowState" /> values.</span></span></param>
        <summary><span data-ttu-id="9cf18-342">获取一个值，该值指示 <see cref="T:System.Data.DataSet" /> 是否有 <see cref="T:System.Data.DataRowState" /> 被筛选的更改，包括新增行、已删除的行或已修改的行。</span><span class="sxs-lookup"><span data-stu-id="9cf18-342">Gets a value indicating whether the <see cref="T:System.Data.DataSet" /> has changes, including new, deleted, or modified rows, filtered by <see cref="T:System.Data.DataRowState" />.</span></span></summary>
        <returns><span data-ttu-id="9cf18-343">如果 <see cref="T:System.Data.DataSet" /> 有更改，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-343"><see langword="true" /> if the <see cref="T:System.Data.DataSet" /> has changes; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-344">在 <xref:System.Data.DataSet.HasChanges%2A> `DataSet` 调用方法之前检查的属性 <xref:System.Data.DataSet.GetChanges%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-344">Examine the <xref:System.Data.DataSet.HasChanges%2A> property of the `DataSet` before invoking the <xref:System.Data.DataSet.GetChanges%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-345">下面的示例使用 <xref:System.Data.DataSet.GetChanges%2A> 方法来创建第二个 <xref:System.Data.DataSet> 对象，然后使用该对象更新数据源。</span><span class="sxs-lookup"><span data-stu-id="9cf18-345">The following example uses the <xref:System.Data.DataSet.GetChanges%2A> method to create a second <xref:System.Data.DataSet> object, which is then used to update a data source.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-346">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-346">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="HasErrors">
      <MemberSignature Language="C#" Value="public bool HasErrors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasErrors" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.HasErrors" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasErrors { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasErrors : bool" Usage="System.Data.DataSet.HasErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Data.DataSysDescription("DataSetHasErrorsDescr")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Data.DataSysDescription("DataSetHasErrorsDescr")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9cf18-347">获取一个值，指示在此 <see cref="T:System.Data.DataTable" /> 中的任何 <see cref="T:System.Data.DataSet" /> 对象中是否存在错误。</span><span class="sxs-lookup"><span data-stu-id="9cf18-347">Gets a value indicating whether there are errors in any of the <see cref="T:System.Data.DataTable" /> objects within this <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="9cf18-348"><see langword="true" /> 如果任何表包含错误，则为;否则为 <see langword="false" /> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-348"><see langword="true" /> if any table contains an error; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-349"><xref:System.Data.DataTable>中的每个 <xref:System.Data.DataSet> 还具有一个 <xref:System.Data.DataTable.HasErrors%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="9cf18-349">Each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> also has a <xref:System.Data.DataTable.HasErrors%2A> property.</span></span> <span data-ttu-id="9cf18-350">在 `HasErrors` `DataSet` 检查单个对象之前，请使用第一个的属性来确定任何表是否有错误 <xref:System.Data.DataTable> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-350">Use the `HasErrors` property of the `DataSet` first, to determine if any table has errors, before checking individual <xref:System.Data.DataTable> objects.</span></span> <span data-ttu-id="9cf18-351">如果 `DataTable` 有错误，则 <xref:System.Data.DataTable.GetErrors%2A> 方法返回 <xref:System.Data.DataRow> 包含错误的对象的数组。</span><span class="sxs-lookup"><span data-stu-id="9cf18-351">If a `DataTable` has errors, the <xref:System.Data.DataTable.GetErrors%2A> method returns an array of <xref:System.Data.DataRow> objects containing the errors.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-352">下面的示例使用 <xref:System.Data.DataSet.HasErrors%2A> 属性来确定 <xref:System.Data.DataSet> 对象是否包含错误。</span><span class="sxs-lookup"><span data-stu-id="9cf18-352">The following example uses the <xref:System.Data.DataSet.HasErrors%2A> property to determine whether a <xref:System.Data.DataSet> object contains errors.</span></span> <span data-ttu-id="9cf18-353">如果是这样，则每个 <xref:System.Data.DataRow> 中的错误 <xref:System.Data.DataTable> 都将打印出来。</span><span class="sxs-lookup"><span data-stu-id="9cf18-353">If so, the errors for each <xref:System.Data.DataRow> in each <xref:System.Data.DataTable> are printed.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.HasErrors Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.HasErrors Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.HasErrors Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.HasErrors Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-354">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-354">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InferXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9cf18-355">将 XML 架构应用于 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-355">Applies XML schema to the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-356">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-356">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.IO.Stream stream, string[]? nsArray);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.IO.Stream stream, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (stream As Stream, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::IO::Stream ^ stream, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.IO.Stream * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (stream, nsArray)" />
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.IO.Stream stream, string[] nsArray);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="9cf18-357">将从其中读取该架构的 <see langword="Stream" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-357">The <see langword="Stream" /> from which to read the schema.</span></span></param>
        <param name="nsArray"><span data-ttu-id="9cf18-358">要从架构推理中排除的命名空间统一资源标识符 (URI) 字符串的数组。</span><span class="sxs-lookup"><span data-stu-id="9cf18-358">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</span></span></param>
        <summary><span data-ttu-id="9cf18-359">将指定 <see cref="T:System.IO.Stream" /> 中的 XML 架构应用于 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-359">Applies the XML schema from the specified <see cref="T:System.IO.Stream" /> to the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-360">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-360">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.IO.TextReader reader, string[]? nsArray);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.IO.TextReader reader, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (reader As TextReader, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::IO::TextReader ^ reader, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.IO.TextReader * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (reader, nsArray)" />
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.IO.TextReader reader, string[] nsArray);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9cf18-361">将从其中读取该架构的 <see langword="TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-361">The <see langword="TextReader" /> from which to read the schema.</span></span></param>
        <param name="nsArray"><span data-ttu-id="9cf18-362">要从架构推理中排除的命名空间统一资源标识符 (URI) 字符串的数组。</span><span class="sxs-lookup"><span data-stu-id="9cf18-362">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</span></span></param>
        <summary><span data-ttu-id="9cf18-363">将指定 <see cref="T:System.IO.TextReader" /> 中的 XML 架构应用于 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-363">Applies the XML schema from the specified <see cref="T:System.IO.TextReader" /> to the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-364">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-364">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (string fileName, string[]? nsArray);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(string fileName, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (fileName As String, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::String ^ fileName, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : string * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (fileName, nsArray)" />
      <MemberSignature Language="C#" Value="public void InferXmlSchema (string fileName, string[] nsArray);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="9cf18-365">从中读取架构的文件的名称（包括路径）。</span><span class="sxs-lookup"><span data-stu-id="9cf18-365">The name of the file (including the path) from which to read the schema.</span></span></param>
        <param name="nsArray"><span data-ttu-id="9cf18-366">要从架构推理中排除的命名空间统一资源标识符 (URI) 字符串的数组。</span><span class="sxs-lookup"><span data-stu-id="9cf18-366">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</span></span></param>
        <summary><span data-ttu-id="9cf18-367">将指定文件中的 XML 架构应用于 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-367">Applies the XML schema from the specified file to the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="9cf18-368"><see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-368"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-369">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-369">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InferXmlSchema">
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.Xml.XmlReader reader, string[]? nsArray);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InferXmlSchema(class System.Xml.XmlReader reader, string[] nsArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub InferXmlSchema (reader As XmlReader, nsArray As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InferXmlSchema(System::Xml::XmlReader ^ reader, cli::array &lt;System::String ^&gt; ^ nsArray);" />
      <MemberSignature Language="F#" Value="member this.InferXmlSchema : System.Xml.XmlReader * string[] -&gt; unit" Usage="dataSet.InferXmlSchema (reader, nsArray)" />
      <MemberSignature Language="C#" Value="public void InferXmlSchema (System.Xml.XmlReader reader, string[] nsArray);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="nsArray" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9cf18-370">将从其中读取该架构的 <see langword="XMLReader" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-370">The <see langword="XMLReader" /> from which to read the schema.</span></span></param>
        <param name="nsArray"><span data-ttu-id="9cf18-371">要从架构推理中排除的命名空间统一资源标识符 (URI) 字符串的数组。</span><span class="sxs-lookup"><span data-stu-id="9cf18-371">An array of namespace Uniform Resource Identifier (URI) strings to be excluded from schema inference.</span></span></param>
        <summary><span data-ttu-id="9cf18-372">将指定 <see cref="T:System.Xml.XmlReader" /> 中的 XML 架构应用于 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-372">Applies the XML schema from the specified <see cref="T:System.Xml.XmlReader" /> to the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-373">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-373">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Initialized">
      <MemberSignature Language="C#" Value="public event EventHandler Initialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Initialized" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataSet.Initialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Initialized As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual event EventHandler ^ Initialized;" />
      <MemberSignature Language="F#" Value="member this.Initialized : EventHandler " Usage="member this.Initialized : System.EventHandler " />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.ComponentModel.ISupportInitializeNotification.Initialized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9cf18-374">初始化 <see cref="T:System.Data.DataSet" /> 后发生。</span><span class="sxs-lookup"><span data-stu-id="9cf18-374">Occurs after the <see cref="T:System.Data.DataSet" /> is initialized.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-375">有关详细信息，请参阅 <xref:System.Data.DataSet.IsInitialized%2A>。</span><span class="sxs-lookup"><span data-stu-id="9cf18-375">For more information, see <xref:System.Data.DataSet.IsInitialized%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-376">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-376">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InitializeDerivedDataSet">
      <MemberSignature Language="C#" Value="protected virtual void InitializeDerivedDataSet ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitializeDerivedDataSet() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.InitializeDerivedDataSet" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitializeDerivedDataSet ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitializeDerivedDataSet();" />
      <MemberSignature Language="F#" Value="abstract member InitializeDerivedDataSet : unit -&gt; unit&#xA;override this.InitializeDerivedDataSet : unit -&gt; unit" Usage="dataSet.InitializeDerivedDataSet " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9cf18-377">从二进制或 XML 流反序列化数据集的所有表数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-377">Deserialize all of the tables data of the DataSet from the binary or XML stream.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBinarySerialized">
      <MemberSignature Language="C#" Value="protected bool IsBinarySerialized (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool IsBinarySerialized(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Protected Function IsBinarySerialized (info As SerializationInfo, context As StreamingContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool IsBinarySerialized(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="member this.IsBinarySerialized : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; bool" Usage="dataSet.IsBinarySerialized (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="9cf18-378"><see cref="T:System.Runtime.Serialization.SerializationInfo" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-378">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object.</span></span></param>
        <param name="context"><span data-ttu-id="9cf18-379"><see cref="T:System.Runtime.Serialization.StreamingContext" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-379">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object.</span></span></param>
        <summary><span data-ttu-id="9cf18-380">检查 <see langword="DataSet" /> 的序列化表示形式的格式。</span><span class="sxs-lookup"><span data-stu-id="9cf18-380">Inspects the format of the serialized representation of the <see langword="DataSet" />.</span></span></summary>
        <returns><span data-ttu-id="9cf18-381">如果指定的 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 表示以二进制格式序列化的 <see langword="true" />，则为 <see langword="DataSet" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-381"><see langword="true" /> if the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> represents a <see langword="DataSet" /> serialized in its binary format, <see langword="false" /> otherwise.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-382">此成员支持 .NET Framework 结构，不能在代码中直接使用。</span><span class="sxs-lookup"><span data-stu-id="9cf18-382">This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitialized">
      <MemberSignature Language="C#" Value="public bool IsInitialized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitialized" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.IsInitialized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitialized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitialized { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitialized : bool" Usage="System.Data.DataSet.IsInitialized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.ISupportInitializeNotification.IsInitialized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9cf18-383">获取一个值，该值指示是否已初始化 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-383">Gets a value that indicates whether the <see cref="T:System.Data.DataSet" /> is initialized.</span></span></summary>
        <value><span data-ttu-id="9cf18-384">如果为 <see langword="true" />，说明组件已完成初始化；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-384"><see langword="true" /> to indicate the component has completed initialization; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-385">返回正在构造的状态 <xref:System.Data.DataSet> ，例如 Visual Studio。</span><span class="sxs-lookup"><span data-stu-id="9cf18-385">Returns the status of the <xref:System.Data.DataSet> while it's being constructed, for instance by Visual Studio.</span></span> <span data-ttu-id="9cf18-386"><xref:System.Data.DataSet.BeginInit%2A>方法将其设置为 `false` ， <xref:System.Data.DataSet.EndInit%2A> 方法将其设置为 `true` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-386">The <xref:System.Data.DataSet.BeginInit%2A> method sets it to `false` and <xref:System.Data.DataSet.EndInit%2A> method sets it to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-387">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-387">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9cf18-388">通过所提供的 <see cref="T:System.Data.IDataReader" />，用某个数据源的值填充 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-388">Fills a <see cref="T:System.Data.DataSet" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-389"><xref:System.Data.DataTable.Load%2A>方法提供了一种方法，用于填充 <xref:System.Data.DataTable> 从实例中检索到的单个数据 <xref:System.Data.IDataReader> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-389">The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance.</span></span> <span data-ttu-id="9cf18-390">此方法提供了相同的功能，但允许你将中的多个结果集加载 `IDataReader` 到中的多个表中 `DataSet` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-390">This method provides the same functionality, but allows you to load multiple result sets from an `IDataReader` into multiple tables within a `DataSet`.</span></span>  
  
 <span data-ttu-id="9cf18-391">如果 `DataSet` 已经包含行，则从数据源传入的数据与现有行合并。</span><span class="sxs-lookup"><span data-stu-id="9cf18-391">If the `DataSet` already contains rows, the incoming data from the data source is merged with the existing rows.</span></span>  
  
 <span data-ttu-id="9cf18-392">`Load`此方法可用于几个常见方案，所有这些方案都围绕从指定数据源获取数据并将其添加到当前数据容器中，在这种情况下 (`DataSet`) 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-392">The `Load` method can be used in several common scenarios, all centered around getting data from a specified data source and adding it to the current data container (in this case, a `DataSet`).</span></span> <span data-ttu-id="9cf18-393">这些方案描述了的标准用法 `DataSet` ，描述了其更新和合并行为。</span><span class="sxs-lookup"><span data-stu-id="9cf18-393">These scenarios describe standard usage for a `DataSet`, describing its update and merge behavior.</span></span>  
  
 <span data-ttu-id="9cf18-394">`DataSet`与单个主数据源同步或更新。</span><span class="sxs-lookup"><span data-stu-id="9cf18-394">A `DataSet` synchronizes or updates with a single primary data source.</span></span> <span data-ttu-id="9cf18-395">`DataSet`跟踪更改，允许与主数据源同步。</span><span class="sxs-lookup"><span data-stu-id="9cf18-395">The `DataSet` tracks changes, allowing synchronization with the primary data source.</span></span> <span data-ttu-id="9cf18-396">此外， `DataSet` 可以接受来自一个或多个辅助数据源的增量数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-396">In addition, a `DataSet` can accept incremental data from one or more secondary data sources.</span></span> <span data-ttu-id="9cf18-397">`DataSet`不负责跟踪更改以便与辅助数据源同步。</span><span class="sxs-lookup"><span data-stu-id="9cf18-397">The `DataSet` isn't responsible for tracking changes in order to allow synchronization with the secondary data source.</span></span>  
  
 <span data-ttu-id="9cf18-398">假设有这两个假设数据源，用户可能需要以下行为之一：</span><span class="sxs-lookup"><span data-stu-id="9cf18-398">Given these two hypothetical data sources, a user is likely to require one of the following behaviors:</span></span>  
  
-   <span data-ttu-id="9cf18-399">`DataSet`从主数据源初始化。</span><span class="sxs-lookup"><span data-stu-id="9cf18-399">Initialize `DataSet` from a primary data source.</span></span> <span data-ttu-id="9cf18-400">在这种情况下，用户想要 `DataSet` 使用主数据源中的值初始化一个空的。</span><span class="sxs-lookup"><span data-stu-id="9cf18-400">In this scenario, the user wants to initialize an empty `DataSet` with values from the primary data source.</span></span> <span data-ttu-id="9cf18-401">修改一个或多个 DataTable 的内容。</span><span class="sxs-lookup"><span data-stu-id="9cf18-401">One or more DataTable's contents are modified.</span></span> <span data-ttu-id="9cf18-402">稍后，用户打算将更改传播回主数据源。</span><span class="sxs-lookup"><span data-stu-id="9cf18-402">Later the user intends to propagate changes back to the primary data source.</span></span>  
  
-   <span data-ttu-id="9cf18-403">保留更改并从主数据源重新同步。</span><span class="sxs-lookup"><span data-stu-id="9cf18-403">Preserve changes and re-synchronize from the primary data source.</span></span> <span data-ttu-id="9cf18-404">在这种情况下，用户希望采用 `DataSet` 前面方案中填充的内容并执行与主数据源的增量同步，同时保留在中所做的修改 `DataSet` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-404">In this scenario, the user wants to take the `DataSet` filled in the previous scenario and perform an incremental synchronization with the primary data source, preserving modifications made in the `DataSet`.</span></span>  
  
-   <span data-ttu-id="9cf18-405">来自辅助数据源的增量数据馈送。</span><span class="sxs-lookup"><span data-stu-id="9cf18-405">Incremental data feed from secondary data sources.</span></span> <span data-ttu-id="9cf18-406">在这种情况下，用户想要合并一个或多个辅助数据源的更改，并将这些更改传播回主数据源。</span><span class="sxs-lookup"><span data-stu-id="9cf18-406">In this scenario, the user wants to merge changes from one or more secondary data sources, and propagate those changes back to the primary data source.</span></span>  
  
 <span data-ttu-id="9cf18-407">`Load`方法可以实现所有这些方案。</span><span class="sxs-lookup"><span data-stu-id="9cf18-407">The `Load` method makes all these scenarios possible.</span></span> <span data-ttu-id="9cf18-408">此方法允许您指定加载选项参数，以指示 <xref:System.Data.DataTable> 与要加载的行合并在一起的行的方式。</span><span class="sxs-lookup"><span data-stu-id="9cf18-408">This method allows you to specify a load option parameter, indicating how rows already in a <xref:System.Data.DataTable> combine with rows being loaded.</span></span> <span data-ttu-id="9cf18-409">下表描述了枚举提供的三个加载选项 <xref:System.Data.LoadOption> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-409">The following table describes the three load options provided by the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="9cf18-410">在每种情况下，说明指示传入数据中行的主键与现有行的主键匹配时的行为。</span><span class="sxs-lookup"><span data-stu-id="9cf18-410">In each case, the description indicates the behavior when the primary key of a row in the incoming data matches the primary key of an existing row.</span></span>  
  
|<span data-ttu-id="9cf18-411">Load 选项</span><span class="sxs-lookup"><span data-stu-id="9cf18-411">Load Option</span></span>|<span data-ttu-id="9cf18-412">描述</span><span class="sxs-lookup"><span data-stu-id="9cf18-412">Description</span></span>|  
|-----------------|-----------------|  
|<span data-ttu-id="9cf18-413">`PreserveChanges`（默认值）</span><span class="sxs-lookup"><span data-stu-id="9cf18-413">`PreserveChanges` (default)</span></span>|<span data-ttu-id="9cf18-414">用传入行的值更新行的原始版本。</span><span class="sxs-lookup"><span data-stu-id="9cf18-414">Updates the original version of the row with the value of the incoming row.</span></span>|  
|`OverwriteChanges`|<span data-ttu-id="9cf18-415">用传入行的值更新行的当前版本和原始版本。</span><span class="sxs-lookup"><span data-stu-id="9cf18-415">Updates the current and original versions of the row with the value of the incoming row.</span></span>|  
|`Upsert`|<span data-ttu-id="9cf18-416">用传入行的值更新行的当前版本。</span><span class="sxs-lookup"><span data-stu-id="9cf18-416">Updates the current version of the row with the value of the incoming row.</span></span>|  
  
 <span data-ttu-id="9cf18-417">通常， `PreserveChanges` 和选项适用 `OverwriteChanges` 于用户需要 `DataSet` 与主数据源同步及其更改的情况。</span><span class="sxs-lookup"><span data-stu-id="9cf18-417">In general, the `PreserveChanges` and `OverwriteChanges` options are intended for scenarios in which the user needs to synchronize the `DataSet` and its changes with the primary data source.</span></span> <span data-ttu-id="9cf18-418">`Upsert`选项有助于聚合来自一个或多个辅助数据源的更改。</span><span class="sxs-lookup"><span data-stu-id="9cf18-418">The `Upsert` option facilitates aggregating changes from one or more secondary data sources.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-419">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-419">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, params System.Data.DataTable[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, class System.Data.DataTable[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (reader As IDataReader, loadOption As LoadOption, ParamArray tables As DataTable())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, ... cli::array &lt;System::Data::DataTable ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.DataTable[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, tables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tables" Type="System.Data.DataTable[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9cf18-420">提供一个或多个结果集的 <see cref="T:System.Data.IDataReader" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-420">An <see cref="T:System.Data.IDataReader" /> that provides one or more result sets.</span></span></param>
        <param name="loadOption"><span data-ttu-id="9cf18-421">一个来自 <see cref="T:System.Data.LoadOption" /> 枚举的值，该值指示 <see cref="T:System.Data.DataTable" /> 中的 <see cref="T:System.Data.DataSet" /> 实例内已有的行如何与共享同一主键的传入行进行组合。</span><span class="sxs-lookup"><span data-stu-id="9cf18-421">A value from the <see cref="T:System.Data.LoadOption" /> enumeration that indicates how rows already in the <see cref="T:System.Data.DataTable" /> instances within the <see cref="T:System.Data.DataSet" /> will be combined with incoming rows that share the same primary key.</span></span></param>
        <param name="tables"><span data-ttu-id="9cf18-422"><see cref="T:System.Data.DataTable" /> 实例的数组，<see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" /> 方法从该数组中检索名称和命名空间信息。</span><span class="sxs-lookup"><span data-stu-id="9cf18-422">An array of <see cref="T:System.Data.DataTable" /> instances, from which the <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" /> method retrieves name and namespace information.</span></span> <span data-ttu-id="9cf18-423">其中每个表都必须是此 <see cref="T:System.Data.DataTableCollection" /> 所包含的 <see cref="T:System.Data.DataSet" /> 的成员。</span><span class="sxs-lookup"><span data-stu-id="9cf18-423">Each of these tables must be a member of the <see cref="T:System.Data.DataTableCollection" /> contained by this <see cref="T:System.Data.DataSet" />.</span></span></param>
        <summary><span data-ttu-id="9cf18-424">使用提供的 <see cref="T:System.Data.DataSet" /> 以数据源的值填充 <see cref="T:System.Data.IDataReader" />，同时使用 <see cref="T:System.Data.DataTable" /> 实例的数组提供架构和命名空间信息。</span><span class="sxs-lookup"><span data-stu-id="9cf18-424">Fills a <see cref="T:System.Data.DataSet" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />, using an array of <see cref="T:System.Data.DataTable" /> instances to supply the schema and namespace information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-425"><xref:System.Data.DataTable.Load%2A>方法提供了一种方法，用于填充 <xref:System.Data.DataTable> 从实例中检索到的单个数据 <xref:System.Data.IDataReader> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-425">The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance.</span></span> <span data-ttu-id="9cf18-426">此方法提供了相同的功能，但允许你将中的多个结果集加载 <xref:System.Data.IDataReader> 到中的多个表中 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-426">This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-427"><xref:System.InvalidOperationException>如果传入的任何源数据列是计算列，则加载操作将失败，并出现 `reader` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-427">The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.</span></span>  
  
 <span data-ttu-id="9cf18-428">`loadOption`参数允许你指定导入的数据与现有数据交互的方式，并且可以是枚举中的任何值 <xref:System.Data.LoadOption> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-428">The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="9cf18-429"><xref:System.Data.DataTable> <xref:System.Data.DataTable.Load%2A> 有关使用此参数的详细信息，请参阅方法的文档。</span><span class="sxs-lookup"><span data-stu-id="9cf18-429">See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.</span></span>  
  
 <span data-ttu-id="9cf18-430">使用 `tables` 参数可以指定实例的数组 <xref:System.Data.DataTable> ，指示对应于从读取器加载的每个结果集的表的顺序。</span><span class="sxs-lookup"><span data-stu-id="9cf18-430">The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader.</span></span> <span data-ttu-id="9cf18-431"><xref:System.Data.DataSet.Load%2A>方法 <xref:System.Data.DataTable> 使用来自源数据读取器的单个结果集中的数据填充每个提供的实例。</span><span class="sxs-lookup"><span data-stu-id="9cf18-431">The <xref:System.Data.DataSet.Load%2A> method fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader.</span></span> <span data-ttu-id="9cf18-432">在每个结果集之后，该 <xref:System.Data.DataSet.Load%2A> 方法将移到读取器内的下一个结果集，直到没有更多的结果集。</span><span class="sxs-lookup"><span data-stu-id="9cf18-432">After each result set, the <xref:System.Data.DataSet.Load%2A> method moves on to the next result set within the reader, until there are no more result sets.</span></span>  
  
 <span data-ttu-id="9cf18-433">此方法的名称解析方案与后跟类的方法的名称解析方案相同 <xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.Common.DbDataAdapter> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-433">The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-434">下面的示例创建一个新的 <xref:System.Data.DataSet> ，将两个 <xref:System.Data.DataTable> 实例添加到 <xref:System.Data.DataSet> ，然后 <xref:System.Data.DataSet> 使用 <xref:System.Data.DataSet.Load%2A> 方法（从 <xref:System.Data.DataTableReader> 包含两个结果集的中检索数据）填充。</span><span class="sxs-lookup"><span data-stu-id="9cf18-434">The following example creates a new <xref:System.Data.DataSet>, adds two <xref:System.Data.DataTable> instances to the <xref:System.Data.DataSet>, and then fills the <xref:System.Data.DataSet> using the <xref:System.Data.DataSet.Load%2A> method, retrieving data from a <xref:System.Data.DataTableReader> that contains two result sets.</span></span> <span data-ttu-id="9cf18-435">最后，该示例在控制台窗口中显示表的内容。</span><span class="sxs-lookup"><span data-stu-id="9cf18-435">Finally, the example displays the contents of the tables in the console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.LoadTables#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.LoadTables/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.LoadTables#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.LoadTables/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-436">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-436">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, params string[] tables);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, string[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Load (reader As IDataReader, loadOption As LoadOption, ParamArray tables As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, ... cli::array &lt;System::String ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="member this.Load : System.Data.IDataReader * System.Data.LoadOption * string[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, tables)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tables" Type="System.String[]" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9cf18-437">提供一个或多个结果集的 <see cref="T:System.Data.IDataReader" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-437">An <see cref="T:System.Data.IDataReader" /> that provides one or more result sets.</span></span></param>
        <param name="loadOption"><span data-ttu-id="9cf18-438">一个来自 <see cref="T:System.Data.LoadOption" /> 枚举的值，该值指示 <see cref="T:System.Data.DataTable" /> 中的 <see langword="DataSet" /> 实例内已有的行如何与共享同一主键的传入行进行组合。</span><span class="sxs-lookup"><span data-stu-id="9cf18-438">A value from the <see cref="T:System.Data.LoadOption" /> enumeration that indicates how rows already in the <see cref="T:System.Data.DataTable" /> instances within the <see langword="DataSet" /> will be combined with incoming rows that share the same primary key.</span></span></param>
        <param name="tables"><span data-ttu-id="9cf18-439">字符串数组，<see langword="Load" /> 方法将从该数组中检索表名称信息。</span><span class="sxs-lookup"><span data-stu-id="9cf18-439">An array of strings, from which the <see langword="Load" /> method retrieves table name information.</span></span></param>
        <summary><span data-ttu-id="9cf18-440">使用所提供的 <see cref="T:System.Data.DataSet" />，并使用字符串数组为 <see langword="DataSet" /> 中的表提供名称，从而用来自数据源的值填充 <see cref="T:System.Data.IDataReader" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-440">Fills a <see cref="T:System.Data.DataSet" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />, using an array of strings to supply the names for the tables within the <see langword="DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-441"><xref:System.Data.DataTable.Load%2A>方法提供了一种方法，用于填充 <xref:System.Data.DataTable> 从实例中检索到的单个数据 <xref:System.Data.IDataReader> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-441">The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance.</span></span> <span data-ttu-id="9cf18-442">此方法提供了相同的功能，但允许你将中的多个结果集加载 `IDataReader` 到中的多个表中 `DataSet` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-442">This method provides the same functionality, but allows you to load multiple result sets from an `IDataReader` into multiple tables within a `DataSet`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-443"><xref:System.InvalidOperationException>如果传入的任何源数据列是计算列，则加载操作将失败，并出现 `reader` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-443">The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.</span></span>  
  
 <span data-ttu-id="9cf18-444">`loadOption`参数允许你指定导入的数据与现有数据交互的方式，并且可以是枚举中的任何值 <xref:System.Data.LoadOption> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-444">The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="9cf18-445"><xref:System.Data.DataTable.Load%2A>有关使用此参数的详细信息，请参阅方法的文档。</span><span class="sxs-lookup"><span data-stu-id="9cf18-445">See the documentation for the <xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.</span></span>  
  
 <span data-ttu-id="9cf18-446">使用 `tables` 参数可以指定表名的数组，指示与从读取器加载的每个结果集对应的表的顺序。</span><span class="sxs-lookup"><span data-stu-id="9cf18-446">The `tables` parameter allows you to specify an array of table names, indicating the order of the tables corresponding to each result set loaded from the reader.</span></span> <span data-ttu-id="9cf18-447">`Load`方法尝试 `DataSet` 在与表名称数组中找到的名称匹配的表中查找匹配项。</span><span class="sxs-lookup"><span data-stu-id="9cf18-447">The `Load` method attempts to find a table within the `DataSet` matching the name found in the array of table names, in order.</span></span> <span data-ttu-id="9cf18-448">如果找到匹配的表，则将使用当前结果集的内容加载该表。</span><span class="sxs-lookup"><span data-stu-id="9cf18-448">If a matching table is found, that table is loaded with the content of the current result set.</span></span> <span data-ttu-id="9cf18-449">如果未找到匹配的表，则使用表名数组中提供的名称创建一个表，并从结果集中推断新表的架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-449">If no matching table is found, a table is created using the name supplied in the array of table names, and the new table's schema is inferred from the result set.</span></span> <span data-ttu-id="9cf18-450">在每个结果集之后，该 `Load` 方法将移到读取器内的下一个结果集，直到没有更多的结果集。</span><span class="sxs-lookup"><span data-stu-id="9cf18-450">After each result set, the `Load` method moves on to the next result set within the reader, until there are no more result sets.</span></span>  
  
 <span data-ttu-id="9cf18-451">与关联的默认命名空间 `DataSet` （如果有）与每个新创建的关联 `DataTable` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-451">The default namespace associated with `DataSet`, if any, is associated with each newly created `DataTable`.</span></span> <span data-ttu-id="9cf18-452">此方法的名称解析方案与后跟类的方法的名称解析方案相同 <xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.Common.DbDataAdapter> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-452">The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-453">下面的控制台应用程序示例首先使用方法创建表，并将数据从读取器加载到 <xref:System.Data.DataSet> 中 `Load` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-453">The following Console application example first creates tables and loads data from a reader into a <xref:System.Data.DataSet>, using the `Load` method.</span></span> <span data-ttu-id="9cf18-454">然后，该示例向添加表 <xref:System.Data.DataSet> ，并尝试使用中的数据填充表 <xref:System.Data.DataTableReader> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-454">The example then adds tables to a <xref:System.Data.DataSet> and attempts to fill the tables with data from a <xref:System.Data.DataTableReader>.</span></span> <span data-ttu-id="9cf18-455">在此示例中，由于传递给方法的参数 `Load` 指示不存在的表名，因此该 `Load` 方法会创建一个新表来匹配作为参数传递的名称。</span><span class="sxs-lookup"><span data-stu-id="9cf18-455">In this example, because the parameters passed to the `Load` method indicate a table name that does not exist, the `Load` method creates a new table to match the name passed as a parameter.</span></span> <span data-ttu-id="9cf18-456">加载数据后，该示例会在控制台窗口中显示其所有表的内容。</span><span class="sxs-lookup"><span data-stu-id="9cf18-456">Once the data has been loaded, the example displays the contents of all its tables in the Console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.LoadString#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.LoadString/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.LoadString#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.LoadString/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-457">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-457">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler? errorHandler, params System.Data.DataTable[] tables);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Load(class System.Data.IDataReader reader, valuetype System.Data.LoadOption loadOption, class System.Data.FillErrorEventHandler errorHandler, class System.Data.DataTable[] tables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Load (reader As IDataReader, loadOption As LoadOption, errorHandler As FillErrorEventHandler, ParamArray tables As DataTable())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Load(System::Data::IDataReader ^ reader, System::Data::LoadOption loadOption, System::Data::FillErrorEventHandler ^ errorHandler, ... cli::array &lt;System::Data::DataTable ^&gt; ^ tables);" />
      <MemberSignature Language="F#" Value="abstract member Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.FillErrorEventHandler * System.Data.DataTable[] -&gt; unit&#xA;override this.Load : System.Data.IDataReader * System.Data.LoadOption * System.Data.FillErrorEventHandler * System.Data.DataTable[] -&gt; unit" Usage="dataSet.Load (reader, loadOption, errorHandler, tables)" />
      <MemberSignature Language="C#" Value="public virtual void Load (System.Data.IDataReader reader, System.Data.LoadOption loadOption, System.Data.FillErrorEventHandler errorHandler, params System.Data.DataTable[] tables);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.IDataReader" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="loadOption" Type="System.Data.LoadOption" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="errorHandler" Type="System.Data.FillErrorEventHandler" Index="2" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="tables" Type="System.Data.DataTable[]" Index="3" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <Attributes>
            <Attribute FrameworkAlternate="net-5.0">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9cf18-458">提供一个或多个结果集的 <see cref="T:System.Data.IDataReader" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-458">An <see cref="T:System.Data.IDataReader" /> that provides one or more result sets.</span></span></param>
        <param name="loadOption"><span data-ttu-id="9cf18-459">一个来自 <see cref="T:System.Data.LoadOption" /> 枚举的值，该值指示 <see cref="T:System.Data.DataTable" /> 中的 <see cref="T:System.Data.DataSet" /> 实例内已有的行如何与共享同一主键的传入行进行组合。</span><span class="sxs-lookup"><span data-stu-id="9cf18-459">A value from the <see cref="T:System.Data.LoadOption" /> enumeration that indicates how rows already in the <see cref="T:System.Data.DataTable" /> instances within the <see cref="T:System.Data.DataSet" /> will be combined with incoming rows that share the same primary key.</span></span></param>
        <param name="errorHandler"><span data-ttu-id="9cf18-460">加载数据时出现错误的情况下要调用的 <see cref="T:System.Data.FillErrorEventHandler" /> 委托。</span><span class="sxs-lookup"><span data-stu-id="9cf18-460">A <see cref="T:System.Data.FillErrorEventHandler" /> delegate to call when an error occurs while loading data.</span></span></param>
        <param name="tables"><span data-ttu-id="9cf18-461"><see cref="T:System.Data.DataTable" /> 实例的数组，<see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" /> 方法从该数组中检索名称和命名空间信息。</span><span class="sxs-lookup"><span data-stu-id="9cf18-461">An array of <see cref="T:System.Data.DataTable" /> instances, from which the <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" /> method retrieves name and namespace information.</span></span></param>
        <summary><span data-ttu-id="9cf18-462">使用提供的 <see cref="T:System.Data.DataSet" /> 以数据源的值填充 <see cref="T:System.Data.IDataReader" />，同时使用 <see cref="T:System.Data.DataTable" /> 实例的数组提供架构和命名空间信息。</span><span class="sxs-lookup"><span data-stu-id="9cf18-462">Fills a <see cref="T:System.Data.DataSet" /> with values from a data source using the supplied <see cref="T:System.Data.IDataReader" />, using an array of <see cref="T:System.Data.DataTable" /> instances to supply the schema and namespace information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-463"><xref:System.Data.DataTable.Load%2A>方法提供了一种方法，用于填充 <xref:System.Data.DataTable> 从实例中检索到的单个数据 <xref:System.Data.IDataReader> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-463">The <xref:System.Data.DataTable.Load%2A> method provides a technique for filling a single <xref:System.Data.DataTable> with data, retrieved from an <xref:System.Data.IDataReader> instance.</span></span> <span data-ttu-id="9cf18-464">此方法提供了相同的功能，但允许你将中的多个结果集加载 <xref:System.Data.IDataReader> 到中的多个表中 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-464">This method provides the same functionality, but allows you to load multiple result sets from an <xref:System.Data.IDataReader> into multiple tables within a <xref:System.Data.DataSet>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-465"><xref:System.InvalidOperationException>如果传入的任何源数据列是计算列，则加载操作将失败，并出现 `reader` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-465">The load operation will fail with an <xref:System.InvalidOperationException> if any of the source data columns in the incoming `reader` are computed columns.</span></span>  
  
 <span data-ttu-id="9cf18-466">`loadOption`参数允许你指定导入的数据与现有数据交互的方式，并且可以是枚举中的任何值 <xref:System.Data.LoadOption> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-466">The `loadOption` parameter allows you to specify how you want the imported data to interact with existing data, and can be any of the values from the <xref:System.Data.LoadOption> enumeration.</span></span> <span data-ttu-id="9cf18-467"><xref:System.Data.DataTable> <xref:System.Data.DataTable.Load%2A> 有关使用此参数的详细信息，请参阅方法的文档。</span><span class="sxs-lookup"><span data-stu-id="9cf18-467">See the documentation for the <xref:System.Data.DataTable><xref:System.Data.DataTable.Load%2A> method for more information on using this parameter.</span></span>  
  
 <span data-ttu-id="9cf18-468">`errorHandler`参数是一个 <xref:System.Data.FillErrorEventHandler> 委托，该委托引用在加载数据的过程中发生错误时调用的过程。</span><span class="sxs-lookup"><span data-stu-id="9cf18-468">The `errorHandler` parameter is a <xref:System.Data.FillErrorEventHandler> delegate that refers to a procedure that is called when an error occurs while loading data.</span></span> <span data-ttu-id="9cf18-469"><xref:System.Data.FillErrorEventArgs>传递给过程的参数提供了属性，这些属性可用于检索有关所发生错误的信息、当前数据行以及 <xref:System.Data.DataTable> 要填充的。</span><span class="sxs-lookup"><span data-stu-id="9cf18-469">The <xref:System.Data.FillErrorEventArgs> parameter passed to the procedure provides properties that allow you to retrieve information about the error that occurred, the current row of data, and the <xref:System.Data.DataTable> being filled.</span></span> <span data-ttu-id="9cf18-470">使用此委托机制（而不是更简单的 try/catch 块），可以确定错误，处理情况，并根据需要继续处理。</span><span class="sxs-lookup"><span data-stu-id="9cf18-470">Using this delegate mechanism, rather than a simpler try/catch block, allows you to determine the error, handle the situation, and continue processing if you like.</span></span> <span data-ttu-id="9cf18-471"><xref:System.Data.FillErrorEventArgs>参数提供 <xref:System.Data.FillErrorEventArgs.Continue%2A> 属性：将此属性设置为 `true` ，以指示你已处理错误并希望继续处理; 将属性设置为， `false` 以指示你希望暂停处理。</span><span class="sxs-lookup"><span data-stu-id="9cf18-471">The <xref:System.Data.FillErrorEventArgs> parameter supplies a <xref:System.Data.FillErrorEventArgs.Continue%2A> property: set this property to `true` to indicate that you have handled the error and wish to continue processing; set the property to `false` to indicate that you wish to halt processing.</span></span> <span data-ttu-id="9cf18-472">请注意，将属性设置为 `false` 会导致触发问题的代码引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-472">Be aware that setting the property to `false` causes the code that triggered the problem to throw an exception.</span></span>  
  
 <span data-ttu-id="9cf18-473">使用 `tables` 参数可以指定实例的数组 <xref:System.Data.DataTable> ，指示对应于从读取器加载的每个结果集的表的顺序。</span><span class="sxs-lookup"><span data-stu-id="9cf18-473">The `tables` parameter allows you to specify an array of <xref:System.Data.DataTable> instances, indicating the order of the tables corresponding to each result set loaded from the reader.</span></span> <span data-ttu-id="9cf18-474"><xref:System.Data.DataSet.Load%2A>方法 <xref:System.Data.DataTable> 使用来自源数据读取器的单个结果集中的数据填充每个提供的实例。</span><span class="sxs-lookup"><span data-stu-id="9cf18-474">The <xref:System.Data.DataSet.Load%2A> method fills each supplied <xref:System.Data.DataTable> instance with data from a single result set from the source data reader.</span></span> <span data-ttu-id="9cf18-475">在每个结果集之后，该 <xref:System.Data.DataSet.Load%2A> 方法将移到读取器内的下一个结果集，直到没有更多的结果集。</span><span class="sxs-lookup"><span data-stu-id="9cf18-475">After each result set, the <xref:System.Data.DataSet.Load%2A> method moves on to the next result set within the reader, until there are no more result sets.</span></span>  
  
 <span data-ttu-id="9cf18-476">此方法的名称解析方案与后跟类的方法的名称解析方案相同 <xref:System.Data.Common.DbDataAdapter.Fill%2A> <xref:System.Data.Common.DbDataAdapter> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-476">The name resolution scheme for this method is the same as that followed by the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method of the <xref:System.Data.Common.DbDataAdapter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-477">下面的示例将一个表添加到 <xref:System.Data.DataSet> ，然后尝试使用 <xref:System.Data.DataSet.Load%2A> 方法从 <xref:System.Data.DataTableReader> 包含不兼容架构的中加载数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-477">The following example adds a table to a <xref:System.Data.DataSet>, and then attempts to use the <xref:System.Data.DataSet.Load%2A> method to load data from a <xref:System.Data.DataTableReader> that contains an incompatible schema.</span></span> <span data-ttu-id="9cf18-478">此示例使用 <xref:System.Data.FillErrorEventHandler> 委托来调查并处理错误，而不是捕获错误。</span><span class="sxs-lookup"><span data-stu-id="9cf18-478">Rather than trapping the error, this example uses a <xref:System.Data.FillErrorEventHandler> delegate to investigate and handle the error.</span></span> <span data-ttu-id="9cf18-479">输出显示在控制台窗口中。</span><span class="sxs-lookup"><span data-stu-id="9cf18-479">The output is displayed in the console window.</span></span>  
  
 [!code-csharp[DataWorks DataSet.Load#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks DataSet.Load/CS/source.cs#1)]
 [!code-vb[DataWorks DataSet.Load#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks DataSet.Load/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-480">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-480">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Locale">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Locale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Locale" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Locale" />
      <MemberSignature Language="VB.NET" Value="Public Property Locale As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Locale { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Locale : System.Globalization.CultureInfo with get, set" Usage="System.Data.DataSet.Locale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Data.DataSysDescription("DataSetLocaleDescr")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Data.DataSysDescription("DataSetLocaleDescr")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9cf18-481">获取或设置用于比较表中字符串的区域设置信息。</span><span class="sxs-lookup"><span data-stu-id="9cf18-481">Gets or sets the locale information used to compare strings within the table.</span></span></summary>
        <value><span data-ttu-id="9cf18-482">一个 <see cref="T:System.Globalization.CultureInfo" />，它包含有关用户计算机区域设置的数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-482">A <see cref="T:System.Globalization.CultureInfo" /> that contains data about the user's machine locale.</span></span> <span data-ttu-id="9cf18-483">默认为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-483">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-484"><xref:System.Data.DataSet.Locale%2A>属性指定要应用排序的区域设置。</span><span class="sxs-lookup"><span data-stu-id="9cf18-484">The <xref:System.Data.DataSet.Locale%2A> property specifies the locale for which sorting applies.</span></span>  
  
 <span data-ttu-id="9cf18-485">默认情况下，将设置 <xref:System.Data.DataSet.Locale%2A> 为， <xref:System.Data.DataSet> 还 <xref:System.Data.DataSet.Locale%2A> 会将中的每个对象的设置为相同的 <xref:System.Data.DataTable> `DataSet` 值。</span><span class="sxs-lookup"><span data-stu-id="9cf18-485">By default, setting the <xref:System.Data.DataSet.Locale%2A> for a <xref:System.Data.DataSet> also sets the <xref:System.Data.DataSet.Locale%2A> for each <xref:System.Data.DataTable> object in that `DataSet` to the same value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-486">在包含表达式的列中， <xref:System.StringComparison.InvariantCulture> 使用。</span><span class="sxs-lookup"><span data-stu-id="9cf18-486">In columns that contain expressions, the <xref:System.StringComparison.InvariantCulture> is used.</span></span> <span data-ttu-id="9cf18-487"><xref:System.StringComparison.CurrentCulture>忽略。</span><span class="sxs-lookup"><span data-stu-id="9cf18-487">The <xref:System.StringComparison.CurrentCulture> is ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-488">下面的示例获取的， <xref:System.Globalization.CultureInfo> <xref:System.Data.DataSet> 并打印 <xref:System.Globalization.CultureInfo.DisplayName%2A> 和 <xref:System.Globalization.CultureInfo.EnglishName%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="9cf18-488">The following example gets the <xref:System.Globalization.CultureInfo> for a <xref:System.Data.DataSet> and prints the <xref:System.Globalization.CultureInfo.DisplayName%2A> and <xref:System.Globalization.CultureInfo.EnglishName%2A> properties.</span></span>  
  
 [!code-vb[Classic WebData DataSet.Locale Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Locale Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-489">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-489">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Merge">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9cf18-490">将指定的 <see cref="T:System.Data.DataSet" />、<see cref="T:System.Data.DataTable" /> 或 <see cref="T:System.Data.DataRow" /> 对象的数组合并到当前的 <see langword="DataSet" /> 或 <see langword="DataTable" /> 中。</span><span class="sxs-lookup"><span data-stu-id="9cf18-490">Merges a specified <see cref="T:System.Data.DataSet" />, <see cref="T:System.Data.DataTable" />, or array of <see cref="T:System.Data.DataRow" /> objects into the current <see langword="DataSet" /> or <see langword="DataTable" />.</span></span></summary>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-491">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-491">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataRow[] rows);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataRow[] rows) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataRow[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (rows As DataRow())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(cli::array &lt;System::Data::DataRow ^&gt; ^ rows);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataRow[] -&gt; unit" Usage="dataSet.Merge rows" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
      </Parameters>
      <Docs>
        <param name="rows"><span data-ttu-id="9cf18-492">要合并到 <see langword="DataRow" /> 中的 <see langword="DataSet" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="9cf18-492">The array of <see langword="DataRow" /> objects to be merged into the <see langword="DataSet" />.</span></span></param>
        <summary><span data-ttu-id="9cf18-493">将 <see cref="T:System.Data.DataRow" /> 对象数组合并到当前的 <see cref="T:System.Data.DataSet" /> 中。</span><span class="sxs-lookup"><span data-stu-id="9cf18-493">Merges an array of <see cref="T:System.Data.DataRow" /> objects into the current <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-494"><xref:System.Data.DataSet.Merge%2A>方法用于合并 <xref:System.Data.DataSet> 具有很大架构的两个对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-494">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="9cf18-495">通常在客户端应用程序上使用合并，以将数据源中的最新更改合并到现有中 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-495">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-496">这允许客户端应用程序使用 <xref:System.Data.DataSet> 数据源中的最新数据进行刷新。</span><span class="sxs-lookup"><span data-stu-id="9cf18-496">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="9cf18-497"><xref:System.Data.DataSet.Merge%2A>方法通常在一系列过程的末尾调用，这些过程涉及验证更改、协调错误、使用更改更新数据源，最后刷新现有 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-497">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="9cf18-498">在客户端应用程序中，通常有一个按钮，用户可以单击该按钮来收集更改的数据并对其进行验证，然后再将其发送回中间层组件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-498">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="9cf18-499">在此方案中， <xref:System.Data.DataSet.GetChanges%2A> 首先调用方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-499">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="9cf18-500">该方法将返回第二个 <xref:System.Data.DataSet> 优化用于验证和合并的。</span><span class="sxs-lookup"><span data-stu-id="9cf18-500">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="9cf18-501">此第二个 <xref:System.Data.DataSet> 对象仅包含已 <xref:System.Data.DataTable> 更改的和 <xref:System.Data.DataRow> 对象，从而导致了原始的子集 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-501">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-502">此子集通常较小，因此更有效地传递回中间层组件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-502">This subset is generally smaller and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="9cf18-503">然后，中间层组件使用存储过程中的更改来更新原始数据源。</span><span class="sxs-lookup"><span data-stu-id="9cf18-503">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="9cf18-504">然后，中间层可以 <xref:System.Data.DataSet> 通过再次运行原始查询来发送回包含数据源中的原始数据和最新数据 (的新数据) ，也可以从数据源向后发送回已对其进行的任何更改的子集。</span><span class="sxs-lookup"><span data-stu-id="9cf18-504">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="9cf18-505"> (例如，如果数据源自动创建唯一的主键值，则这些值可以传播回客户端应用程序。 ) 在任何一种情况下，返回的都 <xref:System.Data.DataSet> 可以 <xref:System.Data.DataSet> 通过 <xref:System.Data.DataSet.Merge%2A> 方法合并回客户端应用程序的原始中。</span><span class="sxs-lookup"><span data-stu-id="9cf18-505">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="9cf18-506"><xref:System.Data.DataSet.Merge%2A>调用方法时，将比较两个对象的架构， <xref:System.Data.DataSet> 因为架构可能已更改。</span><span class="sxs-lookup"><span data-stu-id="9cf18-506">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="9cf18-507">例如，在企业对企业方案中，可能已通过自动化过程将新列添加到了 XML 架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-507">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="9cf18-508">如果源 <xref:System.Data.DataSet> 包含架构元素 (添加了 <xref:System.Data.DataColumn> 目标中缺少的对象) ，则可以通过将参数设置为来将架构元素添加到目标中 `missingSchemaAction` `MissingSchemaAction.Add` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-508">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="9cf18-509">在这种情况下，合并的 <xref:System.Data.DataSet> 包含已添加的架构和数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-509">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="9cf18-510">合并架构后，数据将合并。</span><span class="sxs-lookup"><span data-stu-id="9cf18-510">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="9cf18-511">在将新源合并 <xref:System.Data.DataSet> 到目标时，值为、或的任何源行都将与 <xref:System.Data.DataRowState> `Unchanged` `Modified` `Deleted` 具有相同的主键值的目标行匹配。</span><span class="sxs-lookup"><span data-stu-id="9cf18-511">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="9cf18-512">值为的源行与新源行的 <xref:System.Data.DataRowState> `Added` 主键值相同的新目标行匹配。</span><span class="sxs-lookup"><span data-stu-id="9cf18-512">Source rows with a <xref:System.Data.DataRowState> value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="9cf18-513">在合并过程中，将禁用约束。</span><span class="sxs-lookup"><span data-stu-id="9cf18-513">During a merge, constraints are disabled.</span></span> <span data-ttu-id="9cf18-514">如果在合并结束时无法启用任何约束， <xref:System.Data.ConstraintException> 则在禁用约束时，将生成并保留合并的数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-514">If any constraints cannot be enabled at the end of a merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="9cf18-515">在这种情况下， <xref:System.Data.DataSet.EnforceConstraints%2A> 属性设置为 `false` ，并且所有无效行都标记为 "错误"。</span><span class="sxs-lookup"><span data-stu-id="9cf18-515">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="9cf18-516">在尝试将属性重置为之前，必须解决这些错误 <xref:System.Data.DataSet.EnforceConstraints%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-516">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-517">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-517">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (dataSet As DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet -&gt; unit" Usage="dataSet.Merge dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="9cf18-518">其数据和架构将被合并的 <see langword="DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-518">The <see langword="DataSet" /> whose data and schema will be merged.</span></span></param>
        <summary><span data-ttu-id="9cf18-519">将指定的 <see cref="T:System.Data.DataSet" /> 及其架构合并到当前 <see langword="DataSet" /> 中。</span><span class="sxs-lookup"><span data-stu-id="9cf18-519">Merges a specified <see cref="T:System.Data.DataSet" /> and its schema into the current <see langword="DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-520"><xref:System.Data.DataSet.Merge%2A>方法用于合并 <xref:System.Data.DataSet> 具有很大架构的两个对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-520">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="9cf18-521">通常在客户端应用程序上使用合并，以将数据源中的最新更改合并到现有中 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-521">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-522">这允许客户端应用程序使用 <xref:System.Data.DataSet> 数据源中的最新数据进行刷新。</span><span class="sxs-lookup"><span data-stu-id="9cf18-522">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="9cf18-523"><xref:System.Data.DataSet.Merge%2A>方法通常在一系列过程的末尾调用，这些过程涉及验证更改、协调错误、使用更改更新数据源，最后刷新现有 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-523">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="9cf18-524">在客户端应用程序中，通常有一个按钮，用户可以单击该按钮来收集更改的数据并对其进行验证，然后再将其发送回中间层组件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-524">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="9cf18-525">在此方案中， <xref:System.Data.DataSet.GetChanges%2A> 首先调用方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-525">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="9cf18-526">该方法将返回第二个 <xref:System.Data.DataSet> 优化用于验证和合并的。</span><span class="sxs-lookup"><span data-stu-id="9cf18-526">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="9cf18-527">此第二个 <xref:System.Data.DataSet> 对象仅包含已 <xref:System.Data.DataTable> 更改的和 <xref:System.Data.DataRow> 对象，从而导致了原始的子集 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-527">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-528">此子集通常较小，因此更有效地传递回中间层组件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-528">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="9cf18-529">然后，中间层组件使用存储过程中的更改来更新原始数据源。</span><span class="sxs-lookup"><span data-stu-id="9cf18-529">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="9cf18-530">然后，中间层可以 <xref:System.Data.DataSet> 通过再次运行原始查询来发送回包含数据源中的原始数据和最新数据 (的新数据) ，也可以从数据源向后发送回已对其进行的任何更改的子集。</span><span class="sxs-lookup"><span data-stu-id="9cf18-530">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="9cf18-531"> (例如，如果数据源自动创建唯一的主键值，则这些值可以传播回客户端应用程序。 ) 在任何一种情况下，返回的都 <xref:System.Data.DataSet> 可以 <xref:System.Data.DataSet> 通过 <xref:System.Data.DataSet.Merge%2A> 方法合并回客户端应用程序的原始中。</span><span class="sxs-lookup"><span data-stu-id="9cf18-531">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="9cf18-532"><xref:System.Data.DataSet.Merge%2A>调用方法时，将比较两个对象的架构， <xref:System.Data.DataSet> 因为架构可能已更改。</span><span class="sxs-lookup"><span data-stu-id="9cf18-532">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="9cf18-533">例如，在企业对企业方案中，可能已通过自动化过程将新列添加到了 XML 架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-533">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="9cf18-534">如果源 <xref:System.Data.DataSet> 包含架构元素 (添加了 <xref:System.Data.DataColumn> 目标中缺少的对象) ，则可以通过将参数设置为来将架构元素添加到目标中 `missingSchemaAction` `MissingSchemaAction.Add` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-534">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="9cf18-535">在这种情况下，合并的 <xref:System.Data.DataSet> 包含已添加的架构和数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-535">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="9cf18-536">合并架构后，数据将合并。</span><span class="sxs-lookup"><span data-stu-id="9cf18-536">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="9cf18-537">在将新源合并 <xref:System.Data.DataSet> 到目标时，值为、或的任何源行都将与 <xref:System.Data.DataRowState> `Unchanged` `Modified` `Deleted` 具有相同的主键值的目标行匹配。</span><span class="sxs-lookup"><span data-stu-id="9cf18-537">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="9cf18-538">值为的源行与新源行的 `DataRowState` `Added` 主键值相同的新目标行匹配。</span><span class="sxs-lookup"><span data-stu-id="9cf18-538">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="9cf18-539">在合并过程中，将禁用约束。</span><span class="sxs-lookup"><span data-stu-id="9cf18-539">During a merge, constraints are disabled.</span></span> <span data-ttu-id="9cf18-540">如果在合并结束时无法启用任何约束， <xref:System.Data.ConstraintException> 则在禁用约束时，将生成并保留合并的数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-540">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="9cf18-541">在这种情况下， <xref:System.Data.DataSet.EnforceConstraints%2A> 属性设置为 `false` ，并且所有无效行都标记为 "错误"。</span><span class="sxs-lookup"><span data-stu-id="9cf18-541">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="9cf18-542">在尝试将属性重置为之前，必须解决这些错误 <xref:System.Data.DataSet.EnforceConstraints%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-542">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-543">下面的示例对使用 <xref:System.Data.DataSet.GetChanges%2A> 、更新和 <xref:System.Data.DataSet.Merge%2A> 方法 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-543">The following example uses the <xref:System.Data.DataSet.GetChanges%2A>, Update, and <xref:System.Data.DataSet.Merge%2A> methods on a <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Merge Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.ConstraintException"><span data-ttu-id="9cf18-544">无法启用一个或多个约束。</span><span class="sxs-lookup"><span data-stu-id="9cf18-544">One or more constraints cannot be enabled.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9cf18-545"><paramref name="dataSet" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-545">The <paramref name="dataSet" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Data.ForeignKeyConstraint" />
        <altmember cref="M:System.Data.DataSet.GetChanges" />
        <altmember cref="T:System.Data.UniqueConstraint" />
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-546">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-546">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (table As DataTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataTable -&gt; unit" Usage="dataSet.Merge table" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="9cf18-547">其数据和架构将被合并的 <see cref="T:System.Data.DataTable" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-547">The <see cref="T:System.Data.DataTable" /> whose data and schema will be merged.</span></span></param>
        <summary><span data-ttu-id="9cf18-548">将指定的 <see cref="T:System.Data.DataTable" /> 及其架构合并到当前 <see cref="T:System.Data.DataSet" /> 中。</span><span class="sxs-lookup"><span data-stu-id="9cf18-548">Merges a specified <see cref="T:System.Data.DataTable" /> and its schema into the current <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-549"><xref:System.Data.DataSet.Merge%2A>方法用于合并 <xref:System.Data.DataSet> 具有很大架构的两个对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-549">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="9cf18-550">通常在客户端应用程序上使用合并，以将数据源中的最新更改合并到现有中 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-550">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-551">这允许客户端应用程序使用 <xref:System.Data.DataSet> 数据源中的最新数据进行刷新。</span><span class="sxs-lookup"><span data-stu-id="9cf18-551">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="9cf18-552"><xref:System.Data.DataSet.Merge%2A>方法通常在一系列过程的末尾调用，这些过程涉及验证更改、协调错误、使用更改更新数据源，最后刷新现有 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-552">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="9cf18-553">在客户端应用程序中，通常有一个按钮，用户可以单击该按钮来收集更改的数据并对其进行验证，然后再将其发送回中间层组件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-553">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="9cf18-554">在此方案中， <xref:System.Data.DataSet.GetChanges%2A> 首先调用方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-554">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="9cf18-555">该方法将返回第二个 <xref:System.Data.DataSet> 优化用于验证和合并的。</span><span class="sxs-lookup"><span data-stu-id="9cf18-555">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="9cf18-556">此第二个 <xref:System.Data.DataSet> 对象仅包含已 <xref:System.Data.DataTable> 更改的和 <xref:System.Data.DataRow> 对象，从而导致了原始的子集 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-556">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-557">此子集通常较小，因此更有效地传递回中间层组件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-557">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="9cf18-558">然后，中间层组件使用存储过程中的更改来更新原始数据源。</span><span class="sxs-lookup"><span data-stu-id="9cf18-558">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="9cf18-559">然后，中间层可以 <xref:System.Data.DataSet> 通过再次运行原始查询来发送回包含数据源中的原始数据和最新数据 (的新数据) ，也可以从数据源向后发送回已对其进行的任何更改的子集。</span><span class="sxs-lookup"><span data-stu-id="9cf18-559">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="9cf18-560"> (例如，如果数据源自动创建唯一的主键值，则这些值可以传播回客户端应用程序。 ) 在任何一种情况下，返回的都 <xref:System.Data.DataSet> 可以 <xref:System.Data.DataSet> 通过 <xref:System.Data.DataSet.Merge%2A> 方法合并回客户端应用程序的原始中。</span><span class="sxs-lookup"><span data-stu-id="9cf18-560">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="9cf18-561"><xref:System.Data.DataSet.Merge%2A>调用方法时，将比较两个对象的架构， <xref:System.Data.DataSet> 因为架构可能已更改。</span><span class="sxs-lookup"><span data-stu-id="9cf18-561">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="9cf18-562">例如，在企业对企业方案中，可能已通过自动化过程将新列添加到了 XML 架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-562">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="9cf18-563">如果源 <xref:System.Data.DataSet> 包含架构元素 (添加了 <xref:System.Data.DataColumn> 目标中缺少的对象) ，则可以通过将参数设置为来将架构元素添加到目标中 `missingSchemaAction` `MissingSchemaAction.Add` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-563">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="9cf18-564">在这种情况下，合并的 <xref:System.Data.DataSet> 包含已添加的架构和数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-564">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="9cf18-565">合并架构后，数据将合并。</span><span class="sxs-lookup"><span data-stu-id="9cf18-565">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="9cf18-566">在将新源合并 <xref:System.Data.DataSet> 到目标时，值为、或的任何源行都将与 <xref:System.Data.DataRowState> `Unchanged` `Modified` `Deleted` 具有相同的主键值的目标行匹配。</span><span class="sxs-lookup"><span data-stu-id="9cf18-566">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="9cf18-567">值为的源行与新源行的 `DataRowState` `Added` 主键值相同的新目标行匹配。</span><span class="sxs-lookup"><span data-stu-id="9cf18-567">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="9cf18-568">在合并过程中，将禁用约束。</span><span class="sxs-lookup"><span data-stu-id="9cf18-568">During a merge, constraints are disabled.</span></span> <span data-ttu-id="9cf18-569">如果在合并结束时无法启用任何约束， <xref:System.Data.ConstraintException> 则在禁用约束时，将生成并保留合并的数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-569">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="9cf18-570">在这种情况下， <xref:System.Data.DataSet.EnforceConstraints%2A> 属性设置为 `false` ，并且所有无效行都标记为 "错误"。</span><span class="sxs-lookup"><span data-stu-id="9cf18-570">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="9cf18-571">在尝试将属性重置为之前，必须解决这些错误 <xref:System.Data.DataSet.EnforceConstraints%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-571">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-572">下面的示例创建一个 <xref:System.Data.DataSet> 具有一个表、两列和10行的简单。</span><span class="sxs-lookup"><span data-stu-id="9cf18-572">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="9cf18-573">创建的第二个与 <xref:System.Data.DataTable> 第一个相同。</span><span class="sxs-lookup"><span data-stu-id="9cf18-573">A second <xref:System.Data.DataTable> is created that is identical to the first.</span></span> <span data-ttu-id="9cf18-574">向第二个表添加两行，然后将其合并到中 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-574">Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Merge3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9cf18-575"><paramref name="table" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-575">The <paramref name="table" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-576">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-576">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet, bool preserveChanges);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet, bool preserveChanges) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (dataSet As DataSet, preserveChanges As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet, bool preserveChanges);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet * bool -&gt; unit" Usage="dataSet.Merge (dataSet, preserveChanges)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="9cf18-577">其数据和架构将被合并的 <see langword="DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-577">The <see langword="DataSet" /> whose data and schema will be merged.</span></span></param>
        <param name="preserveChanges"><span data-ttu-id="9cf18-578">要保留当前 <see langword="DataSet" /> 中的更改，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-578"><see langword="true" /> to preserve changes in the current <see langword="DataSet" />; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="9cf18-579">将指定的 <see cref="T:System.Data.DataSet" /> 及其架构合并到当前 <see langword="DataSet" /> 中，在此过程中，将根据给定的参数保留或放弃在此 <see langword="DataSet" /> 中进行的任何更改。</span><span class="sxs-lookup"><span data-stu-id="9cf18-579">Merges a specified <see cref="T:System.Data.DataSet" /> and its schema into the current <see langword="DataSet" />, preserving or discarding any changes in this <see langword="DataSet" /> according to the given argument.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-580"><xref:System.Data.DataSet.Merge%2A>方法用于合并 <xref:System.Data.DataSet> 具有很大架构的两个对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-580">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="9cf18-581">通常在客户端应用程序上使用合并，以将数据源中的最新更改合并到现有中 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-581">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-582">这允许客户端应用程序使用 <xref:System.Data.DataSet> 数据源中的最新数据进行刷新。</span><span class="sxs-lookup"><span data-stu-id="9cf18-582">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="9cf18-583"><xref:System.Data.DataSet.Merge%2A>方法通常在一系列过程的末尾调用，这些过程涉及验证更改、协调错误、使用更改更新数据源，最后刷新现有 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-583">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="9cf18-584">在客户端应用程序中，通常有一个按钮，用户可以单击该按钮来收集更改的数据并对其进行验证，然后再将其发送回中间层组件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-584">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="9cf18-585">在此方案中， <xref:System.Data.DataSet.GetChanges%2A> 首先调用方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-585">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="9cf18-586">该方法将返回第二个 <xref:System.Data.DataSet> 优化用于验证和合并的。</span><span class="sxs-lookup"><span data-stu-id="9cf18-586">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="9cf18-587">此第二个 <xref:System.Data.DataSet> 对象仅包含已 <xref:System.Data.DataTable> 更改的和 <xref:System.Data.DataRow> 对象，从而导致了原始的子集 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-587">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-588">此子集通常较小，因此更有效地传递回中间层组件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-588">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="9cf18-589">然后，中间层组件使用存储过程中的更改来更新原始数据源。</span><span class="sxs-lookup"><span data-stu-id="9cf18-589">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="9cf18-590">然后，中间层可以 <xref:System.Data.DataSet> 通过再次运行原始查询来发送回包含数据源中的原始数据和最新数据 (的新数据) ，也可以从数据源向后发送回已对其进行的任何更改的子集。</span><span class="sxs-lookup"><span data-stu-id="9cf18-590">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="9cf18-591"> (例如，如果数据源自动创建唯一的主键值，则这些值可以传播回客户端应用程序。 ) 在任何一种情况下，返回的都 <xref:System.Data.DataSet> 可以 <xref:System.Data.DataSet> 通过 <xref:System.Data.DataSet.Merge%2A> 方法合并回客户端应用程序的原始中。</span><span class="sxs-lookup"><span data-stu-id="9cf18-591">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="9cf18-592"><xref:System.Data.DataSet.Merge%2A>调用方法时，将比较两个对象的架构， <xref:System.Data.DataSet> 因为架构可能已更改。</span><span class="sxs-lookup"><span data-stu-id="9cf18-592">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="9cf18-593">例如，在企业对企业方案中，可能已通过自动化过程将新列添加到了 XML 架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-593">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="9cf18-594">如果源 <xref:System.Data.DataSet> 包含架构元素 (添加了 <xref:System.Data.DataColumn> 目标中缺少的对象) ，则可以通过将参数设置为来将架构元素添加到目标中 `missingSchemaAction` `MissingSchemaAction.Add` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-594">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="9cf18-595">在这种情况下，合并的 <xref:System.Data.DataSet> 包含已添加的架构和数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-595">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="9cf18-596">合并架构后，数据将合并。</span><span class="sxs-lookup"><span data-stu-id="9cf18-596">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="9cf18-597">在将新源合并 <xref:System.Data.DataSet> 到目标时，值为、或的任何源行都将与 <xref:System.Data.DataRowState> `Unchanged` `Modified` `Deleted` 具有相同的主键值的目标行匹配。</span><span class="sxs-lookup"><span data-stu-id="9cf18-597">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="9cf18-598">值为的源行与新源行的 `DataRowState` `Added` 主键值相同的新目标行匹配。</span><span class="sxs-lookup"><span data-stu-id="9cf18-598">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="9cf18-599">在合并过程中，将禁用约束。</span><span class="sxs-lookup"><span data-stu-id="9cf18-599">During a merge, constraints are disabled.</span></span> <span data-ttu-id="9cf18-600">如果在合并结束时无法启用任何约束， <xref:System.Data.ConstraintException> 则在禁用约束时，将生成并保留合并的数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-600">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="9cf18-601">在这种情况下， <xref:System.Data.DataSet.EnforceConstraints%2A> 属性设置为 `false` ，并且所有无效行都标记为 "错误"。</span><span class="sxs-lookup"><span data-stu-id="9cf18-601">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="9cf18-602">在尝试将属性重置为之前，必须解决这些错误 <xref:System.Data.DataSet.EnforceConstraints%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-602">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-603">下面的示例创建一个 <xref:System.Data.DataSet> 具有一个表、两列和10行的简单。</span><span class="sxs-lookup"><span data-stu-id="9cf18-603">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="9cf18-604">添加10行后，将更改两个值，并添加一行。</span><span class="sxs-lookup"><span data-stu-id="9cf18-604">After adding ten rows, two values are changed, and one row is added.</span></span> <span data-ttu-id="9cf18-605">使用方法创建更改的数据的子集 <xref:System.Data.DataSet.GetChanges%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-605">A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method.</span></span> <span data-ttu-id="9cf18-606">在协调错误后，将子集数据合并到原始中 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-606">After reconciling errors, the subset data is merged into the original <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.GetChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.GetChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.ForeignKeyConstraint" />
        <altmember cref="T:System.Data.UniqueConstraint" />
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-607">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-607">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataRow[] rows, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataRow[] rows, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (rows As DataRow(), preserveChanges As Boolean, missingSchemaAction As MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(cli::array &lt;System::Data::DataRow ^&gt; ^ rows, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataRow[] * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (rows, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rows" Type="System.Data.DataRow[]" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="rows"><span data-ttu-id="9cf18-608">要合并到 <see cref="T:System.Data.DataRow" /> 中的 <see langword="DataSet" /> 对象数组。</span><span class="sxs-lookup"><span data-stu-id="9cf18-608">The array of <see cref="T:System.Data.DataRow" /> objects to be merged into the <see langword="DataSet" />.</span></span></param>
        <param name="preserveChanges"><span data-ttu-id="9cf18-609">要保留 <see langword="DataSet" /> 中的更改，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-609"><see langword="true" /> to preserve changes in the <see langword="DataSet" />; otherwise, <see langword="false" />.</span></span></param>
        <param name="missingSchemaAction"><span data-ttu-id="9cf18-610"><see cref="T:System.Data.MissingSchemaAction" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="9cf18-610">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span></span></param>
        <summary><span data-ttu-id="9cf18-611">将 <see cref="T:System.Data.DataRow" /> 对象数组合并到当前的 <see cref="T:System.Data.DataSet" /> 中，在此过程中，将根据给定的参数保留或放弃在 <see langword="DataSet" /> 中进行的更改并处理不兼容的架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-611">Merges an array of <see cref="T:System.Data.DataRow" /> objects into the current <see cref="T:System.Data.DataSet" />, preserving or discarding changes in the <see langword="DataSet" /> and handling an incompatible schema according to the given arguments.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-612"><xref:System.Data.DataSet.Merge%2A>方法用于合并 <xref:System.Data.DataSet> 具有很大架构的两个对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-612">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="9cf18-613">通常在客户端应用程序上使用合并，以将数据源中的最新更改合并到现有中 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-613">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-614">这允许客户端应用程序使用 <xref:System.Data.DataSet> 数据源中的最新数据进行刷新。</span><span class="sxs-lookup"><span data-stu-id="9cf18-614">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="9cf18-615"><xref:System.Data.DataSet.Merge%2A>方法通常在一系列过程的末尾调用，这些过程涉及验证更改、协调错误、使用更改更新数据源，最后刷新现有 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-615">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="9cf18-616">在客户端应用程序中，通常有一个按钮，用户可以单击该按钮来收集更改的数据并对其进行验证，然后再将其发送回中间层组件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-616">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="9cf18-617">在此方案中， <xref:System.Data.DataSet.GetChanges%2A> 首先调用方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-617">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="9cf18-618">该方法将返回第二个 <xref:System.Data.DataSet> 优化用于验证和合并的。</span><span class="sxs-lookup"><span data-stu-id="9cf18-618">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="9cf18-619">此第二个 <xref:System.Data.DataSet> 对象仅包含已 <xref:System.Data.DataTable> 更改的和 <xref:System.Data.DataRow> 对象，从而导致了原始的子集 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-619">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-620">此子集通常较小，因此更有效地传递回中间层组件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-620">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="9cf18-621">然后，中间层组件使用存储过程中的更改来更新原始数据源。</span><span class="sxs-lookup"><span data-stu-id="9cf18-621">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="9cf18-622">然后，中间层可以 <xref:System.Data.DataSet> 通过再次运行原始查询来发送回包含数据源中的原始数据和最新数据 (的新数据) ，也可以从数据源向后发送回已对其进行的任何更改的子集。</span><span class="sxs-lookup"><span data-stu-id="9cf18-622">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="9cf18-623"> (例如，如果数据源自动创建唯一的主键值，则这些值可以传播回客户端应用程序。 ) 在任何一种情况下，返回的都 <xref:System.Data.DataSet> 可以 <xref:System.Data.DataSet> 通过 <xref:System.Data.DataSet.Merge%2A> 方法合并回客户端应用程序的原始中。</span><span class="sxs-lookup"><span data-stu-id="9cf18-623">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="9cf18-624">为了便于解释 <xref:System.Data.DataSet.Merge%2A> 方法，我们使用 "目标" 来表示当前 <xref:System.Data.DataSet> ，将 "source" 命名为第二个 (参数) <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-624">To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use "target" to signify the current <xref:System.Data.DataSet>, and "source" to name the second (parameter) <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-625">由于目标是在其上 <xref:System.Data.DataSet> 执行合并) 操作 (的对象，因此命名为。</span><span class="sxs-lookup"><span data-stu-id="9cf18-625">The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs.</span></span> <span data-ttu-id="9cf18-626">第二个 <xref:System.Data.DataSet> 称为 "源"，因为它包含的信息不会更改，而是合并到当前中 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-626">The second <xref:System.Data.DataSet> is called a "source" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="9cf18-627"><xref:System.Data.DataSet.Merge%2A>调用方法时，将比较两个对象的架构， <xref:System.Data.DataSet> 因为架构可能已更改。</span><span class="sxs-lookup"><span data-stu-id="9cf18-627">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="9cf18-628">例如，在企业对企业方案中，可能已通过自动化过程将新列添加到了 XML 架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-628">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="9cf18-629">如果源 <xref:System.Data.DataSet> 包含架构元素 (添加了 <xref:System.Data.DataColumn> 目标中缺少的对象) ，则可以通过将参数设置为来将架构元素添加到目标中 `missingSchemaAction` `MissingSchemaAction.Add` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-629">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="9cf18-630">在这种情况下，合并的 <xref:System.Data.DataSet> 包含已添加的架构和数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-630">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="9cf18-631">合并架构后，数据将合并。</span><span class="sxs-lookup"><span data-stu-id="9cf18-631">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="9cf18-632">在将新源合并 <xref:System.Data.DataSet> 到目标时，值为、或的任何源行都将与 <xref:System.Data.DataRowState> `Unchanged` `Modified` `Deleted` 具有相同的主键值的目标行匹配。</span><span class="sxs-lookup"><span data-stu-id="9cf18-632">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="9cf18-633">值为的源行与新源行的 `DataRowState` `Added` 主键值相同的新目标行匹配。</span><span class="sxs-lookup"><span data-stu-id="9cf18-633">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="9cf18-634">在合并过程中，将禁用约束。</span><span class="sxs-lookup"><span data-stu-id="9cf18-634">During a merge, constraints are disabled.</span></span> <span data-ttu-id="9cf18-635">如果在合并结束时无法启用任何约束， <xref:System.Data.ConstraintException> 则在禁用约束时，将生成并保留合并的数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-635">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="9cf18-636">在这种情况下， <xref:System.Data.DataSet.EnforceConstraints%2A> 属性设置为 `false` ，并且所有无效行都标记为 "错误"。</span><span class="sxs-lookup"><span data-stu-id="9cf18-636">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="9cf18-637">在尝试将属性重置为之前，必须解决这些错误 <xref:System.Data.DataSet.EnforceConstraints%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-637">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-638">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-638">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataSet dataSet, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataSet dataSet, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (dataSet As DataSet, preserveChanges As Boolean, missingSchemaAction As MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataSet ^ dataSet, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataSet * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (dataSet, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="9cf18-639">其数据和架构将被合并的 <see langword="DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-639">The <see langword="DataSet" /> whose data and schema will be merged.</span></span></param>
        <param name="preserveChanges"><span data-ttu-id="9cf18-640">要保留当前 <see langword="DataSet" /> 中的更改，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-640"><see langword="true" /> to preserve changes in the current <see langword="DataSet" />; otherwise, <see langword="false" />.</span></span></param>
        <param name="missingSchemaAction"><span data-ttu-id="9cf18-641"><see cref="T:System.Data.MissingSchemaAction" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="9cf18-641">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span></span></param>
        <summary><span data-ttu-id="9cf18-642">将指定的 <see cref="T:System.Data.DataSet" /> 及其架构与当前的 <see langword="DataSet" /> 合并，在此过程中，将根据给定的参数保留或放弃在当前 <see langword="DataSet" /> 中的更改并处理不兼容的架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-642">Merges a specified <see cref="T:System.Data.DataSet" /> and its schema with the current <see langword="DataSet" />, preserving or discarding changes in the current <see langword="DataSet" /> and handling an incompatible schema according to the given arguments.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-643"><xref:System.Data.DataSet.Merge%2A>方法用于合并 <xref:System.Data.DataSet> 具有很大架构的两个对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-643">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="9cf18-644">通常在客户端应用程序上使用合并，以将数据源中的最新更改合并到现有中 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-644">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-645">这允许客户端应用程序使用 <xref:System.Data.DataSet> 数据源中的最新数据进行刷新。</span><span class="sxs-lookup"><span data-stu-id="9cf18-645">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="9cf18-646"><xref:System.Data.DataSet.Merge%2A>方法通常在一系列过程的末尾调用，这些过程涉及验证更改、协调错误、使用更改更新数据源，最后刷新现有 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-646">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="9cf18-647">在客户端应用程序中，通常有一个按钮，用户可以单击该按钮来收集更改的数据并对其进行验证，然后再将其发送回中间层组件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-647">In a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="9cf18-648">在此方案中， <xref:System.Data.DataSet.GetChanges%2A> 首先调用方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-648">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="9cf18-649">该方法将返回第二个 <xref:System.Data.DataSet> 优化用于验证和合并的。</span><span class="sxs-lookup"><span data-stu-id="9cf18-649">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="9cf18-650">此第二个 <xref:System.Data.DataSet> 对象仅包含已 <xref:System.Data.DataTable> 更改的和 <xref:System.Data.DataRow> 对象，从而导致了原始的子集 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-650">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-651">此子集通常较小，因此更有效地传递回中间层组件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-651">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="9cf18-652">然后，中间层组件使用存储过程中的更改来更新原始数据源。</span><span class="sxs-lookup"><span data-stu-id="9cf18-652">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="9cf18-653">然后，中间层可以 <xref:System.Data.DataSet> 通过再次运行原始查询来发送回包含数据源中的原始数据和最新数据 (的新数据) ，也可以从数据源向后发送回已对其进行的任何更改的子集。</span><span class="sxs-lookup"><span data-stu-id="9cf18-653">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="9cf18-654"> (例如，如果数据源自动创建唯一的主键值，则这些值可以传播回客户端应用程序。 ) 在任何一种情况下，返回的都 <xref:System.Data.DataSet> 可以 <xref:System.Data.DataSet> 通过 <xref:System.Data.DataSet.Merge%2A> 方法合并回客户端应用程序的原始中。</span><span class="sxs-lookup"><span data-stu-id="9cf18-654">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="9cf18-655">为了便于解释 <xref:System.Data.DataSet.Merge%2A> 方法，我们使用 "目标" 来表示当前 <xref:System.Data.DataSet> ，将 "source" 命名为第二个 (参数) <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-655">To facilitate explanation of the <xref:System.Data.DataSet.Merge%2A> method, we use "target" to signify the current <xref:System.Data.DataSet>, and "source" to name the second (parameter) <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-656">由于目标是在其上 <xref:System.Data.DataSet> 执行合并) 操作 (的对象，因此命名为。</span><span class="sxs-lookup"><span data-stu-id="9cf18-656">The target <xref:System.Data.DataSet> is so named because it is the object upon which an action (the merge) occurs.</span></span> <span data-ttu-id="9cf18-657">第二个 <xref:System.Data.DataSet> 称为 "源"，因为它包含的信息不会更改，而是合并到当前中 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-657">The second <xref:System.Data.DataSet> is called a "source" because the information it contains does not change, but instead is merged into the current <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="9cf18-658"><xref:System.Data.DataSet.Merge%2A>调用方法时，将比较两个对象的架构， <xref:System.Data.DataSet> 因为架构可能已更改。</span><span class="sxs-lookup"><span data-stu-id="9cf18-658">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="9cf18-659">例如，在企业对企业方案中，可能已通过自动化过程将新列添加到了 XML 架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-659">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="9cf18-660">如果源 <xref:System.Data.DataSet> 包含架构元素 (添加了 <xref:System.Data.DataColumn> 目标中缺少的对象) ，则可以通过将参数设置为来将架构元素添加到目标中 `missingSchemaAction` `MissingSchemaAction.Add` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-660">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="9cf18-661">在这种情况下，合并的 <xref:System.Data.DataSet> 包含已添加的架构和数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-661">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="9cf18-662">合并架构后，数据将合并。</span><span class="sxs-lookup"><span data-stu-id="9cf18-662">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="9cf18-663">在将新源合并 <xref:System.Data.DataSet> 到目标时，值为、或的任何源行都将与 <xref:System.Data.DataRowState> `Unchanged` `Modified` `Deleted` 具有相同的主键值的目标行匹配。</span><span class="sxs-lookup"><span data-stu-id="9cf18-663">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="9cf18-664">值为的源行与新源行的 `DataRowState` `Added` 主键值相同的新目标行匹配。</span><span class="sxs-lookup"><span data-stu-id="9cf18-664">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="9cf18-665">在合并过程中，将禁用约束。</span><span class="sxs-lookup"><span data-stu-id="9cf18-665">During a merge, constraints are disabled.</span></span> <span data-ttu-id="9cf18-666">如果在合并结束时无法启用任何约束， <xref:System.Data.ConstraintException> 则在禁用约束时，将生成并保留合并的数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-666">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="9cf18-667">在这种情况下， <xref:System.Data.DataSet.EnforceConstraints%2A> 属性设置为 `false` ，并且所有无效行都标记为 "错误"。</span><span class="sxs-lookup"><span data-stu-id="9cf18-667">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="9cf18-668">在尝试将属性重置为之前，必须解决这些错误 <xref:System.Data.DataSet.EnforceConstraints%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-668">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-669">下面的示例创建一个 <xref:System.Data.DataSet> 具有一个表、两列和10行的简单。</span><span class="sxs-lookup"><span data-stu-id="9cf18-669">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="9cf18-670">更改了两个值，并添加了一行。</span><span class="sxs-lookup"><span data-stu-id="9cf18-670">Two values are changed, and one row is added.</span></span> <span data-ttu-id="9cf18-671">使用方法创建更改的数据的子集 <xref:System.Data.DataSet.GetChanges%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-671">A subset of the changed data is created using the <xref:System.Data.DataSet.GetChanges%2A> method.</span></span> <span data-ttu-id="9cf18-672">在协调错误后，会将一个新列添加到子集，从而更改架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-672">After reconciling errors, a new column is added to the subset, changing the schema.</span></span> <span data-ttu-id="9cf18-673">在 <xref:System.Data.DataSet.Merge%2A> 将设置为的情况下调用方法时 `missingSchemaAction` `MissingSchemaAction.Add` ，会将新列添加到原始 <xref:System.Data.DataSet> 对象的架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-673">When the <xref:System.Data.DataSet.Merge%2A> method is called with the `missingSchemaAction` set to `MissingSchemaAction.Add`, the new column is added to the original <xref:System.Data.DataSet> object's schema.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Merge2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9cf18-674"><paramref name="dataSet" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-674">The <paramref name="dataSet" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-675">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-675">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Merge">
      <MemberSignature Language="C#" Value="public void Merge (System.Data.DataTable table, bool preserveChanges, System.Data.MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Merge(class System.Data.DataTable table, bool preserveChanges, valuetype System.Data.MissingSchemaAction missingSchemaAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Merge (table As DataTable, preserveChanges As Boolean, missingSchemaAction As MissingSchemaAction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Merge(System::Data::DataTable ^ table, bool preserveChanges, System::Data::MissingSchemaAction missingSchemaAction);" />
      <MemberSignature Language="F#" Value="member this.Merge : System.Data.DataTable * bool * System.Data.MissingSchemaAction -&gt; unit" Usage="dataSet.Merge (table, preserveChanges, missingSchemaAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
        <Parameter Name="preserveChanges" Type="System.Boolean" />
        <Parameter Name="missingSchemaAction" Type="System.Data.MissingSchemaAction" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="9cf18-676">其数据和架构将被合并的 <see langword="DataTable" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-676">The <see langword="DataTable" /> whose data and schema will be merged.</span></span></param>
        <param name="preserveChanges"><span data-ttu-id="9cf18-677"><see cref="T:System.Data.MissingSchemaAction" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="9cf18-677">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span></span></param>
        <param name="missingSchemaAction"><span data-ttu-id="9cf18-678">要保留 <see langword="DataSet" /> 中的更改，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-678"><see langword="true" /> to preserve changes in the <see langword="DataSet" />; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="9cf18-679">将指定的 <see cref="T:System.Data.DataTable" /> 及其架构合并到当前的 <see langword="DataSet" /> 中，在此过程中，将根据给定的参数保留或放弃在 <see langword="DataSet" /> 中进行的更改并处理不兼容的架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-679">Merges a specified <see cref="T:System.Data.DataTable" /> and its schema into the current <see langword="DataSet" />, preserving or discarding changes in the <see langword="DataSet" /> and handling an incompatible schema according to the given arguments.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-680"><xref:System.Data.DataSet.Merge%2A>方法用于合并 <xref:System.Data.DataSet> 具有很大架构的两个对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-680">The <xref:System.Data.DataSet.Merge%2A> method is used to merge two <xref:System.Data.DataSet> objects that have largely similar schemas.</span></span> <span data-ttu-id="9cf18-681">通常在客户端应用程序上使用合并，以将数据源中的最新更改合并到现有中 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-681">A merge is typically used on a client application to incorporate the latest changes from a data source into an existing <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-682">这允许客户端应用程序使用 <xref:System.Data.DataSet> 数据源中的最新数据进行刷新。</span><span class="sxs-lookup"><span data-stu-id="9cf18-682">This allows the client application to have a refreshed <xref:System.Data.DataSet> with the latest data from the data source.</span></span>  
  
 <span data-ttu-id="9cf18-683"><xref:System.Data.DataSet.Merge%2A>方法通常在一系列过程的末尾调用，这些过程涉及验证更改、协调错误、使用更改更新数据源，最后刷新现有 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-683">The <xref:System.Data.DataSet.Merge%2A> method is typically called at the end of a series of procedures that involve validating changes, reconciling errors, updating the data source with the changes, and finally refreshing the existing <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="9cf18-684">对于客户端应用程序，通常有一个按钮，用户可以单击该按钮来收集更改的数据并对其进行验证，然后再将其发送回中间层组件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-684">iOn a client application, it is common to have a single button that the user can click that gathers the changed data and validates it before sending it back to a middle-tier component.</span></span> <span data-ttu-id="9cf18-685">在此方案中， <xref:System.Data.DataSet.GetChanges%2A> 首先调用方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-685">In this scenario, the <xref:System.Data.DataSet.GetChanges%2A> method is first invoked.</span></span> <span data-ttu-id="9cf18-686">该方法将返回第二个 <xref:System.Data.DataSet> 优化用于验证和合并的。</span><span class="sxs-lookup"><span data-stu-id="9cf18-686">That method returns a second <xref:System.Data.DataSet> optimized for validating and merging.</span></span> <span data-ttu-id="9cf18-687">此第二个 <xref:System.Data.DataSet> 对象仅包含已 <xref:System.Data.DataTable> 更改的和 <xref:System.Data.DataRow> 对象，从而导致了原始的子集 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-687">This second <xref:System.Data.DataSet> object contains only the <xref:System.Data.DataTable> and <xref:System.Data.DataRow> objects that were changed, resulting in a subset of the original <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-688">此子集通常较小，因此更有效地传递回中间层组件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-688">This subset is generally smaller, and thus more efficiently passed back to a middle-tier component.</span></span> <span data-ttu-id="9cf18-689">然后，中间层组件使用存储过程中的更改来更新原始数据源。</span><span class="sxs-lookup"><span data-stu-id="9cf18-689">The middle-tier component then updates the original data source with the changes through stored procedures.</span></span> <span data-ttu-id="9cf18-690">然后，中间层可以 <xref:System.Data.DataSet> 通过再次运行原始查询来发送回包含数据源中的原始数据和最新数据 (的新数据) ，也可以从数据源向后发送回已对其进行的任何更改的子集。</span><span class="sxs-lookup"><span data-stu-id="9cf18-690">The middle tier can then send back either a new <xref:System.Data.DataSet> that includes original data and the latest data from the data source (by running the original query again), or it can send back the subset with any changes that have been made to it from the data source.</span></span> <span data-ttu-id="9cf18-691"> (例如，如果数据源自动创建唯一的主键值，则这些值可以传播回客户端应用程序。 ) 在任何一种情况下，返回的都 <xref:System.Data.DataSet> 可以 <xref:System.Data.DataSet> 通过 <xref:System.Data.DataSet.Merge%2A> 方法合并回客户端应用程序的原始中。</span><span class="sxs-lookup"><span data-stu-id="9cf18-691">(For example, if the data source automatically creates unique primary key values, these values can be propagated back to the client application.) In either case, the returned <xref:System.Data.DataSet> can be merged back into the client application's original <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.Merge%2A> method.</span></span>  
  
 <span data-ttu-id="9cf18-692"><xref:System.Data.DataSet.Merge%2A>调用方法时，将比较两个对象的架构， <xref:System.Data.DataSet> 因为架构可能已更改。</span><span class="sxs-lookup"><span data-stu-id="9cf18-692">When the <xref:System.Data.DataSet.Merge%2A> method is called, the schemas of the two <xref:System.Data.DataSet> objects are compared because it is possible that the schemas may have been changed.</span></span> <span data-ttu-id="9cf18-693">例如，在企业对企业方案中，可能已通过自动化过程将新列添加到了 XML 架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-693">For example, in a business-to-business scenario, new columns may have been added to an XML schema by an automated process.</span></span> <span data-ttu-id="9cf18-694">如果源 <xref:System.Data.DataSet> 包含架构元素 (添加了 <xref:System.Data.DataColumn> 目标中缺少的对象) ，则可以通过将参数设置为来将架构元素添加到目标中 `missingSchemaAction` `MissingSchemaAction.Add` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-694">If the source <xref:System.Data.DataSet> contains schema elements (added <xref:System.Data.DataColumn> objects) that are missing in the target, the schema elements can be added to the target by setting the `missingSchemaAction` argument to `MissingSchemaAction.Add`.</span></span> <span data-ttu-id="9cf18-695">在这种情况下，合并的 <xref:System.Data.DataSet> 包含已添加的架构和数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-695">In that case, the merged <xref:System.Data.DataSet> contains the added schema and data.</span></span>  
  
 <span data-ttu-id="9cf18-696">合并架构后，数据将合并。</span><span class="sxs-lookup"><span data-stu-id="9cf18-696">After merging schemas, the data is merged.</span></span>  
  
 <span data-ttu-id="9cf18-697">在将新源合并 <xref:System.Data.DataSet> 到目标时，值为、或的任何源行都将与 <xref:System.Data.DataRowState> `Unchanged` `Modified` `Deleted` 具有相同的主键值的目标行匹配。</span><span class="sxs-lookup"><span data-stu-id="9cf18-697">When merging a new source <xref:System.Data.DataSet> into the target, any source rows with a <xref:System.Data.DataRowState> value of `Unchanged`, `Modified`, or `Deleted` are matched to target rows with the same primary key values.</span></span> <span data-ttu-id="9cf18-698">值为的源行与新源行的 `DataRowState` `Added` 主键值相同的新目标行匹配。</span><span class="sxs-lookup"><span data-stu-id="9cf18-698">Source rows with a `DataRowState` value of `Added` are matched to new target rows with the same primary key values as the new source rows.</span></span>  
  
 <span data-ttu-id="9cf18-699">在合并过程中，将禁用约束。</span><span class="sxs-lookup"><span data-stu-id="9cf18-699">During a merge, constraints are disabled.</span></span> <span data-ttu-id="9cf18-700">如果在合并结束时无法启用任何约束， <xref:System.Data.ConstraintException> 则在禁用约束时，将生成并保留合并的数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-700">If any constraints cannot be enabled at the end of merge, a <xref:System.Data.ConstraintException> is generated and the merged data is retained while the constraints are disabled.</span></span> <span data-ttu-id="9cf18-701">在这种情况下， <xref:System.Data.DataSet.EnforceConstraints%2A> 属性设置为 `false` ，并且所有无效行都标记为 "错误"。</span><span class="sxs-lookup"><span data-stu-id="9cf18-701">In this case, the <xref:System.Data.DataSet.EnforceConstraints%2A> property is set to `false`, and all rows that are invalid are marked in error.</span></span> <span data-ttu-id="9cf18-702">在尝试将属性重置为之前，必须解决这些错误 <xref:System.Data.DataSet.EnforceConstraints%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-702">The errors must be resolved before attempting to reset the <xref:System.Data.DataSet.EnforceConstraints%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-703">下面的示例创建一个 <xref:System.Data.DataSet> 具有一个表、两列和10行的简单。</span><span class="sxs-lookup"><span data-stu-id="9cf18-703">The following example creates a simple <xref:System.Data.DataSet> with one table, two columns, and ten rows.</span></span> <span data-ttu-id="9cf18-704">创建的第二个与 <xref:System.Data.DataTable> 第一个完全相同，只是向表中添加了一个新的 `DataColumn` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-704">A second <xref:System.Data.DataTable> is created that is nearly identical to the first except that a new `DataColumn` is added to the table.</span></span> <span data-ttu-id="9cf18-705">向第二个表中添加了两行，然后将其合并到中 <xref:System.Data.DataSet> `preserveChanges` ，并将参数设置为 `false` ，并将 `missingSchemaAction` 参数设置为 `MissingSchemaAction.Add` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-705">Two rows are added to the second table, which is then merged into the <xref:System.Data.DataSet> with the `preserveChanges` argument set to `false`, and the `missingSchemaAction` argument set to `MissingSchemaAction.Add`.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Merge4 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge4 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Merge4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Merge4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9cf18-706"><paramref name="dataSet" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-706">The <paramref name="dataSet" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-707">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-707">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MergeFailed">
      <MemberSignature Language="C#" Value="public event System.Data.MergeFailedEventHandler MergeFailed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.MergeFailedEventHandler MergeFailed" />
      <MemberSignature Language="DocId" Value="E:System.Data.DataSet.MergeFailed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MergeFailed As MergeFailedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::MergeFailedEventHandler ^ MergeFailed;" />
      <MemberSignature Language="F#" Value="member this.MergeFailed : System.Data.MergeFailedEventHandler " Usage="member this.MergeFailed : System.Data.MergeFailedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Data.DataSysDescription("DataSetMergeFailedDescr")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Data.DataSysDescription("DataSetMergeFailedDescr")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.MergeFailedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9cf18-708">当目标和源 <see cref="T:System.Data.DataRow" /> 的主键值相同且 <see cref="P:System.Data.DataSet.EnforceConstraints" /> 设置为真时发生。</span><span class="sxs-lookup"><span data-stu-id="9cf18-708">Occurs when a target and source <see cref="T:System.Data.DataRow" /> have the same primary key value, and <see cref="P:System.Data.DataSet.EnforceConstraints" /> is set to true.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-709">有关如何处理事件的详细信息，请参阅 [处理和引发事件](/dotnet/standard/events/)。</span><span class="sxs-lookup"><span data-stu-id="9cf18-709">For more information about how to handle events, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-710">下面的示例演示如何使用 <xref:System.Data.DataSet.MergeFailed> 事件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-710">The following example demonstrates the use of the <xref:System.Data.DataSet.MergeFailed> event.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.MergeFailed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.MergeFailed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.MergeFailed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.MergeFailed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-711">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-711">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Data.DataSet.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Data.DataSysDescription("DataSetNamespaceDescr")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Data.DataSysDescription("DataSetNamespaceDescr")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9cf18-712">获取或设置 <see cref="T:System.Data.DataSet" /> 的命名空间。</span><span class="sxs-lookup"><span data-stu-id="9cf18-712">Gets or sets the namespace of the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="9cf18-713"><see cref="T:System.Data.DataSet" /> 的命名空间。</span><span class="sxs-lookup"><span data-stu-id="9cf18-713">The namespace of the <see cref="T:System.Data.DataSet" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-714"><xref:System.Data.DataSet.Namespace%2A>当 <xref:System.Data.DataSet> 使用 <xref:System.Data.DataSet.ReadXml%2A> 、 <xref:System.Data.DataSet.WriteXml%2A> 、 <xref:System.Data.DataSet.ReadXmlSchema%2A> 或 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法读取 XML 文档并将其写入到中时，使用属性。</span><span class="sxs-lookup"><span data-stu-id="9cf18-714">The <xref:System.Data.DataSet.Namespace%2A> property is used when reading and writing an XML document into the <xref:System.Data.DataSet> using the <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, or <xref:System.Data.DataSet.WriteXmlSchema%2A> methods.</span></span>  
  
 <span data-ttu-id="9cf18-715">XML 文档的命名空间用于在读入时确定 XML 特性和元素的作用域 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-715">The namespace of an XML document is used to scope XML attributes and elements when read into a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-716">例如，如果 <xref:System.Data.DataSet> 包含从命名空间为 "myCompany" 的文档中读取的架构，并且尝试仅从具有不同命名空间的文档中读取数据，则将忽略与现有架构不对应的任何数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-716">For example, if a <xref:System.Data.DataSet> contains a schema that was read from a document with the namespace "myCompany," and an attempt is made to read data only from a document with a different namespace, any data that does not correspond to the existing schema is ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-717">下面的示例在 <xref:System.Data.DataSet.Prefix%2A> 调用方法之前设置 <xref:System.Data.DataSet.ReadXml%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-717">The following example sets the <xref:System.Data.DataSet.Prefix%2A> before calling the <xref:System.Data.DataSet.ReadXml%2A> method.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9cf18-718">该命名空间已有数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-718">The namespace already has data.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-719">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-719">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member OnPropertyChanging : System.ComponentModel.PropertyChangedEventArgs -&gt; unit&#xA;override this.OnPropertyChanging : System.ComponentModel.PropertyChangedEventArgs -&gt; unit" Usage="dataSet.OnPropertyChanging pcevent" />
      <MemberSignature Language="C#" Value="protected internal virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcevent" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="pcevent"><span data-ttu-id="9cf18-720">包含事件数据的 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-720">A <see cref="T:System.ComponentModel.PropertyChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="9cf18-721">引发 <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> 事件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-721">Raises the <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-722">引发事件时，将通过委托调用事件处理程序。</span><span class="sxs-lookup"><span data-stu-id="9cf18-722">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="9cf18-723">有关概述，请参阅 [处理和引发事件](/dotnet/standard/events/)。</span><span class="sxs-lookup"><span data-stu-id="9cf18-723">For an overview, see [Handling and Raising Events](/dotnet/standard/events/).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9cf18-724">当 <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> 在派生类中重写时，请确保调用基类的 <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-724">When overriding <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> in a derived class, be sure to call the base class' <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> method.</span></span></para></block>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-725">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-725">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OnRemoveRelation">
      <MemberSignature Language="C#" Value="protected virtual void OnRemoveRelation (System.Data.DataRelation relation);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemoveRelation(class System.Data.DataRelation relation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemoveRelation (relation As DataRelation)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemoveRelation(System::Data::DataRelation ^ relation);" />
      <MemberSignature Language="F#" Value="abstract member OnRemoveRelation : System.Data.DataRelation -&gt; unit&#xA;override this.OnRemoveRelation : System.Data.DataRelation -&gt; unit" Usage="dataSet.OnRemoveRelation relation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="relation" Type="System.Data.DataRelation" />
      </Parameters>
      <Docs>
        <param name="relation"><span data-ttu-id="9cf18-726">正在移除的 <see cref="T:System.Data.DataRelation" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-726">The <see cref="T:System.Data.DataRelation" /> being removed.</span></span></param>
        <summary><span data-ttu-id="9cf18-727">当从 <see cref="T:System.Data.DataRelation" /> 中移除 <see cref="T:System.Data.DataTable" /> 对象时发生。</span><span class="sxs-lookup"><span data-stu-id="9cf18-727">Occurs when a <see cref="T:System.Data.DataRelation" /> object is removed from a <see cref="T:System.Data.DataTable" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-728">此方法应由子类重写以限制要删除的表</span><span class="sxs-lookup"><span data-stu-id="9cf18-728">This method should be overridden by subclasses to restrict tables being removed</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-729">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-729">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OnRemoveTable">
      <MemberSignature Language="C#" Value="protected internal virtual void OnRemoveTable (System.Data.DataTable table);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnRemoveTable(class System.Data.DataTable table) cil managed" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.OnRemoveTable(System.Data.DataTable)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnRemoveTable (table As DataTable)" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnRemoveTable(System::Data::DataTable ^ table);" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member OnRemoveTable : System.Data.DataTable -&gt; unit&#xA;override this.OnRemoveTable : System.Data.DataTable -&gt; unit" Usage="dataSet.OnRemoveTable table" />
      <MemberSignature Language="C#" Value="protected virtual void OnRemoveTable (System.Data.DataTable table);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRemoveTable(class System.Data.DataTable table) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRemoveTable (table As DataTable)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRemoveTable(System::Data::DataTable ^ table);" FrameworkAlternate="netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="table" Type="System.Data.DataTable" />
      </Parameters>
      <Docs>
        <param name="table"><span data-ttu-id="9cf18-730">正在移除的 <see cref="T:System.Data.DataTable" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-730">The <see cref="T:System.Data.DataTable" /> being removed.</span></span></param>
        <summary><span data-ttu-id="9cf18-731">当从 <see cref="T:System.Data.DataTable" /> 中移除 <see cref="T:System.Data.DataSet" /> 时发生。</span><span class="sxs-lookup"><span data-stu-id="9cf18-731">Occurs when a <see cref="T:System.Data.DataTable" /> is removed from a <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-732">子类可以重写此方法，以限制删除表。</span><span class="sxs-lookup"><span data-stu-id="9cf18-732">This method can be overridden by subclasses to restrict tables from being removed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-733">下面的示例演示一个派生自的类， <xref:System.Data.DataSet> 其中的 <xref:System.Data.DataSet.OnRemoveTable%2A> 方法已重写。</span><span class="sxs-lookup"><span data-stu-id="9cf18-733">The following example shows a class derived from the <xref:System.Data.DataSet> with the <xref:System.Data.DataSet.OnRemoveTable%2A> method overridden.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.OnRemoveTable Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.OnRemoveTable Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.OnRemoveTable Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.OnRemoveTable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-734">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-734">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Prefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Prefix : string with get, set" Usage="System.Data.DataSet.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue("")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue("")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Data.DataSysDescription("DataSetPrefixDescr")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Data.DataSysDescription("DataSetPrefixDescr")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9cf18-735">获取或设置一个 XML 前缀，该前缀是 <see cref="T:System.Data.DataSet" /> 的命名空间的别名。</span><span class="sxs-lookup"><span data-stu-id="9cf18-735">Gets or sets an XML prefix that aliases the namespace of the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="9cf18-736"><see cref="T:System.Data.DataSet" /> 命名空间的 XML 前缀。</span><span class="sxs-lookup"><span data-stu-id="9cf18-736">The XML prefix for the <see cref="T:System.Data.DataSet" /> namespace.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-737">在 <xref:System.Data.DataSet.Prefix%2A> 整个 XML 文档中使用属性来标识属于对象命名空间的元素， <xref:System.Data.DataSet> (由 <xref:System.Data.DataSet.Namespace%2A> 属性) 设置。</span><span class="sxs-lookup"><span data-stu-id="9cf18-737">The <xref:System.Data.DataSet.Prefix%2A> property is used throughout an XML document to identify elements which belong to the namespace of the <xref:System.Data.DataSet> object (as set by the <xref:System.Data.DataSet.Namespace%2A> property).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-738">下面的示例在 <xref:System.Data.DataSet.Prefix%2A> 调用方法之前设置 <xref:System.Data.DataSet.ReadXml%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-738">The following example sets the <xref:System.Data.DataSet.Prefix%2A> before calling the <xref:System.Data.DataSet.ReadXml%2A> method.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Namespace Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Namespace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-739">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-739">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RaisePropertyChanging">
      <MemberSignature Language="C#" Value="protected internal void RaisePropertyChanging (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RaisePropertyChanging(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.RaisePropertyChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RaisePropertyChanging (name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RaisePropertyChanging(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.RaisePropertyChanging : string -&gt; unit" Usage="dataSet.RaisePropertyChanging name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="9cf18-740">将要更改的属性的名称。</span><span class="sxs-lookup"><span data-stu-id="9cf18-740">The name of the property that is about to change.</span></span></param>
        <summary><span data-ttu-id="9cf18-741">发送指定的 <see cref="T:System.Data.DataSet" /> 属性将要更改的通知。</span><span class="sxs-lookup"><span data-stu-id="9cf18-741">Sends a notification that the specified <see cref="T:System.Data.DataSet" /> property is about to change.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-742">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-742">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9cf18-743">将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-743">Reads XML schema and data into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-744">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-744">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (stream As Stream) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.Stream -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="9cf18-745">从 <see cref="T:System.IO.Stream" /> 派生的对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-745">An object that derives from <see cref="T:System.IO.Stream" />.</span></span></param>
        <summary><span data-ttu-id="9cf18-746">使用指定的 <see cref="T:System.IO.Stream" /> 将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-746">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.Stream" />.</span></span></summary>
        <returns><span data-ttu-id="9cf18-747">用于读取数据的 <see cref="T:System.Data.XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-747">The <see cref="T:System.Data.XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-748"><xref:System.Data.DataSet.ReadXml%2A>方法提供了一种方法，用于从 XML 文档只读取数据或将数据和架构读入到 <xref:System.Data.DataSet> 中，而 <xref:System.Data.DataSet.ReadXmlSchema%2A> 方法只读取架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-748">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="9cf18-749">若要读取数据和架构，请使用 `ReadXML` 包含参数的重载之一 `mode` ，并将其值设置为 `ReadSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-749">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="9cf18-750">请注意，对于和方法也是 <xref:System.Data.DataSet.WriteXml%2A> 如此 <xref:System.Data.DataSet.WriteXmlSchema%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-750">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="9cf18-751">若要从编写 XML 数据或同时编写架构和数据 `DataSet` ，请使用 `WriteXml` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-751">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="9cf18-752">若要只写入架构，请使用 `WriteXmlSchema` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-752">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-753"><xref:System.InvalidOperationException>如果在中 `DataRow` 读取或写入的列类型实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> 且不实现，则将引发 <xref:System.Xml.Serialization.IXmlSerializable> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-753">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="9cf18-754">如果指定了内嵌架构，则在加载数据之前，使用内联架构来扩展现有的关系结构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-754">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="9cf18-755">例如，如果存在任何冲突 (例如，使用不同数据类型定义的同一表中的同一列) 会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-755">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="9cf18-756">如果未指定内联架构，根据 XML 文档的结构，将根据需要通过推理扩展关系结构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-756">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="9cf18-757">如果无法通过推理扩展架构以便公开所有数据，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-757">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-758">在 `DataSet` `DataColumn` `DataTable` 序列化的 XML 中转义 xml 元素（如 ( "_" ) ）时，不会将该元素与相应的或关联。</span><span class="sxs-lookup"><span data-stu-id="9cf18-758">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="9cf18-759">`DataSet`本身只是转义 xml 元素名称中的非法 XML 字符，因此只能使用同一个。</span><span class="sxs-lookup"><span data-stu-id="9cf18-759">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="9cf18-760">当转义 XML 元素名称中的法律字符时，将在处理时忽略元素。</span><span class="sxs-lookup"><span data-stu-id="9cf18-760">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="9cf18-761">如果包含的 XML 架构 <xref:System.Data.DataSet> ，则 `targetNamespace` 数据可能不会被读取，并且在调用 <xref:System.Data.DataSet.ReadXml%2A> 以加载 <xref:System.Data.DataSet> 包含元素且无限定命名空间的 xml 时可能会遇到异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-761">If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="9cf18-762">若要读取未限定的元素，请 `elementFormDefault` 在 XML 架构中设置等于 "合格的"，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="9cf18-762">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema, as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-763">如果在 <xref:System.Data.DataSet> 同一命名空间中包含相同名称但不同类型的元素的架构，则当您尝试通过指定将架构读取到时，将引发异常 <xref:System.Data.DataSet> <xref:System.Data.DataSet.ReadXml%2A> `XmlReadMode.ReadSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-763">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="9cf18-764">如果使用 .NET Framework 版本1.0，则不会发生此异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-764">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-765">下面的示例首先创建一个简单 <xref:System.Data.DataSet> 的，其中包含一个 <xref:System.Data.DataTable> 、两个列和10个行。</span><span class="sxs-lookup"><span data-stu-id="9cf18-765">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="9cf18-766"><xref:System.Data.DataSet>通过调用方法将架构和数据写入磁盘 <xref:System.Data.DataSet.WriteXml%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-766">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="9cf18-767">将创建第二个 <xref:System.Data.DataSet> ，并 <xref:System.Data.DataSet.ReadXml%2A> 使用方法来填充架构和数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-767">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)" />
        <altmember cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />
        <altmember cref="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)" />
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-768">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-768">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As TextReader) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.TextReader -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9cf18-769">从中读取架构和数据的 <see langword="TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-769">The <see langword="TextReader" /> from which to read the schema and data.</span></span></param>
        <summary><span data-ttu-id="9cf18-770">使用指定的 <see cref="T:System.IO.TextReader" /> 将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-770">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.TextReader" />.</span></span></summary>
        <returns><span data-ttu-id="9cf18-771">用于读取数据的 <see cref="T:System.Data.XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-771">The <see cref="T:System.Data.XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-772"><xref:System.Data.DataSet.ReadXml%2A>方法提供了一种方法，用于从 XML 文档只读取数据或将数据和架构读入到 <xref:System.Data.DataSet> 中，而 <xref:System.Data.DataSet.ReadXmlSchema%2A> 方法只读取架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-772">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="9cf18-773">若要读取数据和架构，请使用 `ReadXML` 包含参数的重载之一 `mode` ，并将其值设置为 `ReadSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-773">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="9cf18-774">请注意，对于和方法也是 <xref:System.Data.DataSet.WriteXml%2A> 如此 <xref:System.Data.DataSet.WriteXmlSchema%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-774">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="9cf18-775">若要从编写 XML 数据或同时编写架构和数据 `DataSet` ，请使用 `WriteXml` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-775">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="9cf18-776">若要只写入架构，请使用 `WriteXmlSchema` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-776">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-777"><xref:System.InvalidOperationException>如果在中 `DataRow` 读取或写入的列类型实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> 且不实现，则将引发 <xref:System.Xml.Serialization.IXmlSerializable> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-777">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="9cf18-778">如果指定了内嵌架构，则在加载数据之前，使用内联架构来扩展现有的关系结构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-778">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="9cf18-779">例如，如果存在任何冲突 (例如，使用不同数据类型定义的同一表中的同一列) 会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-779">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="9cf18-780">如果未指定内联架构，根据 XML 文档的结构，将根据需要通过推理扩展关系结构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-780">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="9cf18-781">如果无法通过推理扩展架构以便公开所有数据，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-781">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-782">在 `DataSet` `DataColumn` `DataTable` 序列化的 XML 中转义 xml 元素（如 ( "_" ) ）时，不会将该元素与相应的或关联。</span><span class="sxs-lookup"><span data-stu-id="9cf18-782">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="9cf18-783">`DataSet`本身只是转义 xml 元素名称中的非法 XML 字符，因此只能使用同一个。</span><span class="sxs-lookup"><span data-stu-id="9cf18-783">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="9cf18-784">当转义 XML 元素名称中的法律字符时，将在处理时忽略元素。</span><span class="sxs-lookup"><span data-stu-id="9cf18-784">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="9cf18-785">如果包含的 XML 架构 <xref:System.Data.DataSet> ，则 `targetNamespace` 数据可能不会被读取，并且在调用 <xref:System.Data.DataSet.ReadXml%2A> 以加载 <xref:System.Data.DataSet> 包含元素且无限定命名空间的 xml 时可能会遇到异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-785">If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="9cf18-786">若要读取未限定的元素，请 `elementFormDefault` 在 XML 架构中设置等于 "合格的"，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="9cf18-786">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
 <span data-ttu-id="9cf18-787">继承自类的类 <xref:System.IO.TextReader> 包括 <xref:System.IO.StreamReader> 和 <xref:System.IO.StringReader> 类。</span><span class="sxs-lookup"><span data-stu-id="9cf18-787">Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-788">如果在 <xref:System.Data.DataSet> 同一命名空间中包含相同名称但不同类型的元素的架构，则当您尝试通过指定将架构读取到时，将引发异常 <xref:System.Data.DataSet> <xref:System.Data.DataSet.ReadXml%2A> `XmlReadMode.ReadSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-788">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="9cf18-789">如果使用 .NET Framework 版本1.0，则不会发生此异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-789">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-790">下面的示例首先创建一个简单 <xref:System.Data.DataSet> 的，其中包含一个 <xref:System.Data.DataTable> 、两个列和10个行。</span><span class="sxs-lookup"><span data-stu-id="9cf18-790">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="9cf18-791"><xref:System.Data.DataSet>通过调用方法将架构和数据写入磁盘 <xref:System.Data.DataSet.WriteXml%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-791">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="9cf18-792">将创建第二个 <xref:System.Data.DataSet> ，并 <xref:System.Data.DataSet.ReadXml%2A> 使用方法来填充架构和数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-792">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-793">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-793">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (fileName As String) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : string -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="9cf18-794">作为读取源的文件名（包括路径）。</span><span class="sxs-lookup"><span data-stu-id="9cf18-794">The filename (including the path) from which to read.</span></span></param>
        <summary><span data-ttu-id="9cf18-795">使用指定的文件将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-795">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified file.</span></span></summary>
        <returns><span data-ttu-id="9cf18-796">用于读取数据的 <see langword="XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-796">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-797"><xref:System.Data.DataSet.ReadXml%2A>方法提供了一种方法，用于从 XML 文档只读取数据或将数据和架构读入到 <xref:System.Data.DataSet> 中，而 <xref:System.Data.DataSet.ReadXmlSchema%2A> 方法只读取架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-797">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="9cf18-798">若要读取数据和架构，请使用 `ReadXML` 包含参数的重载之一 `mode` ，并将其值设置为 `ReadSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-798">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="9cf18-799">请注意，对于和方法也是 <xref:System.Data.DataSet.WriteXml%2A> 如此 <xref:System.Data.DataSet.WriteXmlSchema%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-799">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="9cf18-800">若要从编写 XML 数据或同时编写架构和数据 `DataSet` ，请使用 `WriteXml` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-800">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="9cf18-801">若要只写入架构，请使用 `WriteXmlSchema` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-801">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-802"><xref:System.InvalidOperationException>如果在中 `DataRow` 读取或写入的列类型实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> 且不实现，则将引发 <xref:System.Xml.Serialization.IXmlSerializable> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-802">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="9cf18-803">如果指定了内嵌架构，则在加载数据之前，使用内联架构来扩展现有的关系结构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-803">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="9cf18-804">例如，如果存在任何冲突 (例如，使用不同数据类型定义的同一表中的同一列) 会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-804">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="9cf18-805">如果未指定内联架构，根据 XML 文档的结构，将根据需要通过推理扩展关系结构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-805">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="9cf18-806">如果无法通过推理扩展架构以便公开所有数据，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-806">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-807">在 `DataSet` `DataColumn` `DataTable` 序列化的 XML 中转义 xml 元素（如 ( "_" ) ）时，不会将该元素与相应的或关联。</span><span class="sxs-lookup"><span data-stu-id="9cf18-807">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="9cf18-808">`DataSet`本身只是转义 xml 元素名称中的非法 XML 字符，因此只能使用同一个。</span><span class="sxs-lookup"><span data-stu-id="9cf18-808">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="9cf18-809">当转义 XML 元素名称中的法律字符时，将在处理时忽略元素。</span><span class="sxs-lookup"><span data-stu-id="9cf18-809">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="9cf18-810">如果的 XML 架构 <xref:System.Data.DataSet> 包含 `targetNamespace` ，则数据可能不会被读取，并且在调用 <xref:System.Data.DataSet.ReadXml%2A> 以加载 <xref:System.Data.DataSet> 包含元素且无限定命名空间的 xml 时可能会遇到异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-810">If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="9cf18-811">若要读取未限定的元素，请 `elementFormDefault` 在 XML 架构中设置等于 "合格的"，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="9cf18-811">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-812">如果在 <xref:System.Data.DataSet> 同一命名空间中包含相同名称但不同类型的元素的架构，则当您尝试通过指定将架构读取到时，将引发异常 <xref:System.Data.DataSet> <xref:System.Data.DataSet.ReadXml%2A> `XmlReadMode.ReadSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-812">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="9cf18-813">如果使用 .NET Framework 版本1.0，则不会发生此异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-813">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-814">下面的示例首先创建一个简单 <xref:System.Data.DataSet> 的，其中包含一个 <xref:System.Data.DataTable> 、两个列和10个行。</span><span class="sxs-lookup"><span data-stu-id="9cf18-814">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="9cf18-815"><xref:System.Data.DataSet>通过调用方法将架构和数据写入磁盘 <xref:System.Data.DataSet.WriteXml%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-815">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="9cf18-816">将创建第二个 <xref:System.Data.DataSet> ，并 <xref:System.Data.DataSet.ReadXml%2A> 使用方法来填充架构和数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-816">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="9cf18-817"><see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-817"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-818">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-818">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As XmlReader) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.Xml.XmlReader -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9cf18-819">从中读取的 <see cref="T:System.Xml.XmlReader" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-819">The <see cref="T:System.Xml.XmlReader" /> from which to read.</span></span></param>
        <summary><span data-ttu-id="9cf18-820">使用指定的 <see cref="T:System.Xml.XmlReader" /> 将 XML 架构和数据读入 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-820">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.Xml.XmlReader" />.</span></span></summary>
        <returns><span data-ttu-id="9cf18-821">用于读取数据的 <see langword="XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-821">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-822"><xref:System.Data.DataSet.ReadXml%2A>方法提供了一种方法，用于从 XML 文档只读取数据或将数据和架构读入到 <xref:System.Data.DataSet> 中，而 <xref:System.Data.DataSet.ReadXmlSchema%2A> 方法只读取架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-822">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="9cf18-823">若要读取数据和架构，请使用 `ReadXML` 包含参数的重载之一 `mode` ，并将其值设置为 `ReadSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-823">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="9cf18-824">请注意，对于和方法也是 <xref:System.Data.DataSet.WriteXml%2A> 如此 <xref:System.Data.DataSet.WriteXmlSchema%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-824">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="9cf18-825">若要从编写 XML 数据或同时编写架构和数据 `DataSet` ，请使用 `WriteXml` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-825">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="9cf18-826">若要只写入架构，请使用 `WriteXmlSchema` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-826">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-827"><xref:System.InvalidOperationException>如果在中 `DataRow` 读取或写入的列类型实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> 且不实现，则将引发 <xref:System.Xml.Serialization.IXmlSerializable> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-827">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="9cf18-828">如果指定了内嵌架构，则在加载数据之前，使用内联架构来扩展现有的关系结构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-828">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="9cf18-829">例如，如果存在任何冲突 (例如，使用不同数据类型定义的同一表中的同一列) 会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-829">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="9cf18-830">如果未指定内联架构，根据 XML 文档的结构，将根据需要通过推理扩展关系结构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-830">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="9cf18-831">如果无法通过推理扩展架构以便公开所有数据，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-831">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-832">在 `DataSet` `DataColumn` `DataTable` 序列化的 XML 中转义 xml 元素（如 ( "_" ) ）时，不会将该元素与相应的或关联。</span><span class="sxs-lookup"><span data-stu-id="9cf18-832">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="9cf18-833">`DataSet`本身只是转义 xml 元素名称中的非法 XML 字符，因此只能使用同一个。</span><span class="sxs-lookup"><span data-stu-id="9cf18-833">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="9cf18-834">当转义 XML 元素名称中的法律字符时，将在处理时忽略元素。</span><span class="sxs-lookup"><span data-stu-id="9cf18-834">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="9cf18-835">如果的 XML 架构 <xref:System.Data.DataSet> 包含 `targetNamespace` ，则数据可能不会被读取，并且在调用 <xref:System.Data.DataSet.ReadXml%2A> 以加载 <xref:System.Data.DataSet> 包含元素且无限定命名空间的 xml 时可能会遇到异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-835">If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="9cf18-836">若要读取未限定的元素，请 `elementFormDefault` 在 XML 架构中设置等于 "合格的"，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="9cf18-836">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
 <span data-ttu-id="9cf18-837"><xref:System.Xml.XmlTextReader?displayProperty=nameWithType> 从 <xref:System.Xml.XmlReader> 继承。</span><span class="sxs-lookup"><span data-stu-id="9cf18-837"><xref:System.Xml.XmlTextReader?displayProperty=nameWithType> inherits from <xref:System.Xml.XmlReader>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-838">如果在 <xref:System.Data.DataSet> 同一命名空间中包含相同名称但不同类型的元素的架构，则当您尝试通过指定将架构读取到时，将引发异常 <xref:System.Data.DataSet> <xref:System.Data.DataSet.ReadXml%2A> `XmlReadMode.ReadSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-838">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="9cf18-839">如果使用 .NET Framework 版本1.0，则不会发生此异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-839">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-840">下面的示例首先创建一个简单 <xref:System.Data.DataSet> 的，其中包含一个 <xref:System.Data.DataTable> 、两个列和10个行。</span><span class="sxs-lookup"><span data-stu-id="9cf18-840">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="9cf18-841"><xref:System.Data.DataSet>通过调用方法将架构和数据写入磁盘 <xref:System.Data.DataSet.WriteXml%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-841">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="9cf18-842">将创建第二个 <xref:System.Data.DataSet> ，并 <xref:System.Data.DataSet.ReadXml%2A> 使用方法来填充架构和数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-842">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-843">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-843">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.Stream stream, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.Stream stream, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (stream As Stream, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::Stream ^ stream, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.Stream * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (stream, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="9cf18-844">从中读取的 <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-844">The <see cref="T:System.IO.Stream" /> from which to read.</span></span></param>
        <param name="mode"><span data-ttu-id="9cf18-845"><see cref="T:System.Data.XmlReadMode" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="9cf18-845">One of the <see cref="T:System.Data.XmlReadMode" /> values.</span></span></param>
        <summary><span data-ttu-id="9cf18-846">使用指定的 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.IO.Stream" /> 将 XML 架构和数据读入 <see cref="T:System.Data.XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-846">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.Stream" /> and <see cref="T:System.Data.XmlReadMode" />.</span></span></summary>
        <returns><span data-ttu-id="9cf18-847">用于读取数据的 <see langword="XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-847">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-848"><xref:System.Data.DataSet.ReadXml%2A>方法提供了一种方法，用于从 XML 文档只读取数据或将数据和架构读入到 <xref:System.Data.DataSet> 中，而 <xref:System.Data.DataSet.ReadXmlSchema%2A> 方法只读取架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-848">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="9cf18-849">若要读取数据和架构，请使用 `ReadXML` 包含参数的重载之一 `mode` ，并将其值设置为 `ReadSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-849">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="9cf18-850">对于和方法也是如此 <xref:System.Data.DataSet.WriteXml%2A> <xref:System.Data.DataSet.WriteXmlSchema%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-850">The same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="9cf18-851">若要从编写 XML 数据或同时编写架构和数据 `DataSet` ，请使用 `WriteXml` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-851">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="9cf18-852">若要只写入架构，请使用 `WriteXmlSchema` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-852">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-853">当使用 <xref:System.Data.DataSet.ReadXml%2A> 并且将设置 <xref:System.Data.XmlReadMode> 为时 `Diffgram` ，目标和原始内容的内容 `DataSet` `DataSet` 可能会因生成和处理 diffgram 的方式而有所不同。</span><span class="sxs-lookup"><span data-stu-id="9cf18-853">When you use <xref:System.Data.DataSet.ReadXml%2A> and you set <xref:System.Data.XmlReadMode> to `Diffgram`, the content of the target `DataSet` and the original `DataSet` may differ because of how the diffgram is generated and processed.</span></span> <span data-ttu-id="9cf18-854">有关 diffgram 的详细信息，请参阅 [diffgram](/dotnet/framework/data/adonet/dataset-datatable-dataview/diffgrams)。</span><span class="sxs-lookup"><span data-stu-id="9cf18-854">For more information on diffgrams, see [DiffGrams](/dotnet/framework/data/adonet/dataset-datatable-dataview/diffgrams).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-855"><xref:System.InvalidOperationException>如果在中 `DataRow` 读取或写入的列类型实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> 且不实现，则将引发 <xref:System.Xml.Serialization.IXmlSerializable> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-855">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="9cf18-856">如果指定了内嵌架构，则在加载数据之前，使用内联架构来扩展现有的关系结构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-856">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="9cf18-857">例如，如果存在任何冲突 (例如，使用不同数据类型定义的同一表中的同一列) 会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-857">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="9cf18-858">如果未指定内联架构，根据 XML 文档的结构，将根据需要通过推理扩展关系结构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-858">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="9cf18-859">如果无法通过推理扩展架构以便公开所有数据，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-859">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-860">在 `DataSet` `DataColumn` `DataTable` 序列化的 XML 中转义 xml 元素（如 ( "_" ) ）时，不会将该元素与相应的或关联。</span><span class="sxs-lookup"><span data-stu-id="9cf18-860">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="9cf18-861">`DataSet`本身只是转义 xml 元素名称中的非法 XML 字符，因此只能使用同一个。</span><span class="sxs-lookup"><span data-stu-id="9cf18-861">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="9cf18-862">当转义 XML 元素名称中的法律字符时，将在处理时忽略元素。</span><span class="sxs-lookup"><span data-stu-id="9cf18-862">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="9cf18-863">如果包含的 XML 架构 <xref:System.Data.DataSet> ，则 `targetNamespace` 数据可能不会被读取，并且在调用 <xref:System.Data.DataSet.ReadXml%2A> 以加载 <xref:System.Data.DataSet> 包含元素且无限定命名空间的 xml 时可能会遇到异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-863">If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="9cf18-864">若要读取未限定的元素，请 `elementFormDefault` 在 XML 架构中设置等于 "合格的"，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="9cf18-864">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-865">如果在 <xref:System.Data.DataSet> 同一命名空间中包含相同名称但不同类型的元素的架构，则当您尝试通过指定将架构读取到时，将引发异常 <xref:System.Data.DataSet> <xref:System.Data.DataSet.ReadXml%2A> `XmlReadMode.ReadSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-865">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="9cf18-866">如果使用 .NET Framework 版本1.0，则不会发生此异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-866">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-867">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-867">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.IO.TextReader reader, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.IO.TextReader reader, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As TextReader, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::IO::TextReader ^ reader, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.IO.TextReader * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (reader, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9cf18-868">从中读取的 <see cref="T:System.IO.TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-868">The <see cref="T:System.IO.TextReader" /> from which to read.</span></span></param>
        <param name="mode"><span data-ttu-id="9cf18-869"><see cref="T:System.Data.XmlReadMode" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="9cf18-869">One of the <see cref="T:System.Data.XmlReadMode" /> values.</span></span></param>
        <summary><span data-ttu-id="9cf18-870">使用指定的 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.IO.TextReader" /> 将 XML 架构和数据读入 <see cref="T:System.Data.XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-870">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Data.XmlReadMode" />.</span></span></summary>
        <returns><span data-ttu-id="9cf18-871">用于读取数据的 <see langword="XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-871">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-872"><xref:System.Data.DataSet.ReadXml%2A>方法提供了一种方法，用于从 XML 文档只读取数据或将数据和架构读入到 <xref:System.Data.DataSet> 中，而 <xref:System.Data.DataSet.ReadXmlSchema%2A> 方法只读取架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-872">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="9cf18-873">若要读取数据和架构，请使用 `ReadXML` 包含参数的重载之一 `mode` ，并将其值设置为 `ReadSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-873">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="9cf18-874">请注意，对于和方法也是 <xref:System.Data.DataSet.WriteXml%2A> 如此 <xref:System.Data.DataSet.WriteXmlSchema%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-874">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="9cf18-875">若要从编写 XML 数据或同时编写架构和数据 `DataSet` ，请使用 `WriteXml` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-875">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="9cf18-876">若要只写入架构，请使用 `WriteXmlSchema` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-876">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-877"><xref:System.InvalidOperationException>如果在中 `DataRow` 读取或写入的列类型实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> 且不实现，则将引发 <xref:System.Xml.Serialization.IXmlSerializable> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-877">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="9cf18-878">如果指定了内嵌架构，则在加载数据之前，使用内联架构来扩展现有的关系结构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-878">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="9cf18-879">例如，如果存在任何冲突 (例如，使用不同数据类型定义的同一表中的同一列) 会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-879">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="9cf18-880">如果未指定内联架构，根据 XML 文档的结构，将根据需要通过推理扩展关系结构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-880">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="9cf18-881">如果无法通过推理扩展架构以便公开所有数据，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-881">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-882">在 `DataSet` `DataColumn` `DataTable` 序列化的 XML 中转义 xml 元素（如 ( "_" ) ）时，不会将该元素与相应的或关联。</span><span class="sxs-lookup"><span data-stu-id="9cf18-882">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="9cf18-883">`DataSet`本身只是转义 xml 元素名称中的非法 XML 字符，因此只能使用同一个。</span><span class="sxs-lookup"><span data-stu-id="9cf18-883">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="9cf18-884">当转义 XML 元素名称中的法律字符时，将在处理时忽略元素。</span><span class="sxs-lookup"><span data-stu-id="9cf18-884">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="9cf18-885">如果包含的 XML 架构 <xref:System.Data.DataSet> ，则 `targetNamespace` 数据可能不会被读取，并且在调用 <xref:System.Data.DataSet.ReadXml%2A> 以加载 <xref:System.Data.DataSet> 包含元素且无限定命名空间的 xml 时可能会遇到异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-885">If the XML Schema for a <xref:System.Data.DataSet> includes `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="9cf18-886">若要读取未限定的元素，请 `elementFormDefault` 在 XML 架构中设置等于 "合格的"，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="9cf18-886">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-887">如果在 <xref:System.Data.DataSet> 同一命名空间中包含相同名称但不同类型的元素的架构，则当您尝试通过指定将架构读取到时，将引发异常 <xref:System.Data.DataSet> <xref:System.Data.DataSet.ReadXml%2A> `XmlReadMode.ReadSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-887">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="9cf18-888">如果使用 .NET Framework 版本1.0，则不会发生此异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-888">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-889">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-889">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (string fileName, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(string fileName, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (fileName As String, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::String ^ fileName, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : string * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (fileName, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="9cf18-890">作为读取源的文件名（包括路径）。</span><span class="sxs-lookup"><span data-stu-id="9cf18-890">The filename (including the path) from which to read.</span></span></param>
        <param name="mode"><span data-ttu-id="9cf18-891"><see cref="T:System.Data.XmlReadMode" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="9cf18-891">One of the <see cref="T:System.Data.XmlReadMode" /> values.</span></span></param>
        <summary><span data-ttu-id="9cf18-892">使用指定的文件和 <see cref="T:System.Data.DataSet" /> 将 XML 架构和数据读入 <see cref="T:System.Data.XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-892">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified file and <see cref="T:System.Data.XmlReadMode" />.</span></span></summary>
        <returns><span data-ttu-id="9cf18-893">用于读取数据的 <see langword="XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-893">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-894"><xref:System.Data.DataSet.ReadXml%2A>方法提供了一种方法，用于从 XML 文档只读取数据或将数据和架构读入到 <xref:System.Data.DataSet> 中，而 <xref:System.Data.DataSet.ReadXmlSchema%2A> 方法只读取架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-894">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="9cf18-895">若要读取数据和架构，请使用 `ReadXML` 包含参数的重载之一 `mode` ，并将其值设置为 `ReadSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-895">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="9cf18-896">请注意，对于和方法也是 <xref:System.Data.DataSet.WriteXml%2A> 如此 <xref:System.Data.DataSet.WriteXmlSchema%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-896">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="9cf18-897">若要从编写 XML 数据或同时编写架构和数据 `DataSet` ，请使用 `WriteXml` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-897">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="9cf18-898">若要只写入架构，请使用 `WriteXmlSchema` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-898">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-899"><xref:System.InvalidOperationException>如果在中 `DataRow` 读取或写入的列类型实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> 且不实现，则将引发 <xref:System.Xml.Serialization.IXmlSerializable> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-899">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="9cf18-900">如果指定了内嵌架构，则在加载数据之前，使用内联架构来扩展现有的关系结构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-900">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="9cf18-901">例如，如果存在任何冲突 (例如，使用不同数据类型定义的同一表中的同一列) 会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-901">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="9cf18-902">如果未指定内联架构，根据 XML 文档的结构，将根据需要通过推理扩展关系结构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-902">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="9cf18-903">如果无法通过推理扩展架构以便公开所有数据，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-903">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-904">在 `DataSet` `DataColumn` `DataTable` 序列化的 XML 中转义 xml 元素（如 ( "_" ) ）时，不会将该元素与相应的或关联。</span><span class="sxs-lookup"><span data-stu-id="9cf18-904">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="9cf18-905">`DataSet`本身只是转义 xml 元素名称中的非法 XML 字符，因此只能使用同一个。</span><span class="sxs-lookup"><span data-stu-id="9cf18-905">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="9cf18-906">当转义 XML 元素名称中的法律字符时，将在处理时忽略元素。</span><span class="sxs-lookup"><span data-stu-id="9cf18-906">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="9cf18-907">如果的 XML 架构 <xref:System.Data.DataSet> 包含 `targetNamespace` ，则数据可能不会被读取，并且在调用 <xref:System.Data.DataSet.ReadXml%2A> 以加载 <xref:System.Data.DataSet> 包含元素且无限定命名空间的 xml 时可能会遇到异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-907">If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="9cf18-908">若要读取未限定的元素，请 `elementFormDefault` 在 XML 架构中设置等于 "合格的"，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="9cf18-908">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-909">如果在 <xref:System.Data.DataSet> 同一命名空间中包含相同名称但不同类型的元素的架构，则当您尝试通过指定将架构读取到时，将引发异常 <xref:System.Data.DataSet> <xref:System.Data.DataSet.ReadXml%2A> `XmlReadMode.ReadSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-909">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="9cf18-910">如果使用 .NET Framework 版本1.0，则不会发生此异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-910">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="9cf18-911"><see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-911"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-912">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-912">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXml">
      <MemberSignature Language="C#" Value="public System.Data.XmlReadMode ReadXml (System.Xml.XmlReader reader, System.Data.XmlReadMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.XmlReadMode ReadXml(class System.Xml.XmlReader reader, valuetype System.Data.XmlReadMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadXml (reader As XmlReader, mode As XmlReadMode) As XmlReadMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::XmlReadMode ReadXml(System::Xml::XmlReader ^ reader, System::Data::XmlReadMode mode);" />
      <MemberSignature Language="F#" Value="member this.ReadXml : System.Xml.XmlReader * System.Data.XmlReadMode -&gt; System.Data.XmlReadMode" Usage="dataSet.ReadXml (reader, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.XmlReadMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="mode" Type="System.Data.XmlReadMode" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9cf18-913">从中读取的 <see cref="T:System.Xml.XmlReader" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-913">The <see cref="T:System.Xml.XmlReader" /> from which to read.</span></span></param>
        <param name="mode"><span data-ttu-id="9cf18-914"><see cref="T:System.Data.XmlReadMode" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="9cf18-914">One of the <see cref="T:System.Data.XmlReadMode" /> values.</span></span></param>
        <summary><span data-ttu-id="9cf18-915">使用指定的 <see cref="T:System.Data.DataSet" /> 和 <see cref="T:System.Xml.XmlReader" /> 将 XML 架构和数据读入 <see cref="T:System.Data.XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-915">Reads XML schema and data into the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.Xml.XmlReader" /> and <see cref="T:System.Data.XmlReadMode" />.</span></span></summary>
        <returns><span data-ttu-id="9cf18-916">用于读取数据的 <see langword="XmlReadMode" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-916">The <see langword="XmlReadMode" /> used to read the data.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-917"><xref:System.Data.DataSet.ReadXml%2A>方法提供了一种方法，用于从 XML 文档只读取数据或将数据和架构读入到 <xref:System.Data.DataSet> 中，而 <xref:System.Data.DataSet.ReadXmlSchema%2A> 方法只读取架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-917">The <xref:System.Data.DataSet.ReadXml%2A> method provides a way to read either data only, or both data and schema into a <xref:System.Data.DataSet> from an XML document, whereas the <xref:System.Data.DataSet.ReadXmlSchema%2A> method reads only the schema.</span></span> <span data-ttu-id="9cf18-918">若要读取数据和架构，请使用 `ReadXML` 包含参数的重载之一 `mode` ，并将其值设置为 `ReadSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-918">To read both data and schema, use one of the `ReadXML` overloads that includes the `mode` parameter, and set its value to `ReadSchema`.</span></span>  
  
 <span data-ttu-id="9cf18-919">请注意，对于和方法也是 <xref:System.Data.DataSet.WriteXml%2A> 如此 <xref:System.Data.DataSet.WriteXmlSchema%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-919">Note that the same is true for the <xref:System.Data.DataSet.WriteXml%2A> and <xref:System.Data.DataSet.WriteXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="9cf18-920">若要从编写 XML 数据或同时编写架构和数据 `DataSet` ，请使用 `WriteXml` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-920">To write XML data, or both schema and data from the `DataSet`, use the `WriteXml` method.</span></span> <span data-ttu-id="9cf18-921">若要只写入架构，请使用 `WriteXmlSchema` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-921">To write just the schema, use the `WriteXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-922"><xref:System.InvalidOperationException>如果在中 `DataRow` 读取或写入的列类型实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> 且不实现，则将引发 <xref:System.Xml.Serialization.IXmlSerializable> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-922">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 <span data-ttu-id="9cf18-923">如果指定了内嵌架构，则在加载数据之前，使用内联架构来扩展现有的关系结构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-923">If an in-line schema is specified, the in-line schema is used to extend the existing relational structure prior to loading the data.</span></span> <span data-ttu-id="9cf18-924">例如，如果存在任何冲突 (例如，使用不同数据类型定义的同一表中的同一列) 会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-924">If there are any conflicts (for example, the same column in the same table defined with different data types) an exception is raised.</span></span>  
  
 <span data-ttu-id="9cf18-925">如果未指定内联架构，根据 XML 文档的结构，将根据需要通过推理扩展关系结构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-925">If no in-line schema is specified, the relational structure is extended through inference, as necessary, according to the structure of the XML document.</span></span> <span data-ttu-id="9cf18-926">如果无法通过推理扩展架构以便公开所有数据，则会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-926">If the schema cannot be extended through inference in order to expose all data, an exception is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-927">在 `DataSet` `DataColumn` `DataTable` 序列化的 XML 中转义 xml 元素（如 ( "_" ) ）时，不会将该元素与相应的或关联。</span><span class="sxs-lookup"><span data-stu-id="9cf18-927">The `DataSet` does not associate an XML element with its corresponding `DataColumn` or `DataTable` when legal XML characters like ("_") are escaped in the serialized XML.</span></span> <span data-ttu-id="9cf18-928">`DataSet`本身只是转义 xml 元素名称中的非法 XML 字符，因此只能使用同一个。</span><span class="sxs-lookup"><span data-stu-id="9cf18-928">The `DataSet` itself only escapes illegal XML characters in XML element names and hence can only consume the same.</span></span> <span data-ttu-id="9cf18-929">当转义 XML 元素名称中的法律字符时，将在处理时忽略元素。</span><span class="sxs-lookup"><span data-stu-id="9cf18-929">When legal characters in XML element name are escaped, the element is ignored while processing.</span></span>  
  
 <span data-ttu-id="9cf18-930">如果的 XML 架构 <xref:System.Data.DataSet> 包含 `targetNamespace` ，则数据可能不会被读取，并且在调用 <xref:System.Data.DataSet.ReadXml%2A> 以加载 <xref:System.Data.DataSet> 包含元素且无限定命名空间的 xml 时可能会遇到异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-930">If the XML Schema for a <xref:System.Data.DataSet> includes a `targetNamespace`, data may not be read, and you may encounter exceptions when calling <xref:System.Data.DataSet.ReadXml%2A> to load the <xref:System.Data.DataSet> with XML that contains elements with no qualifying namespace.</span></span> <span data-ttu-id="9cf18-931">若要读取未限定的元素，请 `elementFormDefault` 在 XML 架构中设置等于 "合格的"，如下面的示例所示。</span><span class="sxs-lookup"><span data-stu-id="9cf18-931">To read unqualified elements, set `elementFormDefault` equal to "qualified" in your XML Schema as the following example demonstrates.</span></span>  
  
```  
<xsd:schema id="MyDataSet"   
   elementFormDefault="qualified"   
   targetNamespace="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns="http://www.tempuri.org/MyDataSet.xsd"   
   xmlns:xsd="http://www.w3.org/2001/XMLSchema"   
   xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">  
</xsd:schema>  
```  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-932">如果在 <xref:System.Data.DataSet> 同一命名空间中包含相同名称但不同类型的元素的架构，则当您尝试通过指定将架构读取到时，将引发异常 <xref:System.Data.DataSet> <xref:System.Data.DataSet.ReadXml%2A> `XmlReadMode.ReadSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-932">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXml%2A> by specifying `XmlReadMode.ReadSchema`.</span></span> <span data-ttu-id="9cf18-933">如果使用 .NET Framework 版本1.0，则不会发生此异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-933">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-934">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-934">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9cf18-935">将 XML 架构读入 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-935">Reads an XML schema into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-936">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-936">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (stream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.IO.Stream -&gt; unit" Usage="dataSet.ReadXmlSchema stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="9cf18-937">从中读取的 <see cref="T:System.IO.Stream" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-937">The <see cref="T:System.IO.Stream" /> from which to read.</span></span></param>
        <summary><span data-ttu-id="9cf18-938">从指定的 <see cref="T:System.IO.Stream" /> 中将 XML 架构读入 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-938">Reads the XML schema from the specified <see cref="T:System.IO.Stream" /> into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-939">使用 <xref:System.Data.DataSet.ReadXmlSchema%2A> 方法创建的架构 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-939">Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-940">此架构包括表、关系和约束定义。</span><span class="sxs-lookup"><span data-stu-id="9cf18-940">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="9cf18-941">若要将架构写入 XML 文档，请使用 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-941">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="9cf18-942">使用 XSD 标准编写 XML 架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-942">The XML schema is written using the XSD standard.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-943">如果 msdata： DataType 和 xs： type 类型不匹配，则可能发生数据损坏。</span><span class="sxs-lookup"><span data-stu-id="9cf18-943">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="9cf18-944">不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-944">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="9cf18-945"><xref:System.Data.DataSet.ReadXmlSchema%2A>通常在调用 <xref:System.Data.DataSet.ReadXml%2A> 用于填充的方法之前调用方法 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-945">The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="9cf18-946">派生自类的类 <xref:System.IO.Stream> 包括 <xref:System.IO.BufferedStream> 、 <xref:System.IO.FileStream> 、 <xref:System.IO.MemoryStream> 和 <xref:System.Net.Sockets.NetworkStream> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-946">Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-947">如果在 <xref:System.Data.DataSet> 同一命名空间中包含同名但类型不同的元素的架构，则在您尝试使用将架构读入时，将引发异常 <xref:System.Data.DataSet> <xref:System.Data.DataSet.ReadXmlSchema%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-947">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>.</span></span> <span data-ttu-id="9cf18-948">如果使用 .NET Framework 版本1.0，则不会发生此异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-948">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-949">下面的示例创建一个 <xref:System.IO.FileStream> 对象来读取 XML 架构，并 <xref:System.Data.DataSet.ReadXmlSchema%2A> 使用该对象调用方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-949">The following example creates a <xref:System.IO.FileStream> object to read an XML schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-950">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-950">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.IO.TextReader -&gt; unit" Usage="dataSet.ReadXmlSchema reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9cf18-951">从中读取的 <see cref="T:System.IO.TextReader" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-951">The <see cref="T:System.IO.TextReader" /> from which to read.</span></span></param>
        <summary><span data-ttu-id="9cf18-952">从指定的 <see cref="T:System.IO.TextReader" /> 中将 XML 架构读入 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-952">Reads the XML schema from the specified <see cref="T:System.IO.TextReader" /> into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-953">使用 <xref:System.Data.DataSet.ReadXmlSchema%2A> 方法创建的架构 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-953">Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-954">此架构包括表、关系和约束定义。</span><span class="sxs-lookup"><span data-stu-id="9cf18-954">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="9cf18-955">若要将架构写入 XML 文档，请使用 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-955">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="9cf18-956">使用 XSD 标准编写 XML 架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-956">The XML schema is written using the XSD standard.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-957">如果 msdata： DataType 和 xs： type 类型不匹配，则可能发生数据损坏。</span><span class="sxs-lookup"><span data-stu-id="9cf18-957">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="9cf18-958">不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-958">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="9cf18-959"><xref:System.Data.DataSet.ReadXmlSchema%2A>通常在调用 <xref:System.Data.DataSet.ReadXml%2A> 用于填充的方法之前调用方法 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-959">The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="9cf18-960">继承自类的类 <xref:System.IO.TextReader> 包括 <xref:System.IO.StreamReader> 和 <xref:System.IO.StringReader> 类。</span><span class="sxs-lookup"><span data-stu-id="9cf18-960">Classes that inherit from the <xref:System.IO.TextReader> class include the <xref:System.IO.StreamReader> and <xref:System.IO.StringReader> classes.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-961">如果在 <xref:System.Data.DataSet> 同一命名空间中包含同名但类型不同的元素的架构，则在您尝试使用将架构读入时，将引发异常 <xref:System.Data.DataSet> <xref:System.Data.DataSet.ReadXmlSchema%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-961">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>.</span></span> <span data-ttu-id="9cf18-962">如果使用 .NET Framework 版本1.0，则不会发生此异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-962">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-963">下面的示例创建一个 <xref:System.IO.StreamReader> 对象来读取架构，并 <xref:System.Data.DataSet.ReadXmlSchema%2A> 使用该对象调用方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-963">The following example creates a <xref:System.IO.StreamReader> object to read a schema with, and invokes the <xref:System.Data.DataSet.ReadXmlSchema%2A> method with the object.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-964">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-964">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : string -&gt; unit" Usage="dataSet.ReadXmlSchema fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="9cf18-965">从中读取的文件的名称（包括路径）。</span><span class="sxs-lookup"><span data-stu-id="9cf18-965">The file name (including the path) from which to read.</span></span></param>
        <summary><span data-ttu-id="9cf18-966">从指定的文件中将 XML 架构读入 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-966">Reads the XML schema from the specified file into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-967">使用 <xref:System.Data.DataSet.ReadXmlSchema%2A> 方法创建的架构 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-967">Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-968">此架构包括表、关系和约束定义。</span><span class="sxs-lookup"><span data-stu-id="9cf18-968">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="9cf18-969">若要将架构写入 XML 文档，请使用 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-969">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="9cf18-970">使用 XSD 标准编写 XML 架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-970">The XML schema is written using the XSD standard.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-971">如果 msdata： DataType 和 xs： type 类型不匹配，则可能发生数据损坏。</span><span class="sxs-lookup"><span data-stu-id="9cf18-971">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="9cf18-972">不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-972">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="9cf18-973"><xref:System.Data.DataSet.ReadXmlSchema%2A>通常在调用 <xref:System.Data.DataSet.ReadXml%2A> 用于填充的方法之前调用方法 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-973">The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-974">如果 <xref:System.Data.DataSet> 的架构在相同的命名空间中包含名称相同但类型不同的元素，则当您尝试使用 <xref:System.Data.DataSet> 将架构读入 <xref:System.Data.DataSet.ReadXmlSchema%2A> 中时将引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-974">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>.</span></span> <span data-ttu-id="9cf18-975">如果使用 .NET Framework 版本1.0，则不会发生此异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-975">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="9cf18-976"><see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-976"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-977">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-977">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSchema">
      <MemberSignature Language="C#" Value="public void ReadXmlSchema (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadXmlSchema(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadXmlSchema (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadXmlSchema(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.ReadXmlSchema : System.Xml.XmlReader -&gt; unit" Usage="dataSet.ReadXmlSchema reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9cf18-978">从中读取的 <see cref="T:System.Xml.XmlReader" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-978">The <see cref="T:System.Xml.XmlReader" /> from which to read.</span></span></param>
        <summary><span data-ttu-id="9cf18-979">从指定的 <see cref="T:System.Xml.XmlReader" /> 中将 XML 架构读入 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-979">Reads the XML schema from the specified <see cref="T:System.Xml.XmlReader" /> into the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-980">使用 <xref:System.Data.DataSet.ReadXmlSchema%2A> 方法创建的架构 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-980">Use the <xref:System.Data.DataSet.ReadXmlSchema%2A> method to create the schema for a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="9cf18-981">此架构包括表、关系和约束定义。</span><span class="sxs-lookup"><span data-stu-id="9cf18-981">The schema includes table, relation, and constraint definitions.</span></span>  
  
 <span data-ttu-id="9cf18-982">使用 XSD 标准编写 XML 架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-982">The XML schema is written using the XSD standard.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-983">如果 msdata： DataType 和 xs： type 类型不匹配，则可能发生数据损坏。</span><span class="sxs-lookup"><span data-stu-id="9cf18-983">Data corruption can occur if the msdata:DataType and the xs:type types do not match.</span></span> <span data-ttu-id="9cf18-984">不会引发异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-984">No exception will be thrown.</span></span>  
  
 <span data-ttu-id="9cf18-985"><xref:System.Data.DataSet.ReadXmlSchema%2A>通常在调用 <xref:System.Data.DataSet.ReadXml%2A> 用于填充的方法之前调用方法 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-985">The <xref:System.Data.DataSet.ReadXmlSchema%2A> method is generally invoked before invoking the <xref:System.Data.DataSet.ReadXml%2A> method which is used to fill the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="9cf18-986"><xref:System.Xml.XmlReader?displayProperty=nameWithType>类是抽象类。</span><span class="sxs-lookup"><span data-stu-id="9cf18-986">The <xref:System.Xml.XmlReader?displayProperty=nameWithType> class is abstract.</span></span> <span data-ttu-id="9cf18-987">继承自的类 `XmlReader` 是 <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> 类。</span><span class="sxs-lookup"><span data-stu-id="9cf18-987">A class that inherits from the `XmlReader` is the <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-988">如果在 <xref:System.Data.DataSet> 同一命名空间中包含同名但类型不同的元素的架构，则在您尝试使用将架构读入时，将引发异常 <xref:System.Data.DataSet> <xref:System.Data.DataSet.ReadXmlSchema%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-988">If the schema for your <xref:System.Data.DataSet> contains elements of the same name, but different type, in the same namespace, an exception is be thrown when you attempt to read the schema into the <xref:System.Data.DataSet> with <xref:System.Data.DataSet.ReadXmlSchema%2A>.</span></span> <span data-ttu-id="9cf18-989">如果使用 .NET Framework 版本1.0，则不会发生此异常。</span><span class="sxs-lookup"><span data-stu-id="9cf18-989">This exception does not occur if you are using .NET Framework version 1.0.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-990">下面的示例创建一个新的 <xref:System.Data.DataSet> 和一个 <xref:System.IO.FileStream?displayProperty=nameWithType> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-990">The following example creates a new <xref:System.Data.DataSet> and <xref:System.IO.FileStream?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="9cf18-991"><xref:System.IO.FileStream>使用文件路径和文件名创建的对象用于创建一个 <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> 作为参数传递给 <xref:System.Data.DataSet.ReadXmlSchema%2A> 方法的。</span><span class="sxs-lookup"><span data-stu-id="9cf18-991">The <xref:System.IO.FileStream> object, created with a file path and file name, is used to create an <xref:System.Xml.XmlTextReader?displayProperty=nameWithType> that is passed as an argument to the <xref:System.Data.DataSet.ReadXmlSchema%2A> method.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-992">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-992">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ReadXmlSerializable">
      <MemberSignature Language="C#" Value="protected virtual void ReadXmlSerializable (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ReadXmlSerializable(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ReadXmlSerializable (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ReadXmlSerializable(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="abstract member ReadXmlSerializable : System.Xml.XmlReader -&gt; unit&#xA;override this.ReadXmlSerializable : System.Xml.XmlReader -&gt; unit" Usage="dataSet.ReadXmlSerializable reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9cf18-993">指定的 XML 读取器。</span><span class="sxs-lookup"><span data-stu-id="9cf18-993">The specified XML reader.</span></span></param>
        <summary><span data-ttu-id="9cf18-994">忽略特性并返回一个空的数据集。</span><span class="sxs-lookup"><span data-stu-id="9cf18-994">Ignores attributes and returns an empty DataSet.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectChanges">
      <MemberSignature Language="C#" Value="public virtual void RejectChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RejectChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.RejectChanges" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RejectChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RejectChanges();" />
      <MemberSignature Language="F#" Value="abstract member RejectChanges : unit -&gt; unit&#xA;override this.RejectChanges : unit -&gt; unit" Usage="dataSet.RejectChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9cf18-995">回滚自创建 <see cref="T:System.Data.DataSet" /> 以来或上次调用 <see cref="M:System.Data.DataSet.AcceptChanges" /> 以来对其进行的所有更改。</span><span class="sxs-lookup"><span data-stu-id="9cf18-995">Rolls back all the changes made to the <see cref="T:System.Data.DataSet" /> since it was created, or since the last time <see cref="M:System.Data.DataSet.AcceptChanges" /> was called.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-996">调用以对所 <xref:System.Data.DataSet.RejectChanges%2A?displayProperty=nameWithType> <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> 包含的所有对象调用方法 <xref:System.Data.DataTable> <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-996">Invoke the <xref:System.Data.DataSet.RejectChanges%2A?displayProperty=nameWithType> to call the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> method on all <xref:System.Data.DataTable> objects contained by the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="9cf18-997"><xref:System.Data.DataRow> 中包含的对象 <xref:System.Data.DataSet> 可通过调用方法设置为编辑模式 <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-997"><xref:System.Data.DataRow> objects contained by the <xref:System.Data.DataSet> can each be set into edit mode by invoking the <xref:System.Data.DataRow.BeginEdit%2A?displayProperty=nameWithType> method.</span></span> <span data-ttu-id="9cf18-998">调用方法后 <xref:System.Data.DataRow.EndEdit%2A?displayProperty=nameWithType> ，可以通过 <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> 在 <xref:System.Data.DataTable> 对象所属的上调用来拒绝更改 <xref:System.Data.DataRow> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-998">After invoking the <xref:System.Data.DataRow.EndEdit%2A?displayProperty=nameWithType> method, changes can be rejected by calling the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> on the <xref:System.Data.DataTable> to which the <xref:System.Data.DataRow> objects belong.</span></span>  
  
 <span data-ttu-id="9cf18-999"><xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType>调用方法时，仍处于编辑模式的任何行都将取消其编辑。</span><span class="sxs-lookup"><span data-stu-id="9cf18-999">When the <xref:System.Data.DataTable.RejectChanges%2A?displayProperty=nameWithType> method is called, any rows still in edit-mode cancel their edits.</span></span> <span data-ttu-id="9cf18-1000">删除新行。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1000">New rows are removed.</span></span> <span data-ttu-id="9cf18-1001">修改和删除的行返回到其原始状态 (`DataRowState.Unchanged`) 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1001">Modified and deleted rows return back to their original state (`DataRowState.Unchanged`).</span></span>  
  
 <span data-ttu-id="9cf18-1002">AcceptChanges 和 RejectChanges 仅适用于 <xref:System.Data.DataRow> 、、、 `Add` `Remove` `Delete` 和)  (的相关更改 `Modify` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1002">AcceptChanges and RejectChanges only apply to <xref:System.Data.DataRow> related changes (that is, `Add`, `Remove`, `Delete`, and `Modify`).</span></span> <span data-ttu-id="9cf18-1003">它们不适用于架构或结构更改。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1003">They are not applicable to schema or structural changes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-1004">下面的示例演示一个派生自类的类 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1004">The following example shows a class derived from the <xref:System.Data.DataSet> class.</span></span> <span data-ttu-id="9cf18-1005"><xref:System.Data.DataSet.RejectChanges%2A>从函数内部调用事件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1005">The <xref:System.Data.DataSet.RejectChanges%2A> event is invoked from within a function.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.RejectChanges Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.RejectChanges Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.RejectChanges Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.RejectChanges Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1006">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1006">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Relations">
      <MemberSignature Language="C#" Value="public System.Data.DataRelationCollection Relations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataRelationCollection Relations" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Relations" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Relations As DataRelationCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataRelationCollection ^ Relations { System::Data::DataRelationCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Relations : System.Data.DataRelationCollection" Usage="System.Data.DataSet.Relations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Data.DataSysDescription("DataSetRelationsDescr")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Data.DataSysDescription("DataSetRelationsDescr")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataRelationCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9cf18-1007">获取用于将表链接起来并允许从父表浏览到子表的关系的集合。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1007">Gets the collection of relations that link tables and allow navigation from parent tables to child tables.</span></span></summary>
        <value><span data-ttu-id="9cf18-1008">一个包含 <see cref="T:System.Data.DataRelationCollection" /> 对象集合的 <see cref="T:System.Data.DataRelation" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1008">A <see cref="T:System.Data.DataRelationCollection" /> that contains a collection of <see cref="T:System.Data.DataRelation" /> objects.</span></span> <span data-ttu-id="9cf18-1009">如果 <see cref="T:System.Data.DataRelation" /> 对象不存在，将返回空集合。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1009">An empty collection is returned if no <see cref="T:System.Data.DataRelation" /> objects exist.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9cf18-1010">下面的示例通过属性输出所有子表的列名称 <xref:System.Data.DataSet.Relations%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1010">The following example prints the column name of all child tables through the <xref:System.Data.DataSet.Relations%2A> property.</span></span>  
  
 [!code-vb[Classic WebData DataSet.Relations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Relations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1011">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1011">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RemotingFormat">
      <MemberSignature Language="C#" Value="public System.Data.SerializationFormat RemotingFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SerializationFormat RemotingFormat" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.RemotingFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property RemotingFormat As SerializationFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SerializationFormat RemotingFormat { System::Data::SerializationFormat get(); void set(System::Data::SerializationFormat value); };" />
      <MemberSignature Language="F#" Value="member this.RemotingFormat : System.Data.SerializationFormat with get, set" Usage="System.Data.DataSet.RemotingFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SerializationFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9cf18-1012">为远程处理期间使用的 <see cref="T:System.Data.SerializationFormat" /> 获取或设置 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1012">Gets or sets a <see cref="T:System.Data.SerializationFormat" /> for the <see cref="T:System.Data.DataSet" /> used during remoting.</span></span></summary>
        <value><span data-ttu-id="9cf18-1013"><see cref="T:System.Data.SerializationFormat" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1013">A <see cref="T:System.Data.SerializationFormat" /> object.</span></span></value>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1014">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1014">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Reset();" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="dataSet.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9cf18-1015">清除所有表并从 <see cref="T:System.Data.DataSet" /> 中删除所有关系、外部约束和表。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1015">Clears all tables and removes all relations, foreign constraints, and tables from the <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="9cf18-1016">子类应重写 <see cref="M:System.Data.DataSet.Reset" />，以便将 <see cref="T:System.Data.DataSet" /> 还原到其原始状态。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1016">Subclasses should override <see cref="M:System.Data.DataSet.Reset" /> to restore a <see cref="T:System.Data.DataSet" /> to its original state.</span></span></summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1017">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1017">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SchemaSerializationMode">
      <MemberSignature Language="C#" Value="public virtual System.Data.SchemaSerializationMode SchemaSerializationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.SchemaSerializationMode SchemaSerializationMode" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.SchemaSerializationMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SchemaSerializationMode As SchemaSerializationMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::SchemaSerializationMode SchemaSerializationMode { System::Data::SchemaSerializationMode get(); void set(System::Data::SchemaSerializationMode value); };" />
      <MemberSignature Language="F#" Value="member this.SchemaSerializationMode : System.Data.SchemaSerializationMode with get, set" Usage="System.Data.DataSet.SchemaSerializationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SchemaSerializationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9cf18-1018">获取或设置 <see cref="T:System.Data.SchemaSerializationMode" /> 的 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1018">Gets or sets a <see cref="T:System.Data.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="9cf18-1019"><see cref="T:System.Data.SchemaSerializationMode" /> 的 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1019">A <see cref="T:System.Data.SchemaSerializationMode" /> for a <see cref="T:System.Data.DataSet" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1020"><xref:System.Data.DataSet>默认情况下，在 Web 服务和远程处理方案中序列化其架构和实例数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1020">A <xref:System.Data.DataSet> serializes its schema and instance data by default in Web services and remoting scenarios.</span></span> <span data-ttu-id="9cf18-1021">设置 <xref:System.Data.DataSet.SchemaSerializationMode%2A> 类型化的属性将 `DataSet` <xref:System.Data.SchemaSerializationMode.ExcludeSchema> 导致从序列化有效负载中排除架构信息。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1021">Setting the <xref:System.Data.DataSet.SchemaSerializationMode%2A> property of a typed `DataSet` to <xref:System.Data.SchemaSerializationMode.ExcludeSchema> causes schema information to be excluded from the serialization payload.</span></span>  
  
 <span data-ttu-id="9cf18-1022"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> 仅支持类型化 `DataSet` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1022"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> is supported only for a typed `DataSet`.</span></span> <span data-ttu-id="9cf18-1023">对于非类型化的 `DataSet` 此属性，只能将设置为 <xref:System.Data.SchemaSerializationMode.IncludeSchema> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1023">For an un-typed `DataSet` this property can only be set to <xref:System.Data.SchemaSerializationMode.IncludeSchema>.</span></span>  
  
 <span data-ttu-id="9cf18-1024"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> 仅应在基础类型化的架构信息未修改的情况下 `DataTables` 使用 `DataRelations` `Constraints` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1024"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> should only be used in cases where the schema information of the underlying typed `DataTables`, `DataRelations` and `Constraints` has not been modified.</span></span> <span data-ttu-id="9cf18-1025">如果发生了修改，则应使用来序列化完整的架构信息 <xref:System.Data.SchemaSerializationMode.IncludeSchema> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1025">If modifications have occurred, complete schema information should be serialized with <xref:System.Data.SchemaSerializationMode.IncludeSchema>.</span></span>  
  
 <span data-ttu-id="9cf18-1026"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> .NET Framework 或更高版本的2.0 版支持。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1026"><xref:System.Data.SchemaSerializationMode.ExcludeSchema> is supported in version 2.0 of the .NET Framework or later.</span></span>  
  
 <span data-ttu-id="9cf18-1027">如果 <xref:System.Data.SchemaSerializationMode.ExcludeSchema> 设置了，则仅序列化上存在的顶级运行时属性 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1027">When <xref:System.Data.SchemaSerializationMode.ExcludeSchema> is set, only the top level runtime properties present on the <xref:System.Data.DataSet> are serialized.</span></span> <span data-ttu-id="9cf18-1028">此外，仅当它们碰巧不同于默认值时，才会序列化它们。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1028">In addition, they are serialized only if they happen to be different from the default values.</span></span> <span data-ttu-id="9cf18-1029">`Tables` `Relations` `Constraints` 不会序列化任何。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1029">None of the `Tables`, `Relations` or `Constraints` are serialized.</span></span> <span data-ttu-id="9cf18-1030">序列化的运行时属性包括 <xref:System.Data.DataSet.DataSetName%2A> 、 <xref:System.Data.DataSet.Namespace%2A> 、 <xref:System.Data.DataSet.Prefix%2A> 、 <xref:System.Data.DataSet.Locale%2A> 、 <xref:System.Data.DataSet.EnforceConstraints%2A> 和 <xref:System.Data.DataSet.CaseSensitive%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1030">The serialized runtime properties include <xref:System.Data.DataSet.DataSetName%2A>, <xref:System.Data.DataSet.Namespace%2A>, <xref:System.Data.DataSet.Prefix%2A>, <xref:System.Data.DataSet.Locale%2A>, <xref:System.Data.DataSet.EnforceConstraints%2A>, and <xref:System.Data.DataSet.CaseSensitive%2A>.</span></span> <span data-ttu-id="9cf18-1031">将序列化这些属性，以确保保留总体运行时数据完整性。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1031">These properties are serialized to make sure that overall runtime data integrity is preserved.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1032">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1032">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeRelations">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeRelations ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeRelations() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ShouldSerializeRelations" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ShouldSerializeRelations () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ShouldSerializeRelations();" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeRelations : unit -&gt; bool&#xA;override this.ShouldSerializeRelations : unit -&gt; bool" Usage="dataSet.ShouldSerializeRelations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9cf18-1033">获取一个值，该值指示是否应该保持 <see cref="P:System.Data.DataSet.Relations" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1033">Gets a value indicating whether <see cref="P:System.Data.DataSet.Relations" /> property should be persisted.</span></span></summary>
        <returns><span data-ttu-id="9cf18-1034">如果已将属性值更改为其默认值之外的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1034"><see langword="true" /> if the property value has been changed from its default; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1035">如果要为创建设计器 <xref:System.Data.DataSet> ，或创建自己的包含的控件，则通常使用此方法 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1035">You typically use this method if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-1036">下面的示例演示一个派生自类的类 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1036">The following examples show a class derived from the <xref:System.Data.DataSet> class.</span></span> <span data-ttu-id="9cf18-1037"><xref:System.Data.DataSet.Reset%2A>和 <xref:System.Data.DataSet.ShouldSerializeRelations%2A> 方法是从派生类中的函数中调用的。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1037">The <xref:System.Data.DataSet.Reset%2A> and <xref:System.Data.DataSet.ShouldSerializeRelations%2A> methods are invoked from within functions in the derived class.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeRelations Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ShouldSerializeRelations Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeRelations Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1038">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1038">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTables">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeTables ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ShouldSerializeTables() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.ShouldSerializeTables" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ShouldSerializeTables () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ShouldSerializeTables();" />
      <MemberSignature Language="F#" Value="abstract member ShouldSerializeTables : unit -&gt; bool&#xA;override this.ShouldSerializeTables : unit -&gt; bool" Usage="dataSet.ShouldSerializeTables " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9cf18-1039">获取一个值，该值指示是否应该保持 <see cref="P:System.Data.DataSet.Tables" /> 属性。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1039">Gets a value indicating whether <see cref="P:System.Data.DataSet.Tables" /> property should be persisted.</span></span></summary>
        <returns><span data-ttu-id="9cf18-1040">如果已将属性值更改为其默认值之外的值，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1040"><see langword="true" /> if the property value has been changed from its default; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1041">通常，仅当要为创建设计器 <xref:System.Data.DataSet> 或创建自己的包含的控件时，才使用此方法 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1041">You typically use this method only if you are either creating a designer for the <xref:System.Data.DataSet>, or creating your own control incorporating the <xref:System.Data.DataSet>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-1042">下面的示例演示一个派生自类的类 <xref:System.Data.DataSet> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1042">The following example shows a class derived from the <xref:System.Data.DataSet> class.</span></span> <span data-ttu-id="9cf18-1043"><xref:System.Data.DataSet.ShouldSerializeTables%2A>从派生类中的函数中调用方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1043">The <xref:System.Data.DataSet.ShouldSerializeTables%2A> method is called from within functions in the derived class.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ShouldSerializeTables Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeTables Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ShouldSerializeTables Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ShouldSerializeTables Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1044">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1044">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite? Site { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Data.DataSet.Site" />
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.Browsable(false)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.Browsable(false)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9cf18-1045">获取或设置 <see cref="T:System.ComponentModel.ISite" /> 的 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1045">Gets or sets an <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="9cf18-1046"><see cref="T:System.ComponentModel.ISite" /> 的一个 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1046">An <see cref="T:System.ComponentModel.ISite" /> for the <see cref="T:System.Data.DataSet" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1047">站点将绑定 <xref:System.ComponentModel.Component> 到， <xref:System.ComponentModel.Container> 并启用它们之间的通信，并为容器提供管理其组件的方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1047">Sites bind a <xref:System.ComponentModel.Component> to a <xref:System.ComponentModel.Container> and enable communication between them, as well as provide a way for the container to manage its components.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1048">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1048">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System::ComponentModel::IListSource::ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.ComponentModel.IListSource.ContainsListCollection : bool" Usage="System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IListSource.ContainsListCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9cf18-1049">有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1049">For a description of this member, see <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</span></span></summary>
        <value><span data-ttu-id="9cf18-1050">有关此成员的说明，请参见 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1050">For a description of this member, see <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1051">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1051">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9cf18-1052">它只能在 <xref:System.Data.DataSet> 实例被强制转换为 <xref:System.ComponentModel.IListSource> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1052">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberSignature Language="F#" Value="abstract member System.ComponentModel.IListSource.GetList : unit -&gt; System.Collections.IList&#xA;override this.System.ComponentModel.IListSource.GetList : unit -&gt; System.Collections.IList" Usage="dataSet.System.ComponentModel.IListSource.GetList " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.IListSource.GetList</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9cf18-1053">有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IListSource.GetList" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1053">For a description of this member, see <see cref="M:System.ComponentModel.IListSource.GetList" />.</span></span></summary>
        <returns><span data-ttu-id="9cf18-1054">有关此成员的说明，请参见 <see cref="M:System.ComponentModel.IListSource.GetList" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1054">For a description of this member, see <see cref="M:System.ComponentModel.IListSource.GetList" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1055">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1055">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9cf18-1056">它只能在 <xref:System.Data.DataSet> 实例被强制转换为 <xref:System.ComponentModel.IListSource> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1056">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberSignature Language="F#" Value="abstract member System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit&#xA;override this.System.Runtime.Serialization.ISerializable.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="dataSet.System.Runtime.Serialization.ISerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="info"><span data-ttu-id="9cf18-1057">要填充数据的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1057">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</span></span></param>
        <param name="context"><span data-ttu-id="9cf18-1058">此序列化的目标（请参见 <see cref="T:System.Runtime.Serialization.StreamingContext" />）。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1058">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</span></span></param>
        <summary><span data-ttu-id="9cf18-1059">使用序列化 <see cref="T:System.Data.DataSet" /> 时所需的数据填充序列化信息对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1059">Populates a serialization information object with the data needed to serialize the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.GetSchema">
      <MemberSignature Language="C#" Value="System.Xml.Schema.XmlSchema IXmlSerializable.GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Xml.Schema.XmlSchema System.Xml.Serialization.IXmlSerializable.GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema" />
      <MemberSignature Language="VB.NET" Value="Function GetSchema () As XmlSchema Implements IXmlSerializable.GetSchema" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Xml::Schema::XmlSchema ^ System.Xml.Serialization.IXmlSerializable.GetSchema() = System::Xml::Serialization::IXmlSerializable::GetSchema;" />
      <MemberSignature Language="F#" Value="abstract member System.Xml.Serialization.IXmlSerializable.GetSchema : unit -&gt; System.Xml.Schema.XmlSchema&#xA;override this.System.Xml.Serialization.IXmlSerializable.GetSchema : unit -&gt; System.Xml.Schema.XmlSchema" Usage="dataSet.System.Xml.Serialization.IXmlSerializable.GetSchema " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.GetSchema</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchema</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9cf18-1060">有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1060">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />.</span></span></summary>
        <returns><span data-ttu-id="9cf18-1061">有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1061">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1062">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1062">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9cf18-1063">它只能在 <xref:System.Data.DataSet> 实例被强制转换为 <xref:System.Xml.Serialization.IXmlSerializable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1063">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.ReadXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.ReadXml (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.ReadXml(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Sub ReadXml (reader As XmlReader) Implements IXmlSerializable.ReadXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.ReadXml(System::Xml::XmlReader ^ reader) = System::Xml::Serialization::IXmlSerializable::ReadXml;" />
      <MemberSignature Language="F#" Value="abstract member System.Xml.Serialization.IXmlSerializable.ReadXml : System.Xml.XmlReader -&gt; unit&#xA;override this.System.Xml.Serialization.IXmlSerializable.ReadXml : System.Xml.XmlReader -&gt; unit" Usage="dataSet.System.Xml.Serialization.IXmlSerializable.ReadXml reader" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="9cf18-1064"><see cref="T:System.Xml.XmlReader" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1064">A <see cref="T:System.Xml.XmlReader" />.</span></span></param>
        <summary><span data-ttu-id="9cf18-1065">有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1065">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1066">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1066">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9cf18-1067">它只能在 <xref:System.Data.DataSet> 实例被强制转换为 <xref:System.Xml.Serialization.IXmlSerializable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1067">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.Serialization.IXmlSerializable.WriteXml">
      <MemberSignature Language="C#" Value="void IXmlSerializable.WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Xml.Serialization.IXmlSerializable.WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Sub WriteXml (writer As XmlWriter) Implements IXmlSerializable.WriteXml" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Xml.Serialization.IXmlSerializable.WriteXml(System::Xml::XmlWriter ^ writer) = System::Xml::Serialization::IXmlSerializable::WriteXml;" />
      <MemberSignature Language="F#" Value="abstract member System.Xml.Serialization.IXmlSerializable.WriteXml : System.Xml.XmlWriter -&gt; unit&#xA;override this.System.Xml.Serialization.IXmlSerializable.WriteXml : System.Xml.XmlWriter -&gt; unit" Usage="dataSet.System.Xml.Serialization.IXmlSerializable.WriteXml writer" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="9cf18-1068"><see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1068">A <see cref="T:System.Xml.XmlWriter" />.</span></span></param>
        <summary><span data-ttu-id="9cf18-1069">有关此成员的说明，请参见 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1069">For a description of this member, see <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1070">此成员是显式接口成员的实现。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1070">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="9cf18-1071">它只能在 <xref:System.Data.DataSet> 实例被强制转换为 <xref:System.Xml.Serialization.IXmlSerializable> 接口时使用。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1071">It can be used only when the <xref:System.Data.DataSet> instance is cast to an <xref:System.Xml.Serialization.IXmlSerializable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tables">
      <MemberSignature Language="C#" Value="public System.Data.DataTableCollection Tables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataTableCollection Tables" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataSet.Tables" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tables As DataTableCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataTableCollection ^ Tables { System::Data::DataTableCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Tables : System.Data.DataTableCollection" Usage="System.Data.DataSet.Tables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName Language="C#">[System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName Language="C#">[System.Data.DataSysDescription("DataSetTablesDescr")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Data.DataSysDescription("DataSetTablesDescr")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataTableCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9cf18-1072">获取包含在 <see cref="T:System.Data.DataSet" /> 中的表的集合。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1072">Gets the collection of tables contained in the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <value><span data-ttu-id="9cf18-1073">此 <see cref="T:System.Data.DataTableCollection" /> 包含的 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1073">The <see cref="T:System.Data.DataTableCollection" /> contained by this <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="9cf18-1074">如果 <see cref="T:System.Data.DataTable" /> 对象不存在，将返回空集合。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1074">An empty collection is returned if no <see cref="T:System.Data.DataTable" /> objects exist.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1075">若要将表添加到集合，请使用的 <xref:System.Data.DataTableCollection.Add%2A> 方法 <xref:System.Data.DataTableCollection> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1075">To add tables to the collection, use <xref:System.Data.DataTableCollection.Add%2A> method of the <xref:System.Data.DataTableCollection>.</span></span> <span data-ttu-id="9cf18-1076">若要删除表，请使用 <xref:System.Data.DataTableCollection.Remove%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1076">To remove tables, use the <xref:System.Data.DataTableCollection.Remove%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-1077">下面的示例返回 <xref:System.Data.DataSet> 对象的 <xref:System.Data.DataTableCollection> ，并打印每个表中的列和行。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1077">The following example returns the <xref:System.Data.DataSet> object's <xref:System.Data.DataTableCollection>, and prints the columns and rows in each table.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.Tables Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.Tables Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.Tables Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.Tables Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1078">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1078">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXml">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9cf18-1079">从 <see cref="T:System.Data.DataSet" /> 写 XML 数据，还可以选择写架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1079">Writes XML data, and optionally the schema, from the <see cref="T:System.Data.DataSet" />.</span></span></summary>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1080">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1080">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (stream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.Stream -&gt; unit" Usage="dataSet.WriteXml stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="9cf18-1081">用于写入文件的 <see cref="T:System.IO.Stream" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1081">A <see cref="T:System.IO.Stream" /> object used to write to a file.</span></span></param>
        <summary><span data-ttu-id="9cf18-1082">使用指定的 <see cref="T:System.Data.DataSet" /> 为 <see cref="T:System.IO.Stream" /> 写当前数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1082">Writes the current data for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1083">`WriteXml`方法提供了一种方法，用于将数据（或中的数据和架构 <xref:System.Data.DataSet> ）写入 XML 文档，而 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法只写入架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1083">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="9cf18-1084">若要同时编写数据和架构，请使用包含参数的重载之一 `mode` ，并将其值设置为 `WriteSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1084">To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="9cf18-1085">请注意，对于和方法也是 <xref:System.Data.DataSet.ReadXml%2A> 如此 <xref:System.Data.DataSet.ReadXmlSchema%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1085">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="9cf18-1086">若要将 XML 数据或架构和数据读入到 `DataSet` 中，请使用 `ReadXml` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1086">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="9cf18-1087">若要仅读取架构，请使用 `ReadXmlSchema` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1087">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-1088"><xref:System.InvalidOperationException>如果在中 `DataRow` 读取或写入的列类型实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> 且不实现，则将引发 <xref:System.Xml.Serialization.IXmlSerializable> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1088">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-1089">下面的示例创建一个 <xref:System.IO.FileStream?displayProperty=nameWithType> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1089">The following example creates a <xref:System.IO.FileStream?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="9cf18-1090">然后，将对象与方法一起使用 <xref:System.Data.DataSet.WriteXml%2A> 以写入 XML 文档。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1090">The object is then used with the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXml Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1091">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1091">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.TextWriter -&gt; unit" Usage="dataSet.WriteXml writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="9cf18-1092">要进行写入的 <see cref="T:System.IO.TextWriter" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1092">The <see cref="T:System.IO.TextWriter" /> object with which to write.</span></span></param>
        <summary><span data-ttu-id="9cf18-1093">使用指定的 <see cref="T:System.Data.DataSet" /> 为 <see cref="T:System.IO.TextWriter" /> 写当前数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1093">Writes the current data for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.TextWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1094">`WriteXml`方法提供了一种方法，用于将数据（或中的数据和架构 <xref:System.Data.DataSet> ）写入 XML 文档，而 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法只写入架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1094">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="9cf18-1095">若要同时编写数据和架构，请使用包含参数的重载之一 `mode` ，并将其值设置为 `WriteSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1095">To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="9cf18-1096">请注意，对于和方法也是 <xref:System.Data.DataSet.ReadXml%2A> 如此 <xref:System.Data.DataSet.ReadXmlSchema%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1096">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="9cf18-1097">若要将 XML 数据或架构和数据读入到 `DataSet` 中，请使用 `ReadXml` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1097">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="9cf18-1098">若要仅读取架构，请使用 `ReadXmlSchema` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1098">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-1099"><xref:System.InvalidOperationException>如果在中 `DataRow` 读取或写入的列类型实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> 且不实现，则将引发 <xref:System.Xml.Serialization.IXmlSerializable> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1099">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1100">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1100">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : string -&gt; unit" Usage="dataSet.WriteXml fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="9cf18-1101">要向其写入的文件的名称（包括路径）。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1101">The file name (including the path) to which to write.</span></span></param>
        <summary><span data-ttu-id="9cf18-1102">将 <see cref="T:System.Data.DataSet" /> 的当前数据写入指定的文件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1102">Writes the current data for the <see cref="T:System.Data.DataSet" /> to the specified file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1103">`WriteXml`方法提供了一种方法，用于将数据（或中的数据和架构 <xref:System.Data.DataSet> ）写入 XML 文档，而 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法只写入架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1103">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="9cf18-1104">若要同时编写数据和架构，请使用包含参数的重载之一 `mode` ，并将其值设置为 `WriteSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1104">To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="9cf18-1105">请注意，对于和方法也是 <xref:System.Data.DataSet.ReadXml%2A> 如此 <xref:System.Data.DataSet.ReadXmlSchema%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1105">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="9cf18-1106">若要将 XML 数据或架构和数据读入到 `DataSet` 中，请使用 `ReadXml` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1106">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="9cf18-1107">若要仅读取架构，请使用 `ReadXmlSchema` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1107">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-1108"><xref:System.InvalidOperationException>如果在中 `DataRow` 读取或写入的列类型实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> 且不实现，则将引发 <xref:System.Xml.Serialization.IXmlSerializable> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1108">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="9cf18-1109"><see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1109"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1110">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1110">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.Xml.XmlWriter -&gt; unit" Usage="dataSet.WriteXml writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="9cf18-1111">用于写入的 <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1111">The <see cref="T:System.Xml.XmlWriter" /> with which to write.</span></span></param>
        <summary><span data-ttu-id="9cf18-1112">将 <see cref="T:System.Data.DataSet" /> 的当前数据写入指定的 <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1112">Writes the current data for the <see cref="T:System.Data.DataSet" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1113">`WriteXml`方法提供了一种方法，用于将数据（或中的数据和架构 <xref:System.Data.DataSet> ）写入 XML 文档，而 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法只写入架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1113">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="9cf18-1114">若要同时编写数据和架构，请使用包含参数的重载之一 `mode` ，并将其值设置为 `WriteSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1114">To write both data and schema, use one of the overloads that includes the `mode` parameter, and set its value to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="9cf18-1115">请注意，对于和方法也是 <xref:System.Data.DataSet.ReadXml%2A> 如此 <xref:System.Data.DataSet.ReadXmlSchema%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1115">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="9cf18-1116">若要将 XML 数据或架构和数据读入到 `DataSet` 中，请使用 `ReadXml` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1116">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="9cf18-1117">若要仅读取架构，请使用 `ReadXmlSchema` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1117">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-1118"><xref:System.InvalidOperationException>如果在中 `DataRow` 读取或写入的列类型实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> 且不实现，则将引发 <xref:System.Xml.Serialization.IXmlSerializable> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1118">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1119">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1119">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.Stream stream, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.Stream stream, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (stream As Stream, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::Stream ^ stream, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.Stream * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (stream, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="9cf18-1120">用于写入文件的 <see cref="T:System.IO.Stream" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1120">A <see cref="T:System.IO.Stream" /> object used to write to a file.</span></span></param>
        <param name="mode"><span data-ttu-id="9cf18-1121"><see cref="T:System.Data.XmlWriteMode" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1121">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span></span></param>
        <summary><span data-ttu-id="9cf18-1122">使用指定的 <see cref="T:System.IO.Stream" /> 和 <see cref="T:System.Data.XmlWriteMode" /> 写入 <see cref="T:System.Data.DataSet" /> 的当前数据和架构（可选）。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1122">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.Stream" /> and <see cref="T:System.Data.XmlWriteMode" />.</span></span> <span data-ttu-id="9cf18-1123">若要写入架构，请将 <paramref name="mode" /> 参数的值设置为 <see langword="WriteSchema" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1123">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1124">`WriteXml`方法提供了一种方法，用于将数据（或中的数据和架构 <xref:System.Data.DataSet> ）写入 XML 文档，而 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法只写入架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1124">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="9cf18-1125">若要同时编写数据和架构，请将 `mode` 参数设置为 `WriteSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1125">To write both data and schema, set the `mode` parameter to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="9cf18-1126">请注意，对于和方法也是 <xref:System.Data.DataSet.ReadXml%2A> 如此 <xref:System.Data.DataSet.ReadXmlSchema%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1126">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="9cf18-1127">若要将 XML 数据或架构和数据读入到 `DataSet` 中，请使用 `ReadXml` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1127">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="9cf18-1128">若要仅读取架构，请使用 `ReadXmlSchema` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1128">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-1129"><xref:System.InvalidOperationException>如果在中 `DataRow` 读取或写入的列类型实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> 且不实现，则将引发 <xref:System.Xml.Serialization.IXmlSerializable> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1129">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1130">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1130">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.IO.TextWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.IO.TextWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As TextWriter, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::IO::TextWriter ^ writer, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.IO.TextWriter * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (writer, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="9cf18-1131"><see cref="T:System.IO.TextWriter" /> 对象用于写文档。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1131">A <see cref="T:System.IO.TextWriter" /> object used to write the document.</span></span></param>
        <param name="mode"><span data-ttu-id="9cf18-1132"><see cref="T:System.Data.XmlWriteMode" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1132">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span></span></param>
        <summary><span data-ttu-id="9cf18-1133">使用指定的 <see cref="T:System.IO.TextWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" /> 写入 <see cref="T:System.Data.DataSet" /> 的当前数据和架构（可选）。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1133">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.IO.TextWriter" /> and <see cref="T:System.Data.XmlWriteMode" />.</span></span> <span data-ttu-id="9cf18-1134">若要写入架构，请将 <paramref name="mode" /> 参数的值设置为 <see langword="WriteSchema" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1134">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1135">`WriteXml`方法提供了一种方法，用于将数据（或中的数据和架构 <xref:System.Data.DataSet> ）写入 XML 文档，而 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法只写入架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1135">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="9cf18-1136">若要同时编写数据和架构，请将 `mode` 参数设置为 `WriteSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1136">To write both data and schema, set the `mode` parameter to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="9cf18-1137">请注意，对于和方法也是 <xref:System.Data.DataSet.ReadXml%2A> 如此 <xref:System.Data.DataSet.ReadXmlSchema%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1137">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="9cf18-1138">若要将 XML 数据或架构和数据读入到 `DataSet` 中，请使用 `ReadXml` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1138">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="9cf18-1139">若要仅读取架构，请使用 `ReadXmlSchema` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1139">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-1140"><xref:System.InvalidOperationException>如果在中 `DataRow` 读取或写入的列类型实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> 且不实现，则将引发 <xref:System.Xml.Serialization.IXmlSerializable> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1140">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-1141">下面的示例首先创建一个简单 <xref:System.Data.DataSet> 的，其中包含一个 <xref:System.Data.DataTable> 、两个列和10个行。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1141">The following example first creates a simple <xref:System.Data.DataSet> with one <xref:System.Data.DataTable>, two columns, and ten rows.</span></span> <span data-ttu-id="9cf18-1142"><xref:System.Data.DataSet>通过调用方法将架构和数据写入磁盘 <xref:System.Data.DataSet.WriteXml%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1142">The <xref:System.Data.DataSet> schema and data are written to disk by invoking the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span> <span data-ttu-id="9cf18-1143">将创建第二个 <xref:System.Data.DataSet> ，并 <xref:System.Data.DataSet.ReadXml%2A> 使用方法来填充架构和数据。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1143">A second <xref:System.Data.DataSet> is created and the <xref:System.Data.DataSet.ReadXml%2A> method is used to fill it with schema and data.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.ReadXml2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.ReadXml2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1144">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1144">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (string fileName, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(string fileName, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (fileName As String, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::String ^ fileName, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : string * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (fileName, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="9cf18-1145">要向其写入的文件的名称（包括路径）。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1145">The file name (including the path) to which to write.</span></span></param>
        <param name="mode"><span data-ttu-id="9cf18-1146"><see cref="T:System.Data.XmlWriteMode" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1146">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span></span></param>
        <summary><span data-ttu-id="9cf18-1147">使用指定的 <see cref="T:System.Data.XmlWriteMode" /> 将 <see cref="T:System.Data.DataSet" /> 的当前数据和架构（可选）写入指定的文件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1147">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataSet" /> to the specified file using the specified <see cref="T:System.Data.XmlWriteMode" />.</span></span> <span data-ttu-id="9cf18-1148">若要写入架构，请将 <paramref name="mode" /> 参数的值设置为 <see langword="WriteSchema" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1148">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1149">`WriteXml`方法提供了一种方法，用于将数据（或中的数据和架构 <xref:System.Data.DataSet> ）写入 XML 文档，而 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法只写入架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1149">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="9cf18-1150">若要同时编写数据和架构，请将 `mode` 参数设置为 `WriteSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1150">To write both data and schema, set the `mode` parameter to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="9cf18-1151">请注意，对于和方法也是 <xref:System.Data.DataSet.ReadXml%2A> 如此 <xref:System.Data.DataSet.ReadXmlSchema%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1151">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="9cf18-1152">若要将 XML 数据或架构和数据读入到 `DataSet` 中，请使用 `ReadXml` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1152">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="9cf18-1153">若要仅读取架构，请使用 `ReadXmlSchema` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1153">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-1154"><xref:System.InvalidOperationException>如果在中 `DataRow` 读取或写入的列类型实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> 且不实现，则将引发 <xref:System.Xml.Serialization.IXmlSerializable> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1154">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-1155">下面的示例使用 <xref:System.Data.DataSet.WriteXml%2A> 方法来编写 XML 文档。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1155">The following example uses the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXml7 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml7 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml7 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml7 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="9cf18-1156"><see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1156"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1157">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1157">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXml">
      <MemberSignature Language="C#" Value="public void WriteXml (System.Xml.XmlWriter writer, System.Data.XmlWriteMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXml(class System.Xml.XmlWriter writer, valuetype System.Data.XmlWriteMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXml (writer As XmlWriter, mode As XmlWriteMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXml(System::Xml::XmlWriter ^ writer, System::Data::XmlWriteMode mode);" />
      <MemberSignature Language="F#" Value="member this.WriteXml : System.Xml.XmlWriter * System.Data.XmlWriteMode -&gt; unit" Usage="dataSet.WriteXml (writer, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
        <Parameter Name="mode" Type="System.Data.XmlWriteMode" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="9cf18-1158">用于写入的 <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1158">The <see cref="T:System.Xml.XmlWriter" /> with which to write.</span></span></param>
        <param name="mode"><span data-ttu-id="9cf18-1159"><see cref="T:System.Data.XmlWriteMode" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1159">One of the <see cref="T:System.Data.XmlWriteMode" /> values.</span></span></param>
        <summary><span data-ttu-id="9cf18-1160">使用指定的 <see cref="T:System.Xml.XmlWriter" /> 和 <see cref="T:System.Data.XmlWriteMode" /> 写入 <see cref="T:System.Data.DataSet" /> 的当前数据和架构（可选）。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1160">Writes the current data, and optionally the schema, for the <see cref="T:System.Data.DataSet" /> using the specified <see cref="T:System.Xml.XmlWriter" /> and <see cref="T:System.Data.XmlWriteMode" />.</span></span> <span data-ttu-id="9cf18-1161">若要写入架构，请将 <paramref name="mode" /> 参数的值设置为 <see langword="WriteSchema" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1161">To write the schema, set the value for the <paramref name="mode" /> parameter to <see langword="WriteSchema" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1162">`WriteXml`方法提供了一种方法，用于将数据（或中的数据和架构 <xref:System.Data.DataSet> ）写入 XML 文档，而 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法只写入架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1162">The `WriteXml` method provides a way to write either data only, or both data and schema from a <xref:System.Data.DataSet> into an XML document, whereas the <xref:System.Data.DataSet.WriteXmlSchema%2A> method writes only the schema.</span></span> <span data-ttu-id="9cf18-1163">若要同时编写数据和架构，请将 `mode` 参数设置为 `WriteSchema` 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1163">To write both data and schema, set the `mode` parameter to `WriteSchema`.</span></span>  
  
 <span data-ttu-id="9cf18-1164">请注意，对于和方法也是 <xref:System.Data.DataSet.ReadXml%2A> 如此 <xref:System.Data.DataSet.ReadXmlSchema%2A> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1164">Note that the same is true for the <xref:System.Data.DataSet.ReadXml%2A> and <xref:System.Data.DataSet.ReadXmlSchema%2A> methods, respectively.</span></span> <span data-ttu-id="9cf18-1165">若要将 XML 数据或架构和数据读入到 `DataSet` 中，请使用 `ReadXml` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1165">To read XML data, or both schema and data into the `DataSet`, use the `ReadXml` method.</span></span> <span data-ttu-id="9cf18-1166">若要仅读取架构，请使用 `ReadXmlSchema` 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1166">To read just the schema, use the `ReadXmlSchema` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="9cf18-1167"><xref:System.InvalidOperationException>如果在中 `DataRow` 读取或写入的列类型实现 <xref:System.Dynamic.IDynamicMetaObjectProvider> 且不实现，则将引发 <xref:System.Xml.Serialization.IXmlSerializable> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1167">An <xref:System.InvalidOperationException> will be thrown if a column type in the `DataRow` being read from or written to implements <xref:System.Dynamic.IDynamicMetaObjectProvider> and does not implement <xref:System.Xml.Serialization.IXmlSerializable>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-1168">下面的示例创建一个 <xref:System.IO.FileStream?displayProperty=nameWithType> 用于创建新的对象 <xref:System.Xml.XmlTextWriter> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1168">The following example creates a <xref:System.IO.FileStream?displayProperty=nameWithType> object that is used to create a new <xref:System.Xml.XmlTextWriter>.</span></span> <span data-ttu-id="9cf18-1169"><xref:System.Xml.XmlTextWriter>对象与方法一起用于 <xref:System.Data.DataSet.WriteXml%2A> 写入 XML 文档。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1169">The <xref:System.Xml.XmlTextWriter> object is used with the <xref:System.Data.DataSet.WriteXml%2A> method to write an XML document.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXml6 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml6 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXml6 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXml6 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1170">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1170">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteXmlSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9cf18-1171">写 XML 架构形式的 <see cref="T:System.Data.DataSet" /> 结构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1171">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema.</span></span></summary>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1172">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1172">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (stream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.Stream -&gt; unit" Usage="dataSet.WriteXmlSchema stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="9cf18-1173">用于写入文件的 <see cref="T:System.IO.Stream" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1173">A <see cref="T:System.IO.Stream" /> object used to write to a file.</span></span></param>
        <summary><span data-ttu-id="9cf18-1174">将 <see cref="T:System.Data.DataSet" /> 结构作为 XML 架构写入指定的 <see cref="T:System.IO.Stream" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1174">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.IO.Stream" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1175">使用 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法可将的架构写入 <xref:System.Data.DataSet> XML 文档。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1175">Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document.</span></span> <span data-ttu-id="9cf18-1176">此架构包括表、关系和约束定义。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1176">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="9cf18-1177">若要将架构写入 XML 文档，请使用 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1177">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="9cf18-1178">使用 XSD 标准编写 XML 架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1178">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="9cf18-1179">若要将数据写入 XML 文档，请使用 <xref:System.Data.DataSet.WriteXml%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1179">To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span>  
  
 <span data-ttu-id="9cf18-1180">派生自类的类 <xref:System.IO.Stream> 包括 <xref:System.IO.BufferedStream> 、 <xref:System.IO.FileStream> 、 <xref:System.IO.MemoryStream> 和 <xref:System.Net.Sockets.NetworkStream> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1180">Classes that derive from the <xref:System.IO.Stream> class include <xref:System.IO.BufferedStream>, <xref:System.IO.FileStream>, <xref:System.IO.MemoryStream>, and <xref:System.Net.Sockets.NetworkStream>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-1181">下面的示例创建一个新 <xref:System.IO.FileStream> 的对象，该对象传递给 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法，以便将架构写入磁盘。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1181">The following example creates a new <xref:System.IO.FileStream> object that is passed to the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema to disk.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1182">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1182">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.TextWriter -&gt; unit" Usage="dataSet.WriteXmlSchema writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="9cf18-1183">要进行写入的 <see cref="T:System.IO.TextWriter" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1183">The <see cref="T:System.IO.TextWriter" /> object with which to write.</span></span></param>
        <summary><span data-ttu-id="9cf18-1184">将 <see cref="T:System.Data.DataSet" /> 结构作为 XML 架构写入指定的 <see cref="T:System.IO.TextWriter" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1184">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.IO.TextWriter" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1185">使用 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法可将的架构写入 <xref:System.Data.DataSet> XML 文档。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1185">Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document.</span></span> <span data-ttu-id="9cf18-1186">此架构包括表、关系和约束定义。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1186">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="9cf18-1187">若要将架构写入 XML 文档，请使用 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1187">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="9cf18-1188">使用 XSD 标准编写 XML 架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1188">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="9cf18-1189">若要将数据写入 XML 文档，请使用 <xref:System.Data.DataSet.WriteXml%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1189">To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span>  
  
 <span data-ttu-id="9cf18-1190">派生自类的类 <xref:System.IO.TextWriter?displayProperty=nameWithType> 包括 <xref:System.Web.HttpWriter?displayProperty=nameWithType> 、、、 <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=nameWithType> <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType> <xref:System.IO.StreamWriter?displayProperty=nameWithType> 和 <xref:System.IO.StringWriter?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1190">Classes the derive from the <xref:System.IO.TextWriter?displayProperty=nameWithType> class include the <xref:System.Web.HttpWriter?displayProperty=nameWithType>, <xref:System.CodeDom.Compiler.IndentedTextWriter?displayProperty=nameWithType>, <xref:System.Web.UI.HtmlTextWriter?displayProperty=nameWithType>, <xref:System.IO.StreamWriter?displayProperty=nameWithType>, and <xref:System.IO.StringWriter?displayProperty=nameWithType>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-1191">下面的示例创建一个用于 <xref:System.Text.StringBuilder?displayProperty=nameWithType> 创建新的对象 <xref:System.IO.StringWriter?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1191">The following example creates a <xref:System.Text.StringBuilder?displayProperty=nameWithType> object to that is used to create a new <xref:System.IO.StringWriter?displayProperty=nameWithType>.</span></span> <span data-ttu-id="9cf18-1192"><xref:System.IO.StringWriter>传递给 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法，生成的字符串将打印到控制台窗口。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1192">The <xref:System.IO.StringWriter> is passed to the <xref:System.Data.DataSet.WriteXmlSchema%2A> method, and the resulting string is printed to the console window.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1193">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1193">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : string -&gt; unit" Usage="dataSet.WriteXmlSchema fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="9cf18-1194">要向其写入的文件的名称（包括路径）。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1194">The file name (including the path) to which to write.</span></span></param>
        <summary><span data-ttu-id="9cf18-1195">将 XML 架构形式的 <see cref="T:System.Data.DataSet" /> 结构写入文件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1195">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to a file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1196">使用 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法可将的架构写入 <xref:System.Data.DataSet> XML 文档。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1196">Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document.</span></span> <span data-ttu-id="9cf18-1197">此架构包括表、关系和约束定义。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1197">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="9cf18-1198">若要将架构写入 XML 文档，请使用 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1198">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="9cf18-1199">使用 XSD 标准编写 XML 架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1199">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="9cf18-1200">若要将数据写入 XML 文档，请使用 <xref:System.Data.DataSet.WriteXml%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1200">To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span>  
  
   
  
## Examples  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="9cf18-1201"><see cref="T:System.Security.Permissions.FileIOPermission" /> 未设置为 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1201"><see cref="T:System.Security.Permissions.FileIOPermission" /> is not set to <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1202">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1202">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As XmlWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::Xml::XmlWriter ^ writer);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.Xml.XmlWriter -&gt; unit" Usage="dataSet.WriteXmlSchema writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="9cf18-1203">要向其中进行写入的 <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1203">The <see cref="T:System.Xml.XmlWriter" /> to write to.</span></span></param>
        <summary><span data-ttu-id="9cf18-1204">将 XML 架构形式的 <see cref="T:System.Data.DataSet" /> 结构写入 <see cref="T:System.Xml.XmlWriter" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1204">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to an <see cref="T:System.Xml.XmlWriter" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9cf18-1205">使用 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法可将的架构写入 <xref:System.Data.DataSet> XML 文档。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1205">Use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method to write the schema for a <xref:System.Data.DataSet> to an XML document.</span></span> <span data-ttu-id="9cf18-1206">此架构包括表、关系和约束定义。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1206">The schema includes table, relation, and constraint definitions.</span></span> <span data-ttu-id="9cf18-1207">若要将架构写入 XML 文档，请使用 <xref:System.Data.DataSet.WriteXmlSchema%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1207">To write a schema to an XML document, use the <xref:System.Data.DataSet.WriteXmlSchema%2A> method.</span></span>  
  
 <span data-ttu-id="9cf18-1208">使用 XSD 标准编写 XML 架构。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1208">The XML schema is written using the XSD standard.</span></span>  
  
 <span data-ttu-id="9cf18-1209">若要将数据写入 XML 文档，请使用 <xref:System.Data.DataSet.WriteXml%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1209">To write the data to an XML document, use the <xref:System.Data.DataSet.WriteXml%2A> method.</span></span>  
  
 <span data-ttu-id="9cf18-1210">继承自类的一个类 <xref:System.Xml.XmlWriter?displayProperty=nameWithType> 是 <xref:System.Xml.XmlTextWriter> 类。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1210">One class that inherits from the <xref:System.Xml.XmlWriter?displayProperty=nameWithType> class is the <xref:System.Xml.XmlTextWriter> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9cf18-1211">下面的示例 <xref:System.IO.FileStream?displayProperty=nameWithType> 使用指定的路径创建一个新的对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1211">The following example creates a new <xref:System.IO.FileStream?displayProperty=nameWithType> object with the specified path.</span></span> <span data-ttu-id="9cf18-1212"><xref:System.IO.FileStream>对象用于创建 <xref:System.Xml.XmlTextWriter> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1212">The <xref:System.IO.FileStream> object is used to create an <xref:System.Xml.XmlTextWriter> object.</span></span> <span data-ttu-id="9cf18-1213"><xref:System.Data.DataSet.WriteXmlSchema%2A>然后，通过对象调用方法， <xref:System.Xml.XmlTextWriter> 将架构写入磁盘。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1213">The <xref:System.Data.DataSet.WriteXmlSchema%2A> method is then invoked with the <xref:System.Xml.XmlTextWriter> object to write the schema to the disk.</span></span>  
  
 [!code-csharp[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataSet.WriteXmlSchema2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataSet.WriteXmlSchema2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/dataset-datatable-dataview/"><span data-ttu-id="9cf18-1214">在 ADO.NET 中使用数据集</span><span class="sxs-lookup"><span data-stu-id="9cf18-1214">Using DataSets in ADO.NET</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream, Converter&lt;Type,string&gt;? multipleTargetConverter);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.Stream stream, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (stream As Stream, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::Stream ^ stream, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.Stream * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (stream, multipleTargetConverter)" />
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.Stream stream, Converter&lt;Type,string&gt; multipleTargetConverter);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="9cf18-1215">要写入到的 <see cref="T:System.IO.Stream" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1215">A <see cref="T:System.IO.Stream" /> object to write to.</span></span></param>
        <param name="multipleTargetConverter"><span data-ttu-id="9cf18-1216">用于将 <see cref="T:System.Type" /> 转换为字符串的委托。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1216">A delegate used to convert <see cref="T:System.Type" /> to string.</span></span></param>
        <summary><span data-ttu-id="9cf18-1217">将 <see cref="T:System.Data.DataSet" /> 结构作为 XML 架构写入指定的 <see cref="T:System.IO.Stream" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1217">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.IO.Stream" /> object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer, Converter&lt;Type,string&gt;? multipleTargetConverter);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.IO.TextWriter writer, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As TextWriter, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::IO::TextWriter ^ writer, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.IO.TextWriter * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (writer, multipleTargetConverter)" />
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.IO.TextWriter writer, Converter&lt;Type,string&gt; multipleTargetConverter);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="9cf18-1218">要写入到的 <see cref="T:System.IO.TextWriter" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1218">A <see cref="T:System.IO.TextWriter" /> object to write to.</span></span></param>
        <param name="multipleTargetConverter"><span data-ttu-id="9cf18-1219">用于将 <see cref="T:System.Type" /> 转换为字符串的委托。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1219">A delegate used to convert <see cref="T:System.Type" /> to string.</span></span></param>
        <summary><span data-ttu-id="9cf18-1220">将 <see cref="T:System.Data.DataSet" /> 结构作为一个 XML 架构写入指定的 <see cref="T:System.IO.TextWriter" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1220">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.IO.TextWriter" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName, Converter&lt;Type,string&gt;? multipleTargetConverter);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(string fileName, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (fileName As String, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::String ^ fileName, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : string * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (fileName, multipleTargetConverter)" />
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (string fileName, Converter&lt;Type,string&gt; multipleTargetConverter);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="fileName"><span data-ttu-id="9cf18-1221">要写入的文件的名称。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1221">The name of the file to write to.</span></span></param>
        <param name="multipleTargetConverter"><span data-ttu-id="9cf18-1222">用于将 <see cref="T:System.Type" /> 转换为字符串的委托。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1222">A delegate used to convert <see cref="T:System.Type" /> to string.</span></span></param>
        <summary><span data-ttu-id="9cf18-1223">将 XML 架构形式的 <see cref="T:System.Data.DataSet" /> 结构写入文件。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1223">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to a file.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteXmlSchema">
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer, Converter&lt;Type,string&gt;? multipleTargetConverter);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteXmlSchema(class System.Xml.XmlWriter writer, class System.Converter`2&lt;class System.Type, string&gt; multipleTargetConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteXmlSchema (writer As XmlWriter, multipleTargetConverter As Converter(Of Type, String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteXmlSchema(System::Xml::XmlWriter ^ writer, Converter&lt;Type ^, System::String ^&gt; ^ multipleTargetConverter);" />
      <MemberSignature Language="F#" Value="member this.WriteXmlSchema : System.Xml.XmlWriter * Converter&lt;Type, string&gt; -&gt; unit" Usage="dataSet.WriteXmlSchema (writer, multipleTargetConverter)" />
      <MemberSignature Language="C#" Value="public void WriteXmlSchema (System.Xml.XmlWriter writer, Converter&lt;Type,string&gt; multipleTargetConverter);" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Xml.XmlWriter" Index="0" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="multipleTargetConverter" Type="System.Converter&lt;System.Type,System.String&gt;" Index="1" FrameworkAlternate="net-5.0;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="writer"><span data-ttu-id="9cf18-1224">要写入到的 <see cref="T:System.Xml.XmlWriter" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1224">A <see cref="T:System.Xml.XmlWriter" /> object to write to.</span></span></param>
        <param name="multipleTargetConverter"><span data-ttu-id="9cf18-1225">用于将 <see cref="T:System.Type" /> 转换为字符串的委托。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1225">A delegate used to convert <see cref="T:System.Type" /> to string.</span></span></param>
        <summary><span data-ttu-id="9cf18-1226">将 <see cref="T:System.Data.DataSet" /> 结构作为一个 XML 架构写入指定的 <see cref="T:System.Xml.XmlWriter" />。</span><span class="sxs-lookup"><span data-stu-id="9cf18-1226">Writes the <see cref="T:System.Data.DataSet" /> structure as an XML schema to the specified <see cref="T:System.Xml.XmlWriter" />.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
