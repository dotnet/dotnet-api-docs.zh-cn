<Type Name="IDataParameter" FullName="System.Data.IDataParameter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b1fe1707078c2a64dbd807dadc5e5d73ae0f0171" /><Meta Name="ms.sourcegitcommit" Value="ec905a25e6dd05a6a3ffa7f30bf59f3095a8cd67" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/01/2020" /><Meta Name="ms.locfileid" Value="89253252" /></Metadata><TypeSignature Language="C#" Value="public interface IDataParameter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataParameter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDataParameter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataParameter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataParameter" />
  <TypeSignature Language="F#" Value="type IDataParameter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Data.Common" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Docs>
    <summary>表示 Command 对象的参数，也可以表示其到 <see cref="T:System.Data.DataSet" /> 列的映射；并由访问数据源的 .NET Framework 数据提供程序实现。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataParameter>接口允许继承类实现一个参数类，该类表示命令对象的参数。 有关参数类的详细信息，请参阅 [配置参数和参数数据类型](/dotnet/framework/data/adonet/configuring-parameters-and-parameter-data-types)。  
  
 应用程序不会直接创建接口的实例 <xref:System.Data.IDataParameter> ，而是创建继承的类的实例 <xref:System.Data.IDataParameter> 。  
  
 继承的类 <xref:System.Data.IDataParameter> 必须实现继承成员，并且通常定义其他成员来添加特定于提供程序的功能。 例如， <xref:System.Data.IDataParameter> 接口定义 <xref:System.Data.IDataParameter.DbType%2A> 属性。 反过来， <xref:System.Data.OleDb.OleDbParameter> 该类继承此属性，并且还定义 <xref:System.Data.OleDb.OleDbParameter.OleDbType%2A> 属性。  
  
   
  
## Examples  
 下面的示例通过中的集合，创建派生类的多个实例 <xref:System.Data.SqlClient.SqlParameter> <xref:System.Data.SqlClient.SqlParameterCollection> <xref:System.Data.SqlClient.SqlDataAdapter> 。 这些参数用于从数据源中选择数据，并将数据放入中 <xref:System.Data.DataSet> 。 此示例假设已 <xref:System.Data.DataSet> <xref:System.Data.SqlClient.SqlDataAdapter> 使用相应的架构、命令和连接创建了和。  
  
 [!code-csharp[Classic WebData SqlParameter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlParameter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlParameter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlParameter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>若要提升 .NET Framework 数据提供程序之间的一致性，请将继承类命名为形式 <paramref name="Prv" /> 参数，其中 <paramref name="Prv" /> ，是为特定 .NET Framework 数据提供程序命名空间中的所有类指定的统一前缀。 例如， <paramref name="Sql" /> 是 <see cref="T:System.Data.SqlClient.SqlCommand" /> 命名空间中类的前缀 <see langword="System.Data.SqlClient" /> 。  
  
从接口继承时 <see cref="T:System.Data.IDataParameter" /> ，应实现以下构造函数： 
 <list type="table"><listheader><term> 项 
 </term><description> 描述 
 </description></listheader><item><term> PrvParameter ( # A1 
 </term><description> 初始化参数类的新实例。  
  
 </description></item><item><term> PrvParameter (字符串名称，PrvDbType dataType)  
 </term><description> 使用参数名称和数据类型初始化参数类的新实例。  
  
 </description></item><item><term> PrvParameter (字符串名称，对象值)  
 </term><description> 使用参数名称和作为参数值的对象初始化参数类的新实例。  
  
 </description></item><item><term> PrvParameter (字符串名称、PrvDbType dataType、int size)  
 </term><description> 使用参数名称、数据类型和宽度初始化参数类的新实例。  
  
 </description></item><item><term> PrvParameter (字符串名称、PrvDbType dataType、int size、string srcColumn)  
 </term><description> 使用参数名称、数据类型、宽度和源列名称初始化 DbParameter 类的新实例。  
  
 </description></item><item><term> PrvParameter (string parameterName，PrvDbType dbType，int size，ParameterDirection direction，Boolean isNullable，Byte 精度，Byte scale，string srcColumn，DataRowVersion srcVersion，object value)  
 </term><description> <see cref="T:System.Data.OleDb.OleDbParameter" />使用参数名称、数据类型、宽度、源列名、参数方向、数值精度和其他属性初始化类的新实例。  
  
 </description></item></list></para></block>
  </Docs>
  <Members>
    <Member MemberName="DbType">
      <MemberSignature Language="C#" Value="public System.Data.DbType DbType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.DbType DbType" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataParameter.DbType" />
      <MemberSignature Language="VB.NET" Value="Public Property DbType As DbType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DbType DbType { System::Data::DbType get(); void set(System::Data::DbType value); };" />
      <MemberSignature Language="F#" Value="member this.DbType : System.Data.DbType with get, set" Usage="System.Data.IDataParameter.DbType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DbType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置参数的 <see cref="T:System.Data.DbType" />。</summary>
        <value><see cref="T:System.Data.DbType" /> 值之一。 默认为 <see cref="F:System.Data.DbType.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 PrvDbType (，其中 Prv 表示特定于提供程序的前缀) 并且 <xref:System.Data.SqlClient.SqlParameter.DbType%2A> 已链接。 因此，将 <xref:System.Data.SqlClient.SqlParameter.DbType%2A> PrvDbType 更改为支持 PrvDbType。  
  
 有关支持的数据类型的列表，请参阅相应的 .NET Framework 数据提供程序 PrvDbType 成员。 有关详细信息，请参阅 [DataAdapter 参数](/dotnet/framework/data/adonet/dataadapter-parameters)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">该属性未设置为有效的 <see cref="T:System.Data.DbType" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Direction">
      <MemberSignature Language="C#" Value="public System.Data.ParameterDirection Direction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.ParameterDirection Direction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataParameter.Direction" />
      <MemberSignature Language="VB.NET" Value="Public Property Direction As ParameterDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ParameterDirection Direction { System::Data::ParameterDirection get(); void set(System::Data::ParameterDirection value); };" />
      <MemberSignature Language="F#" Value="member this.Direction : System.Data.ParameterDirection with get, set" Usage="System.Data.IDataParameter.Direction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ParameterDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置一个值，该值指示参数是只可输入的参数、只可输出的参数、双向参数还是存储过程返回值参数。</summary>
        <value><see cref="T:System.Data.ParameterDirection" /> 值之一。 默认为 <see langword="Input" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 <xref:System.Data.ParameterDirection> 是输出，且关联的执行 <xref:System.Data.SqlClient.SqlCommand> 不返回值，则 <xref:System.Data.IDataParameter> 包含 null 值。  
  
 在读取最后一个结果集中的最后一行后，将更新、、 `Output` `InputOut` 和 `ReturnValue` 参数。  
  
   
  
## Examples  
 下面的示例创建一个实现类的实例， <xref:System.Data.SqlClient.SqlParameter> 并设置其一些属性。  
  
 [!code-csharp[Classic WebData SqlParameter.Direction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlParameter.Direction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlParameter.Direction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlParameter.Direction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">属性未设置为有效的 <see cref="T:System.Data.ParameterDirection" /> 值之一。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNullable">
      <MemberSignature Language="C#" Value="public bool IsNullable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNullable" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataParameter.IsNullable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNullable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNullable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNullable : bool" Usage="System.Data.IDataParameter.IsNullable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示参数是否接受 null 值。</summary>
        <value>如果接受 null 值，则为 <see langword="true" />；否则为 <see langword="false" />。 默认为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用类处理 Null 值 <xref:System.DBNull> 。  
  
   
  
## Examples  
 下面的示例创建一个实现类的实例， <xref:System.Data.SqlClient.SqlParameter> 并设置其一些属性。  
  
 [!code-csharp[Classic WebData SqlParameter.IsNullable Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlParameter.IsNullable Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlParameter.IsNullable Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlParameter.IsNullable Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParameterName">
      <MemberSignature Language="C#" Value="public string ParameterName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ParameterName" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataParameter.ParameterName" />
      <MemberSignature Language="VB.NET" Value="Public Property ParameterName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ParameterName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ParameterName : string with get, set" Usage="System.Data.IDataParameter.ParameterName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置 <see cref="T:System.Data.IDataParameter" /> 的名称。</summary>
        <value><see cref="T:System.Data.IDataParameter" /> 的名称。 默认值为一个空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

 <xref:System.Data.IDataParameter.ParameterName%2A>以 \@ *paramname*形式指定。 必须在执行依赖参数的命令前设置 <xref:System.Data.IDataParameter.ParameterName%2A>。  
  
   
  
## Examples  
 下面的示例创建一个实现类的实例， <xref:System.Data.SqlClient.SqlParameter> 并设置其一些属性。  
  
 [!code-csharp[Classic WebData SqlParameter.ParameterName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlParameter.ParameterName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlParameter.ParameterName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlParameter.ParameterName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceColumn">
      <MemberSignature Language="C#" Value="public string SourceColumn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceColumn" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataParameter.SourceColumn" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceColumn As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceColumn { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceColumn : string with get, set" Usage="System.Data.IDataParameter.SourceColumn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置映射到 <see cref="T:System.Data.DataSet" /> 并且用于加载或返回 <see cref="P:System.Data.IDataParameter.Value" /> 的源列的名称。</summary>
        <value>映射到 <see cref="T:System.Data.DataSet" /> 的源列的名称。 默认值为一个空字符串。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与的值之间的链接 <xref:System.Data.IDataParameter> <xref:System.Data.DataTable> 可以是双向的，具体取决于属性的值 <xref:System.Data.IDataParameter.Direction%2A> 。  
  
   
  
## Examples  
 下面的示例创建一个实现类的实例， <xref:System.Data.SqlClient.SqlParameter> 并设置其一些属性。  
  
 [!code-csharp[Classic WebData SqlParameter.SourceColumn Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlParameter.SourceColumn Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlParameter.SourceColumn Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlParameter.SourceColumn Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceVersion">
      <MemberSignature Language="C#" Value="public System.Data.DataRowVersion SourceVersion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.DataRowVersion SourceVersion" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataParameter.SourceVersion" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceVersion As DataRowVersion" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataRowVersion SourceVersion { System::Data::DataRowVersion get(); void set(System::Data::DataRowVersion value); };" />
      <MemberSignature Language="F#" Value="member this.SourceVersion : System.Data.DataRowVersion with get, set" Usage="System.Data.IDataParameter.SourceVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataRowVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置要在加载 <see cref="P:System.Data.IDataParameter.Value" /> 时使用的 <see cref="T:System.Data.DataRowVersion" />。</summary>
        <value><see cref="T:System.Data.DataRowVersion" /> 值之一。 默认为 <see langword="Current" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在过程中，将使用此属性 <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> <xref:System.Data.Common.DbDataAdapter.Update%2A> 来确定是否将原始值或当前值用于某个参数值。 这允许更新主键。 和将忽略此属性 <xref:System.Data.IDbDataAdapter.InsertCommand%2A> <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> 。 此属性设置为属性使用的的版本 <xref:System.Data.DataRow> <xref:System.Data.DataRow.Item%2A> ，或 <xref:System.Data.DataRow.GetChildRows%2A> 对象的方法 <xref:System.Data.DataRow> 。  
  
   
  
## Examples  
 下面的示例创建一个实现类的实例， <xref:System.Data.SqlClient.SqlParameter> 并设置其一些属性。  
  
 [!code-csharp[Classic WebData SqlParameter.SourceVersion Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlParameter.SourceVersion Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlParameter.SourceVersion Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlParameter.SourceVersion Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">属性未设置为 <see cref="T:System.Data.DataRowVersion" /> 值之一。</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object? Value { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataParameter.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj with get, set" Usage="System.Data.IDataParameter.Value" />
      <MemberSignature Language="C#" Value="public object Value { get; set; }" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置参数的值。</summary>
        <value>充当参数值的 <see cref="T:System.Object" />。 默认值为 null。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于输入参数，值将绑定到 <xref:System.Data.IDbCommand> 发送到服务器的。 对于输出和返回值参数，值在完成时设置，在 <xref:System.Data.IDbCommand> 关闭后设置 <xref:System.Data.IDataReader> 。  
  
 在将 null 参数值发送到服务器时，用户必须指定 `DBNull` ，而不是 null。 系统中的 NULL 值是没有值的空对象。 `DBNull` 用于表示 NULL 值。  
  
 如果应用程序指定了数据库类型，则当提供程序将数据发送到服务器时，绑定值将转换为该类型。 如果提供程序支持接口，则会尝试转换任何类型的值 <xref:System.IConvertible> 。 如果指定的类型与值不兼容，则可能会导致转换错误。  
  
 <xref:System.Data.SqlClient.SqlParameter.Value%2A>属性被覆盖 <xref:System.Data.Common.DbDataAdapter.Update%2A> 。  
  
   
  
## Examples  
 下面的示例创建一个实现类的实例， <xref:System.Data.SqlClient.SqlParameter> 并设置其一些属性。  
  
 [!code-csharp[Classic WebData SqlParameter.Value Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlParameter.Value Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlParameter.Value Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlParameter.Value Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
