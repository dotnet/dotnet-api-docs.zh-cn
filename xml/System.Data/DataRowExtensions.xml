<Type Name="DataRowExtensions" FullName="System.Data.DataRowExtensions">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d7f2840aca6c153f4a4952c7a4c0fe17b7adccca" /><Meta Name="ms.sourcegitcommit" Value="943c8cdbe5b47c6c296a6f4b73038bbd43da0dd2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/12/2021" /><Meta Name="ms.locfileid" Value="100312948" /></Metadata><TypeSignature Language="C#" Value="public static class DataRowExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataRowExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataRowExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module DataRowExtensions" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataRowExtensions abstract sealed" />
  <TypeSignature Language="F#" Value="type DataRowExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Data.Common" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Data.DataSetExtensions" FromVersion="4.0.0.0" To="System.Data.Common" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="System.Data.DataSetExtensions" FromVersion="4.0.0.0" To="System.Data.Common" ToVersion="4.2.1.0" FrameworkAlternate="netcore-3.0" />
    <TypeForwarding From="System.Data.DataSetExtensions" FromVersion="4.0.1.0" To="System.Data.Common" ToVersion="4.2.2.0" FrameworkAlternate="netcore-3.1" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>定义 <see cref="T:System.Data.DataRow" /> 类的扩展方法。 这是一个静态类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet>已通过类的两个新方法 <xref:System.Data.DataRow> （和）扩展了 <xref:System.Data.DataRowExtensions.Field%2A> API <xref:System.Data.DataRowExtensions.SetField%2A> 。 您可以使用这些方法来 [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)] 针对对象建立表达式和方法查询 <xref:System.Data.DataTable> 。 它们是用于访问 [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)] 表达式和方法查询中的列值的建议方法。 有关详细信息，请参阅 [泛型字段和 SetField 方法](/dotnet/framework/data/adonet/generic-field-and-setfield-methods-linq-to-dataset)。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Field&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>提供对 <see cref="T:System.Data.DataRow" /> 中的每个列值的强类型访问。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Field&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Field&lt;T&gt; (this System.Data.DataRow row, System.Data.DataColumn column);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Field&lt;T&gt;(class System.Data.DataRow row, class System.Data.DataColumn column) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Field(Of T) (row As DataRow, column As DataColumn) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T Field(System::Data::DataRow ^ row, System::Data::DataColumn ^ column);" />
      <MemberSignature Language="F#" Value="static member Field : System.Data.DataRow * System.Data.DataColumn -&gt; 'T" Usage="System.Data.DataRowExtensions.Field (row, column)" />
      <MemberSignature Language="C#" Value="public static T? Field&lt;T&gt; (this System.Data.DataRow row, System.Data.DataColumn column);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="row" Type="System.Data.DataRow" RefType="this" />
        <Parameter Name="column" Type="System.Data.DataColumn" />
      </Parameters>
      <Docs>
        <typeparam name="T">指定列的返回类型的泛型形参。</typeparam>
        <param name="row">输入 <see cref="T:System.Data.DataRow" />，作为扩展方法的 <see langword="this" /> 实例。</param>
        <param name="column">输入 <see cref="T:System.Data.DataColumn" /> 对象，该对象指定要返回其值的列。</param>
        <summary>为指定行中的每个列值提供强类型访问。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn)" /> 方法还支持可以为 null 的类型。</summary>
        <returns>由 <paramref name="column" /> 指定的 <paramref name="T" /> 类型的 <see cref="T:System.Data.DataColumn" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet>类用类的实例表示 **null** 值 <xref:System.DBNull.Value> <xref:System.DBNull> 。  [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)]访问包含 **null** 值的列的表达式会 <xref:System.InvalidCastException> 在运行时生成。 此外，不 <xref:System.Data.DataSet> 支持可以为 null 的类型。 <xref:System.Data.DataRowExtensions.Field%2A>方法为将列访问为可以为 null 的类型提供支持。  如果中的基础值 <xref:System.Data.DataSet> 为 <xref:System.DBNull.Value> ，则返回的可以为 null 的类型的值为 **null**。  
  
 如果指定的值 <xref:System.Data.DataColumn> 为 <xref:System.DBNull.Value> ，并且 `T` 是引用类型或可以为 null 的类型，则返回类型将为 **null**。 <xref:System.Data.DataRowExtensions.Field%2A>方法不会返回 <xref:System.DBNull.Value> 。  
  
 <xref:System.Data.DataRowExtensions.Field%2A>方法不执行类型转换。 如果需要类型转换，则应首先使用方法获取列值 <xref:System.Data.DataRowExtensions.Field%2A> 。 然后，应将列值转换为另一种类型。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">基础列的值类型无法转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="column" /> 指定的列不会出现在包含 <see cref="T:System.Data.DataRow" /> 的 <see cref="T:System.Data.DataTable" /> 中。</exception>
        <exception cref="T:System.NullReferenceException">将“null”值赋给了不可为 null 的类型。</exception>
      </Docs>
    </Member>
    <Member MemberName="Field&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Field&lt;T&gt; (this System.Data.DataRow row, int columnIndex);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Field&lt;T&gt;(class System.Data.DataRow row, int32 columnIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Field(Of T) (row As DataRow, columnIndex As Integer) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T Field(System::Data::DataRow ^ row, int columnIndex);" />
      <MemberSignature Language="F#" Value="static member Field : System.Data.DataRow * int -&gt; 'T" Usage="System.Data.DataRowExtensions.Field (row, columnIndex)" />
      <MemberSignature Language="C#" Value="public static T? Field&lt;T&gt; (this System.Data.DataRow row, int columnIndex);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="row" Type="System.Data.DataRow" RefType="this" />
        <Parameter Name="columnIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">指定列的返回类型的泛型形参。</typeparam>
        <param name="row">输入 <see cref="T:System.Data.DataRow" />，作为扩展方法的 <see langword="this" /> 实例。</param>
        <param name="columnIndex">列索引。</param>
        <summary>为指定行中的每个列值提供强类型访问。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32)" /> 方法还支持可以为 null 的类型。</summary>
        <returns>由 <paramref name="columnIndex" /> 指定的 <paramref name="T" /> 类型的 <see cref="T:System.Data.DataColumn" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet>类用类的实例表示 **null** 值 <xref:System.DBNull.Value> <xref:System.DBNull> 。  [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)]访问包含 **null** 值的列的表达式会 <xref:System.InvalidCastException> 在运行时生成。 此外， <xref:System.Data.DataSet> 不支持可以为 null 的类型。 <xref:System.Data.DataRowExtensions.Field%2A>方法为将列访问为可以为 null 的类型提供支持。  如果中的基础值 <xref:System.Data.DataSet> 为 <xref:System.DBNull.Value> ，则返回的可以为 null 的类型的值为 **null**。  
  
 如果指定的值 <xref:System.Data.DataColumn> 为 **null** 并且 `T` 是引用类型或可以为 null 的类型，则返回类型将为 **null**。  <xref:System.Data.DataRowExtensions.Field%2A>方法不会返回 <xref:System.DBNull.Value> 。  
  
 <xref:System.Data.DataRowExtensions.Field%2A>方法不执行类型转换。 如果需要类型转换，则应首先使用方法获取列值 <xref:System.Data.DataRowExtensions.Field%2A> 。 然后，应将列值转换为另一种类型。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">基础列的值类型无法转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" /> 指定的列不存在于包含 <see cref="T:System.Data.DataRow" /> 的 <see cref="T:System.Data.DataTable" /> 中。</exception>
        <exception cref="T:System.NullReferenceException">将“null”值赋给了不可为 null 的类型。</exception>
      </Docs>
    </Member>
    <Member MemberName="Field&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Field&lt;T&gt; (this System.Data.DataRow row, string columnName);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Field&lt;T&gt;(class System.Data.DataRow row, string columnName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Field(Of T) (row As DataRow, columnName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T Field(System::Data::DataRow ^ row, System::String ^ columnName);" />
      <MemberSignature Language="F#" Value="static member Field : System.Data.DataRow * string -&gt; 'T" Usage="System.Data.DataRowExtensions.Field (row, columnName)" />
      <MemberSignature Language="C#" Value="public static T? Field&lt;T&gt; (this System.Data.DataRow row, string columnName);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="row" Type="System.Data.DataRow" RefType="this" />
        <Parameter Name="columnName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">指定列的返回类型的泛型形参。</typeparam>
        <param name="row">输入 <see cref="T:System.Data.DataRow" />，作为扩展方法的 <see langword="this" /> 实例。</param>
        <param name="columnName">要返回其值的列名称。</param>
        <summary>为指定行中的每个列值提供强类型访问。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String)" /> 方法还支持可以为 null 的类型。</summary>
        <returns>由 <paramref name="columnName" /> 指定的 <paramref name="T" /> 类型的 <see cref="T:System.Data.DataColumn" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet>类用类的实例表示 **null** 值 <xref:System.DBNull.Value> <xref:System.DBNull> 。 [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)]访问包含 **null** 值的列的表达式会 <xref:System.InvalidCastException> 在运行时生成。 此外，不 <xref:System.Data.DataSet> 支持可以为 null 的类型。 <xref:System.Data.DataRowExtensions.Field%2A>方法为将列访问为可以为 null 的类型提供支持。 如果中的基础值 <xref:System.Data.DataSet> 为 <xref:System.DBNull.Value> ，则返回的可以为 null 的类型的值为 **null**。  
  
 如果指定的值 <xref:System.Data.DataColumn> 为 **null** 并且 `T` 是引用类型或可以为 null 的类型，则返回类型将为 **null**。 <xref:System.Data.DataRowExtensions.Field%2A>方法不会返回 <xref:System.DBNull.Value> 。  
  
 <xref:System.Data.DataRowExtensions.Field%2A>方法不执行类型转换。 如果需要类型转换，则应首先使用方法获取列值 <xref:System.Data.DataRowExtensions.Field%2A> 。 然后，应将列值转换为另一种类型。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">基础列的值类型无法转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="columnName" /> 指定的列不会出现在包含 <see cref="T:System.Data.DataRow" /> 的 <see cref="T:System.Data.DataTable" /> 中。</exception>
        <exception cref="T:System.NullReferenceException">将 <see langword="null" /> 值分配给不可为 null 的类型。</exception>
      </Docs>
    </Member>
    <Member MemberName="Field&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Field&lt;T&gt; (this System.Data.DataRow row, System.Data.DataColumn column, System.Data.DataRowVersion version);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Field&lt;T&gt;(class System.Data.DataRow row, class System.Data.DataColumn column, valuetype System.Data.DataRowVersion version) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Field(Of T) (row As DataRow, column As DataColumn, version As DataRowVersion) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T Field(System::Data::DataRow ^ row, System::Data::DataColumn ^ column, System::Data::DataRowVersion version);" />
      <MemberSignature Language="F#" Value="static member Field : System.Data.DataRow * System.Data.DataColumn * System.Data.DataRowVersion -&gt; 'T" Usage="System.Data.DataRowExtensions.Field (row, column, version)" />
      <MemberSignature Language="C#" Value="public static T? Field&lt;T&gt; (this System.Data.DataRow row, System.Data.DataColumn column, System.Data.DataRowVersion version);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="row" Type="System.Data.DataRow" RefType="this" />
        <Parameter Name="column" Type="System.Data.DataColumn" />
        <Parameter Name="version" Type="System.Data.DataRowVersion" />
      </Parameters>
      <Docs>
        <typeparam name="T">指定列的返回类型的泛型形参。</typeparam>
        <param name="row">输入 <see cref="T:System.Data.DataRow" />，作为扩展方法的 <see langword="this" /> 实例。</param>
        <param name="column">输入 <see cref="T:System.Data.DataColumn" /> 对象，该对象指定要返回其值的列。</param>
        <param name="version"><see cref="T:System.Data.DataRowVersion" /> 枚举，指定要返回的列值版本，如 <see langword="Current" /> 或 <see langword="Original" /> 版本。</param>
        <summary>为指定行中的每个列值提供强类型访问。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)" /> 方法还支持可以为 null 的类型。</summary>
        <returns>由 <paramref name="column" /> 和 <paramref name="version" /> 指定的 <paramref name="T" /> 类型的 <see cref="T:System.Data.DataColumn" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet>类用类的实例表示 **null** 值 <xref:System.DBNull.Value> <xref:System.DBNull> 。  [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)]访问包含 **null** 值的列的表达式会 <xref:System.InvalidCastException> 在运行时生成。 此外， <xref:System.Data.DataSet> 不支持可以为 null 的类型。 <xref:System.Data.DataRowExtensions.Field%2A>方法为将列访问为可以为 null 的类型提供支持。  如果中的基础值 <xref:System.Data.DataSet> 为 <xref:System.DBNull.Value> ，则返回的可以为 null 的类型的值为 **null**。  
  
 如果指定的值 <xref:System.Data.DataColumn> 为 null 并且 `T` 是引用类型或可以为 null 的类型，则返回类型将为 **null**。 <xref:System.Data.DataRowExtensions.Field%2A>方法不会返回 <xref:System.DBNull.Value> 。  
  
 <xref:System.Data.DataRowExtensions.Field%2A>方法不执行类型转换。 如果需要类型转换，则应首先使用方法获取列值 <xref:System.Data.DataRowExtensions.Field%2A> 。 然后，应将列值转换为另一种类型。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">基础列的值类型无法转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="column" /> 指定的列不存在于包含 <see cref="T:System.Data.DataRow" /> 的 <see cref="T:System.Data.DataTable" /> 中。</exception>
        <exception cref="T:System.NullReferenceException">将“null”值赋给了不可为 null 的类型。</exception>
      </Docs>
    </Member>
    <Member MemberName="Field&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Field&lt;T&gt; (this System.Data.DataRow row, int columnIndex, System.Data.DataRowVersion version);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Field&lt;T&gt;(class System.Data.DataRow row, int32 columnIndex, valuetype System.Data.DataRowVersion version) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Field(Of T) (row As DataRow, columnIndex As Integer, version As DataRowVersion) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T Field(System::Data::DataRow ^ row, int columnIndex, System::Data::DataRowVersion version);" />
      <MemberSignature Language="F#" Value="static member Field : System.Data.DataRow * int * System.Data.DataRowVersion -&gt; 'T" Usage="System.Data.DataRowExtensions.Field (row, columnIndex, version)" />
      <MemberSignature Language="C#" Value="public static T? Field&lt;T&gt; (this System.Data.DataRow row, int columnIndex, System.Data.DataRowVersion version);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="row" Type="System.Data.DataRow" RefType="this" />
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="version" Type="System.Data.DataRowVersion" />
      </Parameters>
      <Docs>
        <typeparam name="T">指定列的返回类型的泛型形参。</typeparam>
        <param name="row">输入 <see cref="T:System.Data.DataRow" />，作为扩展方法的 <see langword="this" /> 实例。</param>
        <param name="columnIndex">要返回其值的列的从零开始的序号。</param>
        <param name="version"><see cref="T:System.Data.DataRowVersion" /> 枚举，指定要返回的列值版本，如 <see langword="Current" /> 或 <see langword="Original" /> 版本。</param>
        <summary>为指定行中的每个列值提供强类型访问。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)" /> 方法还支持可以为 null 的类型。</summary>
        <returns>由 <paramref name="ordinal" /> 和 <paramref name="version" /> 指定的 <paramref name="T" /> 类型的 <see cref="T:System.Data.DataColumn" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet>类用类的实例表示 **null** 值 <xref:System.DBNull.Value> <xref:System.DBNull> 。  [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)]访问包含 **null** 值的列的表达式会 <xref:System.InvalidCastException> 在运行时生成。 此外， <xref:System.Data.DataSet> 不支持可以为 null 的类型。 <xref:System.Data.DataRowExtensions.Field%2A>方法为将列访问为可以为 null 的类型提供支持。  如果中的基础值 <xref:System.Data.DataSet> 为 <xref:System.DBNull.Value> ，则返回的可以为 null 的类型的值为 **null**。  
  
 如果指定的值 <xref:System.Data.DataColumn> 为 null 并且 `T` 是引用类型或可以为 null 的类型，则返回类型将为 **null**。 <xref:System.Data.DataRowExtensions.Field%2A>方法不会返回 <xref:System.DBNull.Value> 。  
  
 <xref:System.Data.DataRowExtensions.Field%2A>方法不执行类型转换。 如果需要类型转换，则应首先使用方法获取列值 <xref:System.Data.DataRowExtensions.Field%2A> 。 然后，应将列值转换为另一种类型。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">基础列的值类型无法转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" /> 指定的列不存在于包含 <see cref="T:System.Data.DataRow" /> 的 <see cref="T:System.Data.DataTable" /> 中。</exception>
        <exception cref="T:System.NullReferenceException">将“null”值赋给了不可为 null 的类型。</exception>
      </Docs>
    </Member>
    <Member MemberName="Field&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Field&lt;T&gt; (this System.Data.DataRow row, string columnName, System.Data.DataRowVersion version);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Field&lt;T&gt;(class System.Data.DataRow row, string columnName, valuetype System.Data.DataRowVersion version) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String,System.Data.DataRowVersion)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Field(Of T) (row As DataRow, columnName As String, version As DataRowVersion) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static T Field(System::Data::DataRow ^ row, System::String ^ columnName, System::Data::DataRowVersion version);" />
      <MemberSignature Language="F#" Value="static member Field : System.Data.DataRow * string * System.Data.DataRowVersion -&gt; 'T" Usage="System.Data.DataRowExtensions.Field (row, columnName, version)" />
      <MemberSignature Language="C#" Value="public static T? Field&lt;T&gt; (this System.Data.DataRow row, string columnName, System.Data.DataRowVersion version);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="row" Type="System.Data.DataRow" RefType="this" />
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="version" Type="System.Data.DataRowVersion" />
      </Parameters>
      <Docs>
        <typeparam name="T">指定列的返回类型的泛型形参。</typeparam>
        <param name="row">输入 <see cref="T:System.Data.DataRow" />，作为扩展方法的 <see langword="this" /> 实例。</param>
        <param name="columnName">要返回其值的列名称。</param>
        <param name="version"><see cref="T:System.Data.DataRowVersion" /> 枚举，指定要返回的列值版本，如 <see langword="Current" /> 或 <see langword="Original" /> 版本。</param>
        <summary>为指定行中的每个列值提供强类型访问。 <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String,System.Data.DataRowVersion)" /> 方法还支持可以为 null 的类型。</summary>
        <returns>由 <paramref name="columnName" /> 和 <paramref name="version" /> 指定的 <paramref name="T" /> 类型的 <see cref="T:System.Data.DataColumn" /> 值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataSet>类用类的实例表示 **null** 值 <xref:System.DBNull.Value> <xref:System.DBNull> 。  [!INCLUDE[vbteclinqext](~/includes/vbteclinqext-md.md)]访问包含 **null** 值的列的表达式会 <xref:System.InvalidCastException> 在运行时生成。 此外， <xref:System.Data.DataSet> 不支持可以为 null 的类型。 <xref:System.Data.DataRowExtensions.Field%2A>方法为将列访问为可以为 null 的类型提供支持。  如果中的基础值 <xref:System.Data.DataSet> 为 <xref:System.DBNull.Value> ，则返回的可以为 null 的类型的值为 **null**。  
  
 如果指定的值 <xref:System.Data.DataColumn> 为 null 并且 `T` 是引用类型或可以为 null 的类型，则返回类型将为 **null**。 <xref:System.Data.DataRowExtensions.Field%2A>方法不会返回 <xref:System.DBNull.Value> 。  
  
 <xref:System.Data.DataRowExtensions.Field%2A>方法不执行类型转换。 如果需要类型转换，则应首先使用方法获取列值 <xref:System.Data.DataRowExtensions.Field%2A> 。 然后，应将列值转换为另一种类型。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">基础列的值类型无法转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="columnName" /> 指定的列不存在于包含 <see cref="T:System.Data.DataRow" /> 的 <see cref="T:System.Data.DataTable" /> 中。</exception>
        <exception cref="T:System.NullReferenceException">将“null”值赋给了不可为 null 的类型。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetField&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>为 <see cref="T:System.Data.DataRow" /> 中的指定列设置一个新值。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetField&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void SetField&lt;T&gt; (this System.Data.DataRow row, System.Data.DataColumn column, T value);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetField&lt;T&gt;(class System.Data.DataRow row, class System.Data.DataColumn column, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Data.DataColumn,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetField(Of T) (row As DataRow, column As DataColumn, value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetField(System::Data::DataRow ^ row, System::Data::DataColumn ^ column, T value);" />
      <MemberSignature Language="F#" Value="static member SetField : System.Data.DataRow * System.Data.DataColumn * 'T -&gt; unit" Usage="System.Data.DataRowExtensions.SetField (row, column, value)" />
      <MemberSignature Language="C#" Value="public static void SetField&lt;T&gt; (this System.Data.DataRow row, System.Data.DataColumn column, T? value);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="row" Type="System.Data.DataRow" RefType="this" />
        <Parameter Name="column" Type="System.Data.DataColumn" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">指定列的值类型的泛型形参。</typeparam>
        <param name="row">输入 <see cref="T:System.Data.DataRow" />，作为扩展方法的 <see langword="this" /> 实例。</param>
        <param name="column">输入 <see cref="T:System.Data.DataColumn" /> 指定要检索的行值。</param>
        <param name="value">指定列的新行值，类型为 <paramref name="T" />。</param>
        <summary>为 <see cref="T:System.Data.DataRow" /> 中的指定列设置一个新值。 <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Data.DataColumn,``0)" /> 方法还支持可以为 null 的类型。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `value` 为 **null**，则 <xref:System.Data.DataRowExtensions.SetField%2A> 方法会在基础中将 **null** 值转换为 <xref:System.DBNull.Value> <xref:System.Data.DataColumn> 。  
  
 <xref:System.Data.DataRowExtensions.SetField%2A>方法不执行任何类型转换。 但这并不意味着不会发生类型转换。 <xref:System.Data.DataRowExtensions.SetField%2A> 方法公开 [!INCLUDE[ado_whidbey_long](~/includes/ado-whidbey-long-md.md)] 类的 <xref:System.Data.DataRow> 行为。 类型转换可以由 <xref:System.Data.DataRow> 对象执行，转换的值随后将保存到该行。  
  
 可以通过 <xref:System.Data.DataRowExtensions.SetField%2A> 基础对象中的方法向上传递异常 <xref:System.Data.DataRow> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">找不到由 <paramref name="column" /> 指定的列。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="column" /> 为“null”。</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试对已删除的行设置值时发生。</exception>
        <exception cref="T:System.InvalidCastException">基础列的值类型无法转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetField&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void SetField&lt;T&gt; (this System.Data.DataRow row, int columnIndex, T value);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetField&lt;T&gt;(class System.Data.DataRow row, int32 columnIndex, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Int32,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetField(Of T) (row As DataRow, columnIndex As Integer, value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetField(System::Data::DataRow ^ row, int columnIndex, T value);" />
      <MemberSignature Language="F#" Value="static member SetField : System.Data.DataRow * int * 'T -&gt; unit" Usage="System.Data.DataRowExtensions.SetField (row, columnIndex, value)" />
      <MemberSignature Language="C#" Value="public static void SetField&lt;T&gt; (this System.Data.DataRow row, int columnIndex, T? value);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="row" Type="System.Data.DataRow" RefType="this" />
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">指定列的值类型的泛型形参。</typeparam>
        <param name="row">输入 <see cref="T:System.Data.DataRow" />，作为扩展方法的 <see langword="this" /> 实例。</param>
        <param name="columnIndex">要设置其值的列的从零开始的序号。</param>
        <param name="value">指定列的新行值，类型为 <paramref name="T" />。</param>
        <summary>为在其上调用此方法的 <see cref="T:System.Data.DataRow" /> 中的指定列设置一个新值。 <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Int32,``0)" /> 方法还支持可以为 null 的类型。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `value` 为 **null**，则 <xref:System.Data.DataRowExtensions.SetField%2A> 方法会在基础中将 **null** 值转换为 <xref:System.DBNull.Value> <xref:System.Data.DataColumn> 。  
  
 <xref:System.Data.DataRowExtensions.SetField%2A>方法不执行任何类型转换。 但这并不意味着不会发生类型转换。 <xref:System.Data.DataRowExtensions.SetField%2A> 方法公开 [!INCLUDE[ado_whidbey_long](~/includes/ado-whidbey-long-md.md)] 类的 <xref:System.Data.DataRow> 行为。 类型转换可以由 <xref:System.Data.DataRow> 对象执行，转换的值随后将保存到该行。  
  
 可以通过 <xref:System.Data.DataRowExtensions.SetField%2A> 基础对象中的方法向上传递异常 <xref:System.Data.DataRow> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试对已删除的行设置值时发生。</exception>
        <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal" /> 参数超出范围。</exception>
        <exception cref="T:System.InvalidCastException">基础列的值类型无法转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetField&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void SetField&lt;T&gt; (this System.Data.DataRow row, string columnName, T value);" FrameworkAlternate="dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;netcore-3.0;netcore-3.1;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetField&lt;T&gt;(class System.Data.DataRow row, string columnName, !!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.String,``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub SetField(Of T) (row As DataRow, columnName As String, value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static void SetField(System::Data::DataRow ^ row, System::String ^ columnName, T value);" />
      <MemberSignature Language="F#" Value="static member SetField : System.Data.DataRow * string * 'T -&gt; unit" Usage="System.Data.DataRowExtensions.SetField (row, columnName, value)" />
      <MemberSignature Language="C#" Value="public static void SetField&lt;T&gt; (this System.Data.DataRow row, string columnName, T? value);" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.DataSetExtensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="row" Type="System.Data.DataRow" RefType="this" />
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">指定列的值类型的泛型形参。</typeparam>
        <param name="row">输入 <see cref="T:System.Data.DataRow" />，作为扩展方法的 <see langword="this" /> 实例。</param>
        <param name="columnName">要设置其值的列的名称。</param>
        <param name="value">指定列的新行值，类型为 <paramref name="T" />。</param>
        <summary>为 <see cref="T:System.Data.DataRow" /> 中的指定列设置一个新值。 <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.String,``0)" /> 方法还支持可以为 null 的类型。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `value` 为 **null**，则 <xref:System.Data.DataRowExtensions.SetField%2A> 方法会在基础中将 **null** 值转换为 <xref:System.DBNull.Value> <xref:System.Data.DataColumn> 。  
  
 <xref:System.Data.DataRowExtensions.SetField%2A>方法不执行任何类型转换。 但这并不意味着不会发生类型转换。 <xref:System.Data.DataRowExtensions.SetField%2A> 方法公开 [!INCLUDE[ado_whidbey_long](~/includes/ado-whidbey-long-md.md)] 类的 <xref:System.Data.DataRow> 行为。 类型转换可以由 <xref:System.Data.DataRow> 对象执行，转换的值随后将保存到该行。  
  
 可以通过 <xref:System.Data.DataRowExtensions.SetField%2A> 基础对象中的方法向上传递异常 <xref:System.Data.DataRow> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">找不到由 <paramref name="columnName" /> 指定的列。</exception>
        <exception cref="T:System.Data.DeletedRowInaccessibleException">尝试对已删除的行设置值时发生。</exception>
        <exception cref="T:System.InvalidCastException">基础列的值类型无法转换为泛型参数 <paramref name="T" /> 指定的类型。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
