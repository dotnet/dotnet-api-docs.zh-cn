<Type Name="IDataAdapter" FullName="System.Data.IDataAdapter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="abc8731decbf6a78c3573629edbf62dc174aa5bc" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83925352" /></Metadata><TypeSignature Language="C#" Value="public interface IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataAdapter" />
  <TypeSignature Language="F#" Value="type IDataAdapter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Data.Common" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="10684-101">允许对象实现 DataAdapter，并且表示一组用于填充和更新 <see cref="T:System.Data.DataSet" /> 及数据源的方法以及与映射操作有关的属性。</span><span class="sxs-lookup"><span data-stu-id="10684-101">Allows an object to implement a DataAdapter, and represents a set of methods and mapping action-related properties that are used to fill and update a <see cref="T:System.Data.DataSet" /> and update a data source.</span></span>  
  
 <span data-ttu-id="10684-102"><see cref="T:System.Data.IDbDataAdapter" /> 实例针对作为（或类似于）具有文字命令（如 Transact-SQL）的关系数据库的数据源，而 <see cref="T:System.Data.IDataAdapter" /> 实例可使用任何类型的数据源。</span><span class="sxs-lookup"><span data-stu-id="10684-102"><see cref="T:System.Data.IDbDataAdapter" /> instances are for data sources that are (or resemble) relational databases with textual commands (like Transact-SQL), while <see cref="T:System.Data.IDataAdapter" /> instances could can use any type of data source.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10684-103"><xref:System.Data.IDataAdapter> 接口允许继承类实现 DataAdapter 类，该类表示数据源与 <xref:System.Data.DataSet>之间的桥梁。</span><span class="sxs-lookup"><span data-stu-id="10684-103">The <xref:System.Data.IDataAdapter> interface allows an inheriting class to implement a DataAdapter class, which represents the bridge between a data source and a <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="10684-104">有关 DataAdapter 类的详细信息，请参阅[从 DataAdapter 填充数据集](/dotnet/framework/data/adonet/populating-a-dataset-from-a-dataadapter)。</span><span class="sxs-lookup"><span data-stu-id="10684-104">For more information about DataAdapter classes, see [Populating a DataSet from a DataAdapter](/dotnet/framework/data/adonet/populating-a-dataset-from-a-dataadapter).</span></span>  
  
 <span data-ttu-id="10684-105">应用程序不会直接创建 <xref:System.Data.IDataAdapter> 接口的实例，而是实现继承 <xref:System.Data.IDataAdapter>的类的实例。</span><span class="sxs-lookup"><span data-stu-id="10684-105">An application does not create an instance of the <xref:System.Data.IDataAdapter> interface directly, but implements an instance of a class that inherits <xref:System.Data.IDataAdapter>.</span></span>  
  
 <span data-ttu-id="10684-106">继承 <xref:System.Data.IDataAdapter> 的类必须实现继承成员，并且通常定义其他成员来添加特定于提供程序的功能。</span><span class="sxs-lookup"><span data-stu-id="10684-106">Classes that inherit <xref:System.Data.IDataAdapter> must implement the inherited members, and they typically define additional members to add provider-specific functionality.</span></span> <span data-ttu-id="10684-107">例如，<xref:System.Data.IDataAdapter> 接口定义一个采用 <xref:System.Data.DataSet> 作为参数的 <xref:System.Data.IDataAdapter.Fill%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="10684-107">For example, the <xref:System.Data.IDataAdapter> interface defines a <xref:System.Data.IDataAdapter.Fill%2A> method that takes a <xref:System.Data.DataSet> as a parameter.</span></span> <span data-ttu-id="10684-108">相反，<xref:System.Data.OleDb.OleDbDataAdapter> 类继承 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 方法，同时还定义将 ADO 记录集对象作为参数的 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> 方法的两个附加重载。</span><span class="sxs-lookup"><span data-stu-id="10684-108">In turn, the <xref:System.Data.OleDb.OleDbDataAdapter> class inherits the <xref:System.Data.Common.DbDataAdapter.Fill%2A> method and also defines two additional overloads of the <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> method that take an ADO Recordset object as a parameter.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10684-109">下面的示例使用派生类 <xref:System.Data.SqlClient.SqlCommand>、<xref:System.Data.SqlClient.SqlDataAdapter>和 <xref:System.Data.SqlClient.SqlConnection>从数据库中选择记录。</span><span class="sxs-lookup"><span data-stu-id="10684-109">The following example uses the derived classes, <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, and <xref:System.Data.SqlClient.SqlConnection>, to select records from a database.</span></span> <span data-ttu-id="10684-110">然后返回填充的 <xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="10684-110">The filled <xref:System.Data.DataSet> is then returned.</span></span> <span data-ttu-id="10684-111">为此，向方法传递了一个初始化 <xref:System.Data.DataSet>、一个连接字符串和一个作为 Transact-sql SELECT 语句的查询字符串。</span><span class="sxs-lookup"><span data-stu-id="10684-111">To do this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is a Transact-SQL SELECT statement.</span></span>  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para><span data-ttu-id="10684-112">若要提升 .NET Framework 数据提供程序之间的一致性，请将继承类命名为 <paramref name="Prv" /> DataAdapter 格式，其中 <paramref name="Prv" /> 是给定给特定 .NET Framework 数据提供程序命名空间中的所有类的统一前缀。</span><span class="sxs-lookup"><span data-stu-id="10684-112">To promote consistency among .NET Framework data providers, name the inheriting class in the form <paramref name="Prv" /> DataAdapter where <paramref name="Prv" /> is the uniform prefix given to all classes in a specific .NET Framework data provider namespace.</span></span> <span data-ttu-id="10684-113">例如，<paramref name="Sql" /> 是 <see langword="System.Data.SqlClient" /> 命名空间中 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 类的前缀。</span><span class="sxs-lookup"><span data-stu-id="10684-113">For example, <paramref name="Sql" /> is the prefix of the <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> class in the <see langword="System.Data.SqlClient" /> namespace.</span></span>  
  
<span data-ttu-id="10684-114">当从 <see cref="T:System.Data.IDataAdapter" /> 接口继承时，应实现以下构造函数：</span><span class="sxs-lookup"><span data-stu-id="10684-114">When you inherit from the <see cref="T:System.Data.IDataAdapter" /> interface, you should implement the following constructors:</span></span> 
 <list type="table"><listheader><term> <span data-ttu-id="10684-115">Item</span><span class="sxs-lookup"><span data-stu-id="10684-115">Item</span></span> 
 </term><description> <span data-ttu-id="10684-116">说明</span><span class="sxs-lookup"><span data-stu-id="10684-116">Description</span></span> 
 </description></listheader><item><term> <span data-ttu-id="10684-117">PrvDataAdapter()</span><span class="sxs-lookup"><span data-stu-id="10684-117">PrvDataAdapter()</span></span> 
 </term><description> <span data-ttu-id="10684-118">初始化 PrvDataAdapter 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="10684-118">Initializes a new instance of the PrvDataAdapter class.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="10684-119">PrvDataAdapter （PrvCommand selectCommand）</span><span class="sxs-lookup"><span data-stu-id="10684-119">PrvDataAdapter(PrvCommand selectCommand)</span></span> 
 </term><description> <span data-ttu-id="10684-120">使用指定的 SQL SELECT 语句初始化 PrvDataAdapter 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="10684-120">Initializes a new instance of the PrvDataAdapter class by using the specified SQL SELECT statement.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="10684-121">PrvDataAdapter （string selectCommandText，string selectConnectionString）</span><span class="sxs-lookup"><span data-stu-id="10684-121">PrvDataAdapter(string selectCommandText, string selectConnectionString)</span></span> 
 </term><description> <span data-ttu-id="10684-122">使用 SQL SELECT 语句和连接字符串初始化 PrvDataAdapter 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="10684-122">Initializes a new instance of the PrvDataAdapter class by using an SQL SELECT statement and a connection string.</span></span>  
  
 </description></item><item><term> <span data-ttu-id="10684-123">PrvDataAdapter （string selectCommandText，PrvConnection selectConnection）</span><span class="sxs-lookup"><span data-stu-id="10684-123">PrvDataAdapter(string selectCommandText, PrvConnection selectConnection)</span></span> 
 </term><description> <span data-ttu-id="10684-124">使用 SQL SELECT 语句和 PrvConnection 对象初始化 PrvDataAdapter 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="10684-124">Initializes a new instance of the PrvDataAdapter class by using an SQL SELECT statement and a PrvConnection object.</span></span>  
  
 </description></item></list></para></block>
  </Docs>
  <Members>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (dataSet As DataSet) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Fill : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="10684-125">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="10684-125">A <see cref="T:System.Data.DataSet" /> to fill with records and, if necessary, schema.</span></span></param>
        <summary><span data-ttu-id="10684-126">添加或更新 <see cref="T:System.Data.DataSet" /> 中的行以匹配使用 <see cref="T:System.Data.DataSet" /> 名称的数据源中的行，并创建一个名为“Table”的 <see cref="T:System.Data.DataTable" />。</span><span class="sxs-lookup"><span data-stu-id="10684-126">Adds or updates rows in the <see cref="T:System.Data.DataSet" /> to match those in the data source using the <see cref="T:System.Data.DataSet" /> name, and creates a <see cref="T:System.Data.DataTable" /> named "Table".</span></span></summary>
        <returns><span data-ttu-id="10684-127">已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。</span><span class="sxs-lookup"><span data-stu-id="10684-127">The number of rows successfully added to or refreshed in the <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="10684-128">这不包括受不返回行的语句影响的行。</span><span class="sxs-lookup"><span data-stu-id="10684-128">This does not include rows affected by statements that do not return rows.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10684-129"><xref:System.Data.IDataAdapter.Fill%2A> 使用关联的 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 属性指定的 SELECT 语句从数据源中检索行。</span><span class="sxs-lookup"><span data-stu-id="10684-129"><xref:System.Data.IDataAdapter.Fill%2A> retrieves rows from the data source using the SELECT statement specified by an associated <xref:System.Data.IDbDataAdapter.SelectCommand%2A> property.</span></span> <span data-ttu-id="10684-130">与 SELECT 语句关联的连接对象必须有效，但不需要打开。</span><span class="sxs-lookup"><span data-stu-id="10684-130">The connection object associated with the SELECT statement must be valid, but it does not need to be open.</span></span> <span data-ttu-id="10684-131">如果在调用 <xref:System.Data.IDataAdapter.Fill%2A> 之前关闭连接，则会打开该连接，以检索数据，然后关闭。</span><span class="sxs-lookup"><span data-stu-id="10684-131">If the connection is closed before <xref:System.Data.IDataAdapter.Fill%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="10684-132">如果在调用 <xref:System.Data.IDataAdapter.Fill%2A> 之前连接处于打开状态，则该连接将保持打开状态。</span><span class="sxs-lookup"><span data-stu-id="10684-132">If the connection is open before <xref:System.Data.IDataAdapter.Fill%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="10684-133">然后 <xref:System.Data.IDataAdapter.Fill%2A> 操作将行添加到 <xref:System.Data.DataSet>中的目标 <xref:System.Data.DataTable> 对象，并创建 <xref:System.Data.DataTable> 对象（如果它们尚不存在）。</span><span class="sxs-lookup"><span data-stu-id="10684-133">The <xref:System.Data.IDataAdapter.Fill%2A> operation then adds the rows to destination <xref:System.Data.DataTable> objects in the <xref:System.Data.DataSet>, creating the <xref:System.Data.DataTable> objects if they do not already exist.</span></span> <span data-ttu-id="10684-134">创建 <xref:System.Data.DataTable> 对象时，<xref:System.Data.IDataAdapter.Fill%2A> 操作通常只创建列名称元数据。</span><span class="sxs-lookup"><span data-stu-id="10684-134">When creating <xref:System.Data.DataTable> objects, the <xref:System.Data.IDataAdapter.Fill%2A> operation usually creates only column name metadata.</span></span> <span data-ttu-id="10684-135">但是，如果 <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> 属性设置为 `AddWithKey`，则还会创建相应的主键和约束。</span><span class="sxs-lookup"><span data-stu-id="10684-135">However, if the <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> property is set to `AddWithKey`, appropriate primary keys and constraints are also created.</span></span>  
  
 <span data-ttu-id="10684-136">如果 `SelectCommand` 返回 OUTER JOIN 的结果，则 `DataAdapter` 不会为生成的 <xref:System.Data.DataTable.PrimaryKey%2A> 设置 <xref:System.Data.DataTable>值。</span><span class="sxs-lookup"><span data-stu-id="10684-136">If the `SelectCommand` returns the results of an OUTER JOIN, the `DataAdapter` does not set a <xref:System.Data.DataTable.PrimaryKey%2A> value for the resulting <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="10684-137">必须显式定义主键，以确保正确解析重复行。</span><span class="sxs-lookup"><span data-stu-id="10684-137">You must explicitly define the primary key to ensure that duplicate rows are resolved correctly.</span></span> <span data-ttu-id="10684-138">有关详细信息，请参阅[定义主键](/dotnet/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys)。</span><span class="sxs-lookup"><span data-stu-id="10684-138">For more information, see [Defining Primary Keys](/dotnet/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys).</span></span>  
  
 <span data-ttu-id="10684-139">如果 <xref:System.Data.IDataAdapter> 在填充 <xref:System.Data.DataTable>时遇到重复的列，则它将使用模式 "columnname1"、"columnname2"、"columnname3" 等，为后续列生成名称。</span><span class="sxs-lookup"><span data-stu-id="10684-139">If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the successive columns, using the pattern "columnname1", "columnname2", "columnname3", and so on.</span></span> <span data-ttu-id="10684-140">如果传入数据包含未命名列，则会根据模式 "Column1"、"Column2" 等将它们放入 <xref:System.Data.DataSet> 中。</span><span class="sxs-lookup"><span data-stu-id="10684-140">If the incoming data contains unnamed columns, they are put in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span> <span data-ttu-id="10684-141">将多个结果集添加到 <xref:System.Data.DataSet>时，每个结果集将放在一个单独的表中。</span><span class="sxs-lookup"><span data-stu-id="10684-141">When multiple result sets are added to the <xref:System.Data.DataSet>, each result set is put in a separate table.</span></span> <span data-ttu-id="10684-142">附加的结果集通过将整数值追加到指定的表名来命名（例如，"表"、"Table1"、"Table2" 等）。</span><span class="sxs-lookup"><span data-stu-id="10684-142">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on).</span></span> <span data-ttu-id="10684-143">使用列和表名称时，应用程序应小心，以确保不会与这些命名模式发生冲突。</span><span class="sxs-lookup"><span data-stu-id="10684-143">Applications should use caution when using column and table names to ensure that conflicts with these naming patterns do not occur.</span></span>  
  
 <span data-ttu-id="10684-144">当用于填充 <xref:System.Data.DataSet> 的 SELECT 语句返回多个结果（如批处理 SQL 语句）时，如果其中一个结果包含错误，则会跳过所有后续结果，并且不会将其添加到 <xref:System.Data.DataSet>中。</span><span class="sxs-lookup"><span data-stu-id="10684-144">When the SELECT statement that is used to populate the <xref:System.Data.DataSet> returns multiple results, such as a batch SQL statement, if one of the results contains an error, all successive results are skipped and not added to the <xref:System.Data.DataSet>.</span></span>  
  
 <span data-ttu-id="10684-145">您可以在同一 <xref:System.Data.DataTable>上多次使用 <xref:System.Data.IDataAdapter.Fill%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="10684-145">You can use the <xref:System.Data.IDataAdapter.Fill%2A> method multiple times on the same <xref:System.Data.DataTable>.</span></span> <span data-ttu-id="10684-146">如果存在主键，则传入行与已存在的匹配行合并在一起。</span><span class="sxs-lookup"><span data-stu-id="10684-146">If a primary key exists, incoming rows are merged with matching rows that already exist.</span></span> <span data-ttu-id="10684-147">如果主键不存在，将在 <xref:System.Data.DataTable>中追加传入行。</span><span class="sxs-lookup"><span data-stu-id="10684-147">If no primary key exists, incoming rows are appended to the <xref:System.Data.DataTable>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="10684-148">当处理返回多个结果的批处理 SQL 语句时，.NET Framework 数据提供程序的 <xref:System.Data.IDataAdapter.Fill%2A> 和 <xref:System.Data.IDataAdapter.FillSchema%2A> 的实现仅检索第一个结果的架构信息。</span><span class="sxs-lookup"><span data-stu-id="10684-148">When handling batch SQL statements that return multiple results, the implementation of <xref:System.Data.IDataAdapter.Fill%2A> and <xref:System.Data.IDataAdapter.FillSchema%2A> for a .NET Framework data provider retrieves schema information for only the first result.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="VB.NET" Value="Public Function FillSchema (dataSet As DataSet, schemaType As SchemaType) As DataTable()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="abstract member FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="iDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="10684-149">要用数据源中的架构填充的 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="10684-149">The <see cref="T:System.Data.DataSet" /> to be filled with the schema from the data source.</span></span></param>
        <param name="schemaType"><span data-ttu-id="10684-150"><see cref="T:System.Data.SchemaType" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="10684-150">One of the <see cref="T:System.Data.SchemaType" /> values.</span></span></param>
        <summary><span data-ttu-id="10684-151">将名为“Table”的 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" />，并根据指定的 <see cref="T:System.Data.SchemaType" /> 配置架构以匹配数据源中的架构。</span><span class="sxs-lookup"><span data-stu-id="10684-151">Adds a <see cref="T:System.Data.DataTable" /> named "Table" to the specified <see cref="T:System.Data.DataSet" /> and configures the schema to match that in the data source based on the specified <see cref="T:System.Data.SchemaType" />.</span></span></summary>
        <returns><span data-ttu-id="10684-152"><see cref="T:System.Data.DataTable" /> 对象的数组，这些对象包含从数据源返回的架构信息。</span><span class="sxs-lookup"><span data-stu-id="10684-152">An array of <see cref="T:System.Data.DataTable" /> objects that contain schema information returned from the data source.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10684-153"><xref:System.Data.IDataAdapter.FillSchema%2A> 方法使用 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>从数据源检索架构。</span><span class="sxs-lookup"><span data-stu-id="10684-153">The <xref:System.Data.IDataAdapter.FillSchema%2A> method retrieves the schema from the data source using the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</span></span> <span data-ttu-id="10684-154">与 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 关联的连接对象必须有效，但不需要打开。</span><span class="sxs-lookup"><span data-stu-id="10684-154">The connection object associated with the <xref:System.Data.IDbDataAdapter.SelectCommand%2A> must be valid, but it does not need to be open.</span></span> <span data-ttu-id="10684-155">如果在调用 <xref:System.Data.IDataAdapter.FillSchema%2A> 之前关闭连接，则会打开该连接，以检索数据，然后关闭。</span><span class="sxs-lookup"><span data-stu-id="10684-155">If the connection is closed before <xref:System.Data.IDataAdapter.FillSchema%2A> is called, it is opened to retrieve data, then closed.</span></span> <span data-ttu-id="10684-156">如果在调用 <xref:System.Data.IDataAdapter.FillSchema%2A> 之前连接处于打开状态，则该连接将保持打开状态。</span><span class="sxs-lookup"><span data-stu-id="10684-156">If the connection is open before <xref:System.Data.IDataAdapter.FillSchema%2A> is called, it remains open.</span></span>  
  
 <span data-ttu-id="10684-157"><xref:System.Data.IDataAdapter.FillSchema%2A> 操作向目标 <xref:System.Data.DataSet>添加 <xref:System.Data.DataTable>。</span><span class="sxs-lookup"><span data-stu-id="10684-157">A <xref:System.Data.IDataAdapter.FillSchema%2A> operation adds a <xref:System.Data.DataTable> to the destination <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="10684-158">然后，它将列添加到 <xref:System.Data.DataTable> 的 <xref:System.Data.DataColumnCollection> 中，并配置以下 <xref:System.Data.DataColumn> 属性（如果它们存在于数据源中）：</span><span class="sxs-lookup"><span data-stu-id="10684-158">It then adds columns to the <xref:System.Data.DataColumnCollection> of the <xref:System.Data.DataTable> and configures the following <xref:System.Data.DataColumn> properties if they exist at the data source:</span></span>  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <span data-ttu-id="10684-159"><xref:System.Data.DataColumn.AutoIncrement%2A> 列中的一个值匹配。</span><span class="sxs-lookup"><span data-stu-id="10684-159"><xref:System.Data.DataColumn.AutoIncrement%2A>.</span></span> <span data-ttu-id="10684-160">您必须单独设置 <xref:System.Data.DataColumn.AutoIncrementStep%2A> 和 <xref:System.Data.DataColumn.AutoIncrementSeed%2A>。</span><span class="sxs-lookup"><span data-stu-id="10684-160">You must set <xref:System.Data.DataColumn.AutoIncrementStep%2A> and <xref:System.Data.DataColumn.AutoIncrementSeed%2A> separately.</span></span>  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <span data-ttu-id="10684-161"><xref:System.Data.IDataAdapter.FillSchema%2A> 还根据以下规则配置 <xref:System.Data.DataTable.PrimaryKey%2A> 和 <xref:System.Data.DataTable.Constraints%2A> 属性：</span><span class="sxs-lookup"><span data-stu-id="10684-161"><xref:System.Data.IDataAdapter.FillSchema%2A> also configures the <xref:System.Data.DataTable.PrimaryKey%2A> and <xref:System.Data.DataTable.Constraints%2A> properties according to the following rules:</span></span>  
  
-   <span data-ttu-id="10684-162">如果 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>返回一个或多个主键列，则将它们用作 <xref:System.Data.DataTable>的主键列。</span><span class="sxs-lookup"><span data-stu-id="10684-162">If one or more primary key columns are returned by the <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, they are used as the primary key columns for the <xref:System.Data.DataTable>.</span></span>  
  
-   <span data-ttu-id="10684-163">如果未返回主键列但唯一列为，则在所有唯一列都不可为 null 的情况下，将唯一列用作主键。</span><span class="sxs-lookup"><span data-stu-id="10684-163">If no primary key columns are returned but unique columns are, the unique columns are used as the primary key if all the unique columns are non-nullable.</span></span> <span data-ttu-id="10684-164">如果任何列可为 null，则会将 <xref:System.Data.UniqueConstraint> 添加到 <xref:System.Data.ConstraintCollection>，但不会设置 <xref:System.Data.DataTable.PrimaryKey%2A> 属性。</span><span class="sxs-lookup"><span data-stu-id="10684-164">If any of the columns are nullable, a <xref:System.Data.UniqueConstraint> is added to the <xref:System.Data.ConstraintCollection>, but the <xref:System.Data.DataTable.PrimaryKey%2A> property is not set.</span></span>  
  
-   <span data-ttu-id="10684-165">如果为主键列和唯一列都返回，则主键列将用作 <xref:System.Data.DataTable>的主键列。</span><span class="sxs-lookup"><span data-stu-id="10684-165">If both primary key columns and unique columns are returned, the primary key columns are used as the primary key columns for the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="10684-166">请注意，根据前面的规则将主键和 unique 约束添加到 <xref:System.Data.ConstraintCollection> 中，但不会添加其他约束类型。</span><span class="sxs-lookup"><span data-stu-id="10684-166">Note that primary keys and unique constraints are added to the <xref:System.Data.ConstraintCollection> according to the previous rules, but other constraint types are not added.</span></span>  
  
 <span data-ttu-id="10684-167">如果在 SQL Server 表中的一列或多列上定义了唯一聚集索引，并且在一组单独的列上定义了 primary key 约束，则将返回聚集索引中的列的名称。</span><span class="sxs-lookup"><span data-stu-id="10684-167">If a unique clustered index is defined on a column or columns in a SQL Server table and the primary key constraint is defined on a separate set of columns, then the names of the columns in the clustered index will be returned.</span></span> <span data-ttu-id="10684-168">若要返回主键列的名称，请使用带有指定主键索引名称的 SELECT 语句的查询提示。</span><span class="sxs-lookup"><span data-stu-id="10684-168">To return the name or names of the primary key columns, use a query hint with the SELECT statement that specifies the name of the primary key index.</span></span> <span data-ttu-id="10684-169">有关如何指定查询提示的详细信息，请参阅[提示（transact-sql）-查询](/sql/t-sql/queries/hints-transact-sql-query)。</span><span class="sxs-lookup"><span data-stu-id="10684-169">For more information about how to specify query hints, see [Hints (Transact-SQL) - Query](/sql/t-sql/queries/hints-transact-sql-query).</span></span>  
  
 <span data-ttu-id="10684-170">如果 <xref:System.Data.IDataAdapter> 在填充 <xref:System.Data.DataTable>时遇到重复的列，则它将使用模式 "columnname1"、"columnname2"、"columnname3" 等，为后续列生成名称。</span><span class="sxs-lookup"><span data-stu-id="10684-170">If the <xref:System.Data.IDataAdapter> encounters duplicate columns while populating a <xref:System.Data.DataTable>, it generates names for the successive columns, using the pattern "columnname1", "columnname2", "columnname3", and so on.</span></span> <span data-ttu-id="10684-171">如果传入数据包含未命名列，则会根据模式 "Column1"、"Column2" 等将它们放入 <xref:System.Data.DataSet> 中。</span><span class="sxs-lookup"><span data-stu-id="10684-171">If the incoming data contains unnamed columns, they are put in the <xref:System.Data.DataSet> according to the pattern "Column1", "Column2", and so on.</span></span> <span data-ttu-id="10684-172">将多个结果集添加到 <xref:System.Data.DataSet>时，每个结果集将放在一个单独的表中。</span><span class="sxs-lookup"><span data-stu-id="10684-172">When multiple result sets are added to the <xref:System.Data.DataSet>, each result set is put in a separate table.</span></span> <span data-ttu-id="10684-173">附加的结果集通过将整数值追加到指定的表名来命名（例如，"表"、"Table1"、"Table2" 等）。</span><span class="sxs-lookup"><span data-stu-id="10684-173">Additional result sets are named by appending integral values to the specified table name (for example, "Table", "Table1", "Table2", and so on).</span></span> <span data-ttu-id="10684-174">使用列和表名称时，应用程序应小心，以确保不会与这些命名模式发生冲突。</span><span class="sxs-lookup"><span data-stu-id="10684-174">Applications should use caution when using column and table names to ensure that conflicts with these naming patterns do not occur.</span></span>  
  
 <span data-ttu-id="10684-175"><xref:System.Data.IDataAdapter.FillSchema%2A> 不返回任何行。</span><span class="sxs-lookup"><span data-stu-id="10684-175"><xref:System.Data.IDataAdapter.FillSchema%2A> returns no rows.</span></span> <span data-ttu-id="10684-176">使用 <xref:System.Data.IDataAdapter.Fill%2A> 方法将行添加到 <xref:System.Data.DataTable>中。</span><span class="sxs-lookup"><span data-stu-id="10684-176">Use the <xref:System.Data.IDataAdapter.Fill%2A> method to add rows to a <xref:System.Data.DataTable>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="iDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="10684-177">获取当执行 SQL SELECT 语句时由用户设置的参数。</span><span class="sxs-lookup"><span data-stu-id="10684-177">Gets the parameters set by the user when executing an SQL SELECT statement.</span></span></summary>
        <returns><span data-ttu-id="10684-178"><see cref="T:System.Data.IDataParameter" /> 对象的数组，这些对象包含由用户设置的参数。</span><span class="sxs-lookup"><span data-stu-id="10684-178">An array of <see cref="T:System.Data.IDataParameter" /> objects that contains the parameters set by the user.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```csharp
private static void GetParameters(string connectionString)
{
    using (var conn = new SqlConnection(connectionString))
    {
        var queryString = "SELECT [CourseID],[Title],[Credits] FROM [MySchool].[dbo].[Course] WHERE [Year]=@Year AND [Credits]>=@Credits";
        var year = new SqlParameter("@Year", 2012);
        var credits = new SqlParameter("@Credits", SqlDbType.Int, 4, "Credits");
        credits.Value = 4;
        var command = new SqlCommand(queryString, conn);
        command.Parameters.Add(year);
        command.Parameters.Add(credits);
        IDbDataAdapter mySchool = new SqlDataAdapter(command);
        IDataParameter[] parameters = mySchool.GetFillParameters();
        Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", "ParameterName", "SourceColumn", "Direction", "DbType", "Value");
        foreach (IDataParameter parameter in parameters)
        {
            Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", parameter.ParameterName, parameter.SourceColumn, parameter.Direction, parameter.DbType, parameter.Value);
        }
    }
}
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingMappingAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingMappingAction As MissingMappingAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingMappingAction MissingMappingAction { System::Data::MissingMappingAction get(); void set(System::Data::MissingMappingAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingMappingAction : System.Data.MissingMappingAction with get, set" Usage="System.Data.IDataAdapter.MissingMappingAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="10684-179">指示或指定是否将未映射的源表或列与其源名一起传递以便筛选或引发错误。</span><span class="sxs-lookup"><span data-stu-id="10684-179">Indicates or specifies whether unmapped source tables or columns are passed with their source names in order to be filtered or to raise an error.</span></span></summary>
        <value><span data-ttu-id="10684-180"><see cref="T:System.Data.MissingMappingAction" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="10684-180">One of the <see cref="T:System.Data.MissingMappingAction" /> values.</span></span> <span data-ttu-id="10684-181">默认为 <see langword="Passthrough" />。</span><span class="sxs-lookup"><span data-stu-id="10684-181">The default is <see langword="Passthrough" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10684-182"><xref:System.Data.IDataAdapter.TableMappings%2A> 属性提供返回的记录和 <xref:System.Data.DataSet>之间的主映射。</span><span class="sxs-lookup"><span data-stu-id="10684-182">The <xref:System.Data.IDataAdapter.TableMappings%2A> property provides the master mapping between the returned records and the <xref:System.Data.DataSet>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10684-183">设置的值不是 <see cref="T:System.Data.MissingMappingAction" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="10684-183">The value set is not one of the <see cref="T:System.Data.MissingMappingAction" /> values.</span></span></exception>
        <altmember cref="P:System.Data.IDataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingSchemaAction As MissingSchemaAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingSchemaAction MissingSchemaAction { System::Data::MissingSchemaAction get(); void set(System::Data::MissingSchemaAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingSchemaAction : System.Data.MissingSchemaAction with get, set" Usage="System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="10684-184">指示或指定是否将丢失的源表、列及其关系添加到数据集架构中，是否忽略它们或者它们是否会引发错误。</span><span class="sxs-lookup"><span data-stu-id="10684-184">Indicates or specifies whether missing source tables, columns, and their relationships are added to the dataset schema, ignored, or cause an error to be raised.</span></span></summary>
        <value><span data-ttu-id="10684-185"><see cref="T:System.Data.MissingSchemaAction" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="10684-185">One of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span></span> <span data-ttu-id="10684-186">默认为 <see langword="Add" />。</span><span class="sxs-lookup"><span data-stu-id="10684-186">The default is <see langword="Add" />.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="10684-187">设置的值不是 <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</span><span class="sxs-lookup"><span data-stu-id="10684-187">The value set is not one of the <see cref="T:System.Data.MissingSchemaAction" /> values.</span></span></exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.ITableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.TableMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TableMappings As ITableMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ITableMappingCollection ^ TableMappings { System::Data::ITableMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TableMappings : System.Data.ITableMappingCollection" Usage="System.Data.IDataAdapter.TableMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="10684-188">指示如何将源表映射到数据集表。</span><span class="sxs-lookup"><span data-stu-id="10684-188">Indicates how a source table is mapped to a dataset table.</span></span></summary>
        <value><span data-ttu-id="10684-189">一个集合，它提供返回记录和 <see cref="T:System.Data.DataSet" /> 之间的主映射。</span><span class="sxs-lookup"><span data-stu-id="10684-189">A collection that provides the master mapping between the returned records and the <see cref="T:System.Data.DataSet" />.</span></span> <span data-ttu-id="10684-190">默认值为空集合。</span><span class="sxs-lookup"><span data-stu-id="10684-190">The default value is an empty collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10684-191"><xref:System.Data.IDataAdapter> 仅使用名为 "Table" 的源表的映射。</span><span class="sxs-lookup"><span data-stu-id="10684-191">The <xref:System.Data.IDataAdapter> uses only the mappings for the source table named "Table".</span></span> <span data-ttu-id="10684-192">返回数据的所有 SELECT、INSERT、DELETE 和 UPDATE 语句都必须使用一致的列命名。</span><span class="sxs-lookup"><span data-stu-id="10684-192">All SELECT, INSERT, DELETE, and UPDATE statements returning data must do so using consistent column naming.</span></span> <span data-ttu-id="10684-193">记录中返回的列名必须是唯一的，否则具有重复名称的列将覆盖以前的数据。</span><span class="sxs-lookup"><span data-stu-id="10684-193">The column names returned in the records must be unique, otherwise columns with duplicate names overwrite previous data.</span></span> <span data-ttu-id="10684-194">在 <xref:System.Data.IDataAdapter.Update%2A>上，只有映射到名为 "Table" 的源表的表才会对其更改进行协调。</span><span class="sxs-lookup"><span data-stu-id="10684-194">On <xref:System.Data.IDataAdapter.Update%2A>, only the table mapped to the source table named "Table" will have its changes reconciled.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (dataSet As DataSet) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Update : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet"><span data-ttu-id="10684-195">用于更新数据源的 <see cref="T:System.Data.DataSet" />。</span><span class="sxs-lookup"><span data-stu-id="10684-195">The <see cref="T:System.Data.DataSet" /> used to update the data source.</span></span></param>
        <summary><span data-ttu-id="10684-196">从名为“Table”的 <see cref="T:System.Data.DataSet" /> 为指定的 <see cref="T:System.Data.DataTable" /> 中每个已插入、已更新或已删除的行调用相应的 INSERT、UPDATE 或 DELETE 语句。</span><span class="sxs-lookup"><span data-stu-id="10684-196">Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the specified <see cref="T:System.Data.DataSet" /> from a <see cref="T:System.Data.DataTable" /> named "Table".</span></span></summary>
        <returns><span data-ttu-id="10684-197"><see cref="T:System.Data.DataSet" /> 中成功更新的行数。</span><span class="sxs-lookup"><span data-stu-id="10684-197">The number of rows successfully updated from the <see cref="T:System.Data.DataSet" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="10684-198">当应用程序调用 <xref:System.Data.IDataAdapter.Update%2A> 方法时，<xref:System.Data.IDataAdapter> 将检查 <xref:System.Data.DataRow.RowState%2A> 属性，并根据在 <xref:System.Data.DataSet>中配置的索引的顺序对每个行执行所需的 INSERT、UPDATE 或 DELETE 语句。</span><span class="sxs-lookup"><span data-stu-id="10684-198">When an application calls the <xref:System.Data.IDataAdapter.Update%2A> method, the <xref:System.Data.IDataAdapter> examines the <xref:System.Data.DataRow.RowState%2A> property, and executes the required INSERT, UPDATE, or DELETE statements iteratively for each row, based on the order of the indexes configured in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="10684-199">例如，<xref:System.Data.IDataAdapter.Update%2A> 可能会执行 DELETE 语句，后跟 INSERT 语句，然后执行另一 DELETE 语句，因为 <xref:System.Data.DataTable>中的行的顺序。</span><span class="sxs-lookup"><span data-stu-id="10684-199">For example, <xref:System.Data.IDataAdapter.Update%2A> might execute a DELETE statement, followed by an INSERT statement, and then another DELETE statement, because of the ordering of the rows in the <xref:System.Data.DataTable>.</span></span>  
  
 <span data-ttu-id="10684-200">请注意，这些语句不作为批处理执行;每一行都单独更新。</span><span class="sxs-lookup"><span data-stu-id="10684-200">Be aware that these statements are not performed as a batch process; each row is updated individually.</span></span> <span data-ttu-id="10684-201">如果必须控制语句类型的顺序（例如，在更新之前插入），则应用程序可以调用 <xref:System.Data.DataSet.GetChanges%2A> 方法。</span><span class="sxs-lookup"><span data-stu-id="10684-201">An application can call the <xref:System.Data.DataSet.GetChanges%2A> method if you must control the sequence of statement types (for example, INSERTs before UPDATEs).</span></span> <span data-ttu-id="10684-202">有关详细信息，请参阅[用 Dataadapter 更新数据源](/dotnet/framework/data/adonet/updating-data-sources-with-dataadapters)。</span><span class="sxs-lookup"><span data-stu-id="10684-202">For more information, see [Updating Data Sources with DataAdapters](/dotnet/framework/data/adonet/updating-data-sources-with-dataadapters).</span></span>  
  
 <span data-ttu-id="10684-203">如果尚未指定 INSERT、UPDATE 或 DELETE 语句，<xref:System.Data.Common.DataAdapter.Update%2A> 方法将生成一个异常。</span><span class="sxs-lookup"><span data-stu-id="10684-203">If INSERT, UPDATE, or DELETE statements have not been specified, the <xref:System.Data.Common.DataAdapter.Update%2A> method generates an exception.</span></span> <span data-ttu-id="10684-204">不过，如果设置 .NET Framework 数据提供程序的 `SelectCommand` 属性，则可以创建 <xref:System.Data.SqlClient.SqlCommandBuilder> 或 <xref:System.Data.OleDb.OleDbCommandBuilder> 对象以自动为单表更新生成 SQL 语句。</span><span class="sxs-lookup"><span data-stu-id="10684-204">However, you can create a <xref:System.Data.SqlClient.SqlCommandBuilder> or <xref:System.Data.OleDb.OleDbCommandBuilder> object to automatically generate SQL statements for single-table updates if you set the `SelectCommand` property of a .NET Framework data provider.</span></span> <span data-ttu-id="10684-205">然后，CommandBuilder 将生成未设置的任何其他 SQL 语句。</span><span class="sxs-lookup"><span data-stu-id="10684-205">Then, any additional SQL statements that you do not set are generated by the CommandBuilder.</span></span> <span data-ttu-id="10684-206">此代逻辑要求密钥列信息存在于 <xref:System.Data.DataSet>中。</span><span class="sxs-lookup"><span data-stu-id="10684-206">This generation logic requires key column information to be present in the <xref:System.Data.DataSet>.</span></span> <span data-ttu-id="10684-207">有关详细信息，请参阅[通过 Commandbuilder 生成命令](/dotnet/framework/data/adonet/generating-commands-with-commandbuilders)。</span><span class="sxs-lookup"><span data-stu-id="10684-207">For more information see [Generating Commands with CommandBuilders](/dotnet/framework/data/adonet/generating-commands-with-commandbuilders).</span></span>  
  
 <span data-ttu-id="10684-208">在执行更新之前，<xref:System.Data.Common.DataAdapter.Update%2A> 方法从第一个映射中列出的表中检索行。</span><span class="sxs-lookup"><span data-stu-id="10684-208">The <xref:System.Data.Common.DataAdapter.Update%2A> method retrieves rows from the table listed in the first mapping before performing an update.</span></span> <span data-ttu-id="10684-209">然后，<xref:System.Data.Common.DataAdapter.Update%2A> 使用 <xref:System.Data.IDbCommand.UpdatedRowSource%2A> 属性的值更新该行。</span><span class="sxs-lookup"><span data-stu-id="10684-209">The <xref:System.Data.Common.DataAdapter.Update%2A> then updates the row using the value of the <xref:System.Data.IDbCommand.UpdatedRowSource%2A> property.</span></span> <span data-ttu-id="10684-210">将忽略返回的任何其他行。</span><span class="sxs-lookup"><span data-stu-id="10684-210">Any additional rows returned are ignored.</span></span>  
  
 <span data-ttu-id="10684-211">将任何数据加载回 <xref:System.Data.DataSet>后，将引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 事件，从而允许用户检查已协调的 <xref:System.Data.DataSet> 行和该命令返回的任何输出参数。</span><span class="sxs-lookup"><span data-stu-id="10684-211">After any data is loaded back into the <xref:System.Data.DataSet>, the <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised, allowing the user to inspect the reconciled <xref:System.Data.DataSet> row and any output parameters returned by the command.</span></span> <span data-ttu-id="10684-212">成功更新行后，将接受对该行所做的更改。</span><span class="sxs-lookup"><span data-stu-id="10684-212">After a row updates successfully, the changes to that row are accepted.</span></span>  
  
 <span data-ttu-id="10684-213">使用 <xref:System.Data.IDataAdapter.Update%2A>时，执行顺序如下所示：</span><span class="sxs-lookup"><span data-stu-id="10684-213">When using <xref:System.Data.IDataAdapter.Update%2A>, the order of execution is as follows:</span></span>  
  
1.  <span data-ttu-id="10684-214"><xref:System.Data.DataRow> 中的值将移至参数值。</span><span class="sxs-lookup"><span data-stu-id="10684-214">The values in the <xref:System.Data.DataRow> are moved to the parameter values.</span></span>  
  
2.  <span data-ttu-id="10684-215">引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 事件。</span><span class="sxs-lookup"><span data-stu-id="10684-215">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> event is raised.</span></span>  
  
3.  <span data-ttu-id="10684-216">命令执行。</span><span class="sxs-lookup"><span data-stu-id="10684-216">The command executes.</span></span>  
  
4.  <span data-ttu-id="10684-217">如果命令设置为 `FirstReturnedRecord`，则将第一个返回的结果置于 <xref:System.Data.DataRow>中。</span><span class="sxs-lookup"><span data-stu-id="10684-217">If the command is set to `FirstReturnedRecord`, then the first returned result is put in the <xref:System.Data.DataRow>.</span></span>  
  
5.  <span data-ttu-id="10684-218">如果有输出参数，则将它们放在 <xref:System.Data.DataRow>中。</span><span class="sxs-lookup"><span data-stu-id="10684-218">If there are output parameters, they are put in the <xref:System.Data.DataRow>.</span></span>  
  
6.  <span data-ttu-id="10684-219">引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 事件。</span><span class="sxs-lookup"><span data-stu-id="10684-219">The <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> event is raised.</span></span>  
  
7.  <span data-ttu-id="10684-220">调用 <xref:System.Data.DataRow.AcceptChanges%2A>。</span><span class="sxs-lookup"><span data-stu-id="10684-220"><xref:System.Data.DataRow.AcceptChanges%2A> is called.</span></span>  
  
 <span data-ttu-id="10684-221">与 <xref:System.Data.IDataAdapter> 关联的每个命令通常都具有与之关联的参数集合。</span><span class="sxs-lookup"><span data-stu-id="10684-221">Each command associated with the <xref:System.Data.IDataAdapter> usually has a parameter collection associated with it.</span></span> <span data-ttu-id="10684-222">通过 `SourceColumn` 和 `SourceVersion` .NET Framework 数据提供程序的 `Parameter` 类的属性，将参数映射到当前行。</span><span class="sxs-lookup"><span data-stu-id="10684-222">Parameters are mapped to the current row through the `SourceColumn` and `SourceVersion` properties of a .NET Framework data provider's `Parameter` class.</span></span> <span data-ttu-id="10684-223">`SourceColumn` 指 <xref:System.Data.IDataAdapter> 为获取当前行的参数值而引用的 <xref:System.Data.DataTable> 列。</span><span class="sxs-lookup"><span data-stu-id="10684-223">`SourceColumn` refers to a <xref:System.Data.DataTable> column that the <xref:System.Data.IDataAdapter> references to obtain parameter values for the current row.</span></span>  
  
 <span data-ttu-id="10684-224">在应用任何表映射之前，`SourceColumn` 引用未映射的列名称。</span><span class="sxs-lookup"><span data-stu-id="10684-224">`SourceColumn` refers to the unmapped column name before any table mappings have been applied.</span></span> <span data-ttu-id="10684-225">如果 `SourceColumn` 引用不存在的列，则执行的操作取决于下列 <xref:System.Data.MissingMappingAction> 值之一。</span><span class="sxs-lookup"><span data-stu-id="10684-225">If `SourceColumn` refers to a nonexistent column, the action taken depends on one of the following <xref:System.Data.MissingMappingAction> values.</span></span>  
  
|<span data-ttu-id="10684-226">枚举值</span><span class="sxs-lookup"><span data-stu-id="10684-226">Enumeration Value</span></span>|<span data-ttu-id="10684-227">执行的操作</span><span class="sxs-lookup"><span data-stu-id="10684-227">Action Taken</span></span>|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|<span data-ttu-id="10684-228">如果不存在任何映射，请使用 <xref:System.Data.DataSet> 中的源列名称和表名称。</span><span class="sxs-lookup"><span data-stu-id="10684-228">Use the source column names and table names in the <xref:System.Data.DataSet> if no mapping is present.</span></span>|  
|`MissingMappingAction.Ignore`|<span data-ttu-id="10684-229">生成一个 <xref:System.SystemException>。</span><span class="sxs-lookup"><span data-stu-id="10684-229">A <xref:System.SystemException> is generated.</span></span> <span data-ttu-id="10684-230">当显式设置映射时，缺少输入参数的映射通常是由错误引起的。</span><span class="sxs-lookup"><span data-stu-id="10684-230">When the mappings are explicitly set, a missing mapping for an input parameter is usually caused by an error.</span></span>|  
|`MissingMappingAction.Error`|<span data-ttu-id="10684-231">生成一个 <xref:System.SystemException>。</span><span class="sxs-lookup"><span data-stu-id="10684-231">A <xref:System.SystemException> is generated.</span></span>|  
  
 <span data-ttu-id="10684-232">`SourceColumn` 属性还用于将输出或输入/输出参数的值映射回 `DataSet`。</span><span class="sxs-lookup"><span data-stu-id="10684-232">The `SourceColumn` property is also used to map the value for output or input/output parameters back to the `DataSet`.</span></span> <span data-ttu-id="10684-233">如果引用不存在的列，则会生成异常。</span><span class="sxs-lookup"><span data-stu-id="10684-233">An exception is generated if it refers to a nonexistent column.</span></span>  
  
 <span data-ttu-id="10684-234">.NET Framework 数据提供程序的 `Parameter` 类的 `SourceVersion` 属性确定是使用列值的 `Original`、`Current`还是 `Proposed` 版本。</span><span class="sxs-lookup"><span data-stu-id="10684-234">The `SourceVersion` property of a .NET Framework data provider's `Parameter` class determines whether to use the `Original`, `Current`, or `Proposed` version of the column value.</span></span> <span data-ttu-id="10684-235">此功能经常用于在 UPDATE 语句的 WHERE 子句中包含原始值，以检查是否存在开放式并发冲突。</span><span class="sxs-lookup"><span data-stu-id="10684-235">This capability is frequently used to include original values in the WHERE clause of an UPDATE statement to check for optimistic concurrency violations.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="10684-236">如果在更新行时出现错误，则会引发异常并中止执行更新。</span><span class="sxs-lookup"><span data-stu-id="10684-236">If an error occurs while updating a row, an exception is thrown and execution of the update is discontinued.</span></span> <span data-ttu-id="10684-237">若要在遇到错误时继续执行更新操作而不生成异常，请在调用 <xref:System.Data.Common.DbDataAdapter.Update%2A>之前将 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 属性设置为 `true`。</span><span class="sxs-lookup"><span data-stu-id="10684-237">To continue the update operation without generating exceptions when an error is encountered, set the <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> property to `true` before calling <xref:System.Data.Common.DbDataAdapter.Update%2A>.</span></span> <span data-ttu-id="10684-238">您还可以在 DataAdapter 的 `RowUpdated` 事件内每行响应错误。</span><span class="sxs-lookup"><span data-stu-id="10684-238">You may also respond to errors on a per-row basis within the `RowUpdated` event of a DataAdapter.</span></span> <span data-ttu-id="10684-239">若要在 `RowUpdated` 事件中继续执行更新操作而不生成异常，请将 <xref:System.Data.Common.RowUpdatedEventArgs> 的 <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 属性设置为 "<xref:System.Data.UpdateStatus.Continue>"。</span><span class="sxs-lookup"><span data-stu-id="10684-239">To continue the update operation without generating an exception within the `RowUpdated` event, set the <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> property of the <xref:System.Data.Common.RowUpdatedEventArgs> to <xref:System.Data.UpdateStatus.Continue>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="10684-240">下面的示例使用派生类 <xref:System.Data.OleDb.OleDbDataAdapter>来 <xref:System.Data.Common.DataAdapter.Update%2A> 数据源。</span><span class="sxs-lookup"><span data-stu-id="10684-240">The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to <xref:System.Data.Common.DataAdapter.Update%2A> the data source.</span></span> <span data-ttu-id="10684-241">此示例假设已创建 <xref:System.Data.OleDb.OleDbDataAdapter> 和 <xref:System.Data.DataSet>。</span><span class="sxs-lookup"><span data-stu-id="10684-241">This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.</span></span>  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DBConcurrencyException"><span data-ttu-id="10684-242">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</span><span class="sxs-lookup"><span data-stu-id="10684-242">An attempt to execute an INSERT, UPDATE, or DELETE statement resulted in zero records affected.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>
