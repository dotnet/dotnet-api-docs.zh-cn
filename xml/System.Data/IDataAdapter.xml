<Type Name="IDataAdapter" FullName="System.Data.IDataAdapter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="abc8731decbf6a78c3573629edbf62dc174aa5bc" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89939465" /></Metadata><TypeSignature Language="C#" Value="public interface IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataAdapter" />
  <TypeSignature Language="F#" Value="type IDataAdapter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Data.Common" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces />
  <Docs>
    <summary>允许对象实现 DataAdapter，并且表示一组用于填充和更新 <see cref="T:System.Data.DataSet" /> 及数据源的方法以及与映射操作有关的属性。  
  
 <see cref="T:System.Data.IDbDataAdapter" /> 实例针对作为（或类似于）具有文字命令（如 Transact-SQL）的关系数据库的数据源，而 <see cref="T:System.Data.IDataAdapter" /> 实例可使用任何类型的数据源。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter>接口允许继承类实现 DataAdapter 类，该类表示数据源与之间的桥梁 <xref:System.Data.DataSet> 。 有关 DataAdapter 类的详细信息，请参阅 [从 DataAdapter 填充数据集](/dotnet/framework/data/adonet/populating-a-dataset-from-a-dataadapter)。  
  
 应用程序不会直接创建接口的实例 <xref:System.Data.IDataAdapter> ，而是实现继承的类的实例 <xref:System.Data.IDataAdapter> 。  
  
 继承的类 <xref:System.Data.IDataAdapter> 必须实现继承成员，并且通常定义其他成员来添加特定于提供程序的功能。 例如， <xref:System.Data.IDataAdapter> 接口定义了一个 <xref:System.Data.IDataAdapter.Fill%2A> 采用作为参数的方法 <xref:System.Data.DataSet> 。 反过来， <xref:System.Data.OleDb.OleDbDataAdapter> 该类继承 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 方法，还定义方法的两个附加重载， <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> 该重载采用 ADO 记录集对象作为参数。  
  
   
  
## Examples  
 下面的示例使用派生类（ <xref:System.Data.SqlClient.SqlCommand> 、 <xref:System.Data.SqlClient.SqlDataAdapter> 和 <xref:System.Data.SqlClient.SqlConnection> ）从数据库中选择记录。 <xref:System.Data.DataSet>然后返回填充的。 为此，向方法传递了一个初始化的 <xref:System.Data.DataSet> 、一个连接字符串和一个作为 TRANSACT-SQL SELECT 语句的查询字符串。  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>若要提升 .NET Framework 数据提供程序之间的一致性，请将该继承类命名为 <paramref name="Prv" /> DataAdapter，其中 <paramref name="Prv" /> 是为特定 .NET Framework 数据提供程序命名空间中的所有类指定的统一前缀。 例如， <paramref name="Sql" /> 是 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 命名空间中类的前缀 <see langword="System.Data.SqlClient" /> 。  
  
从接口继承时 <see cref="T:System.Data.IDataAdapter" /> ，应实现以下构造函数： 
 <list type="table"><listheader><term> 项 
 </term><description> 描述 
 </description></listheader><item><term> PrvDataAdapter ( # A1 
 </term><description> 初始化 PrvDataAdapter 类的新实例。  
  
 </description></item><item><term> PrvDataAdapter (PrvCommand selectCommand)  
 </term><description> 使用指定的 SQL SELECT 语句初始化 PrvDataAdapter 类的新实例。  
  
 </description></item><item><term> PrvDataAdapter (string selectCommandText，string selectConnectionString)  
 </term><description> 使用 SQL SELECT 语句和连接字符串初始化 PrvDataAdapter 类的新实例。  
  
 </description></item><item><term> PrvDataAdapter (string selectCommandText，PrvConnection selectConnection)  
 </term><description> 使用 SQL SELECT 语句和 PrvConnection 对象初始化 PrvDataAdapter 类的新实例。  
  
 </description></item></list></para></block>
  </Docs>
  <Members>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fill (dataSet As DataSet) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Fill : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">要用记录和架构（如果必要）填充的 <see cref="T:System.Data.DataSet" />。</param>
        <summary>添加或更新 <see cref="T:System.Data.DataSet" /> 中的行以匹配使用 <see cref="T:System.Data.DataSet" /> 名称的数据源中的行，并创建一个名为“Table”的 <see cref="T:System.Data.DataTable" />。</summary>
        <returns>已在 <see cref="T:System.Data.DataSet" /> 中成功添加或刷新的行数。 这不包括受不返回行的语句影响的行。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter.Fill%2A> 使用由关联的属性指定的 SELECT 语句从数据源中检索行 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 。 与 SELECT 语句关联的连接对象必须有效，但不需要打开。 如果在调用之前连接关闭 <xref:System.Data.IDataAdapter.Fill%2A> ，则将其打开以检索数据，然后关闭。 如果在调用之前连接处于打开状态 <xref:System.Data.IDataAdapter.Fill%2A> ，则该连接将保持打开状态。  
  
 <xref:System.Data.IDataAdapter.Fill%2A>然后，操作将行添加到 <xref:System.Data.DataTable> 中的目标对象 <xref:System.Data.DataSet> ，并创建 <xref:System.Data.DataTable> 对象（如果它们尚不存在）。 创建 <xref:System.Data.DataTable> 对象时，该 <xref:System.Data.IDataAdapter.Fill%2A> 操作通常仅创建列名元数据。 但是，如果将 <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> 属性设置为 `AddWithKey` ，则还会创建相应的主键和约束。  
  
 如果 `SelectCommand` 返回 OUTER JOIN 的结果，则 `DataAdapter` 不会为生成的 <xref:System.Data.DataTable.PrimaryKey%2A> 设置 <xref:System.Data.DataTable>值。 必须显式定义主键，以确保正确解析重复行。 有关详细信息，请参阅 [定义主键](/dotnet/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys)。  
  
 如果在 <xref:System.Data.IDataAdapter> 填充时遇到重复的列， <xref:System.Data.DataTable> 它将使用模式 "columnname1"、"columnname2"、"columnname3" 等，为后续列生成名称。 如果传入数据包含未命名列，则这些列将 <xref:System.Data.DataSet> 按照模式 "Column1"、"Column2"，依此类推。 如果将多个结果集添加到中 <xref:System.Data.DataSet> ，则每个结果集将放在一个单独的表中。 附加的结果集通过将整数值追加到指定的表名来命名 (例如，"Table"、"Table1"、"Table2" 等) 。 使用列和表名称时，应用程序应小心，以确保不会与这些命名模式发生冲突。  
  
 当用于填充的 SELECT 语句 <xref:System.Data.DataSet> 返回多个结果（如批处理 SQL 语句）时，如果其中一个结果包含错误，则会跳过所有后续结果，并且不会将其添加到中 <xref:System.Data.DataSet> 。  
  
 您可以 <xref:System.Data.IDataAdapter.Fill%2A> 在同一上多次使用该方法 <xref:System.Data.DataTable> 。 如果存在主键，则传入行与已存在的匹配行合并在一起。 如果主键不存在，则传入行将追加到 <xref:System.Data.DataTable> 。  
  
> [!NOTE]
>  当处理返回多个结果的批处理 SQL 语句时， <xref:System.Data.IDataAdapter.Fill%2A> <xref:System.Data.IDataAdapter.FillSchema%2A> .NET Framework 数据提供程序的和的实现仅检索第一个结果的架构信息。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="VB.NET" Value="Public Function FillSchema (dataSet As DataSet, schemaType As SchemaType) As DataTable()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="abstract member FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="iDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">要用数据源中的架构填充的 <see cref="T:System.Data.DataSet" />。</param>
        <param name="schemaType"><see cref="T:System.Data.SchemaType" /> 值之一。</param>
        <summary>将名为“Table”的 <see cref="T:System.Data.DataTable" /> 添加到指定的 <see cref="T:System.Data.DataSet" />，并根据指定的 <see cref="T:System.Data.SchemaType" /> 配置架构以匹配数据源中的架构。</summary>
        <returns><see cref="T:System.Data.DataTable" /> 对象的数组，这些对象包含从数据源返回的架构信息。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter.FillSchema%2A>方法使用检索数据源中的架构 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 。 与关联的连接对象 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 必须有效，但不需要打开。 如果在调用之前连接关闭 <xref:System.Data.IDataAdapter.FillSchema%2A> ，则将其打开以检索数据，然后关闭。 如果在调用之前连接处于打开状态 <xref:System.Data.IDataAdapter.FillSchema%2A> ，则该连接将保持打开状态。  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A>操作将添加 <xref:System.Data.DataTable> 到目标 <xref:System.Data.DataSet> 。 然后，它将列添加到的， <xref:System.Data.DataColumnCollection> <xref:System.Data.DataTable> 并配置以下 <xref:System.Data.DataColumn> 属性（如果它们存在于数据源中）：  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>。 您必须 <xref:System.Data.DataColumn.AutoIncrementStep%2A> 分别设置和 <xref:System.Data.DataColumn.AutoIncrementSeed%2A> 。  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A><xref:System.Data.DataTable.PrimaryKey%2A>根据以下规则，还可以配置和 <xref:System.Data.DataTable.Constraints%2A> 属性：  
  
-   如果返回一个或多个主键列，则将 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 它们用作的主键列 <xref:System.Data.DataTable> 。  
  
-   如果未返回主键列但唯一列为，则在所有唯一列都不可为 null 的情况下，将唯一列用作主键。 如果任何列可为 null， <xref:System.Data.UniqueConstraint> 则会将添加到 <xref:System.Data.ConstraintCollection> ，但 <xref:System.Data.DataTable.PrimaryKey%2A> 不设置属性。  
  
-   如果为主键列和唯一列都返回，则主键列将用作的主键列 <xref:System.Data.DataTable> 。  
  
 请注意，根据前面的规则将主键和 unique 约束添加到， <xref:System.Data.ConstraintCollection> 但不会添加其他约束类型。  
  
 如果在 SQL Server 表中的一列或多列上定义了唯一聚集索引，并且在一组单独的列上定义了 primary key 约束，则将返回聚集索引中的列的名称。 若要返回主键列的名称，请使用带有指定主键索引名称的 SELECT 语句的查询提示。 有关如何指定查询提示的详细信息，请参阅 [ (transact-sql) 的提示](/sql/t-sql/queries/hints-transact-sql-query)。  
  
 如果在 <xref:System.Data.IDataAdapter> 填充时遇到重复的列， <xref:System.Data.DataTable> 它将使用模式 "columnname1"、"columnname2"、"columnname3" 等，为后续列生成名称。 如果传入数据包含未命名列，则这些列将 <xref:System.Data.DataSet> 按照模式 "Column1"、"Column2"，依此类推。 如果将多个结果集添加到中 <xref:System.Data.DataSet> ，则每个结果集将放在一个单独的表中。 附加的结果集通过将整数值追加到指定的表名来命名 (例如，"Table"、"Table1"、"Table2" 等) 。 使用列和表名称时，应用程序应小心，以确保不会与这些命名模式发生冲突。  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A> 不返回任何行。 使用 <xref:System.Data.IDataAdapter.Fill%2A> 方法可将行添加到 <xref:System.Data.DataTable> 。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="iDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>获取当执行 SQL SELECT 语句时由用户设置的参数。</summary>
        <returns><see cref="T:System.Data.IDataParameter" /> 对象的数组，这些对象包含由用户设置的参数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
  
```csharp
private static void GetParameters(string connectionString)
{
    using (var conn = new SqlConnection(connectionString))
    {
        var queryString = "SELECT [CourseID],[Title],[Credits] FROM [MySchool].[dbo].[Course] WHERE [Year]=@Year AND [Credits]>=@Credits";
        var year = new SqlParameter("@Year", 2012);
        var credits = new SqlParameter("@Credits", SqlDbType.Int, 4, "Credits");
        credits.Value = 4;
        var command = new SqlCommand(queryString, conn);
        command.Parameters.Add(year);
        command.Parameters.Add(credits);
        IDbDataAdapter mySchool = new SqlDataAdapter(command);
        IDataParameter[] parameters = mySchool.GetFillParameters();
        Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", "ParameterName", "SourceColumn", "Direction", "DbType", "Value");
        foreach (IDataParameter parameter in parameters)
        {
            Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", parameter.ParameterName, parameter.SourceColumn, parameter.Direction, parameter.DbType, parameter.Value);
        }
    }
}
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingMappingAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingMappingAction As MissingMappingAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingMappingAction MissingMappingAction { System::Data::MissingMappingAction get(); void set(System::Data::MissingMappingAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingMappingAction : System.Data.MissingMappingAction with get, set" Usage="System.Data.IDataAdapter.MissingMappingAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示或指定是否将未映射的源表或列与其源名一起传递以便筛选或引发错误。</summary>
        <value><see cref="T:System.Data.MissingMappingAction" /> 值之一。 默认值为 <see langword="Passthrough" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter.TableMappings%2A>属性提供返回的记录和之间的主映射 <xref:System.Data.DataSet> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">设置的值不是 <see cref="T:System.Data.MissingMappingAction" /> 值之一。</exception>
        <altmember cref="P:System.Data.IDataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingSchemaAction As MissingSchemaAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingSchemaAction MissingSchemaAction { System::Data::MissingSchemaAction get(); void set(System::Data::MissingSchemaAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingSchemaAction : System.Data.MissingSchemaAction with get, set" Usage="System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示或指定是否将丢失的源表、列及其关系添加到数据集架构中，是否忽略它们或者它们是否会引发错误。</summary>
        <value><see cref="T:System.Data.MissingSchemaAction" /> 值之一。 默认值为 <see langword="Add" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">设置的值不是 <see cref="T:System.Data.MissingSchemaAction" /> 值之一。</exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.ITableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.TableMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TableMappings As ITableMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ITableMappingCollection ^ TableMappings { System::Data::ITableMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TableMappings : System.Data.ITableMappingCollection" Usage="System.Data.IDataAdapter.TableMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指示如何将源表映射到数据集表。</summary>
        <value>一个集合，它提供返回记录和 <see cref="T:System.Data.DataSet" /> 之间的主映射。 默认值为空集合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter>仅使用名为 "table" 的源表的映射。 返回数据的所有 SELECT、INSERT、DELETE 和 UPDATE 语句都必须使用一致的列命名。 记录中返回的列名必须是唯一的，否则具有重复名称的列将覆盖以前的数据。 在 <xref:System.Data.IDataAdapter.Update%2A> 中，只有映射到名为 "table" 的源表的表才会对其更改进行协调。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (dataSet As DataSet) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Update : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">用于更新数据源的 <see cref="T:System.Data.DataSet" />。</param>
        <summary>从名为“Table”的 <see cref="T:System.Data.DataSet" /> 为指定的 <see cref="T:System.Data.DataTable" /> 中每个已插入、已更新或已删除的行调用相应的 INSERT、UPDATE 或 DELETE 语句。</summary>
        <returns><see cref="T:System.Data.DataSet" /> 中成功更新的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当应用程序调用 <xref:System.Data.IDataAdapter.Update%2A> 方法时，将 <xref:System.Data.IDataAdapter> 检查 <xref:System.Data.DataRow.RowState%2A> 属性，并根据中配置的索引的顺序，对每个行重复执行所需的 INSERT、UPDATE 或 DELETE 语句 <xref:System.Data.DataSet> 。 例如， <xref:System.Data.IDataAdapter.Update%2A> 可能执行 DELETE 语句，后跟 INSERT 语句，然后执行另一 delete 语句，因为中的行的顺序 <xref:System.Data.DataTable> 。  
  
 请注意，这些语句不作为批处理执行;每一行都单独更新。 <xref:System.Data.DataSet.GetChanges%2A>如果必须控制语句类型的序列，应用程序可以调用方法 (例如，在更新) 之前插入。 有关详细信息，请参阅 [用 Dataadapter 更新数据源](/dotnet/framework/data/adonet/updating-data-sources-with-dataadapters)。  
  
 如果尚未指定 INSERT、UPDATE 或 DELETE 语句，则该方法将 <xref:System.Data.Common.DataAdapter.Update%2A> 生成一个异常。 但是， <xref:System.Data.SqlClient.SqlCommandBuilder> <xref:System.Data.OleDb.OleDbCommandBuilder> 如果您设置了 `SelectCommand` .NET Framework 数据提供程序的属性，则可以创建或对象以自动为单表更新生成 SQL 语句。 然后，CommandBuilder 将生成未设置的任何其他 SQL 语句。 此代逻辑要求密钥列信息存在于中 <xref:System.Data.DataSet> 。 有关详细信息，请参阅 [通过 Commandbuilder 生成命令](/dotnet/framework/data/adonet/generating-commands-with-commandbuilders)。  
  
 在 <xref:System.Data.Common.DataAdapter.Update%2A> 执行更新之前，方法将从第一个映射中列出的表中检索行。 <xref:System.Data.Common.DataAdapter.Update%2A>然后，使用属性的值更新该行 <xref:System.Data.IDbCommand.UpdatedRowSource%2A> 。 将忽略返回的任何其他行。  
  
 在将任何数据加载回后 <xref:System.Data.DataSet> ，将 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 引发事件，从而允许用户检查已协调的 <xref:System.Data.DataSet> 行和该命令返回的任何输出参数。 成功更新行后，将接受对该行所做的更改。  
  
 使用时 <xref:System.Data.IDataAdapter.Update%2A> ，执行顺序如下所示：  
  
1.  中的值 <xref:System.Data.DataRow> 将被移动到参数值中。  
  
2.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> 事件。  
  
3.  命令执行。  
  
4.  如果将命令设置为 `FirstReturnedRecord` ，则会将返回的第一个结果放入中 <xref:System.Data.DataRow> 。  
  
5.  如果有输出参数，则将它们放在中 <xref:System.Data.DataRow> 。  
  
6.  引发 <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> 事件。  
  
7.  调用 <xref:System.Data.DataRow.AcceptChanges%2A>。  
  
 与关联的每个命令 <xref:System.Data.IDataAdapter> 通常都具有与之关联的参数集合。 通过 `SourceColumn` `SourceVersion` .NET Framework 数据提供程序的类的和属性，将参数映射到当前行 `Parameter` 。 `SourceColumn` 引用 <xref:System.Data.DataTable> <xref:System.Data.IDataAdapter> 用于获取当前行的参数值的列。  
  
 `SourceColumn` 在应用了任何表映射之前引用未映射的列名称。 如果 `SourceColumn` 引用不存在的列，则执行的操作取决于下列值之一 <xref:System.Data.MissingMappingAction> 。  
  
|枚举值|执行的操作|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|如果不存在映射，请使用中的源列名称和表名称 <xref:System.Data.DataSet> 。|  
|`MissingMappingAction.Ignore`|<xref:System.SystemException>生成。 当显式设置映射时，缺少输入参数的映射通常是由错误引起的。|  
|`MissingMappingAction.Error`|<xref:System.SystemException>生成。|  
  
 `SourceColumn`属性还可用于将输出或输入/输出参数的值映射回 `DataSet` 。 如果引用不存在的列，则会生成异常。  
  
 `SourceVersion`.NET Framework 数据提供程序的类的属性 `Parameter` 确定是使用 `Original` 列值的、 `Current` 还是 `Proposed` 版本。 此功能经常用于在 UPDATE 语句的 WHERE 子句中包含原始值，以检查是否存在开放式并发冲突。  
  
> [!NOTE]
>  如果在更新行时出现错误，则会引发异常并中止执行更新。 若要在遇到错误时继续执行更新操作而不生成异常，请在 <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 调用之前将属性设置为 `true` <xref:System.Data.Common.DbDataAdapter.Update%2A> 。 您还可以在 DataAdapter 事件内每行响应错误 `RowUpdated` 。 若要继续执行更新操作而不在事件中生成异常 `RowUpdated` ，请将 <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> 的属性设置 <xref:System.Data.Common.RowUpdatedEventArgs> 为 <xref:System.Data.UpdateStatus.Continue> 。  
  
   
  
## Examples  
 下面的示例使用派生类 <xref:System.Data.OleDb.OleDbDataAdapter> 向 <xref:System.Data.Common.DataAdapter.Update%2A> 数据源。 此示例假设您已创建 <xref:System.Data.OleDb.OleDbDataAdapter> 和 <xref:System.Data.DataSet> 。  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DBConcurrencyException">尝试执行 INSERT、UPDATE 或 DELETE 语句，但没有记录受到影响。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
