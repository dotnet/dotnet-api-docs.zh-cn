<Type Name="IDbDataAdapter" FullName="System.Data.IDbDataAdapter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c46347a800dd405eb78b877a53825b2fc2c2e043" /><Meta Name="ms.sourcegitcommit" Value="943c8cdbe5b47c6c296a6f4b73038bbd43da0dd2" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="02/12/2021" /><Meta Name="ms.locfileid" Value="100300543" /></Metadata><TypeSignature Language="C#" Value="public interface IDbDataAdapter : System.Data.IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDbDataAdapter implements class System.Data.IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDbDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDbDataAdapter&#xA;Implements IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDbDataAdapter : System::Data::IDataAdapter" />
  <TypeSignature Language="F#" Value="type IDbDataAdapter = interface&#xA;    interface IDataAdapter" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Data.Common" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.IDataAdapter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示一组与命令有关的属性，用于填充 <see cref="T:System.Data.DataSet" /> 和更新数据源，并由访问关系数据库的 .NET 数据提供程序实现。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDbDataAdapter>接口继承自 <xref:System.Data.IDataAdapter> 接口，并允许对象创建用于关系数据库的 DataAdapter。 <xref:System.Data.IDbDataAdapter>接口和（可选）实用工具类 <xref:System.Data.Common.DbDataAdapter> 允许继承类实现 DataAdapter 类，该类表示数据源与之间的桥梁 <xref:System.Data.DataSet> 。 有关 DataAdapter 类的详细信息，请参阅 [从 DataAdapter 填充数据集](/dotnet/framework/data/adonet/populating-a-dataset-from-a-dataadapter)。 有关实现 .NET Framework 数据提供程序的详细信息，请参阅 [实现 .NET Framework 数据提供程序](https://docs.microsoft.com/previous-versions/dotnet/netframework-1.1/4ksaf9z5(v=vs.71))。  
  
 应用程序不会直接创建接口的实例 <xref:System.Data.IDbDataAdapter> ，而是创建继承和的类的实例 <xref:System.Data.IDbDataAdapter> <xref:System.Data.Common.DbDataAdapter> 。  
  
 继承的类 <xref:System.Data.IDbDataAdapter> 必须实现继承成员，并且通常定义其他成员来添加特定于提供程序的功能。 例如， <xref:System.Data.IDbDataAdapter> 接口定义 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 属性， <xref:System.Data.Common.DbDataAdapter> 接口定义 <xref:System.Data.IDataAdapter.Fill%2A> 采用 <xref:System.Data.DataTable> 作为参数的方法。 反过来， <xref:System.Data.OleDb.OleDbDataAdapter> 该类继承 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 属性和 <xref:System.Data.Common.DbDataAdapter.Fill%2A> 方法，还定义方法的两个附加重载， <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> 该重载采用 ADO 记录集对象作为参数。  
  
   
  
## Examples  
 下面的示例使用派生类（ <xref:System.Data.SqlClient.SqlCommand> 和） <xref:System.Data.SqlClient.SqlDataAdapter> <xref:System.Data.SqlClient.SqlConnection> 从数据源中选择记录。 <xref:System.Data.DataSet>然后返回填充的。 为实现此目的，会将方法传递给已初始化的 <xref:System.Data.DataSet> 、连接字符串和作为 TRANSACT-SQL SELECT 语句的查询字符串。  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>若要提升 .NET Framework 数据提供程序之间的一致性，请将该继承类命名为 <paramref name="Prv" /> DataAdapter，其中 <paramref name="Prv" /> 是为特定 .NET Framework 数据提供程序命名空间中的所有类指定的统一前缀。 例如， <paramref name="Sql" /> 是 <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> 命名空间中类的前缀 <see langword="System.Data.SqlClient" /> 。  
  
从接口继承时 <see cref="T:System.Data.IDbDataAdapter" /> ，应实现以下构造函数： 
 <list type="table"><listheader><term> 项 
 </term><description> 描述 
 </description></listheader><item><term> PrvDataAdapter ()  
 </term><description> 初始化 PrvDataAdapter 类的新实例。  
  
 </description></item><item><term> PrvDataAdapter (PrvCommand selectCommand)  
 </term><description> 使用指定的 SQL SELECT 语句初始化 PrvDataAdapter 类的新实例。  
  
 </description></item><item><term> PrvDataAdapter (string selectCommandText，string selectConnectionString)  
 </term><description> 使用 SQL SELECT 语句和连接字符串初始化 PrvDataAdapter 类的新实例。  
  
 </description></item><item><term> PrvDataAdapter (string selectCommandText，PrvConnection selectConnection)  
 </term><description> 使用 SQL SELECT 语句和 PrvConnection 对象初始化 PrvDataAdapter 类的新实例。  
  
 </description></item></list></para></block>
  </Docs>
  <Members>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand? DeleteCommand { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As IDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IDbCommand ^ DeleteCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DeleteCommand : System.Data.IDbCommand with get, set" Usage="System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand DeleteCommand { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于从数据集中删除记录的 SQL 语句。</summary>
        <value><see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />，它针对数据集中已删除的行删除数据源中的记录。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在过程中 <xref:System.Data.Common.DbDataAdapter.Update%2A> ，如果未设置此属性，并且主键信息存在于中 <xref:System.Data.DataSet> ，则 <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> 可以在设置 `SelectCommand` .NET Framework 数据提供程序的属性时自动生成。 然后，CommandBuilder 将生成未设置的任何其他命令。 此代逻辑要求密钥列信息存在于中 <xref:System.Data.DataSet> 。 有关详细信息，请参阅 [通过 Commandbuilder 生成命令](/dotnet/framework/data/adonet/generating-commands-with-commandbuilders)。  
  
 当 <xref:System.Data.IDbDataAdapter.DeleteCommand%2A> 分配给以前创建的时 <xref:System.Data.IDbCommand> ， <xref:System.Data.IDbCommand> 不会克隆。 <xref:System.Data.IDbDataAdapter.DeleteCommand%2A>维护对先前创建的对象的引用 <xref:System.Data.IDbCommand> 。  
  
   
  
## Examples  
 下面的示例创建继承类的实例 <xref:System.Data.OleDb.OleDbDataAdapter> ，并设置 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 和 <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A> 属性。 假设您已经创建了一个 <xref:System.Data.OleDb.OleDbConnection> 对象。  
  
 [!code-csharp[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand? InsertCommand { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As IDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IDbCommand ^ InsertCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InsertCommand : System.Data.IDbCommand with get, set" Usage="System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand InsertCommand { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于将新记录插入到数据源中的 SQL 语句。</summary>
        <value>在 <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />，它针对数据集中的新行将记录插入到数据源。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在过程中 <xref:System.Data.Common.DbDataAdapter.Update%2A> ，如果未设置此属性，并且主键信息存在于中 <xref:System.Data.DataSet> ，则 <xref:System.Data.IDbDataAdapter.InsertCommand%2A> 可以在设置 `SelectCommand` .NET Framework 数据提供程序的属性时自动生成。 然后，CommandBuilder 将生成未设置的任何其他命令。 此代逻辑要求密钥列信息存在于中 <xref:System.Data.DataSet> 。 有关详细信息，请参阅 [通过 Commandbuilder 生成命令](/dotnet/framework/data/adonet/generating-commands-with-commandbuilders)。  
  
 当 <xref:System.Data.IDbDataAdapter.InsertCommand%2A> 分配给以前创建的时 <xref:System.Data.IDbCommand> ， <xref:System.Data.IDbCommand> 不会克隆。 <xref:System.Data.IDbDataAdapter.InsertCommand%2A>维护对先前创建的对象的引用 <xref:System.Data.IDbCommand> 。  
  
> [!NOTE]
>  如果执行此命令将返回行，则可能会根据 <xref:System.Data.DataSet> 设置对象的属性的方式将这些行添加到中 <xref:System.Data.IDbCommand.UpdatedRowSource%2A> <xref:System.Data.IDbCommand> 。  
  
   
  
## Examples  
 下面的示例创建继承类的实例 <xref:System.Data.OleDb.OleDbDataAdapter> ，并设置 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 和 <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> 属性。 假设您已经创建了一个 <xref:System.Data.OleDb.OleDbConnection> 对象。  
  
 [!code-csharp[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand? SelectCommand { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As IDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IDbCommand ^ SelectCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectCommand : System.Data.IDbCommand with get, set" Usage="System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand SelectCommand { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于在数据源中选择记录的 SQL 语句。</summary>
        <value>在 <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />，它从数据源中选择记录以便放入数据集中。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 分配给以前创建的时 <xref:System.Data.IDbCommand> ， <xref:System.Data.IDbCommand> 不会克隆。 <xref:System.Data.IDbDataAdapter.SelectCommand%2A>维护对先前创建的对象的引用 <xref:System.Data.IDbCommand> 。  
  
 如果未 <xref:System.Data.IDbDataAdapter.SelectCommand%2A> 返回任何行，则不会向中添加任何表 <xref:System.Data.DataSet> ，也不会引发异常。  
  
   
  
## Examples  
 下面的示例创建继承类的实例 <xref:System.Data.OleDb.OleDbDataAdapter> ，并设置 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 和 <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> 属性。 假设您已经创建了一个 <xref:System.Data.OleDb.OleDbConnection> 对象。  
  
 [!code-csharp[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand? UpdateCommand { get; set; }" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As IDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::IDbCommand ^ UpdateCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UpdateCommand : System.Data.IDbCommand with get, set" Usage="System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand UpdateCommand { get; set; }" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置用于更新数据源中的记录的 SQL 语句。</summary>
        <value>在 <see cref="T:System.Data.IDbCommand" /> 过程中使用的 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />，它针对数据集中已修改的行更新数据源中的记录。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在过程中 <xref:System.Data.Common.DbDataAdapter.Update%2A> ，如果未设置此属性，并且主键信息存在于中 <xref:System.Data.DataSet> ，则 <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> 可以在设置 `SelectCommand` .NET Framework 数据提供程序的属性时自动生成。 然后，CommandBuilder 将生成未设置的任何其他命令。 此代逻辑要求密钥列信息存在于中 <xref:System.Data.DataSet> 。 有关详细信息，请参阅 [通过 Commandbuilder 生成命令](/dotnet/framework/data/adonet/generating-commands-with-commandbuilders)。  
  
 当 <xref:System.Data.IDbDataAdapter.UpdateCommand%2A> 分配给以前创建的时 <xref:System.Data.IDbCommand> ， <xref:System.Data.IDbCommand> 不会克隆。 <xref:System.Data.IDbDataAdapter.UpdateCommand%2A>维护对先前创建的对象的引用 <xref:System.Data.IDbCommand> 。  
  
> [!NOTE]
>  如果执行此命令将返回行，则会将这些行添加到中 <xref:System.Data.DataSet> 。  
  
   
  
## Examples  
 下面的示例创建继承类的实例 <xref:System.Data.OleDb.OleDbDataAdapter> ，并设置 <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 和 <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A> 属性。 假设您已经创建了一个 <xref:System.Data.OleDb.OleDbConnection> 对象。  
  
 [!code-csharp[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.UpdateCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.UpdateCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
