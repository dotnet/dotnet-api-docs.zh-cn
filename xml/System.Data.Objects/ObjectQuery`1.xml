<Type Name="ObjectQuery&lt;T&gt;" FullName="System.Data.Objects.ObjectQuery&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="62d6563c1c87db5d363b7ee4a406ca5cd2107951" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86862254" /></Metadata><TypeSignature Language="C#" Value="public class ObjectQuery&lt;T&gt; : System.Data.Objects.ObjectQuery, System.Collections.Generic.IEnumerable&lt;T&gt;, System.ComponentModel.IListSource, System.Linq.IOrderedQueryable&lt;T&gt;, System.Linq.IQueryable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectQuery`1&lt;T&gt; extends System.Data.Objects.ObjectQuery implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Linq.IOrderedQueryable, class System.Linq.IOrderedQueryable`1&lt;!T&gt;, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!T&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.ObjectQuery`1" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectQuery(Of T)&#xA;Inherits ObjectQuery&#xA;Implements IEnumerable(Of T), IListSource, IOrderedQueryable(Of T), IQueryable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ObjectQuery : System::Data::Objects::ObjectQuery, System::Collections::Generic::IEnumerable&lt;T&gt;, System::ComponentModel::IListSource, System::Linq::IOrderedQueryable&lt;T&gt;, System::Linq::IQueryable&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type ObjectQuery&lt;'T&gt; = class&#xA;    inherit ObjectQuery&#xA;    interface IOrderedQueryable&lt;'T&gt;&#xA;    interface IQueryable&lt;'T&gt;&#xA;    interface seq&lt;'T&gt;&#xA;    interface IOrderedQueryable&#xA;    interface IQueryable&#xA;    interface IEnumerable&#xA;    interface IListSource" FrameworkAlternate="netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
  <TypeSignature Language="F#" Value="type ObjectQuery&lt;'T&gt; = class&#xA;    inherit ObjectQuery&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IOrderedQueryable&lt;'T&gt;&#xA;    interface IOrderedQueryable&#xA;    interface IListSource" FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Objects.ObjectQuery</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IOrderedQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IOrderedQueryable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">查询的实体类型。</typeparam>
    <summary>表示在给定对象上下文中对概念模型的类型化查询。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectQuery%601> 泛型类表示一个查询，该查询返回由零个或多个特定类型的对象组成的集合。 在执行对象查询之前，必须定义 <xref:System.Data.Objects.ObjectContext>。 此上下文提供了编写和执行查询所需的连接和元数据信息。 在以下方案中将执行对象查询：

-   对其执行操作时，例如 `foreach` (C#) 或 `For Each` (Visual Basic) 枚举期间。

-   分配用于填充 <xref:System.Collections.Generic.List%601> 集合时。

-   显式调用 <xref:System.Data.Objects.ObjectQuery%601.Execute%2A> 方法时。

 查询本身可以使用一个 [!INCLUDE[esql](~/includes/esql-md.md)] 语句或 LINQ 查询进行创建，也可以使用类中包含的查询生成器方法以增量方式生成。 在每种情况下，结果都为一个新 <xref:System.Data.Objects.ObjectQuery%601> 实例，该实例在显式执行或对其进行枚举时，会将查询发送到数据源进行执行并返回结果。

 <xref:System.Data.Objects.ObjectQuery%601> 通常是实体类型，也可以是 <xref:System.Data.Common.DbDataRecord> 类型（用于匿名类型的投影）或基元类型（如整数或字符串）。 有关详细信息，请参阅 [对象查询](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896241(v=vs.100))。



## Examples
 本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。

 该示例演示如何构造 <xref:System.Data.Objects.ObjectQuery%601> 类的实例。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery)]

 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/data/adonet/ef/language-reference/entity-sql-language">Entity SQL 语言</related>
    <related type="Article" href="/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities">LINQ to Entities</related>
    <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 可以对 <xref:System.Data.Objects.ObjectQuery%601> 进行初始化，使之表示单个标量结果而不是标量结果集合。 某些扩展方法要求使用集合结果作为输入。 在这种情况下，当调用其中的一个方法时将引发 <xref:System.ArgumentException>。 有关详细信息，请参阅 [对象查询](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896241(v=vs.100))。

 当应用程序在运行时生成实体 SQL 查询时，应注意数据源的任何命令长度限制。 实体 SQL 不会强制对查询中命令文本的长度施加限制。

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据，并 (实体框架形成结果) </related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectQuery (string commandText, System.Data.Objects.ObjectContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandText, class System.Data.Objects.ObjectContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (commandText As String, context As ObjectContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectQuery(System::String ^ commandText, System::Data::Objects::ObjectContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectQuery&lt;'T&gt; : string * System.Data.Objects.ObjectContext -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="new System.Data.Objects.ObjectQuery&lt;'T&gt; (commandText, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="context" Type="System.Data.Objects.ObjectContext" />
      </Parameters>
      <Docs>
        <param name="commandText">[!INCLUDE[esql](~/includes/esql-md.md)] 查询。</param>
        <param name="context">对其执行查询的 <see cref="T:System.Data.Objects.ObjectContext" />。</param>
        <summary>以指定的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 命令为初始查询来创建新的 [!INCLUDE[esql](~/includes/esql-md.md)] 实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当应用程序在运行时生成实体 SQL 查询时，应注意数据源的任何命令长度限制。 实体 SQL 不会强制对查询中命令文本的长度施加限制。



## Examples
 本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。 该示例演示如何构造 <xref:System.Data.Objects.ObjectQuery%601> 类的实例。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery)]

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectQuery (string commandText, System.Data.Objects.ObjectContext context, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string commandText, class System.Data.Objects.ObjectContext context, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (commandText As String, context As ObjectContext, mergeOption As MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectQuery(System::String ^ commandText, System::Data::Objects::ObjectContext ^ context, System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectQuery&lt;'T&gt; : string * System.Data.Objects.ObjectContext * System.Data.Objects.MergeOption -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="new System.Data.Objects.ObjectQuery&lt;'T&gt; (commandText, context, mergeOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" />
        <Parameter Name="context" Type="System.Data.Objects.ObjectContext" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="commandText">[!INCLUDE[esql](~/includes/esql-md.md)] 查询。</param>
        <param name="context">对其执行查询的 <see cref="T:System.Data.Objects.ObjectContext" />。</param>
        <param name="mergeOption">指定此查询所检索的实体应如何与以前对同一 <see cref="T:System.Data.Objects.ObjectContext" /> 的查询所返回的实体合并。</param>
        <summary>使用指定的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 命令（作为初始查询）和指定的合并选项创建新的 [!INCLUDE[esql](~/includes/esql-md.md)] 实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 当应用程序在运行时生成实体 SQL 查询时，应注意数据源的任何命令长度限制。 实体 SQL 不会强制对查询中命令文本的长度施加限制。



## Examples
 此示例基于 [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)。 <xref:System.Data.Objects.ObjectQuery%601> 以指定的查询、<xref:System.Data.Objects.ObjectContext> 和 <xref:System.Data.Objects.MergeOption> 进行初始化。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_select)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_select)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Distinct">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Distinct ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Distinct() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Distinct" />
      <MemberSignature Language="VB.NET" Value="Public Function Distinct () As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Distinct();" />
      <MemberSignature Language="F#" Value="member this.Distinct : unit -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Distinct " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将查询限制为唯一结果。</summary>
        <returns>一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql">SELECT DISTINCT</see> 的原始实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此查询生成器方法返回一个 <xref:System.Data.Objects.ObjectQuery%601> 实例，该实例等效于已应用 [SELECT DISTINCT](/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql) 的原始查询。

 `DISTINCT`运算符不能应用于包含映射到数据源中不可比较的列 (例如 ntext) 的对象。



## Examples
 本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。 该示例使用 <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> 方法创建新的 <xref:System.Data.Objects.ObjectQuery%601> 对象。 然后对新的 <xref:System.Data.Objects.ObjectQuery%601.Distinct%2A> 对象调用 <xref:System.Data.Objects.ObjectQuery%601>，以获取此查询的唯一结果。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_unionall)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_unionall)]

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="Except">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Except (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Except(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Except (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Except(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Except : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Except query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query">一个 <see cref="T:System.Data.Objects.ObjectQuery`1" />，表示要从查询中排除的结果。</param>
        <summary>通过根据另一个对象查询的结果排除结果的方式限制查询结果。</summary>
        <returns>新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于根据指定的 <paramref name="query" /> 应用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/except-entity-sql">EXCEPT</see> 的原始实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 提供 `query` 的用于定义要排除的结果的类型必须为与兼容的类型或类型 <xref:System.Data.Objects.ObjectQuery%601> 。

 在提供的中定义的参数 `query` 将与在实例中定义的参数合并 <xref:System.Data.Objects.ObjectQuery%601> 。 参数在组合后的 <xref:System.Data.Objects.ObjectParameterCollection> 中必须是唯一的。 组合后的集合中不能有两个具有相同名称的参数。 有关详细信息，请参阅 [查询生成器方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))。

 生成的查询从 <xref:System.Data.Objects.ObjectQuery%601> 实例（调用了它的 <xref:System.Data.Objects.ObjectQuery%601.Except%2A>）继承连接。



## Examples
 此示例基于 [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)。 该示例使用 <xref:System.Data.Objects.ObjectQuery%601.Except%2A> 方法创建新的 <xref:System.Data.Objects.ObjectQuery%601> 对象，然后循环访问新查询的结果。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Except](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_except)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Except](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_except)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="query" /> 参数为 <see langword="null" /> 或空字符串。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据，并 (实体框架形成结果) </related>
      </Docs>
    </Member>
    <Member MemberName="Execute">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;T&gt; Execute (System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!T&gt; Execute(valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function Execute (mergeOption As MergeOption) As ObjectResult(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectResult&lt;T&gt; ^ Execute(System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="override this.Execute : System.Data.Objects.MergeOption -&gt; System.Data.Objects.ObjectResult&lt;'T&gt;" Usage="objectQuery.Execute mergeOption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" />
      </Parameters>
      <Docs>
        <param name="mergeOption">要在执行查询时使用的 <see cref="T:System.Data.Objects.MergeOption" />。 默认为 <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />。</param>
        <summary>使用指定的合并选项执行对象查询。</summary>
        <returns>一个 <see cref="T:System.Data.Objects.ObjectResult`1" />，它包含查询返回的实体对象的集合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 对象查询的默认合并选项为 <xref:System.Data.Objects.MergeOption.AppendOnly>。 有关详细信息，请参阅 [标识解析、状态管理和更改跟踪](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896269(v=vs.100))。



## Examples
 此示例基于 [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)。 该示例从 <xref:System.Data.Objects.ObjectResult%601> 方法返回一个 <xref:System.Data.Objects.ObjectQuery.Execute%2A>。 然后，获取一个枚举器并循环访问查询结果。 最后，释放枚举器和 <xref:System.Data.Objects.ObjectResult%601> 对象。

 [!code-csharp[DP ObjectServices Concepts#QueryResult](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#queryresult)]
 [!code-vb[DP ObjectServices Concepts#QueryResult](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#queryresult)]

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt; GroupBy (string keys, string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;class System.Data.Common.DbDataRecord&gt; GroupBy(string keys, string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GroupBy (keys As String, projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of DbDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;System::Data::Common::DbDataRecord ^&gt; ^ GroupBy(System::String ^ keys, System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string * string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;" Usage="objectQuery.GroupBy (keys, projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">作为结果分组依据的键列。</param>
        <param name="projection">用于定义投影的所选属性的列表。</param>
        <param name="parameters">此方法中使用的零个或多个参数。</param>
        <summary>按指定的条件对查询结果进行分组。</summary>
        <returns>一个 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 类型的新 <see cref="T:System.Data.Common.DbDataRecord" /> 实例，等效于应用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/group-by-entity-sql">GROUP BY</see> 的原始实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectQuery%601.GroupBy%2A> 应用参数指定的投影 `projection` 。 这意味着 <xref:System.Data.Objects.ObjectQuery%601> 方法返回的 <xref:System.Data.Objects.ObjectQuery%601.GroupBy%2A> 始终具有类型 <xref:System.Data.Common.DbDataRecord>。 有关详细信息，请参阅 [对象查询](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896241(v=vs.100))。



## Examples
 此示例基于 [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)。

 此示例创建一个新的 <xref:System.Data.Objects.ObjectQuery%601> 对象，该对象包含现有查询的按产品名称分组的结果。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_GroupBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_groupby)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_GroupBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_groupby)]

 此示例返回一组嵌套的数据记录，这些记录包含 `Contact.LastName` 按的第一个字母进行分组和排序的列 `Contact.LastName` 。

 [!code-csharp[DP ObjectServices Concepts#Projection_GroupBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_groupby)]
 [!code-vb[DP ObjectServices Concepts#Projection_GroupBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_groupby)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="query" /> 参数为 <see langword="null" /> 或空字符串。

-或-

<paramref name="projection" /> 参数为 <see langword="null" /> 或空字符串。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="Include">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Include (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Include(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Include(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Include (path As String) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Include(System::String ^ path);" />
      <MemberSignature Language="F#" Value="member this.Include : string -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Include path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">要在查询结果中返回的相关对象的列表（以点分隔）。</param>
        <summary>指定要包括在查询结果中的相关对象。</summary>
        <returns>一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" />，它具有定义的查询路径。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 查询路径可以用于 Entity SQL 和 LINQ 查询。

 路径是完全内包含的。 例如，如果包含调用指示 `Include("Orders.OrderLines")` ，则不仅会包含在内 `OrderLines` ，而且还会包括 `Orders` 。 有关详细信息，请参阅 [加载相关对象](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896272(v=vs.100))。

 在调用 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> 方法时，查询路径仅在 <xref:System.Data.Objects.ObjectQuery%601> 的返回实例上有效。 不影响 <xref:System.Data.Objects.ObjectQuery%601> 的其他实例和对象上下文本身。

 因为 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> 方法返回查询对象，所以可以对一个 <xref:System.Data.Objects.ObjectQuery%601> 多次调用此方法，从而为查询指定多个路径，如下面的示例所示：

 [!code-csharp[DP ObjectServices Concepts#SpanOnlyWithMultiplePaths](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#spanonlywithmultiplepaths)]
 [!code-vb[DP ObjectServices Concepts#SpanOnlyWithMultiplePaths](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#spanonlywithmultiplepaths)]



## Examples
 [!code-csharp[DP ObjectServices Concepts#QueryWithSpan](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithspan)]
 [!code-vb[DP ObjectServices Concepts#QueryWithSpan](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithspan)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="path" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="path" /> 为 <see langword="empty" />。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Intersect (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Intersect(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Intersect (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Intersect(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Intersect : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Intersect query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query">一个 <see cref="T:System.Data.Objects.ObjectQuery`1" />，表示要包括在查询中的结果。</param>
        <summary>通过仅包含另一个对象查询中存在的结果的方式限制查询结果。</summary>
        <returns>一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于根据指定的 <paramref name="query" /> 应用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/intersect-entity-sql">INTERSECT</see> 的原始实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 提供 `query` 的（用于定义要包含的结果）必须为与兼容的类型或类型 <xref:System.Data.Objects.ObjectQuery%601> 。

 在提供的中定义的参数 `query` 将与在实例中定义的参数合并 <xref:System.Data.Objects.ObjectQuery%601> 。 参数在组合后的 <xref:System.Data.Objects.ObjectParameterCollection> 中必须是唯一的。 组合后的集合中不能有两个具有相同名称的参数。 有关详细信息，请参阅 [查询生成器方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))。

 生成的查询从 <xref:System.Data.Objects.ObjectQuery%601> 实例（调用了它的 <xref:System.Data.Objects.ObjectQuery%601.Intersect%2A> 方法）继承连接。



## Examples
 本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。 此示例创建一个新的 <xref:System.Data.Objects.ObjectQuery%601> 对象，该对象包含两个其他查询的结果。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Intersect](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_intersect)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Intersect](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_intersect)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="query" /> 参数为 <see langword="null" /> 或空字符串。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectQuery`1.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Data.Objects.ObjectQuery&lt;'T&gt;.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置此对象查询的名称。</summary>
        <value>一个 <see langword="string" /> 值，表示此 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 在构造查询生成器方法时，对象查询的名称按名称确定序列中的当前对象查询。 默认情况下，查询名称为 `it` 。 在 <xref:System.Data.Objects.ObjectQuery`1.Where*> 方法或 <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> 方法中引用联接中的当前序列时，这十分有用。 有关详细信息，请参阅 [查询生成器方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))。

 当设置 <xref:System.Data.Objects.ObjectQuery%601.Name%2A> 的 <xref:System.Data.Objects.ObjectQuery%601> 属性时，该值成为后续方法中的别名。

 <xref:System.Data.Objects.ObjectQuery%601.Name%2A> 属性的值必须以字母开头，可以包含字母、数字和下划线。



## Examples
 此示例将第一个 <xref:System.Data.Objects.ObjectQuery%601> 的名称设置为“product”，然后在后续 <xref:System.Data.Objects.ObjectQuery%601.OrderBy%2A> 方法中使用此别名。 本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。

 [!code-csharp[DP ObjectServices Concepts#QueryWithAliasNamed](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querywithaliasnamed)]
 [!code-vb[DP ObjectServices Concepts#QueryWithAliasNamed](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querywithaliasnamed)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">在集上指定的值无效。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="OfType&lt;TResultType&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TResultType&gt; OfType&lt;TResultType&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!TResultType&gt; OfType&lt;TResultType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.OfType``1" />
      <MemberSignature Language="VB.NET" Value="Public Function OfType(Of TResultType) () As ObjectQuery(Of TResultType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResultType&gt;&#xA; System::Data::Objects::ObjectQuery&lt;TResultType&gt; ^ OfType();" />
      <MemberSignature Language="F#" Value="member this.OfType : unit -&gt; System.Data.Objects.ObjectQuery&lt;'ResultType&gt;" Usage="objectQuery.OfType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TResultType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResultType" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TResultType">使用应用筛选器执行查询时，<see cref="T:System.Data.Objects.ObjectResult`1" /> 的类型返回。</typeparam>
        <summary>将查询限制为仅包括特定类型的结果。</summary>
        <returns>一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/oftype-entity-sql">OFTYPE</see> 的原始实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
<xref:System.Data.Objects.ObjectQuery`1.OfType*> 用于按特定实体或复杂类型筛选查询结果。 这支持使用对象继承的概念模型。 有关详细信息，请参阅 [实体数据模型：继承](/dotnet/framework/data/adonet/entity-data-model-inheritance)。

<xref:System.Data.Objects.ObjectQuery`1.OfType*>方法只能应用于 <xref:System.Data.Objects.ObjectQuery%601> 在 EDM 中定义的实体类型或复杂类型的。

 ]]></format>
        </remarks>
        <exception cref="T:System.Data.EntitySqlException">指定的类型无效。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/be01614e-070e-41be-9746-bb674b41e488(v=vs.90)">如何：使用每个层次结构一个表继承创建和执行对象查询（实体框架）</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; OrderBy (string keys, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; OrderBy(string keys, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function OrderBy (keys As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ OrderBy(System::String ^ keys, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.OrderBy (keys, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">作为结果排序依据的键列。</param>
        <param name="parameters">此方法中使用的零个或多个参数。</param>
        <summary>按指定条件对查询结果进行排序。</summary>
        <returns>一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/order-by-entity-sql">ORDER BY</see> 的原始实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 嵌套查询中的结果排序无法得到保证。

 <xref:System.Data.Objects.ObjectQuery%601.OrderBy%2A> 应始终为序列中的最终查询生成器方法。



## Examples
 此示例基于 [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)。 该示例创建一个新 <xref:System.Data.Objects.ObjectQuery%601> 的对象，该对象包含现有查询顺序的结果 `ProductID` 。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_OrderBy](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_orderby)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_OrderBy](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_orderby)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="keys" /> 或 <paramref name="parameters" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="key" /> 是一个空字符串。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt; Select (string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;class System.Data.Common.DbDataRecord&gt; Select(string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Select (projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of DbDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;System::Data::Common::DbDataRecord ^&gt; ^ Select(System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Select : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;" Usage="objectQuery.Select (projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;System.Data.Common.DbDataRecord&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="projection">用于定义投影的所选属性的列表。</param>
        <param name="parameters">此方法中使用的零个或多个参数。</param>
        <summary>将查询结果限制为仅包含在指定投影中定义的属性。</summary>
        <returns>一个 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 类型的新 <see cref="T:System.Data.Common.DbDataRecord" /> 实例，等效于应用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql">SELECT</see> 的原始实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectQuery%601.Select%2A> 应用参数指定的投影 `projection` 。 <xref:System.Data.Objects.ObjectQuery%601> 方法返回的 <xref:System.Data.Objects.ObjectQuery%601.Select%2A> 始终为行类型 <xref:System.Data.Common.DbDataRecord>。 使用 <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> 方法可返回简单类型、实体类型或复杂类型的值。 有关详细信息，请参阅 [LINQ to Entities](/dotnet/framework/data/adonet/ef/language-reference/linq-to-entities)。

 当投影中包括导航属性时，查询结果包括嵌套的 <xref:System.Data.Common.DbDataRecord> 对象的集合。 有关详细信息，请参阅 [如何：使用导航属性导航关系](https://msdn.microsoft.com/library/b1d71c7d-16a7-4b46-96ac-690176bd5057)。



## Examples
 此示例基于 [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)。 该示例创建一个新的， <xref:System.Data.Objects.ObjectQuery%601> 其结果是包含 `ProductID` 此查询结果的字段的数据记录。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_select)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Select](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_select)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="projection" /> 为 <see langword="null" />。

- 或 -

 <paramref name="parameters" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="projection" /> 是一个空字符串。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="SelectValue&lt;TResultType&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;TResultType&gt; SelectValue&lt;TResultType&gt; (string projection, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!TResultType&gt; SelectValue&lt;TResultType&gt;(string projection, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectValue(Of TResultType) (projection As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of TResultType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResultType&gt;&#xA; System::Data::Objects::ObjectQuery&lt;TResultType&gt; ^ SelectValue(System::String ^ projection, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.SelectValue : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'ResultType&gt;" Usage="objectQuery.SelectValue (projection, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;TResultType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResultType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="projection" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResultType">由 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 方法返回的 <see cref="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" /> 的类型。</typeparam>
        <param name="projection">投影列表。</param>
        <param name="parameters">在分析时应在作用域内的一组可选查询参数。</param>
        <summary>将查询结果限制为仅包含投影中指定的属性。</summary>
        <returns>一个类型与特定投影兼容的新 <see cref="T:System.Data.Objects.ObjectQuery`1" />。 返回的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 等效于应用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/select-entity-sql">SELECT VALUE</see> 的原始实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> 用于返回简单类型、实体类型或复杂类型的值。 <xref:System.Data.Objects.ObjectQuery%601.Select%2A> 方法用于需要行类型（而不是值类型）的投影。 有关详细信息，请参阅 [对象查询](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896241(v=vs.100))。

 <xref:System.Data.Objects.ObjectQuery`1.SelectValue*>方法应用参数指定的投影 `projection` 。 <xref:System.Data.Objects.ObjectQuery%601> 方法返回的 <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> 必须具有与投影兼容的值类型，且必须具有与 <xref:System.Data.Objects.ObjectQuery`1.SelectValue*> 的类型相同的类型。



## Examples
 此示例基于 [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)。 该示例创建一个新 <xref:System.Data.Objects.ObjectQuery%601> 的，其中包含的结果是 `ProductID` 从现有查询的结果中投影的值序列。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_SelectValue](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_selectvalue)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_SelectValue](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_selectvalue)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="projection" /> 为 <see langword="null" />。

- 或 -

 <paramref name="parameters" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="projection" /> 是一个空字符串。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Skip (string keys, string count, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Skip(string keys, string count, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Skip (keys As String, count As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Skip(System::String ^ keys, System::String ^ count, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Skip : string * string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Skip (keys, count, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="count" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="keys">作为结果排序依据的键列。</param>
        <param name="count">要跳过的结果数。 它可以是常量或参数引用。</param>
        <param name="parameters">在分析时应在作用域内的一组可选查询参数。</param>
        <summary>按指定条件对查询结果进行排序并跳过指定数目的结果。</summary>
        <returns>一个新 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于同时应用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/order-by-entity-sql">ORDER BY</see> 和 [SKIP](/dotnet/framework/data/adonet/ef/language-reference/skip-entity-sql) 的原始实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectQuery%601.Skip%2A> 方法不能在 <xref:System.Data.Objects.ObjectQuery%601.Top%2A> 方法之后使用。 使用 <xref:System.Data.Objects.ObjectQuery%601.Top%2A> after 后 <xref:System.Data.Objects.ObjectQuery%601.Skip%2A> ，它的作用类似于子句的 [LIMIT](/dotnet/framework/data/adonet/ef/language-reference/limit-entity-sql) 语句。



## Examples
 此示例在 `Product` 跳过查询结果中的前三个对象之后获取5个对象，并按排序 `Product.ListPrice` 。

 [!code-csharp[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_skiplimit)]
 [!code-vb[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_skiplimit)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">任何参数为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="keys" /> 是一个空字符串。

- 或 -

 <paramref name="count" /> 是一个空字符串。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;T&gt; IEnumerable&lt;T&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable&lt;T&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;T&gt;::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="objectQuery.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个循环访问查询结果的枚举器。</summary>
        <returns>一个 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 对象，可用于循环访问结果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 调用 <xref:System.Data.Objects.ObjectQuery%601.System%23Collections%23Generic%23IEnumerable%7BT%7D%23GetEnumerator%2A> 会执行查询。

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Top (string count, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Top(string count, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Top (count As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Top(System::String ^ count, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Top : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Top (count, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="count">字符串形式的结果项数。</param>
        <param name="parameters">在分析时应在作用域内的一组可选查询参数。</param>
        <summary>将查询结果限制为指定的项数。</summary>
        <returns>一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/top-entity-sql">TOP</see> 的原始实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 除非对查询进行排序，否则 <xref:System.Data.Objects.ObjectQuery%601.Top%2A> 具有不确定性。

 在 <xref:System.Data.Objects.ObjectQuery%601.Top%2A> 方法后使用方法时 <xref:System.Data.Objects.ObjectQuery%601.Skip%2A> ，它的作用类似于[ORDER By](/dotnet/framework/data/adonet/ef/language-reference/order-by-entity-sql)子句的[LIMIT](/dotnet/framework/data/adonet/ef/language-reference/limit-entity-sql)语句。



## Examples
 这些示例基于 [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)。

 此示例创建一个新的 <xref:System.Data.Objects.ObjectQuery%601>，该对象包含现有查询的前两个结果。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Top](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_top)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Top](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_top)]

 此示例在 `Product` 跳过查询结果中的前三个对象之后获取5个对象，并按排序 `Product.ListPrice` 。 <xref:System.Data.Objects.ObjectQuery%601.Top%2A> 使用而不是对分页的 [限制](/dotnet/framework/data/adonet/ef/language-reference/limit-entity-sql) 。

 [!code-csharp[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#projection_skiplimit)]
 [!code-vb[DP ObjectServices Concepts#Projection_SkipLimit](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#projection_skiplimit)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="count" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="count" /> 是一个空字符串。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Union (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Union(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Union (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Union(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.Union : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Union query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query">一个 <see cref="T:System.Data.Objects.ObjectQuery`1" />，表示要添加的结果。</param>
        <summary>将查询结果与另一个对象查询的结果进行组合（不包括重复项）。</summary>
        <returns>一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/union-entity-sql">UNION</see> 来添加指定 <paramref name="query" /> 的结果的原始实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectQuery%601.Union%2A> 添加提供的结果， `query` 而不包含任何重复项。

 提供 `query` 的用于定义要添加的结果的类型必须为同一类型或可以提升为此的类型的类型 <xref:System.Data.Objects.ObjectQuery%601> 。 例如，下面是有效的，因为 `DiscontinuedProducts` 可以升级到 `Products` ：

```
ObjectQuery<Product>.Union(ObjectQuery<DiscontinuedProduct>)
```

 下面将引发异常 `Products` ，因为无法将其提升为 `DiscontinuedProducts` 。

```
ObjectQuery <DiscontinuedProduct>.Union(ObjectQuery<Product>)
```

 对于 <xref:System.Data.Objects.ObjectQuery%601> 类型为的 <xref:System.Data.Common.DbDataRecord> ，两个查询中的记录必须具有相同的列数，并且传递的中的列中的类型 <xref:System.Data.Common.DbDataRecord> `query` 必须可提升为的中的列类型 <xref:System.Data.Common.DbDataRecord> <xref:System.Data.Objects.ObjectQuery%601> 。

 在提供的中定义的参数 `query` 将与在实例中定义的参数合并 <xref:System.Data.Objects.ObjectQuery%601> 。 参数在组合后的 <xref:System.Data.Objects.ObjectParameterCollection> 中必须是唯一的。 组合后的集合中不能有两个具有相同名称的参数。 有关详细信息，请参阅 [查询生成器方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))。

 生成的查询从 <xref:System.Data.Objects.ObjectQuery%601> 实例（调用了它的 <xref:System.Data.Objects.ObjectQuery%601.Union%2A>）继承连接。



## Examples
 此示例基于 [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)。 该示例使用 <xref:System.Data.Objects.ObjectQuery%601.Union%2A> 方法创建新的 <xref:System.Data.Objects.ObjectQuery%601> 对象。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_Union](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_union)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_Union](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_union)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="query" /> 参数为 <see langword="null" />。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="UnionAll">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; UnionAll (System.Data.Objects.ObjectQuery&lt;T&gt; query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; UnionAll(class System.Data.Objects.ObjectQuery`1&lt;!T&gt; query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function UnionAll (query As ObjectQuery(Of T)) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ UnionAll(System::Data::Objects::ObjectQuery&lt;T&gt; ^ query);" />
      <MemberSignature Language="F#" Value="member this.UnionAll : System.Data.Objects.ObjectQuery&lt;'T&gt; -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.UnionAll query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Data.Objects.ObjectQuery&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="query">一个 <see cref="T:System.Data.Objects.ObjectQuery`1" />，表示要添加的结果。</param>
        <summary>将查询结果与另一个对象查询的结果进行组合（包括所有重复项）。</summary>
        <returns>一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/union-entity-sql">UNION ALL</see> 来添加指定 <paramref name="query" /> 的结果的原始实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> 添加提供的的结果， `query` 包括所有重复项。

 提供 `query` 的用于定义要添加的结果的类型必须为同一类型或可以提升为此的类型的类型 <xref:System.Data.Objects.ObjectQuery%601> 。 例如，下面是有效的，因为 `DiscontinuedProducts` 可以升级到 `Products` ：

```
ObjectQuery<Product>.Union(ObjectQuery<DiscontinuedProduct>)
```

 下面将引发异常 `Products` ，因为无法将其提升为 `DiscontinuedProducts` 。

```
ObjectQuery <DiscontinuedProduct>.Union(ObjectQuery<Product>)
```

 对于 <xref:System.Data.Objects.ObjectQuery%601> 类型为的 <xref:System.Data.Common.DbDataRecord> ，两个查询中的记录必须具有相同的列数，并且传递的中的列中的类型 <xref:System.Data.Common.DbDataRecord> `query` 必须可提升为的中的列类型 <xref:System.Data.Common.DbDataRecord> <xref:System.Data.Objects.ObjectQuery%601> 。

 在提供的中定义的参数 `query` 将与在实例中定义的参数合并 <xref:System.Data.Objects.ObjectQuery%601> 。 参数在组合后的 <xref:System.Data.Objects.ObjectParameterCollection> 中必须是唯一的。 组合后的集合中不能有两个具有相同名称的参数。 有关详细信息，请参阅 [查询生成器方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))。

 生成的查询从 <xref:System.Data.Objects.ObjectQuery%601> 实例（调用了它的 <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A>）继承连接。



## Examples
 本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。 该示例使用 <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A> 方法创建新的 <xref:System.Data.Objects.ObjectQuery%601> 对象。 然后对新的 <xref:System.Data.Objects.ObjectQuery%601.Distinct%2A> 对象调用 <xref:System.Data.Objects.ObjectQuery%601> 方法，以获取此查询的唯一结果。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_distinct_unionall)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Distinct_UnionAll](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_distinct_unionall)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="query" /> 参数为 <see langword="null" />。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; Where (string predicate, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!T&gt; Where(string predicate, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Where (predicate As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ Where(System::String ^ predicate, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.Where : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectQuery.Where (predicate, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName Language="C#">[System.ParamArray]</AttributeName>
              <AttributeName Language="F#">[&lt;System.ParamArray&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="predicate">筛选谓词。</param>
        <param name="parameters">此方法中使用的零个或多个参数。</param>
        <summary>将查询限制为包含与指定筛选条件匹配的结果。</summary>
        <returns>一个新的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 实例，等效于应用了 <see href="https://docs.microsoft.com/dotnet/framework/data/adonet/ef/language-reference/where-entity-sql">WHERE</see> 的原始实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 此示例基于 [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)。 该示例创建一个新的 <xref:System.Data.Objects.ObjectQuery%601> 对象，该对象包含按条件 `"it.ProductID = 900"` 筛选的现有查询的结果。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Where](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_where)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Where](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_where)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="predicate" /> 为 <see langword="null" />。

- 或 -

 <paramref name="parameters" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="predicate" /> 是一个空字符串。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
      </Docs>
    </Member>
  </Members>
</Type>
