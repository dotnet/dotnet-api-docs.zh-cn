<Type Name="ObjectResult&lt;T&gt;" FullName="System.Data.Objects.ObjectResult&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d49c964657bc5bcc1f20cb71a0bdde04054c0640" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89884727" /></Metadata><TypeSignature Language="C#" Value="public sealed class ObjectResult&lt;T&gt; : System.Data.Objects.ObjectResult, System.Collections.Generic.IEnumerable&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ObjectResult`1&lt;T&gt; extends System.Data.Objects.ObjectResult implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.ObjectResult`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ObjectResult(Of T)&#xA;Inherits ObjectResult&#xA;Implements IEnumerable(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public ref class ObjectResult sealed : System::Data::Objects::ObjectResult, System::Collections::Generic::IEnumerable&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type ObjectResult&lt;'T&gt; = class&#xA;    inherit ObjectResult&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Data.Objects.ObjectResult</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">结果的实体类型。</typeparam>
    <summary>以对象的可枚举集合形式表示 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 的结果。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 此类实现 <xref:System.Collections.Generic.IEnumerable%601> 和 <xref:System.IDisposable>。 <xref:System.Data.Objects.ObjectQuery%601.Execute%2A> 方法和 <xref:System.Data.Objects.ObjectQuery%601.System%23Collections%23Generic%23IEnumerable%7BT%7D%23GetEnumerator%2A?displayProperty=nameWithType> 方法返回此类的实例。



## Examples
 本主题中的示例基于 [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)，该数据库是由 [实体数据模型向导](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb399247(v=vs.100))生成的。

 下面的示例从 <xref:System.Data.Objects.ObjectResult%601> 方法返回一个 <xref:System.Data.Objects.ObjectQuery%601.Execute%2A>。 然后，获取一个枚举器并循环访问查询结果。 最后，释放枚举器和 <xref:System.Data.Objects.ObjectResult%601> 对象。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Execute](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_execute)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Execute](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_execute)]

 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public override void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectResult`1.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Dispose();" />
      <MemberSignature Language="F#" Value="override this.Dispose : unit -&gt; unit" Usage="objectResult.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>执行与释放 (free)、释放 (release) 或重置资源关联的任务。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 关闭包含查询结果的 <xref:System.Data.Common.DbDataReader>。



## Examples
 本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。 该示例从 <xref:System.Data.Objects.ObjectResult%601> 方法返回一个 <xref:System.Data.Objects.ObjectQuery%601.Execute%2A>。 然后，获取一个枚举器并循环访问查询结果。 最后，释放枚举器和 <xref:System.Data.Objects.ObjectResult%601> 对象。

 [!code-csharp[DP ObjectServices Concepts#QueryResult](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#queryresult)]
 [!code-vb[DP ObjectServices Concepts#QueryResult](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#queryresult)]

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="ElementType">
      <MemberSignature Language="C#" Value="public override Type ElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ElementType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectResult`1.ElementType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ElementType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ ElementType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ElementType : Type" Usage="System.Data.Objects.ObjectResult&lt;'T&gt;.ElementType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Data.Objects.ObjectResult`1" /> 的类型。</summary>
        <value>一个 <see cref="T:System.Type" />，它是 <see cref="T:System.Data.Objects.ObjectResult`1" /> 的类型。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!T&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectResult`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerator&lt;T&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;&#xA;override this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'T&gt;" Usage="objectResult.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回一个循环访问查询结果的枚举器。</summary>
        <returns>一个循环访问查询结果的枚举器。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果不再需要枚举器，则必须将其释放。 使用 `foreach` `For Each` Visual Basic) 中的语句 (确保在完成对结果的迭代后正确释放枚举器。



## Examples
 本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。 该示例从 <xref:System.Data.Objects.ObjectResult%601> 方法返回一个 <xref:System.Data.Objects.ObjectQuery%601.Execute%2A>。 然后，获取一个枚举器并循环访问查询结果。 最后，释放枚举器和 <xref:System.Data.Objects.ObjectResult%601> 对象。

 [!code-csharp[DP ObjectServices Concepts#QueryResult](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#queryresult)]
 [!code-vb[DP ObjectServices Concepts#QueryResult](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#queryresult)]

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
      </Docs>
    </Member>
  </Members>
</Type>
