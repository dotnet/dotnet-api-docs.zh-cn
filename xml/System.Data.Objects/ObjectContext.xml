<Type Name="ObjectContext" FullName="System.Data.Objects.ObjectContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8fe0441a8925d975b68659730b67e912249eea9c" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83926585" /></Metadata><TypeSignature Language="C#" Value="public class ObjectContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.ObjectContext" />
  <TypeSignature Language="VB.NET" Value="Public Class ObjectContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectContext : IDisposable" />
  <TypeSignature Language="F#" Value="type ObjectContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>提供以对象形式查询和使用实体数据的功能。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks

> [!NOTE]
>  
          <xref:System.Data.Objects.ObjectContext> 类不是线程安全的。 在多线程方案中无法确保 <xref:System.Data.Objects.ObjectContext> 中数据对象的完整性。

 <xref:System.Data.Objects.ObjectContext> 类是与数据作为对象进行交互的主类，这些对象是在概念模型中定义的实体类型的实例。 <xref:System.Data.Objects.ObjectContext> 类的实例包装以下内容：

-   到数据库的连接，以 <xref:System.Data.EntityClient.EntityConnection> 对象的形式包装。

-   描述模型的元数据，以 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 对象的形式包装。

-   用来管理保存在缓存中的对象的 <xref:System.Data.Objects.ObjectStateManager> 对象。

 当表示概念模型的对象层由实体数据模型工具生成时，表示模型的 <xref:System.Data.Metadata.Edm.EntityContainer> 的类派生自 <xref:System.Data.Objects.ObjectContext>。



## Examples
 此示例基于[Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)。 该示例演示如何构造 <xref:System.Data.Objects.ObjectContext>。

 [!code-csharp[DP ObjectServices Concepts#ObjectContext](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectcontext)]
 [!code-vb[DP ObjectServices Concepts#ObjectContext](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectcontext)]

 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
    <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Data.Objects.ObjectContext" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectContext (System.Data.EntityClient.EntityConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.EntityClient.EntityConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As EntityConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectContext(System::Data::EntityClient::EntityConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectContext : System.Data.EntityClient.EntityConnection -&gt; System.Data.Objects.ObjectContext" Usage="new System.Data.Objects.ObjectContext connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.EntityClient.EntityConnection" />
      </Parameters>
      <Docs>
        <param name="connection">一种包含对模型和数据源连接的引用的 <see cref="T:System.Data.EntityClient.EntityConnection" />。</param>
        <summary>使用给定的连接初始化 <see cref="T:System.Data.Objects.ObjectContext" /> 类的新实例。 在构造过程中，从 <see cref="T:System.Data.EntityClient.EntityConnection" /> 对象提取元数据工作区。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="connection" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="connection" /> 无效。

- 或 -

元数据工作区无效。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectContext (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectContext(System::String ^ connectionString);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectContext : string -&gt; System.Data.Objects.ObjectContext" Usage="new System.Data.Objects.ObjectContext connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">连接字符串，该连接字符串还提供对元数据信息的访问。</param>
        <summary>使用给定连接字符串和默认实体容器名称初始化 <see cref="T:System.Data.Objects.ObjectContext" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 `connectionString` 是一个字符串，其中包含访问概念模型和连接到数据源所需的信息。 <xref:System.Data.EntityClient.EntityConnectionStringBuilder> 类可用于正确地格式化字符串。

 [实体数据模型工具](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb399249(v%3dvs.100))会生成一个名为的连接字符串，该字符串存储在应用程序的配置文件中。 在实例化 <xref:System.Data.Objects.ObjectContext> 类时，可以提供此命名的连接字符串，而不是 `connectionString` 参数。



## Examples
 本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。 该示例演示如何构造 <xref:System.Data.Objects.ObjectContext>。

 [!code-csharp[DP ObjectServices Concepts#ObjectContext](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectcontext)]
 [!code-vb[DP ObjectServices Concepts#ObjectContext](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectcontext)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="connectionString" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="connectionString" /> 无效。

- 或 -

元数据工作区无效。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ObjectContext (System.Data.EntityClient.EntityConnection connection, string defaultContainerName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Data.EntityClient.EntityConnection connection, string defaultContainerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (connection As EntityConnection, defaultContainerName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ObjectContext(System::Data::EntityClient::EntityConnection ^ connection, System::String ^ defaultContainerName);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectContext : System.Data.EntityClient.EntityConnection * string -&gt; System.Data.Objects.ObjectContext" Usage="new System.Data.Objects.ObjectContext (connection, defaultContainerName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.EntityClient.EntityConnection" />
        <Parameter Name="defaultContainerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connection">一种包含对模型和数据源连接的引用的 <see cref="T:System.Data.EntityClient.EntityConnection" />。</param>
        <param name="defaultContainerName">默认实体容器的名称。 通过此方法设置 <paramref name="defaultContainerName" /> 时，该属性为只读属性。</param>
        <summary>使用给定连接和实体容器名称初始化 <see cref="T:System.Data.Objects.ObjectContext" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="connection" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="connection" /> 或 <paramref name="defaultContainerName" /> 或元数据工作区无效。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ObjectContext (string connectionString, string defaultContainerName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string connectionString, string defaultContainerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (connectionString As String, defaultContainerName As String)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ObjectContext(System::String ^ connectionString, System::String ^ defaultContainerName);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectContext : string * string -&gt; System.Data.Objects.ObjectContext" Usage="new System.Data.Objects.ObjectContext (connectionString, defaultContainerName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="defaultContainerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">连接字符串，该连接字符串还提供对元数据信息的访问。</param>
        <param name="defaultContainerName">默认实体容器的名称。 通过此方法设置 <paramref name="defaultContainerName" /> 时，该属性为只读属性。</param>
        <summary>使用给定连接字符串和实体容器名称初始化 <see cref="T:System.Data.Objects.ObjectContext" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 `connectionString` 是一个字符串，其中包含访问概念模型和连接到数据源所需的信息。 <xref:System.Data.EntityClient.EntityConnectionStringBuilder> 类可用于正确地格式化字符串。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="connectionString" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="connectionString" /> 或 <paramref name="defaultContainerName" /> 或元数据工作区无效。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="AcceptAllChanges">
      <MemberSignature Language="C#" Value="public void AcceptAllChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptAllChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.AcceptAllChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub AcceptAllChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AcceptAllChanges();" />
      <MemberSignature Language="F#" Value="member this.AcceptAllChanges : unit -&gt; unit" Usage="objectContext.AcceptAllChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>接受在对象上下文中对对象所做的所有更改。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 接受 <xref:System.Data.Objects.ObjectStateManager> 中所有关联项上的更改，因此这些项的结果状态为未更改或已分离。

 此方法循环访问 <xref:System.Data.Objects.ObjectStateEntry> 中所有为 Added 或 Modified 的 <xref:System.Data.Objects.ObjectStateManager> 对象，然后将项的状态设置为 Unchanged。 Deleted 项变为已分离的。

 如果调用 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 方法但未指定 <xref:System.Data.Objects.SaveOptions.AcceptAllChangesAfterSave>，则用户必须调用 <xref:System.Data.Objects.ObjectContext.AcceptAllChanges%2A> 方法。 如果事务失败而用户希望重试，<xref:System.Data.Objects.ObjectContext.AcceptAllChanges%2A> 方法就很有用。

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="AddObject">
      <MemberSignature Language="C#" Value="public void AddObject (string entitySetName, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddObject(string entitySetName, object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.AddObject(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddObject (entitySetName As String, entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddObject(System::String ^ entitySetName, System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.AddObject : string * obj -&gt; unit" Usage="objectContext.AddObject (entitySetName, entity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entitySetName">表示实体集名称，可以选择通过实体容器名称对它进行限定。</param>
        <param name="entity">要添加的 <see cref="T:System.Object" />。</param>
        <summary>将对象添加到对象上下文。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 调用 <xref:System.Data.Objects.ObjectContext.AddObject%2A> 的 <xref:System.Data.Objects.ObjectContext> 可将对象添加到对象上下文。 当对象为数据源中尚不存在的新对象时采用此方法。 有关详细信息，请参阅[附加和分离对象](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738470(v=vs.100))。

 对象以 <xref:System.Data.Objects.ObjectStateManager>、<xref:System.Data.EntityState.Detached> 或 <xref:System.Data.EntityState.Deleted> 状态添加到 <xref:System.Data.EntityState.Added>。

 在创建与对象上下文中的另一个对象相关的新对象时，通过使用下列方法之一添加该新对象：

-   调用 <xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A> 的 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 方法并指定相关对象。 此方法适用于一对多或多对多关系。

-   将 <xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> 的 <xref:System.Data.Objects.DataClasses.EntityReference%601> 属性设置为相关对象。 此方法适用于一对一或多对一关系。

 有关详细信息，请参阅[创建、添加、修改和删除对象](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738695(v=vs.100))。

 如果对象处于已分离状态，则它不能有 <xref:System.Data.EntityKey>。

 `entitySetName` 格式的规则如下所示：

-   如果 `null`<xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A> 属性，则 `entitySetName` 必须完全限定为*\<实体容器名称 >* 中。*\<实体集名称 >*。

-   如果未 `null`<xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A>，则 `entitySetName` 可以*\<实体容器名称 >*。*\<实体集名称 >* 或*\<实体集名称 >*。

 如果 `object` 具有 <xref:System.Data.EntityKey> 并且 `entitySetName` 具有值，则实体键的 <xref:System.Data.Metadata.Edm.EntitySet> 必须与基于 <xref:System.Data.Metadata.Edm.EntitySet> 和实体容器名称找到的 `entitySetName` 匹配。



## Examples
 此示例基于[Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)。 该示例添加一个新产品并保存对数据库所做的更改。

 [!code-csharp[DP ObjectServices Concepts#AddObject](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#addobject)]
 [!code-vb[DP ObjectServices Concepts#AddObject](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#addobject)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="entity" /> 参数为 <see langword="null" />。

- 或 -

<paramref name="entitySetName" /> 未限定。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.AddObject(`0)" />
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="ApplyCurrentValues&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public TEntity ApplyCurrentValues&lt;TEntity&gt; (string entitySetName, TEntity currentEntity) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TEntity ApplyCurrentValues&lt;class TEntity&gt;(string entitySetName, !!TEntity currentEntity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyCurrentValues(Of TEntity As Class) (entitySetName As String, currentEntity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class TEntity ApplyCurrentValues(System::String ^ entitySetName, TEntity currentEntity);" />
      <MemberSignature Language="F#" Value="member this.ApplyCurrentValues : string * 'Entity -&gt; 'Entity (requires 'Entity : null)" Usage="objectContext.ApplyCurrentValues (entitySetName, currentEntity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="currentEntity" Type="TEntity" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">对象的实体类型。</typeparam>
        <param name="entitySetName">对象所属实体集的名称。</param>
        <param name="currentEntity">其属性更新将应用于原始对象的已分离对象。 <paramref name="currentEntity" /> 的实体键必须与 <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> 中某个项的 <see cref="T:System.Data.Objects.ObjectContext" /> 属性相匹配。</param>
        <summary>将标量值从提供的对象复制到 <see cref="T:System.Data.Objects.ObjectContext" /> 中具有相同键的对象中。</summary>
        <returns>已更新的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> 方法用于应用对 <xref:System.Data.Objects.ObjectContext>之外的对象所做的更改，例如 Web 服务接收的已分离对象。 此方法将标量值从提供的对象复制到具有相同键的 <xref:System.Data.Objects.ObjectContext> 中的对象。 您可以使用分离的对象的 <xref:System.Data.EntityKey> 从数据源中检索此对象的实例。 有关详细信息，请参阅[如何：使用特定对象的键返回该对象](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896251(v=vs.100))。 与对象的原始值不同的任何值都将标记为已修改。 请注意，方法不会将当前值应用于 `currentEntity`的相关对象。

 如果你有一个包含当前值的图形，并且想要应用原始值，请调用 <xref:System.Data.Objects.ObjectContext.ApplyOriginalValues%2A> 方法。

 你还可以使用 <xref:System.Data.Objects.ObjectStateEntry>的 <xref:System.Data.Objects.ObjectSet%601> 或 <xref:System.Data.Objects.ObjectStateEntry.ApplyCurrentValues%2A> 方法的 <xref:System.Data.Objects.ObjectSet%601.ApplyCurrentValues%2A>。 有关详细信息，请参阅[生成 N 层应用程序](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896304(v=vs.100))。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entitySetName" /> 或 <paramref name="current" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">来自 <paramref name="entitySetName" /> 的 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 与对象的 <see cref="T:System.Data.EntityKey" /> 的 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 不匹配。

- 或 -

该对象未处于 <see cref="T:System.Data.Objects.ObjectStateManager" /> 状态或处于 <see cref="F:System.Data.EntityState.Detached" /> 状态。

- 或 -

所提供对象的实体键无效。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="entitySetName" /> 是一个空字符串。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.ApplyCurrentValues(`0)" />
        <altmember cref="M:System.Data.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyOriginalValues&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public TEntity ApplyOriginalValues&lt;TEntity&gt; (string entitySetName, TEntity originalEntity) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!TEntity ApplyOriginalValues&lt;class TEntity&gt;(string entitySetName, !!TEntity originalEntity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)" />
      <MemberSignature Language="VB.NET" Value="Public Function ApplyOriginalValues(Of TEntity As Class) (entitySetName As String, originalEntity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class TEntity ApplyOriginalValues(System::String ^ entitySetName, TEntity originalEntity);" />
      <MemberSignature Language="F#" Value="member this.ApplyOriginalValues : string * 'Entity -&gt; 'Entity (requires 'Entity : null)" Usage="objectContext.ApplyOriginalValues (entitySetName, originalEntity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="originalEntity" Type="TEntity" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">实体对象的类型。</typeparam>
        <param name="entitySetName">对象所属实体集的名称。</param>
        <param name="originalEntity">具有要应用于对象的原始值的已分离对象。 <paramref name="originalEntity" /> 的实体键必须与 <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> 中某个项的 <see cref="T:System.Data.Objects.ObjectContext" /> 属性相匹配。</param>
        <summary>将标量值从提供的对象复制到 <see cref="T:System.Data.Objects.ObjectContext" /> 中具有相同键的对象的原始值集中。</summary>
        <returns>已更新的对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectContext.ApplyOriginalValues%2A> 方法用于应用对 <xref:System.Data.Objects.ObjectContext>之外的对象所做的更改，例如 Web 服务接收的已分离对象。 此方法将标量值从提供的对象复制到具有相同键的 <xref:System.Data.Objects.ObjectContext> 中的对象。 您可以使用分离的对象的 <xref:System.Data.EntityKey> 从数据源中检索此对象的实例。 有关详细信息，请参阅[如何：使用特定对象的键返回该对象](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896251(v=vs.100))。 任何与对象的当前值不同的值都将标记为已修改。 请注意，方法不会将当前值应用于 `originalEntity`的相关对象。

 如果你有一个具有原始值的图形，并且想要应用当前值，请调用 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> 方法。

 你还可以使用 <xref:System.Data.Objects.ObjectStateEntry>的 <xref:System.Data.Objects.ObjectSet%601> 或 <xref:System.Data.Objects.ObjectStateEntry.ApplyOriginalValues%2A> 方法的 <xref:System.Data.Objects.ObjectSet%601.ApplyOriginalValues%2A>。 有关详细信息，请参阅[生成 N 层应用程序](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896304(v=vs.100))。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entitySetName" /> 或 <paramref name="original" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">来自 <paramref name="entitySetName" /> 的 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 与对象的 <see cref="T:System.Data.EntityKey" /> 的 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 不匹配。

- 或 -

对象的 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 无法在 <see cref="T:System.Data.Objects.ObjectStateManager" /> 中找到。 - 或 -

该对象处于 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Detached" /> 状态。

- 或 -

所提供对象的实体键无效，或者有属性更改。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="entitySetName" /> 是一个空字符串。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.ApplyOriginalValues(`0)" />
        <altmember cref="M:System.Data.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ApplyPropertyChanges">
      <MemberSignature Language="C#" Value="public void ApplyPropertyChanges (string entitySetName, object changed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ApplyPropertyChanges(string entitySetName, object changed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ApplyPropertyChanges (entitySetName As String, changed As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyPropertyChanges(System::String ^ entitySetName, System::Object ^ changed);" />
      <MemberSignature Language="F#" Value="member this.ApplyPropertyChanges : string * obj -&gt; unit" Usage="objectContext.ApplyPropertyChanges (entitySetName, changed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Use ApplyCurrentValues instead")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="changed" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entitySetName">对象所属实体集的名称。</param>
        <param name="changed">其属性更新将应用于原始对象的已分离对象。</param>
        <summary>将已分离对象的属性更改应用于已附加到对象上下文的对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> 方法用于将已修改、已分离版本的对象的属性更改应用于附加到 <xref:System.Data.Objects.ObjectContext> 的原始版本。 这样可支持 Web 服务等方案，这些方案将实体对象分离并发送至属性已更新的远程应用程序。 使用此方法可以更加方便地将这些更改应用回原始对象。

 在执行 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> 之后，对象处于 <xref:System.Data.EntityState.Modified> 状态。 必须调用 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 方法来更新数据源。

 原始对象必须存在于 <xref:System.Data.Objects.ObjectStateManager> 中，并且必须处于 <xref:System.Data.EntityState.Modified> 或 <xref:System.Data.EntityState.Unchanged> 状态。 仅当 `changed` 对象中有修改的属性时，才会修改原始对象。

 提供对象的 <xref:System.Data.Objects.DataClasses.EntityObject.EntityKey%2A> 属性必须设置为有效的 <xref:System.Data.EntityKey>。

 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> 不影响导航属性或相关对象。

 <xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> 仅设置类型的实体元数据中存在的属性。 例如，<xref:System.Data.Objects.ObjectContext.ApplyCurrentValues%2A> 操作不涉及在分部类中添加的属性。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">当 <paramref name="entitySetName" /> 为 <see langword="null" /> 或空字符串时。

- 或 -

当 <paramref name="changed" /> 为 <see langword="null" /> 时。</exception>
        <exception cref="T:System.InvalidOperationException">来自 <paramref name="entitySetName" /> 的 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 与对象的 <see cref="T:System.Data.EntityKey" /> 的 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 不匹配时。

- 或 -

当实体处于 <see cref="F:System.Data.EntityState.Modified" /> 或 <see cref="F:System.Data.EntityState.Unchanged" /> 之外的状态时。

- 或 -

原始对象未附加到上下文。</exception>
        <exception cref="T:System.ArgumentException">当 <paramref name="changed" /> 对象的类型与原始对象的类型不同时。</exception>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (System.Data.Objects.DataClasses.IEntityWithKey entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(class System.Data.Objects.DataClasses.IEntityWithKey entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Attach(System.Data.Objects.DataClasses.IEntityWithKey)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As IEntityWithKey)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(System::Data::Objects::DataClasses::IEntityWithKey ^ entity);" />
      <MemberSignature Language="F#" Value="member this.Attach : System.Data.Objects.DataClasses.IEntityWithKey -&gt; unit" Usage="objectContext.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Data.Objects.DataClasses.IEntityWithKey" />
      </Parameters>
      <Docs>
        <param name="entity">要附加的对象。</param>
        <summary>在对象具有实体键时将对象或对象图附加到对象上下文。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 调用 <xref:System.Data.Objects.ObjectContext.Attach%2A> 的 <xref:System.Data.Objects.ObjectContext> 可将对象附加到对象上下文。 当对象已存在于数据源中但当前尚未附加到上下文时采用此方法。 有关详细信息，请参阅[自定义对象](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738612(v=vs.100))。

 <xref:System.Data.Objects.ObjectContext.Attach%2A> 用于在对象图中附加对象或顶层对象。

 要附加的对象必须实现 <xref:System.Data.Objects.DataClasses.IEntityWithKey> 以公开 <xref:System.Data.EntityKey>。 所有生成的实体类都实现 <xref:System.Data.Objects.DataClasses.IEntityWithKey>。

 附加相关对象时，还必须对 <xref:System.Data.Objects.DataClasses.EntityReference%601> 或 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 调用 `Attach`，才能定义关系。

 此方法调用 <xref:System.Data.Objects.ObjectContext.AttachTo%2A> 方法。

 在附加对象时需要考虑下列注意事项：

-   如果要附加的对象具有相关对象，则这些对象也会附加到对象上下文。

-   对象以未更改状态添加到对象上下文。

-   传递到 <xref:System.Data.Objects.ObjectContext.Attach%2A> 方法的对象必须具有有效的 <xref:System.Data.Objects.DataClasses.EntityObject.EntityKey%2A> 值。 如果对象没有有效的 <xref:System.Data.Objects.DataClasses.EntityObject.EntityKey%2A> 值，请使用 <xref:System.Data.Objects.ObjectContext.AttachTo%2A> 方法指定实体集的名称。



## Examples
 本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。 在此示例中，附加了两个对象，然后定义了关系。

 [!code-csharp[DP ObjectServices Concepts#AttachRelatedObjects](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#attachrelatedobjects)]
 [!code-vb[DP ObjectServices Concepts#AttachRelatedObjects](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#attachrelatedobjects)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entity" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">无效的实体键。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.Attach(`0)" />
      </Docs>
    </Member>
    <Member MemberName="AttachTo">
      <MemberSignature Language="C#" Value="public void AttachTo (string entitySetName, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachTo(string entitySetName, object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.AttachTo(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachTo (entitySetName As String, entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachTo(System::String ^ entitySetName, System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.AttachTo : string * obj -&gt; unit" Usage="objectContext.AttachTo (entitySetName, entity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entitySetName">表示实体集名称，可以选择通过实体容器名称对它进行限定。</param>
        <param name="entity">要附加的 <see cref="T:System.Object" />。</param>
        <summary>将特定实体集中的对象或对象图附加到对象上下文。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 调用 <xref:System.Data.Objects.ObjectContext> 上的 <xref:System.Data.Objects.ObjectContext.AttachTo%2A>，将对象附加到对象上下文中的特定实体集，或者，如果该对象具有 `null` （Visual Basic 中的`Nothing`） <xref:System.Data.EntityKey> 值。 有关详细信息，请参阅[附加和分离对象](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738470(v=vs.100))。

 要附加的对象可以是单个对象，也可以是对象图的一部分。

 `entitySetName` 格式的规则如下所示：

-   如果 `null`<xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A> 属性，则 `entitySetName` 必须完全限定为*\<实体容器名称 >* 中。*\<实体集名称 >*。

-   如果未 `null`<xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A>，则 `entitySetName` 可以*\<实体容器名称 >*。*\<实体集名称 >* 或*\<实体集名称 >*。

 要附加的对象不需要 <xref:System.Data.EntityKey> 与其关联。 如果对象不具有实体键，则 `entitySetName` 不能为空字符串。

 如果要附加的对象具有 <xref:System.Data.EntityKey> 并且 `entitySetName` 具有值，则实体键的 <xref:System.Data.Metadata.Edm.EntitySet> 必须与基于 `entitySetName` 和实体容器名称找到的 <xref:System.Data.Metadata.Edm.EntitySet> 匹配。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entity" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException">无效的实体集。

- 或 -

对象具有临时键。

- 或 -

对象具有 <see cref="T:System.Data.EntityKey" /> 且 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 与作为方法自变量传入的实体集不匹配。

- 或 -

对象没有 <see cref="T:System.Data.EntityKey" />，且未提供任何实体集。

- 或 -

对象图中的任何对象都具有临时 <see cref="T:System.Data.EntityKey" />。

- 或 -

对象图中的任何对象都具有无效的 <see cref="T:System.Data.EntityKey" />（例如，键中的值与对象中的值不匹配）。

- 或 -

未能根据给定的 <paramref name="entitySetName" /> 名称和实体容器名称找到实体集。

- 或 -

对象图中的任何对象都已存在于另一个状态管理器中。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.Attach(`0)" />
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="CommandTimeout">
      <MemberSignature Language="C#" Value="public int? CommandTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; CommandTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.CommandTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTimeout As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;int&gt; CommandTimeout { Nullable&lt;int&gt; get(); void set(Nullable&lt;int&gt; value); };" />
      <MemberSignature Language="F#" Value="member this.CommandTimeout : Nullable&lt;int&gt; with get, set" Usage="System.Data.Objects.ObjectContext.CommandTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置所有对象上下文操作的超时值（以秒为单位）。 <see langword="null" /> 值表示将使用基础提供程序的默认值。</summary>
        <value>作为超时值的 <see cref="T:System.Int32" /> 值（以秒为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 对象查询和 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 操作的默认超时由基础连接提供程序定义。 但是，可以通过在 <xref:System.Data.Objects.ObjectContext.CommandTimeout%2A> 上使用 <xref:System.Data.Objects.ObjectContext> 属性重写此默认超时值，如下面的示例所示。

 [!code-csharp[DP ObjectServices Concepts#QueryTimeout](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#querytimeout)]
 [!code-vb[DP ObjectServices Concepts#QueryTimeout](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#querytimeout)]

 当查询很复杂或者由于其他性能问题导致对 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 的查询或调用频繁超时时，可以执行此操作。



## Examples
 [对象查询](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896241(v=vs.100))

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">超时值小于 0。</exception>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As DbConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbConnection ^ Connection { System::Data::Common::DbConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Connection : System.Data.Common.DbConnection" Usage="System.Data.Objects.ObjectContext.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对象上下文使用的连接。</summary>
        <value>一个作为连接的 <see cref="T:System.Data.Common.DbConnection" /> 对象</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此属性返回传递给构造函数或在构造过程中创建的连接对象。 连接的所有权由所使用的构造函数决定。



## Examples
 本示例创建一个 <xref:System.Data.EntityClient.EntityConnection> 对象，该对象将传递到长时间运行的 <xref:System.Data.Objects.ObjectContext> 的构造函数中。 此连接以手动方式建立。 <xref:System.Data.EntityClient.EntityConnection> 对象和 <xref:System.Data.Objects.ObjectContext> 对象都是手动释放的。

 [!code-csharp[DP ObjectServices Concepts#OpenEntityConnection](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#openentityconnection)]
 [!code-vb[DP ObjectServices Concepts#OpenEntityConnection](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#openentityconnection)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">当释放了 <see cref="T:System.Data.Objects.ObjectContext" /> 实例时。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="ContextOptions">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectContextOptions ContextOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Objects.ObjectContextOptions ContextOptions" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.ContextOptions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContextOptions As ObjectContextOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Objects::ObjectContextOptions ^ ContextOptions { System::Data::Objects::ObjectContextOptions ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ContextOptions : System.Data.Objects.ObjectContextOptions" Usage="System.Data.Objects.ObjectContext.ContextOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectContextOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Data.Objects.ObjectContextOptions" /> 实例，该实例包含影响 <see cref="T:System.Data.Objects.ObjectContext" /> 的行为的选项。</summary>
        <value><see cref="T:System.Data.Objects.ObjectContextOptions" /> 实例，该实例包含影响 <see cref="T:System.Data.Objects.ObjectContext" /> 的行为的选项。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabase">
      <MemberSignature Language="C#" Value="public void CreateDatabase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateDatabase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateDatabase" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateDatabase ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateDatabase();" />
      <MemberSignature Language="F#" Value="member this.CreateDatabase : unit -&gt; unit" Usage="objectContext.CreateDatabase " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用当前数据源连接和 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 中的元数据创建数据库。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 调用 <xref:System.Data.Objects.ObjectContext.CreateDatabaseScript%2A> 查看数据定义语言（DDL）脚本。 调用 <xref:System.Data.Objects.ObjectContext.CreateDatabase%2A> 以执行该脚本。

 大部分工作都委托给 <xref:System.Data.Common.DbProviderServices.CreateDatabase%2A> 方法。

 有关详细信息，请参阅使用[数据定义语言](/dotnet/framework/data/adonet/ef/working-with-data-definition-language)。

 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabaseScript" />
        <altmember cref="M:System.Data.Objects.ObjectContext.DatabaseExists" />
      </Docs>
    </Member>
    <Member MemberName="CreateDatabaseScript">
      <MemberSignature Language="C#" Value="public string CreateDatabaseScript ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string CreateDatabaseScript() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateDatabaseScript" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateDatabaseScript () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ CreateDatabaseScript();" />
      <MemberSignature Language="F#" Value="member this.CreateDatabaseScript : unit -&gt; string" Usage="objectContext.CreateDatabaseScript " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>生成数据定义语言 (DDL) 脚本，该脚本为 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 中的元数据创建架构对象（表、主键、外键）。 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 用于加载存储架构定义语言 (SSDL) 文件中的元数据。</summary>
        <returns>为 <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> 中的元数据创建架构对象的 DDL 脚本。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 调用 <xref:System.Data.Objects.ObjectContext.CreateDatabaseScript%2A> 以查看 DDL 脚本。 调用 <xref:System.Data.Objects.ObjectContext.CreateDatabase%2A> 以执行该脚本。

 大部分工作都委托给 <xref:System.Data.Common.DbProviderServices.CreateDatabase%2A> 方法。

 有关详细信息，请参阅使用[数据定义语言](/dotnet/framework/data/adonet/ef/working-with-data-definition-language)。

 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabase" />
        <altmember cref="M:System.Data.Objects.ObjectContext.DatabaseExists" />
      </Docs>
    </Member>
    <Member MemberName="CreateEntityKey">
      <MemberSignature Language="C#" Value="public System.Data.EntityKey CreateEntityKey (string entitySetName, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.EntityKey CreateEntityKey(string entitySetName, object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateEntityKey (entitySetName As String, entity As Object) As EntityKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::EntityKey ^ CreateEntityKey(System::String ^ entitySetName, System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.CreateEntityKey : string * obj -&gt; System.Data.EntityKey" Usage="objectContext.CreateEntityKey (entitySetName, entity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.EntityKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entitySetName">实体对象所属实体集的完全限定名称。</param>
        <param name="entity">要为其检索实体键的对象。</param>
        <summary>为特定对象创建实体键，如果实体键已存在，则返回该键。</summary>
        <returns>对象的 <see cref="T:System.Data.EntityKey" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果 `entity`的 <xref:System.Data.EntityKey> 不存在，<xref:System.Data.Objects.ObjectContext.CreateEntityKey%2A> 方法将为其创建一个新密钥。

 此方法用于确定具有相同 <xref:System.Data.EntityKey> 的对象是否已附加到 <xref:System.Data.Objects.ObjectContext>。 如果已附加了具有相同 <xref:System.Data.EntityKey> 的对象，则引发异常。 在调用 <xref:System.Data.Objects.ObjectContext.CreateEntityKey%2A> 方法之前，使用 <xref:System.Data.EntityKey> 方法尝试检索已分离对象的 <xref:System.Data.Objects.ObjectContext.Attach%2A>。



## Examples
 本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。 在此示例中，<xref:System.Data.Objects.ObjectContext.CreateEntityKey%2A> 用于检索现有对象的实体键。

 [!code-csharp[DP ObjectServices Concepts#ApplyItemUpdatesGetObject](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#applyitemupdatesgetobject)]
 [!code-vb[DP ObjectServices Concepts#ApplyItemUpdatesGetObject](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#applyitemupdatesgetobject)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">当任一参数为 <see langword="null" /> 时。</exception>
        <exception cref="T:System.ArgumentException">当 <paramref name="entitySetName" /> 为空时。

- 或 -

当 <paramref name="entity" /> 对象的类型不存在于实体集中时。

- 或 -

当 <paramref name="entitySetName" /> 未完全限定时。</exception>
        <exception cref="T:System.InvalidOperationException">当无法根据提供的参数成功构造实体键时。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateObject&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T CreateObject&lt;T&gt; () where T : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T CreateObject&lt;class T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateObject``1" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObject(Of T As Class) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : class T CreateObject();" />
      <MemberSignature Language="F#" Value="member this.CreateObject : unit -&gt; 'T (requires 'T : null)" Usage="objectContext.CreateObject " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">要返回的对象的类型。</typeparam>
        <summary>创建并返回所请求类型的实例。</summary>
        <returns>所请求类型 <paramref name="T" /> 的实例，或一个使得 <paramref name="T" /> 能够与 Entity Framework 一起使用的派生类型的实例。 返回的对象是所请求类型的实例或使得请求的类型能够与 Entity Framework 一起使用的派生类型的实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectContext.CreateObject%2A> 方法与 POCO 自定义数据类结合使用，以确保实体框架可以正确管理返回的对象。 有关详细信息，请参阅[创建 Poco 代理的要求](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/dd468057(v=vs.100))和使用[poco 实体](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/dd456853(v=vs.100))。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateObjectSet&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectSet&lt;TEntity&gt; CreateObjectSet&lt;TEntity&gt; () where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectSet`1&lt;!!TEntity&gt; CreateObjectSet&lt;class TEntity&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateObjectSet``1" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObjectSet(Of TEntity As Class) () As ObjectSet(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class System::Data::Objects::ObjectSet&lt;TEntity&gt; ^ CreateObjectSet();" />
      <MemberSignature Language="F#" Value="member this.CreateObjectSet : unit -&gt; System.Data.Objects.ObjectSet&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="objectContext.CreateObjectSet " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectSet&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TEntity">请求的 <see cref="T:System.Data.Objects.ObjectSet`1" /> 的实体类型。</typeparam>
        <summary>创建新的 <see cref="T:System.Data.Objects.ObjectSet`1" /> 实例，该实例用于查询、添加、修改和删除指定实体类型的对象。</summary>
        <returns>新的 <see cref="T:System.Data.Objects.ObjectSet`1" /> 实例。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> 属性未在 <see cref="T:System.Data.Objects.ObjectContext" /> 上设置。

- 或 -

指定类型属于多个实体集。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateObjectSet&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectSet&lt;TEntity&gt; CreateObjectSet&lt;TEntity&gt; (string entitySetName) where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectSet`1&lt;!!TEntity&gt; CreateObjectSet&lt;class TEntity&gt;(string entitySetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateObjectSet``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateObjectSet(Of TEntity As Class) (entitySetName As String) As ObjectSet(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class System::Data::Objects::ObjectSet&lt;TEntity&gt; ^ CreateObjectSet(System::String ^ entitySetName);" />
      <MemberSignature Language="F#" Value="member this.CreateObjectSet : string -&gt; System.Data.Objects.ObjectSet&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="objectContext.CreateObjectSet entitySetName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectSet&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entitySetName" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">请求的 <see cref="T:System.Data.Objects.ObjectSet`1" /> 的实体类型。</typeparam>
        <param name="entitySetName">返回的 <see cref="T:System.Data.Objects.ObjectSet`1" /> 的实体集的名称。 如果未在 <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> 上设置 <see cref="T:System.Data.Objects.ObjectContext" /> 属性，则字符串必须由默认容器名称进行限定。</param>
        <summary>创建新的 <see cref="T:System.Data.Objects.ObjectSet`1" /> 实例，该实例用于查询、添加、修改和删除具有指定类型和指定实体集名称的对象。</summary>
        <returns>新的 <see cref="T:System.Data.Objects.ObjectSet`1" /> 实例。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">来自 <paramref name="entitySetName" /> 的 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 与对象的 <see cref="T:System.Data.EntityKey" /> 的 <see cref="T:System.Data.Metadata.Edm.EntitySet" /> 不匹配。

- 或 -

在 <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> 上没有设置 <see cref="T:System.Data.Objects.ObjectContext" /> 属性，且名称未限定为 <paramref name="entitySetName" /> 参数。

- 或 -

指定类型属于多个实体集。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateProxyTypes">
      <MemberSignature Language="C#" Value="public void CreateProxyTypes (System.Collections.Generic.IEnumerable&lt;Type&gt; types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateProxyTypes(class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateProxyTypes (types As IEnumerable(Of Type))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateProxyTypes(System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="member this.CreateProxyTypes : seq&lt;Type&gt; -&gt; unit" Usage="objectContext.CreateProxyTypes types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Collections.Generic.IEnumerable&lt;System.Type&gt;" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="types"><see cref="T:System.Type" /> 对象的枚举，这些对象表示映射到概念模型的自定义数据类。</param>
        <summary>为提供的枚举中的每个类型生成可用于 Entity Framework 的等效类型。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 将忽略 `types` 枚举中未映射到概念模型中的实体类型的各个类型。

 有关详细信息，请参阅[创建 Poco 代理的要求](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/dd468057(v=vs.100))和使用[poco 实体](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/dd456853(v=vs.100))。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQuery&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectQuery&lt;T&gt; CreateQuery&lt;T&gt; (string queryString, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectQuery`1&lt;!!T&gt; CreateQuery&lt;T&gt;(string queryString, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateQuery(Of T) (queryString As String, ParamArray parameters As ObjectParameter()) As ObjectQuery(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Data::Objects::ObjectQuery&lt;T&gt; ^ CreateQuery(System::String ^ queryString, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.CreateQuery : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectQuery&lt;'T&gt;" Usage="objectContext.CreateQuery (queryString, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectQuery&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="queryString" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">返回的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 的实体类型。</typeparam>
        <param name="queryString">要执行的查询字符串。</param>
        <param name="parameters">要传递给查询的参数。</param>
        <summary>使用指定查询字符串在当前对象上下文中创建 <see cref="T:System.Data.Objects.ObjectQuery`1" />。</summary>
        <returns>具有指定类型的 <see cref="T:System.Data.Objects.ObjectQuery`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 <xref:System.Data.Objects.ObjectContext.CreateQuery%2A> 创建属于当前对象上下文且具有指定类型的 <xref:System.Data.Objects.ObjectQuery%601>。



## Examples
 此示例基于[Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)。

 该示例创建一个简单查询并循环访问结果集合。

 [!code-csharp[DP ObjectServices Concepts#CreateQuery](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#createquery)]
 [!code-vb[DP ObjectServices Concepts#CreateQuery](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#createquery)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="queryString" /> 或 <paramref name="parameters" /> 参数为 <see langword="null" />。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">查询概念模型</related>
      </Docs>
    </Member>
    <Member MemberName="DatabaseExists">
      <MemberSignature Language="C#" Value="public bool DatabaseExists ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool DatabaseExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.DatabaseExists" />
      <MemberSignature Language="VB.NET" Value="Public Function DatabaseExists () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool DatabaseExists();" />
      <MemberSignature Language="F#" Value="member this.DatabaseExists : unit -&gt; bool" Usage="objectContext.DatabaseExists " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>检查在当前数据源连接中指定为数据库的数据库是否在数据源上存在。</summary>
        <returns>如果数据库存在，则为 <see langword="true" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 大部分工作都委托给 <xref:System.Data.Common.DbProviderServices.DatabaseExists%2A> 方法。

 有关详细信息，请参阅使用[数据定义语言](/dotnet/framework/data/adonet/ef/working-with-data-definition-language)。

 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabase" />
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabaseScript" />
      </Docs>
    </Member>
    <Member MemberName="DefaultContainerName">
      <MemberSignature Language="C#" Value="public string DefaultContainerName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultContainerName" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.DefaultContainerName" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultContainerName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultContainerName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultContainerName : string with get, set" Usage="System.Data.Objects.ObjectContext.DefaultContainerName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置默认容器名称。</summary>
        <value>作为默认容器名称的 <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectContext.DefaultContainerName%2A> 从不返回 `null`;它要么返回已设置的值，要么返回空字符串。 用户可以将此属性设置为 `null`，但在内部，该名称将设置为空字符串，因此，用户不需要检查是否有空字符串和 `null`。

 默认容器名称也定义为构造函数的一部分。 如果通过受保护构造函数设置默认容器名称，则该属性为只读属性。

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="DeleteDatabase">
      <MemberSignature Language="C#" Value="public void DeleteDatabase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteDatabase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.DeleteDatabase" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDatabase ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDatabase();" />
      <MemberSignature Language="F#" Value="member this.DeleteDatabase : unit -&gt; unit" Usage="objectContext.DeleteDatabase " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>删除在当前数据源连接中指定为数据库的数据库。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 大部分工作都委托给 <xref:System.Data.Common.DbProviderServices.DeleteDatabase%2A> 方法。

 有关详细信息，请参阅使用[数据定义语言](/dotnet/framework/data/adonet/ef/working-with-data-definition-language)。

 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabase" />
        <altmember cref="M:System.Data.Objects.ObjectContext.CreateDatabaseScript" />
        <altmember cref="M:System.Data.Objects.ObjectContext.DatabaseExists" />
      </Docs>
    </Member>
    <Member MemberName="DeleteObject">
      <MemberSignature Language="C#" Value="public void DeleteObject (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteObject(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.DeleteObject(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteObject (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteObject(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.DeleteObject : obj -&gt; unit" Usage="objectContext.DeleteObject entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">指定待删除实体的对象。 该对象可以为任何状态（<see cref="F:System.Data.EntityState.Detached" /> 除外）。</param>
        <summary>标记对象以备删除。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 从 <xref:System.Data.Objects.ObjectStateManager> 中标记对象以备删除。 当调用 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 方法时，在数据源中删除该对象。

 删除父对象也会删除约束关系中的所有子对象。 此结果与启用关系的关联上的 `CascadeDelete` 属性相同。

 可以在已删除的对象上调用 <xref:System.Data.Objects.ObjectContext.DeleteObject%2A> 方法。



## Examples
 这些示例基于[Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)。

 此示例使用特定 ProductID 构造 <xref:System.Data.EntityKey>，使用该密钥从数据源中检索产品对象，删除产品并保存对数据库所做的更改。

 [!code-csharp[DP ObjectServices Concepts#DeleteObject](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#deleteobject)]
 [!code-vb[DP ObjectServices Concepts#DeleteObject](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#deleteobject)]

 此示例删除现有订单项，添加新项，并保存对数据库所做的更改。

 [!code-csharp[DP ObjectServices Concepts#SaveChanges](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#savechanges)]
 [!code-vb[DP ObjectServices Concepts#SaveChanges](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#savechanges)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entity" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="entity" /> 不存在。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.DeleteObject(`0)" />
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="Detach">
      <MemberSignature Language="C#" Value="public void Detach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Detach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Detach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Detach (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Detach(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.Detach : obj -&gt; unit" Usage="objectContext.Detach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">要分离的对象。 仅移除 <paramref name="entity" />；如果有任何相关对象受同一 <see cref="T:System.Data.Objects.ObjectStateManager" /> 跟踪，则不会自动分离这些对象。</param>
        <summary>从对象上下文移除对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 从 <xref:System.Data.Objects.ObjectStateManager> 移除对象。 这会禁用对该对象的更改跟踪和标识解析。 有关详细信息，请参阅[附加和分离对象](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738470(v=vs.100))。

 调用 <xref:System.Data.Objects.ObjectContext.Detach%2A> 方法后，系统将不再保留指向此对象的引用，此对象可由垃圾回收器收集。

> [!NOTE]
>  仅当用户代码不包含对已分离对象的任何引用时，才进行垃圾回收。

 在分离对象时，应考虑以下注意事项：

-   <xref:System.Data.Objects.ObjectContext.Detach%2A> 仅影响传递给方法的特定对象。 如果要分离的对象在对象上下文中具有相关对象，则那些相关对象不会分离。

-   分离对象不影响数据源中的数据。

-   在分离操作过程中不会强制执行级联删除指令和引用约束。

 有关详细信息，请参阅[附加和分离对象](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738470(v=vs.100))。



## Examples
 [!code-csharp[DP ObjectServices Concepts#DetachObjects](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#detachobjects)]
 [!code-vb[DP ObjectServices Concepts#DetachObjects](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#detachobjects)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="entity" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="entity" /> 不与此 <see cref="T:System.Data.Objects.ObjectContext" /> 关联（例如，是新创建的，仍未与任何上下文关联，或是通过其他上下文获取，或是已分离）。</exception>
        <altmember cref="M:System.Data.Objects.ObjectSet`1.Detach(`0)" />
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="DetectChanges">
      <MemberSignature Language="C#" Value="public void DetectChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetectChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.DetectChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub DetectChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetectChanges();" />
      <MemberSignature Language="F#" Value="member this.DetectChanges : unit -&gt; unit" Usage="objectContext.DetectChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>确保 <see cref="T:System.Data.Objects.ObjectStateEntry" /> 更改与由 <see cref="T:System.Data.Objects.ObjectStateManager" /> 跟踪的所有对象中的更改进行同步。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>释放对象上下文使用的资源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="objectContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放对象上下文使用的资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 如果连接是由实体框架打开的，则此方法会关闭连接。 调用 <xref:System.Data.Objects.ObjectContext.Dispose%2A> 后，需要打开的连接的操作（如执行查询或调用 <xref:System.Data.Objects.ObjectQuery.ToTraceString%2A> 方法）将导致异常。 执行不要求连接为打开状态的操作（如编写查询或附加对象），则不会引发异常。 <xref:System.Data.Objects.ObjectContext.Dispose%2A> 方法不会关闭任何显式打开的连接。

 限制 `using` 块内 <xref:System.Data.Objects.ObjectContext> 范围（Visual Basic 中的`Using`）可确保正确释放资源。 有关详细信息，请参阅[管理连接和事务](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896325(v=vs.100))。

 <xref:System.Data.Objects.ObjectContext.Dispose> 方法调用 `virtual` （`Overridable` Visual Basic） <xref:System.Data.Objects.ObjectContext.Dispose%28System.Boolean%29> 方法。

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="objectContext.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">如果为 <see langword="true" />，则托管及非托管资源都释放；如果为 <see langword="false" />，则仅释放非托管资源。</param>
        <summary>释放对象上下文使用的资源。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此方法关闭连接。 调用 <xref:System.Data.Objects.ObjectContext.Dispose%2A> 后，需要打开的连接的操作（如执行查询或调用 <xref:System.Data.Objects.ObjectQuery.ToTraceString%2A> 方法）将导致异常。 执行不要求连接为打开状态的操作（如编写查询或附加对象），则不会引发异常。

 限制 `using` 块内 <xref:System.Data.Objects.ObjectContext> 范围（Visual Basic 中的`Using`）可确保正确释放资源。 有关详细信息，请参阅[管理连接和事务](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896325(v=vs.100))。

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteFunction">
      <MemberSignature Language="C#" Value="public int ExecuteFunction (string functionName, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteFunction(string functionName, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteFunction (functionName As String, ParamArray parameters As ObjectParameter()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteFunction(System::String ^ functionName, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteFunction : string * System.Data.Objects.ObjectParameter[] -&gt; int" Usage="objectContext.ExecuteFunction (functionName, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="functionName">存储过程或函数的名称。 该名称可以包含容器名称，如 <c>&lt;Container Name&gt;.&lt;Function Name&gt;</c>。 如果默认容器名称已知，则只需要函数名称。</param>
        <param name="parameters">
          <see cref="T:System.Data.Objects.ObjectParameter" /> 对象的数组。</param>
        <summary>执行在数据源中定义并在概念模型中表示的存储过程或函数，丢弃该函数返回的任何结果，并返回执行该函数影响的行数。</summary>
        <returns>受影响的行数。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><paramref name="function" /> 为 null 或为空。

- 或 -

 <paramref name="function" /> 未找到。</exception>
        <exception cref="T:System.InvalidOperationException">实体读取器不支持此 <paramref name="function" />。

- 或 -

读取器的类型与 <paramref name="function" /> 的类型不匹配。</exception>
      </Docs>
    </Member>
    <Member MemberName="ExecuteFunction&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="protected System.Data.Objects.ObjectResult&lt;TElement&gt; ExecuteFunction&lt;TElement&gt; (string functionName, params System.Data.Objects.ObjectParameter[] parameters) where TElement : System.Data.Objects.DataClasses.IEntityWithChangeTracker;" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; ExecuteFunction&lt;(class System.Data.Objects.DataClasses.IEntityWithChangeTracker) TElement&gt;(string functionName, class System.Data.Objects.ObjectParameter[] parameters) cil managed" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Protected Function ExecuteFunction(Of TElement As IEntityWithChangeTracker) (functionName As String, ParamArray parameters As ObjectParameter()) As ObjectResult(Of TElement)" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA;generic &lt;typename TElement&gt;&#xA; where TElement : System::Data::Objects::DataClasses::IEntityWithChangeTracker System::Data::Objects::ObjectResult&lt;TElement&gt; ^ ExecuteFunction(System::String ^ functionName, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="F#" Value="member this.ExecuteFunction : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectResult&lt;'Element (requires 'Element :&gt; System.Data.Objects.DataClasses.IEntityWithChangeTracker)&gt; (requires 'Element :&gt; System.Data.Objects.DataClasses.IEntityWithChangeTracker)" Usage="objectContext.ExecuteFunction (functionName, parameters)" FrameworkAlternate="netframework-3.5" />
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TElement&gt; ExecuteFunction&lt;TElement&gt; (string functionName, params System.Data.Objects.ObjectParameter[] parameters);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; ExecuteFunction&lt;TElement&gt;(string functionName, class System.Data.Objects.ObjectParameter[] parameters) cil managed" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteFunction(Of TElement) (functionName As String, ParamArray parameters As ObjectParameter()) As ObjectResult(Of TElement)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TElement&gt;&#xA; System::Data::Objects::ObjectResult&lt;TElement&gt; ^ ExecuteFunction(System::String ^ functionName, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="member this.ExecuteFunction : string * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectResult&lt;'Element&gt;" Usage="objectContext.ExecuteFunction (functionName, parameters)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]">
          <Attributes>
            <Attribute FrameworkAlternate="netframework-3.5">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TElement">对数据源执行函数时，将返回 <see cref="T:System.Data.Objects.ObjectResult`1" /> 的实体类型。 该类型必须实现 <see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" />。</typeparam>
        <param name="functionName">存储过程或函数的名称。 该名称可以包含容器名称，如 <c>&lt;Container Name&gt;.&lt;Function Name&gt;</c>。 如果默认容器名称已知，则只需要函数名称。</param>
        <param name="parameters">
          <see cref="T:System.Data.Objects.ObjectParameter" /> 对象的数组。</param>
        <summary>使用指定的参数，执行在数据源中定义并在概念模型中映射的存储过程或函数。 返回类型化的 <see cref="T:System.Data.Objects.ObjectResult`1" />。</summary>
        <returns>存储过程返回的数据的 <see cref="T:System.Data.Objects.ObjectResult`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectContext.ExecuteFunction%2A> 方法是一个帮助器方法，该方法用于执行在数据源中定义并在概念模型中表示的存储过程或函数。 实体数据模型工具为概念模型中的每个[FunctionImport 元素](/ef/ef6/modeling/designer/advanced/edmx/csdl-spec#functionimport-element-csdl)生成一个方法。 这些方法调用强类型 `ExecuteFunction` 来返回类型化 <xref:System.Data.Objects.ObjectResult%601>。 有关详细信息，请参阅[使用存储过程的应用程序代码（实体框架）](https://docs.microsoft.com/previous-versions/cc716795(v=vs.90))。

 函数的所有参数在参数数组中是必需的，并且会对照 import 函数的元数据（包括函数本身的类型）检查所有类型。 CLR 值类型允许 `null` 值。 参数验证由提供程序执行。

 <xref:System.Data.Objects.ObjectContext.ExecuteFunction%2A> 方法使用 <xref:System.Data.Objects.MergeOption.AppendOnly>的 <xref:System.Data.Objects.MergeOption> 值。 因此，如果对象上下文中已存在对象，则不会从数据源加载对象。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="function" /> 为 null 或为空。

- 或 -

 <paramref name="function" /> 未找到。</exception>
        <exception cref="T:System.InvalidOperationException">实体读取器不支持此 <paramref name="function" />。

- 或 -

读取器的类型与 <paramref name="function" /> 的类型不匹配。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteFunction&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TElement&gt; ExecuteFunction&lt;TElement&gt; (string functionName, System.Data.Objects.MergeOption mergeOption, params System.Data.Objects.ObjectParameter[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; ExecuteFunction&lt;TElement&gt;(string functionName, valuetype System.Data.Objects.MergeOption mergeOption, class System.Data.Objects.ObjectParameter[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.MergeOption,System.Data.Objects.ObjectParameter[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteFunction(Of TElement) (functionName As String, mergeOption As MergeOption, ParamArray parameters As ObjectParameter()) As ObjectResult(Of TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TElement&gt;&#xA; System::Data::Objects::ObjectResult&lt;TElement&gt; ^ ExecuteFunction(System::String ^ functionName, System::Data::Objects::MergeOption mergeOption, ... cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteFunction : string * System.Data.Objects.MergeOption * System.Data.Objects.ObjectParameter[] -&gt; System.Data.Objects.ObjectResult&lt;'Element&gt;" Usage="objectContext.ExecuteFunction (functionName, mergeOption, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="functionName" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="parameters" Type="System.Data.Objects.ObjectParameter[]" Index="2" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TElement">对数据源执行函数时，将返回 <see cref="T:System.Data.Objects.ObjectResult`1" /> 的实体类型。 该类型必须实现 <see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" />。</typeparam>
        <param name="functionName">存储过程或函数的名称。 该名称可以包含容器名称，如 <c>&lt;Container Name&gt;.&lt;Function Name&gt;</c>。 如果默认容器名称已知，则只需要函数名称。</param>
        <param name="mergeOption">要在执行查询时使用的 <see cref="T:System.Data.Objects.MergeOption" />。</param>
        <param name="parameters">
          <see cref="T:System.Data.Objects.ObjectParameter" /> 对象的数组。</param>
        <summary>使用指定的参数和合并选项，执行在数据源中定义并在概念模型中表示的给定存储过程或函数。 返回类型化的 <see cref="T:System.Data.Objects.ObjectResult`1" />。</summary>
        <returns>存储过程返回的数据的 <see cref="T:System.Data.Objects.ObjectResult`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectContext.ExecuteFunction%2A> 方法是一个帮助器方法，用于执行在数据源中定义并在概念模型中表示的存储过程或函数。 实体数据模型工具为概念模型中的每个[FunctionImport 元素](/ef/ef6/modeling/designer/advanced/edmx/csdl-spec#functionimport-element-csdl)生成一个方法。 这些方法调用强类型 `ExecuteFunction` 来返回类型化 <xref:System.Data.Objects.ObjectResult%601>。 有关详细信息，请参阅[使用存储过程的应用程序代码（实体框架）](https://docs.microsoft.com/previous-versions/cc716795(v=vs.90))。

 函数的所有参数在参数数组中是必需的，并且会对照 import 函数的元数据（包括函数本身的类型）检查所有类型。 CLR 值类型允许 `null` 值。 参数验证由提供程序执行。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="function" /> 为 null 或为空。

- 或 -

 <paramref name="function" /> 未找到。</exception>
        <exception cref="T:System.InvalidOperationException">实体读取器不支持此 <paramref name="function" />。

- 或 -

读取器的类型与 <paramref name="function" /> 的类型不匹配。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoreCommand">
      <MemberSignature Language="C#" Value="public int ExecuteStoreCommand (string commandText, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteStoreCommand(string commandText, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteStoreCommand (commandText As String, ParamArray parameters As Object()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteStoreCommand(System::String ^ commandText, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteStoreCommand : string * obj[] -&gt; int" Usage="objectContext.ExecuteStoreCommand (commandText, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="parameters" Type="System.Object[]" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="commandText">要用数据源的本机语言执行的命令。</param>
        <param name="parameters">要传递给命令的参数数组。</param>
        <summary>利用现有连接对数据源直接执行任意命令。</summary>
        <returns>受影响的行数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用参数化命令可帮助抵御 SQL 注入攻击，这种攻击的攻击者会将命令“注入”SQL 语句，从而危及服务器的安全。 通过确保从外部源接收的值仅作为值（而不是 SQL 语句的一部分）进行传递，参数化命令可抵御 SQL 注入攻击。 因此，不会在数据源中执行插入到值中的 SQL 命令。 相反，只会将这些命令作为参数值来计算。 除了安全优势外，参数化命令还提供了一种方便的方法来组织通过 SQL 语句或存储过程传递的值。

 `parameters` 值可以是 <xref:System.Data.Common.DbParameter> 对象数组或参数值数组。 如果只提供了值，将根据数组中值的顺序创建 <xref:System.Data.Common.DbParameter> 对象的数组。

 如果当前事务存在，则在当前事务的上下文中执行存储命令。

 有关详细信息，请参阅：

 [直接执行存储命令](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ee358758(v=vs.100))和

 [如何：直接对数据源执行命令](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ee358769(v=vs.100))

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoreQuery&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TElement&gt; ExecuteStoreQuery&lt;TElement&gt; (string commandText, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; ExecuteStoreQuery&lt;TElement&gt;(string commandText, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteStoreQuery(Of TElement) (commandText As String, ParamArray parameters As Object()) As ObjectResult(Of TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TElement&gt;&#xA; System::Data::Objects::ObjectResult&lt;TElement&gt; ^ ExecuteStoreQuery(System::String ^ commandText, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteStoreQuery : string * obj[] -&gt; System.Data.Objects.ObjectResult&lt;'Element&gt;" Usage="objectContext.ExecuteStoreQuery (commandText, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="parameters" Type="System.Object[]" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TElement">返回的数据的类型。</typeparam>
        <param name="commandText">要用数据源的本机语言执行的命令。</param>
        <param name="parameters">要传递给命令的参数数组。</param>
        <summary>对数据源直接执行查询，此查询将返回类型化结果的序列。</summary>
        <returns>类型为 <paramref name="TElement" /> 的对象的枚举。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A> 方法使用现有连接对数据源直接执行任意命令。 如果存在当前事务，则将在当前事务的上下文中执行存储命令。

 调用 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A> 方法等效于调用 <xref:System.Data.Common.DbCommand.ExecuteReader%2A> 类的 <xref:System.Data.Common.DbCommand> 方法，只是 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A> 返回实体，而 <xref:System.Data.Common.DbCommand.ExecuteReader%2A> 返回 <xref:System.Data.Common.DbDataReader> 中的属性值。

 如果希望跟踪结果，请调用具有指定实体集名称的 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A>。

 当读取器包含映射到指定实体类型的数据行时，调用 <xref:System.Data.Objects.ObjectContext.Translate%2A> 方法将 <xref:System.Data.Common.DbDataReader> 转换为实体对象。

 使用参数化命令可帮助抵御 SQL 注入攻击，这种攻击的攻击者会将命令“注入”SQL 语句，从而危及服务器的安全。 通过确保从外部源接收的值仅作为值（而不是 SQL 语句的一部分）进行传递，参数化命令可抵御 SQL 注入攻击。 因此，不会在数据源中执行插入到值中的 SQL 命令。 相反，只会将这些命令作为参数值来计算。 除了安全优势外，参数化命令还提供了一种方便的方法来组织通过 SQL 语句或存储过程传递的值。

 `parameters` 值可以是 <xref:System.Data.Common.DbParameter> 对象数组或参数值数组。 如果只提供了值，将根据数组中值的顺序创建 <xref:System.Data.Common.DbParameter> 对象的数组。

 有关详细信息，请参阅：

 [直接执行存储命令](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ee358758(v=vs.100))和

 [如何：直接对数据源执行命令](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ee358769(v=vs.100))

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoreQuery&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TEntity&gt; ExecuteStoreQuery&lt;TEntity&gt; (string commandText, string entitySetName, System.Data.Objects.MergeOption mergeOption, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TEntity&gt; ExecuteStoreQuery&lt;TEntity&gt;(string commandText, string entitySetName, valuetype System.Data.Objects.MergeOption mergeOption, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Objects.MergeOption,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteStoreQuery(Of TEntity) (commandText As String, entitySetName As String, mergeOption As MergeOption, ParamArray parameters As Object()) As ObjectResult(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; System::Data::Objects::ObjectResult&lt;TEntity&gt; ^ ExecuteStoreQuery(System::String ^ commandText, System::String ^ entitySetName, System::Data::Objects::MergeOption mergeOption, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteStoreQuery : string * string * System.Data.Objects.MergeOption * obj[] -&gt; System.Data.Objects.ObjectResult&lt;'Entity&gt;" Usage="objectContext.ExecuteStoreQuery (commandText, entitySetName, mergeOption, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="commandText" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="entitySetName" Type="System.String" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" Index="2" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="parameters" Type="System.Object[]" Index="3" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TEntity">返回的数据的实体类型。</typeparam>
        <param name="commandText">要用数据源的本机语言执行的命令。</param>
        <param name="entitySetName"><typeparamref name="TEntity" /> 类型的实体集。 如果未提供实体集名称，则不会跟踪结果。</param>
        <param name="mergeOption">要在执行查询时使用的 <see cref="T:System.Data.Objects.MergeOption" />。 默认为 <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />。</param>
        <param name="parameters">要传递给命令的参数数组。</param>
        <summary>对数据源直接执行查询，此查询将返回类型化结果的序列。 指定实体集和合并选项，以便能够将查询结果作为实体进行跟踪。</summary>
        <returns>类型为 <paramref name="TResult" /> 的对象的枚举。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A> 方法使用现有连接对数据源直接执行任意命令。 如果存在当前事务，则将在当前事务的上下文中执行存储命令。

 调用 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A> 方法等效于调用 <xref:System.Data.Common.DbCommand.ExecuteReader%2A> 类的 <xref:System.Data.Common.DbCommand> 方法，只是 <xref:System.Data.Objects.ObjectContext.ExecuteStoreQuery%2A> 返回实体，而 <xref:System.Data.Common.DbCommand.ExecuteReader%2A> 返回 <xref:System.Data.Common.DbDataReader> 中的属性值。

 如果希望将结果作为实体进行跟踪，请指定实体集名称。

 当读取器包含映射到指定实体类型的数据行时，请调用 <xref:System.Data.Objects.ObjectContext.Translate%2A> 方法将 <xref:System.Data.Common.DbDataReader> 转换为实体对象。

 使用参数化命令可帮助抵御 SQL 注入攻击，这种攻击的攻击者会将命令“注入”SQL 语句，从而危及服务器的安全。 通过确保从外部源接收的值仅作为值（而不是 SQL 语句的一部分）进行传递，参数化命令可抵御 SQL 注入攻击。 因此，不会在数据源中执行插入到值中的 SQL 命令。 相反，只会将这些命令作为参数值来计算。 除了安全优势外，参数化命令还提供了一种方便的方法来组织通过 SQL 语句或存储过程传递的值。

 `parameters` 值可以是 <xref:System.Data.Common.DbParameter> 对象数组或参数值数组。 如果只提供了值，将根据数组中值的顺序创建 <xref:System.Data.Common.DbParameter> 对象的数组。

 有关详细信息，请参阅：

 [直接执行存储命令](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ee358758(v=vs.100))和

 [如何：直接对数据源执行命令](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ee358769(v=vs.100))

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetKnownProxyTypes">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Type&gt; GetKnownProxyTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; GetKnownProxyTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.GetKnownProxyTypes" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetKnownProxyTypes () As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ GetKnownProxyTypes();" />
      <MemberSignature Language="F#" Value="static member GetKnownProxyTypes : unit -&gt; seq&lt;Type&gt;" Usage="System.Data.Objects.ObjectContext.GetKnownProxyTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>返回所有现有代理类型。</summary>
        <returns>所有现有代理类型的 <see cref="T:System.Collections.Generic.IEnumerable`1" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 为 POCO 实体启用代理对象生成时，将使用 <xref:System.Data.Objects.ObjectContext.GetKnownProxyTypes%2A> 方法。 有关详细信息，请参阅[创建 Poco 代理的要求](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/dd468057(v=vs.100))和使用[poco 实体](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/dd456853(v=vs.100))。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObjectByKey">
      <MemberSignature Language="C#" Value="public object GetObjectByKey (System.Data.EntityKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object GetObjectByKey(class System.Data.EntityKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.GetObjectByKey(System.Data.EntityKey)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetObjectByKey (key As EntityKey) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetObjectByKey(System::Data::EntityKey ^ key);" />
      <MemberSignature Language="F#" Value="member this.GetObjectByKey : System.Data.EntityKey -&gt; obj" Usage="objectContext.GetObjectByKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Data.EntityKey" />
      </Parameters>
      <Docs>
        <param name="key">要查找的对象的键。</param>
        <summary>返回具有指定实体键的对象。</summary>
        <returns>一个 <see cref="T:System.Object" />，它是实体类型的实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectContext.GetObjectByKey%2A> 尝试从 <xref:System.Data.EntityKey> 检索具有指定 <xref:System.Data.Objects.ObjectStateManager> 的对象。 如果该对象当前尚未加载到对象上下文中，则会执行查询以尝试从数据源返回该对象。 有关详细信息，请参阅[对象查询](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896241(v=vs.100))。

 如果无法找到对象，<xref:System.Data.Objects.ObjectContext.GetObjectByKey%2A> 会引发 <xref:System.Data.ObjectNotFoundException>。 若要避免处理此异常，请改用 <xref:System.Data.Objects.ObjectContext.TryGetObjectByKey%2A> 方法。

 此方法将返回状态为 <xref:System.Data.EntityState.Deleted> 的对象。

 临时键无法用于从数据源返回对象。



## Examples
 此示例基于[Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)。 该示例为具有给定类型的实体创建 <xref:System.Data.EntityKey>，然后通过键提取实体。

 [!code-csharp[DP ObjectServices Concepts#EntityKeyClass_GetObjectByKey](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#entitykeyclass_getobjectbykey)]
 [!code-vb[DP ObjectServices Concepts#EntityKeyClass_GetObjectByKey](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#entitykeyclass_getobjectbykey)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> 参数为 <see langword="null" />。</exception>
        <exception cref="T:System.Data.ObjectNotFoundException">在 <see cref="T:System.Data.Objects.ObjectStateManager" /> 和数据源中都未找到对象。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="GetObjectType">
      <MemberSignature Language="C#" Value="public static Type GetObjectType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetObjectType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.GetObjectType(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetObjectType (type As Type) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetObjectType(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetObjectType : Type -&gt; Type" Usage="System.Data.Objects.ObjectContext.GetObjectType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="type">代理对象的 <see cref="T:System.Type" />。</param>
        <summary>返回与指定类型的代理对象关联的 POCO 实体的实体类型。</summary>
        <returns>关联的 POCO 实体的 <see cref="T:System.Type" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 为 POCO 实体启用代理对象生成时，将使用 <xref:System.Data.Objects.ObjectContext.GetObjectType%2A> 方法。 有关详细信息，请参阅[创建 Poco 代理的要求](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/dd468057(v=vs.100))和使用[poco 实体](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/dd456853(v=vs.100))。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadProperty">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在使用 POCO 自定义数据类时显式加载相关对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 使用 POCO 自定义数据类时，无法显式加载相关对象，如实体数据模型工具生成的实体类型的实例。 这是因为当在 <xref:System.Data.Objects.DataClasses.RelatedEnd>上调用 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 时，这些工具会生成返回 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 或相关对象 <xref:System.Data.Objects.DataClasses.EntityReference%601> 的导航属性。 还可以使用延迟加载来加载 POCO 实体，方法是将 <xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A> 属性设置为在 <xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=nameWithType> 属性返回的 <xref:System.Data.Objects.ObjectContextOptions> 实例上 `true`，或通过对 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> 使用带有 <xref:System.Data.Objects.ObjectQuery%601>方法的预先加载。

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadProperty">
      <MemberSignature Language="C#" Value="public void LoadProperty (object entity, string navigationProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadProperty(object entity, string navigationProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadProperty (entity As Object, navigationProperty As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadProperty(System::Object ^ entity, System::String ^ navigationProperty);" />
      <MemberSignature Language="F#" Value="member this.LoadProperty : obj * string -&gt; unit" Usage="objectContext.LoadProperty (entity, navigationProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="navigationProperty" Type="System.String" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="entity">要为其加载相关对象的实体。</param>
        <param name="navigationProperty">可返回要加载的相关对象的导航属性的名称。</param>
        <summary>通过指定的导航属性并使用默认合并选项，显式加载与提供的对象相关的对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 在使用 POCO 自定义数据类时，必须调用 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A> 方法以实现显式加载。

 调用 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A>后，可以通过源实体的导航属性访问相关对象。

 使用 POCO 自定义数据类时，无法显式加载相关对象，如实体数据模型工具生成的实体类型的实例。 这是因为当在 <xref:System.Data.Objects.DataClasses.RelatedEnd>上调用 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 时，这些工具会生成返回 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 或相关对象 <xref:System.Data.Objects.DataClasses.EntityReference%601> 的导航属性。 还可以使用延迟加载来加载 POCO 实体，方法是将 <xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A> 属性设置为在 <xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=nameWithType> 属性返回的 <xref:System.Data.Objects.ObjectContextOptions> 实例上 `true`，或通过对 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> 使用带有 <xref:System.Data.Objects.ObjectQuery%601>方法的预先加载。

 调用 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A> 方法时，将使用 <xref:System.Data.Objects.MergeOption.AppendOnly>的默认 <xref:System.Data.Objects.MergeOption> 值将对象加载到 <xref:System.Data.Objects.ObjectContext> 中。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="entity" /> 处于 <see cref="F:System.Data.EntityState.Detached" />、 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 状态。

- 或 -

<paramref name="entity" /> 附加到 <see cref="T:System.Data.Objects.ObjectContext" /> 的另一个实例。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadProperty">
      <MemberSignature Language="C#" Value="public void LoadProperty (object entity, string navigationProperty, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadProperty(object entity, string navigationProperty, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Objects.MergeOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadProperty (entity As Object, navigationProperty As String, mergeOption As MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void LoadProperty(System::Object ^ entity, System::String ^ navigationProperty, System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="member this.LoadProperty : obj * string * System.Data.Objects.MergeOption -&gt; unit" Usage="objectContext.LoadProperty (entity, navigationProperty, mergeOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="navigationProperty" Type="System.String" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" Index="2" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="entity">要为其加载相关对象的实体。</param>
        <param name="navigationProperty">可返回要加载的相关对象的导航属性的名称。</param>
        <param name="mergeOption">在加载相关对象时要使用的 <see cref="T:System.Data.Objects.MergeOption" /> 值。</param>
        <summary>通过指定的导航属性并使用指定的合并选项，显式加载与提供的对象相关的对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 在使用 POCO 自定义数据类时，必须调用 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A> 方法以实现显式加载。

 调用 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A>后，可以通过源实体的导航属性访问相关对象。

 使用 POCO 自定义数据类时，无法显式加载相关对象，如实体数据模型工具生成的实体类型的实例。 这是因为当在 <xref:System.Data.Objects.DataClasses.RelatedEnd>上调用 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 时，这些工具会生成返回 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 或相关对象 <xref:System.Data.Objects.DataClasses.EntityReference%601> 的导航属性。 还可以使用延迟加载来加载 POCO 实体，方法是将 <xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A> 属性设置为在 <xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=nameWithType> 属性返回的 <xref:System.Data.Objects.ObjectContextOptions> 实例上 `true`，或通过对 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> 使用带有 <xref:System.Data.Objects.ObjectQuery%601>方法的预先加载。

 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><paramref name="entity" /> 处于 <see cref="F:System.Data.EntityState.Detached" />、 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 状态。

- 或 -

<paramref name="entity" /> 附加到 <see cref="T:System.Data.Objects.ObjectContext" /> 的另一个实例。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadProperty&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public void LoadProperty&lt;TEntity&gt; (TEntity entity, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadProperty&lt;TEntity&gt;(!!TEntity entity, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TEntity, object&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadProperty(Of TEntity) (entity As TEntity, selector As Expression(Of Func(Of TEntity, Object)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; void LoadProperty(TEntity entity, System::Linq::Expressions::Expression&lt;Func&lt;TEntity, System::Object ^&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="member this.LoadProperty : 'Entity * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; -&gt; unit" Usage="objectContext.LoadProperty (entity, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">提供的对象的类型。</typeparam>
        <param name="entity">要为其加载相关对象的源对象。</param>
        <param name="selector">定义要加载的相关对象的 LINQ 表达式。</param>
        <summary>通过指定的 LINQ 查询并使用默认合并选项，显式加载与提供的对象相关的对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 在使用 POCO 自定义数据类时，必须调用 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A> 方法以实现显式加载。

 调用 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A>后，可以通过源实体的导航属性访问相关对象。

 要加载的属性由 LINQ 表达式指定，该表达式必须采用简单属性成员访问的形式，如 `(entity) => entity.PropertyName`中，其中*PropertyName*是用于返回要加载的相关对象的导航属性。 如果使用其他形式的 LINQ 表达式，则会出现异常。

 使用 POCO 自定义数据类时，无法显式加载相关对象，如实体数据模型工具生成的实体类型的实例。 这是因为当在 <xref:System.Data.Objects.DataClasses.RelatedEnd>上调用 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 时，这些工具会生成返回 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 或相关对象 <xref:System.Data.Objects.DataClasses.EntityReference%601> 的导航属性。 还可以使用延迟加载来加载 POCO 实体，方法是将 <xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A> 属性设置为在 <xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=nameWithType> 属性返回的 <xref:System.Data.Objects.ObjectContextOptions> 实例上 `true`，或通过对 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> 使用带有 <xref:System.Data.Objects.ObjectQuery%601>方法的预先加载。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="selector" /> 未提供有效的输入参数。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="selector" /> 为 null。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="entity" /> 处于 <see cref="F:System.Data.EntityState.Detached" />、 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 状态。

- 或 -

<paramref name="entity" /> 附加到 <see cref="T:System.Data.Objects.ObjectContext" /> 的另一个实例。</exception>
      </Docs>
    </Member>
    <Member MemberName="LoadProperty&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public void LoadProperty&lt;TEntity&gt; (TEntity entity, System.Linq.Expressions.Expression&lt;Func&lt;TEntity,object&gt;&gt; selector, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadProperty&lt;TEntity&gt;(!!TEntity entity, class System.Linq.Expressions.Expression`1&lt;class System.Func`2&lt;!!TEntity, object&gt;&gt; selector, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Objects.MergeOption)" />
      <MemberSignature Language="VB.NET" Value="Public Sub LoadProperty(Of TEntity) (entity As TEntity, selector As Expression(Of Func(Of TEntity, Object)), mergeOption As MergeOption)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; void LoadProperty(TEntity entity, System::Linq::Expressions::Expression&lt;Func&lt;TEntity, System::Object ^&gt; ^&gt; ^ selector, System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="member this.LoadProperty : 'Entity * System.Linq.Expressions.Expression&lt;Func&lt;'Entity, obj&gt;&gt; * System.Data.Objects.MergeOption -&gt; unit" Usage="objectContext.LoadProperty (entity, selector, mergeOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="selector" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TEntity,System.Object&gt;&gt;" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" Index="2" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity">提供的对象的类型。</typeparam>
        <param name="entity">要为其加载相关对象的源对象。</param>
        <param name="selector">定义要加载的相关对象的 LINQ 表达式。</param>
        <param name="mergeOption">在加载相关对象时要使用的 <see cref="T:System.Data.Objects.MergeOption" /> 值。</param>
        <summary>通过指定的 LINQ 查询并使用指定的合并选项，显式加载与提供的对象相关的对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 在使用 POCO 自定义数据类时，必须调用 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A> 方法以实现显式加载。

 调用 <xref:System.Data.Objects.ObjectContext.LoadProperty%2A>后，可以通过源实体的导航属性访问相关对象。

 要加载的属性由 LINQ 表达式指定，该表达式必须采用简单属性成员访问的形式，如 `(entity) => entity.PropertyName` 其中*PropertyName*是用于返回要加载的相关对象的导航属性。 如果使用其他形式的 LINQ 表达式，则会出现异常。

 使用 POCO 自定义数据类时，无法显式加载相关对象，如实体数据模型工具生成的实体类型的实例。 这是因为当在 <xref:System.Data.Objects.DataClasses.RelatedEnd>上调用 <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A> 时，这些工具会生成返回 <xref:System.Data.Objects.DataClasses.EntityCollection%601> 或相关对象 <xref:System.Data.Objects.DataClasses.EntityReference%601> 的导航属性。 还可以使用延迟加载来加载 POCO 实体，方法是将 <xref:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled%2A> 属性设置为在 <xref:System.Data.Objects.ObjectContext.ContextOptions%2A?displayProperty=nameWithType> 属性返回的 <xref:System.Data.Objects.ObjectContextOptions> 实例上 `true`，或通过对 <xref:System.Data.Objects.ObjectQuery%601.Include%2A> 使用带有 <xref:System.Data.Objects.ObjectQuery%601>方法的预先加载。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="selector" /> 未提供有效的输入参数。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="selector" /> 为 null。</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="entity" /> 处于 <see cref="F:System.Data.EntityState.Detached" />、 <see cref="F:System.Data.EntityState.Added" /> 或 <see cref="F:System.Data.EntityState.Deleted" /> 状态。

- 或 -

<paramref name="entity" /> 附加到 <see cref="T:System.Data.Objects.ObjectContext" /> 的另一个实例。</exception>
      </Docs>
    </Member>
    <Member MemberName="MetadataWorkspace">
      <MemberSignature Language="C#" Value="public System.Data.Metadata.Edm.MetadataWorkspace MetadataWorkspace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Metadata.Edm.MetadataWorkspace MetadataWorkspace" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.MetadataWorkspace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MetadataWorkspace As MetadataWorkspace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Metadata::Edm::MetadataWorkspace ^ MetadataWorkspace { System::Data::Metadata::Edm::MetadataWorkspace ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MetadataWorkspace : System.Data.Metadata.Edm.MetadataWorkspace" Usage="System.Data.Objects.ObjectContext.MetadataWorkspace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Metadata.Edm.MetadataWorkspace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对象上下文使用的元数据工作区。</summary>
        <value>与此 <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> 关联的 <see cref="T:System.Data.Objects.ObjectContext" /> 对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Metadata.Edm.MetadataWorkspace> 类作为中心运行时 API，可用于在应用程序上下文中与 Entity Data Model (EDM) 元数据交互。

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="ObjectMaterialized">
      <MemberSignature Language="C#" Value="public event System.Data.Objects.ObjectMaterializedEventHandler ObjectMaterialized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.Objects.ObjectMaterializedEventHandler ObjectMaterialized" />
      <MemberSignature Language="DocId" Value="E:System.Data.Objects.ObjectContext.ObjectMaterialized" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ObjectMaterialized As ObjectMaterializedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::Objects::ObjectMaterializedEventHandler ^ ObjectMaterialized;" />
      <MemberSignature Language="F#" Value="member this.ObjectMaterialized : System.Data.Objects.ObjectMaterializedEventHandler " Usage="member this.ObjectMaterialized : System.Data.Objects.ObjectMaterializedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectMaterializedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>当使用数据源中的数据创建新的实体对象（作为查询或加载操作的一部分）时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 在对象上设置了所有标量、复杂和引用属性后，但在加载集合之前，将引发此事件。 如果对象上下文中存在具有相同键值的对象，实体框架将不会重新创建对象，并且不会引发此事件。

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectStateManager">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectStateManager ObjectStateManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Objects.ObjectStateManager ObjectStateManager" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.ObjectStateManager" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ObjectStateManager As ObjectStateManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Objects::ObjectStateManager ^ ObjectStateManager { System::Data::Objects::ObjectStateManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ObjectStateManager : System.Data.Objects.ObjectStateManager" Usage="System.Data.Objects.ObjectContext.ObjectStateManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectStateManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取对象上下文用于跟踪对象更改的对象状态管理器。</summary>
        <value>此 <see cref="T:System.Data.Objects.ObjectStateManager" /> 使用的 <see cref="T:System.Data.Objects.ObjectContext" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 这些示例基于[Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)。 此示例从 <xref:System.Data.Objects.ObjectStateManager> 获取 <xref:System.Data.Objects.ObjectContext>，并使用状态管理器访问上下文中的对象。

 [!code-csharp[DP ObjectServices Concepts#ObjectStateManager](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectstatemanager)]
 [!code-vb[DP ObjectServices Concepts#ObjectStateManager](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectstatemanager)]

 此示例对返回的 <xref:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry%2A> 使用 <xref:System.Data.Objects.ObjectStateManager> 方法基于对象的实体键获取对象。

 [!code-csharp[DP ObjectServices Concepts#ApplyItemUpdates](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#applyitemupdates)]
 [!code-vb[DP ObjectServices Concepts#ApplyItemUpdates](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#applyitemupdates)]

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="QueryProvider">
      <MemberSignature Language="C#" Value="protected internal System.Linq.IQueryProvider QueryProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryProvider QueryProvider" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectContext.QueryProvider" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property QueryProvider As IQueryProvider" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property System::Linq::IQueryProvider ^ QueryProvider { System::Linq::IQueryProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.QueryProvider : System.Linq.IQueryProvider" Usage="System.Data.Objects.ObjectContext.QueryProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与此对象上下文关联的 LINQ 查询提供程序。</summary>
        <value>由此对象上下文使用的 <see cref="T:System.Linq.IQueryProvider" /> 实例。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Refresh">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用数据源中的数据更新对象上下文中的特定对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 刷新对象的顺序具有不确定性。

 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh (System.Data.Objects.RefreshMode refreshMode, System.Collections.IEnumerable collection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh(valuetype System.Data.Objects.RefreshMode refreshMode, class System.Collections.IEnumerable collection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh (refreshMode As RefreshMode, collection As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh(System::Data::Objects::RefreshMode refreshMode, System::Collections::IEnumerable ^ collection);" />
      <MemberSignature Language="F#" Value="member this.Refresh : System.Data.Objects.RefreshMode * System.Collections.IEnumerable -&gt; unit" Usage="objectContext.Refresh (refreshMode, collection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refreshMode" Type="System.Data.Objects.RefreshMode" />
        <Parameter Name="collection" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="refreshMode">一个 <see cref="T:System.Data.Objects.RefreshMode" /> 值，指示是否使用数据源中的属性值重写对象上下文中的属性更改。</param>
        <param name="collection">要刷新的对象的 <see cref="T:System.Collections.IEnumerable" /> 集合。</param>
        <summary>使用数据源中的数据更新对象上下文中的对象集合。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此方法具有两种用途，一种是允许使用数据源中的数据刷新对象上下文中的对象，另一种是作为解决冲突的机制。 有关详细信息，请参阅[保存更改和管理并发](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738618(v=vs.100))。

 刷新对象的顺序具有不确定性。

 调用 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 后，将始终用数据源值更新对象的原始值，但当前值可能会也可能不会更新为数据源值。 这取决于 <xref:System.Data.Objects.RefreshMode> 值。 <xref:System.Data.Objects.RefreshMode.StoreWins> 模式意味着应更新集合中的对象以匹配数据源值。 <xref:System.Data.Objects.RefreshMode.ClientWins> 意味着仅保留对象上下文中的更改，即使数据源中发生了其他更改也是如此。

 若要确保已由数据源端逻辑更新了对象，可以在调用 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 方法后，使用 <xref:System.Data.Objects.RefreshMode.StoreWins> 调用 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A>。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="collection" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="refreshMode" /> 无效。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="collection" /> 为空。

- 或 -

对象未附加到上下文。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh (System.Data.Objects.RefreshMode refreshMode, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh(valuetype System.Data.Objects.RefreshMode refreshMode, object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh (refreshMode As RefreshMode, entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh(System::Data::Objects::RefreshMode refreshMode, System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.Refresh : System.Data.Objects.RefreshMode * obj -&gt; unit" Usage="objectContext.Refresh (refreshMode, entity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refreshMode" Type="System.Data.Objects.RefreshMode" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="refreshMode"><see cref="T:System.Data.Objects.RefreshMode" /> 值之一，它指定用于刷新 <see cref="T:System.Data.Objects.ObjectStateManager" /> 的模式。</param>
        <param name="entity">要刷新的对象。</param>
        <summary>使用数据源中的数据更新对象上下文中的对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 具有两种用途，一种是允许使用数据源中的数据刷新对象，另一种是作为解决冲突的机制。 有关详细信息，请参阅[保存更改和管理并发](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738618(v=vs.100))。

 刷新对象的顺序具有不确定性。

 调用 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 方法后，将始终用数据源值更新对象的原始值，但当前值可能会也可能不会更新为数据源值。 这取决于 <xref:System.Data.Objects.RefreshMode>。 <xref:System.Data.Objects.RefreshMode.StoreWins> 模式意味着应将对象更新为与数据源值匹配。 <xref:System.Data.Objects.RefreshMode.ClientWins> 值意味着仅保持对象上下文中的更改，即使数据源中发生了其他更改也是如此。

 若要确保已由数据源端逻辑更新了对象，可以在调用 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 方法后，使用 <xref:System.Data.Objects.RefreshMode.StoreWins> 值调用 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 方法。



## Examples
 此示例基于[Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)。 此示例尝试保存更改，这可能导致并发冲突。 然后，此示例演示如何通过在重新保存更改前刷新对象上下文来解决并发冲突。

 [!code-csharp[DP ObjectServices Concepts#Concurrency](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#concurrency)]
 [!code-vb[DP ObjectServices Concepts#Concurrency](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#concurrency)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="collection" /> 为 <see langword="null" />。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="refreshMode" /> 无效。</exception>
        <exception cref="T:System.ArgumentException"><paramref name="collection" /> 为空。

- 或 -

对象未附加到上下文。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SaveChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将所有更新保存到数据源。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SaveChanges">
      <MemberSignature Language="C#" Value="public int SaveChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SaveChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.SaveChanges" />
      <MemberSignature Language="VB.NET" Value="Public Function SaveChanges () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SaveChanges();" />
      <MemberSignature Language="F#" Value="member this.SaveChanges : unit -&gt; int" Usage="objectContext.SaveChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>将所有更新保存到数据源并重置对象上下文中的更改跟踪。</summary>
        <returns>在调用 <see cref="F:System.Data.EntityState.Added" /> 时处于 <see cref="F:System.Data.EntityState.Modified" />、<see cref="F:System.Data.EntityState.Deleted" /> 或 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 状态的对象数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 若要确保已由数据源端逻辑更新了客户端上的对象，可以在调用 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 后，使用 <xref:System.Data.Objects.RefreshMode.StoreWins> 值调用 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 方法。 有关详细信息，请参阅[保存更改和管理并发](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb738618(v=vs.100))。

 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 在事务中运行。 如果任何脏 <xref:System.Data.Objects.ObjectStateEntry> 对象无法持久化，<xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 将回滚该事务并引发异常。

 如果发生了开放式并发冲突，则引发 <xref:System.Data.OptimisticConcurrencyException>。 可以通过以下方式解决开放式并发冲突，即捕获该冲突，使用 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 或 <xref:System.Data.Objects.RefreshMode.StoreWins> 值调用 <xref:System.Data.Objects.RefreshMode.ClientWins> 方法，然后再次调用 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A>。 有关详细信息，请参阅[如何：在对象上下文中管理数据并发](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb399228(v=vs.100))。



## Examples
 此示例基于[Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)。 此示例尝试保存更改，这可能导致并发冲突。 然后，此示例演示如何通过在重新保存更改前刷新对象上下文来解决并发冲突。

 [!code-csharp[DP ObjectServices Concepts#Concurrency](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#concurrency)]
 [!code-vb[DP ObjectServices Concepts#Concurrency](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#concurrency)]

 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OptimisticConcurrencyException">在数据源中发生了开放式并发冲突。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="SaveChanges">
      <MemberSignature Language="C#" Value="public int SaveChanges (bool acceptChangesDuringSave);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 SaveChanges(bool acceptChangesDuringSave) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function SaveChanges (acceptChangesDuringSave As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int SaveChanges(bool acceptChangesDuringSave);" />
      <MemberSignature Language="F#" Value="member this.SaveChanges : bool -&gt; int" Usage="objectContext.SaveChanges acceptChangesDuringSave" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("Use SaveChanges(SaveOptions options) instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="acceptChangesDuringSave" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="acceptChangesDuringSave">客户端事务支持需要此参数。 如果为 <see langword="true" />，则所有对象的更改跟踪都会在 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" /> 完成后重置。 如果为 <see langword="false" />，则必须在 <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChanges" /> 之后调用 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" /> 方法。</param>
        <summary>将所有更新保存到数据源并可选择重置对象上下文中的更改跟踪。</summary>
        <returns>在调用 <see cref="F:System.Data.EntityState.Added" /> 时处于 <see cref="F:System.Data.EntityState.Modified" />、<see cref="F:System.Data.EntityState.Deleted" /> 或 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 状态的对象数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 改为调用 <xref:System.Data.Objects.ObjectContext.SaveChanges%28System.Data.Objects.SaveOptions%29> 方法。

 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OptimisticConcurrencyException">发生了开放式并发冲突。</exception>
      </Docs>
    </Member>
    <Member MemberName="SaveChanges">
      <MemberSignature Language="C#" Value="public virtual int SaveChanges (System.Data.Objects.SaveOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SaveChanges(valuetype System.Data.Objects.SaveOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SaveChanges (options As SaveOptions) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int SaveChanges(System::Data::Objects::SaveOptions options);" />
      <MemberSignature Language="F#" Value="abstract member SaveChanges : System.Data.Objects.SaveOptions -&gt; int&#xA;override this.SaveChanges : System.Data.Objects.SaveOptions -&gt; int" Usage="objectContext.SaveChanges options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Data.Objects.SaveOptions" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="options">一个确定操作的行为的 <see cref="T:System.Data.Objects.SaveOptions" /> 值。</param>
        <summary>使用指定的 <see cref="T:System.Data.Objects.SaveOptions" /> 将所有更新保存到数据源。</summary>
        <returns>在调用 <see cref="F:System.Data.EntityState.Added" /> 时处于 <see cref="F:System.Data.EntityState.Modified" />、<see cref="F:System.Data.EntityState.Deleted" /> 或 <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> 状态的对象数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 在将更改保存到数据源之前，或在将更改保存到数据源后调用 <xref:System.Data.Objects.ObjectContext.AcceptAllChanges%2A> 之前，请使用 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 的此特定重载来确保 <xref:System.Data.Objects.ObjectContext.DetectChanges%2A> 被调用。

 此枚举有一个允许其成员值的按位组合的 <xref:System.FlagsAttribute>。

 若要确保客户端上的对象已由数据源端逻辑更新，可以在调用 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A>后使用 <xref:System.Data.Objects.RefreshMode.StoreWins> 值调用 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 方法。 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 方法在事务中运行。 如果任何一个脏 <xref:System.Data.Objects.ObjectStateEntry> 对象无法持久化，<xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 将回滚该事务并引发异常。

 如果发生了开放式并发冲突，则引发 <xref:System.Data.OptimisticConcurrencyException>。 可以通过以下方式解决开放式并发冲突，即捕获该冲突，使用 <xref:System.Data.Objects.ObjectContext.Refresh%2A> 或 <xref:System.Data.Objects.RefreshMode.StoreWins> 值调用 <xref:System.Data.Objects.RefreshMode.ClientWins> 方法，然后再次调用 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 方法。 有关详细信息，请参阅[如何：在对象上下文中管理数据并发](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb399228(v=vs.100))。

 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OptimisticConcurrencyException">发生了开放式并发冲突。</exception>
      </Docs>
    </Member>
    <Member MemberName="SavingChanges">
      <MemberSignature Language="C#" Value="public event EventHandler SavingChanges;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SavingChanges" />
      <MemberSignature Language="DocId" Value="E:System.Data.Objects.ObjectContext.SavingChanges" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SavingChanges As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SavingChanges;" />
      <MemberSignature Language="F#" Value="member this.SavingChanges : EventHandler " Usage="member this.SavingChanges : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在将更改保存到数据源时发生。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectContext.SavingChanges> 事件在 <xref:System.Data.Objects.ObjectContext.SaveChanges%2A> 的 <xref:System.Data.Objects.ObjectContext> 操作启动时引发。 此事件通常用于在将新值写入数据库前验证更改的对象。



## Examples
 此示例基于[Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)。 此示例为执行实体状态验证的 <xref:System.Data.Objects.ObjectContext.SavingChanges> 事件注册处理程序。

 [!code-csharp[DP ObjectServices Concepts#SavingChanges](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#savingchanges)]
 [!code-vb[DP ObjectServices Concepts#SavingChanges](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#savingchanges)]

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
    <Member MemberName="Translate&lt;TElement&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TElement&gt; Translate&lt;TElement&gt; (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TElement&gt; Translate&lt;TElement&gt;(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Translate(Of TElement) (reader As DbDataReader) As ObjectResult(Of TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TElement&gt;&#xA; System::Data::Objects::ObjectResult&lt;TElement&gt; ^ Translate(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Translate : System.Data.Common.DbDataReader -&gt; System.Data.Objects.ObjectResult&lt;'Element&gt;" Usage="objectContext.Translate reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TElement"><see cref="T:System.Data.Common.DbDataReader" /> 中的数据的实体类型。</typeparam>
        <param name="reader">包含要转换为实体对象的实体数据的 <see cref="T:System.Data.Common.DbDataReader" />。</param>
        <summary>将包含实体数据行的 <see cref="T:System.Data.Common.DbDataReader" /> 转换为请求的实体类型的对象。</summary>
        <returns>类型为 <paramref name="TResult" /> 的对象的枚举。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectContext.Translate%2A> 方法用于将实体数据从 <xref:System.Data.Common.DbDataReader> 转换为所请求类型的对象。 当执行 <xref:System.Data.Objects.ObjectQuery%601> 来返回实体数据时，将自动执行此过程。 利用 <xref:System.Data.Objects.ObjectContext.Translate%2A> 方法，您可以对数据源执行标准 ADO.NET 查询，并将返回的数据行转换为实体对象。

 提供的 <xref:System.Data.Common.DbDataReader> 必须包含映射到请求的实体类型的数据。

 有关详细信息，请参阅：

 [直接执行存储命令](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ee358758(v=vs.100))和

 [如何：直接对数据源执行命令](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ee358769(v=vs.100))

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">当 <paramref name="reader" /> 为 <see langword="null" /> 时。</exception>
      </Docs>
    </Member>
    <Member MemberName="Translate&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectResult&lt;TEntity&gt; Translate&lt;TEntity&gt; (System.Data.Common.DbDataReader reader, string entitySetName, System.Data.Objects.MergeOption mergeOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Objects.ObjectResult`1&lt;!!TEntity&gt; Translate&lt;TEntity&gt;(class System.Data.Common.DbDataReader reader, string entitySetName, valuetype System.Data.Objects.MergeOption mergeOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Objects.MergeOption)" />
      <MemberSignature Language="VB.NET" Value="Public Function Translate(Of TEntity) (reader As DbDataReader, entitySetName As String, mergeOption As MergeOption) As ObjectResult(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; System::Data::Objects::ObjectResult&lt;TEntity&gt; ^ Translate(System::Data::Common::DbDataReader ^ reader, System::String ^ entitySetName, System::Data::Objects::MergeOption mergeOption);" />
      <MemberSignature Language="F#" Value="member this.Translate : System.Data.Common.DbDataReader * string * System.Data.Objects.MergeOption -&gt; System.Data.Objects.ObjectResult&lt;'Entity&gt;" Usage="objectContext.Translate (reader, entitySetName, mergeOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectResult&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="entitySetName" Type="System.String" Index="1" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="mergeOption" Type="System.Data.Objects.MergeOption" Index="2" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <typeparam name="TEntity"><see cref="T:System.Data.Common.DbDataReader" /> 中的数据的实体类型。</typeparam>
        <param name="reader">包含要转换为实体对象的实体数据的 <see cref="T:System.Data.Common.DbDataReader" />。</param>
        <param name="entitySetName"><typeparamref name="TEntity" /> 类型的实体集。</param>
        <param name="mergeOption">在将转换后的对象添加到对象上下文时要使用的 <see cref="T:System.Data.Objects.MergeOption" />。 默认为 <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />。</param>
        <summary>在特定的实体集中，使用指定的合并选项将包含实体数据行的 <see cref="T:System.Data.Common.DbDataReader" /> 转换为请求的实体类型的对象。</summary>
        <returns>类型为 <paramref name="TResult" /> 的对象的枚举。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectContext.Translate%2A> 方法用于将实体数据从 <xref:System.Data.Common.DbDataReader> 转换为所请求类型的对象。 当执行 <xref:System.Data.Objects.ObjectQuery%601> 来返回实体数据时，将自动执行此过程。 利用 <xref:System.Data.Objects.ObjectContext.Translate%2A> 方法，您可以对数据源执行标准 ADO.NET 查询，并将返回的数据行转换为实体对象。

 提供的 <xref:System.Data.Common.DbDataReader> 必须包含映射到请求的实体类型的数据。

 有关详细信息，请参阅：

 [直接执行存储命令](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ee358758(v=vs.100))和

 [如何：直接对数据源执行命令](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ee358769(v=vs.100))

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">当 <paramref name="reader" /> 为 <see langword="null" /> 时。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">当提供的 <paramref name="mergeOption" /> 不是有效的 <see cref="T:System.Data.Objects.MergeOption" /> 值时。</exception>
        <exception cref="T:System.InvalidOperationException">当提供的 <paramref name="entitySetName" /> 不是 <paramref name="TResult" /> 类型的有效实体集时。</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetObjectByKey">
      <MemberSignature Language="C#" Value="public bool TryGetObjectByKey (System.Data.EntityKey key, out object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetObjectByKey(class System.Data.EntityKey key, [out] object&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectContext.TryGetObjectByKey(System.Data.EntityKey,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Function TryGetObjectByKey (key As EntityKey, ByRef value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetObjectByKey(System::Data::EntityKey ^ key, [Runtime::InteropServices::Out] System::Object ^ % value);" />
      <MemberSignature Language="F#" Value="member this.TryGetObjectByKey : System.Data.EntityKey * obj -&gt; bool" Usage="objectContext.TryGetObjectByKey (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Data.EntityKey" />
        <Parameter Name="value" Type="System.Object" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">要查找的对象的键。</param>
        <param name="value">在此方法返回时包含对象。</param>
        <summary>返回具有指定实体键的对象。</summary>
        <returns>如果成功检索到对象，则为 <see langword="true" />。 如果 <paramref name="key" /> 是临时的，或者连接为 <see langword="false" />，或 <paramref name="value" /> 为 <see langword="null" />，则为 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <xref:System.Data.Objects.ObjectContext.TryGetObjectByKey%2A> 尝试从 <xref:System.Data.EntityKey> 检索具有指定 <xref:System.Data.Objects.ObjectStateManager> 的对象。 如果该对象当前尚未加载到对象上下文中，则会执行查询以尝试从数据源返回该对象。 有关详细信息，请参阅[对象查询](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896241(v=vs.100))。

 使用 <xref:System.Data.Objects.ObjectContext.TryGetObjectByKey%2A> 方法可避免处理在无法找到对象时由 <xref:System.Data.ObjectNotFoundException> 引发的 <xref:System.Data.Objects.ObjectContext.GetObjectByKey%2A>。

 此方法将返回状态为 <xref:System.Data.EntityState.Deleted> 的对象。

 临时键无法用于从数据源返回对象。

 <xref:System.Data.Objects.ObjectContext.TryGetObjectByKey%2A> 方法将标准 .NET `TryParse` 模式应用于 <xref:System.Data.Objects.ObjectContext.GetObjectByKey%2A> 方法，并在捕获 <xref:System.Data.ObjectNotFoundException> 时返回 `false`。



## Examples
 本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。 该示例为具有给定类型的实体创建 <xref:System.Data.EntityKey>，然后尝试通过键检索实体。

 [!code-csharp[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#entitykeyclass_trygetobjectbykey)]
 [!code-vb[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#entitykeyclass_trygetobjectbykey)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="key" /> 的元数据不兼容。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="key" /> 为 <see langword="null" />。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/working-with-objects">使用对象（实体框架）</related>
      </Docs>
    </Member>
  </Members>
</Type>
