<Type Name="ObjectParameter" FullName="System.Data.Objects.ObjectParameter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dd3c97d1010a9b6015728e7282c57188b6143249" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86584907" /></Metadata><TypeSignature Language="C#" Value="public sealed class ObjectParameter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ObjectParameter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.ObjectParameter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ObjectParameter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectParameter sealed" />
  <TypeSignature Language="F#" Value="type ObjectParameter = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>表示传递给对象查询的查询参数。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 表示传递给 <xref:System.Data.Objects.ObjectQuery%601> 或查询生成器方法的查询参数。 有关详细信息，请参阅 [查询生成器方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))。

 对象参数由名称、类型和值组成。

 此类不能被继承。 有关详细信息，请参阅 <xref:System.Data.Objects.ObjectParameterCollection>。



## Examples
 本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。 该示例向集合添加新参数。 它循环访问 <xref:System.Data.Objects.ObjectParameterCollection> 并显示集合中每个参数的名称、类型和值。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_parameters)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_parameters)]

 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据（实体框架）</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Data.Objects.ObjectParameter" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectParameter (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameter.#ctor(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectParameter(System::String ^ name, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectParameter : string * obj -&gt; System.Data.Objects.ObjectParameter" Usage="new System.Data.Objects.ObjectParameter (name, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">参数名称。 此名称不应包含“@”参数标记（它用在 [!INCLUDE[esql](~/includes/esql-md.md)] 语句中），只能为实际名称。 表达式的第一个字符必须为字母。 表达式中的所有后续字符都必须为字母、数字或下划线 (_) 字符。</param>
        <param name="value">参数的初始值（及固有类型）。</param>
        <summary>使用指定的名称和值初始化 <see cref="T:System.Data.Objects.ObjectParameter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 此构造函数使用指定的名称和值创建一个参数。 根据参数的值推断其类型。

 添加到 <xref:System.Data.Objects.ObjectParameterCollection> 后，该参数名称不能进行更改。 该参数值可以通过 <xref:System.Data.Objects.ObjectParameter.Value%2A> 属性进行更改。 编译查询后，该值不能进行更改。 有关详细信息，请参阅 [查询生成器方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))。



## Examples
 本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。 该示例向集合添加新参数。 它循环访问 <xref:System.Data.Objects.ObjectParameterCollection> 并显示集合中每个参数的名称、类型和值。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_parameters)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_parameters)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">如果任一自变量的值为 null。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">如果名称自变量的值无效。 参数名称必须以字母开头，并且只能包含字母、数字和下划线。</exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据，并 (实体框架形成结果) </related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectParameter (string name, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameter.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, type As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectParameter(System::String ^ name, Type ^ type);" />
      <MemberSignature Language="F#" Value="new System.Data.Objects.ObjectParameter : string * Type -&gt; System.Data.Objects.ObjectParameter" Usage="new System.Data.Objects.ObjectParameter (name, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">参数名称。 此名称不应包含“@”参数标记（它用在 [!INCLUDE[esql](~/includes/esql-md.md)] 语句中），只能为实际名称。 表达式的第一个字符必须为字母。 表达式中的所有后续字符都必须为字母、数字或下划线 (_) 字符。</param>
        <param name="type">参数的公共语言运行库 (CLR) 类型。</param>
        <summary>使用指定的名称和类型初始化 <see cref="T:System.Data.Objects.ObjectParameter" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 实例化后，该参数名称不能进行更改。 该参数值可以通过 <xref:System.Data.Objects.ObjectParameter.Value%2A> 属性进行设置或更改。 编译查询后，该值不能进行更改。 有关详细信息，请参阅 [查询生成器方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))。

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">如果任一自变量的值为 null。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">如果名称参数的值无效。 参数名称必须以字母开头，并且只能包含字母、数字和下划线。</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectParameter.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Data.Objects.ObjectParameter.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数名称，该名称只能通过构造函数进行设置。</summary>
        <value>参数名称，它只能通过构造函数进行设置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 实例化后，该参数名称不能进行更改。 该参数值可以通过 <xref:System.Data.Objects.ObjectParameter.Value%2A> 属性进行设置或更改。 编译查询后，该值不能进行更改。 有关详细信息，请参阅 [查询生成器方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))。



## Examples
 本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。 该示例向集合添加新参数。 它循环访问 <xref:System.Data.Objects.ObjectParameterCollection> 并显示集合中每个参数的名称、类型和值。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_parameters)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_parameters)]

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据，并 (实体框架形成结果) </related>
      </Docs>
    </Member>
    <Member MemberName="ParameterType">
      <MemberSignature Language="C#" Value="public Type ParameterType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ParameterType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectParameter.ParameterType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ParameterType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ParameterType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ParameterType : Type" Usage="System.Data.Objects.ObjectParameter.ParameterType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取参数类型。</summary>
        <value>参数的 <see cref="T:System.Type" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 参数类型只能通过构造函数进行设置。



## Examples
 本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。 该示例向集合添加新参数。 它循环访问 <xref:System.Data.Objects.ObjectParameterCollection> 并显示集合中每个参数的名称、类型和值。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_parameters)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_parameters)]

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据，并 (实体框架形成结果) </related>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectParameter.Value" />
      <MemberSignature Language="VB.NET" Value="Public Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj with get, set" Usage="System.Data.Objects.ObjectParameter.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置参数值。</summary>
        <value>参数值。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 编译查询后，该值不能进行更改。 有关详细信息，请参阅 [查询生成器方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))。

 如果新值与构造函数中声明的类型不兼容，可能引发运行时异常。 提供程序必须确定该值是否与声明的类型兼容。 例如，如果初始类型为 <xref:System.Int32>，而新值为 <xref:System.Guid>，则可能接收到异常。



## Examples
 本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。 该示例向集合添加新参数。 它循环访问 <xref:System.Data.Objects.ObjectParameterCollection> 并显示集合中每个参数的名称、类型和值。

 [!code-csharp[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectquery_parameters)]
 [!code-vb[DP ObjectServices Concepts#ObjectQuery_Parameters](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectquery_parameters)]

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model">以对象形式查询数据，并 (实体框架形成结果) </related>
      </Docs>
    </Member>
  </Members>
</Type>
