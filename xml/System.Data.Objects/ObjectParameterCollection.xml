<Type Name="ObjectParameterCollection" FullName="System.Data.Objects.ObjectParameterCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="433fbc65d9d600364620ff3012ae99f2ed726143" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89720307" /></Metadata><TypeSignature Language="C#" Value="public sealed class ObjectParameterCollection : System.Collections.Generic.ICollection&lt;System.Data.Objects.ObjectParameter&gt;, System.Collections.Generic.IEnumerable&lt;System.Data.Objects.ObjectParameter&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ObjectParameterCollection extends System.Object implements class System.Collections.Generic.ICollection`1&lt;class System.Data.Objects.ObjectParameter&gt;, class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Objects.ObjectParameter&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Objects.ObjectParameterCollection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ObjectParameterCollection&#xA;Implements ICollection(Of ObjectParameter), IEnumerable(Of ObjectParameter)" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectParameterCollection sealed : System::Collections::Generic::ICollection&lt;System::Data::Objects::ObjectParameter ^&gt;, System::Collections::Generic::IEnumerable&lt;System::Data::Objects::ObjectParameter ^&gt;" />
  <TypeSignature Language="F#" Value="type ObjectParameterCollection = class&#xA;    interface ICollection&lt;ObjectParameter&gt;&#xA;    interface seq&lt;ObjectParameter&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Entity</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.ICollection&lt;System.Data.Objects.ObjectParameter&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.Data.Objects.ObjectParameter&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="ce357-101">将查询参数表示为 <see cref="T:System.Data.Objects.ObjectParameter" /> 中定义的 <see cref="T:System.Data.Objects.ObjectQuery`1" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="ce357-101">Represents the query parameters as <see cref="T:System.Data.Objects.ObjectParameter" /> objects that are defined in an <see cref="T:System.Data.Objects.ObjectQuery`1" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="ce357-102">将查询参数表示为 <xref:System.Data.Objects.ObjectParameter> 中定义的 <xref:System.Data.Objects.ObjectQuery%601> 对象。</span><span class="sxs-lookup"><span data-stu-id="ce357-102">Represents the query parameters as <xref:System.Data.Objects.ObjectParameter> objects defined in an <xref:System.Data.Objects.ObjectQuery%601>.</span></span>

 <span data-ttu-id="ce357-103">此类不能被继承。</span><span class="sxs-lookup"><span data-stu-id="ce357-103">This class cannot be inherited.</span></span>

 <span data-ttu-id="ce357-104">传递给查询生成器方法的参数由序列中 <xref:System.Data.Objects.ObjectQuery%601> 的后续实例聚合。</span><span class="sxs-lookup"><span data-stu-id="ce357-104">The parameters that are passed to query builder methods are aggregated by successive instances of an <xref:System.Data.Objects.ObjectQuery%601> in the sequence.</span></span> <span data-ttu-id="ce357-105">可以使用返回 <xref:System.Data.Objects.ObjectQuery.Parameters%2A> 的 <xref:System.Data.Objects.ObjectParameterCollection> 属性访问这些参数。</span><span class="sxs-lookup"><span data-stu-id="ce357-105">They can be accessed by using the <xref:System.Data.Objects.ObjectQuery.Parameters%2A> property, which returns the <xref:System.Data.Objects.ObjectParameterCollection>.</span></span> <span data-ttu-id="ce357-106">添加参数后，只要还没有编译或执行查询，就可以从集合中移除参数，并且可以清除集合。</span><span class="sxs-lookup"><span data-stu-id="ce357-106">After parameters have been added, they can be removed from the collection and the collection can be cleared, as long as the query has not been compiled or executed.</span></span> <span data-ttu-id="ce357-107">不能更改参数名称，但可以随时对值进行更改。</span><span class="sxs-lookup"><span data-stu-id="ce357-107">Parameter names cannot be changed, but values can be changed at any time.</span></span>

 <span data-ttu-id="ce357-108">参数在 <xref:System.Data.Objects.ObjectParameterCollection> 中必须是唯一的。</span><span class="sxs-lookup"><span data-stu-id="ce357-108">Parameters must be unique in the <xref:System.Data.Objects.ObjectParameterCollection>.</span></span> <span data-ttu-id="ce357-109">集合中不能有两个具有相同名称的参数。</span><span class="sxs-lookup"><span data-stu-id="ce357-109">There cannot be two parameters in the collection with the same name.</span></span>

 <span data-ttu-id="ce357-110">使用组合方法（如 <xref:System.Data.Objects.ObjectQuery%601.Union%2A>、<xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A>、<xref:System.Data.Objects.ObjectQuery%601.Intersect%2A> 和 <xref:System.Data.Objects.ObjectQuery%601.Except%2A>）时，将对参数进行合并。</span><span class="sxs-lookup"><span data-stu-id="ce357-110">When using composition methods, such as <xref:System.Data.Objects.ObjectQuery%601.Union%2A>, <xref:System.Data.Objects.ObjectQuery%601.UnionAll%2A>, <xref:System.Data.Objects.ObjectQuery%601.Intersect%2A> and <xref:System.Data.Objects.ObjectQuery%601.Except%2A>, the parameters are merged.</span></span> <span data-ttu-id="ce357-111">参数集不兼容或不完整时会引发异常。</span><span class="sxs-lookup"><span data-stu-id="ce357-111">An exception is thrown when the sets of parameters are incompatible or incomplete.</span></span> <span data-ttu-id="ce357-112">有关详细信息，请参阅 [查询生成器方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="ce357-112">For more information, see [Query Builder Methods](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100)).</span></span>



## Examples
 <span data-ttu-id="ce357-113">本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。</span><span class="sxs-lookup"><span data-stu-id="ce357-113">The example in this topic is based on the [Microsoft SQL Server Product Samples: Database](https://archive.codeplex.com/?p=msftdbprodsamples).</span></span> <span data-ttu-id="ce357-114">该示例将新参数添加到集合，获取集合中的参数个数。</span><span class="sxs-lookup"><span data-stu-id="ce357-114">The example adds new parameters to the collection and gets the count of the parameters in the collection.</span></span> <span data-ttu-id="ce357-115">然后，该示例循环访问 <xref:System.Data.Objects.ObjectParameterCollection> 并显示集合中每个参数的名称、类型和值。</span><span class="sxs-lookup"><span data-stu-id="ce357-115">Then it iterates through the <xref:System.Data.Objects.ObjectParameterCollection> and displays the name, type, and value of each parameter in the collection.</span></span>

 [!code-csharp[DP ObjectServices Concepts#ObjectParameterCollection_Count_Add_Indexer](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectparametercollection_count_add_indexer)]
 [!code-vb[DP ObjectServices Concepts#ObjectParameterCollection_Count_Add_Indexer](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectparametercollection_count_add_indexer)]

 ]]></format>
    </remarks>
    <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model"><span data-ttu-id="ce357-116">以对象形式查询数据，并 (实体框架形成结果) </span><span class="sxs-lookup"><span data-stu-id="ce357-116">Querying Data as Objects and Shaping Results (Entity Framework)</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Data.Objects.ObjectParameter parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class System.Data.Objects.ObjectParameter parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameterCollection.Add(System.Data.Objects.ObjectParameter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (parameter As ObjectParameter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::Data::Objects::ObjectParameter ^ parameter);" />
      <MemberSignature Language="F#" Value="abstract member Add : System.Data.Objects.ObjectParameter -&gt; unit&#xA;override this.Add : System.Data.Objects.ObjectParameter -&gt; unit" Usage="objectParameterCollection.Add parameter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Add(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Data.Objects.ObjectParameter" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="ce357-117">要添加到集合的参数。</span><span class="sxs-lookup"><span data-stu-id="ce357-117">The parameter to add to the collection.</span></span></param>
        <summary><span data-ttu-id="ce357-118">将指定的 <see cref="T:System.Data.Objects.ObjectParameter" /> 添加到集合。</span><span class="sxs-lookup"><span data-stu-id="ce357-118">Adds the specified <see cref="T:System.Data.Objects.ObjectParameter" /> to the collection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="ce357-119">添加参数后，只要还没有编译或执行查询，就可以从集合中移除参数，并且可以清除集合。</span><span class="sxs-lookup"><span data-stu-id="ce357-119">After parameters have been added, they can be removed from the collection and the collection can be cleared, as long as the query has not been compiled or executed.</span></span> <span data-ttu-id="ce357-120">不能更改参数名称，但可以随时对值进行更改。</span><span class="sxs-lookup"><span data-stu-id="ce357-120">Parameter names cannot be changed, but values can be changed at any time.</span></span>

 <span data-ttu-id="ce357-121">参数在 <xref:System.Data.Objects.ObjectParameterCollection> 中必须是唯一的。</span><span class="sxs-lookup"><span data-stu-id="ce357-121">Parameters must be unique in the <xref:System.Data.Objects.ObjectParameterCollection>.</span></span> <span data-ttu-id="ce357-122">集合中不能有两个具有相同名称的参数。</span><span class="sxs-lookup"><span data-stu-id="ce357-122">There cannot be two parameters in the collection with the same name.</span></span> <span data-ttu-id="ce357-123">有关详细信息，请参阅 [查询生成器方法](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100))。</span><span class="sxs-lookup"><span data-stu-id="ce357-123">For more information, see [Query Builder Methods](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/bb896238(v=vs.100)).</span></span>



## Examples
 <span data-ttu-id="ce357-124">本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。</span><span class="sxs-lookup"><span data-stu-id="ce357-124">The example in this topic is based on the [Microsoft SQL Server Product Samples: Database](https://archive.codeplex.com/?p=msftdbprodsamples).</span></span> <span data-ttu-id="ce357-125">该示例向集合添加新参数。</span><span class="sxs-lookup"><span data-stu-id="ce357-125">The example adds new parameters to the collection.</span></span> <span data-ttu-id="ce357-126">它循环访问 <xref:System.Data.Objects.ObjectParameterCollection> 并显示集合中每个参数的名称、类型和值。</span><span class="sxs-lookup"><span data-stu-id="ce357-126">It iterates through the <xref:System.Data.Objects.ObjectParameterCollection> and displays the name, type, and value of each parameter in the collection.</span></span>

 [!code-csharp[DP ObjectServices Concepts#ObjectParameterCollection_Count_Add_Indexer](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectparametercollection_count_add_indexer)]
 [!code-vb[DP ObjectServices Concepts#ObjectParameterCollection_Count_Add_Indexer](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectparametercollection_count_add_indexer)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ce357-127"><paramref name="parameter" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ce357-127">The <paramref name="parameter" /> argument is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="ce357-128"><paramref name="parameter" /> 实参已存在于集合中。</span><span class="sxs-lookup"><span data-stu-id="ce357-128">The <paramref name="parameter" /> argument already exists in the collection.</span></span> <span data-ttu-id="ce357-129">此行为与允许重复项的大多数集合的行为不同。</span><span class="sxs-lookup"><span data-stu-id="ce357-129">This behavior differs from that of most collections that allow duplicate entries.</span></span>

<span data-ttu-id="ce357-130">- 或 -</span><span class="sxs-lookup"><span data-stu-id="ce357-130">-or-</span></span>

<span data-ttu-id="ce357-131">与 <paramref name="parameter" /> 实参具有相同名称的另一个形参已存在于集合中。</span><span class="sxs-lookup"><span data-stu-id="ce357-131">Another parameter with the same name as the <paramref name="parameter" /> argument already exists in the collection.</span></span> <span data-ttu-id="ce357-132">注意，查找是区分大小写的。</span><span class="sxs-lookup"><span data-stu-id="ce357-132">Note that the lookup is case-insensitive.</span></span> <span data-ttu-id="ce357-133">此行为与大多数集合的行为不同，更类似于 <see cref="T:System.Collections.Generic.Dictionary`2" /> 的行为。</span><span class="sxs-lookup"><span data-stu-id="ce357-133">This behavior differs from that of most collections, and is more like that of a <see cref="T:System.Collections.Generic.Dictionary`2" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ce357-134"><paramref name="parameter" /> 的类型无效。</span><span class="sxs-lookup"><span data-stu-id="ce357-134">The type of the <paramref name="parameter" /> is not valid.</span></span></exception>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model"><span data-ttu-id="ce357-135">以对象形式查询数据，并 (实体框架形成结果) </span><span class="sxs-lookup"><span data-stu-id="ce357-135">Querying Data as Objects and Shaping Results (Entity Framework)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameterCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="objectParameterCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ce357-136">删除集合中的所有 <see cref="T:System.Data.Objects.ObjectParameter" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="ce357-136">Deletes all <see cref="T:System.Data.Objects.ObjectParameter" /> instances from the collection.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains">
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="ce357-137">按引用检查集合中是否存在指定的 <see cref="T:System.Data.Objects.ObjectParameter" />。</span><span class="sxs-lookup"><span data-stu-id="ce357-137">Checks for the existence of a specified <see cref="T:System.Data.Objects.ObjectParameter" /> in the collection by reference.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Data.Objects.ObjectParameter parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class System.Data.Objects.ObjectParameter parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameterCollection.Contains(System.Data.Objects.ObjectParameter)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (parameter As ObjectParameter) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Data::Objects::ObjectParameter ^ parameter);" />
      <MemberSignature Language="F#" Value="abstract member Contains : System.Data.Objects.ObjectParameter -&gt; bool&#xA;override this.Contains : System.Data.Objects.ObjectParameter -&gt; bool" Usage="objectParameterCollection.Contains parameter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Contains(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Data.Objects.ObjectParameter" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="ce357-138">要在集合中查找的 <see cref="T:System.Data.Objects.ObjectParameter" />。</span><span class="sxs-lookup"><span data-stu-id="ce357-138">The <see cref="T:System.Data.Objects.ObjectParameter" /> to find in the collection.</span></span></param>
        <summary><span data-ttu-id="ce357-139">按引用检查集合中是否存在指定的 <see cref="T:System.Data.Objects.ObjectParameter" />。</span><span class="sxs-lookup"><span data-stu-id="ce357-139">Checks for the existence of a specified <see cref="T:System.Data.Objects.ObjectParameter" /> in the collection by reference.</span></span></summary>
        <returns><span data-ttu-id="ce357-140">如果在集合中找到参数对象，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ce357-140"><see langword="true" /> if the parameter object was found in the collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="ce357-141">这是基于引用的检查。</span><span class="sxs-lookup"><span data-stu-id="ce357-141">This is a reference-based check.</span></span> <span data-ttu-id="ce357-142">也就是说，如果指定的与 <xref:System.Data.Objects.ObjectParameter> 集合中的参数对象的名称相同，则仅当此方法 `true` 为同一对象时，此方法才会返回。</span><span class="sxs-lookup"><span data-stu-id="ce357-142">That is, if an <xref:System.Data.Objects.ObjectParameter> is specified that contains the same name as a parameter object in the collection, this method will only return `true` if it is the same object.</span></span>

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ce357-143"><paramref name="parameter" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ce357-143">The <paramref name="parameter" /> argument is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameterCollection.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ name);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="objectParameterCollection.Contains name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ce357-144">要在集合中查找的参数的名称。</span><span class="sxs-lookup"><span data-stu-id="ce357-144">The name of the parameter to look for in the collection.</span></span> <span data-ttu-id="ce357-145">此名称不应包含“\@”参数标记（它用在实体 SQL 语句中），只能为实际名称。</span><span class="sxs-lookup"><span data-stu-id="ce357-145">This name should not include the "\@" parameter marker that is used in the Entity SQL statements, only the actual name.</span></span></param>
        <summary><span data-ttu-id="ce357-146">确定集合中是否存在具有指定名称的 <see cref="T:System.Data.Objects.ObjectParameter" />。</span><span class="sxs-lookup"><span data-stu-id="ce357-146">Determines whether an <see cref="T:System.Data.Objects.ObjectParameter" /> with the specified name is in the collection.</span></span></summary>
        <returns><span data-ttu-id="ce357-147">如果在集合中找到具有指定名称的参数，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ce357-147"><see langword="true" /> if a parameter with the specified name was found in the collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="ce357-148">本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。</span><span class="sxs-lookup"><span data-stu-id="ce357-148">The example in this topic is based on the [Microsoft SQL Server Product Samples: Database](https://archive.codeplex.com/?p=msftdbprodsamples).</span></span> <span data-ttu-id="ce357-149">该示例使用 <xref:System.Data.Objects.ObjectParameterCollection.Contains%2A> 方法确定集合中是否存在指定参数。</span><span class="sxs-lookup"><span data-stu-id="ce357-149">The example uses the <xref:System.Data.Objects.ObjectParameterCollection.Contains%2A> method to determine whether the specified parameter is in the collection.</span></span>

 [!code-csharp[DP ObjectServices Concepts#ObjectParameterCollection_StringArg](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectparametercollection_stringarg)]
 [!code-vb[DP ObjectServices Concepts#ObjectParameterCollection_StringArg](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectparametercollection_stringarg)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ce357-150"><paramref name="name" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ce357-150">The <paramref name="name" /> parameter is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (System.Data.Objects.ObjectParameter[] array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Data.Objects.ObjectParameter[] array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameterCollection.CopyTo(System.Data.Objects.ObjectParameter[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (array As ObjectParameter(), index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(cli::array &lt;System::Data::Objects::ObjectParameter ^&gt; ^ array, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : System.Data.Objects.ObjectParameter[] * int -&gt; unit&#xA;override this.CopyTo : System.Data.Objects.ObjectParameter[] * int -&gt; unit" Usage="objectParameterCollection.CopyTo (array, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Data.Objects.ObjectParameter[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array"><span data-ttu-id="ce357-151">要将参数复制到其中的数组。</span><span class="sxs-lookup"><span data-stu-id="ce357-151">The array into which to copy the parameters.</span></span></param>
        <param name="index"><span data-ttu-id="ce357-152">数组中开始复制参数的位置的索引。</span><span class="sxs-lookup"><span data-stu-id="ce357-152">The index in the array at which to start copying the parameters.</span></span></param>
        <summary><span data-ttu-id="ce357-153">允许将集合中的参数复制到提供的数组中（从指定索引处的对象开始）。</span><span class="sxs-lookup"><span data-stu-id="ce357-153">Allows the parameters in the collection to be copied into a supplied array, starting with the object at the specified index.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="ce357-154">本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。</span><span class="sxs-lookup"><span data-stu-id="ce357-154">The example in this topic is based on the [Microsoft SQL Server Product Samples: Database](https://archive.codeplex.com/?p=msftdbprodsamples).</span></span> <span data-ttu-id="ce357-155">该示例将参数复制到指定数组中。</span><span class="sxs-lookup"><span data-stu-id="ce357-155">The example copies the parameters into the specified array.</span></span>

 [!code-csharp[DP ObjectServices Concepts#ObjectParameterCollection_CopyTo](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectparametercollection_copyto)]
 [!code-vb[DP ObjectServices Concepts#ObjectParameterCollection_CopyTo](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectparametercollection_copyto)]

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectParameterCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Data.Objects.ObjectParameterCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ce357-156">获取集合中当前存在的参数的数量。</span><span class="sxs-lookup"><span data-stu-id="ce357-156">Gets the number of parameters currently in the collection.</span></span></summary>
        <value><span data-ttu-id="ce357-157">集合中当前存在的 <see cref="T:System.Data.Objects.ObjectParameter" /> 对象的数量。</span><span class="sxs-lookup"><span data-stu-id="ce357-157">The number of <see cref="T:System.Data.Objects.ObjectParameter" /> objects that are currently in the collection.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Examples
 <span data-ttu-id="ce357-158">本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。</span><span class="sxs-lookup"><span data-stu-id="ce357-158">The example in this topic is based on the [Microsoft SQL Server Product Samples: Database](https://archive.codeplex.com/?p=msftdbprodsamples).</span></span> <span data-ttu-id="ce357-159">该示例将新参数添加到集合，获取集合中的参数个数。</span><span class="sxs-lookup"><span data-stu-id="ce357-159">The example adds new parameters to the collection and gets the count of the parameters in the collection.</span></span> <span data-ttu-id="ce357-160">然后，该示例循环访问 <xref:System.Data.Objects.ObjectParameterCollection> 并显示集合中每个参数的名称、类型和值。</span><span class="sxs-lookup"><span data-stu-id="ce357-160">Then it iterates through the <xref:System.Data.Objects.ObjectParameterCollection> and displays the name, type, and value of each parameter in the collection.</span></span>

 [!code-csharp[DP ObjectServices Concepts#ObjectParameterCollection_Count_Add_Indexer](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectparametercollection_count_add_indexer)]
 [!code-vb[DP ObjectServices Concepts#ObjectParameterCollection_Count_Add_Indexer](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectparametercollection_count_add_indexer)]

 ]]></format>
        </remarks>
        <related type="Article" href="/dotnet/framework/data/adonet/ef/querying-a-conceptual-model"><span data-ttu-id="ce357-161">以对象形式查询数据，并 (实体框架形成结果) </span><span class="sxs-lookup"><span data-stu-id="ce357-161">Querying Data as Objects and Shaping Results (Entity Framework)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Data.Objects.ObjectParameter this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Objects.ObjectParameter Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectParameterCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(name As String) As ObjectParameter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Objects::ObjectParameter ^ default[System::String ^] { System::Data::Objects::ObjectParameter ^ get(System::String ^ name); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : System.Data.Objects.ObjectParameter" Usage="System.Data.Objects.ObjectParameterCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Objects.ObjectParameter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="ce357-162">要查找的参数的名称。</span><span class="sxs-lookup"><span data-stu-id="ce357-162">The name of the parameter to find.</span></span> <span data-ttu-id="ce357-163">此名称不应包含“\@”参数标记（它用在实体 SQL 语句中），只能为实际名称。</span><span class="sxs-lookup"><span data-stu-id="ce357-163">This name should not include the "\@" parameter marker that is used in the Entity SQL statements, only the actual name.</span></span></param>
        <summary><span data-ttu-id="ce357-164">提供一个索引器，供调用方按名称检索参数。</span><span class="sxs-lookup"><span data-stu-id="ce357-164">Provides an indexer that allows callers to retrieve parameters by name.</span></span></summary>
        <value><span data-ttu-id="ce357-165"><see cref="T:System.Data.Objects.ObjectParameter" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="ce357-165">The <see cref="T:System.Data.Objects.ObjectParameter" /> instance.</span></span></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="ce357-166">在集合中未找到具有指定名称的参数。</span><span class="sxs-lookup"><span data-stu-id="ce357-166">No parameter with the specified name is found in the collection.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (System.Data.Objects.ObjectParameter parameter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Remove(class System.Data.Objects.ObjectParameter parameter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameterCollection.Remove(System.Data.Objects.ObjectParameter)" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (parameter As ObjectParameter) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Remove(System::Data::Objects::ObjectParameter ^ parameter);" />
      <MemberSignature Language="F#" Value="abstract member Remove : System.Data.Objects.ObjectParameter -&gt; bool&#xA;override this.Remove : System.Data.Objects.ObjectParameter -&gt; bool" Usage="objectParameterCollection.Remove parameter" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.ICollection`1.Remove(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Data.Objects.ObjectParameter" />
      </Parameters>
      <Docs>
        <param name="parameter"><span data-ttu-id="ce357-167">要从集合中移除的对象。</span><span class="sxs-lookup"><span data-stu-id="ce357-167">An object to remove from the collection.</span></span></param>
        <summary><span data-ttu-id="ce357-168">按引用从集合中移除 <see cref="T:System.Data.Objects.ObjectParameter" /> 的实例（如果集合中存在该实例）。</span><span class="sxs-lookup"><span data-stu-id="ce357-168">Removes an instance of an <see cref="T:System.Data.Objects.ObjectParameter" /> from the collection by reference if it exists in the collection.</span></span></summary>
        <returns><span data-ttu-id="ce357-169">如果找到参数对象且已从集合中删除该对象，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ce357-169"><see langword="true" /> if the parameter object was found and removed from the collection; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="ce357-170">这是基于引用的比较。</span><span class="sxs-lookup"><span data-stu-id="ce357-170">This is a reference-based comparison.</span></span> <span data-ttu-id="ce357-171">即，如果指定的查询参数对象包含的名称与集合中某个参数对象相同，则仅当其是同一对象时，才移除集合中的参数。</span><span class="sxs-lookup"><span data-stu-id="ce357-171">That is, if a query parameter object is specified that contains the same name as a parameter object in the collection, the parameter in the collection will only be removed if it is the same object.</span></span> <span data-ttu-id="ce357-172">若要按名称移除对象，请先使用索引器检索参数实例，然后使用此方法移除该实例。</span><span class="sxs-lookup"><span data-stu-id="ce357-172">To remove an object by name, first use the indexer to retrieve the parameter instance, then remove it by using this method.</span></span>



## Examples
 <span data-ttu-id="ce357-173">本主题中的示例基于 " [Microsoft SQL Server 产品示例：数据库](https://archive.codeplex.com/?p=msftdbprodsamples)"。</span><span class="sxs-lookup"><span data-stu-id="ce357-173">The example in this topic is based on the [Microsoft SQL Server Product Samples: Database](https://archive.codeplex.com/?p=msftdbprodsamples).</span></span> <span data-ttu-id="ce357-174">该示例将两个参数添加到集合，然后移除这些参数。</span><span class="sxs-lookup"><span data-stu-id="ce357-174">The example adds two parameters to the collection and then removes the parameters.</span></span>

 [!code-csharp[DP ObjectServices Concepts#ObjectParameterCollection_Remove](~/samples/snippets/csharp/VS_Snippets_Data/DP ObjectServices Concepts/CS/Source.cs#objectparametercollection_remove)]
 [!code-vb[DP ObjectServices Concepts#ObjectParameterCollection_Remove](~/samples/snippets/visualbasic/VS_Snippets_Data/DP ObjectServices Concepts/VB/Source.vb#objectparametercollection_remove)]

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="ce357-175"><paramref name="parameter" /> 参数为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="ce357-175">The <paramref name="parameter" /> argument is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.ICollection&lt;System.Data.Objects.ObjectParameter&gt;.IsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.Generic.ICollection&lt;System.Data.Objects.ObjectParameter&gt;.IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.Generic.ICollection&lt;System.Data.Objects.ObjectParameter&gt;.IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection&lt;System#Data#Objects#ObjectParameter&gt;#IsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsReadOnly As Boolean Implements ICollection(Of ObjectParameter).IsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::Generic::ICollection&lt;System::Data::Objects::ObjectParameter&gt;::IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.System.Collections.Generic.ICollection&lt;System.Data.Objects.ObjectParameter&gt;.IsReadOnly : bool" Usage="System.Collections.Generic.ICollection&lt;System.Data.Objects.ObjectParameter&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.Generic.ICollection`1.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="ce357-176">获取一个值，该值指示集合是只读的还是可修改的。</span><span class="sxs-lookup"><span data-stu-id="ce357-176">Gets a value that indicates whether the collection is read-only or can be modified.</span></span></summary>
        <value><span data-ttu-id="ce357-177">一个布尔值，如果集合是只读的，则为 <see langword="true" />；如果集合是可修改的，则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="ce357-177">A Boolean value that is <see langword="true" /> if the collection is read-only and <see langword="false" /> of the collection can be modified.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="ce357-178">此集合始终为读/写；可以添加、移除和修改参数。</span><span class="sxs-lookup"><span data-stu-id="ce357-178">This collection is always read/write; parameters can be added, removed, and modified.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;System.Data.Objects.ObjectParameter&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;System.Data.Objects.ObjectParameter&gt; IEnumerable&lt;ObjectParameter&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;class System.Data.Objects.ObjectParameter&gt; System.Collections.Generic.IEnumerable&lt;System.Data.Objects.ObjectParameter&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#IEnumerable&lt;System#Data#Objects#ObjectParameter&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of ObjectParameter) Implements IEnumerable(Of ObjectParameter).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;System::Data::Objects::ObjectParameter ^&gt; ^ System.Collections.Generic.IEnumerable&lt;System.Data.Objects.ObjectParameter&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;System::Data::Objects::ObjectParameter ^&gt;::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.Generic.IEnumerable&lt;System.Data.Objects.ObjectParameter&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Data.Objects.ObjectParameter&gt;&#xA;override this.System.Collections.Generic.IEnumerable&lt;System.Data.Objects.ObjectParameter&gt;.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;System.Data.Objects.ObjectParameter&gt;" Usage="objectParameterCollection.System.Collections.Generic.IEnumerable&lt;System.Data.Objects.ObjectParameter&gt;.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Data.Objects.ObjectParameter&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ce357-179">返回集合上的类型化枚举器。</span><span class="sxs-lookup"><span data-stu-id="ce357-179">Returns a typed enumerator over the collection.</span></span></summary>
        <returns><span data-ttu-id="ce357-180">类型为 <see cref="T:System.Collections.Generic.IEnumerator`1" /> 的 <see cref="T:System.Data.Objects.ObjectParameter" />。</span><span class="sxs-lookup"><span data-stu-id="ce357-180">An <see cref="T:System.Collections.Generic.IEnumerator`1" /> of type <see cref="T:System.Data.Objects.ObjectParameter" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="ce357-181">返回一个 <xref:System.Collections.Generic.IEnumerator%601> 实例。</span><span class="sxs-lookup"><span data-stu-id="ce357-181">Returns an <xref:System.Collections.Generic.IEnumerator%601> instance.</span></span> <span data-ttu-id="ce357-182">这样可以循环访问或遍历集合。</span><span class="sxs-lookup"><span data-stu-id="ce357-182">This allows the collection to be iterated through and traversed.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberSignature Language="F#" Value="abstract member System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.System.Collections.IEnumerable.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="objectParameterCollection.System.Collections.IEnumerable.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Entity</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="ce357-183">返回集合上的非类型化枚举器。</span><span class="sxs-lookup"><span data-stu-id="ce357-183">Returns an untyped enumerator over the collection.</span></span></summary>
        <returns><span data-ttu-id="ce357-184">一个 <see cref="T:System.Collections.IEnumerator" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="ce357-184">An <see cref="T:System.Collections.IEnumerator" /> instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks
 <span data-ttu-id="ce357-185">返回集合上的非类型化枚举器。</span><span class="sxs-lookup"><span data-stu-id="ce357-185">Returns an untyped enumerator over the collection.</span></span> <span data-ttu-id="ce357-186">这样可以循环访问或遍历集合。</span><span class="sxs-lookup"><span data-stu-id="ce357-186">This allows the collection to be iterated through and traversed.</span></span>

 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
