<Type Name="IQueryAmbient" FullName="System.Windows.Markup.IQueryAmbient">
  <Metadata><Meta Name="ms.openlocfilehash" Value="78732f2b7abbe05d954732b1cec29dd42e3a312f" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="82424723" /></Metadata><TypeSignature Language="C#" Value="public interface IQueryAmbient" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryAmbient" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.IQueryAmbient" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryAmbient" />
  <TypeSignature Language="C++ CLI" Value="public interface class IQueryAmbient" />
  <TypeSignature Language="F#" Value="type IQueryAmbient = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>查询是否应将指定的属性视为当前范围中的环境属性。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 环境属性机制的用途是通过通知 XAML 对象编写器避免实例化某些对象，从而提高分析时间，这是因为已知这些对象适用于暂时的值，而对典型的运行时应用程序并不有用。 通常，属性 get 访问器的 XAML 查找或 XAML 处理需要实例化此类对象，以使用随时可用的值填充对象图表示形式。  
  
 <xref:System.Windows.Markup.IQueryAmbient>有一个成员： <xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable%2A> 。  
  
 <xref:System.Windows.Markup.IQueryAmbient>是的并行机制 <xref:System.Windows.Markup.AmbientAttribute> 。 <xref:System.Windows.Markup.IQueryAmbient>是一种专用机制，可避免使用反射来确定信息，还可以操作 situationally （给定的对象可以选择报告 `true` 或 `false` for <xref:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable%2A> ），而属性实质上是静态分析。 <xref:System.Windows.Markup.AmbientAttribute>是 XAML 对象编写器可以使用的常规机制，通常与专用 XAML 类型系统属性 <xref:System.Xaml.XamlMember.IsAmbient%2A> 和关联 <xref:System.Xaml.XamlType.IsAmbient%2A> 。  
  
## <a name="wpf-implementations-of-iqueryambient"></a>IQueryAmbient 的 WPF 实现  
 在 WPF 中， <xref:System.Windows.Markup.IQueryAmbient> 用于资源字典查找过程。 查找进程获取 `Resources` 整个 WPF 逻辑树中的连续值，一直到资源范围的根，直到找到一个键或确定该键不在作用域内。 通常情况下，需要每次实例化一 <xref:System.Windows.ResourceDictionary> 次来接收结果。 将的内容声明 `Resources` 为环境，只要存在，就会 `Resources` 优化此查找过程。 在 WPF 中，此接口在以下情况下实现：  
  
-   <xref:System.Windows.FrameworkElement>实现 <xref:System.Windows.FrameworkElement.System%23Windows%23Markup%23IQueryAmbient%23IsAmbientPropertyAvailable%2A> 以返回 `true` 所有属性名称（如果它包含的现有 <xref:System.Windows.ResourceDictionary> <xref:System.Windows.FrameworkElement.Resources%2A> ），只要查询不是针对 <xref:System.Windows.FrameworkElement.Resources%2A> 属性本身。  
  
-   <xref:System.Windows.Style>为其实现同一模式 <xref:System.Windows.Style.Resources%2A> 。  
  
-   <xref:System.Windows.Application>为其实现同一模式 <xref:System.Windows.Application.Resources%2A> 。  
  
-   <xref:System.Windows.FrameworkContentElement>为其实现同一模式 <xref:System.Windows.FrameworkContentElement.Resources%2A> 。  
  
-   <xref:System.Windows.FrameworkTemplate>为其实现同一模式 <xref:System.Windows.FrameworkTemplate.Resources%2A> 。 它还将 <xref:System.Windows.FrameworkTemplate.Template%2A> 内容报告为环境， `false` 但在查询 <xref:System.Windows.FrameworkTemplate.Template%2A> 自身时返回。  
  
-   在上述每种情况下，相关 `Resources` 属性（和 <xref:System.Windows.FrameworkTemplate.Template%2A> ）的特性为 <xref:System.Windows.Markup.AmbientAttribute> 。 典型的用法是查询属性，这些属性不是 <xref:System.Windows.Markup.AmbientAttribute> 定义接口的对象的特性化属性。 换句话说，只要存在资源字典以便在创建对象图时提供潜在的运行时间值，则除资源字典的属性容器之外的任何其他属性都可以被视为环境。  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Xaml.XamlMember.IsAmbient" />
  </Docs>
  <Members>
    <Member MemberName="IsAmbientPropertyAvailable">
      <MemberSignature Language="C#" Value="public bool IsAmbientPropertyAvailable (string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAmbientPropertyAvailable(string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAmbientPropertyAvailable (propertyName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbientPropertyAvailable(System::String ^ propertyName);" />
      <MemberSignature Language="F#" Value="abstract member IsAmbientPropertyAvailable : string -&gt; bool" Usage="iQueryAmbient.IsAmbientPropertyAvailable propertyName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">要检查其环境状态的属性的名称。</param>
        <summary>查询可否将指定的命名属性视为当前范围中的环境属性。</summary>
        <returns>如果所请求的属性可视为环境属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
