<Type Name="MarkupExtension" FullName="System.Windows.Markup.MarkupExtension">
  <Metadata><Meta Name="ms.openlocfilehash" Value="317e2c4b4a911c8dd03dfaaff66a1e3c56916d6e" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89671976" /></Metadata><TypeSignature Language="C#" Value="public abstract class MarkupExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MarkupExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.MarkupExtension" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MarkupExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class MarkupExtension abstract" />
  <TypeSignature Language="F#" Value="type MarkupExtension = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="WindowsBase" FromVersion="5.0.0.0" To="System.Xaml" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="WindowsBase" FromVersion="4.0.0.0" To="System.Xaml" ToVersion="4.0.0.0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>为可以由 .NET Framework XAML 服务及其他 XAML 读取器和 XAML 编写器支持的 XAML 标记扩展实现提供基类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 标记扩展基于 XAML 中字符串属性值或标记元素的输入将对象返回给调用方。 标记扩展以更复杂的方式返回对象，而不是单独的类型转换器。 XAML 对象编写器调用类型转换器，因为类型或成员具有与之关联的类型转换器实现。 从引用的 CLR 框架，这意味着类型或成员是 <xref:System.ComponentModel.TypeConverterAttribute> 特性化的。 从 XAML 类型系统角度来看，这意味着 XAML 类型或 XAML 成员具有其属性的值 `TypeConverter` 。 类型转换器的调用绑定到类型或属性定义，并始终在这些情况下由 XAML 处理调用。 与此相反，标记扩展在控制用户代码和用户生成的标记时更多，可以在应用程序方案要求它时应用。 可以调用标记扩展并将其用于设置不同的类型成员值，前提是标记扩展的返回类型可赋给该值。  
  
 有关创建自定义标记扩展的信息，请参阅 <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> 。 有关常规标记扩展的详细信息，请参阅 [XAML 的标记扩展概述](/dotnet/framework/xaml-services/markup-extensions-for-xaml-overview)。 如果是在 WPF 上生成并使用或创建 XAML 的标记扩展，则可以在主题 [标记扩展和 WPF XAML](/dotnet/framework/wpf/advanced/markup-extensions-and-wpf-xaml)中找到其他相关信息。  
  
 <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A>每个标记扩展实现的方法可以 <xref:System.IServiceProvider> 在运行时使用来提供上下文。 <xref:System.IServiceProvider>然后，针对传递信息的特定服务（如或）查询此信息 <xref:System.Windows.Markup.IProvideValueTarget> <xref:System.Windows.Markup.IXamlTypeResolver> 。 有关标记扩展的服务上下文的详细信息，请参阅 [可供类型转换器和标记扩展使用的服务上下文](/dotnet/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions)。  
  
 派生类应使用进行特性化， <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> 以便向使用者通知标记扩展的实现中可用的最特定返回类型 <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> 。  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/db07a952-05ce-4aa4-b6f9-aac7397d0326">XAML 的类型转换器或标记扩展</related>
    <related type="Article" href="https://msdn.microsoft.com/library/261b2b11-2dc0-462f-8c66-55b8c9c6e436">XAML 的标记扩展概述</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MarkupExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.MarkupExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MarkupExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化从 <see cref="T:System.Windows.Markup.MarkupExtension" /> 派生的类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.MarkupExtension>抽象类不包含任何需要初始化的私有值。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>功能标记扩展应定义自己的公共无参数构造函数。 此外，标记扩展应实现适用于扩展的预期功能和标记用法的构造函数。 有关详细信息，请参阅 [XAML 的标记扩展概述](/dotnet/framework/xaml-services/markup-extensions-for-xaml-overview)。</para></block>
      </Docs>
    </Member>
    <Member MemberName="ProvideValue">
      <MemberSignature Language="C#" Value="public abstract object ProvideValue (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ProvideValue(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ProvideValue (serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ ProvideValue(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="abstract member ProvideValue : IServiceProvider -&gt; obj" Usage="markupExtension.ProvideValue serviceProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">可为标记扩展提供服务的服务提供程序帮助程序。</param>
        <summary>当在派生类中实现时，返回用作此标记扩展的目标属性值的对象。</summary>
        <returns>要在应用了扩展的属性上设置的对象值。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 当 XAML 处理器处理作为标记扩展的类型节点和成员值时，它将调用 <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> 该标记扩展的方法并将结果写入对象图或序列化流。 XAML 对象编写器通过参数将服务上下文传递给每个此类实现 `serviceProvider` 。  
  
 有关如何 <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A> 在自定义标记扩展中实现的详细信息，请参阅 "对实现者的说明" 部分。  
  
## <a name="wpf-usage-notes"></a>WPF 用法说明  
  
> [!IMPORTANT]
>  与标记集操作具有特定交互的 WPF 类不应依赖于 <xref:System.Windows.Markup.IReceiveMarkupExtension> [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 实现。 <xref:System.Windows.Markup.XamlSetMarkupExtensionAttribute>改用特性化回调。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>通常可用于自定义或现有实现的默认服务提供程序返回的常见服务 <see cref="T:System.Windows.Markup.MarkupExtension" /> 包括以下主要服务。  
  
-   <see cref="T:System.Windows.Markup.IProvideValueTarget" /> 从使用标记扩展的上下文中报告对象引用和属性标识符 
-   <see cref="T:System.Windows.Markup.IXamlTypeResolver" /> 公开一种服务，该服务与可以 <see cref="T:System.Type" /> 基于 XAML 类型名称提供的一般 xaml 对象写入行为等效。 该名称可以有选择性地包含映射的 XAML 命名空间的前缀。  
  
-   <see cref="T:System.Xaml.IXamlSchemaContextProvider" /> 直接公开活动 XAML 架构上下文。 从报告的中 <see cref="T:System.Xaml.XamlSchemaContext" /> ，你可以获取 XAML 架构上下文信息，如如何为类型支持映射程序集、程序集中的首选前缀、程序集中的每个前缀， <see cref="T:System.Xaml.XamlType" /> 等等。  
  
-可用于更专业标记扩展方案的其他服务包括： 
    -   <see cref="T:System.Windows.Markup.IUriContext" />  
  
    -   <see cref="T:System.Xaml.IAmbientProvider" />  
  
    -   <see cref="T:System.Xaml.IDestinationTypeProvider" />  
  
    -   <see cref="T:System.Xaml.IRootObjectProvider" />  
  
    -   <see cref="T:System.Xaml.IXamlNameResolver" />  
  
    -   <see cref="T:System.Xaml.IXamlNamespaceResolver" />  
  
的实现可能 <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> 会忽略 <paramref name="serviceProvider" /> 参数。 这适用于一些基本方案，在这些方案中，不需要任何上下文来返回值。  
  
在典型用法中，.NET Framework XAML 服务和实现的 XAML 对象编写器将为在 XAML 处理过程中调用的所有值转换器方法提供服务提供程序。 然而，为确保可靠性，应为服务提供商本身和任何请求的服务提供空值的代码路径。 如果标记扩展适用于 XAML 处理器基础结构提供的典型服务支持不可用的情况，则可能会出现 Null 值。  
  
有关 XAML 服务提供程序上下文中可用服务的详细信息以及如何使用它们的详细信息，请参阅 [xaml 的类型转换器和标记扩展](/dotnet/framework/xaml-services/type-converters-and-markup-extensions-for-xaml)。  
  
需要特定服务才能生成有用结果的实现 <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> 应在该服务不可用时引发异常。 建议引发的异常为 <see cref="T:System.InvalidOperationException" /> 。  
  
如果自定义标记扩展需要提供值的某个参数为 null、对于其数据类型无效，或者不包含标记扩展能够处理的值，则实现也可能引发异常。 建议引发的异常为 <see cref="T:System.InvalidOperationException" /> 。</para></block>
        <altmember cref="T:System.Windows.Markup.IProvideValueTarget" />
        <altmember cref="T:System.Windows.Markup.IXamlTypeResolver" />
        <related type="Article" href="https://msdn.microsoft.com/library/db07a952-05ce-4aa4-b6f9-aac7397d0326">XAML 的类型转换器或标记扩展</related>
        <related type="Article" href="https://msdn.microsoft.com/library/261b2b11-2dc0-462f-8c66-55b8c9c6e436">XAML 的标记扩展概述</related>
      </Docs>
    </Member>
  </Members>
</Type>
