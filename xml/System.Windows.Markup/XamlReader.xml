<Type Name="XamlReader" FullName="System.Windows.Markup.XamlReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a6e39de22cbd950174fd768dfc999afb5287cd9f" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="86327351" /></Metadata><TypeSignature Language="C#" Value="public class XamlReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlReader extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader" />
  <TypeSignature Language="F#" Value="type XamlReader = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="4c37e-101">使用 WPF 默认 XAML 读取器和关联的 XAML 对象编写器读取 XAML 输入并创建对象图。</span><span class="sxs-lookup"><span data-stu-id="4c37e-101">Reads XAML input and creates an object graph, using the WPF default XAML reader and an associated XAML object writer.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c37e-102">同步 <xref:System.Windows.Markup.XamlReader.Load%2A> 方法是静态的，但异步 <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> 方法不是静态的，需要类的实例 <xref:System.Windows.Markup.XamlReader> 才能使用。</span><span class="sxs-lookup"><span data-stu-id="4c37e-102">The synchronous <xref:System.Windows.Markup.XamlReader.Load%2A> methods are static, but the asynchronous <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> methods are not static and require an instance of the <xref:System.Windows.Markup.XamlReader> class to use.</span></span>  
  
 <span data-ttu-id="4c37e-103">方法的输出 `Load` 是一个对象，它表示已创建的对象树或对象关系图的根对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-103">The output of the `Load` methods is a single object, which represents the root object of a created object tree or object graph.</span></span> <span data-ttu-id="4c37e-104">创建的对象图 <xref:System.Windows.Markup.XamlReader> 通常会在运行时添加到 WPF 应用程序的现有对象树中。</span><span class="sxs-lookup"><span data-stu-id="4c37e-104">Object graphs that are created by <xref:System.Windows.Markup.XamlReader> are typically added to the existing object tree of a WPF application at run time.</span></span> <span data-ttu-id="4c37e-105">否则，在 WPF 应用程序模型中，新的对象图被视为已断开连接。</span><span class="sxs-lookup"><span data-stu-id="4c37e-105">Otherwise the new object graph is considered disconnected for purposes of the WPF application model.</span></span> <span data-ttu-id="4c37e-106">这意味着，它不会呈现，并且不能使用任何对象树技术来访问该应用于 WPF 应用程序的主对象树 (例如，Api <xref:System.Windows.FrameworkElement.FindName%2A> 、 <xref:System.Windows.LogicalTreeHelper> <xref:System.Windows.Media.VisualTreeHelper>) 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-106">This means that it does not render, and cannot be accessed using any of the object tree techniques as applied to the WPF application's main object tree (for example, the APIs <xref:System.Windows.FrameworkElement.FindName%2A>, <xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>).</span></span> <span data-ttu-id="4c37e-107">有关对象树概念的详细信息，请参阅 [WPF 中的树](/dotnet/framework/wpf/advanced/trees-in-wpf)。</span><span class="sxs-lookup"><span data-stu-id="4c37e-107">For more information on object tree concepts, see [Trees in WPF](/dotnet/framework/wpf/advanced/trees-in-wpf).</span></span>  
  
 <span data-ttu-id="4c37e-108"><xref:System.Windows.Markup.XamlReader> 支持以下主要方案：</span><span class="sxs-lookup"><span data-stu-id="4c37e-108"><xref:System.Windows.Markup.XamlReader> supports the following primary scenarios:</span></span>  
  
-   <span data-ttu-id="4c37e-109">**克隆/对象工厂**：没有其他机制，引用类型通常不能包含在 WPF 对象树中的多个位置中。</span><span class="sxs-lookup"><span data-stu-id="4c37e-109">**Cloning/object factory**: Without additional mechanisms, a reference type generally cannot be included in more than one position in a WPF object tree.</span></span> <span data-ttu-id="4c37e-110"> (提供对在 WPF 中共享或重复使用的附加机制的示例包括基于的对象 <xref:System.Windows.Freezable> ，或支持通常可共享的对象（例如）， <xref:System.Windows.Media.Brush> 这些对象将作为中的项进行引用 <xref:System.Windows.ResourceDictionary> 。 ) 克隆对象树中已存在的对象的一种方法是使用序列化对象 <xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=nameWithType> 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-110">(Examples of additional mechanisms that offer support for sharing or re-use in WPF include objects that are based on <xref:System.Windows.Freezable>, or support for commonly shareable objects such as <xref:System.Windows.Media.Brush> that are referenced as an item from a <xref:System.Windows.ResourceDictionary>.) One way to clone an object that is already in the object tree is to serialize the object using <xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="4c37e-111">然后使用序列化的字符串作为对的调用的输入 <xref:System.Windows.Markup.XamlReader.Load%2A> ，使用流或 <xref:System.Xml.XmlReader> 作为中介。</span><span class="sxs-lookup"><span data-stu-id="4c37e-111">You then use the serialized string as input for a call to <xref:System.Windows.Markup.XamlReader.Load%2A>, with a stream or <xref:System.Xml.XmlReader> as an intermediary.</span></span>  
  
-   <span data-ttu-id="4c37e-112">**基于实时信息构造对象**：通常还有其他方法可以让后期绑定或用户提供的输入更改现有对象的状态。</span><span class="sxs-lookup"><span data-stu-id="4c37e-112">**Constructing objects based on just-in-time information**: There are often other ways to have late-binding or user-supplied input change the state of existing objects.</span></span> <span data-ttu-id="4c37e-113">例如，可以使用相同的值设置多个属性，或使用数据绑定。</span><span class="sxs-lookup"><span data-stu-id="4c37e-113">For example you could use the same value to set more than one property, or use data binding.</span></span> <span data-ttu-id="4c37e-114">但如果你有这样一种方案，即使要创建的对象类型只在运行时是可在运行时或与用户交互的情况下才可进行，那么通过构建输入字符串来创建此类对象 <xref:System.Windows.Markup.XamlReader.Load%2A> 通常是一项有用的技术。</span><span class="sxs-lookup"><span data-stu-id="4c37e-114">But if you have a scenario where even the type of object to create is only determinable at run time or with user interaction, then creating such an object by building up a string for <xref:System.Windows.Markup.XamlReader.Load%2A> input is often a useful technique.</span></span>  
  
-   <span data-ttu-id="4c37e-115">**使用现有的资源技术**： <xref:System.IO.Stream> 类型经常用在其他框架或技术中，用于跨应用程序边界传输数据或对象，也可用于类似情况。</span><span class="sxs-lookup"><span data-stu-id="4c37e-115">**Using existing resource techniques**: The <xref:System.IO.Stream> type is used frequently in other frameworks or technologies for transferring data or objects across application boundaries or for similar situations.</span></span> <span data-ttu-id="4c37e-116">然后，你可以使用这些 <xref:System.IO.Stream> 技术来存储或获取 XAML 格式的数据，最终将这些数据用于创建作为应用程序一部分的对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-116">You can then use the <xref:System.IO.Stream> techniques to store or obtain XAML-formatted data that you eventually use to create an object as part of your application.</span></span>  
  
-   <span data-ttu-id="4c37e-117">**固定文档：** 您的应用程序可能会加载本地或下载的 XPS 文档，以将其包含在 WPF 应用程序对象树和 UI 中。</span><span class="sxs-lookup"><span data-stu-id="4c37e-117">**Fixed documents:** Your application might load local or downloaded XPS documents for inclusion in a WPF application object tree and UI.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4c37e-118">此文档有时描述对象图，而不是对象树。</span><span class="sxs-lookup"><span data-stu-id="4c37e-118">This documentation sometimes describes an object graph, as opposed to an object tree.</span></span> <span data-ttu-id="4c37e-119">在运行时 WPF 应用程序的运行时对象关系中并不总是存在严格的父子关系，因此，对象图是更广泛适用的术语。</span><span class="sxs-lookup"><span data-stu-id="4c37e-119">A strict parent-child relationship does not always exist in the run time object relationships of a run time WPF application, so an object graph is a more widely applicable terminology.</span></span> <span data-ttu-id="4c37e-120">但是，因为 WPF 还包括两个不同的概念化 Api (<xref:System.Windows.LogicalTreeHelper> ， <xref:System.Windows.Media.VisualTreeHelper>) 树比喻仍适用于 WPF 中的大多数真实情况。</span><span class="sxs-lookup"><span data-stu-id="4c37e-120">However, because WPF also includes two different tree conceptualization APIs (<xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>) the tree metaphor still applies adequately to most real-world cases in WPF.</span></span> <span data-ttu-id="4c37e-121">但从 XAML 语言角度来看，对象图通常是考虑如何从 XAML 创建对象的最佳方法，因为 XAML 语言本身并不一定指定帮助器类方法，这会将关系更多地引入树结构。</span><span class="sxs-lookup"><span data-stu-id="4c37e-121">From the XAML language perspective however, the object graph is often the best way to think about how objects are created out of XAML, because the XAML language itself does not necessarily specify helper class methodologies that bring the relationships more into a tree structure again.</span></span>  
  
## <a name="code-access-security-loose-xaml-and-xamlreader"></a><span data-ttu-id="4c37e-122">代码访问安全性、松散 XAML 和 XamlReader</span><span class="sxs-lookup"><span data-stu-id="4c37e-122">Code Access Security, Loose XAML, and XamlReader</span></span>  
 <span data-ttu-id="4c37e-123">XAML 是一种直接表示对象实例化和执行的标记语言。</span><span class="sxs-lookup"><span data-stu-id="4c37e-123">XAML is a markup language that directly represents object instantiation and execution.</span></span> <span data-ttu-id="4c37e-124">因此，在 XAML 中创建的元素能够像等效的生成代码那样与系统资源（如网络访问、文件系统 IO）进行交互。</span><span class="sxs-lookup"><span data-stu-id="4c37e-124">Therefore, elements created in XAML have the same ability to interact with system resources (network access, file system IO, for example) as the equivalent generated code does.</span></span>  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="4c37e-125">支持 [!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)] 安全框架 [!INCLUDE[TLA#tla_cas](~/includes/tlasharptla-cas-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-125">supports the [!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)] security framework [!INCLUDE[TLA#tla_cas](~/includes/tlasharptla-cas-md.md)].</span></span> <span data-ttu-id="4c37e-126">这意味着在 Internet 区域中运行的 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 内容具有缩减的执行权限。</span><span class="sxs-lookup"><span data-stu-id="4c37e-126">This means that [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] content running in the internet zone has reduced execution permissions.</span></span> <span data-ttu-id="4c37e-127">“宽松型 XAML”（由 XAML 查看器在加载时解释的非编译 XAML 的页面）和 [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)] 通常在此 Internet 区域中运行，并且使用相同的权限集。</span><span class="sxs-lookup"><span data-stu-id="4c37e-127">"Loose XAML" (pages of noncompiled XAML interpreted at load time by a XAML viewer) and [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)] are usually run in this internet zone and use the same permission set.</span></span>  <span data-ttu-id="4c37e-128">但是，加载到完全受信任的应用程序中的 XAML 与承载应用程序具有相同的系统资源访问权限。</span><span class="sxs-lookup"><span data-stu-id="4c37e-128">However, XAML loaded in to a fully trusted application has the same access to the system resources as the hosting application does.</span></span> <span data-ttu-id="4c37e-129">有关详细信息，请参阅 [WPF 部分信任安全性](/dotnet/framework/wpf/wpf-partial-trust-security)。</span><span class="sxs-lookup"><span data-stu-id="4c37e-129">For more information, see [WPF Partial Trust Security](/dotnet/framework/wpf/wpf-partial-trust-security).</span></span>  
  
 <span data-ttu-id="4c37e-130">这些语句的含义在于， <xref:System.Windows.Markup.XamlReader> 你的应用程序设计必须对你决定加载的 XAML 做出信任决策。</span><span class="sxs-lookup"><span data-stu-id="4c37e-130">The implications of these statements for <xref:System.Windows.Markup.XamlReader> is that your application design must make trust decisions about the XAML you decide to load.</span></span> <span data-ttu-id="4c37e-131">如果要加载不受信任的 XAML，请考虑为如何加载生成的对象图实现自己的沙盒技术。</span><span class="sxs-lookup"><span data-stu-id="4c37e-131">If you are loading XAML that is not trusted, consider implementing your own sandboxing technique for how you load the resulting object graph.</span></span>  
  
 <span data-ttu-id="4c37e-132"><xref:System.Windows.Markup.XamlReader> 还可以由部分信任代码调用。</span><span class="sxs-lookup"><span data-stu-id="4c37e-132"><xref:System.Windows.Markup.XamlReader> can also be called by partial trust code.</span></span> <span data-ttu-id="4c37e-133">在这种情况下，会对代码访问安全性应用 Internet 安全区域。</span><span class="sxs-lookup"><span data-stu-id="4c37e-133">In this case, Internet security zone is applied for code access security.</span></span> <span data-ttu-id="4c37e-134">如果加载的 XAML 中的任何内容在 Internet 安全区域下无效，则会引发 XAML 分析异常。</span><span class="sxs-lookup"><span data-stu-id="4c37e-134">If anything in the loaded XAML is invalid under Internet security zone, a XAML parse exception is thrown.</span></span> <span data-ttu-id="4c37e-135">在 XBAP 和平台级别的部分信任的其他情况下（其中 <xref:System.Windows.Markup.XamlReader> 是执行过程的一部分），你将获得与显式部分信任调用相同的异常行为。</span><span class="sxs-lookup"><span data-stu-id="4c37e-135">Under XBAP and other cases that are partial trust at the platform level, where <xref:System.Windows.Markup.XamlReader> is part of the execution, you get the same exception behavior as with explicit partial trust calls.</span></span>  
  
## <a name="wpf-xaml-xaml-readerswriters-and-xaml-language-versioning"></a><span data-ttu-id="4c37e-136">WPF XAML、XAML 读取器/编写器和 XAML 语言版本控制</span><span class="sxs-lookup"><span data-stu-id="4c37e-136">WPF XAML, XAML Readers/Writers, and XAML Language Versioning</span></span>  
 <span data-ttu-id="4c37e-137">XAML2009 包含语言功能，如 [x:Reference](/dotnet/framework/xaml-services/x-reference-markup-extension) 和 [x:FactoryMethod](/dotnet/framework/xaml-services/x-factorymethod-directive)。</span><span class="sxs-lookup"><span data-stu-id="4c37e-137">XAML2009 includes language features such as [x:Reference](/dotnet/framework/xaml-services/x-reference-markup-extension) and [x:FactoryMethod](/dotnet/framework/xaml-services/x-factorymethod-directive).</span></span> <span data-ttu-id="4c37e-138">您可以使用或的 `Load` 签名 `Parse` 来加载使用这些功能的 XAML。</span><span class="sxs-lookup"><span data-stu-id="4c37e-138">You can use signatures of `Load` or `Parse` to load XAML that uses these features.</span></span> <span data-ttu-id="4c37e-139">但是，对于需要进行标记 (编译的 XAML （如 WPF 应用程序中的 **页** 生成操作的 xaml）或包含生成操作) 中的标记编译任务的任何 xaml，不支持这些语言功能。</span><span class="sxs-lookup"><span data-stu-id="4c37e-139">However, those language features are not supported for XAML that needs to be markup compiled (such as XAML for the **Page** build action in a WPF application, or any XAML that involves the markup compile task in the build actions).</span></span>  
  
 <span data-ttu-id="4c37e-140">WPF 类型和 WPF 技术一般支持依赖于访问 WPF 内部的概念。</span><span class="sxs-lookup"><span data-stu-id="4c37e-140">WPF types and the WPF technology in general support concepts that rely on access to WPF internals.</span></span> <span data-ttu-id="4c37e-141">例如，WPF 实现依赖属性的方式依赖于有效的类型成员查找的内部技术。</span><span class="sxs-lookup"><span data-stu-id="4c37e-141">For instance, how WPF implements dependency properties relies on internal techniques for efficient type-member lookup.</span></span> <span data-ttu-id="4c37e-142">对这些内部机制的访问通过 <xref:System.Windows.Markup.XamlWriter> <xref:System.Windows.Markup.XamlReader> 从 <xref:System.Windows.Markup> 命名空间和 PresentationFramework 程序集的和中提供的 XAML 读取和写入 api 启用。</span><span class="sxs-lookup"><span data-stu-id="4c37e-142">Access to these internals is enabled by the XAML reading and writing APIs provided in <xref:System.Windows.Markup.XamlWriter> and <xref:System.Windows.Markup.XamlReader> from the <xref:System.Windows.Markup> namespace and PresentationFramework assembly.</span></span> <span data-ttu-id="4c37e-143">但是，) 基于的 (类的 system.exception 程序集的较低级别 XAML 读取器和 XAML 编写 <xref:System.Xaml.XamlReader?displayProperty=nameWithType> 器 <xref:System.Xaml.XamlWriter?displayProperty=nameWithType> 不能访问 WPF 内部。</span><span class="sxs-lookup"><span data-stu-id="4c37e-143">However, the lower-level XAML readers and XAML writers from the System.Xaml assembly (classes based on <xref:System.Xaml.XamlReader?displayProperty=nameWithType>, <xref:System.Xaml.XamlWriter?displayProperty=nameWithType>) do not have access to the WPF internals.</span></span> <span data-ttu-id="4c37e-144">与任何 WPF 特定的程序集之间没有任何依赖关系。</span><span class="sxs-lookup"><span data-stu-id="4c37e-144">There is no dependency from System.Xaml to any WPF-specific assembly.</span></span> <span data-ttu-id="4c37e-145">如果没有访问 WPF 内部的权限，则 system.exception 读取器和编写器无法正确加载或保存所有 WPF 类型或基于 WPF 类型的类型。</span><span class="sxs-lookup"><span data-stu-id="4c37e-145">Without access to the WPF internals, System.Xaml readers and writers cannot correctly load or save all WPF types, or types based on WPF types.</span></span> <span data-ttu-id="4c37e-146">具体而言，系统 .Xaml 读取器和编写器不理解 WPF 依赖属性的支持属性存储等概念，也不了解 WPF 如何使用样式、资源字典和模板的所有细节。</span><span class="sxs-lookup"><span data-stu-id="4c37e-146">In particular, the System.Xaml readers and writers do not understand concepts such as the WPF dependency property backing property store, or all the specifics of how WPF uses styles, resource dictionaries and templates.</span></span> <span data-ttu-id="4c37e-147">因此，您可以选择执行以下操作：</span><span class="sxs-lookup"><span data-stu-id="4c37e-147">Therefore you have a choice to make:</span></span>  
  
-   <span data-ttu-id="4c37e-148">如果正在加载 WPF 类型，并且/或者以任何方式在 BAML 窗体中使用 XAML，请使用 PresentationFramework XAML 读取器和 XAML 编写器。</span><span class="sxs-lookup"><span data-stu-id="4c37e-148">If you are loading WPF types, and/or you are using XAML in BAML form in any way, use the PresentationFramework XAML readers and XAML writers.</span></span>  
  
-   <span data-ttu-id="4c37e-149">如果不依赖于任何 WPF 类型或 XAML 的 BAML 形式，并且出于特定于该框架的原因而未使用其他特定技术的 XAML 读取器或 XAML 编写器实现，请使用 system.exception XAML 读取器和 XAML 编写器。</span><span class="sxs-lookup"><span data-stu-id="4c37e-149">If you are not relying on any WPF types or the BAML form of XAML, and are not using another specific technology's XAML reader or XAML writer implementation for reasons that are specific to that framework, use the System.Xaml XAML readers and XAML writers.</span></span>  
  
## <a name="systemxaml-backing-implementation-in-net-4"></a><span data-ttu-id="4c37e-150">.NET 4 中的 system.exception 后备实现</span><span class="sxs-lookup"><span data-stu-id="4c37e-150">System.Xaml Backing Implementation in .NET 4</span></span>  
 <span data-ttu-id="4c37e-151"><xref:System.Windows.Markup.XamlReader> 是 WPF 框架级别 XAML 分析器的可调用 API 图面。</span><span class="sxs-lookup"><span data-stu-id="4c37e-151"><xref:System.Windows.Markup.XamlReader> is the callable API surface for the WPF framework-level XAML parser.</span></span> <span data-ttu-id="4c37e-152">对于面向和的 WPF 应用程序，相同的基础 XAML 分析器还会执行运行时 XAML 加载和分析 [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-152">The same underlying XAML parser also performs the run-time XAML loading and parsing for WPF applications that target [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] and [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)].</span></span>  
  
 <span data-ttu-id="4c37e-153">如果目标为 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] ，则外部 API 是相同的，但实现的各个部分都是在 system.exception 程序集中的一般 XAML 实现的基础上生成的 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] ，这可提高分析 XAML 的技术和报告方面的诸多方面。</span><span class="sxs-lookup"><span data-stu-id="4c37e-153">If you are targeting [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], the external API is the same, but parts of the implementation are built on the [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] general XAML implementation in the System.Xaml assembly, which improves many of the technical and reporting aspects of parsing XAML.</span></span> <span data-ttu-id="4c37e-154">目标要求 [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] 将 system.exception 包括为引用，如所报告的异常等实现的详细信息可能来自 system.exception 定义的类型。</span><span class="sxs-lookup"><span data-stu-id="4c37e-154">Targeting [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] necessarily entails including System.Xaml as a reference, and details of implementation such as the exceptions reported may come from System.Xaml defined types.</span></span>  
  
## Examples  
 <span data-ttu-id="4c37e-155">下面的示例使用类将转换为 <xref:System.Windows.Controls.Button> 字符串 <xref:System.Windows.Markup.XamlWriter> 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-155">The following example converts a <xref:System.Windows.Controls.Button> into a string using the <xref:System.Windows.Markup.XamlWriter> class.</span></span>  <span data-ttu-id="4c37e-156">然后， <xref:System.Windows.Controls.Button> 使用类上的静态方法将该字符串重新加载到中 <xref:System.Windows.Markup.XamlReader.Load%2A> <xref:System.Windows.Markup.XamlReader> 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-156">The string is then loaded back into a <xref:System.Windows.Controls.Button> using the static <xref:System.Windows.Markup.XamlReader.Load%2A> method on the <xref:System.Windows.Markup.XamlReader> class.</span></span>  
  
 [!code-csharp[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Markup.XamlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c37e-157">初始化 <see cref="T:System.Windows.Markup.XamlReader" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="4c37e-157">Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlReader" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : unit -&gt; unit" Usage="xamlReader.CancelAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c37e-158">如果有挂起的异步加载操作，则中止当前的异步加载操作。</span><span class="sxs-lookup"><span data-stu-id="4c37e-158">Aborts the current asynchronous load operation, if there is an asynchronous load operation pending.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c37e-159"><xref:System.Windows.Markup.XamlReader.CancelAsync%2A> 是一个异步操作;因此，在中止操作之前可能会发生某些加载。</span><span class="sxs-lookup"><span data-stu-id="4c37e-159"><xref:System.Windows.Markup.XamlReader.CancelAsync%2A> is an asynchronous operation; therefore, some loading may occur before the operation is aborted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWpfSchemaContext">
      <MemberSignature Language="C#" Value="public static System.Xaml.XamlSchemaContext GetWpfSchemaContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xaml.XamlSchemaContext GetWpfSchemaContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.GetWpfSchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetWpfSchemaContext () As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xaml::XamlSchemaContext ^ GetWpfSchemaContext();" />
      <MemberSignature Language="F#" Value="static member GetWpfSchemaContext : unit -&gt; System.Xaml.XamlSchemaContext" Usage="System.Windows.Markup.XamlReader.GetWpfSchemaContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4c37e-160">返回一个 <see cref="T:System.Xaml.XamlSchemaContext" /> 对象，该对象表示 <see cref="T:System.Windows.Markup.XamlReader" /> 的 WPF 架构上下文设置。</span><span class="sxs-lookup"><span data-stu-id="4c37e-160">Returns a <see cref="T:System.Xaml.XamlSchemaContext" /> object that represents the WPF schema context settings for a <see cref="T:System.Windows.Markup.XamlReader" />.</span></span></summary>
        <returns><span data-ttu-id="4c37e-161">一个 <see cref="T:System.Xaml.XamlSchemaContext" /> 对象，该对象表示 <see cref="T:System.Windows.Markup.XamlReader" /> 的 WPF 架构上下文设置。</span><span class="sxs-lookup"><span data-stu-id="4c37e-161">A <see cref="T:System.Xaml.XamlSchemaContext" /> object that represents the WPF schema context settings for a <see cref="T:System.Windows.Markup.XamlReader" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4c37e-162">读取 XAML 输入，并返回相应对象树的根。</span><span class="sxs-lookup"><span data-stu-id="4c37e-162">Reads XAML input and returns the root of the corresponding object tree.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (stream As Stream) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="4c37e-163">要加载的 XAML，以流形式表示。</span><span class="sxs-lookup"><span data-stu-id="4c37e-163">The XAML to load, in stream form.</span></span></param>
        <summary><span data-ttu-id="4c37e-164">读取指定 <see cref="T:System.IO.Stream" /> 中的 XAML 输入，并返回作为相应对象树根的 <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="4c37e-164">Reads the XAML input in the specified <see cref="T:System.IO.Stream" /> and returns an <see cref="T:System.Object" /> that is the root of the corresponding object tree.</span></span></summary>
        <returns><span data-ttu-id="4c37e-165">所创建的对象树根处的对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-165">The object at the root of the created object tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4c37e-166">下面的示例 <xref:System.Windows.Controls.Button> 使用类将保存到 <xref:System.IO.MemoryStream> <xref:System.Windows.Markup.XamlWriter> 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-166">The following example saves a <xref:System.Windows.Controls.Button> into a <xref:System.IO.MemoryStream> using the <xref:System.Windows.Markup.XamlWriter> class.</span></span> <span data-ttu-id="4c37e-167">然后， <xref:System.Windows.Controls.Button> 使用类上的静态方法将流重新加载到中 <xref:System.Windows.Markup.XamlReader.Load%2A> <xref:System.Windows.Markup.XamlReader> 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-167">The stream is then loaded back into a <xref:System.Windows.Controls.Button> using the static <xref:System.Windows.Markup.XamlReader.Load%2A> method on the <xref:System.Windows.Markup.XamlReader> class.</span></span>  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4c37e-168"><paramref name="stream" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4c37e-168"><paramref name="stream" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XamlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xaml.XamlReader -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xaml.XamlReader" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="4c37e-169"><see cref="T:System.Xaml.XamlReader" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-169">A <see cref="T:System.Xaml.XamlReader" /> object.</span></span> <span data-ttu-id="4c37e-170">应使用输入 XAML 初始化此对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-170">This is expected to be initialized with input XAML.</span></span></param>
        <summary><span data-ttu-id="4c37e-171">通过所提供的 <see cref="T:System.Xaml.XamlReader" /> 读取 XAML 输入，并返回作为相应对象树根的对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-171">Reads the XAML input through a provided <see cref="T:System.Xaml.XamlReader" /> and returns an object that is the root of the corresponding object tree.</span></span></summary>
        <returns><span data-ttu-id="4c37e-172">已创建的对象树的根对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-172">The object that is the root of the created object tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c37e-173">输入 <xref:System.Xaml.XamlReader> 可以为 <xref:System.Windows.Baml2006.Baml2006Reader> 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-173">The input <xref:System.Xaml.XamlReader> can be <xref:System.Windows.Baml2006.Baml2006Reader>.</span></span> <span data-ttu-id="4c37e-174">这是你可以在运行时加载 BAML 或用于本地化工具的方式。</span><span class="sxs-lookup"><span data-stu-id="4c37e-174">This is how you can load BAML at run time, or for localization tool purposes.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4c37e-175"><paramref name="reader" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4c37e-175"><paramref name="reader" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="4c37e-176">已经以 XML 形式加载了要加载的 XAML 输入的 <see cref="T:System.Xml.XmlReader" />。</span><span class="sxs-lookup"><span data-stu-id="4c37e-176">The <see cref="T:System.Xml.XmlReader" /> that has already loaded the XAML input to load in XML form.</span></span></param>
        <summary><span data-ttu-id="4c37e-177">读取指定 <see cref="T:System.Xml.XmlReader" /> 中的 XAML 输入，并返回作为相应对象树根的对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-177">Reads the XAML input in the specified <see cref="T:System.Xml.XmlReader" /> and returns an object that is the root of the corresponding object tree.</span></span></summary>
        <returns><span data-ttu-id="4c37e-178">已创建的对象树的根对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-178">The object that is the root of the created object tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4c37e-179">下面的示例使用类将转换为 <xref:System.Windows.Controls.Button> 字符串 <xref:System.Windows.Markup.XamlWriter> 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-179">The following example converts a <xref:System.Windows.Controls.Button> into a string using the <xref:System.Windows.Markup.XamlWriter> class.</span></span>  <span data-ttu-id="4c37e-180">然后， <xref:System.Windows.Controls.Button> 使用类上的静态方法将该字符串重新加载到中 <xref:System.Windows.Markup.XamlReader.Load%2A> <xref:System.Windows.Markup.XamlReader> 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-180">The string is then loaded back into a <xref:System.Windows.Controls.Button> using the static <xref:System.Windows.Markup.XamlReader.Load%2A> method on the <xref:System.Windows.Markup.XamlReader> class.</span></span>  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4c37e-181"><paramref name="reader" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4c37e-181"><paramref name="reader" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream, bool useRestrictiveXamlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (stream As Stream, useRestrictiveXamlReader As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream * bool -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load (stream, useRestrictiveXamlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="useRestrictiveXamlReader" Type="System.Boolean" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="useRestrictiveXamlReader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (stream As Stream, parserContext As ParserContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream * System.Windows.Markup.ParserContext -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load (stream, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="4c37e-182">包含要加载的 XAML 输入的流。</span><span class="sxs-lookup"><span data-stu-id="4c37e-182">The stream that contains the XAML input to load.</span></span></param>
        <param name="parserContext"><span data-ttu-id="4c37e-183">由分析器使用的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="4c37e-183">Context information used by the parser.</span></span></param>
        <summary><span data-ttu-id="4c37e-184">读取指定 <see cref="T:System.IO.Stream" /> 中的 XAML 输入，并返回作为相应对象树根的对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-184">Reads the XAML input in the specified <see cref="T:System.IO.Stream" /> and returns an object that is the root of the corresponding object tree.</span></span></summary>
        <returns><span data-ttu-id="4c37e-185">已创建的对象树的根对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-185">The object that is the root of the created object tree.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4c37e-186"><paramref name="stream" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4c37e-186"><paramref name="stream" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="4c37e-187">- 或 -</span><span class="sxs-lookup"><span data-stu-id="4c37e-187">-or-</span></span> 
 <span data-ttu-id="4c37e-188"><paramref name="parserContext" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4c37e-188"><paramref name="parserContext" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader reader, bool useRestrictiveXamlReader);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader reader, bool useRestrictiveXamlReader) cil managed" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader,System.Boolean)" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader, useRestrictiveXamlReader As Boolean) As Object" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ reader, bool useRestrictiveXamlReader);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader * bool -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load (reader, useRestrictiveXamlReader)" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="net-5.0">System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="useRestrictiveXamlReader" Type="System.Boolean" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="useRestrictiveXamlReader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext, bool useRestrictiveXamlReader);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext, bool useRestrictiveXamlReader) cil managed" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext,System.Boolean)" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (stream As Stream, parserContext As ParserContext, useRestrictiveXamlReader As Boolean) As Object" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext, bool useRestrictiveXamlReader);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream * System.Windows.Markup.ParserContext * bool -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load (stream, parserContext, useRestrictiveXamlReader)" FrameworkAlternate="net-5.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType FrameworkAlternate="net-5.0">System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="useRestrictiveXamlReader" Type="System.Boolean" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="parserContext">To be added.</param>
        <param name="useRestrictiveXamlReader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadAsync">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4c37e-189">读取 XAML 标记，并返回与指定标记的根对应的对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-189">Reads XAML markup and returns an object that corresponds to the root of the specified markup.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (stream As Stream) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream -&gt; obj" Usage="xamlReader.LoadAsync stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="4c37e-190">包含要加载的 XAML 输入的流。</span><span class="sxs-lookup"><span data-stu-id="4c37e-190">The stream containing the XAML input to load.</span></span></param>
        <summary><span data-ttu-id="4c37e-191">读取指定 <see cref="T:System.IO.Stream" /> 中的 XAML 输入，并返回相应对象树的根。</span><span class="sxs-lookup"><span data-stu-id="4c37e-191">Reads the XAML input in the specified <see cref="T:System.IO.Stream" /> and returns the root of the corresponding object tree.</span></span></summary>
        <returns><span data-ttu-id="4c37e-192">已创建的对象树的根对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-192">The object that is the root of the created object tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c37e-193">异步 XAML 加载操作最初将返回纯根对象的对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-193">An asynchronous XAML load operation will initially return an object that is purely the root object.</span></span> <span data-ttu-id="4c37e-194">XAML 分析会以异步方式继续，并在根下填充任何子对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-194">Asynchronously, XAML parsing then continues, and any child objects are filled in under the root.</span></span> <span data-ttu-id="4c37e-195">这与典型的 WPF XAML 处理行为及其与对象生存期的 WPF 概念的交互相反。</span><span class="sxs-lookup"><span data-stu-id="4c37e-195">This is in contrast to the typical WPF XAML processing behavior and its interaction with WPF concepts of object lifetime.</span></span> <span data-ttu-id="4c37e-196">在典型的 (非异步) 交互中，对象的所有属性（包括所有子集合）都将在返回某个元素并将其报告为已加载之前填充。</span><span class="sxs-lookup"><span data-stu-id="4c37e-196">In the typical (non-async) interaction, all properties of an object including all child collections are filled before returning an element and reporting it as loaded.</span></span> <span data-ttu-id="4c37e-197">该行为等同于创建树的自下而上方法，其中根对象是要变为可用的最后一个对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-197">That behavior equates to a bottom-up methodology for creating the tree where the root object is the last object to become available.</span></span>  
  
 <span data-ttu-id="4c37e-198">通常会将返回的对象分配给 WPF 应用程序的对象树中的某个位置，知道内容仍可能仍在进行填充，并且在整个内容作为 UI 的一部分公开时可能会导致增量布局更新。</span><span class="sxs-lookup"><span data-stu-id="4c37e-198">You typically would assign the returned object to some location in your WPF application's object tree, with the knowledge that content might still be filling in and might cause incremental layout updates if the entire content is exposed as part of the UI.</span></span> <span data-ttu-id="4c37e-199">出于此原因，通常是从 XAML 隔离或虚拟化任何异步加载的对象，并使用应用程序特定的逻辑或应用程序状态在处理时发出通知 <xref:System.Windows.Markup.XamlReader.LoadCompleted> 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-199">For this reason it is typical to isolate or virtualize any asynchronously loaded objects from XAML, and to use application-specific logic or application state to notify when <xref:System.Windows.Markup.XamlReader.LoadCompleted> is handled.</span></span>  
  
 <span data-ttu-id="4c37e-200">为了使 <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> 能够以异步方式加载 xaml 输入，xaml 输入中的根元素必须包含属性和值 `x:SynchronousMode="Async"` 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-200">In order for <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> to load XAML input asynchronously, the root element in the XAML input must contain the attribute and value `x:SynchronousMode="Async"`.</span></span> <span data-ttu-id="4c37e-201">该值被视为区分大小写。</span><span class="sxs-lookup"><span data-stu-id="4c37e-201">The value is treated as case sensitive.</span></span> <span data-ttu-id="4c37e-202">如果 XAML 输入根不包含，则 `x:SynchronousMode="Async"` 不会引发异常，并且调用将作为同步负载处理 (请参阅 <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>) 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-202">If the XAML input root does not contain `x:SynchronousMode="Async"`, no exception is thrown, and the call is processed as a synchronous load (see <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>).</span></span>  
  
 <span data-ttu-id="4c37e-203">一次只能执行一个类的每个实例的异步加载操作 <xref:System.Windows.Markup.XamlReader> 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-203">Only one asynchronous load operation per instance of the <xref:System.Windows.Markup.XamlReader> class can be performed at a time.</span></span>  <span data-ttu-id="4c37e-204">如果尝试对类的同一个实例执行多个异步操作，则 <xref:System.Windows.Markup.XamlReader> <xref:System.InvalidOperationException> 会引发。</span><span class="sxs-lookup"><span data-stu-id="4c37e-204">If more than one asynchronous operation is attempted on the same instance of the <xref:System.Windows.Markup.XamlReader> class an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4c37e-205"><paramref name="stream" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4c37e-205"><paramref name="stream" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4c37e-206">对同一个 <see cref="T:System.Windows.Markup.XamlReader" /> 的多个加载操作用时挂起。</span><span class="sxs-lookup"><span data-stu-id="4c37e-206">Multiple load operations are pending concurrently with the same <see cref="T:System.Windows.Markup.XamlReader" />.</span></span></exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.Xml.XmlReader -&gt; obj" Usage="xamlReader.LoadAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><span data-ttu-id="4c37e-207">已加载/读取了 XAML 输入的现有 <see cref="T:System.Xml.XmlReader" />。</span><span class="sxs-lookup"><span data-stu-id="4c37e-207">An existing  <see cref="T:System.Xml.XmlReader" /> that has already loaded/read the XAML input.</span></span></param>
        <summary><span data-ttu-id="4c37e-208">读取指定 <see cref="T:System.Xml.XmlReader" /> 中的 XAML 输入，并返回相应对象树的根。</span><span class="sxs-lookup"><span data-stu-id="4c37e-208">Reads the XAML input in the specified <see cref="T:System.Xml.XmlReader" /> and returns the root of the corresponding object tree.</span></span></summary>
        <returns><span data-ttu-id="4c37e-209">已创建的对象树的根。</span><span class="sxs-lookup"><span data-stu-id="4c37e-209">The root of the created object tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c37e-210">异步 XAML 加载操作最初将返回纯根对象的对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-210">An asynchronous XAML load operation will initially return an object that is purely the root object.</span></span> <span data-ttu-id="4c37e-211">XAML 分析会以异步方式继续，并在根下填充任何子对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-211">Asynchronously, XAML parsing then continues, and any child objects are filled in under the root.</span></span> <span data-ttu-id="4c37e-212">这与典型的 WPF XAML 处理行为及其与对象生存期的 WPF 概念的交互相反。</span><span class="sxs-lookup"><span data-stu-id="4c37e-212">This is in contrast to the typical WPF XAML processing behavior and its interaction with WPF concepts of object lifetime.</span></span> <span data-ttu-id="4c37e-213">在典型的 (非异步) 交互中，对象的所有属性（包括所有子集合）都将在返回某个元素并将其报告为已加载之前填充。</span><span class="sxs-lookup"><span data-stu-id="4c37e-213">In the typical (non-async) interaction, all properties of an object including all child collections are filled before returning an element and reporting it as loaded.</span></span> <span data-ttu-id="4c37e-214">该行为等同于创建树的自下而上方法，其中根对象是要变为可用的最后一个对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-214">That behavior equates to a bottom-up methodology for creating the tree where the root object is the last object to become available.</span></span>  
  
 <span data-ttu-id="4c37e-215">通常会将返回的对象分配给 <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> 应用程序的对象树中的某个位置，并知道内容仍可能仍在进行填充，并且在整个内容作为 UI 的一部分公开时可能会导致增量布局更新。</span><span class="sxs-lookup"><span data-stu-id="4c37e-215">You typically would assign the returned object from <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> to some location in your application's object tree, with the knowledge that content might still be filling in and might cause incremental layout updates if the entire content is exposed as part of the UI.</span></span> <span data-ttu-id="4c37e-216">出于此原因，通常是从 XAML 隔离或虚拟化任何异步加载的对象，并使用应用程序特定的逻辑或应用程序状态在处理时发出通知 <xref:System.Windows.Markup.XamlReader.LoadCompleted> 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-216">For this reason it is typical to isolate or virtualize any asynchronously loaded objects from XAML, and to use application-specific logic or application state to notify when <xref:System.Windows.Markup.XamlReader.LoadCompleted> is handled.</span></span>  
  
 <span data-ttu-id="4c37e-217">为了使 <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> 能够以异步方式加载 xaml 输入，xaml 标记中的根元素必须包含属性和值 `x:SynchronousMode="Async"` 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-217">In order for <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> to load XAML input asynchronously, the root element in the XAML markup must contain the attribute and value `x:SynchronousMode="Async"`.</span></span> <span data-ttu-id="4c37e-218">该值被视为区分大小写。</span><span class="sxs-lookup"><span data-stu-id="4c37e-218">The value is treated as case sensitive.</span></span> <span data-ttu-id="4c37e-219">如果 XAML 标记根不包含，则 `x:SynchronousMode="Async"` 不会引发异常，而是将调用作为同步负载进行处理 (请参阅 <xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>) 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-219">If the XAML markup root does not contain `x:SynchronousMode="Async"`, no exception is thrown, and the call is instead processed as a synchronous load (see <xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>).</span></span>  
  
 <span data-ttu-id="4c37e-220">一次只能执行一个类的每个实例的异步加载操作 <xref:System.Windows.Markup.XamlReader> 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-220">Only one asynchronous load operation per instance of the <xref:System.Windows.Markup.XamlReader> class can be performed at a time.</span></span>  <span data-ttu-id="4c37e-221">如果尝试对类的同一个实例执行多个异步操作，则 <xref:System.Windows.Markup.XamlReader> <xref:System.InvalidOperationException> 会引发。</span><span class="sxs-lookup"><span data-stu-id="4c37e-221">If more than one asynchronous operation is attempted on the same instance of the <xref:System.Windows.Markup.XamlReader> class an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4c37e-222"><paramref name="reader" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4c37e-222"><paramref name="reader" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4c37e-223">对同一个 <see cref="T:System.Windows.Markup.XamlReader" /> 同时执行多个加载操作。</span><span class="sxs-lookup"><span data-stu-id="4c37e-223">Multiple load operations are performed concurrently with the same <see cref="T:System.Windows.Markup.XamlReader" />.</span></span></exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream, bool useRestrictiveXamlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (stream As Stream, useRestrictiveXamlReader As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream * bool -&gt; obj" Usage="xamlReader.LoadAsync (stream, useRestrictiveXamlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="useRestrictiveXamlReader" Type="System.Boolean" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="useRestrictiveXamlReader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (stream As Stream, parserContext As ParserContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream * System.Windows.Markup.ParserContext -&gt; obj" Usage="xamlReader.LoadAsync (stream, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream"><span data-ttu-id="4c37e-224">包含要加载的 XAML 输入的流。</span><span class="sxs-lookup"><span data-stu-id="4c37e-224">A stream containing the XAML input to load.</span></span></param>
        <param name="parserContext"><span data-ttu-id="4c37e-225">由分析器使用的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="4c37e-225">Context information used by the parser.</span></span></param>
        <summary><span data-ttu-id="4c37e-226">读取指定 <see cref="T:System.IO.Stream" /> 中的 XAML 输入，并返回相应对象树的根。</span><span class="sxs-lookup"><span data-stu-id="4c37e-226">Reads the XAML input in the specified <see cref="T:System.IO.Stream" /> and returns the root of the corresponding object tree.</span></span></summary>
        <returns><span data-ttu-id="4c37e-227">已创建的对象树的根。</span><span class="sxs-lookup"><span data-stu-id="4c37e-227">The root of the created object tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c37e-228">异步 XAML 加载操作最初将返回纯根对象的对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-228">An asynchronous XAML load operation will initially return an object that is purely the root object.</span></span> <span data-ttu-id="4c37e-229">XAML 分析会以异步方式继续，并在根下填充任何子对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-229">Asynchronously, XAML parsing then continues, and any child objects are filled in under the root.</span></span> <span data-ttu-id="4c37e-230">这与典型的 WPF XAML 处理行为及其与对象生存期的 WPF 概念的交互相反。</span><span class="sxs-lookup"><span data-stu-id="4c37e-230">This is in contrast to the typical WPF XAML processing behavior and its interaction with WPF concepts of object lifetime.</span></span> <span data-ttu-id="4c37e-231">在典型的 (非异步) 交互中，对象的所有属性（包括所有子集合）都将在返回某个元素并将其报告为已加载之前填充。</span><span class="sxs-lookup"><span data-stu-id="4c37e-231">In the typical (non-async) interaction, all properties of an object including all child collections are filled before returning an element and reporting it as loaded.</span></span> <span data-ttu-id="4c37e-232">该行为等同于创建树的自下而上方法，其中根对象是要变为可用的最后一个对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-232">That behavior equates to a bottom-up methodology for creating the tree where the root object is the last object to become available.</span></span>  
  
 <span data-ttu-id="4c37e-233">通常会将返回的对象分配给应用程序的对象树中的某个位置，知道内容仍可能仍在进行填充，并且在整个内容作为 UI 的一部分公开时可能会导致增量布局更新。</span><span class="sxs-lookup"><span data-stu-id="4c37e-233">You typically would assign the returned object to some location in your application's object tree, with the knowledge that content might still be filling in and might cause incremental layout updates if the entire content is exposed as part of the UI.</span></span> <span data-ttu-id="4c37e-234">出于此原因，通常是从 XAML 隔离或虚拟化任何异步加载的对象，并使用应用程序特定的逻辑或应用程序状态在处理时发出通知 <xref:System.Windows.Markup.XamlReader.LoadCompleted> 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-234">For this reason it is typical to isolate or virtualize any asynchronously loaded objects from XAML, and to use application-specific logic or application state to notify when <xref:System.Windows.Markup.XamlReader.LoadCompleted> is handled.</span></span>  
  
 <span data-ttu-id="4c37e-235">为了使 <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> 能够以异步方式加载标记，XAML 标记中的根元素必须包含属性和值 `x:SynchronousMode="Async"` 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-235">In order for <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> to load markup asynchronously, the root element in the XAML markup must contain the attribute and value `x:SynchronousMode="Async"`.</span></span> <span data-ttu-id="4c37e-236">该值被视为区分大小写。</span><span class="sxs-lookup"><span data-stu-id="4c37e-236">The value is treated as case sensitive.</span></span> <span data-ttu-id="4c37e-237">如果 XAML 标记根不包含，则 `x:SynchronousMode="Async"` 不会引发异常，并且调用将作为同步负载处理 (请参阅 <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>) 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-237">If the XAML markup root does not contain `x:SynchronousMode="Async"`, no exception is thrown, and the call is processed as a synchronous load (see <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>).</span></span>  
  
 <span data-ttu-id="4c37e-238">一次只能执行一个类的每个实例的异步加载操作 <xref:System.Windows.Markup.XamlReader> 。</span><span class="sxs-lookup"><span data-stu-id="4c37e-238">Only one asynchronous load operation per instance of the <xref:System.Windows.Markup.XamlReader> class can be performed at a time.</span></span>  <span data-ttu-id="4c37e-239">如果尝试对类的同一个实例执行多个异步操作，则 <xref:System.Windows.Markup.XamlReader> <xref:System.InvalidOperationException> 会引发。</span><span class="sxs-lookup"><span data-stu-id="4c37e-239">If more than one asynchronous operation is attempted on the same instance of the <xref:System.Windows.Markup.XamlReader> class an <xref:System.InvalidOperationException> is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="4c37e-240"><paramref name="stream" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="4c37e-240"><paramref name="stream" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="4c37e-241">对同一个 <see cref="T:System.Windows.Markup.XamlReader" /> 同时执行多个加载操作。</span><span class="sxs-lookup"><span data-stu-id="4c37e-241">Multiple load operations are performed concurrently with the same <see cref="T:System.Windows.Markup.XamlReader" />.</span></span></exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.Xml.XmlReader reader, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.Xml.XmlReader reader, bool useRestrictiveXamlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (reader As XmlReader, useRestrictiveXamlReader As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::Xml::XmlReader ^ reader, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.Xml.XmlReader * bool -&gt; obj" Usage="xamlReader.LoadAsync (reader, useRestrictiveXamlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="useRestrictiveXamlReader" Type="System.Boolean" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="useRestrictiveXamlReader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext, bool useRestrictiveXamlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (stream As Stream, parserContext As ParserContext, useRestrictiveXamlReader As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream * System.Windows.Markup.ParserContext * bool -&gt; obj" Usage="xamlReader.LoadAsync (stream, parserContext, useRestrictiveXamlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="useRestrictiveXamlReader" Type="System.Boolean" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="stream">To be added.</param>
        <param name="parserContext">To be added.</param>
        <param name="useRestrictiveXamlReader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AsyncCompletedEventHandler LoadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Markup.XamlReader.LoadCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LoadCompleted As AsyncCompletedEventHandler " FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::AsyncCompletedEventHandler ^ LoadCompleted;" />
      <MemberSignature Language="F#" Value="member this.LoadCompleted : System.ComponentModel.AsyncCompletedEventHandler " Usage="member this.LoadCompleted : System.ComponentModel.AsyncCompletedEventHandler " />
      <MemberSignature Language="VB.NET" Value="Public Event LoadCompleted As AsyncCompletedEventHandler " FrameworkAlternate="netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="4c37e-242">在异步加载操作完成时发生。</span><span class="sxs-lookup"><span data-stu-id="4c37e-242">Occurs when an asynchronous load operation completes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c37e-243"><xref:System.Windows.Markup.XamlReader.LoadCompleted> 当异步加载操作中止时，也会引发。</span><span class="sxs-lookup"><span data-stu-id="4c37e-243"><xref:System.Windows.Markup.XamlReader.LoadCompleted> is also raised when an asynchronous load operation aborts.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4c37e-244">读取指定文本字符串中的标记，并返回与指定标记的根对应的对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-244">Reads the markup in the specified text string and returns an object that corresponds to the root of the specified markup.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xamlText As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse xamlText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlText"><span data-ttu-id="4c37e-245">输入 XAML，作为单个文本字符串。</span><span class="sxs-lookup"><span data-stu-id="4c37e-245">The input XAML, as a single text string.</span></span></param>
        <summary><span data-ttu-id="4c37e-246">读取指定文本字符串中的 XAML 输入，并返回与指定标记的根对应的对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-246">Reads the XAML input in the specified text string and returns an object that corresponds to the root of the specified markup.</span></span></summary>
        <returns><span data-ttu-id="4c37e-247">已创建的对象树的根。</span><span class="sxs-lookup"><span data-stu-id="4c37e-247">The root of the created object tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c37e-248">在 <xref:System.Windows.Markup.XamlReader.Load%2A> 从字符串创建流后，实现在内部调用。</span><span class="sxs-lookup"><span data-stu-id="4c37e-248">The implementation calls <xref:System.Windows.Markup.XamlReader.Load%2A> internally after creating a stream from the string.</span></span> <span data-ttu-id="4c37e-249"><xref:System.Windows.Markup.XamlReader.Load%2A>有关其他信息，例如可能的异常，请参阅。</span><span class="sxs-lookup"><span data-stu-id="4c37e-249">See <xref:System.Windows.Markup.XamlReader.Load%2A> for additional information such as possible exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText, bool useRestrictiveXamlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xamlText As String, useRestrictiveXamlReader As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="F#" Value="static member Parse : string * bool -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse (xamlText, useRestrictiveXamlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="useRestrictiveXamlReader" Type="System.Boolean" Index="1" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="xamlText">To be added.</param>
        <param name="useRestrictiveXamlReader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xamlText As String, parserContext As ParserContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Windows.Markup.ParserContext -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse (xamlText, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="xamlText"><span data-ttu-id="4c37e-250">输入 XAML，作为单个文本字符串。</span><span class="sxs-lookup"><span data-stu-id="4c37e-250">The input XAML, as a single text string.</span></span></param>
        <param name="parserContext"><span data-ttu-id="4c37e-251">由分析器使用的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="4c37e-251">Context information used by the parser.</span></span></param>
        <summary><span data-ttu-id="4c37e-252">（使用指定的 <see cref="T:System.Windows.Markup.ParserContext" />）读取指定文本字符串中的 XAML 标记，并返回与指定标记的根对应的对象。</span><span class="sxs-lookup"><span data-stu-id="4c37e-252">Reads the XAML markup in the specified text string (using a specified <see cref="T:System.Windows.Markup.ParserContext" />) and returns an object that corresponds to the root of the specified markup.</span></span></summary>
        <returns><span data-ttu-id="4c37e-253">已创建的对象树的根。</span><span class="sxs-lookup"><span data-stu-id="4c37e-253">The root of the created object tree.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4c37e-254">在 <xref:System.Windows.Markup.XamlReader.Load%2A> 从字符串创建流后，实现在内部调用。</span><span class="sxs-lookup"><span data-stu-id="4c37e-254">The implementation calls <xref:System.Windows.Markup.XamlReader.Load%2A> internally after creating a stream from the string.</span></span> <span data-ttu-id="4c37e-255"><xref:System.Windows.Markup.XamlReader.Load%2A>有关其他信息，例如可能的异常，请参阅。</span><span class="sxs-lookup"><span data-stu-id="4c37e-255">See <xref:System.Windows.Markup.XamlReader.Load%2A> for additional information such as possible exceptions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText, class System.Windows.Markup.ParserContext parserContext, bool useRestrictiveXamlReader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xamlText As String, parserContext As ParserContext, useRestrictiveXamlReader As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText, System::Windows::Markup::ParserContext ^ parserContext, bool useRestrictiveXamlReader);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Windows.Markup.ParserContext * bool -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse (xamlText, parserContext, useRestrictiveXamlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" Index="1" FrameworkAlternate="net-5.0" />
        <Parameter Name="useRestrictiveXamlReader" Type="System.Boolean" Index="2" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="xamlText">To be added.</param>
        <param name="parserContext">To be added.</param>
        <param name="useRestrictiveXamlReader">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
