<Type Name="AmbientAttribute" FullName="System.Windows.Markup.AmbientAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9d1f5dc63c5962096f6d60a38e5f1be49f03f4e7" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102061570" /></Metadata><TypeSignature Language="C#" Value="public sealed class AmbientAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AmbientAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.AmbientAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AmbientAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class AmbientAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type AmbientAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="WindowsBase" FromVersion="5.0.0.0" To="System.Xaml" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="WindowsBase" FromVersion="4.0.0.0" To="System.Xaml" ToVersion="4.0.0.0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.Property, Inherited=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.Property, Inherited=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
      <AttributeName Language="C#">[System.AttributeUsage(System.AttributeTargets.Property, Inherited=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.AttributeUsage(System.AttributeTargets.Property, Inherited=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>指定应将某个属性或类型视为环境。 环境概念涉及 XAML 处理器如何确定成员的类型所有者。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 环境属性是一个属性，当创建对象图时，此值应在分析器上下文中可用，但在此情况下，由于正在创建的直接 XAML 节点的目的，典型的类型成员查找将被挂起。 环境概念有两个主要方案：  
  
-   同一对象的某些其他属性会影响和限定对象属性查找的工作方式。  
  
-   属性表示更大的延迟机制，查找成员值的环境功能会扩展到当前对象中包含的所有对象。  
  
 此特性可应用于具有启用环境属性查找行为的预期容器的特定属性，或可应用于类，以在属性的所有情况下启用环境属性行为。  
  
 <xref:System.Windows.Markup.AmbientAttribute> 还可以应用于 CLR 方法，以支持将 XAML 可附加属性特性化为环境。 这可能是必需的，因为在 CLR 实现中，XAML 附加属性是使用和方法作为访问器模式实现/表示为反射的 `get` `set` 。 不存在到属性的实际 CLR 属性，因此将的使用限制为 <xref:System.AttributeTargets> `Property` 不会启用将可附加成员指定为环境。 对于想要报告为环境的可附加成员，请为 `get` 访问器提供属性。 不应尝试将不是专门支持可附加成员的方法的属性方法。  
  
 在 .NET Framework 的以前版本中，此类存在于 WPF 特定的程序集 WindowsBase 中。 在 .NET Framework 4 中， <xref:System.Windows.Markup.AmbientAttribute> 位于 system.exception 程序集中。 有关详细信息，请参阅 [Types Migrated from WPF to System.Xaml](/dotnet/framework/xaml-services/types-migrated-from-wpf-to-system-xaml)。  
  
 在类型级别应用的环境类型 (类型 <xref:System.Windows.Markup.AmbientAttribute>) 可用于某些 XAML 处理情况，其中属性的类型需要按顺序解析。  
  
## <a name="object-writer-scenarios"></a>对象编写器方案  
 如果要定义 XAML 对象编写器，并且遇到应用的属性、方法或类型 <xref:System.Windows.Markup.AmbientAttribute> ，通常必须访问服务以确定写出对象所需的环境属性查找行为。 有关详细信息，请参阅 <xref:System.Xaml.IAmbientProvider>。  
  
## <a name="value-converters"></a>值转换器  
 类型转换器或标记扩展可能需要了解环境信息才能处理表示间接类型映射的属性，例如通过或不限定的字符串名称指定成员或类型的属性。 在这种情况下， <xref:System.Windows.Markup.AmbientAttribute> 不应直接用于值转换器代码逻辑。 相反，值转换器应依赖于 XAML 编写器处理行为，当调用时，它会将 <xref:System.Xaml.IAmbientProvider> 其服务上下文传入到值转换器方法。  
  
## <a name="wpf-scenarios-for-ambientattribute"></a>AmbientAttribute 的 WPF 方案  
  
-    () 的属性 <xref:System.Windows.Style> <xref:System.Windows.Style.TargetType%2A> 可以限定查找值中属性名称的支持引用所需的必要属性名称查找 <xref:System.Windows.Setter.Property%2A?displayProperty=nameWithType> 。  
  
-   属性中的所有内容 `Resources` () 的项 <xref:System.Windows.ResourceDictionary> 以及模板内容，应能够访问其他对等方作为值。 将整个 `Resources` 属性声明为环境将调用在 WPF XAML 分析器中启用此功能的逻辑。  
  
 <xref:System.Windows.ResourceDictionary>有关在类型级别设置的方案的示例，请参阅 <xref:System.Windows.Markup.AmbientAttribute> 。  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Xaml.XamlMember.IsAmbient" />
    <altmember cref="T:System.Xaml.XamlMember" />
    <altmember cref="T:System.Xaml.IAmbientProvider" />
    <related type="Article" href="/dotnet/desktop-wpf/xaml-services/clr-attributes-with-custom-types-and-libraries">自定义类型和库的 XAML 相关 CLR 特性</related>
    <related type="Article" href="/dotnet/desktop-wpf/xaml-services/define-custom-types">定义与 .NET XAML 服务一起使用的自定义类型</related>
    <related type="Article" href="/dotnet/desktop-wpf/xaml-services/">XAML 服务</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AmbientAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.AmbientAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AmbientAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Markup.AmbientAttribute" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
