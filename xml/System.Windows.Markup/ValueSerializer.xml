<Type Name="ValueSerializer" FullName="System.Windows.Markup.ValueSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f0f2c4a65c825c475081f4131da78103a60aed28" /><Meta Name="ms.sourcegitcommit" Value="9506e50ec7beb4fa30206b9840dc546b035a6600" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/23/2020" /><Meta Name="ms.locfileid" Value="86980676" /></Metadata><TypeSignature Language="C#" Value="public abstract class ValueSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ValueSerializer extends System.Object" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.ValueSerializer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueSerializer abstract" />
  <TypeSignature Language="F#" Value="type ValueSerializer = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract ValueSerializer extends System.Object" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="WindowsBase" FromVersion="4.0.0.0" To="System.Xaml" ToVersion="4.0.0.0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>为从对象表示形式进行序列化定义转换行为的抽象类。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 转换器为序列化返回的字符串必须不太大，并且转换器必须始终为特定值返回相同字符串。  如果从) 派生的类型转换器 (<xref:System.ComponentModel.TypeConverter> 在其字符串输出实现中不满足这些要求 `ConvertTo` ，则 <xref:System.Windows.Markup.ValueSerializer> 必须声明自定义。 要么 <xref:System.Windows.Markup.ValueSerializer> 应满足要求，要么应 <xref:System.Windows.Markup.ValueSerializer> 将 null 与类型相关联。 <xref:System.Windows.Markup.ValueSerializer>通过应用特性与类型相关联 <xref:System.Windows.Markup.ValueSerializerAttribute> 。  
  
 如果为 null，则 <xref:System.Windows.Markup.ValueSerializer> 表示应忽略对象图中的转换到字符串转换的类型转换器。  
  
> [!IMPORTANT]
>  的实现 <xref:System.Windows.Markup.ValueSerializer> 应避免引发异常。 引发的任何异常都可能终止序列化。  
  
 <xref:System.Windows.Markup.IValueSerializerContext>对于 <xref:System.Windows.Markup.ValueSerializer> ，其 api 与 <xref:System.ComponentModel.ITypeDescriptorContext> 适用于 <xref:System.ComponentModel.TypeConverter> 。 事实上， <xref:System.Windows.Markup.IValueSerializerContext> 继承 <xref:System.ComponentModel.ITypeDescriptorContext> 。 <xref:System.Windows.Markup.ValueSerializer>调用派生类 API 时，调用方 (通常是序列化程序进程) 传递可能提供某些服务的上下文。 由于一般的指导， <xref:System.Windows.Markup.ValueSerializer> 不能引发异常。 未能从上下文返回特定服务也必须不会引发任何异常。  
  
 在 .NET Framework 的以前版本中，此类存在于 WPF 特定的程序集 WindowsBase 中。 在中 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ， <xref:System.Windows.Markup.ValueSerializer> 为 system.exception 程序集。 有关详细信息，请参阅 [Types Migrated from WPF to System.Xaml](/dotnet/framework/xaml-services/types-migrated-from-wpf-to-system-xaml)。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlXmlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Markup.ValueSerializer" /> 类的新实例。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此构造函数的主体为空;<xref:System.Windows.Markup.ValueSerializer>类不包含需要初始化的任何值。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFromString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertFromString (value As String, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">要计算以进行转换的字符串。</param>
        <param name="context">用于转换的上下文信息。</param>
        <summary>在派生类中重写时，确定指定的 <see cref="T:System.String" /> 能否转换为 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现所支持类型的实例。</summary>
        <returns>如果该值可以转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此基实现总是返回 `false`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertToString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertToString (value As Object, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">要进行计算以供转换的对象。</param>
        <param name="context">用于转换的上下文信息。</param>
        <summary>在派生类中重写时，确定指定对象是否可以转换为 <see cref="T:System.String" />。</summary>
        <returns><see langword="true" />如果可转换为 <paramref name="value" /> <see cref="T:System.String" /> ，则为; 否则为 <see langword="false" /> 。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此基实现总是返回 `false`。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFromString">
      <MemberSignature Language="C#" Value="public virtual object ConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertFromString (value As String, context As IValueSerializerContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj&#xA;override this.ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj" Usage="valueSerializer.ConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">要转换的字符串。</param>
        <param name="context">用于转换的上下文信息。</param>
        <summary>在派生类中重写时，将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现所支持类型的实例。</summary>
        <returns><see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现基于提供的 <paramref name="value" /> 而支持的类型的新实例。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基实现始终引发异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">无法转换 <paramref name="value" />。</exception>
        <block subset="none" type="overrides"><para>避免从实现中引发异常。 请参阅 <see cref="T:System.Windows.Markup.ValueSerializer" />。</para></block>
      </Docs>
    </Member>
    <Member MemberName="ConvertToString">
      <MemberSignature Language="C#" Value="public virtual string ConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertToString (value As Object, context As IValueSerializerContext) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string&#xA;override this.ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string" Usage="valueSerializer.ConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">要转换为字符串的对象。</param>
        <param name="context">用于转换的上下文信息。</param>
        <summary>在派生类中重写时，将指定对象转换为 <see cref="T:System.String" />。</summary>
        <returns>指定对象的字符串表示形式。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基实现始终引发异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">无法转换 <paramref name="value" />。</exception>
        <block subset="none" type="overrides"><para>避免从实现中引发异常。 请参阅 <see cref="T:System.Windows.Markup.ValueSerializer" />。</para></block>
      </Docs>
    </Member>
    <Member MemberName="GetConvertFromException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertFromException (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertFromException(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertFromException (value As Object) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertFromException(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.GetConvertFromException : obj -&gt; Exception" Usage="valueSerializer.GetConvertFromException value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">无法转换的对象。</param>
        <summary>返回当转换无法执行时所引发的异常。</summary>
        <returns>当 <see langword="ConvertFrom" /> 转换无法执行时引发异常的 <see cref="T:System.Exception" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `throw`此方法不会调用实际关键字，因此典型用法 `throw GetConvertFromException` 与) 提供的参数 (。  
  
 返回的特定异常为 <xref:System.InvalidOperationException> ，并 `value` 传入异常消息。 用法的模式与中的异常实用工具的模式相同 <xref:System.ComponentModel.TypeConverter> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConvertToException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertToException (object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertToException(object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertToException (value As Object, destinationType As Type) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertToException(System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="member this.GetConvertToException : obj * Type -&gt; Exception" Usage="valueSerializer.GetConvertToException (value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">无法转换的对象。</param>
        <param name="destinationType">一个类型，表示转换尝试转换为的类型。</param>
        <summary>返回当转换无法执行时所引发的异常。</summary>
        <returns>当 <see langword="ConvertTo" /> 转换无法执行时引发异常的 <see cref="T:System.Exception" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `throw`此方法不会调用实际关键字，因此典型用法 `throw GetConvertToException` 与 `value`) 提供的参数 (。  
  
 返回的特定异常为 <xref:System.InvalidOperationException> ，并 `value` 传入异常消息。 用法的模式与中的异常实用工具的模式相同 <xref:System.ComponentModel.TypeConverter> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSerializerFor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>获取对象的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor descriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="descriptor">要进行序列化的属性的 CLR 属性描述符。</param>
        <summary>通过传递属性的 CLR 属性描述符，获取为属性声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
        <returns>与指定属性相关联的序列化程序。 可能返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.ValueSerializer>对于属性，或用作属性值的类型的，通过对 <xref:System.Windows.Markup.ValueSerializerAttribute> 属性或类型声明应用特性来指示。 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A>方法是一个实用工具方法，该方法可读取 CLR 类型系统信息并基于属性返回新的 <xref:System.Windows.Markup.ValueSerializer> 类（如果在属性上找到），或者如果在属性的类型上找到，则返回。 `null`如果不存在此类序列化程序，则可能返回。 `null`如果类型或属性有意使用 null 值进行属性化，则也可能会返回 <xref:System.Windows.Markup.ValueSerializerAttribute> 。  
  
 支持的另一种模式 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> 是返回内部 `TypeConverterValueSerializer` 类，这是一个 <xref:System.Windows.Markup.ValueSerializer> 包装并将 <xref:System.ComponentModel.TypeConverter> `Convert` 方法转换为 `Convert*String` 使用类型的输入调用的 (实例的方法， <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> <xref:System.String> 并转换为 <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A> 。 仅在满足以下所有条件的情况下才执行此操作：  
  
-   在 <xref:System.ComponentModel.TypeConverterAttribute> 相关属性或相关属性的类型上找到。  
  
-   指定的 <xref:System.ComponentModel.TypeConverter> 可成功构造。  
  
-   <xref:System.ComponentModel.TypeConverter>返回 `true` <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> ，称为引用 <xref:System.String> 类型。  
  
-   <xref:System.ComponentModel.TypeConverter>返回 `true` <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType> ，称为引用 <xref:System.String> 类型。  
  
-   <xref:System.ComponentModel.TypeConverter>返回 `true` <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType> ，称为引用 <xref:System.String> 类型。  
  
> [!NOTE]
>  下面是一些特殊情况： <xref:System.DateTime> 类型返回 <xref:System.Windows.Markup.DateTimeValueSerializer> ; <xref:System.String> 类型返回内部但函数序列化程序 (`StringValueSerializer`) 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="descriptor" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (type As Type) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">要为其获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的类型。</param>
        <summary>为指定类型获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 声明。</summary>
        <returns>与指定类型相关联的序列化程序。 可能返回 <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.ValueSerializer>通过对类型声明应用特性来指示类型的 <xref:System.Windows.Markup.ValueSerializerAttribute> 。 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A>方法是一个实用工具方法，可读取 CLR 类型系统信息，并根据属性返回新的 <xref:System.Windows.Markup.ValueSerializer> 类（如果在指定的上找到） `type` 。 `null`如果不存在此类序列化程序，则可能返回。 `null`如果类型有意使用 null 值进行属性化，则也可能会返回 <xref:System.Windows.Markup.ValueSerializerAttribute> 。  
  
 支持的另一种模式 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> 是返回内部 `TypeConverterValueSerializer` 类，这是一个 <xref:System.Windows.Markup.ValueSerializer> 包装并将 <xref:System.ComponentModel.TypeConverter> `Convert` 方法转换为 `Convert*String` 使用类型的输入调用的 (实例的方法， <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> <xref:System.String> 并转换为 <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A> 。 仅在满足以下所有条件的情况下才执行此操作：  
  
-   <xref:System.ComponentModel.TypeConverterAttribute>在上找到了 `type` 。  
  
-   指定的 <xref:System.ComponentModel.TypeConverter> 可成功构造。  
  
-   <xref:System.ComponentModel.TypeConverter>返回 `true` <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> ，称为引用 <xref:System.String> 类型。  
  
-   <xref:System.ComponentModel.TypeConverter>返回 `true` <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType> ，称为引用 <xref:System.String> 类型。  
  
-   <xref:System.ComponentModel.TypeConverter>返回 `true` <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType> ，称为引用 <xref:System.String> 类型。  
  
> [!NOTE]
>  下面是一些特殊情况： <xref:System.DateTime> 类型返回 <xref:System.Windows.Markup.DateTimeValueSerializer> ; <xref:System.String> 类型返回内部但函数序列化程序 (`StringValueSerializer`) 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor, context As IValueSerializerContext) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (descriptor, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="descriptor">要进行序列化的属性的描述符。</param>
        <param name="context">用于转换的上下文信息。</param>
        <summary>使用指定上下文获取为指定属性声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
        <returns>与指定属性相关联的序列化程序。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载不依赖于 CLR 类型系统中所报告的属性，而是使用 `context` 作为服务，并调用服务的实现 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> 。 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>实现通常还依赖于 `descriptor` ，但可能实现某些上下文的特殊行为。  
  
 当调用方具有服务的可用时，应调用此方法 <xref:System.Windows.Markup.IValueSerializerContext> 。  这将确保为 <xref:System.Windows.Markup.ValueSerializer> 特定上下文返回正确的。  
  
 如果上下文 `null` 从指定的中返回 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> `descriptor` ，或如果指定的上下文为 `null` ，则行为与调用 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29> 重载相同。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="descriptor" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (type As Type, context As IValueSerializerContext) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (type, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="type">要为其获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的类型。</param>
        <param name="context">用于转换的上下文信息。</param>
        <summary>使用指定的内容，获取为指定类型声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</summary>
        <returns>与指定类型相关联的序列化程序。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此重载不依赖于 CLR 类型系统中所报告的属性，而是使用 `context` 作为服务，并调用服务的实现 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> 。 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>实现通常还依赖于 `type` ，但可能实现某些上下文的特殊行为。  
  
 当调用方具有服务的可用时，应调用此方法 <xref:System.Windows.Markup.IValueSerializerContext> 。 这将确保为 <xref:System.Windows.Markup.ValueSerializer> 特定上下文返回正确的。  
  
 如果上下文 `null` 从指定的中返回 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> `type` ，或如果指定的上下文为 `null` ，则行为与调用 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29> 重载相同。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> 为 <see langword="null" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="TypeReferences">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Type&gt; TypeReferences (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; TypeReferences(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TypeReferences (value As Object, context As IValueSerializerContext) As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ TypeReferences(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;&#xA;override this.TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;" Usage="valueSerializer.TypeReferences (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value">要序列化的值。</param>
        <param name="context">用于转换的上下文信息。</param>
        <summary>获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 引用的类型的枚举。</summary>
        <returns>此序列化程序所转换的类型。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.ValueSerializer>转换应包含在返回的枚举中的任何类型。  这允许序列化程序确保反序列化程序具有此序列化程序所转换的类型的足够信息。  
  
 重写此方法是一种高级方案。 仅当您实现的系统中的 CLR 类型系统所有者属性关系可用于 XAML 架构上下文时，才需要重写。  
  
## <a name="wpf-usage-notes"></a>WPF 用法说明  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]属性系统实现了一个重写的内部值序列化程序， <xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A> 因为某个依赖属性具有可添加所有者的概念。 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]表达式也具有特殊的内部处理。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
