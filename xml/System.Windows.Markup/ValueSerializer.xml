<Type Name="ValueSerializer" FullName="System.Windows.Markup.ValueSerializer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="31830968c6c4484f0f21032d1edccf8ba412bcc8" /><Meta Name="ms.sourcegitcommit" Value="11d168140aa8fade0768c2a9dde3e3bcacfdfb7d" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="05/27/2020" /><Meta Name="ms.locfileid" Value="83922032" /></Metadata><TypeSignature Language="C#" Value="public abstract class ValueSerializer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ValueSerializer extends System.Object" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0;netcore-3.0;netcore-3.1" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.ValueSerializer" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ValueSerializer" />
  <TypeSignature Language="C++ CLI" Value="public ref class ValueSerializer abstract" />
  <TypeSignature Language="F#" Value="type ValueSerializer = class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract ValueSerializer extends System.Object" FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="WindowsBase" FromVersion="5.0.0.0" To="System.Xaml" ToVersion="5.0.0.0" FrameworkAlternate="dotnet-plat-ext-5.0;net-5.0" />
    <TypeForwarding From="WindowsBase" FromVersion="4.0.0.0" To="System.Xaml" ToVersion="4.0.0.0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="02b97-101">为从对象表示形式进行序列化定义转换行为的抽象类。</span><span class="sxs-lookup"><span data-stu-id="02b97-101">Abstract class that defines conversion behavior for serialization from an object representation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02b97-102">转换器为序列化返回的字符串必须不太大，并且转换器必须始终为特定值返回相同字符串。</span><span class="sxs-lookup"><span data-stu-id="02b97-102">The string a converter returns for serialization must be loss-less and the converter must always return the same string for a particular value.</span></span>  <span data-ttu-id="02b97-103">如果类型转换器（派生自 <xref:System.ComponentModel.TypeConverter>）在其字符串输出的 `ConvertTo` 实现中不满足这些要求，则必须声明自定义 <xref:System.Windows.Markup.ValueSerializer>。</span><span class="sxs-lookup"><span data-stu-id="02b97-103">If a type converter (derived from <xref:System.ComponentModel.TypeConverter>) does not meet these requirements in its `ConvertTo` implementations for string output, a custom <xref:System.Windows.Markup.ValueSerializer> must be declared.</span></span> <span data-ttu-id="02b97-104"><xref:System.Windows.Markup.ValueSerializer> 应满足要求，或者应将 null <xref:System.Windows.Markup.ValueSerializer> 与类型相关联。</span><span class="sxs-lookup"><span data-stu-id="02b97-104">Either the <xref:System.Windows.Markup.ValueSerializer> should meet the requirements, or a null <xref:System.Windows.Markup.ValueSerializer> should be associated with the type.</span></span> <span data-ttu-id="02b97-105"><xref:System.Windows.Markup.ValueSerializer> 通过应用 <xref:System.Windows.Markup.ValueSerializerAttribute> 特性与类型相关联。</span><span class="sxs-lookup"><span data-stu-id="02b97-105">A <xref:System.Windows.Markup.ValueSerializer> is associated with a type by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute.</span></span>  
  
 <span data-ttu-id="02b97-106">Null <xref:System.Windows.Markup.ValueSerializer> 指示应忽略对象图中的转换到字符串转换的类型转换器。</span><span class="sxs-lookup"><span data-stu-id="02b97-106">A null <xref:System.Windows.Markup.ValueSerializer> indicates the type converter should be ignored for convert-to-string conversions from the object graph.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="02b97-107"><xref:System.Windows.Markup.ValueSerializer> 的实现应避免引发异常。</span><span class="sxs-lookup"><span data-stu-id="02b97-107">Implementation of <xref:System.Windows.Markup.ValueSerializer> should avoid throwing exceptions.</span></span> <span data-ttu-id="02b97-108">引发的任何异常都可能终止序列化。</span><span class="sxs-lookup"><span data-stu-id="02b97-108">Any exceptions thrown could terminate serialization.</span></span>  
  
 <span data-ttu-id="02b97-109"><xref:System.Windows.Markup.ValueSerializer> 及其 Api <xref:System.Windows.Markup.IValueSerializerContext> 类似于 <xref:System.ComponentModel.TypeConverter>的 <xref:System.ComponentModel.ITypeDescriptorContext>。</span><span class="sxs-lookup"><span data-stu-id="02b97-109"><xref:System.Windows.Markup.IValueSerializerContext> for a <xref:System.Windows.Markup.ValueSerializer> and its APIs is analogous to <xref:System.ComponentModel.ITypeDescriptorContext> for a <xref:System.ComponentModel.TypeConverter>.</span></span> <span data-ttu-id="02b97-110">事实上，<xref:System.Windows.Markup.IValueSerializerContext> 继承 <xref:System.ComponentModel.ITypeDescriptorContext>。</span><span class="sxs-lookup"><span data-stu-id="02b97-110">In fact, <xref:System.Windows.Markup.IValueSerializerContext> inherits <xref:System.ComponentModel.ITypeDescriptorContext>.</span></span> <span data-ttu-id="02b97-111">调用 <xref:System.Windows.Markup.ValueSerializer> 派生类 API 时，调用方（通常是序列化程序进程）将传递可能提供某些服务的上下文。</span><span class="sxs-lookup"><span data-stu-id="02b97-111">When a <xref:System.Windows.Markup.ValueSerializer> derived class API is called, the caller (typically a serializer process) passes a context that may provide certain services.</span></span> <span data-ttu-id="02b97-112">由于 <xref:System.Windows.Markup.ValueSerializer> 不得引发异常的一般指南。</span><span class="sxs-lookup"><span data-stu-id="02b97-112">Because of the general guidance that a <xref:System.Windows.Markup.ValueSerializer> must not throw exceptions.</span></span> <span data-ttu-id="02b97-113">未能从上下文返回特定服务也必须不会引发任何异常。</span><span class="sxs-lookup"><span data-stu-id="02b97-113">Failure to return a particular service from the context must also not throw any exceptions.</span></span>  
  
 <span data-ttu-id="02b97-114">在 .NET Framework 的以前版本中，此类存在于 WPF 特定的程序集 WindowsBase 中。</span><span class="sxs-lookup"><span data-stu-id="02b97-114">In previous versions of the .NET Framework, this class existed in the WPF-specific assembly WindowsBase.</span></span> <span data-ttu-id="02b97-115">在 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]中，<xref:System.Windows.Markup.ValueSerializer> 在 system.exception 程序集中。</span><span class="sxs-lookup"><span data-stu-id="02b97-115">In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.ValueSerializer> is in the System.Xaml assembly.</span></span> <span data-ttu-id="02b97-116">有关详细信息，请参阅 [Types Migrated from WPF to System.Xaml](/dotnet/framework/xaml-services/types-migrated-from-wpf-to-system-xaml)。</span><span class="sxs-lookup"><span data-stu-id="02b97-116">For more information, see [Types Migrated from WPF to System.Xaml](/dotnet/framework/xaml-services/types-migrated-from-wpf-to-system-xaml).</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlXmlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ValueSerializer ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ValueSerializer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="02b97-117">初始化 <see cref="T:System.Windows.Markup.ValueSerializer" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="02b97-117">Initializes a new instance of the <see cref="T:System.Windows.Markup.ValueSerializer" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02b97-118">此构造函数的主体为空;<xref:System.Windows.Markup.ValueSerializer> 类不包含需要初始化的任何值。</span><span class="sxs-lookup"><span data-stu-id="02b97-118">The body of this constructor is empty; the <xref:System.Windows.Markup.ValueSerializer> class does not contain any values that require initialization.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFromString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertFromString (value As String, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="02b97-119">要计算以进行转换的字符串。</span><span class="sxs-lookup"><span data-stu-id="02b97-119">The string to evaluate for conversion.</span></span></param>
        <param name="context"><span data-ttu-id="02b97-120">用于转换的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="02b97-120">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="02b97-121">在派生类中重写时，确定指定的 <see cref="T:System.String" /> 能否转换为 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现所支持类型的实例。</span><span class="sxs-lookup"><span data-stu-id="02b97-121">When overridden in a derived class, determines whether the specified <see cref="T:System.String" /> can be converted to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.</span></span></summary>
        <returns><span data-ttu-id="02b97-122">如果该值可以转换，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="02b97-122"><see langword="true" /> if the value can be converted; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02b97-123">此基实现总是返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="02b97-123">The base implementation always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertToString">
      <MemberSignature Language="C#" Value="public virtual bool CanConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CanConvertToString (value As Object, context As IValueSerializerContext) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CanConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool&#xA;override this.CanConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; bool" Usage="valueSerializer.CanConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="02b97-124">要进行计算以供转换的对象。</span><span class="sxs-lookup"><span data-stu-id="02b97-124">The object to evaluate for conversion.</span></span></param>
        <param name="context"><span data-ttu-id="02b97-125">用于转换的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="02b97-125">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="02b97-126">在派生类中重写时，确定指定对象是否可以转换为 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="02b97-126">When overridden in a derived class, determines whether the specified object can be converted into a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="02b97-127">如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false." />。</span><span class="sxs-lookup"><span data-stu-id="02b97-127"><see langword="true" /> if the <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, <see langword="false." /></span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02b97-128">此基实现总是返回 `false`。</span><span class="sxs-lookup"><span data-stu-id="02b97-128">The base implementation always returns `false`.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertFromString">
      <MemberSignature Language="C#" Value="public virtual object ConvertFromString (string value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ConvertFromString(string value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertFromString (value As String, context As IValueSerializerContext) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ ConvertFromString(System::String ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj&#xA;override this.ConvertFromString : string * System.Windows.Markup.IValueSerializerContext -&gt; obj" Usage="valueSerializer.ConvertFromString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="02b97-129">要转换的字符串。</span><span class="sxs-lookup"><span data-stu-id="02b97-129">The string to convert.</span></span></param>
        <param name="context"><span data-ttu-id="02b97-130">用于转换的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="02b97-130">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="02b97-131">在派生类中重写时，将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现所支持类型的实例。</span><span class="sxs-lookup"><span data-stu-id="02b97-131">When overridden in a derived class, converts a <see cref="T:System.String" /> to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.</span></span></summary>
        <returns><span data-ttu-id="02b97-132"><see cref="T:System.Windows.Markup.ValueSerializer" /> 的实现基于提供的 <paramref name="value" /> 而支持的类型的新实例。</span><span class="sxs-lookup"><span data-stu-id="02b97-132">A new instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports based on the supplied <paramref name="value" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02b97-133">基实现始终引发异常。</span><span class="sxs-lookup"><span data-stu-id="02b97-133">The base implementation always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="02b97-134">无法转换 <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="02b97-134"><paramref name="value" /> cannot be converted.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="02b97-135">避免从实现中引发异常。</span><span class="sxs-lookup"><span data-stu-id="02b97-135">Avoid throwing exceptions from implementations.</span></span> <span data-ttu-id="02b97-136">请参阅 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span><span class="sxs-lookup"><span data-stu-id="02b97-136">See <see cref="T:System.Windows.Markup.ValueSerializer" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="ConvertToString">
      <MemberSignature Language="C#" Value="public virtual string ConvertToString (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ConvertToString(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ConvertToString (value As Object, context As IValueSerializerContext) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ConvertToString(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string&#xA;override this.ConvertToString : obj * System.Windows.Markup.IValueSerializerContext -&gt; string" Usage="valueSerializer.ConvertToString (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="02b97-137">要转换为字符串的对象。</span><span class="sxs-lookup"><span data-stu-id="02b97-137">The object to convert into a string.</span></span></param>
        <param name="context"><span data-ttu-id="02b97-138">用于转换的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="02b97-138">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="02b97-139">在派生类中重写时，将指定对象转换为 <see cref="T:System.String" />。</span><span class="sxs-lookup"><span data-stu-id="02b97-139">When overridden in a derived class, converts the specified object to a <see cref="T:System.String" />.</span></span></summary>
        <returns><span data-ttu-id="02b97-140">指定对象的字符串表示形式。</span><span class="sxs-lookup"><span data-stu-id="02b97-140">A string representation of the specified object.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02b97-141">基实现始终引发异常。</span><span class="sxs-lookup"><span data-stu-id="02b97-141">The base implementation always throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="02b97-142">无法转换 <paramref name="value" />。</span><span class="sxs-lookup"><span data-stu-id="02b97-142"><paramref name="value" /> cannot be converted.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="02b97-143">避免从实现中引发异常。</span><span class="sxs-lookup"><span data-stu-id="02b97-143">Avoid throwing exceptions from implementations.</span></span> <span data-ttu-id="02b97-144">请参阅 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span><span class="sxs-lookup"><span data-stu-id="02b97-144">See <see cref="T:System.Windows.Markup.ValueSerializer" />.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="GetConvertFromException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertFromException (object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertFromException(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertFromException (value As Object) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertFromException(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.GetConvertFromException : obj -&gt; Exception" Usage="valueSerializer.GetConvertFromException value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="02b97-145">无法转换的对象。</span><span class="sxs-lookup"><span data-stu-id="02b97-145">The object that could not be converted.</span></span></param>
        <summary><span data-ttu-id="02b97-146">返回当转换无法执行时所引发的异常。</span><span class="sxs-lookup"><span data-stu-id="02b97-146">Returns an exception to throw when a conversion cannot be performed.</span></span></summary>
        <returns><span data-ttu-id="02b97-147">当 <see langword="ConvertFrom" /> 转换无法执行时引发异常的 <see cref="T:System.Exception" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="02b97-147">An <see cref="T:System.Exception" /> object for the exception to throw when a <see langword="ConvertFrom" /> conversion cannot be performed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02b97-148">此方法不会调用实际 `throw` 关键字，因此 `throw GetConvertFromException` 典型用法（提供参数）。</span><span class="sxs-lookup"><span data-stu-id="02b97-148">The actual `throw` keyword is not invoked by this method, therefore the typical usage is `throw GetConvertFromException` (with parameters provided).</span></span>  
  
 <span data-ttu-id="02b97-149">返回的特定异常为 <xref:System.InvalidOperationException>，并在异常消息中传递 `value`。</span><span class="sxs-lookup"><span data-stu-id="02b97-149">The specific exception returned is <xref:System.InvalidOperationException>, with `value` passed in the exception message.</span></span> <span data-ttu-id="02b97-150">用法的模式与 <xref:System.ComponentModel.TypeConverter>中的异常实用工具的模式相同。</span><span class="sxs-lookup"><span data-stu-id="02b97-150">The pattern for usage is the same as for exception utilities in <xref:System.ComponentModel.TypeConverter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConvertToException">
      <MemberSignature Language="C#" Value="protected Exception GetConvertToException (object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Exception GetConvertToException(object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetConvertToException (value As Object, destinationType As Type) As Exception" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Exception ^ GetConvertToException(System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="member this.GetConvertToException : obj * Type -&gt; Exception" Usage="valueSerializer.GetConvertToException (value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="02b97-151">无法转换的对象。</span><span class="sxs-lookup"><span data-stu-id="02b97-151">The object that could not be converted.</span></span></param>
        <param name="destinationType"><span data-ttu-id="02b97-152">一个类型，表示转换尝试转换为的类型。</span><span class="sxs-lookup"><span data-stu-id="02b97-152">A type that represents the type the conversion was trying to convert to.</span></span></param>
        <summary><span data-ttu-id="02b97-153">返回当转换无法执行时所引发的异常。</span><span class="sxs-lookup"><span data-stu-id="02b97-153">Returns an exception to throw when a conversion cannot be performed.</span></span></summary>
        <returns><span data-ttu-id="02b97-154">当 <see langword="ConvertTo" /> 转换无法执行时引发异常的 <see cref="T:System.Exception" /> 对象。</span><span class="sxs-lookup"><span data-stu-id="02b97-154">An <see cref="T:System.Exception" /> object for the exception to throw when a <see langword="ConvertTo" /> conversion cannot be performed.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02b97-155">此方法不会调用实际 `throw` 关键字，因此 `throw GetConvertToException` 典型用法（提供 `value` 参数）。</span><span class="sxs-lookup"><span data-stu-id="02b97-155">The actual `throw` keyword is not invoked by this method, therefore the typical usage is `throw GetConvertToException` (with `value` parameter provided).</span></span>  
  
 <span data-ttu-id="02b97-156">返回的特定异常为 <xref:System.InvalidOperationException>，并在异常消息中传递 `value`。</span><span class="sxs-lookup"><span data-stu-id="02b97-156">The specific exception returned is <xref:System.InvalidOperationException>, with `value` passed in the exception message.</span></span> <span data-ttu-id="02b97-157">用法的模式与 <xref:System.ComponentModel.TypeConverter>中的异常实用工具的模式相同。</span><span class="sxs-lookup"><span data-stu-id="02b97-157">The pattern for usage is the same as for exception utilities in <xref:System.ComponentModel.TypeConverter>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSerializerFor">
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="02b97-158">获取对象的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span><span class="sxs-lookup"><span data-stu-id="02b97-158">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> for an object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor descriptor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
      </Parameters>
      <Docs>
        <param name="descriptor"><span data-ttu-id="02b97-159">要进行序列化的属性的 CLR 属性描述符。</span><span class="sxs-lookup"><span data-stu-id="02b97-159">The CLR property descriptor for the property to be serialized.</span></span></param>
        <summary><span data-ttu-id="02b97-160">通过传递属性的 CLR 属性描述符，获取为属性声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span><span class="sxs-lookup"><span data-stu-id="02b97-160">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for a property, by passing a CLR property descriptor for the property.</span></span></summary>
        <returns><span data-ttu-id="02b97-161">与指定属性相关联的序列化程序。</span><span class="sxs-lookup"><span data-stu-id="02b97-161">The serializer associated with the specified property.</span></span> <span data-ttu-id="02b97-162">可能返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="02b97-162">May return <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02b97-163">属性的 <xref:System.Windows.Markup.ValueSerializer> 或用作属性值的类型的通过对属性或类型声明应用 <xref:System.Windows.Markup.ValueSerializerAttribute> 属性来指示。</span><span class="sxs-lookup"><span data-stu-id="02b97-163">A <xref:System.Windows.Markup.ValueSerializer> for a property, or for a type that is used as the value for a property, is indicated by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute on the property or type declaration.</span></span> <span data-ttu-id="02b97-164"><xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> 方法是一个实用工具方法，该方法可读取 CLR 类型系统信息并基于属性返回新的 <xref:System.Windows.Markup.ValueSerializer> 类（如果在属性上找到），或者如果在属性的类型上找到，则返回。</span><span class="sxs-lookup"><span data-stu-id="02b97-164">The <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> method is a utility method that reads the CLR type system information and returns a new <xref:System.Windows.Markup.ValueSerializer> class based on the attribute if found on the property, or then if found on the property's type.</span></span> <span data-ttu-id="02b97-165">如果不存在此类序列化程序，则可能会返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="02b97-165">`null` might be returned if no such serializer exists.</span></span> <span data-ttu-id="02b97-166">如果某个类型或属性有意使用 null 值 <xref:System.Windows.Markup.ValueSerializerAttribute>，则也可能返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="02b97-166">`null` might also be returned if a type or property is deliberately attributed with a null-value <xref:System.Windows.Markup.ValueSerializerAttribute>.</span></span>  
  
 <span data-ttu-id="02b97-167"><xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> 支持的另一种模式是返回内部 `TypeConverterValueSerializer` 类，该类是包装 <xref:System.ComponentModel.TypeConverter> 并将 `Convert` 方法转换为 `Convert*String` 方法的 <xref:System.Windows.Markup.ValueSerializer> 实现（例如，使用 <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> 类型的输入调用 <xref:System.String>，并转换为 <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="02b97-167">Another mode that <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> supports is returning the internal `TypeConverterValueSerializer` class, which is a <xref:System.Windows.Markup.ValueSerializer> implementation that wraps a <xref:System.ComponentModel.TypeConverter> and translates the `Convert` methods to `Convert*String` methods (for instance <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> is called with input of the <xref:System.String> type, and translates to <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>.</span></span> <span data-ttu-id="02b97-168">仅在满足以下所有条件的情况下才执行此操作：</span><span class="sxs-lookup"><span data-stu-id="02b97-168">This is done only in cases where all of the following are true:</span></span>  
  
-   <span data-ttu-id="02b97-169">在相关属性或相关属性的类型上找到 <xref:System.ComponentModel.TypeConverterAttribute>。</span><span class="sxs-lookup"><span data-stu-id="02b97-169">A <xref:System.ComponentModel.TypeConverterAttribute> is found on the relevant property, or the relevant property's type.</span></span>  
  
-   <span data-ttu-id="02b97-170">可以成功构造指示 <xref:System.ComponentModel.TypeConverter>。</span><span class="sxs-lookup"><span data-stu-id="02b97-170">The indicated <xref:System.ComponentModel.TypeConverter> can be successfully constructed.</span></span>  
  
-   <span data-ttu-id="02b97-171"><xref:System.ComponentModel.TypeConverter> 返回 <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>的 `true`，称为引用 <xref:System.String> 类型。</span><span class="sxs-lookup"><span data-stu-id="02b97-171">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="02b97-172"><xref:System.ComponentModel.TypeConverter> 返回 <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>的 `true`，称为引用 <xref:System.String> 类型。</span><span class="sxs-lookup"><span data-stu-id="02b97-172">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="02b97-173"><xref:System.ComponentModel.TypeConverter> 返回 <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>的 `true`，称为引用 <xref:System.String> 类型。</span><span class="sxs-lookup"><span data-stu-id="02b97-173">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02b97-174">下面是一些特殊情况： <xref:System.DateTime> 类型返回 <xref:System.Windows.Markup.DateTimeValueSerializer>;<xref:System.String> 类型返回内部但函数序列化程序（`StringValueSerializer`）。</span><span class="sxs-lookup"><span data-stu-id="02b97-174">The following are special cases: <xref:System.DateTime> types return a <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> types return an internal but functional serializer (`StringValueSerializer`).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="02b97-175"><paramref name="descriptor" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="02b97-175"><paramref name="descriptor" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (type As Type) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="02b97-176">要为其获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="02b97-176">The type to get the <see cref="T:System.Windows.Markup.ValueSerializer" /> for.</span></span></param>
        <summary><span data-ttu-id="02b97-177">为指定类型获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 声明。</span><span class="sxs-lookup"><span data-stu-id="02b97-177">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified type.</span></span></summary>
        <returns><span data-ttu-id="02b97-178">与指定类型相关联的序列化程序。</span><span class="sxs-lookup"><span data-stu-id="02b97-178">The serializer associated with the specified type.</span></span> <span data-ttu-id="02b97-179">可能返回 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="02b97-179">May return <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02b97-180">通过对类型声明应用 <xref:System.Windows.Markup.ValueSerializerAttribute> 属性来指示类型的 <xref:System.Windows.Markup.ValueSerializer>。</span><span class="sxs-lookup"><span data-stu-id="02b97-180">A <xref:System.Windows.Markup.ValueSerializer> for a type is indicated by applying the <xref:System.Windows.Markup.ValueSerializerAttribute> attribute on the type declaration.</span></span> <span data-ttu-id="02b97-181"><xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> 方法是一个实用工具方法，该方法可读取 CLR 类型系统信息，并根据属性返回新的 <xref:System.Windows.Markup.ValueSerializer> 类（如果在指定的 `type`上找到）。</span><span class="sxs-lookup"><span data-stu-id="02b97-181">The <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> method is a utility method that reads the CLR type system information and returns a new <xref:System.Windows.Markup.ValueSerializer> class based on the attribute if found on the specified `type`.</span></span> <span data-ttu-id="02b97-182">如果不存在此类序列化程序，则可能会返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="02b97-182">`null` might be returned if no such serializer exists.</span></span> <span data-ttu-id="02b97-183">如果某个类型有意使用 null 值 <xref:System.Windows.Markup.ValueSerializerAttribute>，则也可能返回 `null`。</span><span class="sxs-lookup"><span data-stu-id="02b97-183">`null` might also be returned if a type is deliberately attributed with a null-value <xref:System.Windows.Markup.ValueSerializerAttribute>.</span></span>  
  
 <span data-ttu-id="02b97-184"><xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> 支持的另一种模式是返回内部 `TypeConverterValueSerializer` 类，该类是包装 <xref:System.ComponentModel.TypeConverter> 并将 `Convert` 方法转换为 `Convert*String` 方法的 <xref:System.Windows.Markup.ValueSerializer> 实现（例如，使用 <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> 类型的输入调用 <xref:System.String>，并转换为 <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>。</span><span class="sxs-lookup"><span data-stu-id="02b97-184">Another mode that <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%2A> supports is returning the internal `TypeConverterValueSerializer` class, which is a <xref:System.Windows.Markup.ValueSerializer> implementation that wraps a <xref:System.ComponentModel.TypeConverter> and translates the `Convert` methods to `Convert*String` methods (for instance <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType> is called with input of the <xref:System.String> type, and translates to <xref:System.Windows.Markup.ValueSerializer.ConvertToString%2A>.</span></span> <span data-ttu-id="02b97-185">仅在满足以下所有条件的情况下才执行此操作：</span><span class="sxs-lookup"><span data-stu-id="02b97-185">This is done only in cases where all of the following are true:</span></span>  
  
-   <span data-ttu-id="02b97-186">`type`<xref:System.ComponentModel.TypeConverterAttribute> 找到。</span><span class="sxs-lookup"><span data-stu-id="02b97-186">A <xref:System.ComponentModel.TypeConverterAttribute> is found on `type`.</span></span>  
  
-   <span data-ttu-id="02b97-187">可以成功构造指示 <xref:System.ComponentModel.TypeConverter>。</span><span class="sxs-lookup"><span data-stu-id="02b97-187">The indicated <xref:System.ComponentModel.TypeConverter> can be successfully constructed.</span></span>  
  
-   <span data-ttu-id="02b97-188"><xref:System.ComponentModel.TypeConverter> 返回 <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>的 `true`，称为引用 <xref:System.String> 类型。</span><span class="sxs-lookup"><span data-stu-id="02b97-188">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.ConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="02b97-189"><xref:System.ComponentModel.TypeConverter> 返回 <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>的 `true`，称为引用 <xref:System.String> 类型。</span><span class="sxs-lookup"><span data-stu-id="02b97-189">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertTo%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
-   <span data-ttu-id="02b97-190"><xref:System.ComponentModel.TypeConverter> 返回 <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>的 `true`，称为引用 <xref:System.String> 类型。</span><span class="sxs-lookup"><span data-stu-id="02b97-190">The <xref:System.ComponentModel.TypeConverter> returns `true` for <xref:System.ComponentModel.TypeConverter.CanConvertFrom%2A?displayProperty=nameWithType>, called referencing the <xref:System.String> type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="02b97-191">下面是一些特殊情况： <xref:System.DateTime> 类型返回 <xref:System.Windows.Markup.DateTimeValueSerializer>;<xref:System.String> 类型返回内部但函数序列化程序（`StringValueSerializer`）。</span><span class="sxs-lookup"><span data-stu-id="02b97-191">The following are special cases: <xref:System.DateTime> types return a <xref:System.Windows.Markup.DateTimeValueSerializer>; <xref:System.String> types return an internal but functional serializer (`StringValueSerializer`).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="02b97-192"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="02b97-192"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (System.ComponentModel.PropertyDescriptor descriptor, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.ComponentModel.PropertyDescriptor descriptor, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (descriptor As PropertyDescriptor, context As IValueSerializerContext) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(System::ComponentModel::PropertyDescriptor ^ descriptor, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : System.ComponentModel.PropertyDescriptor * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (descriptor, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="System.ComponentModel.PropertyDescriptor" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="descriptor"><span data-ttu-id="02b97-193">要进行序列化的属性的描述符。</span><span class="sxs-lookup"><span data-stu-id="02b97-193">Descriptor for the property to be serialized.</span></span></param>
        <param name="context"><span data-ttu-id="02b97-194">用于转换的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="02b97-194">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="02b97-195">使用指定上下文获取为指定属性声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span><span class="sxs-lookup"><span data-stu-id="02b97-195">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified property, using the specified context.</span></span></summary>
        <returns><span data-ttu-id="02b97-196">与指定属性相关联的序列化程序。</span><span class="sxs-lookup"><span data-stu-id="02b97-196">The serializer associated with the specified property.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02b97-197">此重载不是仅依赖于 CLR 类型系统中所报告的属性，而是将 `context` 用作服务，并调用服务的 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>实现。</span><span class="sxs-lookup"><span data-stu-id="02b97-197">Rather than relying purely on attributes reported in the CLR type system, this overload uses the `context` as a service, and calls the service's implementation of <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="02b97-198"><xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> 实现通常也依赖于 `descriptor`，但可能会实现某些上下文的特殊行为。</span><span class="sxs-lookup"><span data-stu-id="02b97-198">The <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> implementation would typically also rely on the `descriptor`, but might implement special behavior for certain contexts.</span></span>  
  
 <span data-ttu-id="02b97-199">如果调用方具有来自服务的可用 <xref:System.Windows.Markup.IValueSerializerContext>，则应调用此方法。</span><span class="sxs-lookup"><span data-stu-id="02b97-199">This method should be called when the caller has an available <xref:System.Windows.Markup.IValueSerializerContext> from a service.</span></span>  <span data-ttu-id="02b97-200">这将确保为特定上下文返回正确的 <xref:System.Windows.Markup.ValueSerializer>。</span><span class="sxs-lookup"><span data-stu-id="02b97-200">This will ensure that the correct <xref:System.Windows.Markup.ValueSerializer> is returned for the specific context.</span></span>  
  
 <span data-ttu-id="02b97-201">如果上下文从指定 `descriptor`的 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> 返回 `null`，或如果指定的上下文 `null`，则行为与调用 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29> 重载相同。</span><span class="sxs-lookup"><span data-stu-id="02b97-201">If the context returns `null` from its <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> for your specified `descriptor`, or if the context you specify is `null`, then behavior is identical to calling the <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.ComponentModel.PropertyDescriptor%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="02b97-202"><paramref name="descriptor" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="02b97-202"><paramref name="descriptor" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="GetSerializerFor">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.ValueSerializer GetSerializerFor (Type type, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.ValueSerializer GetSerializerFor(class System.Type type, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSerializerFor (type As Type, context As IValueSerializerContext) As ValueSerializer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::ValueSerializer ^ GetSerializerFor(Type ^ type, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="static member GetSerializerFor : Type * System.Windows.Markup.IValueSerializerContext -&gt; System.Windows.Markup.ValueSerializer" Usage="System.Windows.Markup.ValueSerializer.GetSerializerFor (type, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.ValueSerializer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="02b97-203">要为其获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 的类型。</span><span class="sxs-lookup"><span data-stu-id="02b97-203">The type to get the <see cref="T:System.Windows.Markup.ValueSerializer" /> for.</span></span></param>
        <param name="context"><span data-ttu-id="02b97-204">用于转换的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="02b97-204">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="02b97-205">使用指定的内容，获取为指定类型声明的 <see cref="T:System.Windows.Markup.ValueSerializer" />。</span><span class="sxs-lookup"><span data-stu-id="02b97-205">Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified type, using the specified context.</span></span></summary>
        <returns><span data-ttu-id="02b97-206">与指定类型相关联的序列化程序。</span><span class="sxs-lookup"><span data-stu-id="02b97-206">The serializer associated with the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02b97-207">此重载不是仅依赖于 CLR 类型系统中所报告的属性，而是将 `context` 用作服务，并调用服务的 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>实现。</span><span class="sxs-lookup"><span data-stu-id="02b97-207">Rather than relying purely on attributes reported in the CLR type system, this overload uses the `context` as a service, and calls the service's implementation of <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="02b97-208"><xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> 实现通常也依赖于 `type`，但可能会实现某些上下文的特殊行为。</span><span class="sxs-lookup"><span data-stu-id="02b97-208">The <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> implementation would typically also rely on the `type`, but might implement special behavior for certain contexts.</span></span>  
  
 <span data-ttu-id="02b97-209">如果调用方具有来自服务的可用 <xref:System.Windows.Markup.IValueSerializerContext>，则应调用此方法。</span><span class="sxs-lookup"><span data-stu-id="02b97-209">This method should be called when the caller has an available <xref:System.Windows.Markup.IValueSerializerContext> from a service.</span></span> <span data-ttu-id="02b97-210">这将确保为特定上下文返回正确的 <xref:System.Windows.Markup.ValueSerializer>。</span><span class="sxs-lookup"><span data-stu-id="02b97-210">This will ensure that the correct <xref:System.Windows.Markup.ValueSerializer> is returned for the specific context.</span></span>  
  
 <span data-ttu-id="02b97-211">如果上下文从指定 `type`的 <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> 返回 `null`，或如果指定的上下文 `null`，则行为与调用 <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29> 重载相同。</span><span class="sxs-lookup"><span data-stu-id="02b97-211">If the context returns `null` from its <xref:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor%2A?displayProperty=nameWithType> for your specified `type`, or if the context you specify is `null`, then behavior is identical to calling the <xref:System.Windows.Markup.ValueSerializer.GetSerializerFor%28System.Type%29> overload.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="02b97-212"><paramref name="type" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="02b97-212"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TypeReferences">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IEnumerable&lt;Type&gt; TypeReferences (object value, System.Windows.Markup.IValueSerializerContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; TypeReferences(object value, class System.Windows.Markup.IValueSerializerContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function TypeReferences (value As Object, context As IValueSerializerContext) As IEnumerable(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ TypeReferences(System::Object ^ value, System::Windows::Markup::IValueSerializerContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;&#xA;override this.TypeReferences : obj * System.Windows.Markup.IValueSerializerContext -&gt; seq&lt;Type&gt;" Usage="valueSerializer.TypeReferences (value, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="context" Type="System.Windows.Markup.IValueSerializerContext" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="02b97-213">要序列化的值。</span><span class="sxs-lookup"><span data-stu-id="02b97-213">The value being serialized.</span></span></param>
        <param name="context"><span data-ttu-id="02b97-214">用于转换的上下文信息。</span><span class="sxs-lookup"><span data-stu-id="02b97-214">Context information that is used for conversion.</span></span></param>
        <summary><span data-ttu-id="02b97-215">获取 <see cref="T:System.Windows.Markup.ValueSerializer" /> 引用的类型的枚举。</span><span class="sxs-lookup"><span data-stu-id="02b97-215">Gets an enumeration of the types referenced by the <see cref="T:System.Windows.Markup.ValueSerializer" />.</span></span></summary>
        <returns><span data-ttu-id="02b97-216">此序列化程序所转换的类型。</span><span class="sxs-lookup"><span data-stu-id="02b97-216">The types converted by this serializer.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02b97-217"><xref:System.Windows.Markup.ValueSerializer> 转换的任何类型都应包括在返回的枚举中。</span><span class="sxs-lookup"><span data-stu-id="02b97-217">Any types a <xref:System.Windows.Markup.ValueSerializer> converts should be included in the returned enumeration.</span></span>  <span data-ttu-id="02b97-218">这允许序列化程序确保反序列化程序具有此序列化程序所转换的类型的足够信息。</span><span class="sxs-lookup"><span data-stu-id="02b97-218">This allows a serializer to ensure a de-serializer has enough information about the types this serializer converts.</span></span>  
  
 <span data-ttu-id="02b97-219">重写此方法是一种高级方案。</span><span class="sxs-lookup"><span data-stu-id="02b97-219">Overriding this method is an advanced scenario.</span></span> <span data-ttu-id="02b97-220">仅当您实现的系统中的 CLR 类型系统所有者属性关系可用于 XAML 架构上下文时，才需要重写。</span><span class="sxs-lookup"><span data-stu-id="02b97-220">Overriding should only be necessary if you are implementing a system where CLR type system ownertype-property relationships available to a XAML schema context do not report enough information.</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="02b97-221">WPF 用法说明</span><span class="sxs-lookup"><span data-stu-id="02b97-221">WPF Usage Notes</span></span>  
 <span data-ttu-id="02b97-222">[!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 属性系统实现了覆盖 <xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A> 的内部值序列化程序，因为某个依赖属性具有可添加所有者的概念。</span><span class="sxs-lookup"><span data-stu-id="02b97-222">The [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] property system implements an internal value serializer that overrides <xref:System.Windows.Markup.ValueSerializer.TypeReferences%2A> because a dependency property has a concept that it can have added owners.</span></span> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <span data-ttu-id="02b97-223">表达式也具有特殊的内部处理。</span><span class="sxs-lookup"><span data-stu-id="02b97-223">expressions also have special internal handling.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
