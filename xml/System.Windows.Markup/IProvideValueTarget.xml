<Type Name="IProvideValueTarget" FullName="System.Windows.Markup.IProvideValueTarget">
  <Metadata><Meta Name="ms.openlocfilehash" Value="69c04e2f33aadffcfe92d53e7d0f319debbd9e35" /><Meta Name="ms.sourcegitcommit" Value="13a6cb6fba7e05947f15d8d6cc802703ae9c21d5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/18/2020" /><Meta Name="ms.locfileid" Value="90798039" /></Metadata><TypeSignature Language="C#" Value="public interface IProvideValueTarget" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IProvideValueTarget" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.IProvideValueTarget" />
  <TypeSignature Language="VB.NET" Value="Public Interface IProvideValueTarget" />
  <TypeSignature Language="C++ CLI" Value="public interface class IProvideValueTarget" />
  <TypeSignature Language="F#" Value="type IProvideValueTarget = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="PresentationFramework" FromVersion="5.0.0.0" To="System.Xaml" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="WindowsBase" FromVersion="5.0.0.0" To="System.Xaml" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
    <TypeForwarding From="PresentationFramework" FromVersion="4.0.0.0" To="System.Xaml" ToVersion="4.0.0.0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
    <TypeForwarding From="WindowsBase" FromVersion="4.0.0.0" To="System.Xaml" ToVersion="4.0.0.0" FrameworkAlternate="netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  </TypeForwardingChain>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName Language="C#">[System.Runtime.CompilerServices.TypeForwardedFrom("PresentationFramework, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.TypeForwardedFrom("PresentationFramework, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="98e6d-101">表示一个服务，该服务报告标记扩展评估的情景对象和属性的关系。</span><span class="sxs-lookup"><span data-stu-id="98e6d-101">Represents a service that reports situational object-property relationships for markup extension evaluation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98e6d-102"><xref:System.Windows.Markup.IProvideValueTarget> 表示一项服务，该服务报告有关在其中调用值转换器的对象-属性结构的信息。</span><span class="sxs-lookup"><span data-stu-id="98e6d-102"><xref:System.Windows.Markup.IProvideValueTarget> represents a service that reports information regarding the object-property structure surrounding where a value converter is invoked.</span></span>  
  
 <span data-ttu-id="98e6d-103"><xref:System.Windows.Markup.IProvideValueTarget>当 xaml 对象编写器调用值转换行为时，类型转换器和标记扩展可以在 xaml 对象编写器提供的服务上下文上查询为服务。</span><span class="sxs-lookup"><span data-stu-id="98e6d-103">Type converters and markup extensions can query for <xref:System.Windows.Markup.IProvideValueTarget> as a service on the service context that is provided by a XAML object writer, when the XAML object writer invokes value conversion behavior.</span></span> <span data-ttu-id="98e6d-104">有关详细信息，请参阅[可用于类型转换器和标记扩展](/dotnet/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions)[的 XAML 的类型转换器和标记扩展](/dotnet/framework/xaml-services/type-converters-and-markup-extensions-for-xaml)。</span><span class="sxs-lookup"><span data-stu-id="98e6d-104">For more information, see [Type Converters and Markup Extensions for XAML](/dotnet/framework/xaml-services/type-converters-and-markup-extensions-for-xaml) and [Service Contexts Available to Type Converters and Markup Extensions](/dotnet/framework/xaml-services/service-contexts-available-to-type-converters-and-markup-extensions).</span></span>  
  
 <span data-ttu-id="98e6d-105">特别是对于标记扩展，这种方案很有用，就 <xref:System.Windows.Markup.IProvideValueTarget> 是确定标记扩展的形势使用情况的有效性。</span><span class="sxs-lookup"><span data-stu-id="98e6d-105">For markup extensions specifically, a scenario where <xref:System.Windows.Markup.IProvideValueTarget> is useful is to determine the validity of your markup extension's situational usage.</span></span> <span data-ttu-id="98e6d-106">例如，标记扩展可以实现值延迟机制，但使用该机制可能仅适用于在运行时目标对象能够使用延迟机制的其他组件的情况。</span><span class="sxs-lookup"><span data-stu-id="98e6d-106">For example, your markup extension might implement a value deferral mechanism, but using that mechanism might only be appropriate if the target object is capable of using other components of your deferral mechanism at run time.</span></span> <span data-ttu-id="98e6d-107">你可以检查返回的对象的类型系统特征 <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> ，并确保对象支持你的延迟方法。</span><span class="sxs-lookup"><span data-stu-id="98e6d-107">You could check the type system characteristics of the object returned as <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> and make sure that object supports your deferral technique.</span></span> <span data-ttu-id="98e6d-108">如果是这样，则标记扩展将返回一个值，如果不是，则标记扩展将引发一个异常，该异常将被 XAML 对象编写器作为内部异常选取。</span><span class="sxs-lookup"><span data-stu-id="98e6d-108">If so, your markup extension returns a value, and if not, your markup extension throws an exception that will be picked up as an inner exception by a XAML object writer.</span></span> <span data-ttu-id="98e6d-109">类似的方案是通过检查的类型系统特征来确保特定属性支持功能 <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> 。</span><span class="sxs-lookup"><span data-stu-id="98e6d-109">A similar scenario is assuring that a particular property supports a capability, by checking type system characteristics of the <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A>.</span></span>  
  
 <span data-ttu-id="98e6d-110">尽管 API 名称 <xref:System.Windows.Markup.IProvideValueTarget> 可能表示与关联，但 <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A?displayProperty=nameWithType> 通过报告的信息 <xref:System.Windows.Markup.IProvideValueTarget> 对或也很有用 <xref:System.ComponentModel.TypeConverter> <xref:System.Windows.Markup.ValueSerializer> 。</span><span class="sxs-lookup"><span data-stu-id="98e6d-110">Although the API name <xref:System.Windows.Markup.IProvideValueTarget> might imply an association with <xref:System.Windows.Markup.MarkupExtension.ProvideValue%2A?displayProperty=nameWithType>, the information reported by <xref:System.Windows.Markup.IProvideValueTarget> can also be useful to a <xref:System.ComponentModel.TypeConverter> or <xref:System.Windows.Markup.ValueSerializer>.</span></span> <span data-ttu-id="98e6d-111"><xref:System.ComponentModel.TypeConverter>或 <xref:System.Windows.Markup.ValueSerializer> 通常具有比标记扩展更多的上下文，因为它们专用于特定的目标类型或目标属性，因此，通常情况下，在类型系统中可预测的情况。</span><span class="sxs-lookup"><span data-stu-id="98e6d-111">A <xref:System.ComponentModel.TypeConverter> or <xref:System.Windows.Markup.ValueSerializer> typically have more context than a markup extension because they are dedicated to a particular target type or target property, and thus the situational validity is usually predictable in the type system.</span></span> <span data-ttu-id="98e6d-112">但存在其他方案。</span><span class="sxs-lookup"><span data-stu-id="98e6d-112">However, other scenarios exist.</span></span> <span data-ttu-id="98e6d-113">下面列出了可能由类型转换器或标记扩展实现的某些方案：</span><span class="sxs-lookup"><span data-stu-id="98e6d-113">The following is a list of some scenarios that might be implemented by either a type converter or a markup extension:</span></span>  
  
-   <span data-ttu-id="98e6d-114">获取 <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> 以读取该对象上其他属性的实例值。</span><span class="sxs-lookup"><span data-stu-id="98e6d-114">Get <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> to read instance values of other properties on that object.</span></span> <span data-ttu-id="98e6d-115">请注意，由于目标对象上的 XAML 成员的处理顺序可能是不确定的，因此在此处处理可能需要为不设置的值提供强大的功能。</span><span class="sxs-lookup"><span data-stu-id="98e6d-115">Note that your handling here might need to be robust for unset values, because the processing order of XAML members on the target object can be nondeterministic.</span></span>  
  
-   <span data-ttu-id="98e6d-116">获取 <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> 以读取类型级元数据，或验证所需的接口是否由该类型实现。</span><span class="sxs-lookup"><span data-stu-id="98e6d-116">Get <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> to read type-level metadata, or to verify that required interfaces are implemented by the type.</span></span>  
  
-   <span data-ttu-id="98e6d-117">获取 <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> 以读取属性元数据。</span><span class="sxs-lookup"><span data-stu-id="98e6d-117">Get <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> to read property metadata.</span></span>  
  
 <span data-ttu-id="98e6d-118">一种方案是使用 <xref:System.Windows.Markup.IProvideValueTarget> 信息来限制允许标记扩展设置的对象或属性。</span><span class="sxs-lookup"><span data-stu-id="98e6d-118">One scenario is to use <xref:System.Windows.Markup.IProvideValueTarget> information to limit which objects or properties are permitted to be set by your markup extension.</span></span>  
  
 <span data-ttu-id="98e6d-119">尝试使用服务之前，请确保服务本身不是 `null` 由用于上下文的相关服务提供程序参数返回。</span><span class="sxs-lookup"><span data-stu-id="98e6d-119">Before attempting to use the service, make sure that the service itself is not `null` when returned by the relevant service provider parameter you are using for context.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="98e6d-120">使用该服务时，不要修改属性引用的对象 <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> 或该对象引用的其他对象，这一点特别重要。</span><span class="sxs-lookup"><span data-stu-id="98e6d-120">When using the service, it is particularly important not to modify the object referenced by the <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> property, or other objects referenced by that object.</span></span> <span data-ttu-id="98e6d-121">特别是对于 WPF，这些更改可能会导致意外的更改，从而使 WPF 属性系统无效。</span><span class="sxs-lookup"><span data-stu-id="98e6d-121">For WPF specifically, these changes could cause unexpected changes that would invalidate the WPF property system.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="98e6d-122">不要使用类型 <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> 来确定标记扩展或类型转换器应返回哪一精确类型。</span><span class="sxs-lookup"><span data-stu-id="98e6d-122">Do not use the type of <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> to determine which precise type a markup extension or type converter should return.</span></span> <span data-ttu-id="98e6d-123">这不是最佳做法。</span><span class="sxs-lookup"><span data-stu-id="98e6d-123">That is not a best practice.</span></span> <span data-ttu-id="98e6d-124">返回类型应与 <xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> 用于标记扩展) 或模式 (类名称) 的类名称的特性化 (一致。</span><span class="sxs-lookup"><span data-stu-id="98e6d-124">Your return type should be consistent with attributing (<xref:System.Windows.Markup.MarkupExtensionReturnTypeAttribute> for markup extensions) or patterns (class name of the type converter).</span></span>  
  
 <span data-ttu-id="98e6d-125">在 .NET Framework 的以前版本中，此接口存在于 WPF 特定的程序集 WindowsBase 中。</span><span class="sxs-lookup"><span data-stu-id="98e6d-125">In previous versions of the .NET Framework, this interface existed in the WPF-specific assembly WindowsBase.</span></span> <span data-ttu-id="98e6d-126">在中 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] ， <xref:System.Windows.Markup.IProvideValueTarget> 为 system.exception 程序集。</span><span class="sxs-lookup"><span data-stu-id="98e6d-126">In [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)], <xref:System.Windows.Markup.IProvideValueTarget> is in the System.Xaml assembly.</span></span> <span data-ttu-id="98e6d-127">有关详细信息，请参阅 [Types Migrated from WPF to System.Xaml](/dotnet/framework/xaml-services/types-migrated-from-wpf-to-system-xaml)。</span><span class="sxs-lookup"><span data-stu-id="98e6d-127">For more information, see [Types Migrated from WPF to System.Xaml](/dotnet/framework/xaml-services/types-migrated-from-wpf-to-system-xaml).</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="98e6d-128">WPF 用法说明</span><span class="sxs-lookup"><span data-stu-id="98e6d-128">WPF Usage Notes</span></span>  
 <span data-ttu-id="98e6d-129">此服务支持框架功能，如依赖属性上的绑定。</span><span class="sxs-lookup"><span data-stu-id="98e6d-129">This service supports framework features such as binding on a dependency property.</span></span>  
  
 <span data-ttu-id="98e6d-130">在 WPF 中， <xref:System.Windows.Markup.IProvideValueTarget> 当从标记扩展或类型转换器返回的值取决于上下文时，由表示的服务可以返回对象和属性。</span><span class="sxs-lookup"><span data-stu-id="98e6d-130">In WPF, the service represented by <xref:System.Windows.Markup.IProvideValueTarget> can return objects and properties for situations where the value to return from a markup extension or type converter depends on context.</span></span>  
  
 <span data-ttu-id="98e6d-131"><xref:System.Windows.Markup.IProvideValueTarget> 在的内部实现（即在 <xref:System.Windows.Data.BindingBase> WPF 中实现依赖属性的绑定机制的类）中广泛利用。</span><span class="sxs-lookup"><span data-stu-id="98e6d-131"><xref:System.Windows.Markup.IProvideValueTarget> is leveraged heavily in the internal implementation of <xref:System.Windows.Data.BindingBase>, the class that implements the binding mechanism for dependency properties in WPF.</span></span>  
  
 <span data-ttu-id="98e6d-132">WPF 的默认内部服务提供程序 <xref:System.Windows.Markup.IProvideValueTarget> 通过自定义标记扩展或类型转换器实现使用。</span><span class="sxs-lookup"><span data-stu-id="98e6d-132">A default internal service provider for WPF implements <xref:System.Windows.Markup.IProvideValueTarget> for usage by a custom markup extension or type converter.</span></span> <span data-ttu-id="98e6d-133">报告的对象和属性 <xref:System.Windows.Markup.IProvideValueTarget> 只能由内部 WPF 服务设置。</span><span class="sxs-lookup"><span data-stu-id="98e6d-133">The object and property reported by <xref:System.Windows.Markup.IProvideValueTarget> can only be set by the internal WPF service.</span></span> <span data-ttu-id="98e6d-134">除了这种操作的定义之外 <xref:System.Windows.Markup.IProvideValueTarget> ，还需要定义自己的服务提供程序，以便为标记扩展和类型转换器用法（至少在 <xref:System.Windows.Markup.IProvideValueTarget> 和服务上实现）进行定义 <xref:System.Windows.Markup.IXamlTypeResolver> ，这是未在此处介绍的高级方案。</span><span class="sxs-lookup"><span data-stu-id="98e6d-134">Going beyond this definition of how <xref:System.Windows.Markup.IProvideValueTarget> operates would require defining your own service provider for markup extension and type converter usages that implements at the very least the <xref:System.Windows.Markup.IProvideValueTarget> and <xref:System.Windows.Markup.IXamlTypeResolver> services, and that is an advanced scenario that is not described here.</span></span>  
  
 <span data-ttu-id="98e6d-135">或的 null 值 <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> 并不一定意味着标记扩展或类型转换器不能操作，尽管这取决于你的实现。</span><span class="sxs-lookup"><span data-stu-id="98e6d-135">A null value for <xref:System.Windows.Markup.IProvideValueTarget.TargetProperty%2A> or <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> does not necessarily mean that a markup extension or type converter cannot act, although that depends on your implementation.</span></span> <span data-ttu-id="98e6d-136">一个示例案例，其中的值 <xref:System.Windows.Markup.IProvideValueTarget> 即使在服务可用时也为 null，这是因为标记扩展嵌套在其他标记扩展中，例如 <xref:System.Windows.Data.Binding> 。</span><span class="sxs-lookup"><span data-stu-id="98e6d-136">An example case where the values from <xref:System.Windows.Markup.IProvideValueTarget> are null even if the service is available is if your markup extension is nested within another markup extension, such as a <xref:System.Windows.Data.Binding>.</span></span> <span data-ttu-id="98e6d-137">依赖于的实现 <xref:System.Windows.Markup.IProvideValueTarget> 应始终检查 null 值（如果仅出于引发特定异常的目的）。</span><span class="sxs-lookup"><span data-stu-id="98e6d-137">An implementation that relies on <xref:System.Windows.Markup.IProvideValueTarget> should always check for null values if only for the purpose of throwing a specific exception, if that is your intended design.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
    <altmember cref="T:System.Windows.Markup.MarkupExtension" />
    <altmember cref="T:System.IServiceProvider" />
  </Docs>
  <Members>
    <Member MemberName="TargetObject">
      <MemberSignature Language="C#" Value="public object TargetObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TargetObject" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.IProvideValueTarget.TargetObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TargetObject { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetObject : obj" Usage="System.Windows.Markup.IProvideValueTarget.TargetObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="98e6d-138">获取被报告的目标对象。</span><span class="sxs-lookup"><span data-stu-id="98e6d-138">Gets the target object being reported.</span></span></summary>
        <value><span data-ttu-id="98e6d-139">被报告的目标对象。</span><span class="sxs-lookup"><span data-stu-id="98e6d-139">The target object being reported.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98e6d-140">返回的值 <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> 是实际引用，而不是类型系统标识符或其他标识符。</span><span class="sxs-lookup"><span data-stu-id="98e6d-140">The value returned by <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> is the actual reference, not a type system identifier or other identifier.</span></span> <span data-ttu-id="98e6d-141">值还可以 `null` 为; 请参见 <xref:System.Windows.Markup.IProvideValueTarget> 。</span><span class="sxs-lookup"><span data-stu-id="98e6d-141">The value can also be `null`; see <xref:System.Windows.Markup.IProvideValueTarget>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="98e6d-142">使用该服务时，不会修改属性引用的对象，也不会修改由 <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> 该对象引用的其他对象的属性，这一点特别重要。</span><span class="sxs-lookup"><span data-stu-id="98e6d-142">When using the service, it is particularly important not to modify the object referenced by the <xref:System.Windows.Markup.IProvideValueTarget.TargetObject%2A> property, or other objects referenced by that object as properties that are not specifically the value-conversion case you are handling.</span></span> <span data-ttu-id="98e6d-143">具体而言，更改目标对象可能导致意外的更改，这会使 WPF 属性系统无效。</span><span class="sxs-lookup"><span data-stu-id="98e6d-143">For WPF specifically, changing the target object could cause unexpected changes that would invalidate the WPF  property system.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
        <related type="Article" href="/dotnet/desktop-wpf/xaml-services/type-converters-and-markup-extensions"><span data-ttu-id="98e6d-144">XAML 的类型转换器和标记扩展</span><span class="sxs-lookup"><span data-stu-id="98e6d-144">Type Converters and Markup Extensions for XAML</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TargetProperty">
      <MemberSignature Language="C#" Value="public object TargetProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TargetProperty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.IProvideValueTarget.TargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TargetProperty As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TargetProperty { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TargetProperty : obj" Usage="System.Windows.Markup.IProvideValueTarget.TargetProperty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="98e6d-145">获取正在报告的目标属性的标识符。</span><span class="sxs-lookup"><span data-stu-id="98e6d-145">Gets an identifier for the target property being reported.</span></span></summary>
        <value><span data-ttu-id="98e6d-146">正在报告的目标属性的标识符。</span><span class="sxs-lookup"><span data-stu-id="98e6d-146">An identifier for the target property being reported.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="98e6d-147">值还可以 `null` 为; 请参见 <xref:System.Windows.Markup.IProvideValueTarget> 。</span><span class="sxs-lookup"><span data-stu-id="98e6d-147">The value can also be `null`; see <xref:System.Windows.Markup.IProvideValueTarget>.</span></span>  
  
## <a name="wpf-usage-notes"></a><span data-ttu-id="98e6d-148">WPF 用法说明</span><span class="sxs-lookup"><span data-stu-id="98e6d-148">WPF Usage Notes</span></span>  
 <span data-ttu-id="98e6d-149">对于依赖属性，默认 WPF 服务可能返回 <xref:System.Windows.DependencyProperty> ，使标记扩展或类型转换器可以使用元数据。</span><span class="sxs-lookup"><span data-stu-id="98e6d-149">For a dependency property, the default WPF service may return a <xref:System.Windows.DependencyProperty>, such that the markup extension or type converter can use metadata.</span></span> <span data-ttu-id="98e6d-150">否则，返回的对象可以为 <xref:System.Reflection.PropertyInfo> CLR 属性的。</span><span class="sxs-lookup"><span data-stu-id="98e6d-150">Otherwise, the returned object can be a <xref:System.Reflection.PropertyInfo> for a CLR property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" />
        <related type="Article" href="/dotnet/desktop-wpf/xaml-services/type-converters-and-markup-extensions"><span data-ttu-id="98e6d-151">XAML 的类型转换器和标记扩展</span><span class="sxs-lookup"><span data-stu-id="98e6d-151">Type Converters and Markup Extensions for XAML</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>
