<Type Name="PhysicalAddress" FullName="System.Net.NetworkInformation.PhysicalAddress">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1936b76a7eba83e82edd4d793087fb0b02b69ed1" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89817481" /></Metadata><TypeSignature Language="C#" Value="public class PhysicalAddress" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit PhysicalAddress extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.NetworkInformation.PhysicalAddress" />
  <TypeSignature Language="VB.NET" Value="Public Class PhysicalAddress" />
  <TypeSignature Language="C++ CLI" Value="public ref class PhysicalAddress" />
  <TypeSignature Language="F#" Value="type PhysicalAddress = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.NetworkInformation</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.2.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeForwardingChain>
    <TypeForwarding From="netstandard" FromVersion="2.1.0.0" To="System.Net.NetworkInformation" ToVersion="5.0.0.0" FrameworkAlternate="net-5.0" />
  </TypeForwardingChain>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="52203-101">提供网络接口（适配器）的媒体访问控制 (MAC) 地址。</span><span class="sxs-lookup"><span data-stu-id="52203-101">Provides the Media Access Control (MAC) address for a network interface (adapter).</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52203-102">MAC 地址或物理地址是唯一标识网络上的每个节点（如计算机或打印机）的硬件地址。</span><span class="sxs-lookup"><span data-stu-id="52203-102">The MAC address, or physical address, is a hardware address that uniquely identifies each node, such as a computer or printer, on a network.</span></span>  
  
 <span data-ttu-id="52203-103">此类的实例由 <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A?displayProperty=nameWithType> 方法返回。</span><span class="sxs-lookup"><span data-stu-id="52203-103">Instances of this class are returned by the <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A?displayProperty=nameWithType> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52203-104">下面的代码示例显示了本地计算机上所有接口的物理地址。</span><span class="sxs-lookup"><span data-stu-id="52203-104">The following code example displays the physical addresses of all interfaces on the local computer.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#2)]
 [!code-csharp[NCLPhysicalAddress#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PhysicalAddress (byte[] address);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.#ctor(System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (address As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PhysicalAddress(cli::array &lt;System::Byte&gt; ^ address);" />
      <MemberSignature Language="F#" Value="new System.Net.NetworkInformation.PhysicalAddress : byte[] -&gt; System.Net.NetworkInformation.PhysicalAddress" Usage="new System.Net.NetworkInformation.PhysicalAddress address" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="address" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="52203-105">包含地址的 <see cref="T:System.Byte" /> 数组。</span><span class="sxs-lookup"><span data-stu-id="52203-105">A <see cref="T:System.Byte" /> array containing the address.</span></span></param>
        <summary><span data-ttu-id="52203-106">初始化 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="52203-106">Initializes a new instance of the <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52203-107">在常见情况下，应用程序不需要调用此构造函数;此类的实例由 <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A> 方法返回。</span><span class="sxs-lookup"><span data-stu-id="52203-107">In common scenarios, applications do not need to call this constructor; instances of this class are returned by the <xref:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress%2A> method.</span></span>  
  
 <span data-ttu-id="52203-108">请注意，您还可以使用 <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> 方法来创建的新实例 <xref:System.Net.NetworkInformation.PhysicalAddress> 。</span><span class="sxs-lookup"><span data-stu-id="52203-108">Note that you can also use the <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> method to create a new instance of <xref:System.Net.NetworkInformation.PhysicalAddress>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52203-109">下面的代码示例创建一个新的 <xref:System.Net.NetworkInformation.PhysicalAddress> 对象。</span><span class="sxs-lookup"><span data-stu-id="52203-109">The following code example creates a new <xref:System.Net.NetworkInformation.PhysicalAddress> object.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#4)]
 [!code-csharp[NCLPhysicalAddress#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object comparand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object comparand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (comparand As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ comparand);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="physicalAddress.Equals comparand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparand" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="comparand"><span data-ttu-id="52203-110">要与当前实例进行比较的 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" />。</span><span class="sxs-lookup"><span data-stu-id="52203-110">The <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> to compare to the current instance.</span></span></param>
        <summary><span data-ttu-id="52203-111">比较两个 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="52203-111">Compares two <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> instances.</span></span></summary>
        <returns><span data-ttu-id="52203-112">如果此实例和指定的实例包含相同的地址，则为 <see langword="true" />，否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52203-112"><see langword="true" /> if this instance and the specified instance contain the same address; otherwise <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="52203-113">下面的代码示例对两个实例进行比较 <xref:System.Net.NetworkInformation.PhysicalAddress> 。</span><span class="sxs-lookup"><span data-stu-id="52203-113">The following code example compares two <xref:System.Net.NetworkInformation.PhysicalAddress> instances.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#3)]
 [!code-csharp[NCLPhysicalAddress#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAddressBytes">
      <MemberSignature Language="C#" Value="public byte[] GetAddressBytes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetAddressBytes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAddressBytes () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Byte&gt; ^ GetAddressBytes();" />
      <MemberSignature Language="F#" Value="member this.GetAddressBytes : unit -&gt; byte[]" Usage="physicalAddress.GetAddressBytes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="52203-114">返回当前实例的地址。</span><span class="sxs-lookup"><span data-stu-id="52203-114">Returns the address of the current instance.</span></span></summary>
        <returns><span data-ttu-id="52203-115">包含地址的 <see cref="T:System.Byte" /> 数组。</span><span class="sxs-lookup"><span data-stu-id="52203-115">A <see cref="T:System.Byte" /> array containing the address.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="52203-116">下面的代码示例调用此方法来检索的地址 <xref:System.Net.NetworkInformation.PhysicalAddress> 并设置要显示的地址的格式。</span><span class="sxs-lookup"><span data-stu-id="52203-116">The following code example calls this method to retrieve the address of a <xref:System.Net.NetworkInformation.PhysicalAddress> and formats the address for display.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#2)]
 [!code-csharp[NCLPhysicalAddress#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="physicalAddress.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="52203-117">返回物理地址的哈希值。</span><span class="sxs-lookup"><span data-stu-id="52203-117">Returns the hash value of a physical address.</span></span></summary>
        <returns><span data-ttu-id="52203-118">整数哈希值。</span><span class="sxs-lookup"><span data-stu-id="52203-118">An integer hash value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static readonly System.Net.NetworkInformation.PhysicalAddress None;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Net.NetworkInformation.PhysicalAddress None" />
      <MemberSignature Language="DocId" Value="F:System.Net.NetworkInformation.PhysicalAddress.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly None As PhysicalAddress " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Net::NetworkInformation::PhysicalAddress ^ None;" />
      <MemberSignature Language="F#" Value=" staticval mutable None : System.Net.NetworkInformation.PhysicalAddress" Usage="System.Net.NetworkInformation.PhysicalAddress.None" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PhysicalAddress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="52203-119">返回一个具有零长度地址的新 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="52203-119">Returns a new <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> instance with a zero length address.</span></span> <span data-ttu-id="52203-120">此字段为只读。</span><span class="sxs-lookup"><span data-stu-id="52203-120">This field is read-only.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52203-121"><xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A>如果指定 address，则该方法返回 <xref:System.Net.NetworkInformation.PhysicalAddress.None> `null` 。</span><span class="sxs-lookup"><span data-stu-id="52203-121">The <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> method returns <xref:System.Net.NetworkInformation.PhysicalAddress.None> if you specify `null` address.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52203-122">下面的代码示例演示如何使用此字段来测试地址分析的结果。</span><span class="sxs-lookup"><span data-stu-id="52203-122">The following code example demonstrates using this field to test the result of parsing an address.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#5)]
 [!code-csharp[NCLPhysicalAddress#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Net.NetworkInformation.PhysicalAddress? Parse (ReadOnlySpan&lt;char&gt; address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.NetworkInformation.PhysicalAddress Parse(valuetype System.ReadOnlySpan`1&lt;char&gt; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.ReadOnlySpan{System.Char})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (address As ReadOnlySpan(Of Char)) As PhysicalAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::NetworkInformation::PhysicalAddress ^ Parse(ReadOnlySpan&lt;char&gt; address);" />
      <MemberSignature Language="F#" Value="static member Parse : ReadOnlySpan&lt;char&gt; -&gt; System.Net.NetworkInformation.PhysicalAddress" Usage="System.Net.NetworkInformation.PhysicalAddress.Parse address" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PhysicalAddress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="52203-123">一个范围，包含用于初始化由此方法返回的 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 实例的地址。</span><span class="sxs-lookup"><span data-stu-id="52203-123">A span containing the address that will be used to initialize the <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> instance returned by this method.</span></span></param>
        <summary><span data-ttu-id="52203-124">分析指定的范围，并将其内容存储为由此方法返回的 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 的地址字节。</span><span class="sxs-lookup"><span data-stu-id="52203-124">Parses the specified span and stores its contents as the address bytes of the <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> returned by this method.</span></span></summary>
        <returns><span data-ttu-id="52203-125">具有指定地址的 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="52203-125">A <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> instance with the specified address.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52203-126">`address`参数必须包含一个字符串，该字符串只能包含数字和小写字母作为十六进制数字。</span><span class="sxs-lookup"><span data-stu-id="52203-126">The `address` parameter must contain a string that can only consist of numbers and upper-case letters as hexadecimal digits.</span></span> <span data-ttu-id="52203-127">可接受的字符串格式的一些示例如下所示：</span><span class="sxs-lookup"><span data-stu-id="52203-127">Some examples of string formats that are acceptable are as follows:</span></span>  
  
 `001122334455`  
  
 `00-11-22-33-44-55`  
  
 `F0-E1-D2-C3-B4-A5`  
  
 <span data-ttu-id="52203-128">请注意，包含的地址 `f0-e1-d2-c3-b4-a5` 将无法分析并引发异常。</span><span class="sxs-lookup"><span data-stu-id="52203-128">Note that an address that contains `f0-e1-d2-c3-b4-a5` will fail to parse and throw an exception.</span></span>  
  
 <span data-ttu-id="52203-129">使用 <xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A> 方法从现有实例中检索地址 <xref:System.Net.NetworkInformation.PhysicalAddress> 。</span><span class="sxs-lookup"><span data-stu-id="52203-129">Use the <xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A> method to retrieve the address from an existing <xref:System.Net.NetworkInformation.PhysicalAddress> instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52203-130">下面的代码示例 <xref:System.Net.NetworkInformation.PhysicalAddress> 通过调用方法来创建一个 <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> 实例。</span><span class="sxs-lookup"><span data-stu-id="52203-130">The following code example creates a <xref:System.Net.NetworkInformation.PhysicalAddress> instance by calling the <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> method.</span></span>  
  
 [!code-csharp[NCLPhysicalAddress#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="52203-131"><paramref name="address" /> 包含非法硬件地址或包含格式不正确的字符串。</span><span class="sxs-lookup"><span data-stu-id="52203-131"><paramref name="address" /> contains an illegal hardware address or contains a string in the incorrect format.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static System.Net.NetworkInformation.PhysicalAddress Parse (string? address);" FrameworkAlternate="net-5.0" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.NetworkInformation.PhysicalAddress Parse(string address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (address As String) As PhysicalAddress" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::NetworkInformation::PhysicalAddress ^ Parse(System::String ^ address);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; System.Net.NetworkInformation.PhysicalAddress" Usage="System.Net.NetworkInformation.PhysicalAddress.Parse address" />
      <MemberSignature Language="C#" Value="public static System.Net.NetworkInformation.PhysicalAddress Parse (string address);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netcore-3.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.NetworkInformation.PhysicalAddress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="52203-132">一个 <see cref="T:System.String" />，包含用于初始化由此方法返回的 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 实例的地址。</span><span class="sxs-lookup"><span data-stu-id="52203-132">A <see cref="T:System.String" /> containing the address that will be used to initialize the <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> instance returned by this method.</span></span></param>
        <summary><span data-ttu-id="52203-133">分析指定的 <see cref="T:System.String" /> 并将其内容存储为由此方法返回的 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 的地址字节。</span><span class="sxs-lookup"><span data-stu-id="52203-133">Parses the specified <see cref="T:System.String" /> and stores its contents as the address bytes of the <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> returned by this method.</span></span></summary>
        <returns><span data-ttu-id="52203-134">具有指定地址的 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="52203-134">A <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> instance with the specified address.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52203-135">`address`参数必须包含一个字符串，该字符串只能包含数字和小写字母作为十六进制数字。</span><span class="sxs-lookup"><span data-stu-id="52203-135">The `address` parameter must contain a string that can only consist of numbers and upper-case letters as hexadecimal digits.</span></span> <span data-ttu-id="52203-136">可接受的字符串格式的一些示例如下所示：</span><span class="sxs-lookup"><span data-stu-id="52203-136">Some examples of string formats that are acceptable are as follows:</span></span>  
  
 `001122334455`  
  
 `00-11-22-33-44-55`  
  
 `F0-E1-D2-C3-B4-A5`  
  
 <span data-ttu-id="52203-137">请注意，包含的地址 `f0-e1-d2-c3-b4-a5` 将无法分析并引发异常。</span><span class="sxs-lookup"><span data-stu-id="52203-137">Note that an address that contains `f0-e1-d2-c3-b4-a5` will fail to parse and throw an exception.</span></span>  
  
 <span data-ttu-id="52203-138">使用 <xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A> 方法从现有实例中检索地址 <xref:System.Net.NetworkInformation.PhysicalAddress> 。</span><span class="sxs-lookup"><span data-stu-id="52203-138">Use the <xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A> method to retrieve the address from an existing <xref:System.Net.NetworkInformation.PhysicalAddress> instance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52203-139">下面的代码示例 <xref:System.Net.NetworkInformation.PhysicalAddress> 通过调用方法来创建一个 <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> 实例。</span><span class="sxs-lookup"><span data-stu-id="52203-139">The following code example creates a <xref:System.Net.NetworkInformation.PhysicalAddress> instance by calling the <xref:System.Net.NetworkInformation.PhysicalAddress.Parse%2A> method.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#5)]
 [!code-csharp[NCLPhysicalAddress#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException"><span data-ttu-id="52203-140"><paramref name="address" /> 包含非法硬件地址或包含格式不正确的字符串。</span><span class="sxs-lookup"><span data-stu-id="52203-140"><paramref name="address" /> contains an illegal hardware address or contains a string in the incorrect format.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="physicalAddress.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.2.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="52203-141">返回此实例的地址的 <see cref="T:System.String" /> 表示形式。</span><span class="sxs-lookup"><span data-stu-id="52203-141">Returns the <see cref="T:System.String" /> representation of the address of this instance.</span></span></summary>
        <returns><span data-ttu-id="52203-142">一个 <see cref="T:System.String" />，其中包含此实例中所含的地址。</span><span class="sxs-lookup"><span data-stu-id="52203-142">A <see cref="T:System.String" /> containing the address contained in this instance.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="52203-143">下面的代码示例演示如何在实例中显示地址 <xref:System.Net.NetworkInformation.PhysicalAddress> 。</span><span class="sxs-lookup"><span data-stu-id="52203-143">The following code example demonstrates displaying the address in a <xref:System.Net.NetworkInformation.PhysicalAddress> instance.</span></span>  
  
 [!code-cpp[NCLPhysicalAddress#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NCLPhysicalAddress/CPP/NCLPhysicalAddress.cpp#3)]
 [!code-csharp[NCLPhysicalAddress#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLPhysicalAddress/CS/physaddresstester.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (ReadOnlySpan&lt;char&gt; address, out System.Net.NetworkInformation.PhysicalAddress? value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(valuetype System.ReadOnlySpan`1&lt;char&gt; address, [out] class System.Net.NetworkInformation.PhysicalAddress&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.TryParse(System.ReadOnlySpan{System.Char},System.Net.NetworkInformation.PhysicalAddress@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (address As ReadOnlySpan(Of Char), ByRef value As PhysicalAddress) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(ReadOnlySpan&lt;char&gt; address, [Runtime::InteropServices::Out] System::Net::NetworkInformation::PhysicalAddress ^ % value);" />
      <MemberSignature Language="F#" Value="static member TryParse : ReadOnlySpan&lt;char&gt; * PhysicalAddress -&gt; bool" Usage="System.Net.NetworkInformation.PhysicalAddress.TryParse (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.ReadOnlySpan&lt;System.Char&gt;" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="value" Type="System.Net.NetworkInformation.PhysicalAddress" RefType="out" Index="1" FrameworkAlternate="net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="52203-144">一个范围，包含用于初始化由此方法返回的 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 实例的地址。</span><span class="sxs-lookup"><span data-stu-id="52203-144">A span containing the address that will be used to initialize the <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> instance returned by this method.</span></span></param>
        <param name="value"><span data-ttu-id="52203-145">当此方法返回时，如果转换成功，则包含与 <paramref name="address" /> 中所包含的地址等效的 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 实例；如果转换失败，则包含 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52203-145">When this method returns, contains the <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> instance equivalent of the address contained in <paramref name="address" />, if the conversion succeeded, or <see langword="null" /> if the conversion failed.</span></span> <span data-ttu-id="52203-146">此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</span><span class="sxs-lookup"><span data-stu-id="52203-146">This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</span></span></param>
        <summary><span data-ttu-id="52203-147">尝试将硬件地址的范围表示形式转换为 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="52203-147">Tries to convert the span representation of a hardware address to a <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> instance.</span></span> <span data-ttu-id="52203-148">一个指示转换是否成功的返回值。</span><span class="sxs-lookup"><span data-stu-id="52203-148">A return value indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="52203-149">如果 <see langword="true" /> 成功转换，则为 <paramref name="address" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52203-149"><see langword="true" /> if <paramref name="address" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52203-150">`address`参数必须包含一个字符串，该字符串只能包含数字和小写字母作为十六进制数字。</span><span class="sxs-lookup"><span data-stu-id="52203-150">The `address` parameter must contain a string that can only consist of numbers and upper-case letters as hexadecimal digits.</span></span> <span data-ttu-id="52203-151">合法的字符串格式的一些示例如下所示：</span><span class="sxs-lookup"><span data-stu-id="52203-151">Some examples of string formats that are legal are as follows:</span></span>  
  
 `001122334455`  
  
 `00-11-22-33-44-55`  
  
 `F0-E1-D2-C3-B4-A5`  
  
 <span data-ttu-id="52203-152">请注意，包含的地址 `f0-e1-d2-c3-b4-a5` 是非法的。</span><span class="sxs-lookup"><span data-stu-id="52203-152">Note that an address that contains `f0-e1-d2-c3-b4-a5` is illegal.</span></span>  
  
 <span data-ttu-id="52203-153">使用 <xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A> 方法从现有实例中检索地址 <xref:System.Net.NetworkInformation.PhysicalAddress> 。</span><span class="sxs-lookup"><span data-stu-id="52203-153">Use the <xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A> method to retrieve the address from an existing <xref:System.Net.NetworkInformation.PhysicalAddress> instance.</span></span>  
   
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryParse">
      <MemberSignature Language="C#" Value="public static bool TryParse (string address, out System.Net.NetworkInformation.PhysicalAddress value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryParse(string address, [out] class System.Net.NetworkInformation.PhysicalAddress&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.NetworkInformation.PhysicalAddress.TryParse(System.String,System.Net.NetworkInformation.PhysicalAddress@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryParse (address As String, ByRef value As PhysicalAddress) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryParse(System::String ^ address, [Runtime::InteropServices::Out] System::Net::NetworkInformation::PhysicalAddress ^ % value);" />
      <MemberSignature Language="F#" Value="static member TryParse : string * PhysicalAddress -&gt; bool" Usage="System.Net.NetworkInformation.PhysicalAddress.TryParse (address, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.NetworkInformation</AssemblyName>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" Index="0" FrameworkAlternate="net-5.0" />
        <Parameter Name="value" Type="System.Net.NetworkInformation.PhysicalAddress" RefType="out" Index="1" FrameworkAlternate="net-5.0">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Diagnostics.CodeAnalysis.NotNullWhen(true)]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Diagnostics.CodeAnalysis.NotNullWhen(true)&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="address"><span data-ttu-id="52203-154">一个字符串，包含用于初始化由此方法返回的 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 实例的地址。</span><span class="sxs-lookup"><span data-stu-id="52203-154">A string containing the address that will be used to initialize the <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> instance returned by this method.</span></span></param>
        <param name="value"><span data-ttu-id="52203-155">当此方法返回时，如果转换成功，则包含与 <paramref name="address" /> 中所包含的地址等效的 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 实例；如果转换失败，则包含 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="52203-155">When this method returns, contains the <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> instance equivalent of the address contained in <paramref name="address" />, if the conversion succeeded, or <see langword="null" /> if the conversion failed.</span></span> <span data-ttu-id="52203-156">如果 <paramref name="address" /> 是 <see langword="null" />，则它包含 <see cref="T:System.Net.NetworkInformation.PhysicalAddress.None" />。</span><span class="sxs-lookup"><span data-stu-id="52203-156">If the <paramref name="address" /> is <see langword="null" /> it contains <see cref="T:System.Net.NetworkInformation.PhysicalAddress.None" />.</span></span> <span data-ttu-id="52203-157">此参数未经初始化即进行传递；最初在 <paramref name="result" /> 中提供的任何值都会被覆盖。</span><span class="sxs-lookup"><span data-stu-id="52203-157">This parameter is passed uninitialized; any value originally supplied in <paramref name="result" /> will be overwritten.</span></span></param>
        <summary><span data-ttu-id="52203-158">尝试将硬件地址的字符串表示形式转换为 <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> 实例。</span><span class="sxs-lookup"><span data-stu-id="52203-158">Tries to convert the string representation of a hardware address to a <see cref="T:System.Net.NetworkInformation.PhysicalAddress" /> instance.</span></span> <span data-ttu-id="52203-159">一个指示转换是否成功的返回值。</span><span class="sxs-lookup"><span data-stu-id="52203-159">A return value indicates whether the conversion succeeded.</span></span></summary>
        <returns><span data-ttu-id="52203-160">如果 <see langword="true" /> 成功转换，则为 <paramref name="address" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="52203-160"><see langword="true" /> if <paramref name="address" /> was converted successfully; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52203-161">`address`参数必须包含一个字符串，该字符串只能包含数字和小写字母作为十六进制数字。</span><span class="sxs-lookup"><span data-stu-id="52203-161">The `address` parameter must contain a string that can only consist of numbers and upper-case letters as hexadecimal digits.</span></span> <span data-ttu-id="52203-162">合法的字符串格式的一些示例如下所示：</span><span class="sxs-lookup"><span data-stu-id="52203-162">Some examples of string formats that are legal are as follows:</span></span>  
  
 `001122334455`  
  
 `00-11-22-33-44-55`  
  
 `F0-E1-D2-C3-B4-A5`  
  
 <span data-ttu-id="52203-163">请注意，包含的地址 `f0-e1-d2-c3-b4-a5` 是非法的。</span><span class="sxs-lookup"><span data-stu-id="52203-163">Note that an address that contains `f0-e1-d2-c3-b4-a5` is illegal.</span></span>  
  
 <span data-ttu-id="52203-164">使用 <xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A> 方法从现有实例中检索地址 <xref:System.Net.NetworkInformation.PhysicalAddress> 。</span><span class="sxs-lookup"><span data-stu-id="52203-164">Use the <xref:System.Net.NetworkInformation.PhysicalAddress.GetAddressBytes%2A> method to retrieve the address from an existing <xref:System.Net.NetworkInformation.PhysicalAddress> instance.</span></span>  
   
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
