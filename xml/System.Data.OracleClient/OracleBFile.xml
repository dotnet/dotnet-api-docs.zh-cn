<Type Name="OracleBFile" FullName="System.Data.OracleClient.OracleBFile">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fac9b11d9ed4984e89e94babd84b8f6b672d4970" /><Meta Name="ms.sourcegitcommit" Value="397961a0164281b579f68064c3bb66c071f374d9" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/14/2020" /><Meta Name="ms.locfileid" Value="78814481" /></Metadata><TypeSignature Language="C#" Value="public sealed class OracleBFile : System.IO.Stream, ICloneable, System.Data.SqlTypes.INullable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OracleBFile extends System.IO.Stream implements class System.Data.SqlTypes.INullable, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.OracleClient.OracleBFile" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OracleBFile&#xA;Inherits Stream&#xA;Implements ICloneable, INullable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OracleBFile sealed : System::IO::Stream, ICloneable, System::Data::SqlTypes::INullable" />
  <TypeSignature Language="F#" Value="type OracleBFile = class&#xA;    inherit Stream&#xA;    interface ICloneable&#xA;    interface IDisposable&#xA;    interface INullable" FrameworkAlternate="netframework-1.1" />
  <TypeSignature Language="F#" Value="type OracleBFile = class&#xA;    inherit Stream&#xA;    interface ICloneable&#xA;    interface INullable&#xA;    interface IDisposable" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <AssemblyInfo>
    <AssemblyName>System.Data.OracleClient</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.SqlTypes.INullable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示托管 <see cref="T:System.Data.OracleClient.OracleBFile" /> 对象，该对象的设计旨在与 Oracle <see langword="BFILE" /> 数据类型配合使用。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oracle `BFILE` 数据类型是一种 oracle `LOB` 数据类型，包含对二进制数据的引用，其最大大小为 4 gb。 Oracle `BFILE` 与其他 oracle 数据类型的不同之处在于 `LOB` ，它的数据存储在操作系统而不是服务器上的物理文件中。 请注意， `BFILE` 数据类型提供对数据的只读访问。 因此，不支持从类继承的面向编写的方法 <xref:System.IO.Stream> 。  
  
 数据类型的其他特征与 `BFILE` `LOB` 数据类型区分开来是：  
  
-   包含非结构化数据。  
  
-   支持服务器端分块。  
  
-   使用引用复制语义。 例如，如果在上执行复制操作 `BFILE` ，则仅 `BFILE` 复制定位符（对文件的引用）。 而不会复制文件中的数据。  
  
 `BFILE`数据类型应用于引用 `LOB` 大小较大的，因此，在数据库中存储不切合实际。 `BFILE`与数据类型相比，使用数据类型存在客户端、服务器和通信开销 `LOB` 。 `BFILE`如果只需要获取少量的数据，则访问更有效。 如果需要获取整个对象，则可以更高效地访问数据库驻留 `LOB` 。  
  
 每个非 NULL <xref:System.Data.OracleClient.OracleBFile> 对象都与定义基础物理文件位置的两个实体相关联：  
  
-   一个 Oracle DIRECTORY 对象，它是文件系统中一个目录的数据库别名，以及  
  
-   基础物理文件的文件名，它位于与 DIRECTORY 对象关联的目录中。  
  
 创建后 `BFILE` ，可以 <xref:System.Data.OracleClient.OracleBFile> 使用或方法检索对象的形式的定位符 <xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A> <xref:System.Data.OracleClient.OracleCommand.ExecuteScalar%2A> 。  
  
 若要获取 <xref:System.Data.OracleClient.OracleBFile> 对象，请调用 <xref:System.Data.OracleClient.OracleDataReader.GetOracleBFile%2A> 方法。  
  
 与对象关联的物理文件在 <xref:System.Data.OracleClient.OracleBFile> 您尝试访问它之前无需存在。 应用程序可以将绑定 <xref:System.Data.OracleClient.OracleBFile> 到不存在的文件，在预期位置创建物理文件，然后调用 <xref:System.Data.OracleClient.OracleBFile.Read%2A> 。  
  
 使用或方法访问已关闭的任何尝试 <xref:System.Data.OracleClient.OracleBFile> <xref:System.Data.OracleClient.OracleBFile.Read%2A> <xref:System.Data.OracleClient.OracleBFile.Seek%2A> <xref:System.Data.OracleClient.OracleBFile> 都会自动重新打开流。  
  
 下面的 c # 示例演示如何 `BFILE` 在 Oracle 表中创建，然后以对象的形式检索它 <xref:System.Data.OracleClient.OracleBFile> 。 该示例演示如何使用 <xref:System.Data.OracleClient.OracleDataReader> 对象以及 <xref:System.Data.OracleClient.OracleBFile> <xref:System.Data.OracleClient.OracleBFile.Seek%2A> 和 <xref:System.Data.OracleClient.OracleBFile.Read%2A> 方法。  
  
 [!code-csharp[DataWorks OracleClient.BFile#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks OracleClient.BFile/CS/source.cs#1)]  
  
 有关创建和使用 Oracle 的详细信息 `BFILE` ，请参阅 oracle 文档中的相应主题。  
  
> [!NOTE]
>  `BeginWrite` `EndWrite` `WriteByte` `System.IO.Stream` 由于 `BFILE` 数据类型是只读的，因此不支持从类继承的、和方法。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleBFile.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Data.OracleClient.OracleBFile.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see langword="BFILE" /> 流是否可读。</summary>
        <value>如果 <see langword="false" /> 已关闭或已释放，则为 <see langword="BFILE" />；否则为 <see langword="true" />。 对于 <see cref="F:System.Data.OracleClient.OracleBFile.Null" />，总是为 <see langword="true" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleBFile.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.Data.OracleClient.OracleBFile.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示能否执行向前和向后查找操作。</summary>
        <value>如果 <see langword="false" /> 已关闭或已释放，则为 <see langword="BFILE" />；否则为 <see langword="true" />。 对于 <see cref="F:System.Data.OracleClient.OracleBFile.Null" />，总是为 <see langword="true" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleBFile.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Data.OracleClient.OracleBFile.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示对象是否支持写入。</summary>
        <value>因为 Oracle <see langword="false" /> 数据类型是只读的，所以始终返回 <see langword="BFILE" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleBFile.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="oracleBFile.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建此 <see cref="T:System.Data.OracleClient.OracleBFile" /> 对象的副本，该副本所关联的物理文件与原始对象所关联的相同。</summary>
        <returns>一个新 <see cref="T:System.Data.OracleClient.OracleBFile" /> 对象，该对象所关联的物理文件与原始 <see langword="OracleBFile" /> 对象所关联的相同。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新对象的属性 <xref:System.Data.OracleClient.OracleBFile> 最初具有与原始对象相同的值。 但是，在 <xref:System.Data.OracleClient.OracleBFile.Clone%2A> 完成后，每个 <xref:System.Data.OracleClient.OracleBFile> 对象都相互独立。 例如，更改原始属性的值不 <xref:System.Data.OracleClient.OracleBFile.Position%2A> <xref:System.Data.OracleClient.OracleBFile> 会更改副本上的的值 <xref:System.Data.OracleClient.OracleBFile.Position%2A> 。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OracleClient.OracleConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleBFile.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As OracleConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleConnection ^ Connection { System::Data::OracleClient::OracleConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Connection : System.Data.OracleClient.OracleConnection" Usage="System.Data.OracleClient.OracleBFile.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由该 <see cref="T:System.Data.OracleClient.OracleConnection" /> 实例使用的 <see cref="T:System.Data.OracleClient.OracleBFile" />。</summary>
        <value>到数据源的连接。 默认值为 null 。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>将数据从此 <see cref="T:System.Data.OracleClient.OracleBFile" /> 复制到目标 <see cref="T:System.Data.OracleClient.OracleLob" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (System.Data.OracleClient.OracleLob destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(class System.Data.OracleClient.OracleLob destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleBFile.CopyTo(System.Data.OracleClient.OracleLob)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (destination As OracleLob) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(System::Data::OracleClient::OracleLob ^ destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Data.OracleClient.OracleLob -&gt; int64" Usage="oracleBFile.CopyTo destination" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="override this.CopyTo : System.Data.OracleClient.OracleLob -&gt; int64" Usage="oracleBFile.CopyTo destination" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
      </Parameters>
      <Docs>
        <param name="destination">目标 <see cref="T:System.Data.OracleClient.OracleLob" />。</param>
        <summary>将此 <see cref="T:System.Data.OracleClient.OracleBFile" /> 的全部内容复制到目标 <see cref="T:System.Data.OracleClient.OracleLob" /> 的开始位置。</summary>
        <returns>已复制的字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 源和目标的基础数据类型 <xref:System.Data.OracleClient.OracleBFile> <xref:System.Data.OracleClient.OracleLob> 必须兼容。 例如，不能将二进制数据复制到 <xref:System.Data.OracleClient.OracleLob> 具有字符数据类型的目标。  
  
 您必须对目标具有写入访问权限， <xref:System.Data.OracleClient.OracleLob> <xref:System.Data.OracleClient.OracleBFile.CopyTo%2A> 操作才能正确执行。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">目标 <see langword="OracleLob" /> 为空对象引用。</exception>
        <exception cref="T:System.InvalidOperationException">该目标为空 <see langword="OracleLob" />。  
  
- 或 - 
与该 <see langword="OracleBFile" /> 相关联的连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">已关闭或已释放 <see langword="OracleBFile" /> 对象。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (System.Data.OracleClient.OracleLob destination, long destinationOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(class System.Data.OracleClient.OracleLob destination, int64 destinationOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleBFile.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (destination As OracleLob, destinationOffset As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(System::Data::OracleClient::OracleLob ^ destination, long destinationOffset);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Data.OracleClient.OracleLob * int64 -&gt; int64" Usage="oracleBFile.CopyTo (destination, destinationOffset)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="override this.CopyTo : System.Data.OracleClient.OracleLob * int64 -&gt; int64" Usage="oracleBFile.CopyTo (destination, destinationOffset)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
        <Parameter Name="destinationOffset" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="destination">目标 <see cref="T:System.Data.OracleClient.OracleLob" />。</param>
        <param name="destinationOffset">要复制到的偏移量。</param>
        <summary>将此 <see cref="T:System.Data.OracleClient.OracleBFile" /> 的全部内容复制到目标 <see cref="T:System.Data.OracleClient.OracleLob" /> 中指定的偏移位置。</summary>
        <returns>已复制的字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 源和目标的基础数据类型 <xref:System.Data.OracleClient.OracleBFile> <xref:System.Data.OracleClient.OracleLob> 必须兼容。 例如，不能将二进制数据复制到 <xref:System.Data.OracleClient.OracleLob> 具有字符数据类型的目标。  
  
 您必须对目标具有写入访问权限， <xref:System.Data.OracleClient.OracleLob> <xref:System.Data.OracleClient.OracleBFile.CopyTo%2A> 操作才能正确执行。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">目标 <see langword="OracleLob" /> 为空对象引用。</exception>
        <exception cref="T:System.InvalidOperationException">该目标为空 <see langword="OracleLob" />。  
  
- 或 - 
与该 <see langword="OracleBFile" /> 相关联的连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">已关闭或已释放 <see langword="OracleBFile" /> 对象。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (long sourceOffset, System.Data.OracleClient.OracleLob destination, long destinationOffset, long amount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(int64 sourceOffset, class System.Data.OracleClient.OracleLob destination, int64 destinationOffset, int64 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleBFile.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (sourceOffset As Long, destination As OracleLob, destinationOffset As Long, amount As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(long sourceOffset, System::Data::OracleClient::OracleLob ^ destination, long destinationOffset, long amount);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : int64 * System.Data.OracleClient.OracleLob * int64 * int64 -&gt; int64" Usage="oracleBFile.CopyTo (sourceOffset, destination, destinationOffset, amount)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="override this.CopyTo : int64 * System.Data.OracleClient.OracleLob * int64 * int64 -&gt; int64" Usage="oracleBFile.CopyTo (sourceOffset, destination, destinationOffset, amount)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceOffset" Type="System.Int64" />
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
        <Parameter Name="destinationOffset" Type="System.Int64" />
        <Parameter Name="amount" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="sourceOffset">要从中复制的偏移量。</param>
        <param name="destination">目标 <see cref="T:System.Data.OracleClient.OracleLob" />。</param>
        <param name="destinationOffset">要复制到的偏移量。</param>
        <param name="amount">要复制的数据数量（以字节为单位）。</param>
        <summary>通过指定数据数量、源偏移量和目标偏移量，从此 <see cref="T:System.Data.OracleClient.OracleBFile" /> 复制到目标 <see cref="T:System.Data.OracleClient.OracleLob" />。</summary>
        <returns>已复制的字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 源和目标的基础数据类型 <xref:System.Data.OracleClient.OracleBFile> <xref:System.Data.OracleClient.OracleLob> 必须兼容。 例如，不能将二进制数据复制到 <xref:System.Data.OracleClient.OracleLob> 具有字符数据类型的目标。  
  
 您必须对目标具有写入访问权限， <xref:System.Data.OracleClient.OracleLob> <xref:System.Data.OracleClient.OracleBFile.CopyTo%2A> 操作才能正确执行。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">数量参数的值小于零或大于 4 GB。</exception>
        <exception cref="T:System.ArgumentNullException">目标 <see langword="OracleLob" /> 为空对象引用。</exception>
        <exception cref="T:System.InvalidOperationException">该目标为空 <see langword="OracleLob" />。  
  
- 或 - 
与该 <see langword="OracleBFile" /> 相关联的连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">已关闭或已释放 <see langword="OracleBFile" /> 对象。</exception>
      </Docs>
    </Member>
    <Member MemberName="DirectoryName">
      <MemberSignature Language="C#" Value="public string DirectoryName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DirectoryName" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleBFile.DirectoryName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DirectoryName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DirectoryName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DirectoryName : string" Usage="System.Data.OracleClient.OracleBFile.DirectoryName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取与 <see cref="T:System.Data.OracleClient.OracleBFile" /> 对象相关联的 DIRECTORY 对象的名称。</summary>
        <value>DIRECTORY 对象的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 每个非 NULL <xref:System.Data.OracleClient.OracleBFile> 对象都与定义基础物理文件位置的两个实体相关联：  
  
-   一个 Oracle DIRECTORY 对象，它是文件系统中一个目录的数据库别名，以及  
  
-   基础物理文件的文件名，它位于与 DIRECTORY 对象关联的目录中。  
  
 <xref:System.Data.OracleClient.OracleBFile.DirectoryName%2A>属性从 Oracle 数据库中返回目录对象的名称。  
  
 有关创建和使用 Oracle 的详细信息 `BFILE` ，请参阅 oracle 文档中的相应主题。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">尝试对已关闭或已释放的 <see langword="DirectoryName" /> 对象调用 <see langword="OracleBFile" />。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleBFile.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="oracleBFile.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放此对象使用的所有资源。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleBFile.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="oracleBFile.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileExists">
      <MemberSignature Language="C#" Value="public bool FileExists { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FileExists" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleBFile.FileExists" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileExists As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FileExists { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.FileExists : bool" Usage="System.Data.OracleClient.OracleBFile.FileExists" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示操作系统中是否存在包含 <see langword="BFILE" /> 数据的物理文件。</summary>
        <value>如果存在包含 <see langword="true" /> 数据的物理文件，则为 <see langword="BFILE" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">已关闭或已释放 <see cref="T:System.Data.OracleClient.OracleBFile" /> 对象。</exception>
        <exception cref="T:System.InvalidOperationException">与 <see langword="BFILE" /> 相关联的连接已关闭。</exception>
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleBFile.FileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileName : string" Usage="System.Data.OracleClient.OracleBFile.FileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see langword="BFILE" /> 的名称（不带路径）。</summary>
        <value>BFILE 的名称。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于 <xref:System.Data.OracleClient.OracleBFile.Null> ，则返回空字符串。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">已关闭或已释放 <see cref="T:System.Data.OracleClient.OracleBFile" /> 对象。</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleBFile.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="oracleBFile.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>目前尚不支持。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public bool IsNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNull" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleBFile.IsNull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNull : bool" Usage="System.Data.OracleClient.OracleBFile.IsNull" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.SqlTypes.INullable.IsNull</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Data.OracleClient.OracleBFile" /> 是否为一个 <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> 流。</summary>
        <value>如果 <see cref="T:System.Data.OracleClient.OracleBFile" /> 是 <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> 流，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleBFile.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Data.OracleClient.OracleBFile.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值返回与 <see cref="T:System.Data.OracleClient.OracleBFile" /> 对象关联的物理文件的长度（以字节为单位）。</summary>
        <value>用字节表示物理文件长度的长值。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">关闭或释放该流后，调用方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static readonly System.Data.OracleClient.OracleBFile Null;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Data.OracleClient.OracleBFile Null" />
      <MemberSignature Language="DocId" Value="F:System.Data.OracleClient.OracleBFile.Null" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Null As OracleBFile " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Data::OracleClient::OracleBFile ^ Null;" />
      <MemberSignature Language="F#" Value=" staticval mutable Null : System.Data.OracleClient.OracleBFile" Usage="System.Data.OracleClient.OracleBFile.Null" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleBFile</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示空 <see cref="T:System.Data.OracleClient.OracleBFile" /> 对象，该对象没有绑定到物理文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleBFile.Null>如果要对执行比较操作 <xref:System.Data.OracleClient.OracleBFile> 以确定为空性，则会很有用。  
  
 对对象执行读取操作的任何尝试都会 <xref:System.Data.OracleClient.OracleBFile.Null> 成功，但不会返回任何数据。 对对象执行写操作的任何尝试 <xref:System.Data.OracleClient.OracleBFile.Null> 都会生成异常。 选择 `BFILE` 包含 null 值的列时，将 <xref:System.Data.OracleClient.OracleBFile.Null> 返回。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleBFile.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.Data.OracleClient.OracleBFile.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Data.OracleClient.OracleBFile" /> 流中的当前读取位置。</summary>
        <value><see cref="T:System.Data.OracleClient.OracleBFile" /> 流中的当前位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 不支持查找超出流长度的任何位置。  
  
 `Position`属性不跟踪流中已使用的、跳过的或两个字节的字节数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">尝试用一个负值或大于该流长度的值设置位置。</exception>
        <exception cref="T:System.ObjectDisposedException">关闭或释放该流后，调用方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleBFile.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="oracleBFile.Read (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">字节数组。 当此方法返回时，此缓冲区包含指定的字符数组，此数组中 <paramref name="offset" /> 和 (<paramref name="offset" /> + <paramref name="count" />) 之间的值被从当前源中读取的字节所替换。</param>
        <param name="offset"><paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。</param>
        <param name="count">要从当前流中最多读取的字节数。</param>
        <summary>从当前 <see cref="T:System.Data.OracleClient.OracleBFile" /> 流中读取字节序列，并在该流中按照读取的字节数提升位置。</summary>
        <returns>读入缓冲区中的总字节数。 如果当前可用的字节数没有那么多，则总字节数可能小于请求的字节数，或者如果已到达文件的末尾，则为零。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleBFile.Read%2A>方法从当前流中读取最多 `count` 字节，并将它们存储在 `buffer` 开始处 `offset` 。 流中的当前位置按读取的字节数提前;但是，如果发生异常，则流中的当前位置将保持不变。 <xref:System.Data.OracleClient.OracleBFile.Read%2A>返回读取的字节数。 仅当位置当前位于流的末尾时，返回值才为零。 <xref:System.Data.OracleClient.OracleBFile.Read%2A>如果没有可用的数据，则将一直阻止到至少有一个字节的数据可供读取。 <xref:System.Data.OracleClient.OracleBFile.Read%2A>仅在到达文件末尾时返回0。 <xref:System.Data.OracleClient.OracleBFile.Read%2A>如果尚未到达流的末尾，则可以自由返回比请求更少的字节。  
  
 使用或方法访问已关闭的任何尝试 <xref:System.Data.OracleClient.OracleBFile> <xref:System.Data.OracleClient.OracleBFile.Read%2A> <xref:System.Data.OracleClient.OracleBFile.Seek%2A> <xref:System.Data.OracleClient.OracleBFile> 都会自动重新打开流。  
  
 下面的 c # 示例在 Oracle 表中假定此架构：  
  
```  
(col1 number, col2 BFILE)  
```  
  
 该示例演示如何使用 <xref:System.Data.OracleClient.OracleBFile.Read%2A> 和 <xref:System.Data.OracleClient.OracleBFile.Seek%2A> 方法来访问 <xref:System.Data.OracleClient.OracleBFile> 对象。  
  
```csharp  
byte[] buffer = new byte[100];  
OracleDataReader dataReader = command.ExecuteReader();  
using (dataReader) {  
    if (dataReader.Read()) {  
            OracleBFile BFile = dataReader.GetOracleBFile(1);  
        using (BFile) {  
            BFile.Seek(0, SeekOrigin.Begin);  
            BFile.Read(buffer, 0, 100);  
        }  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="offset" /> 和 <paramref name="count" /> 的总和大于缓冲区长度。</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> 或 <paramref name="count" /> 为负数。</exception>
        <exception cref="T:System.InvalidOperationException">与 <see langword="BFILE" /> 相关联的连接已关闭。</exception>
        <exception cref="T:System.IO.IOException">出现 I/O 错误。</exception>
        <exception cref="T:System.ObjectDisposedException">关闭或释放该流后，调用方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleBFile.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="oracleBFile.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">相对于 origin 的字节偏移量。 如果 <paramref name="offset" /> 为负，则新位置位于 <paramref name="origin" /> 指定的位置之前 <paramref name="offset" /> 指定的字节数。 如果 <paramref name="offset" /> 为零，则新位置是 <paramref name="origin" /> 指定的位置。 如果 <paramref name="offset" /> 为正，则新位置位于 <paramref name="origin" /> 指定的位置之后 <paramref name="offset" /> 指定的字节数。</param>
        <param name="origin"><see langword="System.IO.SeekOrigin" /> 类型的值，指示用于获取新位置的参考点。</param>
        <summary>在当前 <see cref="T:System.Data.OracleClient.OracleBFile" /> 流上设置位置。</summary>
        <returns>当前流中的新位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `offset` 为负，则需要在由指定的字节数之前指定的新位置 `origin` `offset` 。 如果 `offset` 为零，则新位置需要是指定的位置 `origin` 。 如果 `offset` 为正，则需要在由指定的字节数后跟随新位置 `origin` `offset` 。  
  
 不支持查找超出流长度的任何位置。  
  
 使用或方法访问已关闭的任何尝试 <xref:System.Data.OracleClient.OracleBFile> <xref:System.Data.OracleClient.OracleBFile.Read%2A> <xref:System.Data.OracleClient.OracleBFile.Seek%2A> <xref:System.Data.OracleClient.OracleBFile> 都会自动重新打开流。  
  
 下面的 c # 示例在 Oracle 表中假定此架构：  
  
```  
(col1 number, col2 BFILE)  
```  
  
 该示例演示如何使用 <xref:System.Data.OracleClient.OracleBFile.Read%2A> 和 <xref:System.Data.OracleClient.OracleBFile.Seek%2A> 方法来访问 <xref:System.Data.OracleClient.OracleBFile> 对象。  
  
```csharp  
byte[] buffer = new byte[100];  
OracleDataReader dataReader = command.ExecuteReader();  
using (dataReader) {  
    if (dataReader.Read()) {  
            OracleBFile BFile = dataReader.GetOracleBFile(1);  
        using (BFile) {  
            BFile.Seek(0, SeekOrigin.Begin);  
            BFile.Read(buffer, 0, 100);  
        }  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">尝试用一个负值或大于该流长度的值设置位置。</exception>
        <exception cref="T:System.ObjectDisposedException">关闭或释放该流后，调用方法。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetFileName">
      <MemberSignature Language="C#" Value="public void SetFileName (string directory, string file);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFileName(string directory, string file) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleBFile.SetFileName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFileName (directory As String, file As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFileName(System::String ^ directory, System::String ^ file);" />
      <MemberSignature Language="F#" Value="member this.SetFileName : string * string -&gt; unit" Usage="oracleBFile.SetFileName (directory, file)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directory" Type="System.String" />
        <Parameter Name="file" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directory">包含物理文件的目录对象的别名。</param>
        <param name="file">操作系统中文件的名称。</param>
        <summary>将 <see cref="T:System.Data.OracleClient.OracleBFile" /> 对象绑定到操作系统中的其他文件。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleBFile.SetFileName%2A>操作必须在事务内才能成功。 只需调用 <xref:System.Data.OracleClient.OracleBFile.SetFileName%2A> `BFILE` ，就会将 <xref:System.Data.OracleClient.OracleBFile> 对象与另一个文件相关联，但不会更新 Oracle 表。 若要在调用后更新 Oracle 表 <xref:System.Data.OracleClient.OracleBFile.SetFileName%2A> ，必须调用的 `Update` 方法， <xref:System.Data.OracleClient.OracleDataAdapter> 然后提交事务。  
  
 检索 <xref:System.Data.OracleClient.OracleBFile.DirectoryName%2A> 或 <xref:System.Data.OracleClient.OracleBFile.FileName%2A> 属性后，它们将缓存在对象中， <xref:System.Data.OracleClient.OracleBFile> 并不受任何克隆对象的 <xref:System.Data.OracleClient.OracleBFile> 调用 <xref:System.Data.OracleClient.OracleBFile.SetFileName%2A> 或数据库中的任何更改的影响 `BFILE` 。 换言之，它们可能不表示 `BFILE` 服务器中对象的实际值。  
  
 此外，检索任一属性（ <xref:System.Data.OracleClient.OracleBFile.DirectoryName%2A> 或 <xref:System.Data.OracleClient.OracleBFile.FileName%2A> ）都将导致从服务器中检索这两个属性值并将其缓存在 <xref:System.Data.OracleClient.OracleBFile> 对象中。  
  
 下面的 c # 示例在 Oracle 表中假定此架构：  
  
```  
(col1 number, col2 BFILE)  
```  
  
 该示例演示如何使用 <xref:System.Data.OracleClient.OracleBFile.SetFileName%2A> <xref:System.Data.OracleClient.OracleBFile.Read%2A> 和 <xref:System.Data.OracleClient.OracleBFile.Seek%2A> 方法来访问 <xref:System.Data.OracleClient.OracleBFile> 对象。  
  
```csharp  
byte[] buffer = new byte[100];  
OracleDataReader dataReader = command.ExecuteReader();  
using (dataReader) {  
    if (dataReader.Read()) {  
        OracleBFile BFile = dataReader.GetOracleBFile(1);  
        using (BFile) {  
            BFile.Seek(0, SeekOrigin.Begin);  
            BFile.Read(buffer, 0, 100);  
            command.Transaction = connection.BeginTransaction();  
            BFile.SetFileName("TESTDIR", "File1.jpg");  
            BFile.Read(buffer, 0, 100);  
        }  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">该操作必须在事务中。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleBFile.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="oracleBFile.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">目前尚不支持。</param>
        <summary>目前尚不支持。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">当调用的方法不受支持时，或者当尝试读取、搜索或写入不支持所调用功能的流时引发的异常。</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleBFile.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Data.OracleClient.OracleBFile.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Array" /> 类型的 <see cref="T:System.Byte" />（它包含 <see cref="T:System.Data.OracleClient.OracleBFile" /> 数据）。</summary>
        <value><see cref="T:System.Array" /> 类型的 <see cref="T:System.Byte" />（它包含 <see cref="T:System.Data.OracleClient.OracleBFile" /> 数据）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleBFile.Value%2A>属性一次读取整个 `BFILE` 。  
  
> [!NOTE]
>  使用的好处是能够在 `BFILE` 客户端上检索大量数据。 但是，当你使用时 <xref:System.Data.OracleClient.OracleBFile.Value%2A> ，你将获取用于 BFILE 列的所有数据，作为一个连续块区，这可能会显著增加应用程序开销。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleBFile.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="oracleBFile.Write (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">目前尚不支持。</param>
        <param name="offset">目前尚不支持。</param>
        <param name="count">目前尚不支持。</param>
        <summary>目前尚不支持。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">当调用的方法不受支持时，或者当尝试读取、搜索或写入不支持所调用功能的流时引发的异常。</exception>
      </Docs>
    </Member>
  </Members>
</Type>
