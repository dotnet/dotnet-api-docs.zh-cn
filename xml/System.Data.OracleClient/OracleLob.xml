<Type Name="OracleLob" FullName="System.Data.OracleClient.OracleLob">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6e8147107a865c2823c16f71a256387508a40def" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89771444" /></Metadata><TypeSignature Language="C#" Value="public sealed class OracleLob : System.IO.Stream, ICloneable, System.Data.SqlTypes.INullable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OracleLob extends System.IO.Stream implements class System.Data.SqlTypes.INullable, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.OracleClient.OracleLob" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OracleLob&#xA;Inherits Stream&#xA;Implements ICloneable, INullable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OracleLob sealed : System::IO::Stream, ICloneable, System::Data::SqlTypes::INullable" />
  <TypeSignature Language="F#" Value="type OracleLob = class&#xA;    inherit Stream&#xA;    interface ICloneable&#xA;    interface IDisposable&#xA;    interface INullable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.OracleClient</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Data.SqlTypes.INullable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>表示存储在 Oracle 服务器上的大型对象二进制 (<see langword="LOB" />) 数据类型。 此类不能被继承。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob>与的不同之处在于 <xref:System.Data.OracleClient.OracleBFile> ，数据存储在服务器上而不是存储在操作系统的物理文件中。 它也可以是读写对象，这一点与 <xref:System.Data.OracleClient.OracleBFile> 始终是只读对象不同。  
  
 <xref:System.Data.OracleClient.OracleLob>可以是下列 <xref:System.Data.OracleClient.OracleType> 数据类型之一。  
  
|OracleType 数据类型|说明|  
|--------------------------|-----------------|  
|`Blob`|一 `BLOB` 种 Oracle 数据类型，它包含最大大小为 4 gb (GB) 的二进制数据。 它映射到 <xref:System.Array> 类型的 <xref:System.Byte>。|  
|`Clob`|`CLOB`包含字符数据的 Oracle 数据类型，它基于服务器上的默认字符集，最大大小为 4 GB。 它映射到 <xref:System.String>。|  
|`NClob`|`NCLOB`包含字符数据的 Oracle 数据类型，其最大大小为 4 GB，基于服务器上的区域字符集。 它映射到 <xref:System.String>。|  
  
 .NET 应用程序开发人员可以将 Oracle `LOB` 值检索到基本 .net 数据类型中，如 <xref:System.Array> 类型 <xref:System.Byte> 和 <xref:System.String> 或专用 <xref:System.Data.OracleClient.OracleLob> 数据类型。 <xref:System.Data.OracleClient.OracleLob>类支持 `LOB` 在 oracle 数据库中读取和写入 oracle 数据库中的数据。  
  
 以下是将 <xref:System.Data.OracleClient.OracleLob> 数据与基本 .net 数据类型区分开来的数据类型的主要特征：  
  
-   将 oracle 数据库中的 Oracle `LOB` 值检索到类中后 <xref:System.Data.OracleClient.OracleLob> ，你可以更改 `LOB` 打开的事务中的数据，所做的更改将直接反映到数据库中。 如果将 Oracle 值检索 `LOB` 到类型为 <xref:System.Array> 的 <xref:System.Byte> 或 <xref:System.String> 并更新这些数组，则所做的更改不会反映到数据库中。  
  
-   使用 <xref:System.Data.OracleClient.OracleLob> 类访问某个值块区时 `LOB` ，仅将该区块从 Oracle 数据库传递到客户端。 使用 <xref:System.Data.OracleClient.OracleDataReader.GetChars%2A> 方法访问某个值块区时 `LOB` ，会将此值的所有内容从 Oracle 数据库传递到客户端。  
  
 若要获取 <xref:System.Data.OracleClient.OracleLob> 对象，请调用 <xref:System.Data.OracleClient.OracleDataReader.GetOracleLob%2A> 方法。  
  
 可以 <xref:System.Data.OracleClient.OracleLob> 使用以下格式构造一个为 NULL 的：  
  
```csharp
OracleLob myLob = OracleLob.Null;  
```

```vb
Dim myLob As OracleLob = OracleLob.Null
```
  
 此方法主要用于测试 `LOB` 从服务器返回的是否为 NULL，如本示例所示：  
  
```csharp
if (myLob == OracleLob.Null)  
```

```vb
If (myLob = OracleLob.Null) Then
```
  
 NULL 的 `LOB` 行为类似于中的零字节 `LOB` ，这会 <xref:System.Data.OracleClient.OracleLob.Read%2A> 成功并且始终返回零字节。  
  
 选择 `LOB` 包含 null 值的列时，将 <xref:System.Data.OracleClient.OracleLob.Null> 返回。  
  
 在获取临时之前，必须先开始事务 `LOB` 。 否则， <xref:System.Data.OracleClient.OracleDataReader> 可能无法在以后获取数据。  
  
 还可以 `LOB` 通过调用 DBMS_LOB 在 Oracle 中打开一个临时的。CREATETEMPORARY 系统存储过程并绑定 `LOB` output 参数。 在客户端，临时的 `LOB` 行为类似于表 `LOB` 。 例如，若要更新临时 `LOB` ，则必须将其包含在事务中。  
  
下面的示例演示如何打开临时 `LOB` ：
  
```csharp
var connection = new OracleConnection("server=MyServer; integrated security=yes;");  
connection.Open();  
OracleTransaction transaction = connection.BeginTransaction();  
OracleCommand command = connection.CreateCommand();  
command.Transaction = transaction;  
command.CommandText = "declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;";  
command.Parameters.Add(new OracleParameter("tempblob", OracleType.Blob)).Direction = ParameterDirection.Output;  
command.ExecuteNonQuery();  
var tempLob = (OracleLob)command.Parameters[0].Value;  
var tempbuff = new byte[10000];  
tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  
tempLob.Write(tempbuff,0,tempbuff.Length);  
tempLob.EndBatch();  
command.Parameters.Clear();  
command.CommandText = "MyTable.MyProc";  
command.CommandType = CommandType.StoredProcedure;    
command.Parameters.Add(new OracleParameter("ImportDoc", OracleType.Blob)).Value = tempLob;  
command.ExecuteNonQuery();  
transaction.Commit();  
connection.Close(); 
```  
  
> [!NOTE]
>  <xref:System.IO.Stream.WriteByte%2A>如果与字符数据一起使用，则继承的方法将失败，并且 <xref:System.InvalidOperationException> 会引发。 请改用 <xref:System.Data.OracleClient.OracleLob.Write%2A> 方法。  
>   
>  `LOB`仅当关闭连接时才关闭临时，但在加载时，临时 `LOB` 不会关闭。 这可以通过调用来释放临时的来解决 `LOB` `tempLob.Dispose()` 。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Append">
      <MemberSignature Language="C#" Value="public void Append (System.Data.OracleClient.OracleLob source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Append(class System.Data.OracleClient.OracleLob source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Append(System.Data.OracleClient.OracleLob)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Append (source As OracleLob)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Append(System::Data::OracleClient::OracleLob ^ source);" />
      <MemberSignature Language="F#" Value="member this.Append : System.Data.OracleClient.OracleLob -&gt; unit" Usage="oracleLob.Append source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Data.OracleClient.OracleLob" />
      </Parameters>
      <Docs>
        <param name="source">要从其中追加数据的 <see langword="LOB" />。</param>
        <summary>将数据从指定的 <see langword="LOB" /> 追加到当前 <see langword="LOB" />。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要写入 `LOB` ，您必须 `LOB` 使用 SQL SELECT 语句中的 FOR UPDATE 子句检索到，并且必须已启动本地事务。  
  
 源中的所有数据 `LOB` 都追加到当前的末尾 `LOB` 。 在 `LOB` 此过程中，不会计算或更改的位置。  
  
 基础数据类型必须始终相同。 例如，如果要从中追加 <xref:System.Data.OracleClient.OracleType.NClob> ，则目标 <xref:System.Data.OracleClient.OracleLob> 也必须是 <xref:System.Data.OracleClient.OracleType.NClob> 。  
  
> [!NOTE]
>  在此版本中，对只读执行的写入操作 `LOB` 可能会成功，但不会更新 `LOB` 服务器上的。 但在这种情况下，将更新的本地副本 `LOB` 。 因此，以后对对象的读取操作 <xref:System.Data.OracleClient.OracleLob> 可能会返回写入操作的结果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">源 <see cref="T:System.Data.OracleClient.OracleLob" /> 为 null。</exception>
        <exception cref="T:System.InvalidOperationException">源 <see cref="T:System.Data.OracleClient.OracleLob" /> 为 null，或者连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">源 <see cref="T:System.Data.OracleClient.OracleLob" /> 对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginBatch">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>在执行多个写操作时避免服务器端触发器激发。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginBatch">
      <MemberSignature Language="C#" Value="public void BeginBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.BeginBatch" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginBatch ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginBatch();" />
      <MemberSignature Language="F#" Value="member this.BeginBatch : unit -&gt; unit" Usage="oracleLob.BeginBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>在执行多个读操作时避免服务器端触发器激发。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LOB`在模式中打开 <xref:System.Data.OracleClient.OracleLobOpenMode.ReadOnly> ; 因此，只能在对的 `LOB` 相应调用之前从中读取，而不能写入 <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> 。 若要对执行批处理写入 `LOB` ，请 <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> 调用 <xref:System.Data.OracleClient.OracleLobOpenMode.ReadWrite> 。  
  
 在 <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> 同一事务中多次调用的时间当前会引发 Oracle "tnsnames.ora-22293： LOB 已在同一事务中打开" 错误。 此外，如果您 `LOB` 使用另一个获取 <xref:System.Data.OracleClient.OracleDataReader> ，而原始调用方未调用 <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> 方法，则会生成相同的错误。 因此，在使用完后，必须调用 <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> 方法 <xref:System.Data.OracleClient.OracleLob> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginBatch">
      <MemberSignature Language="C#" Value="public void BeginBatch (System.Data.OracleClient.OracleLobOpenMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginBatch(valuetype System.Data.OracleClient.OracleLobOpenMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginBatch (mode As OracleLobOpenMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginBatch(System::Data::OracleClient::OracleLobOpenMode mode);" />
      <MemberSignature Language="F#" Value="member this.BeginBatch : System.Data.OracleClient.OracleLobOpenMode -&gt; unit" Usage="oracleLob.BeginBatch mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Data.OracleClient.OracleLobOpenMode" />
      </Parameters>
      <Docs>
        <param name="mode">模式（<see cref="T:System.Data.OracleClient.OracleLobOpenMode" /> 值之一），在该模式下，可在此 <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)" /> 调用与对应的 <see cref="M:System.Data.OracleClient.OracleLob.EndBatch" /> 调用之间访问 <see langword="LOB" />。</param>
        <summary>在以指定的访问模式执行多个读写操作时避免服务器端触发器激发。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要写入 `LOB` ，您必须 `LOB` 使用 SQL SELECT 语句中的 FOR UPDATE 子句检索到，并且必须已启动本地事务。  
  
 在 <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A> 同一事务中多次调用的时间当前会引发 Oracle "tnsnames.ora-22293： LOB 已在同一事务中打开" 错误。 此外，如果您 `LOB` 使用另一个获取 <xref:System.Data.OracleClient.OracleDataReader> ，而原始调用方未调用 <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> 方法，则会生成相同的错误。 因此，在使用完后，必须调用 <xref:System.Data.OracleClient.OracleLob.EndBatch%2A> 方法 <xref:System.Data.OracleClient.OracleLob> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Data.OracleClient.OracleLob.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see langword="LOB" /> 流是否可读。</summary>
        <value>如果 <see langword="true" /> 流支持读取，则为 <see langword="LOB" />；如果 <see langword="false" /> 已关闭或已释放，则为 <see langword="LOB" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.Data.OracleClient.OracleLob.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示能否执行向前和向后查找操作。</summary>
        <value>如果 <see langword="false" /> 已关闭或已释放，则为 <see langword="LOB" />；否则为 <see langword="true" />。 对于 <see cref="F:System.Data.OracleClient.OracleLob.Null" />，总是为 <see langword="true" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Data.OracleClient.OracleLob.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>不管 <see langword="LOB" /> 是否支持写入，始终返回真。</summary>
        <value>不管已打开的或未释放的 <see langword="true" /> 是否支持写入，始终返回 <see langword="LOB" />；如果 <see langword="false" /> 已关闭或已释放，则返回 <see langword="LOB" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 若要写入 `LOB` ，您必须 `LOB` 使用 SQL SELECT 语句中的 FOR UPDATE 子句检索到，并且必须已启动本地事务。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChunkSize">
      <MemberSignature Language="C#" Value="public int ChunkSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ChunkSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.ChunkSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChunkSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ChunkSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ChunkSize : int" Usage="System.Data.OracleClient.OracleLob.ChunkSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示读/写操作过程中要从服务器检索或发送到服务器的最小字节数。</summary>
        <value>要检索或发送的最小字节数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性返回的值 <xref:System.Data.OracleClient.OracleLob.ChunkSize%2A> 不是用于 Oracle 的 .NET Framework 数据提供程序的设置。 相反，它是与服务器进行通信时，Oracle 调用接口 (OCI) 使用的值。 用于 <xref:System.Data.OracleClient.OracleLob.ChunkSize%2A> 确保客户端区块的大小相同。 在较小的块中读取或写入不会缓存数据，并会导致对服务器的不太优化的往返，因为不会接收或发送完整的数据包。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="abstract member Clone : unit -&gt; obj&#xA;override this.Clone : unit -&gt; obj" Usage="oracleLob.Clone " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建一个新 <see cref="T:System.Data.OracleClient.OracleLob" /> 对象，该对象与原始 <see cref="T:System.Data.OracleClient.OracleLob" /> 对象引用相同的 Oracle <see langword="LOB" />。</summary>
        <returns>一个与原始 <see cref="T:System.Data.OracleClient.OracleLob" /> 对象引用相同 Oracle <see langword="LOB" /> 的新 <see cref="T:System.Data.OracleClient.OracleLob" /> 对象。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新对象的属性 <xref:System.Data.OracleClient.OracleLob> 最初具有与原始对象相同的值。 但是，在 <xref:System.Data.OracleClient.OracleLob.Clone%2A> 完成后，每个 <xref:System.Data.OracleClient.OracleLob> 对象都相互独立。 例如，更改原始属性的值不 <xref:System.Data.OracleClient.OracleLob.Position%2A> <xref:System.Data.OracleClient.OracleLob> 会更改副本上的的值 <xref:System.Data.OracleClient.OracleLob.Position%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="oracleLob.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>关闭当前流并释放与该流关联的资源。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OracleClient.OracleConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As OracleConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleConnection ^ Connection { System::Data::OracleClient::OracleConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Connection : System.Data.OracleClient.OracleConnection" Usage="System.Data.OracleClient.OracleLob.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取由该 <see cref="T:System.Data.OracleClient.OracleConnection" /> 实例使用的 <see cref="T:System.Data.OracleClient.OracleLob" />。</summary>
        <value>到数据源的连接。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="CopyTo">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从该 <see cref="T:System.Data.OracleClient.OracleLob" /> 复制到目标 <see cref="T:System.Data.OracleClient.OracleLob" />。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (System.Data.OracleClient.OracleLob destination);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(class System.Data.OracleClient.OracleLob destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (destination As OracleLob) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(System::Data::OracleClient::OracleLob ^ destination);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Data.OracleClient.OracleLob -&gt; int64" Usage="oracleLob.CopyTo destination" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="override this.CopyTo : System.Data.OracleClient.OracleLob -&gt; int64" Usage="oracleLob.CopyTo destination" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
      </Parameters>
      <Docs>
        <param name="destination">目标 <see cref="T:System.Data.OracleClient.OracleLob" />。</param>
        <summary>从该 <see cref="T:System.Data.OracleClient.OracleLob" /> 复制到目标 <see cref="T:System.Data.OracleClient.OracleLob" />。</summary>
        <returns>已复制的字节数。 这排除了所有已填充的字节。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基础数据类型必须始终相同。 例如，如果从复制 <xref:System.Data.OracleClient.OracleType.NClob> ，则目标 <xref:System.Data.OracleClient.OracleLob> 也必须是 <xref:System.Data.OracleClient.OracleType.NClob> 。  
  
 如果目标偏移超出了目标的末尾，则 `LOB` `LOB` 会扩展数据要复制到的。 与结尾之间的 `LOB` 和目标偏移量之间的空格将用零填充 `BLOB` 数据类型，为 `CLOB` 和 `NCLOB` 数据类型填充空格。  
  
 若要写入 `LOB` ，您必须 `LOB` 使用 SQL SELECT 语句中的 FOR UPDATE 子句检索到，并且必须已启动本地事务。  
  
> [!NOTE]
>  在此版本中，对只读执行的写入操作 `LOB` 可能会成功，但不会更新 `LOB` 服务器上的。 但在这种情况下，将更新的本地副本 `LOB` 。 因此，以后对对象的读取操作 <xref:System.Data.OracleClient.OracleLob> 可能会返回写入操作的结果。  
>   
>  此 `CopyTo` 方法不会 `OracleLob` 在执行复制操作前清除目标的内容。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destination" /> 参数中指定的 <see cref="T:System.Data.OracleClient.OracleLob" /> 为 null。</exception>
        <exception cref="T:System.InvalidOperationException">该操作未处在事务中，<see cref="T:System.Data.OracleClient.OracleLob" /> 对象为 null，或者连接已关闭。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (System.Data.OracleClient.OracleLob destination, long destinationOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(class System.Data.OracleClient.OracleLob destination, int64 destinationOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (destination As OracleLob, destinationOffset As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(System::Data::OracleClient::OracleLob ^ destination, long destinationOffset);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : System.Data.OracleClient.OracleLob * int64 -&gt; int64" Usage="oracleLob.CopyTo (destination, destinationOffset)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="override this.CopyTo : System.Data.OracleClient.OracleLob * int64 -&gt; int64" Usage="oracleLob.CopyTo (destination, destinationOffset)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
        <Parameter Name="destinationOffset" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="destination">目标 <see cref="T:System.Data.OracleClient.OracleLob" />。</param>
        <param name="destinationOffset">要复制到的偏移量。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数字节数。</param>
        <summary>将指定数量的数据从该 <see cref="T:System.Data.OracleClient.OracleLob" /> 复制到目标 <see cref="T:System.Data.OracleClient.OracleLob" />。</summary>
        <returns>已复制的字节数。 这排除了所有已填充的字节。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基础数据类型必须始终相同。 例如，如果从复制 <xref:System.Data.OracleClient.OracleType.NClob> ，则目标 <xref:System.Data.OracleClient.OracleLob> 也必须是 <xref:System.Data.OracleClient.OracleType.NClob> 。  
  
 如果目标偏移超出了目标的末尾，则 `LOB` `LOB` 会扩展数据要复制到的。 `LOB`对于 `BLOB` 数据类型，和 `CLOB` 数据类型的空格，将用零填充结束和目标偏移量之间的空格 `NCLOB` 。  
  
 若要写入 `LOB` ，您必须 `LOB` 使用 SQL SELECT 语句中的 FOR UPDATE 子句检索到，并且必须已启动本地事务。  
  
> [!NOTE]
>  在此版本中，对只读执行的写入操作 `LOB` 可能会成功，但不会更新 `LOB` 服务器上的。 但在这种情况下，将更新的本地副本 `LOB` 。 因此，以后对对象的读取操作 <xref:System.Data.OracleClient.OracleLob> 可能会返回写入操作的结果。  
>   
>  此 `CopyTo` 方法不会 `OracleLob` 在执行复制操作前清除目标的内容。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destination" /> 参数中指定的 <see cref="T:System.Data.OracleClient.OracleLob" /> 为 null。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="destinationOffset" /> 参数中指定的值小于零，或大于 4 GB。  
  
- 或 - 
<paramref name="destinationOffset" /> 参数中为 <see langword="CLOB" /> 或 <see langword="NCLOB" /> 数据类型指定的值不是偶数。  
  
- 或 - 
必须将 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型指定为偶数字节数。</exception>
        <exception cref="T:System.InvalidOperationException">该操作未处在事务中，<see cref="T:System.Data.OracleClient.OracleLob" /> 对象为 null，或者连接已关闭。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public long CopyTo (long sourceOffset, System.Data.OracleClient.OracleLob destination, long destinationOffset, long amount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 CopyTo(int64 sourceOffset, class System.Data.OracleClient.OracleLob destination, int64 destinationOffset, int64 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyTo (sourceOffset As Long, destination As OracleLob, destinationOffset As Long, amount As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long CopyTo(long sourceOffset, System::Data::OracleClient::OracleLob ^ destination, long destinationOffset, long amount);" />
      <MemberSignature Language="F#" Value="member this.CopyTo : int64 * System.Data.OracleClient.OracleLob * int64 * int64 -&gt; int64" Usage="oracleLob.CopyTo (sourceOffset, destination, destinationOffset, amount)" FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5" />
      <MemberSignature Language="F#" Value="override this.CopyTo : int64 * System.Data.OracleClient.OracleLob * int64 * int64 -&gt; int64" Usage="oracleLob.CopyTo (sourceOffset, destination, destinationOffset, amount)" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceOffset" Type="System.Int64" />
        <Parameter Name="destination" Type="System.Data.OracleClient.OracleLob" />
        <Parameter Name="destinationOffset" Type="System.Int64" />
        <Parameter Name="amount" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="sourceOffset">要从中复制的偏移量。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数。</param>
        <param name="destination">目标 <see langword="OracleLob" /><see cref="N:System.Data.OracleClient" />。</param>
        <param name="destinationOffset">要复制到的目标偏移量。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数。</param>
        <param name="amount">要复制的数据数量（以字节为单位）。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数。</param>
        <summary>使用该源偏移量将指定数量的数据从该 <see cref="T:System.Data.OracleClient.OracleLob" /> 复制到目标 <see cref="T:System.Data.OracleClient.OracleLob" />。</summary>
        <returns>已复制的字节数。 这排除了所有已填充的字节。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基础数据类型必须始终相同。 例如，如果从复制 <xref:System.Data.OracleClient.OracleType.NClob> ，则目标 <xref:System.Data.OracleClient.OracleLob> 也必须是 <xref:System.Data.OracleClient.OracleType.NClob> 。  
  
 如果目标偏移超出了目标的末尾，则 `LOB` `LOB` 会扩展数据要复制到的。 `LOB`对于 `BLOB` 数据类型，和 `CLOB` 数据类型的空格，将用零填充结束和目标偏移量之间的空格 `NCLOB` 。  
  
 若要写入 `LOB` ，您必须 `LOB` 使用 SQL SELECT 语句中的 FOR UPDATE 子句检索到，并且必须已启动本地事务。  
  
> [!NOTE]
>  在此版本中，对只读执行的写入操作 `LOB` 可能会成功，但不会更新 `LOB` 服务器上的。 但在这种情况下，将更新的本地副本 `LOB` 。 因此，以后对对象的读取操作 <xref:System.Data.OracleClient.OracleLob> 可能会返回写入操作的结果。  
>   
>  此 `CopyTo` 方法不会 `OracleLob` 在执行复制操作前清除目标的内容。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destination" /> 参数中指定的 <see cref="T:System.Data.OracleClient.OracleLob" /> 为 null。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="amount" />、<paramref name="sourceOffset" /> 或 <paramref name="destinationOffset" /> 参数中指定的值小于零，或大于 4 GB。  
  
- 或 - 
在 <paramref name="amount" />、<paramref name="sourceOffset" /> 或 <paramref name="destinationOffset" /> 参数中为 <see langword="CLOB" /> 或 <see langword="NCLOB" /> 数据类型指定的值不是偶数。</exception>
        <exception cref="T:System.InvalidOperationException">该操作未处在事务中，<see cref="T:System.Data.OracleClient.OracleLob" /> 对象为 null，或者连接已关闭。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="oracleLob.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>释放此对象使用的资源。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="oracleLob.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndBatch">
      <MemberSignature Language="C#" Value="public void EndBatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndBatch() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.EndBatch" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndBatch ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndBatch();" />
      <MemberSignature Language="F#" Value="member this.EndBatch : unit -&gt; unit" Usage="oracleLob.EndBatch " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>允许服务器端触发器在执行多个写入操作之后继续激发。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob.BeginBatch%2A>在开始对执行写操作之前调用方法 <xref:System.Data.OracleClient.OracleLob> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Erase">
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>从该 <see cref="T:System.Data.OracleClient.OracleLob" /> 清除数据。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Erase">
      <MemberSignature Language="C#" Value="public long Erase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Erase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Erase" />
      <MemberSignature Language="VB.NET" Value="Public Function Erase () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Erase();" />
      <MemberSignature Language="F#" Value="member this.Erase : unit -&gt; int64" Usage="oracleLob.Erase " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>从该 <see cref="T:System.Data.OracleClient.OracleLob" /> 清除所有数据。</summary>
        <returns>清除的字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob.Erase%2A> 不截断数据。 `LOB`数据类型的长度保持不变 `BLOB` ，已清除的数据将替换为0x00。 `CLOB` 和 `NCLOB` 数据类型替换为空格。  
  
 若要写入 `LOB` ，您必须 `LOB` 使用 SQL SELECT 语句中的 FOR UPDATE 子句检索到，并且必须已启动本地事务。  
  
> [!NOTE]
>  在此版本中，对只读执行的写入操作 `LOB` 可能会成功，但不会更新 `LOB` 服务器上的。 但在这种情况下，将更新的本地副本 `LOB` 。 因此，以后对对象的读取操作 <xref:System.Data.OracleClient.OracleLob> 可能会返回写入操作的结果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">该操作未处在事务中，<see cref="T:System.Data.OracleClient.OracleLob" /> 对象为 null，或者连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="Erase">
      <MemberSignature Language="C#" Value="public long Erase (long offset, long amount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int64 Erase(int64 offset, int64 amount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Erase(System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Erase (offset As Long, amount As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; long Erase(long offset, long amount);" />
      <MemberSignature Language="F#" Value="member this.Erase : int64 * int64 -&gt; int64" Usage="oracleLob.Erase (offset, amount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="amount" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="offset">要从中清除的偏移量。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数。</param>
        <param name="amount">要清除的数据数量（以字节为单位）。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数。</param>
        <summary>从该 <see cref="T:System.Data.OracleClient.OracleLob" /> 清除指定数量的数据。</summary>
        <returns>清除的字节数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 和参数中的值的 `offset` 和 `amount` 可以大于的大小的总和 <xref:System.Data.OracleClient.OracleLob> 。 因此，如果指定的值大于属性返回的值， <xref:System.Data.OracleClient.OracleLob.Length%2A> 则会成功，但只会 <xref:System.Data.OracleClient.OracleLob.Erase%2A> 擦除到的末尾 <xref:System.Data.OracleClient.OracleLob> 。 同样，如果将负值传递到 `offset` ， <xref:System.Data.OracleClient.OracleLob.Erase%2A> 将会成功，但只从开始开始清除 <xref:System.Data.OracleClient.OracleLob> 。 ) 此行为与和方法的行为不同 <xref:System.Data.OracleClient.OracleLob.Read%2A> <xref:System.Data.OracleClient.OracleLob.Write%2A> ，并提供了能够从指定值中删除所有数据的优点， `offset` 而不会对服务器进行额外的往返以验证实际大小。 (  
  
 <xref:System.Data.OracleClient.OracleLob.Erase%2A> 不截断数据。 `LOB`数据类型的长度保持不变 `BLOB` ，已清除的数据将替换为0x00。 `CLOB` 和 `NCLOB` 数据类型替换为空格。  
  
 若要写入 `LOB` ，您必须 `LOB` 使用 SQL SELECT 语句中的 FOR UPDATE 子句检索到，并且必须已启动本地事务。  
  
> [!NOTE]
>  在此版本中，对只读执行的写入操作 `LOB` 可能会成功，但不会更新 `LOB` 服务器上的。 但在这种情况下，将更新的本地副本 `LOB` 。 因此，以后对对象的读取操作 <xref:System.Data.OracleClient.OracleLob> 可能会返回写入操作的结果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">该操作未处在事务中，<see cref="T:System.Data.OracleClient.OracleLob" /> 对象为 null，或者连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="oracleLob.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>目前尚不支持。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在此版本中，此方法不起作用。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBatched">
      <MemberSignature Language="C#" Value="public bool IsBatched { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBatched" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsBatched" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBatched As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBatched { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBatched : bool" Usage="System.Data.OracleClient.OracleLob.IsBatched" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示应用程序是否调用了 <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch" /> 方法。</summary>
        <value>如果应用程序调用了 <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch" /> 方法，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用 Oracle 8.0.5 服务器时，将引发 Oracle "TNSNAMES.ORA-00600：内部错误代码" 异常。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public bool IsNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNull" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsNull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNull : bool" Usage="System.Data.OracleClient.OracleLob.IsNull" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.SqlTypes.INullable.IsNull</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Data.OracleClient.OracleLob" /> 是否为一个 <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> 流。</summary>
        <value>如果 <see cref="T:System.Data.OracleClient.OracleLob" /> 是 <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> 流，则为 <see langword="true" />；否则为 <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTemporary">
      <MemberSignature Language="C#" Value="public bool IsTemporary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTemporary" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.IsTemporary" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTemporary As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTemporary { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTemporary : bool" Usage="System.Data.OracleClient.OracleLob.IsTemporary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值指示 <see cref="T:System.Data.OracleClient.OracleLob" /> 是否为临时 <see langword="LOB" />。</summary>
        <value>如果 <see cref="T:System.Data.OracleClient.OracleLob" /> 是临时 <see langword="true" />，则为 <see langword="LOB" />；否则为 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 下面的示例演示如何创建一个临时的 `LOB` 。  
  
```  
OracleConnection connection = new OracleConnection("server=MyServer; integrated security=yes;");  
connection.Open();  
OracleTransaction transaction = connection.BeginTransaction();  
OracleCommand command = connection.CreateCommand();  
command.Transaction = transaction;  
command.CommandText = "declare xx blob; begin dbms_lob.createtemporary(xx, false, 0); :tempblob := xx; end;";  
command.Parameters.Add(new OracleParameter("tempblob", OracleType.Blob)).Direction = ParameterDirection.Output;  
command.ExecuteNonQuery();  
OracleLob tempLob = (OracleLob)command.Parameters[0].Value;  
tempLob.BeginBatch(OracleLobOpenMode.ReadWrite);  
tempLob.Write(tempbuff,0,tempbuff.Length);  
tempLob.EndBatch();  
command.Parameters.Clear();  
command.CommandText = "MyTable.MyProc";  
command.CommandType = CommandType.StoredProcedure;    
command.Parameters.Add(new OracleParameter("ImportDoc", OracleType.Blob)).Value = tempLob;  
command.ExecuteNonQuery();  
transaction.Commit();  
connection.Close  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Data.OracleClient.OracleLob.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值返回 <see cref="T:System.Data.OracleClient.OracleLob" /> 的大小。</summary>
        <value><see cref="T:System.Data.OracleClient.OracleLob" /> 的大小（以字节为单位）。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob>对于所有数据类型，总是返回的大小（以字节为单位）。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="LobType">
      <MemberSignature Language="C#" Value="public System.Data.OracleClient.OracleType LobType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.OracleClient.OracleType LobType" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.LobType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LobType As OracleType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OracleClient::OracleType LobType { System::Data::OracleClient::OracleType get(); };" />
      <MemberSignature Language="F#" Value="member this.LobType : System.Data.OracleClient.OracleType" Usage="System.Data.OracleClient.OracleLob.LobType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取一个值，该值返回 <see langword="LOB" /> 数据类型。</summary>
        <value>其中一种 <see cref="T:System.Data.OracleClient.OracleType" /> <see langword="LOB" /> 数据类型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob>可以是下列 <xref:System.Data.OracleClient.OracleType> 数据类型之一。  
  
|OracleType 数据类型|说明|  
|--------------------------|-----------------|  
|`Blob`|包含二进制数据的 Oracle `BLOB` 数据类型，其最大大小为 4 GB。 它映射到 <xref:System.Array> 类型的 <xref:System.Byte>。|  
|`Clob`|包含字符数据的 Oracle `CLOB` 数据类型，根据服务器的默认字符集，其最大大小为 4 GB。 它映射到 <xref:System.String>。|  
|`NClob`|`NCLOB`包含字符数据的 Oracle 数据类型，其最大大小为 4 gb，基于服务器上的区域字符集。 它映射到 <xref:System.String>。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Null">
      <MemberSignature Language="C#" Value="public static readonly System.Data.OracleClient.OracleLob Null;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Data.OracleClient.OracleLob Null" />
      <MemberSignature Language="DocId" Value="F:System.Data.OracleClient.OracleLob.Null" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Null As OracleLob " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Data::OracleClient::OracleLob ^ Null;" />
      <MemberSignature Language="F#" Value=" staticval mutable Null : System.Data.OracleClient.OracleLob" Usage="System.Data.OracleClient.OracleLob.Null" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OracleClient.OracleLob</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示一个 null <see cref="T:System.Data.OracleClient.OracleLob" /> 对象。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 可以 <xref:System.Data.OracleClient.OracleLob> 使用以下格式构造一个为 NULL 的：  
  
```  
OracleLob myLob = OracleLOB.Null;  
```  
  
 此方法主要用于测试 `LOB` 从服务器返回的是否为 NULL，如本示例所示：  
  
```  
If(myLob == OracleLob.Null)  
```  
  
 NULL 的 `LOB` 行为类似于中的零字节 `LOB` ， <xref:System.Data.OracleClient.OracleLob.Read%2A> 并将始终返回零字节。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.Data.OracleClient.OracleLob.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取 <see cref="T:System.Data.OracleClient.OracleLob" /> 流中的当前读取位置。</summary>
        <value><see cref="T:System.Data.OracleClient.OracleLob" /> 流中的当前位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 流必须支持查找以获取或设置位置。 使用 <xref:System.Data.OracleClient.OracleLob.CanSeek%2A> 属性来确定流是否支持查找。  
  
 支持查找超出流长度的任何位置。 `CLOB`还支持对和数据类型查找奇数位置 `NCLOB` 。 有关详细信息，请参阅属性的 "备注" 部分 <xref:System.Data.OracleClient.OracleLob.Read%2A> 。  
  
 <xref:System.Data.OracleClient.OracleLob.Position%2A>属性不跟踪流中已使用的、跳过的或两个字节的字节数。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="oracleLob.Read (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">字节数组。 当此方法返回时，此缓冲区包含指定的字符数组，此数组中 <paramref name="offset" /> 和 (<paramref name="offset" /> + <paramref name="count" />) 之间的值被从当前源中读取的字节所替换。</param>
        <param name="offset"><paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始存储从当前流中读取的数据。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数。</param>
        <param name="count">要从当前流中最多读取的字节数。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数。</param>
        <summary>从当前 <see cref="T:System.Data.OracleClient.OracleLob" /> 流中读取字节序列，并在该流中按照读取的字节数提升位置。</summary>
        <returns>读入缓冲区中的总字节数。 如果当前可用的字节数没有请求的字节数那么多，则总字节数可能小于请求的字节数，或者如果已到达流的末尾，则为零 (0)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OracleClient.OracleLob.Read%2A>方法从当前流中读取最多 `count` 字节，并将它们存储在 `buffer` 开始处 `offset` 。 流中的当前位置按读取的字节数提前;但是，如果发生异常，则流中的当前位置将保持不变。 <xref:System.Data.OracleClient.OracleLob.Read%2A> 返回读取的字节数。 仅当位置当前位于流的末尾时，返回值才为零。 <xref:System.Data.OracleClient.OracleLob.Read%2A> 如果没有可用的数据，则将一直阻止到至少有一个字节的数据可供读取。<xref:System.Data.OracleClient.OracleLob.Read%2A> 如果当当前位置在的末尾时尝试从读取，则返回 0 `LOB` `LOB` 。 <xref:System.Data.OracleClient.OracleLob.Read%2A> 即使尚未到达流的结尾，也可以返回比请求更少的字节。  
  
 用于 Oracle 的 .NET Framework 数据提供程序 `CLOB` `NCLOB` 以 Unicode 形式处理所有和数据。 因此，在访问 `CLOB` 和 `NCLOB` 数据类型时，始终会处理字节数，其中每个字符为2个字节。 例如，如果一串包含三个字符的文本 `NCLOB` 在 Oracle 服务器上另存为，其中字符集为每个字符4个字节，并且你执行 `Read` 操作，则可以将该字符串的长度指定为6个字节，尽管它在服务器上存储为12个字节。  
  
 下面的示例演示如何读取 <xref:System.Data.OracleClient.OracleLob> 对象。  
  
```csharp
public static void ReadLobExample(OracleCommand command)  
{  
    int actual = 0;  
  
    // Select some data.  
    // Table Schema:  
    //  "CREATE TABLE TableWithLobs (a int, b BLOB, c CLOB, d NCLOB)";  
    //  "INSERT INTO TableWithLobs values (1, 'AA', 'AAA', N'AAAA')";  
    command.CommandText = "SELECT * FROM TableWithLobs";  
    OracleDataReader reader = command.ExecuteReader();  
    using(reader)  
    {  
        // Obtain the first row of data.  
        reader.Read();  
        // Obtain the LOBs (all 3 varieties).  
        OracleLob BLOB = reader.GetOracleLob(1);  
        OracleLob CLOB  = reader.GetOracleLob(2);  
        OracleLob NCLOB = reader.GetOracleLob(3);  
  
        // Example - Reading binary data (in chunks).  
        var buffer = new byte[100];  
        while((actual = BLOB.Read(buffer, 0, buffer.Length)) > 0)  
            Console.WriteLine(BLOB.LobType + ".Read(" + buffer + ", " + buffer.Length + ") => " + actual);  
  
        // Example - Reading CLOB/NCLOB data (in chunks).  
        // Note: You can read character data as raw Unicode bytes (using OracleLob.Read as in the above example).  
        // However, because the OracleLob object inherits directly from the.NET stream object,   
        // all the existing classes that manipulate streams can also be used. For example, the   
        // .NET StreamReader makes converting the raw bytes into actual characters easier.  
        var streamreader = new StreamReader(CLOB, Encoding.Unicode);  
        var cbuffer = new char[100];  
        while((actual = streamreader.Read(cbuffer, 0, cbuffer.Length)) >0)  
            Console.WriteLine(CLOB.LobType + ".Read(" + new string(cbuffer, 0, actual) + ", " + cbuffer.Length + ") => " + actual);  
  
        //Example - Reading data (all at once).  
        //You could use StreamReader.ReadToEnd to obtain all the string data,or simply  
        //call OracleLob.Value to obtain a contiguous allocation of all the data.  
        Console.WriteLine(NCLOB.LobType + ".Value => " + NCLOB.Value);  
    }  
}  
```  
  
 可以 <xref:System.Data.OracleClient.OracleLob> 使用以下格式构造一个为 NULL 的：  
  
```csharp
OracleLob myLob = OracleLob.Null;  
```

  
 此方法主要用于测试 `LOB` 从服务器返回的是否为 NULL，如以下示例中所示。  
  
```csharp
if (myLob == OracleLob.Null)  
```  
  
 NULL 的 `LOB` 行为类似于中的零字节 `LOB` ， <xref:System.Data.OracleClient.OracleLob.Read%2A> 并将始终返回零字节。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 为空引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> 或 <paramref name="count" /> 参数中的值为非正。  
  
- 或 - 
offset 参数与 count 参数之和大于 buffer 的长度。  
  
- 或 - 
<paramref name="amount" /> 或 <paramref name="offset" /> 参数中指定的值小于零，或大于 4 GB。</exception>
        <exception cref="T:System.InvalidOperationException">该操作未处在事务中，<see cref="T:System.Data.OracleClient.OracleLob" /> 对象为 null，或者连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="oracleLob.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">相对于 origin 的字节偏移量。 如果 <paramref name="offset" /> 为负，则新位置位于 <paramref name="origin" /> 指定的位置之前 <paramref name="offset" /> 指定的字节数。 如果 <paramref name="offset" /> 为零，则新位置是 <paramref name="origin" /> 指定的位置。 如果 <paramref name="offset" /> 为正，则新位置位于 <paramref name="origin" /> 指定的位置之后 <paramref name="offset" /> 指定的字节数。</param>
        <param name="origin"><see cref="T:System.IO.SeekOrigin" /> 类型的值，指示用于获取新位置的参考点。</param>
        <summary>在当前 <see cref="T:System.Data.OracleClient.OracleLob" /> 流上设置位置。</summary>
        <returns>当前流中的新位置。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果 `offset` 为负，则新位置必须在由指定的位置之前 `origin` `offset` 。 如果 `offset` 为零，则新位置必须是指定的位置 `origin` 。 如果 `offset` 为正，则新位置必须在由指定的位置之后的位置 `origin` `offset` 。  
  
 支持查找超出流长度的任何位置。 `CLOB`还支持对和数据类型查找奇数位置 `NCLOB` 。 有关详细信息，请参阅属性的 "备注" 部分 <xref:System.Data.OracleClient.OracleLob.Read%2A> 。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="origin" /> 参数不包含有效的值。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">结果位置在值的长度之外。</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.Data.OracleClient.OracleLob" /> 对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="oracleLob.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">所需的当前 <see cref="T:System.Data.OracleClient.OracleLob" /> 流的长度（以字节表示）。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数。</param>
        <summary>将 <see cref="T:System.Data.OracleClient.OracleLob" /> 流的长度设置为小于当前长度的值。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 尝试增加流的长度 <xref:System.Data.OracleClient.OracleLob> 失败，并返回 Oracle 服务器的 "Message： tnsnames.ora-22926：指定的剪裁长度大于当前 LOB 值的长度"。  
  
 流必须支持写入和查找， <xref:System.Data.OracleClient.OracleLob.SetLength%2A> 才能正常工作。  
  
 用于 Oracle 的 .NET Framework 数据提供程序 `CLOB` `NCLOB` 以 Unicode 形式处理所有和数据。 因此，在访问 `CLOB` 和 `NCLOB` 数据类型时，始终会处理字节数，其中每个字符为2个字节。 例如，如果一串包含三个字符的文本 `NCLOB` 在 Oracle 服务器上另存为，其中字符集为每个字符4个字节，并且你执行 `SetLength` 操作，则可以将该字符串的长度指定为6个字节，尽管它在服务器上存储为12个字节。  
  
 若要写入 `LOB` ，您必须 `LOB` 使用 SQL SELECT 语句中的 FOR UPDATE 子句检索到，并且必须已启动本地事务。  
  
> [!NOTE]
>  对只读的写入操作 `LOB` 可能会成功，但不会更新 `LOB` 服务器上的。 但在这种情况下，将更新的本地副本 `LOB` 。 因此，以后对对象的读取操作 <xref:System.Data.OracleClient.OracleLob> 可能会返回写入操作的结果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="value" /> 参数中为 <see langword="CLOB" /> 或 <see langword="NCLOB" /> 数据类型指定的值不是偶数。  
  
- 或 - 
<paramref name="value" /> 参数中指定的值小于零，或大于 4 GB。</exception>
        <exception cref="T:System.InvalidOperationException">该操作未处在事务中，<see cref="T:System.Data.OracleClient.OracleLob" /> 对象为 null，或者连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Data.OracleClient.OracleLob.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Data.OracleClient.OracleLob.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取公共语言运行时流值（基础值的等效值）。</summary>
        <value>对于 <see cref="F:System.Data.OracleClient.OracleType.Blob" />，为 <see langword="Byte[]" /> 类型的数组。 对于 <see cref="F:System.Data.OracleClient.OracleType.Clob" /> 和 <see cref="F:System.Data.OracleClient.OracleType.NClob" />，为 <see langword="String" />。 对于 null 数据，则为 <see cref="T:System.DBNull" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 对于 <xref:System.Data.OracleClient.OracleType.Blob> 数据类型， <xref:System.Data.OracleClient.OracleLob.Value%2A> 将以类型为的连续数组返回整个基础数据 `Byte[]` 。 对于 <xref:System.Data.OracleClient.OracleType.Clob> 和 <xref:System.Data.OracleClient.OracleType.NClob> 数据类型， <xref:System.Data.OracleClient.OracleLob.Value%2A> 将以数据类型的形式返回所有数据 `String` 。 对于空数据， <xref:System.Data.OracleClient.OracleLob.Value%2A> 返回 <xref:System.DBNull> 。 通过比较返回的值，可以区分空数据、空数据和数据。  
  
> [!NOTE]
>  使用 `LOB` 数据类型的好处是能够在客户端上以区块形式检索大量数据。 但是，当你使用时，会将 <xref:System.Data.OracleClient.OracleLob.Value%2A> 列的所有数据 `LOB` 作为一个连续块获取，这可能会显著增加应用程序开销。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="oracleLob.Write (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">字节数组。 此方法将 <paramref name="count" /> 中指定的字节数从 <paramref name="buffer" /> 复制到当前流中。</param>
        <param name="offset"><paramref name="buffer" /> 中的从零开始的字节偏移量，从此处开始将字节复制到当前流。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数。</param>
        <param name="count">要写入当前流的字节数。 对于 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型，它必须为偶数。</param>
        <summary>将一个字节序列写入当前 <see cref="T:System.Data.OracleClient.OracleLob" /> 流，并使流中的当前位置前进所写入的字节数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果写入操作成功，则流中的位置将按写入的字节数向前推进。 如果发生异常，则流中的位置将保持不变。  
  
 允许超出末尾的写入 `LOB` ，并 `LOB` 按写入的字节数放大。  
  
 用于 Oracle 的 .NET Framework 数据提供程序 `CLOB` `NCLOB` 以 Unicode 形式处理所有和数据。 因此，在访问 `CLOB` 和 `NCLOB` 数据类型时，始终会处理字节数，其中每个字符为2个字节。 例如，如果一串包含三个字符的文本 `NCLOB` 在 Oracle 服务器上另存为，其中字符集为每个字符4个字节，并且你执行 `Write` 操作，则可以将该字符串的长度指定为6个字节，尽管它在服务器上存储为12个字节。  
  
 若要写入 `LOB` ，您必须 `LOB` 使用 SQL SELECT 语句中的 FOR UPDATE 子句检索到，并且必须已启动本地事务。  
  
 下面的示例演示如何写入 <xref:System.Data.OracleClient.OracleLob> 对象：
  
```csharp
public static void WriteLobExample(OracleCommand command)  
{  
    // Note: Updating LOB data requires a transaction.  
    command.Transaction = command.Connection.BeginTransaction();  
    // Select some data.  
    //    Table Schema:  
    //        "CREATE TABLE tablewithlobs (a int, b BLOB, c BLOB)";  
    //        "INSERT INTO tablewithlobs values (1, 'AA', 'AAA')";  
    command.CommandText = "SELECT * FROM TableWithLobs FOR UPDATE";  
    OracleDataReader reader = command.ExecuteReader();  
    using(reader)  
    {  
        // Obtain the first row of data.  
        reader.Read();  
        // Obtain both LOBs.  
        OracleLob BLOB1 = reader.GetOracleLob(1);  
        OracleLob BLOB2 = reader.GetOracleLob(2);  
        // Perform any desired operations on the LOB, (read, position, and so on).  
        // ...  
        // Example - Writing binary data (directly to the backend).  
        // To write, you can use any of the stream classes, or write raw binary data using   
        // the OracleLob write method. Writing character vs. binary is the same;  
        // however note that character is always in terms of Unicode byte counts  
        // (for example: even number of bytes - 2 bytes for every Unicode character).  
        var buffer = new byte[100];  
        buffer[0] = 0xCC;  
        buffer[1] = 0xDD;  
        BLOB1.Write(buffer, 0, 2);  
        BLOB1.Position = 0;  
        Console.WriteLine(BLOB1.LobType + ".Write(" + buffer + ", 0, 2) => " + BLOB1.Value);  
        
        // Example - Copying data into another LOB.  
        long actual = BLOB1.CopyTo(BLOB2);  
        Console.WriteLine(BLOB1.LobType + ".CopyTo(" + BLOB2.Value + ") => " + actual);  
        
        // Commit the transaction now that everything succeeded.  
        // Note: On error, Transaction.Dispose is called (from the using statement)  
        // and will automatically roll-back the pending transaction.  
        command.Transaction.Commit();  
    }  
}  
```  
  
> [!NOTE]
>  对只读的写入操作 `LOB` 可能会成功，但不会更新 `LOB` 服务器上的。 但在这种情况下，将更新的本地副本 `LOB` 。 因此，以后对对象的读取操作 <xref:System.Data.OracleClient.OracleLob> 可能会返回写入操作的结果。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> 参数为 null 引用（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" /> 或 <paramref name="count" /> 参数中的值为非正。  
  
- 或 - 
<paramref name="offset" /> 参数与 <paramref name="count" /> 参数之和大于 <paramref name="buffer" /> 的长度。  
  
- 或 - 
<paramref name="count" /> 或 <paramref name="offset" /> 参数中指定的值小于零，或大于 4 GB。  
  
- 或 - 
必须将 <see langword="CLOB" /> 和 <see langword="NCLOB" /> 数据类型指定为偶数字节数。</exception>
        <exception cref="T:System.InvalidOperationException">该操作未处在事务中，<see cref="T:System.Data.OracleClient.OracleLob" /> 对象为 null，或者连接已关闭。</exception>
        <exception cref="T:System.ObjectDisposedException">对象已关闭或已释放。</exception>
        <exception cref="T:System.Data.OracleClient.OracleException">发生了 Oracle 错误。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public override void WriteByte (byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteByte(unsigned int8 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OracleClient.OracleLob.WriteByte(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteByte (value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteByte(System::Byte value);" />
      <MemberSignature Language="F#" Value="override this.WriteByte : byte -&gt; unit" Usage="oracleLob.WriteByte value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.OracleClient</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value">要写入流中的字节。</param>
        <summary>将一个字节写入 <see cref="T:System.Data.OracleClient.OracleLob" /> 流内的当前位置，并将流内的位置向前推进一个字节。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 如果写入操作成功，则流中的位置将向前推进一个字节。 如果发生异常，则流中的位置将保持不变。  
  
 允许写入超出末尾 `LOB` ，并将其放大 `LOB` 一个字节。  
  
 若要写入 `LOB` ，您必须 `LOB` 使用 SQL SELECT 语句中的 FOR UPDATE 子句检索到，并且必须已启动本地事务。  
  
> [!NOTE]
>  对只读的写入操作 `LOB` 可能会成功，但不会更新 `LOB` 服务器上的。 但在这种情况下，将更新的本地副本 `LOB` 。 因此，以后对对象的读取操作 <xref:System.Data.OracleClient.OracleLob> 可能会返回写入操作的结果。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
