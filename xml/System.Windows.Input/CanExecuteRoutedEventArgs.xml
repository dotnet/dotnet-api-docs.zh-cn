<Type Name="CanExecuteRoutedEventArgs" FullName="System.Windows.Input.CanExecuteRoutedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bc179f903cf033a5f812e4600ee0744cc09ff4a4" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86651246" /></Metadata><TypeSignature Language="C#" Value="public sealed class CanExecuteRoutedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CanExecuteRoutedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class CanExecuteRoutedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class CanExecuteRoutedEventArgs sealed : System::Windows::RoutedEventArgs" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventArgs = class&#xA;    inherit RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="adf19-101">为 <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> 和 <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> 路由事件提供数据。</span><span class="sxs-lookup"><span data-stu-id="adf19-101">Provides data for the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> and <see cref="E:System.Windows.Input.CommandManager.PreviewCanExecute" /> routed events.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="adf19-102">通常，命令源（如 <xref:System.Windows.Controls.MenuItem> ）将对调用方法， <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> <xref:System.Windows.Input.RoutedCommand> 以确定命令是否可以或无法在当前命令目标上执行。</span><span class="sxs-lookup"><span data-stu-id="adf19-102">Typically, a command source, such a <xref:System.Windows.Controls.MenuItem>, will call the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method on a <xref:System.Windows.Input.RoutedCommand> to determine if the command can or cannot execute on the current command target.</span></span>  <span data-ttu-id="adf19-103">如果 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> `false` 从事件处理程序设置为，则命令源将禁用其自身。</span><span class="sxs-lookup"><span data-stu-id="adf19-103">If <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false` from an event handler, the command source will disable itself.</span></span>  <span data-ttu-id="adf19-104">例如，如果作为 <xref:System.Windows.Controls.MenuItem> 命令的命令源，并且命令无法在当前命令目标上执行，则 <xref:System.Windows.Controls.MenuItem> 将灰显。</span><span class="sxs-lookup"><span data-stu-id="adf19-104">For example, if a <xref:System.Windows.Controls.MenuItem> is acting as the command source for a command and the command cannot execute on the current command target, then the <xref:System.Windows.Controls.MenuItem> will gray itself out.</span></span>  
  
 <span data-ttu-id="adf19-105"><xref:System.Windows.Input.ICommand.CanExecuteChanged>当执行命令的功能可能已更改时，事件将通知命令源。</span><span class="sxs-lookup"><span data-stu-id="adf19-105">The <xref:System.Windows.Input.ICommand.CanExecuteChanged> event notifies a command source when the ability of a command to execute may have changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="adf19-106">下面的示例创建一个 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> ，它 `true` 仅当命令目标为控件时才返回。</span><span class="sxs-lookup"><span data-stu-id="adf19-106">The follow example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that returns `true` only if the command target is a control.</span></span>  <span data-ttu-id="adf19-107">首先， <xref:System.Windows.RoutedEventArgs.Source%2A> 将强制转换为 <xref:System.Windows.Controls.Control> 。</span><span class="sxs-lookup"><span data-stu-id="adf19-107">First, <xref:System.Windows.RoutedEventArgs.Source%2A> is cast to a <xref:System.Windows.Controls.Control>.</span></span>  <span data-ttu-id="adf19-108">如果 <xref:System.Windows.RoutedEventArgs.Source%2A> 是 <xref:System.Windows.Controls.Control> ， <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 则设置为 `true` ; 否则设置为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="adf19-108">If <xref:System.Windows.RoutedEventArgs.Source%2A> is a <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, it is set to `false`.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CommandManager" />
  </Docs>
  <Members>
    <Member MemberName="CanExecute">
      <MemberSignature Language="C#" Value="public bool CanExecute { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanExecute" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberSignature Language="VB.NET" Value="Public Property CanExecute As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanExecute { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CanExecute : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="adf19-109">获取或设置一个值，该值指示是否可以对命令目标执行与此事件关联的 <see cref="T:System.Windows.Input.RoutedCommand" />。</span><span class="sxs-lookup"><span data-stu-id="adf19-109">Gets or sets a value that indicates whether the <see cref="T:System.Windows.Input.RoutedCommand" /> associated with this event can be executed on the command target.</span></span></summary>
        <value><span data-ttu-id="adf19-110">如果可以对命令目标执行此事件，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="adf19-110"><see langword="true" /> if the event can be executed on the command target; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="adf19-111">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="adf19-111">The default value is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="adf19-112">当为时，许多命令源（如 <xref:System.Windows.Controls.MenuItem> 和 <xref:System.Windows.Controls.Button> ）都将被禁用， <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> `false` 并启用 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> `true` 。</span><span class="sxs-lookup"><span data-stu-id="adf19-112">Many command sources, such as <xref:System.Windows.Controls.MenuItem> and <xref:System.Windows.Controls.Button>, are disabled when <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is `false` and enabled when the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="adf19-113">下面的示例创建一个 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> ，它仅在命令目标为控件时返回 true。</span><span class="sxs-lookup"><span data-stu-id="adf19-113">The follow example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that only returns true if the command target is a control.</span></span>  <span data-ttu-id="adf19-114">首先，将 <xref:System.Windows.RoutedEventArgs.Source%2A> 事件数据转换为 <xref:System.Windows.Controls.Control> 。</span><span class="sxs-lookup"><span data-stu-id="adf19-114">First the <xref:System.Windows.RoutedEventArgs.Source%2A> event data is cast to a <xref:System.Windows.Controls.Control>.</span></span>  <span data-ttu-id="adf19-115">如果它是 <xref:System.Windows.Controls.Control> ， <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 则设置为 `true` ; 否则设置为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="adf19-115">If it is a <xref:System.Windows.Controls.Control>, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, it is set to `false`.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewcanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewcanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="adf19-116">获取与此事件关联的命令。</span><span class="sxs-lookup"><span data-stu-id="adf19-116">Gets the command associated with this event.</span></span></summary>
        <value><span data-ttu-id="adf19-117">命令。</span><span class="sxs-lookup"><span data-stu-id="adf19-117">The command.</span></span> <span data-ttu-id="adf19-118">如果该命令不是自定义命令，则此值通常为 <see cref="T:System.Windows.Input.RoutedCommand" />。</span><span class="sxs-lookup"><span data-stu-id="adf19-118">Unless the command is a custom command, this is generally a <see cref="T:System.Windows.Input.RoutedCommand" />.</span></span> <span data-ttu-id="adf19-119">无默认值。</span><span class="sxs-lookup"><span data-stu-id="adf19-119">There is no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="adf19-120">有关命令的详细信息，请参阅[命令概述](/dotnet/framework/wpf/advanced/commanding-overview)。</span><span class="sxs-lookup"><span data-stu-id="adf19-120">For more information on commanding, see the [Commanding Overview](/dotnet/framework/wpf/advanced/commanding-overview).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="adf19-121">下面的示例创建一个 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> 用于处理多个命令的。</span><span class="sxs-lookup"><span data-stu-id="adf19-121">The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> which handles multiple commands.</span></span>  <span data-ttu-id="adf19-122">如果 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> 属性等于 <xref:System.Windows.Input.MediaCommands.Play%2A> 命令并且方法 `IsPlaying` 返回，则将 `false` <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 设置为 `true` ; 否则，将 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 设置为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="adf19-122">If the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> property is equal to the <xref:System.Windows.Input.MediaCommands.Play%2A> command and the method `IsPlaying` returns `false`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false`.</span></span>  <span data-ttu-id="adf19-123">如果 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> 属性等于 <xref:System.Windows.Input.MediaCommands.Stop%2A> 命令并且方法 `IsPlaying` 返回，则将 `true` <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 设置为 `true` ; 否则，将 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 设置为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="adf19-123">If the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.Command%2A> property is equal to the <xref:System.Windows.Input.MediaCommands.Stop%2A> command and the method `IsPlaying` returns `true`, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `true`; otherwise, <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> is set to `false`.</span></span>  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecanexecute)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCanExecute](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecanexecute)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
    <Member MemberName="ContinueRouting">
      <MemberSignature Language="C#" Value="public bool ContinueRouting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContinueRouting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberSignature Language="VB.NET" Value="Public Property ContinueRouting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ContinueRouting { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ContinueRouting : bool with get, set" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.ContinueRouting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="adf19-124">确定调用命令的输入路由事件是否应继续通过元素树路由。</span><span class="sxs-lookup"><span data-stu-id="adf19-124">Determines whether the input routed event that invoked the command should continue to route through the element tree.</span></span></summary>
        <value><span data-ttu-id="adf19-125">如果路由事件应继续通过元素树路由，则为 <see langword="true" />，否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="adf19-125"><see langword="true" /> if the routed event should continue to route through element tree; otherwise, <see langword="false" />.</span></span>   <span data-ttu-id="adf19-126">默认值为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="adf19-126">The default value is <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.CanExecuteRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="canExecuteRoutedEventArgs.InvokeEventHandler (genericHandler, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public object Parameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parameter { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameter : obj" Usage="System.Windows.Input.CanExecuteRoutedEventArgs.Parameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="adf19-127">获取命令特定的数据。</span><span class="sxs-lookup"><span data-stu-id="adf19-127">Gets the command specific data.</span></span></summary>
        <value><span data-ttu-id="adf19-128">命令数据。</span><span class="sxs-lookup"><span data-stu-id="adf19-128">The command data.</span></span>  <span data-ttu-id="adf19-129">默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="adf19-129">The default value is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="adf19-130">命令参数用于在执行命令时将特定信息传递给命令。</span><span class="sxs-lookup"><span data-stu-id="adf19-130">The command parameter is used to pass specific information to the command when it is executed.</span></span>  <span data-ttu-id="adf19-131">数据的类型由命令定义。</span><span class="sxs-lookup"><span data-stu-id="adf19-131">The type of the data is defined by the command.</span></span>  
  
 <span data-ttu-id="adf19-132"><xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A>可以为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="adf19-132"><xref:System.Windows.Input.CanExecuteRoutedEventArgs.Parameter%2A> can be `null`.</span></span> <span data-ttu-id="adf19-133">许多命令不处理或预期命令参数。</span><span class="sxs-lookup"><span data-stu-id="adf19-133">Many commands do not process or expect command parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="adf19-134">下面的示例演示如何使用 <xref:System.Windows.Controls.Button> 作为自定义命令的命令源。</span><span class="sxs-lookup"><span data-stu-id="adf19-134">The following example shows up to use a <xref:System.Windows.Controls.Button> as the command source for a custom command.</span></span>  <span data-ttu-id="adf19-135"><xref:System.Windows.Input.ICommandSource.Command%2A>的属性 <xref:System.Windows.Controls.Button> 设置为名为的自定义 <xref:System.Windows.Input.RoutedCommand> `customCommand` ， <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> 用于传递控件的属性的值 <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> <xref:System.Windows.Controls.Slider> 。</span><span class="sxs-lookup"><span data-stu-id="adf19-135">The <xref:System.Windows.Input.ICommandSource.Command%2A> property of the <xref:System.Windows.Controls.Button> is set to the custom <xref:System.Windows.Input.RoutedCommand> called `customCommand` and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> is used to pass the value of the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property of a <xref:System.Windows.Controls.Slider> control.</span></span>  <span data-ttu-id="adf19-136">这是通过使用数据绑定将绑定到属性来成就的 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> 。</span><span class="sxs-lookup"><span data-stu-id="adf19-136">This is accomplishment by using databinding to bind the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> to the <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> property.</span></span>  <span data-ttu-id="adf19-137">绑定表达式中的转换器是一个自定义 <xref:System.Windows.Data.IValueConverter> ，它在将 <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> <xref:System.Int32> 其绑定到之前将转换为 <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> 。</span><span class="sxs-lookup"><span data-stu-id="adf19-137">The converter in the binding expression is a custom <xref:System.Windows.Data.IValueConverter> which converts <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> into an <xref:System.Int32> before binding it to the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.</span></span>  
  
 [!code-xaml[invalidaterequerywithdispatchertimer#InvalidateSampleSliderCommandParameter](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml#invalidatesampleslidercommandparameter)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.CommandManager" />
      </Docs>
    </Member>
  </Members>
</Type>
