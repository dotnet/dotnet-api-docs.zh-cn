<Type Name="ICommandSource" FullName="System.Windows.Input.ICommandSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4c0b746aaab742af0c3df79ff8271961c4127a73" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89774345" /></Metadata><TypeSignature Language="C#" Value="public interface ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ICommandSource" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICommandSource" />
  <TypeSignature Language="F#" Value="type ICommandSource = interface" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>定义一个知道如何调用命令的对象。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 命令源定义该特定对象调用命令的方式。  例如，如果 <xref:System.Windows.Controls.Button> 与命令相关联，则在单击时调用该命令 <xref:System.Windows.Controls.Button> 。  
  
 如果与命令源关联的命令无法在当前命令目标上执行，则该命令源通常会禁用自身。  例如， <xref:System.Windows.Controls.MenuItem> <xref:System.Windows.Input.ApplicationCommands.Paste%2A> 当 <xref:System.Windows.Input.ApplicationCommands.Paste%2A> 命令无法在当前命令目标上执行时，与命令相关联的会变灰。  
  
 通常，命令源会侦听 <xref:System.Windows.Input.ICommand.CanExecuteChanged> 命令上的事件。  这会在命令目标上的条件发生更改时通知命令源，例如失去键盘焦点。  然后，命令源可以使用方法查询命令 <xref:System.Windows.Input.ICommand.CanExecute%2A> 。  
  
 实现中的一些类 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Input.ICommandSource> 为： <xref:System.Windows.Controls.Primitives.ButtonBase> 、 <xref:System.Windows.Controls.MenuItem> 和 <xref:System.Windows.Documents.Hyperlink> 。  
  
 在 Windows Presentation Foundation 命令系统中， <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 上的属性 <xref:System.Windows.Input.ICommandSource> 仅在为时才适用 <xref:System.Windows.Input.ICommand> <xref:System.Windows.Input.RoutedCommand> 。  如果在 <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 上设置， <xref:System.Windows.Input.ICommandSource> 并且相应的命令不是，则 <xref:System.Windows.Input.RoutedCommand> 忽略命令目标。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.ICommand" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
  </Docs>
  <Members>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ICommandSource.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand" Usage="System.Windows.Input.ICommandSource.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取在调用命令源时执行的命令。</summary>
        <value>在调用命令源时执行的命令。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ICommandSource.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandParameter : obj" Usage="System.Windows.Input.ICommandSource.CommandParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示可在执行命令时传递给该命令的用户定义的数据值。</summary>
        <value>命令特定数据。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常， <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> 用于在执行命令时将特定信息传递给命令。  数据的类型由命令定义。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ICommandSource.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandTarget : System.Windows.IInputElement" Usage="System.Windows.Input.ICommandSource.CommandTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>在其上执行该命令的对象。</summary>
        <value>在其上执行该命令的对象。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 在 Windows Presentation Foundation 命令系统中， <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 上的属性 <xref:System.Windows.Input.ICommandSource> 仅在为时才适用 <xref:System.Windows.Input.ICommand> <xref:System.Windows.Input.RoutedCommand> 。  如果在 <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 上设置， <xref:System.Windows.Input.ICommandSource> 并且相应的命令不是，则 <xref:System.Windows.Input.RoutedCommand> 忽略命令目标。  
  
 当与一起使用时 <xref:System.Windows.Input.RoutedCommand> ，命令目标是 <xref:System.Windows.Input.CommandManager.Executed> 引发和事件的对象 <xref:System.Windows.Input.CommandManager.CanExecute> 。 如果 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 未设置该属性，则具有键盘焦点的元素将用作目标。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
      </Docs>
    </Member>
  </Members>
</Type>
