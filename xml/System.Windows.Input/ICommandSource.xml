<Type Name="ICommandSource" FullName="System.Windows.Input.ICommandSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4c0b746aaab742af0c3df79ff8271961c4127a73" /><Meta Name="ms.sourcegitcommit" Value="f828282420515ef705e09bbdb6c22116df98b5e3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="82497341" /></Metadata><TypeSignature Language="C#" Value="public interface ICommandSource" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICommandSource" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ICommandSource" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICommandSource" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICommandSource" />
  <TypeSignature Language="F#" Value="type ICommandSource = interface" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="88bf4-101">定义一个知道如何调用命令的对象。</span><span class="sxs-lookup"><span data-stu-id="88bf4-101">Defines an object that knows how to invoke a command.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88bf4-102">命令源定义该特定对象调用命令的方式。</span><span class="sxs-lookup"><span data-stu-id="88bf4-102">The command source defines how a command is invoked by that particular object.</span></span>  <span data-ttu-id="88bf4-103">例如，如果 <xref:System.Windows.Controls.Button> 与命令相关联，则在单击时调用该命令 <xref:System.Windows.Controls.Button> 。</span><span class="sxs-lookup"><span data-stu-id="88bf4-103">For example, if a <xref:System.Windows.Controls.Button> is associated with a command, the command is invoked when the <xref:System.Windows.Controls.Button> is clicked.</span></span>  
  
 <span data-ttu-id="88bf4-104">如果与命令源关联的命令无法在当前命令目标上执行，则该命令源通常会禁用自身。</span><span class="sxs-lookup"><span data-stu-id="88bf4-104">A command source will normally disable itself if the command it is associated with cannot execute on the current command target.</span></span>  <span data-ttu-id="88bf4-105">例如， <xref:System.Windows.Controls.MenuItem> <xref:System.Windows.Input.ApplicationCommands.Paste%2A> 当 <xref:System.Windows.Input.ApplicationCommands.Paste%2A> 命令无法在当前命令目标上执行时，与命令相关联的会变灰。</span><span class="sxs-lookup"><span data-stu-id="88bf4-105">For example, a <xref:System.Windows.Controls.MenuItem> associated with the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command will gray itself out when the <xref:System.Windows.Input.ApplicationCommands.Paste%2A> command cannot execute on the current command target.</span></span>  
  
 <span data-ttu-id="88bf4-106">通常，命令源会侦听 <xref:System.Windows.Input.ICommand.CanExecuteChanged> 命令上的事件。</span><span class="sxs-lookup"><span data-stu-id="88bf4-106">Normally, a command source will listen to the <xref:System.Windows.Input.ICommand.CanExecuteChanged> event on the command.</span></span>  <span data-ttu-id="88bf4-107">这会在命令目标上的条件发生更改时通知命令源，例如失去键盘焦点。</span><span class="sxs-lookup"><span data-stu-id="88bf4-107">This informs the command source when conditions change on the command target, such as loss of keyboard focus.</span></span>  <span data-ttu-id="88bf4-108">然后，命令源可以使用方法查询命令 <xref:System.Windows.Input.ICommand.CanExecute%2A> 。</span><span class="sxs-lookup"><span data-stu-id="88bf4-108">The command source can then query the command using the <xref:System.Windows.Input.ICommand.CanExecute%2A> method.</span></span>  
  
 <span data-ttu-id="88bf4-109">实现中的一些类 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Input.ICommandSource> 为： <xref:System.Windows.Controls.Primitives.ButtonBase> 、 <xref:System.Windows.Controls.MenuItem> 和 <xref:System.Windows.Documents.Hyperlink> 。</span><span class="sxs-lookup"><span data-stu-id="88bf4-109">Some of the classes in [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] that implement <xref:System.Windows.Input.ICommandSource> are: <xref:System.Windows.Controls.Primitives.ButtonBase>, <xref:System.Windows.Controls.MenuItem>, and <xref:System.Windows.Documents.Hyperlink>.</span></span>  
  
 <span data-ttu-id="88bf4-110">在 Windows Presentation Foundation 命令系统中， <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 上的属性 <xref:System.Windows.Input.ICommandSource> 仅在为时才适用 <xref:System.Windows.Input.ICommand> <xref:System.Windows.Input.RoutedCommand> 。</span><span class="sxs-lookup"><span data-stu-id="88bf4-110">In the Windows Presentation Foundation commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on a <xref:System.Windows.Input.ICommandSource> is only applicable when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="88bf4-111">如果在 <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 上设置， <xref:System.Windows.Input.ICommandSource> 并且相应的命令不是，则 <xref:System.Windows.Input.RoutedCommand> 忽略命令目标。</span><span class="sxs-lookup"><span data-stu-id="88bf4-111">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on a <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.ICommand" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
  </Docs>
  <Members>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ICommandSource.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand" Usage="System.Windows.Input.ICommandSource.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="88bf4-112">获取在调用命令源时执行的命令。</span><span class="sxs-lookup"><span data-stu-id="88bf4-112">Gets the command that will be executed when the command source is invoked.</span></span></summary>
        <value><span data-ttu-id="88bf4-113">在调用命令源时执行的命令。</span><span class="sxs-lookup"><span data-stu-id="88bf4-113">The command that will be executed when the command source is invoked.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ICommandSource.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandParameter : obj" Usage="System.Windows.Input.ICommandSource.CommandParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="88bf4-114">表示可在执行命令时传递给该命令的用户定义的数据值。</span><span class="sxs-lookup"><span data-stu-id="88bf4-114">Represents a user defined data value that can be passed to the command when it is executed.</span></span></summary>
        <value><span data-ttu-id="88bf4-115">命令特定数据。</span><span class="sxs-lookup"><span data-stu-id="88bf4-115">The command specific data.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88bf4-116">通常， <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> 用于在执行命令时将特定信息传递给命令。</span><span class="sxs-lookup"><span data-stu-id="88bf4-116">Normally, the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A> is used to pass specific information to the command when it is executed.</span></span>  <span data-ttu-id="88bf4-117">数据的类型由命令定义。</span><span class="sxs-lookup"><span data-stu-id="88bf4-117">The type of the data is defined by the command.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ICommandSource.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommandTarget : System.Windows.IInputElement" Usage="System.Windows.Input.ICommandSource.CommandTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="88bf4-118">在其上执行该命令的对象。</span><span class="sxs-lookup"><span data-stu-id="88bf4-118">The object that the command is being executed on.</span></span></summary>
        <value><span data-ttu-id="88bf4-119">在其上执行该命令的对象。</span><span class="sxs-lookup"><span data-stu-id="88bf4-119">The object that the command is being executed on.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="88bf4-120">在 Windows Presentation Foundation 命令系统中， <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 上的属性 <xref:System.Windows.Input.ICommandSource> 仅在为时才适用 <xref:System.Windows.Input.ICommand> <xref:System.Windows.Input.RoutedCommand> 。</span><span class="sxs-lookup"><span data-stu-id="88bf4-120">In the Windows Presentation Foundation commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on a <xref:System.Windows.Input.ICommandSource> is only applicable when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="88bf4-121">如果在 <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 上设置， <xref:System.Windows.Input.ICommandSource> 并且相应的命令不是，则 <xref:System.Windows.Input.RoutedCommand> 忽略命令目标。</span><span class="sxs-lookup"><span data-stu-id="88bf4-121">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on a <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.</span></span>  
  
 <span data-ttu-id="88bf4-122">当与一起使用时 <xref:System.Windows.Input.RoutedCommand> ，命令目标是 <xref:System.Windows.Input.CommandManager.Executed> 引发和事件的对象 <xref:System.Windows.Input.CommandManager.CanExecute> 。</span><span class="sxs-lookup"><span data-stu-id="88bf4-122">When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised.</span></span> <span data-ttu-id="88bf4-123">如果 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 未设置该属性，则具有键盘焦点的元素将用作目标。</span><span class="sxs-lookup"><span data-stu-id="88bf4-123">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> property is not set, the element with keyboard focus will be used as the target.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ICommand" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
      </Docs>
    </Member>
  </Members>
</Type>
