<Type Name="ExecutedRoutedEventArgs" FullName="System.Windows.Input.ExecutedRoutedEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="131f191e4a5f968d87aa4ea4dfb6bc3d455fc0b5" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89765372" /></Metadata><TypeSignature Language="C#" Value="public sealed class ExecutedRoutedEventArgs : System.Windows.RoutedEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ExecutedRoutedEventArgs extends System.Windows.RoutedEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ExecutedRoutedEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ExecutedRoutedEventArgs&#xA;Inherits RoutedEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExecutedRoutedEventArgs sealed : System::Windows::RoutedEventArgs" />
  <TypeSignature Language="F#" Value="type ExecutedRoutedEventArgs = class&#xA;    inherit RoutedEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.RoutedEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>为 <see cref="E:System.Windows.Input.CommandManager.Executed" /> 和 <see cref="E:System.Windows.Input.CommandManager.PreviewExecuted" /> 路由事件提供数据。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.ExecutedRoutedEventHandler> 表示实现的命令逻辑的方法 <xref:System.Windows.Input.RoutedCommand> 。  通过从命令分离实现逻辑，可从不同的源和类型调用命令并实现命令逻辑的集中。  
  
 此事件数据类还用于 <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> 和 <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType> 。 但大多数实际处理程序将处理 <xref:System.Windows.Input.CommandBinding.Executed> 来自特定的事件 <xref:System.Windows.Input.CommandBinding> ，而不是在 <xref:System.Windows.Input.CommandManager> 级别工作。  
  
 有关命令的详细信息，请参阅[命令概述](/dotnet/framework/wpf/advanced/commanding-overview)。  
  
   
  
## Examples  
 下面的示例创建一个 <xref:System.Windows.Input.ExecutedRoutedEventHandler> ，它将 <xref:System.Windows.MessageBox> 在执行命令时打开。  
  
 [!code-csharp[commandwithhandler#CommandHandlerExecutedHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlerexecutedhandler)]
 [!code-vb[commandwithhandler#CommandHandlerExecutedHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlerexecutedhandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Docs>
  <Members>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ExecutedRoutedEventArgs.Command" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand" Usage="System.Windows.Input.ExecutedRoutedEventArgs.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取调用过的命令。</summary>
        <value>与此事件关联的命令。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 与事件关联的命令可以强制转换为的特定实现 <xref:System.Windows.Input.ICommand> ，如 <xref:System.Windows.Input.RoutedCommand> ，如果该类型已知，则为。  
  
   
  
## Examples  
 下面的示例创建一个 <xref:System.Windows.Input.ExecutedRoutedEventHandler> 用于处理多个命令的。 处理程序将检查 <xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> 上的属性 <xref:System.Windows.Input.ExecutedRoutedEventArgs> ，以确定要调用的方法。  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewMultipleCmdHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewmultiplecmdhandler)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewMultipleCmdHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewmultiplecmdhandler)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object target);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.ExecutedRoutedEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, target As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ target);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="executedRoutedEventArgs.InvokeEventHandler (genericHandler, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="target" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler">To be added.</param>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public object Parameter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.ExecutedRoutedEventArgs.Parameter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parameter { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parameter : obj" Usage="System.Windows.Input.ExecutedRoutedEventArgs.Parameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取命令的数据参数。</summary>
        <value>命令特定的数据。 默认值是 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此属性表示由特定命令定义的泛型数据参数。  
  
 如果此参数不是必需的，则 `null` 可以传递。  
  
 通常， <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> 用于在执行命令时将特定信息传递给命令。  数据的类型由命令定义。  
  
   
  
## Examples  
 下面的示例 <xref:System.Windows.Input.ExecutedRoutedEventHandler> 为自定义创建 <xref:System.Windows.Input.RoutedCommand> 。  处理程序使用通过 <xref:System.Windows.Controls.TextBox> <xref:System.Windows.Controls.Primitives.RangeBase.Value%2A> <xref:System.Windows.Controls.Slider> 传递到处理程序的控件的当前时间和属性来更新 <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A?displayProperty=nameWithType> 。  
  
 [!code-csharp[invalidaterequerywithdispatchertimer#InvalidateSampleExecuted](~/samples/snippets/csharp/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/CSharp/Window1.xaml.cs#invalidatesampleexecuted)]
 [!code-vb[invalidaterequerywithdispatchertimer#InvalidateSampleExecuted](~/samples/snippets/visualbasic/VS_Snippets_Wpf/InvalidateRequeryWithDispatcherTimer/visualbasic/window1.xaml.vb#invalidatesampleexecuted)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
      </Docs>
    </Member>
  </Members>
</Type>
