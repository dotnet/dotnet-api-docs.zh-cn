<Type Name="InputBinding" FullName="System.Windows.Input.InputBinding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a01155b0a7b57602d93f54c6ec33b8688ee7d09c" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102091288" /></Metadata><TypeSignature Language="C#" Value="public class InputBinding : System.Windows.Freezable, System.Windows.Input.ICommandSource" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InputBinding extends System.Windows.Freezable implements class System.Windows.Input.ICommandSource" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.InputBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class InputBinding&#xA;Inherits Freezable&#xA;Implements ICommandSource" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C++ CLI" Value="public ref class InputBinding : System::Windows::Freezable, System::Windows::Input::ICommandSource" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="F#" Value="type InputBinding = class&#xA;    inherit Freezable&#xA;    interface ICommandSource" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
  <TypeSignature Language="C#" Value="public class InputBinding : System.Windows.DependencyObject, System.Windows.Input.ICommandSource" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InputBinding extends System.Windows.DependencyObject implements class System.Windows.Input.ICommandSource" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="VB.NET" Value="Public Class InputBinding&#xA;Inherits DependencyObject&#xA;Implements ICommandSource" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="C++ CLI" Value="public ref class InputBinding : System::Windows::DependencyObject, System::Windows::Input::ICommandSource" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <TypeSignature Language="F#" Value="type InputBinding = class&#xA;    inherit DependencyObject&#xA;    interface ICommandSource" FrameworkAlternate="netframework-3.0;netframework-3.5" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Freezable</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-3.0;netframework-3.5">System.Windows.DependencyObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Input.ICommandSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="7295d-101">表示 <see cref="T:System.Windows.Input.InputGesture" /> 和命令之间的绑定。</span><span class="sxs-lookup"><span data-stu-id="7295d-101">Represents a binding between an <see cref="T:System.Windows.Input.InputGesture" /> and a command.</span></span> <span data-ttu-id="7295d-102">此命令可能是 <see cref="T:System.Windows.Input.RoutedCommand" />。</span><span class="sxs-lookup"><span data-stu-id="7295d-102">The command is potentially a <see cref="T:System.Windows.Input.RoutedCommand" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7295d-103">可以通过创建来指定用户输入调用命令 <xref:System.Windows.Input.InputBinding> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-103">You can specify that user input invokes a command by creating a <xref:System.Windows.Input.InputBinding>.</span></span> <span data-ttu-id="7295d-104">当用户执行指定的输入时，将 <xref:System.Windows.Input.ICommand> 执行设置为属性的 <xref:System.Windows.Input.InputBinding.Command%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-104">When the user performs the specified input, the <xref:System.Windows.Input.ICommand> that is set to the <xref:System.Windows.Input.InputBinding.Command%2A> property is executed.</span></span>  
  
 <span data-ttu-id="7295d-105"><xref:System.Windows.Input.InputBinding>通过在 <xref:System.Windows.Input.InputBinding.Command%2A> 、和属性上创建绑定，可以指定调用在对象上定义的命令 <xref:System.Windows.Input.InputBinding.CommandParameter%2A> <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-105">You can specify that the <xref:System.Windows.Input.InputBinding> invokes a command that is defined on an object by creating a binding on the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties.</span></span> <span data-ttu-id="7295d-106">这使你可以定义自定义命令并将其与用户输入相关联。</span><span class="sxs-lookup"><span data-stu-id="7295d-106">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="7295d-107">有关详细信息，请参阅 "示例" 部分中的第二个示例。</span><span class="sxs-lookup"><span data-stu-id="7295d-107">For more information, see the second example in the Examples section.</span></span>  
  
 <span data-ttu-id="7295d-108"><xref:System.Windows.Input.InputBinding>可以通过向指定的对象或在类级别上定义 <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> <xref:System.Windows.Input.CommandManager> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-108">An <xref:System.Windows.Input.InputBinding> can be defined on a specific object or at the class level by registering a <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> with the <xref:System.Windows.Input.CommandManager>.</span></span>  
  
 <span data-ttu-id="7295d-109"><xref:System.Windows.Input.InputBinding>类本身不支持 XAML 用法，因为它不公开一个公共的无参数构造函数 (有一个无参数的构造函数，但它) 保护。</span><span class="sxs-lookup"><span data-stu-id="7295d-109">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage because it does not expose a public parameterless constructor (there is a parameterless constructor, but it is protected).</span></span> <span data-ttu-id="7295d-110">但是，派生类可以公开公共构造函数，因此可以设置从继承的派生类的属性，并 <xref:System.Windows.Input.InputBinding> 使用 XAML 用法。</span><span class="sxs-lookup"><span data-stu-id="7295d-110">However, derived classes can expose a public constructor and therefore can set properties on the derived class that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="7295d-111"><xref:System.Windows.Input.InputBinding>可以在 xaml 中实例化的两个现有派生类，并且可以在 xaml 中设置属性，即 <xref:System.Windows.Input.KeyBinding> 和 <xref:System.Windows.Input.MouseBinding> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-111">Two existing <xref:System.Windows.Input.InputBinding>-derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="7295d-112">WPF 编程中设置为 XAML 并采用一个或多个 <xref:System.Windows.Input.InputBinding> 对象作为值的典型属性是 <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType> 属性。</span><span class="sxs-lookup"><span data-stu-id="7295d-112">The typical property in WPF programming that is set in XAML and takes one or more <xref:System.Windows.Input.InputBinding> objects as values is the <xref:System.Windows.UIElement.InputBindings%2A?displayProperty=nameWithType> property.</span></span>  
  
<a name="xamlObjectElementUsage_InputBinding"></a>   
## <a name="xaml-object-element-usage"></a><span data-ttu-id="7295d-113">XAML 对象元素用法</span><span class="sxs-lookup"><span data-stu-id="7295d-113">XAML Object Element Usage</span></span>  
 \<*inputBindingDerivedClass…/*>  
  
<a name="xamlValues_InputBinding"></a>   
## <a name="xaml-values"></a><span data-ttu-id="7295d-114">XAML 值</span><span class="sxs-lookup"><span data-stu-id="7295d-114">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="7295d-115"><xref:System.Windows.Input.InputBinding>支持对象元素语法的派生类，如 <xref:System.Windows.Input.KeyBinding> 或 <xref:System.Windows.Input.MouseBinding> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-115">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="7295d-116">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="7295d-116">See Remarks.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7295d-117">下面的示例演示如何使用将 <xref:System.Windows.Input.KeyBinding> 绑定 <xref:System.Windows.Input.KeyGesture> 到 <xref:System.Windows.Input.ApplicationCommands.Open%2A> 命令。</span><span class="sxs-lookup"><span data-stu-id="7295d-117">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A> command.</span></span> <span data-ttu-id="7295d-118">执行 key 势时，将调用 "打开" 命令。</span><span class="sxs-lookup"><span data-stu-id="7295d-118">When the key gesture is performed, the Open command is invoked.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 <span data-ttu-id="7295d-119">下面的示例演示如何将自定义命令绑定到 <xref:System.Windows.Input.InputBinding> 对象。</span><span class="sxs-lookup"><span data-stu-id="7295d-119">The following examples show how to bind a custom command to <xref:System.Windows.Input.InputBinding> objects.</span></span> <span data-ttu-id="7295d-120">这些示例创建一个应用程序，使用户可以通过执行下列操作之一来更改背景色：</span><span class="sxs-lookup"><span data-stu-id="7295d-120">These examples create an application that enables the user to change the background color by performing one of the following actions:</span></span>  
  
-   <span data-ttu-id="7295d-121">单击按钮。</span><span class="sxs-lookup"><span data-stu-id="7295d-121">Clicking a button.</span></span>  
  
-   <span data-ttu-id="7295d-122">按 CTRL + C。</span><span class="sxs-lookup"><span data-stu-id="7295d-122">Pressing CTRL+C.</span></span>  
  
-   <span data-ttu-id="7295d-123">右键单击 <xref:System.Windows.Controls.StackPanel>) 之外的 (<xref:System.Windows.Controls.ListBox> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-123">Right-clicking a <xref:System.Windows.Controls.StackPanel> (outside the <xref:System.Windows.Controls.ListBox>).</span></span>  
  
 <span data-ttu-id="7295d-124">第一个示例创建一个名为的类 `SimpleDelegateCommand` 。</span><span class="sxs-lookup"><span data-stu-id="7295d-124">The first example creates a class named `SimpleDelegateCommand`.</span></span> <span data-ttu-id="7295d-125">此类接受委托，以便创建命令的对象可以定义命令执行时发生的操作。</span><span class="sxs-lookup"><span data-stu-id="7295d-125">This class accepts a delegate so that the object creating the command can define the action that occurs when the command executes.</span></span> <span data-ttu-id="7295d-126">`SimpleDelegateCommand` 还定义属性，这些属性指定哪个键和鼠标输入调用命令。</span><span class="sxs-lookup"><span data-stu-id="7295d-126">`SimpleDelegateCommand` also defines properties that specify what key and mouse input invokes the command.</span></span> <span data-ttu-id="7295d-127">`GestureKey` 并 `GestureModifier` 指定键盘输入; `MouseGesture` 指定鼠标输入。</span><span class="sxs-lookup"><span data-stu-id="7295d-127">`GestureKey` and `GestureModifier` specify the keyboard input; `MouseGesture` specifies the mouse input.</span></span>  
  
 [!code-csharp[InputCommandBinding#DelegateCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#delegatecommand)]
 [!code-vb[InputCommandBinding#DelegateCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#delegatecommand)]  
  
 <span data-ttu-id="7295d-128">下面的示例创建并初始化 `ColorChangeCommand` ，它是一个 `SimpleDelegateCommand` 。</span><span class="sxs-lookup"><span data-stu-id="7295d-128">The following example creates and initializes the `ColorChangeCommand`, which is a `SimpleDelegateCommand`.</span></span> <span data-ttu-id="7295d-129">该示例还定义调用命令时执行的方法，并设置 `GestureKey` 、 `GestureModifier` 和 `MouseGesture` 属性。</span><span class="sxs-lookup"><span data-stu-id="7295d-129">The example also defines the method that executes when the command is invoked and sets the `GestureKey`, `GestureModifier`, and `MouseGesture` properties.</span></span> <span data-ttu-id="7295d-130">应用程序将 `InitializeCommand` 在程序启动时调用方法，例如在的构造函数中 <xref:System.Windows.Window> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-130">An application would call the `InitializeCommand` method when the program begins, such as in the constructor of a <xref:System.Windows.Window>.</span></span>  
  
 [!code-csharp[InputCommandBinding#InitializeCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml.cs#initializecommand)]
 [!code-vb[InputCommandBinding#InitializeCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/inputcommandbinding/visualbasic/mainwindow.xaml.vb#initializecommand)]  
  
 <span data-ttu-id="7295d-131">最后，下面的示例创建用户界面。</span><span class="sxs-lookup"><span data-stu-id="7295d-131">Finally, the following example creates the user interface.</span></span> <span data-ttu-id="7295d-132">该示例将一个 <xref:System.Windows.Input.KeyBinding> 和一个添加 <xref:System.Windows.Input.MouseBinding> 到 <xref:System.Windows.Controls.StackPanel> 包含和的 <xref:System.Windows.Controls.Button> <xref:System.Windows.Controls.ListBox> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-132">The example adds a <xref:System.Windows.Input.KeyBinding> and a <xref:System.Windows.Input.MouseBinding> to a <xref:System.Windows.Controls.StackPanel> that contains a <xref:System.Windows.Controls.Button> and a <xref:System.Windows.Controls.ListBox>.</span></span> <span data-ttu-id="7295d-133">当用户在中选择某一项时 <xref:System.Windows.Controls.ListBox> ，他或她可以将背景色更改为所选颜色。</span><span class="sxs-lookup"><span data-stu-id="7295d-133">When the user selects an item in the <xref:System.Windows.Controls.ListBox>, he or she can change the color of the background to the selected color.</span></span> <span data-ttu-id="7295d-134">在每种情况下， `CommandParameter` 属性都绑定到中的选定项 <xref:System.Windows.Controls.ListBox> ， `Command` 属性绑定到 `ColorChangeCommand` 。</span><span class="sxs-lookup"><span data-stu-id="7295d-134">In each case, the `CommandParameter` property is bound to the selected item in the <xref:System.Windows.Controls.ListBox>, and the `Command` property is bound to the `ColorChangeCommand`.</span></span> <span data-ttu-id="7295d-135"><xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>、 <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType> 和 <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType> 属性绑定到类中的相应属性 `SimpleDelegateCommand` 。</span><span class="sxs-lookup"><span data-stu-id="7295d-135">The <xref:System.Windows.Input.KeyBinding.Key%2A?displayProperty=nameWithType>, <xref:System.Windows.Input.KeyBinding.Modifiers%2A?displayProperty=nameWithType>, and <xref:System.Windows.Input.MouseBinding.MouseAction%2A?displayProperty=nameWithType> properties are bound to the corresponding properties on the `SimpleDelegateCommand` class.</span></span>  
  
 [!code-xaml[InputCommandBinding#UI](~/samples/snippets/csharp/VS_Snippets_Wpf/inputcommandbinding/csharp/mainwindow.xaml#ui)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.UIElement.InputBindings" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7295d-136">初始化 <see cref="T:System.Windows.Input.InputBinding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="7295d-136">Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected InputBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; InputBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7295d-137">提供从 <see cref="T:System.Windows.Input.InputBinding" /> 派生的类的基初始化。</span><span class="sxs-lookup"><span data-stu-id="7295d-137">Provides base initialization for classes derived from <see cref="T:System.Windows.Input.InputBinding" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7295d-138"><xref:System.Windows.Input.InputBinding> 从技术上说，它不是抽象类，但无参数构造函数特意受到保护的访问。</span><span class="sxs-lookup"><span data-stu-id="7295d-138"><xref:System.Windows.Input.InputBinding> is not technically an abstract class, but the parameterless constructor is deliberately protected access.</span></span> <span data-ttu-id="7295d-139">这会使 <xref:System.Windows.Input.InputBinding> "抽象" 类成为 XAML 的作用。</span><span class="sxs-lookup"><span data-stu-id="7295d-139">This has the effect of making <xref:System.Windows.Input.InputBinding> an "abstract" class for XAML.</span></span> <span data-ttu-id="7295d-140">WPF 中有一些现有属性，这些属性的 XAML 用法需要类型为的对象 <xref:System.Windows.Input.InputBinding> ，但你不能 <xref:System.Windows.Input.InputBinding> 在 XAML 中指定实例。</span><span class="sxs-lookup"><span data-stu-id="7295d-140">There are existing properties in WPF that have XAML usages that expect objects of type <xref:System.Windows.Input.InputBinding>, but you cannot specify an <xref:System.Windows.Input.InputBinding> instance in XAML.</span></span> <span data-ttu-id="7295d-141">相反，你可以指定一个特定于设备的 <xref:System.Windows.Input.InputBinding> 派生类作为值，例如 <xref:System.Windows.Input.KeyBinding> 或 <xref:System.Windows.Input.MouseBinding> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-141">Instead, you can specify one of the device-specific <xref:System.Windows.Input.InputBinding> derived classes as values, for instance <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="7295d-142">如果实现的自定义 <see cref="T:System.Windows.Input.InputBinding" /> 支持 XAML 用法，请使用此构造函数进行基本初始化。</span><span class="sxs-lookup"><span data-stu-id="7295d-142">If you implement a custom <see cref="T:System.Windows.Input.InputBinding" /> that supports a XAML usage, use this constructor for base initialization.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InputBinding (System.Windows.Input.ICommand command, System.Windows.Input.InputGesture gesture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.InputGesture gesture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.InputGesture)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, gesture As InputGesture)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InputBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::InputGesture ^ gesture);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.InputBinding : System.Windows.Input.ICommand * System.Windows.Input.InputGesture -&gt; System.Windows.Input.InputBinding" Usage="new System.Windows.Input.InputBinding (command, gesture)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="gesture" Type="System.Windows.Input.InputGesture" />
      </Parameters>
      <Docs>
        <param name="command"><span data-ttu-id="7295d-143">要与 <paramref name="gesture" /> 关联的命令。</span><span class="sxs-lookup"><span data-stu-id="7295d-143">The command to associate with <paramref name="gesture" />.</span></span></param>
        <param name="gesture"><span data-ttu-id="7295d-144">要与 <paramref name="command" /> 关联的输入笔势。</span><span class="sxs-lookup"><span data-stu-id="7295d-144">The input gesture to associate with <paramref name="command" />.</span></span></param>
        <summary><span data-ttu-id="7295d-145">用指定的命令和输入笔势初始化 <see cref="T:System.Windows.Input.InputBinding" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="7295d-145">Initializes a new instance of the <see cref="T:System.Windows.Input.InputBinding" /> class with the specified command and input gesture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7295d-146">如果你是使用现有输入绑定类的软件开发人员，则通常不会使用此构造函数，即使你要定义自定义命令也是如此。</span><span class="sxs-lookup"><span data-stu-id="7295d-146">If you are a software developer using existing input binding classes, you generally will not use this constructor, even if you are defining custom commands.</span></span> <span data-ttu-id="7295d-147">相反，你将使用派生类的构造函数 (<xref:System.Windows.Input.KeyBinding> 和 <xref:System.Windows.Input.MouseBinding>) ，否则将使用此构造函数作为自定义类的基本实例化。</span><span class="sxs-lookup"><span data-stu-id="7295d-147">Instead, you will either use constructors of derived classes (<xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>), or you will use this constructor as the base instantiation of a custom class.</span></span> <span data-ttu-id="7295d-148">尽管 <xref:System.Windows.Input.InputBinding> 类在原则上支持不同的输入设备，但实际上您必须选择输入绑定将表示的设备。</span><span class="sxs-lookup"><span data-stu-id="7295d-148">Although the <xref:System.Windows.Input.InputBinding> class supports different input devices in principle, in practice you must choose which device the input binding will represent.</span></span> <span data-ttu-id="7295d-149">只能 <xref:System.Windows.Input.InputBinding.Gesture%2A> 在输入绑定上设置一个值，笔势是设备特定的。</span><span class="sxs-lookup"><span data-stu-id="7295d-149">You only can set only one <xref:System.Windows.Input.InputBinding.Gesture%2A> value on the input binding, and gestures are device-specific.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7295d-150">下面的示例演示如何使用此构造函数将与关联 <xref:System.Windows.Input.KeyGesture> <xref:System.Windows.Input.RoutedCommand> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-150">The following example shows how to use this constructor to associate a <xref:System.Windows.Input.KeyGesture> with a <xref:System.Windows.Input.RoutedCommand>.</span></span>  
  
 [!code-csharp[commandlibrarysnippets#InputBindingAddingCommand](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#inputbindingaddingcommand)]
 [!code-vb[commandlibrarysnippets#InputBindingAddingCommand](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#inputbindingaddingcommand)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7295d-151"><paramref name="command" /> 或 <paramref name="gesture" /> 为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7295d-151"><paramref name="command" /> or <paramref name="gesture" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CloneCore">
      <MemberSignature Language="C#" Value="protected override void CloneCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.CloneCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.CloneCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="7295d-152">要克隆的对象。</span><span class="sxs-lookup"><span data-stu-id="7295d-152">The object to clone.</span></span></param>
        <summary><span data-ttu-id="7295d-153">复制指定对象的属性的基（未经过动画处理的）值。</span><span class="sxs-lookup"><span data-stu-id="7295d-153">Copies the base (non-animated) values of the properties of the specified object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValueCore">
      <MemberSignature Language="C#" Value="protected override void CloneCurrentValueCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CloneCurrentValueCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CloneCurrentValueCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CloneCurrentValueCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CloneCurrentValueCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.CloneCurrentValueCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.CloneCurrentValueCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="7295d-154">要克隆的对象。</span><span class="sxs-lookup"><span data-stu-id="7295d-154">The object to clone.</span></span></param>
        <summary><span data-ttu-id="7295d-155">复制指定对象的属性的当前值。</span><span class="sxs-lookup"><span data-stu-id="7295d-155">Copies the current values of the properties of the specified object.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Command">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ICommand Command { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.ICommand Command" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Command" />
      <MemberSignature Language="VB.NET" Value="Public Property Command As ICommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ICommand ^ Command { System::Windows::Input::ICommand ^ get(); void set(System::Windows::Input::ICommand ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Command : System.Windows.Input.ICommand with get, set" Usage="System.Windows.Input.InputBinding.Command" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Windows.Localizability(System.Windows.LocalizationCategory.NeverLocalize)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5">
          <AttributeName Language="C#">[set: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ICommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7295d-156">获取或设置与此输入绑定关联的 <see cref="T:System.Windows.Input.ICommand" />。</span><span class="sxs-lookup"><span data-stu-id="7295d-156">Gets or sets the <see cref="T:System.Windows.Input.ICommand" /> associated with this input binding.</span></span></summary>
        <value><span data-ttu-id="7295d-157">关联的命令。</span><span class="sxs-lookup"><span data-stu-id="7295d-157">The associated command.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7295d-158"><xref:System.Windows.Input.InputBinding>类不支持 XAML 用法，因为它不会公开公共的无参数构造函数 (它具有无参数的构造函数，但) 受保护。</span><span class="sxs-lookup"><span data-stu-id="7295d-158">The <xref:System.Windows.Input.InputBinding> class does not support XAML usage because it does not expose a public parameterless constructor (it has a parameterless constructor, but it is protected).</span></span> <span data-ttu-id="7295d-159">但是，派生类可以公开公共构造函数，因此，可以使用从继承的属性 <xref:System.Windows.Input.InputBinding> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-159">However, derived classes can expose a public constructor and therefore, can use properties that are inherited from <xref:System.Windows.Input.InputBinding>.</span></span> <span data-ttu-id="7295d-160"><xref:System.Windows.Input.InputBinding>可以在 xaml 中实例化的两个现有派生类，并且可以使用 xaml 使用情况设置属性为 <xref:System.Windows.Input.KeyBinding> 和 <xref:System.Windows.Input.MouseBinding> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-160">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties with XAML usages are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
 <span data-ttu-id="7295d-161"><xref:System.Windows.Input.ICommand> 引用一个类型转换器，该转换器使某些预先存在的 <xref:System.Windows.Input.ICommand> 实现能够以字符串的形式指定值。</span><span class="sxs-lookup"><span data-stu-id="7295d-161"><xref:System.Windows.Input.ICommand> references a type converter that enables certain preexisting <xref:System.Windows.Input.ICommand> implementations to specify values in the form of a string.</span></span> <span data-ttu-id="7295d-162">此类型转换行为设置此属性的属性值形式。</span><span class="sxs-lookup"><span data-stu-id="7295d-162">This type conversion behavior sets the attribute value form of this property.</span></span> <span data-ttu-id="7295d-163">你还可以将 <xref:System.Windows.Input.InputBinding.Command%2A> 、 <xref:System.Windows.Input.InputBinding.CommandParameter%2A> 和属性绑定 <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 到 <xref:System.Windows.Input.ICommand> 在对象上定义的。</span><span class="sxs-lookup"><span data-stu-id="7295d-163">You can also bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object.</span></span> <span data-ttu-id="7295d-164">这使你可以定义自定义命令并将其与用户输入相关联。</span><span class="sxs-lookup"><span data-stu-id="7295d-164">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="7295d-165">有关详细信息，请参阅中的第二个示例 <xref:System.Windows.Input.InputBinding> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-165">For more information, see the second example in <xref:System.Windows.Input.InputBinding>.</span></span>  
  
<a name="xamlAttributeUsage_Command"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="7295d-166">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="7295d-166">XAML Attribute Usage</span></span>  
 <span data-ttu-id="7295d-167"><`inputBindingDerivedClass``Command`= " <xref:System.Windows.Input.ICommand> "/></span><span class="sxs-lookup"><span data-stu-id="7295d-167"><`inputBindingDerivedClass` `Command`="<xref:System.Windows.Input.ICommand>"/></span></span>  
  
<a name="xamlPropertyElementUsage_Command"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="7295d-168">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="7295d-168">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Command>  
    <iCommandImplementation/>  
  </inputBindingDerivedClass.Command>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_Command"></a>   
## <a name="xaml-values"></a><span data-ttu-id="7295d-169">XAML 值</span><span class="sxs-lookup"><span data-stu-id="7295d-169">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="7295d-170"><xref:System.Windows.Input.InputBinding>支持对象元素语法的派生类，如 <xref:System.Windows.Input.KeyBinding> 或 <xref:System.Windows.Input.MouseBinding> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-170">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="7295d-171">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="7295d-171">See Remarks.</span></span>  
  
 `iCommandImplementation`  
 <span data-ttu-id="7295d-172"><xref:System.Windows.Input.ICommand>支持对象元素语法的对象实现 (具有一个公共的无参数构造函数) 。</span><span class="sxs-lookup"><span data-stu-id="7295d-172">An object implementation of <xref:System.Windows.Input.ICommand> that supports object element syntax (has a public parameterless constructor).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7295d-173">下面的示例演示如何使用将 <xref:System.Windows.Input.KeyBinding> 绑定 <xref:System.Windows.Input.KeyGesture> 到 <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType> 命令。</span><span class="sxs-lookup"><span data-stu-id="7295d-173">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to the <xref:System.Windows.Input.ApplicationCommands.Open%2A?displayProperty=nameWithType> command.</span></span> <span data-ttu-id="7295d-174">执行 key 势时，将调用 "打开" 命令。</span><span class="sxs-lookup"><span data-stu-id="7295d-174">When the key gesture is performed, the Open command is invoked.</span></span>  
  
 [!code-xaml[commandingoverviewsnippets#CommandingOverviewXAMLKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml#commandingoverviewxamlkeybinding)]  
  
 [!code-csharp[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandingOverviewSnippets/CSharp/Window1.xaml.cs#commandingoverviewkeybinding)]
 [!code-vb[commandingoverviewsnippets#CommandingOverviewKeyBinding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandingOverviewSnippets/visualbasic/window1.xaml.vb#commandingoverviewkeybinding)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="7295d-175"><see cref="P:System.Windows.Input.InputBinding.Command" /> 值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7295d-175">The <see cref="P:System.Windows.Input.InputBinding.Command" /> value is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
      </Docs>
    </Member>
    <Member MemberName="CommandParameter">
      <MemberSignature Language="C#" Value="public object CommandParameter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CommandParameter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandParameter" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandParameter As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CommandParameter { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandParameter : obj with get, set" Usage="System.Windows.Input.InputBinding.CommandParameter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7295d-176">获取或设置特定命令的命令特定数据。</span><span class="sxs-lookup"><span data-stu-id="7295d-176">Gets or sets the command-specific data for a particular command.</span></span></summary>
        <value><span data-ttu-id="7295d-177">命令特定的数据。</span><span class="sxs-lookup"><span data-stu-id="7295d-177">The command-specific data.</span></span> <span data-ttu-id="7295d-178">默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7295d-178">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7295d-179"><xref:System.Windows.Input.InputBinding.CommandParameter%2A>属性用于在执行时将特定信息传递给命令。</span><span class="sxs-lookup"><span data-stu-id="7295d-179">The <xref:System.Windows.Input.InputBinding.CommandParameter%2A> property is used to pass specific information to the command when it is executed.</span></span> <span data-ttu-id="7295d-180">数据的类型由命令定义。</span><span class="sxs-lookup"><span data-stu-id="7295d-180">The type of the data is defined by the command.</span></span> <span data-ttu-id="7295d-181">很多命令不需要命令参数;对于这些命令，将忽略传递的任何命令参数。</span><span class="sxs-lookup"><span data-stu-id="7295d-181">Many commands do not expect command parameters; for these commands, any command parameters passed will be ignored.</span></span>  
  
 <span data-ttu-id="7295d-182">如果输入绑定与相关联的命令是，则在 <xref:System.Windows.Input.RoutedCommand> 处理此 <xref:System.Windows.Input.InputBinding.CommandParameter%2A> 命令时，输入绑定的将 <xref:System.Windows.Input.RoutedCommand> 通过 <xref:System.Windows.Input.ExecutedRoutedEventArgs> 和事件数据传递给处理程序 <xref:System.Windows.Input.CanExecuteRoutedEventArgs> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-182">If the command that an input binding is associated with is a <xref:System.Windows.Input.RoutedCommand>, the <xref:System.Windows.Input.InputBinding.CommandParameter%2A> of the input binding is passed to the <xref:System.Windows.Input.RoutedCommand> handlers through the <xref:System.Windows.Input.ExecutedRoutedEventArgs> and the <xref:System.Windows.Input.CanExecuteRoutedEventArgs> event data when the command is processed.</span></span>  
  
 <span data-ttu-id="7295d-183">为每个命令定义了命令参数的数据类型和用途，可以为 `null` 。</span><span class="sxs-lookup"><span data-stu-id="7295d-183">The data type and purpose of the command parameter are defined differently for each command and can be `null`.</span></span> <span data-ttu-id="7295d-184">可以将 <xref:System.Windows.Input.InputBinding.Command%2A> 、 <xref:System.Windows.Input.InputBinding.CommandParameter%2A> 和 <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 属性绑定到 <xref:System.Windows.Input.ICommand> 在对象上定义的。</span><span class="sxs-lookup"><span data-stu-id="7295d-184">You can bind the <xref:System.Windows.Input.InputBinding.Command%2A>, <xref:System.Windows.Input.InputBinding.CommandParameter%2A>, and <xref:System.Windows.Input.InputBinding.CommandTarget%2A> properties to an <xref:System.Windows.Input.ICommand> that is defined on an object.</span></span> <span data-ttu-id="7295d-185">这使你可以定义自定义命令并将其与用户输入相关联。</span><span class="sxs-lookup"><span data-stu-id="7295d-185">This enables you to define a custom command and associate it with user input.</span></span> <span data-ttu-id="7295d-186">有关详细信息，请参阅中的第二个示例 <xref:System.Windows.Input.InputBinding> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-186">For more information, see the second example in <xref:System.Windows.Input.InputBinding>.</span></span>  
  
 <span data-ttu-id="7295d-187"><xref:System.Windows.Input.InputBinding>类不支持 XAML 用法，因为它不会公开公共的无参数构造函数 (它具有无参数的构造函数，但) 受保护。</span><span class="sxs-lookup"><span data-stu-id="7295d-187">The <xref:System.Windows.Input.InputBinding> class does not support XAML usage because it does not expose a public parameterless constructor (it has a parameterless constructor, but it is protected).</span></span> <span data-ttu-id="7295d-188">但是，派生类可以公开公共构造函数，因此可以设置从继承的属性和 <xref:System.Windows.Input.InputBinding> XAML 用法。</span><span class="sxs-lookup"><span data-stu-id="7295d-188">However, derived classes can expose a public constructor and therefore, can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with XAML usage.</span></span> <span data-ttu-id="7295d-189"><xref:System.Windows.Input.InputBinding>可以在 xaml 中实例化的两个现有派生类，并且可以在 xaml 中设置属性，即 <xref:System.Windows.Input.KeyBinding> 和 <xref:System.Windows.Input.MouseBinding> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-189">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_CommandParameter"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="7295d-190">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="7295d-190">XAML Attribute Usage</span></span>  
  
```  
<inputBindingDerivedClass CommandParameter="commandParameterString"/>  
```  
  
<a name="xamlPropertyElementUsage_CommandParameter"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="7295d-191">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="7295d-191">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.CommandParameter>  
    <commandParameterObject/>  
  </inputBindingDerivedClass.CommandParameter>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_CommandParameter"></a>   
## <a name="xaml-values"></a><span data-ttu-id="7295d-192">XAML 值</span><span class="sxs-lookup"><span data-stu-id="7295d-192">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="7295d-193"><xref:System.Windows.Input.InputBinding>支持对象元素语法的派生类，如 <xref:System.Windows.Input.KeyBinding> 或 <xref:System.Windows.Input.MouseBinding> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-193">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="7295d-194">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="7295d-194">See Remarks.</span></span>  
  
 `commandParameterString`  
 <span data-ttu-id="7295d-195">由特定命令处理的字符串。</span><span class="sxs-lookup"><span data-stu-id="7295d-195">A string that is processed by a particular command.</span></span> <span data-ttu-id="7295d-196">字符串是用于命令参数的通用类型，因为它们可以在 XAML 中轻松设置。</span><span class="sxs-lookup"><span data-stu-id="7295d-196">Strings are the common type used for command parameters because they can be easily set in XAML.</span></span> <span data-ttu-id="7295d-197">有关预期的字符串格式及其用途，请参阅与输入绑定关联的特定命令的文档。</span><span class="sxs-lookup"><span data-stu-id="7295d-197">For the expected string format and its purpose, see the documentation for the particular command that the input binding is associated with.</span></span> <span data-ttu-id="7295d-198">许多命令不需要参数。</span><span class="sxs-lookup"><span data-stu-id="7295d-198">Many commands do not expect parameters.</span></span>  
  
 `commandParameterObject`  
 <span data-ttu-id="7295d-199">由特定命令处理的对象。</span><span class="sxs-lookup"><span data-stu-id="7295d-199">An object that is processed by a particular command.</span></span> <span data-ttu-id="7295d-200">所有现有 WPF 命令都使用字符串。</span><span class="sxs-lookup"><span data-stu-id="7295d-200">All existing WPF commands use strings.</span></span> <span data-ttu-id="7295d-201">因此，此属性元素语法只与自定义命令方案相关。</span><span class="sxs-lookup"><span data-stu-id="7295d-201">Therefore, this property element syntax is only relevant for custom command scenarios.</span></span> <span data-ttu-id="7295d-202">为了支持此语法， `commandParameterObject` 对象还必须支持对象元素语法 (必须具有公共的无参数构造函数) 。</span><span class="sxs-lookup"><span data-stu-id="7295d-202">In order to support this syntax, the `commandParameterObject` object must also support object element syntax (must have a public parameterless constructor).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandParameterProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandParameterProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandParameterProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandParameterProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandParameterProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandParameterProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandParameterProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7295d-203">标识 <see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="7295d-203">Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandParameter" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7295d-204">标识 <see cref="P:System.Windows.Input.InputBinding.Command" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="7295d-204">Identifies the <see cref="P:System.Windows.Input.InputBinding.Command" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTarget">
      <MemberSignature Language="C#" Value="public System.Windows.IInputElement CommandTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.IInputElement CommandTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.CommandTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTarget As IInputElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::IInputElement ^ CommandTarget { System::Windows::IInputElement ^ get(); void set(System::Windows::IInputElement ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommandTarget : System.Windows.IInputElement with get, set" Usage="System.Windows.Input.InputBinding.CommandTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.IInputElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7295d-205">获取或设置命令的目标元素。</span><span class="sxs-lookup"><span data-stu-id="7295d-205">Gets or sets the target element of the command.</span></span></summary>
        <value><span data-ttu-id="7295d-206">命令的目标。</span><span class="sxs-lookup"><span data-stu-id="7295d-206">The target of the command.</span></span> <span data-ttu-id="7295d-207">默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7295d-207">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7295d-208">在 Windows Presentation Foundation 命令系统中， <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 对象上的属性 <xref:System.Windows.Input.ICommandSource> 仅在为时才适用 <xref:System.Windows.Input.ICommand> <xref:System.Windows.Input.RoutedCommand> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-208">In the Windows Presentation Foundation commanding system, the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property on an <xref:System.Windows.Input.ICommandSource> object is applicable only when the <xref:System.Windows.Input.ICommand> is a <xref:System.Windows.Input.RoutedCommand>.</span></span> <span data-ttu-id="7295d-209">如果在 <xref:System.Windows.Input.ICommandSource> 上设置 <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 并且相应的命令不是 <xref:System.Windows.Input.RoutedCommand>，则忽略命令目标。</span><span class="sxs-lookup"><span data-stu-id="7295d-209">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> is set on an <xref:System.Windows.Input.ICommandSource> and the corresponding command is not a <xref:System.Windows.Input.RoutedCommand>, the command target is ignored.</span></span>  
  
 <span data-ttu-id="7295d-210">当与一起使用时 <xref:System.Windows.Input.RoutedCommand> ，命令目标是 <xref:System.Windows.Input.CommandManager.Executed> 引发和事件的对象 <xref:System.Windows.Input.CommandManager.CanExecute> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-210">When used with a <xref:System.Windows.Input.RoutedCommand>, the command target is the object on which the <xref:System.Windows.Input.CommandManager.Executed> and <xref:System.Windows.Input.CommandManager.CanExecute> events are raised.</span></span> <span data-ttu-id="7295d-211">如果 <xref:System.Windows.Input.InputBinding.CommandTarget%2A> 未设置该属性，则使用键盘焦点的元素作为目标。</span><span class="sxs-lookup"><span data-stu-id="7295d-211">If the <xref:System.Windows.Input.InputBinding.CommandTarget%2A> property is not set, the element with keyboard focus is used as the target.</span></span>  
  
 <span data-ttu-id="7295d-212"><xref:System.Windows.Input.InputBinding>类本身不支持 XAML 用法，因为它不公开公共的无参数构造函数 (有一个无参数的构造函数，但它) 受保护。</span><span class="sxs-lookup"><span data-stu-id="7295d-212">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage, because it does not expose a public parameterless constructor (there is a parameterless constructor, but it is protected).</span></span> <span data-ttu-id="7295d-213">但是，派生类可以公开公共构造函数，因此可以设置从继承的属性和 <xref:System.Windows.Input.InputBinding> XAML 用法。</span><span class="sxs-lookup"><span data-stu-id="7295d-213">However, derived classes can expose a public constructor and therefore can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="7295d-214"><xref:System.Windows.Input.InputBinding>可以在 xaml 中实例化的两个现有派生类，并且可以在 xaml 中设置属性，即 <xref:System.Windows.Input.KeyBinding> 和 <xref:System.Windows.Input.MouseBinding> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-214">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_CommandTarget"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="7295d-215">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="7295d-215">XAML Attribute Usage</span></span>  
  
```  
<inputBindingDerivedClass CommandTarget="bindingToTarget"/>  
```  
  
<a name="xamlValues_CommandTarget"></a>   
## <a name="xaml-values"></a><span data-ttu-id="7295d-216">XAML 值</span><span class="sxs-lookup"><span data-stu-id="7295d-216">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="7295d-217"><xref:System.Windows.Input.InputBinding>支持对象元素语法的派生类，如 <xref:System.Windows.Input.KeyBinding> 或 <xref:System.Windows.Input.MouseBinding> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-217">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="7295d-218">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="7295d-218">See Remarks.</span></span>  
  
 `bindingToTarget`  
 <span data-ttu-id="7295d-219">一个字符串，该字符串使用可以返回对现有命名元素的对象引用的绑定语法类型。</span><span class="sxs-lookup"><span data-stu-id="7295d-219">A string that uses a type of binding syntax that can return an object reference to an existing named element.</span></span> <span data-ttu-id="7295d-220">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="7295d-220">See Remarks.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTargetProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CommandTargetProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CommandTargetProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CommandTargetProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CommandTargetProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CommandTargetProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.InputBinding.CommandTargetProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7295d-221">标识 <see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> 依赖项属性。</span><span class="sxs-lookup"><span data-stu-id="7295d-221">Identifies the <see cref="P:System.Windows.Input.InputBinding.CommandTarget" /> dependency property.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="inputBinding.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7295d-222">创建 <see cref="T:System.Windows.Input.InputBinding" /> 的实例。</span><span class="sxs-lookup"><span data-stu-id="7295d-222">Creates an instance of an <see cref="T:System.Windows.Input.InputBinding" />.</span></span></summary>
        <returns><span data-ttu-id="7295d-223">新对象。</span><span class="sxs-lookup"><span data-stu-id="7295d-223">The new object.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gesture">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Input.InputGesture Gesture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGesture Gesture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.InputBinding.Gesture" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Gesture As InputGesture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Input::InputGesture ^ Gesture { System::Windows::Input::InputGesture ^ get(); void set(System::Windows::Input::InputGesture ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Gesture : System.Windows.Input.InputGesture with get, set" Usage="System.Windows.Input.InputBinding.Gesture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[set: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGesture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7295d-224">获取或设置与此输入绑定关联的 <see cref="T:System.Windows.Input.InputGesture" />。</span><span class="sxs-lookup"><span data-stu-id="7295d-224">Gets or sets the <see cref="T:System.Windows.Input.InputGesture" /> associated with this input binding.</span></span></summary>
        <value><span data-ttu-id="7295d-225">关联的笔势。</span><span class="sxs-lookup"><span data-stu-id="7295d-225">The associated gesture.</span></span> <span data-ttu-id="7295d-226">默认值为 <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="7295d-226">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7295d-227">输入手势是调用命令的操作。</span><span class="sxs-lookup"><span data-stu-id="7295d-227">The input gesture is the action that invokes the command.</span></span> <span data-ttu-id="7295d-228">WPF 中的输入笔势的示例有 <xref:System.Windows.Input.KeyGesture> 和 <xref:System.Windows.Input.MouseGesture> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-228">Examples of input gestures in WPF are <xref:System.Windows.Input.KeyGesture> and <xref:System.Windows.Input.MouseGesture>.</span></span> <span data-ttu-id="7295d-229"><xref:System.Windows.Input.KeyGesture>是 <xref:System.Windows.Input.Key> 和一组的组合 <xref:System.Windows.Input.ModifierKeys> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-229">A <xref:System.Windows.Input.KeyGesture> is a combination of a <xref:System.Windows.Input.Key> and a set of <xref:System.Windows.Input.ModifierKeys>.</span></span> <span data-ttu-id="7295d-230"><xref:System.Windows.Input.MouseGesture>是 <xref:System.Windows.Input.MouseAction> 和一组的组合 <xref:System.Windows.Input.ModifierKeys> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-230">A <xref:System.Windows.Input.MouseGesture> is a combination of a <xref:System.Windows.Input.MouseAction> and a set of <xref:System.Windows.Input.ModifierKeys>.</span></span>  
  
 <span data-ttu-id="7295d-231"><xref:System.Windows.Input.InputBinding>类本身不支持 XAML 用法，因为它不公开公共的无参数构造函数 (有一个无参数的构造函数，但它) 受保护。</span><span class="sxs-lookup"><span data-stu-id="7295d-231">The <xref:System.Windows.Input.InputBinding> class itself does not support XAML usage, because it does not expose a public parameterless constructor (there is a parameterless constructor, but it is protected).</span></span> <span data-ttu-id="7295d-232">但是，派生类可以公开公共构造函数，因此可以设置从继承的属性和 <xref:System.Windows.Input.InputBinding> XAML 用法。</span><span class="sxs-lookup"><span data-stu-id="7295d-232">However, derived classes can expose a public constructor and thus can set properties that are inherited from <xref:System.Windows.Input.InputBinding> with a XAML usage.</span></span> <span data-ttu-id="7295d-233"><xref:System.Windows.Input.InputBinding>可以在 xaml 中实例化的两个现有派生类，并且可以在 xaml 中设置属性，即 <xref:System.Windows.Input.KeyBinding> 和 <xref:System.Windows.Input.MouseBinding> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-233">Two existing <xref:System.Windows.Input.InputBinding> derived classes that can be instantiated in XAML and can set properties in XAML are <xref:System.Windows.Input.KeyBinding> and <xref:System.Windows.Input.MouseBinding>.</span></span>  
  
<a name="xamlAttributeUsage_gesture"></a>   
## <a name="xaml-attribute-usage"></a><span data-ttu-id="7295d-234">XAML 属性用法</span><span class="sxs-lookup"><span data-stu-id="7295d-234">XAML Attribute Usage</span></span>  
 <span data-ttu-id="7295d-235"><<xref:System.Windows.Input.KeyBinding>`Gesture`= " <xref:System.Windows.Input.KeyGesture> "/></span><span class="sxs-lookup"><span data-stu-id="7295d-235"><<xref:System.Windows.Input.KeyBinding> `Gesture`="<xref:System.Windows.Input.KeyGesture>"/></span></span>  
  
<span data-ttu-id="7295d-236">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7295d-236">-or-</span></span>
  
 <span data-ttu-id="7295d-237"><<xref:System.Windows.Input.MouseBinding>`Gesture`= " <xref:System.Windows.Input.MouseGesture> "/></span><span class="sxs-lookup"><span data-stu-id="7295d-237"><<xref:System.Windows.Input.MouseBinding> `Gesture`="<xref:System.Windows.Input.MouseGesture>"/></span></span>  
  
<span data-ttu-id="7295d-238">- 或 -</span><span class="sxs-lookup"><span data-stu-id="7295d-238">-or-</span></span>
  
 <span data-ttu-id="7295d-239"><`inputBindingDerivedClass``Gesture`= " <xref:System.Windows.Input.InputGesture> "/></span><span class="sxs-lookup"><span data-stu-id="7295d-239"><`inputBindingDerivedClass` `Gesture`="<xref:System.Windows.Input.InputGesture>"/></span></span>  
  
<a name="xamlPropertyElementUsage_gesture"></a>   
## <a name="xaml-property-element-usage"></a><span data-ttu-id="7295d-240">XAML 属性元素用法</span><span class="sxs-lookup"><span data-stu-id="7295d-240">XAML Property Element Usage</span></span>  
  
```  
<inputBindingDerivedClass>  
  <inputBindingDerivedClass.Gesture>  
    <inputGestureImplementation/>  
  </inputBindingDerivedClass.Gesture>  
</inputBindingDerivedClass>  
```  
  
<a name="xamlValues_gesture"></a>   
## <a name="xaml-values"></a><span data-ttu-id="7295d-241">XAML 值</span><span class="sxs-lookup"><span data-stu-id="7295d-241">XAML Values</span></span>  
 `inputBindingDerivedClass`  
 <span data-ttu-id="7295d-242"><xref:System.Windows.Input.InputBinding>支持对象元素语法的派生类，如 <xref:System.Windows.Input.KeyBinding> 或 <xref:System.Windows.Input.MouseBinding> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-242">A derived class of <xref:System.Windows.Input.InputBinding> that supports object element syntax, such as <xref:System.Windows.Input.KeyBinding> or <xref:System.Windows.Input.MouseBinding>.</span></span> <span data-ttu-id="7295d-243">请参阅“备注”。</span><span class="sxs-lookup"><span data-stu-id="7295d-243">See Remarks.</span></span>  
  
 `inputGestureImplementation`  
 <span data-ttu-id="7295d-244">支持对象元素语法的自定义派生类 <xref:System.Windows.Input.InputGesture> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-244">A custom derived class of <xref:System.Windows.Input.InputGesture> that supports object element syntax.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7295d-245">下面的示例演示如何使用将 <xref:System.Windows.Input.KeyBinding> 绑定 <xref:System.Windows.Input.KeyGesture> 到 <xref:System.Windows.Input.RoutedCommand> 。</span><span class="sxs-lookup"><span data-stu-id="7295d-245">The following example shows how to use a <xref:System.Windows.Input.KeyBinding> to bind a <xref:System.Windows.Input.KeyGesture> to a <xref:System.Windows.Input.RoutedCommand>.</span></span> <span data-ttu-id="7295d-246"><xref:System.Windows.Input.KeyGesture>按下 ALT + L 时，将 <xref:System.Windows.Input.ApplicationCommands.Close%2A> 调用命令。</span><span class="sxs-lookup"><span data-stu-id="7295d-246">When the <xref:System.Windows.Input.KeyGesture> ALT+L is pressed, the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command is invoked.</span></span>  
  
 [!code-xaml[commandlibrarysnippets#KeyBindingWithKeyAndModifiersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml#keybindingwithkeyandmodifiersxaml)]  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
      </Docs>
    </Member>
    <Member MemberName="GetAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.GetAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.GetAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="7295d-247">要克隆的对象。</span><span class="sxs-lookup"><span data-stu-id="7295d-247">The object to clone.</span></span></param>
        <summary><span data-ttu-id="7295d-248">使用基（未经过动画处理的）属性值使该实例成为指定的 <see cref="T:System.Windows.Freezable" /> 的冻结复本。</span><span class="sxs-lookup"><span data-stu-id="7295d-248">Makes the instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" /> by using base (non-animated) property values.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCurrentValueAsFrozenCore">
      <MemberSignature Language="C#" Value="protected override void GetCurrentValueAsFrozenCore (System.Windows.Freezable sourceFreezable);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void GetCurrentValueAsFrozenCore(class System.Windows.Freezable sourceFreezable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.InputBinding.GetCurrentValueAsFrozenCore(System.Windows.Freezable)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub GetCurrentValueAsFrozenCore (sourceFreezable As Freezable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void GetCurrentValueAsFrozenCore(System::Windows::Freezable ^ sourceFreezable);" />
      <MemberSignature Language="F#" Value="override this.GetCurrentValueAsFrozenCore : System.Windows.Freezable -&gt; unit" Usage="inputBinding.GetCurrentValueAsFrozenCore sourceFreezable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceFreezable" Type="System.Windows.Freezable" Index="0" FrameworkAlternate="net-5.0;netcore-3.0;netcore-3.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="sourceFreezable"><span data-ttu-id="7295d-249">要克隆的对象。</span><span class="sxs-lookup"><span data-stu-id="7295d-249">The object to clone.</span></span></param>
        <summary><span data-ttu-id="7295d-250">使当前实例成为指定 <see cref="T:System.Windows.Freezable" /> 的冻结克隆。</span><span class="sxs-lookup"><span data-stu-id="7295d-250">Makes the current instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />.</span></span> <span data-ttu-id="7295d-251">如果对象具有动画依赖属性，则复制其当前的动画值。</span><span class="sxs-lookup"><span data-stu-id="7295d-251">If the object has animated dependency properties, their current animated values are copied.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
