<Type Name="KeyBinding" FullName="System.Windows.Input.KeyBinding">
  <Metadata><Meta Name="ms.openlocfilehash" Value="41efbdb5902c750ae6bb7f6e004bdabdb379b041" /><Meta Name="ms.sourcegitcommit" Value="b53d35b4a410c949742abd4c6a989d1af5357bca" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="86700425" /></Metadata><TypeSignature Language="C#" Value="public class KeyBinding : System.Windows.Input.InputBinding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyBinding extends System.Windows.Input.InputBinding" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.KeyBinding" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyBinding&#xA;Inherits InputBinding" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyBinding : System::Windows::Input::InputBinding" />
  <TypeSignature Language="F#" Value="type KeyBinding = class&#xA;    inherit InputBinding" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.InputBinding</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>将 <see cref="T:System.Windows.Input.KeyGesture" /> 绑定到 <see cref="T:System.Windows.Input.RoutedCommand" />（或另一个 <see cref="T:System.Windows.Input.ICommand" /> 实现）。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 将 <xref:System.Windows.Input.KeyBinding> 与关联 <xref:System.Windows.Input.KeyGesture> <xref:System.Windows.Input.ICommand> ，如 <xref:System.Windows.Input.RoutedCommand> 。 <xref:System.Windows.Input.RoutedCommand> 命令系统接口的主要实现 <xref:System.Windows.Input.ICommand> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 。  通常情况下，当 <xref:System.Windows.Input.KeyGesture> 执行时，将调用命令，但命令的行为会进一步受到命令特定的因素（如值）的影响 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 。  有关命令的详细信息，请参阅 [命令概述](/dotnet/framework/wpf/advanced/commanding-overview)。  
  
 除了函数键和数字键盘键以外，一个有效的 <xref:System.Windows.Input.KeyGesture> 必须正好包含一个 <xref:System.Windows.Input.Key> 和一个或多个 <xref:System.Windows.Input.ModifierKeys> 。  功能键和数字键盘键不需要修改键即可成为有效的 <xref:System.Windows.Input.KeyGesture> 。 可以通过或代码指定无效的 <xref:System.Windows.Input.KeyGesture> 和 <xref:System.Windows.Input.KeyBinding> 带有无效的关联手势的 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 。 例如，没有任何验证可阻止创建和绑定 <xref:System.Windows.Input.KeyGesture> 只包含 nonfunction 键的，或者只包含修饰符但没有键。 这样的 <xref:System.Windows.Input.KeyBinding> 将永远不会尝试调用其关联的命令。  
  
 定义中的时， <xref:System.Windows.Input.KeyBinding> [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 有两种方法可指定 <xref:System.Windows.Input.KeyGesture> 。 在中建立的第一种方法 <xref:System.Windows.Input.KeyBinding> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 是定义 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 元素的属性 <xref:System.Windows.Input.KeyBinding> ，这将启用语法以将键和修饰符指定为单个字符串，例如 "CTRL + P"。 第二种方法是定义 <xref:System.Windows.Input.KeyBinding.Key%2A> 属性和元素的 <xref:System.Windows.Input.KeyBinding.Modifiers%2A> 属性 <xref:System.Windows.Input.KeyBinding> 。 设置的两种方法 <xref:System.Windows.Input.KeyGesture> 是等效的，并且修改相同的基础对象，但如果两者都使用，则会发生冲突。  如果同时 <xref:System.Windows.Input.KeyBinding.Key%2A> 设置了、 <xref:System.Windows.Input.KeyBinding.Modifiers%2A> 和属性，则会 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 将最后定义的特性用于 <xref:System.Windows.Input.KeyGesture> 。 您可能会遇到这样的情况：其中，" <xref:System.Windows.Input.KeyBinding.Key%2A> 最后一个" 设置将只覆盖前面的手势的关键组件，但使该笔势的修饰符保持不变。 通常，建议您仅使用 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 中的属性 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ; 这将避免多义性，提供最简洁的语法，并提供最简单的序列化表示形式。  
  
 <xref:System.Windows.Input.KeyBinding>可以通过在类上注册来对特定对象或类级别定义 <xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A> <xref:System.Windows.Input.CommandManager> 。 定义的最典型方法是在 <xref:System.Windows.Input.KeyBinding> 控件模板内， <xref:System.Windows.UIElement.InputBindings%2A> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 通过声明一个或多个 or 元素，在中设置属性 <xref:System.Windows.Input.MouseBinding> <xref:System.Windows.Input.KeyBinding> 。  
  
   
  
## Examples  
 下面的示例创建一个 <xref:System.Windows.Input.KeyBinding> 并将其添加到 <xref:System.Windows.Input.InputBindingCollection> 根窗口的。  
  
 [!code-xaml[commandWithHandler#CommandHandlerKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlerkeybinding)]  
  
 [!code-csharp[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandHandlerProcedural/CSharp/Window1.xaml.cs#commandhandlerkeybindingcodebehind)]
 [!code-vb[CommandHandlerProcedural#CommandHandlerKeyBindingCodeBehind](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandHandlerProcedural/visualbasic/window1.xaml.vb#commandhandlerkeybindingcodebehind)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyBinding" />
    <altmember cref="T:System.Windows.Input.MouseBinding" />
    <altmember cref="T:System.Windows.Input.RoutedCommand" />
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.KeyGesture" />
    <altmember cref="T:System.Windows.Input.MouseGesture" />
    <altmember cref="T:System.Windows.Input.InputGesture" />
    <altmember cref="T:System.Windows.Input.InputBinding" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Input.KeyBinding" /> 类的新实例。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyBinding.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyBinding();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>初始化 <see cref="T:System.Windows.Input.KeyBinding" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.KeyGesture gesture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, class System.Windows.Input.KeyGesture gesture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.KeyGesture)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, gesture As KeyGesture)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::KeyGesture ^ gesture);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyBinding : System.Windows.Input.ICommand * System.Windows.Input.KeyGesture -&gt; System.Windows.Input.KeyBinding" Usage="new System.Windows.Input.KeyBinding (command, gesture)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="gesture" Type="System.Windows.Input.KeyGesture" />
      </Parameters>
      <Docs>
        <param name="command">要与 <paramref name="gesture" /> 关联的命令。</param>
        <param name="gesture">要与 <paramref name="command" /> 关联的键组合。</param>
        <summary>使用指定的 <see cref="T:System.Windows.Input.KeyBinding" /> 和 <see cref="T:System.Windows.Input.ICommand" /> 初始化 <see cref="T:System.Windows.Input.KeyGesture" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="command" /> 或 <paramref name="gesture" /> 为 <see langword="null" />。</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyBinding (System.Windows.Input.ICommand command, System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.ICommand command, valuetype System.Windows.Input.Key key, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyBinding.#ctor(System.Windows.Input.ICommand,System.Windows.Input.Key,System.Windows.Input.ModifierKeys)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (command As ICommand, key As Key, modifiers As ModifierKeys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyBinding(System::Windows::Input::ICommand ^ command, System::Windows::Input::Key key, System::Windows::Input::ModifierKeys modifiers);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyBinding : System.Windows.Input.ICommand * System.Windows.Input.Key * System.Windows.Input.ModifierKeys -&gt; System.Windows.Input.KeyBinding" Usage="new System.Windows.Input.KeyBinding (command, key, modifiers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="command" Type="System.Windows.Input.ICommand" />
        <Parameter Name="key" Type="System.Windows.Input.Key" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="command">要调用的命令。</param>
        <param name="key">要与 <paramref name="command" /> 关联的键。</param>
        <param name="modifiers">要与 <paramref name="command" /> 关联的修饰符。</param>
        <summary>使用指定的 <see cref="T:System.Windows.Input.KeyBinding" /> 以及将要转换为 <see cref="T:System.Windows.Input.ICommand" /> 的指定的 <see cref="T:System.Windows.Input.Key" /> 和 <see cref="T:System.Windows.Input.ModifierKeys" /> 初始化 <see cref="T:System.Windows.Input.KeyGesture" /> 类的新实例。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyBinding.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="keyBinding.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>创建 <see cref="T:System.Windows.Input.KeyBinding" /> 的实例。</summary>
        <returns>新对象。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gesture">
      <MemberSignature Language="C#" Value="public override System.Windows.Input.InputGesture Gesture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.InputGesture Gesture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyBinding.Gesture" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Gesture As InputGesture" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Input::InputGesture ^ Gesture { System::Windows::Input::InputGesture ^ get(); void set(System::Windows::Input::InputGesture ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Gesture : System.Windows.Input.InputGesture with get, set" Usage="System.Windows.Input.KeyBinding.Gesture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.InputGesture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与此 <see cref="T:System.Windows.Input.KeyBinding" /> 关联的笔势。</summary>
        <value>键序列。 默认值为 <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 除了函数键和数字键盘键， <xref:System.Windows.Input.KeyGesture> 必须包含一个 <xref:System.Windows.Input.Key> 和一个或多个 <xref:System.Windows.Input.ModifierKeys> 。  
  
   
  
## Examples  
 下面的示例演示如何 <xref:System.Windows.Input.KeyGesture> 使用 (标记将绑定到，而 <xref:System.Windows.Input.RoutedCommand> <xref:System.Windows.Input.KeyBinding> 代码示例指定不同的键，但在其他方面等效) 。  
  
 [!code-xaml[commandWithHandler#CommandHandlerKeyBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml#commandhandlerkeybinding)]  
  
 [!code-csharp[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/csharp/VS_Snippets_Wpf/CommandLibrarySnippets/CSharp/Window1.xaml.cs#keybindingwithkeyandmodifiers)]
 [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CommandLibrarySnippets/visualbasic/window1.xaml.vb#keybindingwithkeyandmodifiers)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="gesture" /> 将要设置为的值不是 <see cref="T:System.Windows.Input.KeyGesture" />。</exception>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key Key { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key Key" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyBinding.Key" />
      <MemberSignature Language="VB.NET" Value="Public Property Key As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key Key { System::Windows::Input::Key get(); void set(System::Windows::Input::Key value); };" />
      <MemberSignature Language="F#" Value="member this.Key : System.Windows.Input.Key with get, set" Usage="System.Windows.Input.KeyBinding.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与此 <see cref="T:System.Windows.Input.Key" /> 关联的 <see cref="T:System.Windows.Input.KeyGesture" /> 的 <see cref="T:System.Windows.Input.KeyBinding" />。</summary>
        <value><see cref="T:System.Windows.Input.KeyGesture" /> 的键部分。 默认值为 <see cref="F:System.Windows.Input.Key.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 除了函数键和数字键盘键， <xref:System.Windows.Input.KeyGesture> 必须包含一个 <xref:System.Windows.Input.Key> 和一个或多个 <xref:System.Windows.Input.ModifierKeys> 。  
  
 定义中的时， <xref:System.Windows.Input.KeyBinding> [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 有两种方法可指定 <xref:System.Windows.Input.KeyGesture> 。 在中建立的第一种方法 <xref:System.Windows.Input.KeyBinding> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 是定义 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 元素的属性 <xref:System.Windows.Input.KeyBinding> ，这将启用语法以将键和修饰符指定为单个字符串，例如 "CTRL + P"。 第二种方法是定义 <xref:System.Windows.Input.KeyBinding.Key%2A> 属性和元素的 <xref:System.Windows.Input.KeyBinding.Modifiers%2A> 属性 <xref:System.Windows.Input.KeyBinding> 。 设置的两种方法 <xref:System.Windows.Input.KeyGesture> 是等效的，并且修改相同的基础对象，但如果两者都使用，则会发生冲突。  如果同时 <xref:System.Windows.Input.KeyBinding.Key%2A> 设置了、 <xref:System.Windows.Input.KeyBinding.Modifiers%2A> 和属性，则会 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 将最后定义的特性用于 <xref:System.Windows.Input.KeyGesture> 。 您可能会遇到这样的情况：其中，" <xref:System.Windows.Input.KeyBinding.Key%2A> 最后一个" 设置将只覆盖前面的手势的关键组件，但使该笔势的修饰符保持不变。 通常，建议您仅使用 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 中的属性 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ; 这将避免多义性，提供最简洁的语法，并提供最简单的序列化表示形式。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName="KeyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty KeyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty KeyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.KeyBinding.KeyProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly KeyProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ KeyProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable KeyProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.KeyBinding.KeyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Input.KeyBinding.Key" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Input.ModifierKeys Modifiers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.ModifierKeys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyBinding.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public Property Modifiers As ModifierKeys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::ModifierKeys Modifiers { System::Windows::Input::ModifierKeys get(); void set(System::Windows::Input::ModifierKeys value); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Input.ModifierKeys with get, set" Usage="System.Windows.Input.KeyBinding.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.ModifierKeys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>获取或设置与此 <see cref="T:System.Windows.Input.ModifierKeys" /> 关联的 <see cref="T:System.Windows.Input.KeyGesture" /> 的 <see cref="T:System.Windows.Input.KeyBinding" />。</summary>
        <value><see cref="T:System.Windows.Input.KeyGesture" /> 的修改键。  默认值为 <see cref="F:System.Windows.Input.ModifierKeys.None" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 除了函数键和数字键盘键， <xref:System.Windows.Input.KeyGesture> 必须包含一个 <xref:System.Windows.Input.Key> 和一个或多个 <xref:System.Windows.Input.ModifierKeys> 。  
  
 定义中的时， <xref:System.Windows.Input.KeyBinding> [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] 有两种方法可指定 <xref:System.Windows.Input.KeyGesture> 。 在中建立的第一种方法 <xref:System.Windows.Input.KeyBinding> [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] 是定义 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 元素的属性 <xref:System.Windows.Input.KeyBinding> ，这将启用语法以将键和修饰符指定为单个字符串，例如 "CTRL + P"。 第二种方法是定义 <xref:System.Windows.Input.KeyBinding.Key%2A> 属性和元素的 <xref:System.Windows.Input.KeyBinding.Modifiers%2A> 属性 <xref:System.Windows.Input.KeyBinding> 。 设置的两种方法 <xref:System.Windows.Input.KeyGesture> 是等效的，并且修改相同的基础对象，但如果两者都使用，则会发生冲突。  如果同时 <xref:System.Windows.Input.KeyBinding.Key%2A> 设置了、 <xref:System.Windows.Input.KeyBinding.Modifiers%2A> 和属性，则会 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 将最后定义的特性用于 <xref:System.Windows.Input.KeyGesture> 。 您可能会遇到这样的情况：其中，" <xref:System.Windows.Input.KeyBinding.Key%2A> 最后一个" 设置将只覆盖前面的手势的关键组件，但使该笔势的修饰符保持不变。 通常，建议您仅使用 <xref:System.Windows.Input.KeyBinding.Gesture%2A> 中的属性 [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] ; 这将避免多义性，提供最简洁的语法，并提供最简单的序列化表示形式。  
  
<a name="xamlAttributeUsage_Modifiers"></a>   
## <a name="xaml-attribute-usage"></a>XAML 属性用法  
  
```  
<object Modifiers="oneOrMoreModifierKeys"/>  
  
```  
  
<a name="xamlValues_Modifiers"></a>   
## <a name="xaml-values"></a>XAML 值  
 *oneOrMoreModifierKeys*  
 由枚举定义的一个或多个修改键 <xref:System.Windows.Input.ModifierKeys> ，用 "+" 字符分隔。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyBinding" />
        <altmember cref="T:System.Windows.Input.MouseBinding" />
        <altmember cref="T:System.Windows.Input.RoutedCommand" />
        <altmember cref="T:System.Windows.Input.CommandBinding" />
        <altmember cref="T:System.Windows.Input.KeyGesture" />
        <altmember cref="T:System.Windows.Input.MouseGesture" />
        <altmember cref="T:System.Windows.Input.InputGesture" />
        <altmember cref="T:System.Windows.Input.InputBinding" />
      </Docs>
    </Member>
    <Member MemberName="ModifiersProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ModifiersProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ModifiersProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Input.KeyBinding.ModifiersProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ModifiersProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ModifiersProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ModifiersProperty : System.Windows.DependencyProperty" Usage="System.Windows.Input.KeyBinding.ModifiersProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>标识 <see cref="P:System.Windows.Input.KeyBinding.Modifiers" /> 依赖项属性。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
