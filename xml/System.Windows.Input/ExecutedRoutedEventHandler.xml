<Type Name="ExecutedRoutedEventHandler" FullName="System.Windows.Input.ExecutedRoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9357176d2fdcfba537bb84fb4230c8a1f5306cf2" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89765360" /></Metadata><TypeSignature Language="C#" Value="public delegate void ExecutedRoutedEventHandler(object sender, ExecutedRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ExecutedRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ExecutedRoutedEventHandler(sender As Object, e As ExecutedRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ExecutedRoutedEventHandler(System::Object ^ sender, ExecutedRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type ExecutedRoutedEventHandler = delegate of obj * ExecutedRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.ExecutedRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender">事件处理程序所附加到的对象。</param>
    <param name="e">事件数据。</param>
    <summary>表示将处理 <see cref="E:System.Windows.Input.CommandBinding.Executed" /> 和 <see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" /> 路由事件以及相关附加事件的方法。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 此委托包含的实现逻辑 <xref:System.Windows.Input.RoutedCommand> 。  通过从命令分离实现逻辑，可从不同的源和类型调用命令，并实现命令逻辑的集中。  
  
 此委托还用于 <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> 和，它们 <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType> 是 <xref:System.Windows.Input.CommandManager> 类上实现许多命令基础结构的附加事件。 但大多数实际处理程序将处理 <xref:System.Windows.Input.CommandBinding.Executed> 来自特定的事件 <xref:System.Windows.Input.CommandBinding> ，而不是在 <xref:System.Windows.Input.CommandManager> 级别工作。  
  
 在中 <xref:System.Windows.Input.ExecutedRoutedEventArgs> ，当你为已执行的命令生成的路由事件编写事件处理程序时，通常会对以下属性感兴趣：  
  
-   <xref:System.Windows.RoutedEventArgs.Source%2A> 报告执行命令的目标。 执行此命令后，你还可以将 <xref:System.Windows.RoutedEventArgs.Source%2A> 路由事件术语中更常见的视为引发路由事件的对象。  
  
-   <xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> 报告执行的命令。 如果使用命令绑定并且编写可能处理多个命令的处理程序，则此属性很有用。  
  
-   <xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> 报告执行命令传递的任何特定于命令的参数。 并非所有命令都使用或需要命令特定的参数。  
  
-   <xref:System.Windows.RoutedEventArgs.Handled%2A> 报告由执行命令产生的路由事件是否已由路由中的其他元素处理。 对于路由事件处理程序，建议在处理要设置为的事件时，让处理程序执行有意义的 <xref:System.Windows.RoutedEventArgs.Handled%2A> 工作 `true` 。 这会阻止事件的典型处理程序再次沿着路由再次处理事件。 有关处理路由事件的详细信息，请参阅将 [路由事件标记为 "已处理" 和 "类处理](/dotnet/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling)"。  
  
 此委托还表示和的处理程序 <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> <xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=nameWithType> ，它们是 <xref:System.Windows.Input.CommandManager> 类上实现许多命令基础结构的附加事件。 但大多数实际处理程序将处理 <xref:System.Windows.Input.CommandBinding.Executed> 来自特定的事件 <xref:System.Windows.Input.CommandBinding> ，而不是在 <xref:System.Windows.Input.CommandManager> 级别工作。  
  
 有关命令的详细信息，请参阅[命令概述](/dotnet/framework/wpf/advanced/commanding-overview)。  
  
   
  
## Examples  
 此示例创建一个 <xref:System.Windows.Input.ExecutedRoutedEventHandler> ，它在执行命令时在目标上设置一个视觉对象属性。 该示例还包括 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> 用于同一命令的。  
  
 [!code-csharp[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/Custom_RoutedCommand/CSharp/Window1.xaml.cs#custom_routedcommandhandlers)]
 [!code-vb[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Custom_RoutedCommand/visualbasic/window1.xaml.vb#custom_routedcommandhandlers)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
  </Docs>
</Type>
