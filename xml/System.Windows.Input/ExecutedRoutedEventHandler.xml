<Type Name="ExecutedRoutedEventHandler" FullName="System.Windows.Input.ExecutedRoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9357176d2fdcfba537bb84fb4230c8a1f5306cf2" /><Meta Name="ms.sourcegitcommit" Value="c982ad9e10a242d90f1e631b5981570f9e5d9f34" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="09/10/2020" /><Meta Name="ms.locfileid" Value="89765360" /></Metadata><TypeSignature Language="C#" Value="public delegate void ExecutedRoutedEventHandler(object sender, ExecutedRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ExecutedRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub ExecutedRoutedEventHandler(sender As Object, e As ExecutedRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void ExecutedRoutedEventHandler(System::Object ^ sender, ExecutedRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type ExecutedRoutedEventHandler = delegate of obj * ExecutedRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.ExecutedRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender"><span data-ttu-id="e0f4f-101">事件处理程序所附加到的对象。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-101">The object where the event handler is attached.</span></span></param>
    <param name="e"><span data-ttu-id="e0f4f-102">事件数据。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-102">The event data.</span></span></param>
    <summary><span data-ttu-id="e0f4f-103">表示将处理 <see cref="E:System.Windows.Input.CommandBinding.Executed" /> 和 <see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" /> 路由事件以及相关附加事件的方法。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-103">Represents the method that will handle the <see cref="E:System.Windows.Input.CommandBinding.Executed" /> and <see cref="E:System.Windows.Input.CommandBinding.PreviewExecuted" /> routed events, as well as related attached events.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e0f4f-104">此委托包含的实现逻辑 <xref:System.Windows.Input.RoutedCommand> 。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-104">This delegate contains the implementation logic for a <xref:System.Windows.Input.RoutedCommand>.</span></span>  <span data-ttu-id="e0f4f-105">通过从命令分离实现逻辑，可从不同的源和类型调用命令，并实现命令逻辑的集中。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-105">Separating the implementation logic from the command allows the command to be invoked from different sources and types, and enables the centralization of command logic.</span></span>  
  
 <span data-ttu-id="e0f4f-106">此委托还用于 <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> 和，它们 <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType> 是 <xref:System.Windows.Input.CommandManager> 类上实现许多命令基础结构的附加事件。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-106">This delegate is also used for <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> and <xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=nameWithType>, which are attached events on the <xref:System.Windows.Input.CommandManager> class that implements much of the commanding infrastructure.</span></span> <span data-ttu-id="e0f4f-107">但大多数实际处理程序将处理 <xref:System.Windows.Input.CommandBinding.Executed> 来自特定的事件 <xref:System.Windows.Input.CommandBinding> ，而不是在 <xref:System.Windows.Input.CommandManager> 级别工作。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-107">But most practical handlers will handle the <xref:System.Windows.Input.CommandBinding.Executed> events from a particular <xref:System.Windows.Input.CommandBinding>, rather than work at the <xref:System.Windows.Input.CommandManager> level.</span></span>  
  
 <span data-ttu-id="e0f4f-108">在中 <xref:System.Windows.Input.ExecutedRoutedEventArgs> ，当你为已执行的命令生成的路由事件编写事件处理程序时，通常会对以下属性感兴趣：</span><span class="sxs-lookup"><span data-stu-id="e0f4f-108">Within <xref:System.Windows.Input.ExecutedRoutedEventArgs>, the following properties are generally of interest when you write an event handler for a routed event that results from an executed command:</span></span>  
  
-   <span data-ttu-id="e0f4f-109"><xref:System.Windows.RoutedEventArgs.Source%2A> 报告执行命令的目标。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-109"><xref:System.Windows.RoutedEventArgs.Source%2A> reports the target where the command was executed.</span></span> <span data-ttu-id="e0f4f-110">执行此命令后，你还可以将 <xref:System.Windows.RoutedEventArgs.Source%2A> 路由事件术语中更常见的视为引发路由事件的对象。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-110">Once the command is executed, you can also think of the <xref:System.Windows.RoutedEventArgs.Source%2A> more generally in routed event terms, as the object that raised a routed event.</span></span>  
  
-   <span data-ttu-id="e0f4f-111"><xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> 报告执行的命令。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-111"><xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> reports the command that executed.</span></span> <span data-ttu-id="e0f4f-112">如果使用命令绑定并且编写可能处理多个命令的处理程序，则此属性很有用。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-112">This property is useful if you use command bindings and if you write handlers that potentially handle multiple commands.</span></span>  
  
-   <span data-ttu-id="e0f4f-113"><xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> 报告执行命令传递的任何特定于命令的参数。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-113"><xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> reports any command-specific parameters that were passed by the executing command.</span></span> <span data-ttu-id="e0f4f-114">并非所有命令都使用或需要命令特定的参数。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-114">Not all commands use or expect command-specific parameters.</span></span>  
  
-   <span data-ttu-id="e0f4f-115"><xref:System.Windows.RoutedEventArgs.Handled%2A> 报告由执行命令产生的路由事件是否已由路由中的其他元素处理。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-115"><xref:System.Windows.RoutedEventArgs.Handled%2A> reports whether the routed event that resulted from the executed command was already handled by a different element along the route.</span></span> <span data-ttu-id="e0f4f-116">对于路由事件处理程序，建议在处理要设置为的事件时，让处理程序执行有意义的 <xref:System.Windows.RoutedEventArgs.Handled%2A> 工作 `true` 。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-116">For routed event handlers, it is a recommended practice to have handlers that do meaningful work when handling the event to set <xref:System.Windows.RoutedEventArgs.Handled%2A> to `true`.</span></span> <span data-ttu-id="e0f4f-117">这会阻止事件的典型处理程序再次沿着路由再次处理事件。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-117">This prevents typical handlers for the event from handling the event again further along the route.</span></span> <span data-ttu-id="e0f4f-118">有关处理路由事件的详细信息，请参阅将 [路由事件标记为 "已处理" 和 "类处理](/dotnet/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling)"。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-118">For more information on handling routed events, see [Marking Routed Events as Handled, and Class Handling](/dotnet/framework/wpf/advanced/marking-routed-events-as-handled-and-class-handling).</span></span>  
  
 <span data-ttu-id="e0f4f-119">此委托还表示和的处理程序 <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> <xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=nameWithType> ，它们是 <xref:System.Windows.Input.CommandManager> 类上实现许多命令基础结构的附加事件。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-119">This delegate also represents handlers for <xref:System.Windows.Input.CommandManager.Executed?displayProperty=nameWithType> and <xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=nameWithType>, which are attached events on the <xref:System.Windows.Input.CommandManager> class that implements much of the commanding infrastructure.</span></span> <span data-ttu-id="e0f4f-120">但大多数实际处理程序将处理 <xref:System.Windows.Input.CommandBinding.Executed> 来自特定的事件 <xref:System.Windows.Input.CommandBinding> ，而不是在 <xref:System.Windows.Input.CommandManager> 级别工作。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-120">But most practical handlers will handle the <xref:System.Windows.Input.CommandBinding.Executed> events from a particular <xref:System.Windows.Input.CommandBinding>, rather than work at the <xref:System.Windows.Input.CommandManager> level.</span></span>  
  
 <span data-ttu-id="e0f4f-121">有关命令的详细信息，请参阅[命令概述](/dotnet/framework/wpf/advanced/commanding-overview)。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-121">For more information on commanding, see [Commanding Overview](/dotnet/framework/wpf/advanced/commanding-overview).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e0f4f-122">此示例创建一个 <xref:System.Windows.Input.ExecutedRoutedEventHandler> ，它在执行命令时在目标上设置一个视觉对象属性。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-122">This example creates an <xref:System.Windows.Input.ExecutedRoutedEventHandler> that sets a visual property on the target when the command is executed.</span></span> <span data-ttu-id="e0f4f-123">该示例还包括 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> 用于同一命令的。</span><span class="sxs-lookup"><span data-stu-id="e0f4f-123">The example also includes the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> for the same command.</span></span>  
  
 [!code-csharp[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/csharp/VS_Snippets_Wpf/Custom_RoutedCommand/CSharp/Window1.xaml.cs#custom_routedcommandhandlers)]
 [!code-vb[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/samples/snippets/visualbasic/VS_Snippets_Wpf/Custom_RoutedCommand/visualbasic/window1.xaml.vb#custom_routedcommandhandlers)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventArgs" />
  </Docs>
</Type>
