<Type Name="CanExecuteRoutedEventHandler" FullName="System.Windows.Input.CanExecuteRoutedEventHandler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="3c23ce5e4e5f8cabe9dbfcc860cb524d68d330f4" /><Meta Name="ms.sourcegitcommit" Value="f828282420515ef705e09bbdb6c22116df98b5e3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="07/21/2020" /><Meta Name="ms.locfileid" Value="82497549" /></Metadata><TypeSignature Language="C#" Value="public delegate void CanExecuteRoutedEventHandler(object sender, CanExecuteRoutedEventArgs e);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CanExecuteRoutedEventHandler extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.CanExecuteRoutedEventHandler" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub CanExecuteRoutedEventHandler(sender As Object, e As CanExecuteRoutedEventArgs)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void CanExecuteRoutedEventHandler(System::Object ^ sender, CanExecuteRoutedEventArgs ^ e);" />
  <TypeSignature Language="F#" Value="type CanExecuteRoutedEventHandler = delegate of obj * CanExecuteRoutedEventArgs -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="sender" Type="System.Object" />
    <Parameter Name="e" Type="System.Windows.Input.CanExecuteRoutedEventArgs" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="sender"><span data-ttu-id="3d6bb-101">调用处理程序的命令目标。</span><span class="sxs-lookup"><span data-stu-id="3d6bb-101">The command target that is invoking the handler.</span></span></param>
    <param name="e"><span data-ttu-id="3d6bb-102">事件数据。</span><span class="sxs-lookup"><span data-stu-id="3d6bb-102">The event data.</span></span></param>
    <summary><span data-ttu-id="3d6bb-103">表示用来处理 <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> 事件的方法。</span><span class="sxs-lookup"><span data-stu-id="3d6bb-103">Represents the method that will handle the <see cref="E:System.Windows.Input.CommandBinding.CanExecute" /> event.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="3d6bb-104"><xref:System.Windows.Input.CanExecuteRoutedEventHandler>确定与事件源关联的命令能否对命令目标执行。</span><span class="sxs-lookup"><span data-stu-id="3d6bb-104">The <xref:System.Windows.Input.CanExecuteRoutedEventHandler> determines if the command associated with the event source is able to execute on the command target.</span></span> <span data-ttu-id="3d6bb-105">如果命令具有指定目标的命令源，则可以通过获取目标信息 `sender` 。</span><span class="sxs-lookup"><span data-stu-id="3d6bb-105">If the command has a command source that specifies a target, then the target information can be obtained through `sender`.</span></span> <span data-ttu-id="3d6bb-106">如果 <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> 未设置，则具有键盘焦点的元素是目标，还可以通过获取 `sender` 。</span><span class="sxs-lookup"><span data-stu-id="3d6bb-106">If the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> is not set, the element with keyboard focus is the target, and can also be obtained through `sender`.</span></span>  <span data-ttu-id="3d6bb-107">如果确定命令可以在目标上执行，则 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> 应将属性设置为 `true` ; 否则，请将其设置为 `false` 。</span><span class="sxs-lookup"><span data-stu-id="3d6bb-107">If it is determined that the command can execute on the target, then the <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A?displayProperty=nameWithType> property should be set to `true`; otherwise, set it to `false`.</span></span>  
  
 <span data-ttu-id="3d6bb-108">您无需依赖于事件数据来确定命令、源和目标。</span><span class="sxs-lookup"><span data-stu-id="3d6bb-108">You do not need to rely on event data to determine the command, source, and target.</span></span> <span data-ttu-id="3d6bb-109">你可以将处理程序的使用限制为已知的可能的命令调用，不过，如果你的命令结构广泛依赖于命令路由，以便对事件路由中的后续潜在目标执行相同的命令，则此方法更难实现。</span><span class="sxs-lookup"><span data-stu-id="3d6bb-109">You can limit the usage of the handler to known possible command invocations, although this is more difficult to accomplish if your command structure relies extensively on the command routing to execute the same command on successive potential targets in an event route.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="3d6bb-110">下面的示例演示了一个 <xref:System.Windows.Input.CanExecuteRoutedEventHandler> 设置 <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> 为的 `true` 。</span><span class="sxs-lookup"><span data-stu-id="3d6bb-110">The following example shows a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> that sets <xref:System.Windows.Input.CanExecuteRoutedEventArgs.CanExecute%2A> to `true`.</span></span>  
  
 [!code-csharp[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/csharp/VS_Snippets_Wpf/commandWithHandler/CSharp/Window1.xaml.cs#commandhandlercanexecutehandler)]
 [!code-vb[commandwithhandler#CommandHandlerCanExecuteHandler](~/samples/snippets/visualbasic/VS_Snippets_Wpf/commandWithHandler/VisualBasic/Window1.xaml.vb#commandhandlercanexecutehandler)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.CommandBinding" />
    <altmember cref="T:System.Windows.Input.ExecutedRoutedEventHandler" />
  </Docs>
</Type>
