<Type Name="KeyEventArgs" FullName="System.Windows.Input.KeyEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2ac1f0571bfa4b753ca1f67f05646c1fa16e98ea" /><Meta Name="ms.sourcegitcommit" Value="9f423345753728e8cad38d4a22663a109e69ea91" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="zh-CN" /><Meta Name="ms.lasthandoff" Value="03/04/2021" /><Meta Name="ms.locfileid" Value="102059880" /></Metadata><TypeSignature Language="C#" Value="public class KeyEventArgs : System.Windows.Input.KeyboardEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyEventArgs extends System.Windows.Input.KeyboardEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.KeyEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyEventArgs&#xA;Inherits KeyboardEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyEventArgs : System::Windows::Input::KeyboardEventArgs" />
  <TypeSignature Language="F#" Value="type KeyEventArgs = class&#xA;    inherit KeyboardEventArgs" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>5.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Input.KeyboardEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="08f4b-101">为 <see cref="E:System.Windows.UIElement.KeyUp" /> 和 <see cref="E:System.Windows.UIElement.KeyDown" /> 路由事件以及相关的附加和预览事件提供数据。</span><span class="sxs-lookup"><span data-stu-id="08f4b-101">Provides data for the <see cref="E:System.Windows.UIElement.KeyUp" /> and <see cref="E:System.Windows.UIElement.KeyDown" /> routed events, as well as related attached and Preview events.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08f4b-102">此事件数据类与以下附加事件一起使用：</span><span class="sxs-lookup"><span data-stu-id="08f4b-102">This event data class is used with the following attached events:</span></span>  
  
-   <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=nameWithType>  
  
 <span data-ttu-id="08f4b-103">此事件数据类还与基元素上的以下路由事件一起使用。</span><span class="sxs-lookup"><span data-stu-id="08f4b-103">This event data class is also used with the following routed events on base elements.</span></span> <span data-ttu-id="08f4b-104">这些路由事件转发前面列出的附加事件，使其更易于访问 WPF 中的常规元素模型。</span><span class="sxs-lookup"><span data-stu-id="08f4b-104">These routed events forward the previously listed attached events to make them more accessible to the general element model in WPF.</span></span>  
  
-   <xref:System.Windows.UIElement.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.KeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.KeyDown?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=nameWithType>  
  
-   <xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=nameWithType>  
  
 <span data-ttu-id="08f4b-105">附加事件和基本元素路由事件共享其事件数据，路由事件的冒泡和隧道版本也共享事件数据。</span><span class="sxs-lookup"><span data-stu-id="08f4b-105">The attached events and the base element routed events share their event data, and the bubbling and tunneling versions of the routed events also share event data.</span></span> <span data-ttu-id="08f4b-106">这可能会影响事件在传输事件路由时的已处理特性。</span><span class="sxs-lookup"><span data-stu-id="08f4b-106">This can affect the handled characteristics of the event as it travels the event route.</span></span> <span data-ttu-id="08f4b-107">有关详细信息，请参阅 [输入概述](/dotnet/framework/wpf/advanced/input-overview)。</span><span class="sxs-lookup"><span data-stu-id="08f4b-107">For details, see [Input Overview](/dotnet/framework/wpf/advanced/input-overview).</span></span>  
  
 <span data-ttu-id="08f4b-108">键可以同时处于启动和切换状态，也可以是关闭状态和切换状态。</span><span class="sxs-lookup"><span data-stu-id="08f4b-108">A key can be in both the up and toggled states or the down and toggled states.</span></span> <span data-ttu-id="08f4b-109">出于此原因，确定键是否向上或向下键不像将值作为数值来检查一样简单 <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08f4b-109">For this reason, determining whether a key is up or down is not as simple as checking the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> value as a numeric value.</span></span> <span data-ttu-id="08f4b-110">相反，应通过将值视为标志枚举来检查值。</span><span class="sxs-lookup"><span data-stu-id="08f4b-110">Instead, you should check the value by treating it as a flag enumeration.</span></span> <span data-ttu-id="08f4b-111">使用 `AND` 第一位的比较。</span><span class="sxs-lookup"><span data-stu-id="08f4b-111">Use an `AND` comparison of the first bit.</span></span> <span data-ttu-id="08f4b-112">此外，还可以使用帮助器属性 <xref:System.Windows.Input.KeyEventArgs.IsUp%2A> 、 <xref:System.Windows.Input.KeyEventArgs.IsDown%2A> 和 <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> 来确定给定键是向上、向下还是已切换。</span><span class="sxs-lookup"><span data-stu-id="08f4b-112">Alternatively, use the helper properties <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, and <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> to determine whether a given key is up, down, or toggled.</span></span>  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Input.KeyEventHandler" />
    <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
    <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyEventArgs (System.Windows.Input.KeyboardDevice keyboard, System.Windows.PresentationSource inputSource, int timestamp, System.Windows.Input.Key key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Input.KeyboardDevice keyboard, class System.Windows.PresentationSource inputSource, int32 timestamp, valuetype System.Windows.Input.Key key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keyboard As KeyboardDevice, inputSource As PresentationSource, timestamp As Integer, key As Key)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyEventArgs(System::Windows::Input::KeyboardDevice ^ keyboard, System::Windows::PresentationSource ^ inputSource, int timestamp, System::Windows::Input::Key key);" />
      <MemberSignature Language="F#" Value="new System.Windows.Input.KeyEventArgs : System.Windows.Input.KeyboardDevice * System.Windows.PresentationSource * int * System.Windows.Input.Key -&gt; System.Windows.Input.KeyEventArgs" Usage="new System.Windows.Input.KeyEventArgs (keyboard, inputSource, timestamp, key)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="keyboard" Type="System.Windows.Input.KeyboardDevice" />
        <Parameter Name="inputSource" Type="System.Windows.PresentationSource" />
        <Parameter Name="timestamp" Type="System.Int32" />
        <Parameter Name="key" Type="System.Windows.Input.Key" />
      </Parameters>
      <Docs>
        <param name="keyboard"><span data-ttu-id="08f4b-113">与此事件关联的逻辑键盘设备。</span><span class="sxs-lookup"><span data-stu-id="08f4b-113">The logical keyboard device associated with this event.</span></span></param>
        <param name="inputSource"><span data-ttu-id="08f4b-114">输入源。</span><span class="sxs-lookup"><span data-stu-id="08f4b-114">The input source.</span></span></param>
        <param name="timestamp"><span data-ttu-id="08f4b-115">发生输入的时间。</span><span class="sxs-lookup"><span data-stu-id="08f4b-115">The time when the input occurred.</span></span></param>
        <param name="key"><span data-ttu-id="08f4b-116">事件引用的键。</span><span class="sxs-lookup"><span data-stu-id="08f4b-116">The key referenced by the event.</span></span></param>
        <summary><span data-ttu-id="08f4b-117">初始化 <see cref="T:System.Windows.Input.KeyEventArgs" /> 类的新实例。</span><span class="sxs-lookup"><span data-stu-id="08f4b-117">Initializes a new instance of the <see cref="T:System.Windows.Input.KeyEventArgs" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="DeadCharProcessedKey">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key DeadCharProcessedKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key DeadCharProcessedKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.DeadCharProcessedKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeadCharProcessedKey As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key DeadCharProcessedKey { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.DeadCharProcessedKey : System.Windows.Input.Key" Usage="System.Windows.Input.KeyEventArgs.DeadCharProcessedKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08f4b-118">获取作为语音符号键构成的一部分以创建一个组合字符的键。</span><span class="sxs-lookup"><span data-stu-id="08f4b-118">Gets the key that is part of dead key composition to create a single combined character.</span></span></summary>
        <value><span data-ttu-id="08f4b-119">作为语音符号键构成的一部分以创建一个组合字符的键。</span><span class="sxs-lookup"><span data-stu-id="08f4b-119">The key that is part of dead key composition to create a single combined character.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08f4b-120">当按下时，死键不会生成任何可见字符，而是指示该密钥将与按下一个字母键生成的字符组合在一起。</span><span class="sxs-lookup"><span data-stu-id="08f4b-120">A dead key, when pressed, produces no visible character but indicates that the key is to be combined with the character produced by the next letter key pressed.</span></span>  <span data-ttu-id="08f4b-121">如果 <xref:System.Windows.Input.KeyEventArgs.Key%2A> 返回 <xref:System.Windows.Input.Key.DeadCharProcessed?displayProperty=nameWithType> ，则可以使用此属性来获取输入的实际密钥。</span><span class="sxs-lookup"><span data-stu-id="08f4b-121">If <xref:System.Windows.Input.KeyEventArgs.Key%2A> returns <xref:System.Windows.Input.Key.DeadCharProcessed?displayProperty=nameWithType>, you can use this property to get the actual key that was entered.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImeProcessedKey">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key ImeProcessedKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key ImeProcessedKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.ImeProcessedKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ImeProcessedKey As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key ImeProcessedKey { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.ImeProcessedKey : System.Windows.Input.Key" Usage="System.Windows.Input.KeyEventArgs.ImeProcessedKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08f4b-122">获取事件引用的键盘键（如果输入法编辑器将处理该键 (IME) 。</span><span class="sxs-lookup"><span data-stu-id="08f4b-122">Gets the keyboard key referenced by the event, if the key will be processed by an Input Method Editor (IME).</span></span></summary>
        <value><span data-ttu-id="08f4b-123">事件引用的 <see cref="T:System.Windows.Input.Key" />。</span><span class="sxs-lookup"><span data-stu-id="08f4b-123">The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="InputSource">
      <MemberSignature Language="C#" Value="public System.Windows.PresentationSource InputSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.PresentationSource InputSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.InputSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InputSource As PresentationSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::PresentationSource ^ InputSource { System::Windows::PresentationSource ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InputSource : System.Windows.PresentationSource" Usage="System.Windows.Input.KeyEventArgs.InputSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName Language="C#">[get: System.Security.SecurityCritical]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Security.SecurityCritical&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.PresentationSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08f4b-124">获取提供此输入的输入源。</span><span class="sxs-lookup"><span data-stu-id="08f4b-124">Gets the input source that provided this input.</span></span></summary>
        <value><span data-ttu-id="08f4b-125">输入源。</span><span class="sxs-lookup"><span data-stu-id="08f4b-125">The input source.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="InvokeEventHandler">
      <MemberSignature Language="C#" Value="protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InvokeEventHandler(class System.Delegate genericHandler, object genericTarget) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub InvokeEventHandler (genericHandler As Delegate, genericTarget As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InvokeEventHandler(Delegate ^ genericHandler, System::Object ^ genericTarget);" />
      <MemberSignature Language="F#" Value="override this.InvokeEventHandler : Delegate * obj -&gt; unit" Usage="keyEventArgs.InvokeEventHandler (genericHandler, genericTarget)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="genericHandler" Type="System.Delegate" />
        <Parameter Name="genericTarget" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="genericHandler"><span data-ttu-id="08f4b-126">以特定于类型的方式调用的一般处理程序。</span><span class="sxs-lookup"><span data-stu-id="08f4b-126">The generic handler to call in a type-specific way.</span></span></param>
        <param name="genericTarget"><span data-ttu-id="08f4b-127">要对其调用处理程序的目标。</span><span class="sxs-lookup"><span data-stu-id="08f4b-127">The target to call the handler on.</span></span></param>
        <summary><span data-ttu-id="08f4b-128">以特定于类型的方式调用事件处理程序，这样做可以提高事件系统效率。</span><span class="sxs-lookup"><span data-stu-id="08f4b-128">Invokes event handlers in a type-specific way, which can increase event system efficiency.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08f4b-129">此实现将泛型处理程序强制转换为 <xref:System.Windows.Input.KeyEventHandler> ，然后调用它。</span><span class="sxs-lookup"><span data-stu-id="08f4b-129">This implementation casts the generic handler as a <xref:System.Windows.Input.KeyEventHandler> and then invokes it.</span></span> <span data-ttu-id="08f4b-130">有关此实现模式及其原因的详细信息，请参阅 <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> 和 [路由事件概述](/dotnet/framework/wpf/advanced/routed-events-overview)。</span><span class="sxs-lookup"><span data-stu-id="08f4b-130">For details on this implementation pattern and the reasons for it, see <xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A> and [Routed Events Overview](/dotnet/framework/wpf/advanced/routed-events-overview).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDown">
      <MemberSignature Language="C#" Value="public bool IsDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDown" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDown : bool" Usage="System.Windows.Input.KeyEventArgs.IsDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08f4b-131">获取指示事件引用的键是否处于按下状态的值。</span><span class="sxs-lookup"><span data-stu-id="08f4b-131">Gets a value that indicates whether the key referenced by the event is in the down state.</span></span></summary>
        <value><span data-ttu-id="08f4b-132">如果该键处于按下状态，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08f4b-132"><see langword="true" /> if the key is down; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08f4b-133"><xref:System.Windows.Input.Keyboard>类还提供有关键盘上的键的状态的信息。</span><span class="sxs-lookup"><span data-stu-id="08f4b-133">The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.</span></span> <span data-ttu-id="08f4b-134">例如， <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> 方法会返回指定的键是否已关闭。</span><span class="sxs-lookup"><span data-stu-id="08f4b-134">For instance, the <xref:System.Windows.Input.Keyboard.IsKeyDown%2A> method returns whether a specified key is down.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08f4b-135">下面的示例通过获取属性的状态来检查与实例关联的键是否 <xref:System.Windows.Input.KeyEventArgs> 已关闭 <xref:System.Windows.Input.KeyEventArgs.IsDown%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08f4b-135">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsDown%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsDown](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisdown)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisdown)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsRepeat">
      <MemberSignature Language="C#" Value="public bool IsRepeat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRepeat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsRepeat" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRepeat As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRepeat { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRepeat : bool" Usage="System.Windows.Input.KeyEventArgs.IsRepeat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08f4b-136">获取指示事件引用的键盘键是否为重复键的值。</span><span class="sxs-lookup"><span data-stu-id="08f4b-136">Gets a value that indicates whether the keyboard key referenced by the event is a repeated key.</span></span></summary>
        <value><span data-ttu-id="08f4b-137">如果该键是重复的，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08f4b-137"><see langword="true" /> if the key is repeated; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="08f4b-138">无默认值。</span><span class="sxs-lookup"><span data-stu-id="08f4b-138">There is no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="08f4b-139">下面的示例通过获取属性的状态来检查与实例关联的键是否 <xref:System.Windows.Input.KeyEventArgs> 为重复键 <xref:System.Windows.Input.KeyEventArgs.IsRepeat%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08f4b-139">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is a repeated key by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsRepeat%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsRepeat](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisrepeat)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsRepeat](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisrepeat)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsToggled">
      <MemberSignature Language="C#" Value="public bool IsToggled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsToggled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsToggled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsToggled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsToggled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsToggled : bool" Usage="System.Windows.Input.KeyEventArgs.IsToggled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08f4b-140">获取指示事件引用的键是否处于切换状态的值。</span><span class="sxs-lookup"><span data-stu-id="08f4b-140">Gets a value that indicates whether the key referenced by the event is in the toggled state.</span></span></summary>
        <value><span data-ttu-id="08f4b-141">如果该键处于切换状态，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08f4b-141"><see langword="true" /> if the key is toggled; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="08f4b-142">无默认值。</span><span class="sxs-lookup"><span data-stu-id="08f4b-142">There is no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08f4b-143"><xref:System.Windows.Input.Keyboard>类还提供有关键盘上的键的状态的信息。</span><span class="sxs-lookup"><span data-stu-id="08f4b-143">The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.</span></span> <span data-ttu-id="08f4b-144">例如， <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> 方法会返回指定键是否已切换。</span><span class="sxs-lookup"><span data-stu-id="08f4b-144">For instance, the <xref:System.Windows.Input.Keyboard.IsKeyToggled%2A> method returns whether a specified key is toggled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08f4b-145">下面的示例 <xref:System.Windows.Input.KeyEventArgs> 通过获取属性的状态来检查是否切换了与实例关联的键 <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08f4b-145">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is toggled by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsToggled](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsistoggled)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsToggled](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsistoggled)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="IsUp">
      <MemberSignature Language="C#" Value="public bool IsUp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUp" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.IsUp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUp { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUp : bool" Usage="System.Windows.Input.KeyEventArgs.IsUp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08f4b-146">获取指示事件引用的键是否处于松开状态的值。</span><span class="sxs-lookup"><span data-stu-id="08f4b-146">Gets a value that indicates whether the key referenced by the event is in the up state.</span></span></summary>
        <value><span data-ttu-id="08f4b-147">如果该键处于松开状态，则为 <see langword="true" />；否则为 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="08f4b-147"><see langword="true" /> if the key is up; otherwise, <see langword="false" />.</span></span>  <span data-ttu-id="08f4b-148">无默认值。</span><span class="sxs-lookup"><span data-stu-id="08f4b-148">There is no default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08f4b-149"><xref:System.Windows.Input.Keyboard>类还提供有关键盘上的键的状态的信息。</span><span class="sxs-lookup"><span data-stu-id="08f4b-149">The <xref:System.Windows.Input.Keyboard> class also provides information about the state of the keys on the keyboard.</span></span>  <span data-ttu-id="08f4b-150">例如， <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> 方法会返回指定的是否为 up。</span><span class="sxs-lookup"><span data-stu-id="08f4b-150">For instance, the <xref:System.Windows.Input.Keyboard.IsKeyUp%2A> method returns whether a specified is up.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08f4b-151">下面的示例通过获取属性的状态来检查与实例关联的键是否 <xref:System.Windows.Input.KeyEventArgs> 向上 <xref:System.Windows.Input.KeyEventArgs.IsUp%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08f4b-151">The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is up by obtaining the state of the <xref:System.Windows.Input.KeyEventArgs.IsUp%2A> property.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsIsUp](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargsisup)]
 [!code-vb[keyargssnippetsample#KeyEventArgsIsUp](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargsisup)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="Key">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key Key { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key Key" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.Key" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Key As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key Key { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.Key : System.Windows.Input.Key" Usage="System.Windows.Input.KeyEventArgs.Key" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName Language="C#">[get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08f4b-152">获取与事件关联的键盘键。</span><span class="sxs-lookup"><span data-stu-id="08f4b-152">Gets the keyboard key associated with the event.</span></span></summary>
        <value><span data-ttu-id="08f4b-153">事件引用的 <see cref="T:System.Windows.Input.Key" />。</span><span class="sxs-lookup"><span data-stu-id="08f4b-153">The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="08f4b-154">下面的示例创建一个 <xref:System.Windows.Input.KeyEventHandler> ，并检查与关联的键是否 <xref:System.Windows.Input.KeyEventArgs> 是 <xref:System.Windows.Input.Key.Return> 键。</span><span class="sxs-lookup"><span data-stu-id="08f4b-154">The following example creates a <xref:System.Windows.Input.KeyEventHandler> and checks whether the key associated with the <xref:System.Windows.Input.KeyEventArgs> is the <xref:System.Windows.Input.Key.Return> key.</span></span>  
  
 [!code-csharp[keydown#KeyDownSample](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyDown/CSharp/Window1.xaml.cs#keydownsample)]
 [!code-vb[keydown#KeyDownSample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyDown/VisualBasic/Window1.xaml.vb#keydownsample)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="KeyStates">
      <MemberSignature Language="C#" Value="public System.Windows.Input.KeyStates KeyStates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.KeyStates KeyStates" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.KeyStates" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyStates As KeyStates" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::KeyStates KeyStates { System::Windows::Input::KeyStates get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyStates : System.Windows.Input.KeyStates" Usage="System.Windows.Input.KeyEventArgs.KeyStates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.KeyStates</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08f4b-155">获取与此事件关联的键盘键的状态。</span><span class="sxs-lookup"><span data-stu-id="08f4b-155">Gets the state of the keyboard key associated with this event.</span></span></summary>
        <value><span data-ttu-id="08f4b-156">键的状态。</span><span class="sxs-lookup"><span data-stu-id="08f4b-156">The state of the key.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="08f4b-157">键可以同时处于启动和切换状态，也可以是关闭状态和切换状态。</span><span class="sxs-lookup"><span data-stu-id="08f4b-157">A key can be in both the up and toggled states or the down and toggled states.</span></span> <span data-ttu-id="08f4b-158">出于此原因，确定键是否向上或向下键不像将值作为数值来检查一样简单 <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> 。</span><span class="sxs-lookup"><span data-stu-id="08f4b-158">For this reason, determining whether a key is up or down is not as simple as checking the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> value as a numeric value.</span></span> <span data-ttu-id="08f4b-159">相反，应通过将值视为标志枚举来检查值。</span><span class="sxs-lookup"><span data-stu-id="08f4b-159">Instead, you should check the value by treating it as a flag enumeration.</span></span> <span data-ttu-id="08f4b-160">使用 `AND` 第一位的比较。</span><span class="sxs-lookup"><span data-stu-id="08f4b-160">Use an `AND` comparison of the first bit.</span></span> <span data-ttu-id="08f4b-161">此外，还可以使用帮助器属性 <xref:System.Windows.Input.KeyEventArgs.IsUp%2A> 、 <xref:System.Windows.Input.KeyEventArgs.IsDown%2A> 和 <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> 来确定给定键是向上、向下还是已切换。</span><span class="sxs-lookup"><span data-stu-id="08f4b-161">Alternatively, use the helper properties <xref:System.Windows.Input.KeyEventArgs.IsUp%2A>, <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>, and <xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> to determine whether a given key is up, down, or toggled.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="08f4b-162">下面的示例 <xref:System.Windows.Input.KeyEventArgs> 通过 `AND` 对 <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> 键的和枚举值执行按位比较来检查与实例关联的键是否已关闭 <xref:System.Windows.Input.KeyStates.Down> 。</span><span class="sxs-lookup"><span data-stu-id="08f4b-162">The following example checks whether a key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by performing a bitwise `AND` comparison on the <xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> of the key and the <xref:System.Windows.Input.KeyStates.Down> enumeration value.</span></span>  
  
 [!code-csharp[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/samples/snippets/csharp/VS_Snippets_Wpf/KeyArgsSnippetSample/CSharp/Window1.xaml.cs#keyeventargskeystatesdown)]
 [!code-vb[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/samples/snippets/visualbasic/VS_Snippets_Wpf/KeyArgsSnippetSample/visualbasic/window1.xaml.vb#keyeventargskeystatesdown)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="SystemKey">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Key SystemKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.Key SystemKey" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.KeyEventArgs.SystemKey" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SystemKey As Key" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Key SystemKey { System::Windows::Input::Key get(); };" />
      <MemberSignature Language="F#" Value="member this.SystemKey : System.Windows.Input.Key" Usage="System.Windows.Input.KeyEventArgs.SystemKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>5.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Key</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="08f4b-163">如果事件引用的键盘键将由系统处理，则获取此键。</span><span class="sxs-lookup"><span data-stu-id="08f4b-163">Gets the keyboard key referenced by the event, if the key will be processed by the system.</span></span></summary>
        <value><span data-ttu-id="08f4b-164">事件引用的 <see cref="T:System.Windows.Input.Key" />。</span><span class="sxs-lookup"><span data-stu-id="08f4b-164">The <see cref="T:System.Windows.Input.Key" /> referenced by the event.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Input.KeyEventHandler" />
        <altmember cref="T:System.Windows.Input.KeyboardEventArgs" />
        <altmember cref="T:System.Windows.Input.KeyboardEventHandler" />
      </Docs>
    </Member>
  </Members>
</Type>
